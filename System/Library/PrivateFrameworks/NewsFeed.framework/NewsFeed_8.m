void sub_1BA9AA024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = swift_allocObject();
  sub_1BA9A9F94(v4, v7);
  if (v2)
  {
    swift_deallocUninitializedObject();
  }
  else
  {
    sub_1BA9A9F94(v4, v6);
    v9 = *(_QWORD *)(v5 - 128);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 - 208);
    *(_QWORD *)(v8 + 24) = v9;
    *v3 = v8 | 0x3000000000000000;
  }
  JUMPOUT(0x1BA9A9FF4);
}

uint64_t FormatSymbolImage.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return sub_1BA60DF54(v2, v3, v4, v5);
}

uint64_t FormatSymbolImage.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(unsigned __int16 *)(v1 + 48);
  *(_WORD *)(a1 + 16) = v4;
  return sub_1BA740E74(v2, v3, v4);
}

uint64_t FormatSymbolImage.fill.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  *a1 = v2;
  a1[1] = v3;
  return sub_1BA60DEE4(v2);
}

uint64_t FormatSymbolImage.internal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1BA69C808(v2, v3, v4);
}

uint64_t sub_1BA9AA7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_BYTE *)(a2 + 88);
  sub_1BA69C808(*(_QWORD *)a1, v4, v5);
  result = sub_1BA69C828(v6, v7, v8);
  *(_QWORD *)(a2 + 72) = v3;
  *(_QWORD *)(a2 + 80) = v4;
  *(_BYTE *)(a2 + 88) = v5;
  return result;
}

uint64_t FormatSymbolImage.internal.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = sub_1BA69C828(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 88) = v4;
  return result;
}

uint64_t (*FormatSymbolImage.internal.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FormatSymbolImage.color.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + 96);
  *a1 = v2;
  return sub_1BA895BA4(v2);
}

void FormatSymbolImageColor.symbolConfiguration(context:)()
{
  __asm { BR              X10 }
}

id sub_1BA9AA8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v4 = (id)sub_1BA9AE93C(v3, v2);
  swift_release();
  if (!v0)
  {
    sub_1BA748DB8();
    v5 = (void *)sub_1BB872D9C();
    swift_bridgeObjectRelease();
    v4 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPaletteColors_, v5);

  }
  return v4;
}

void sub_1BA9AAA4C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = (void *)objc_opt_self();
  if (v0 == 0xC000000000000000)
    v2 = objc_msgSend(v1, sel_configurationPreferringMulticolor);
  else
    v3 = objc_msgSend(v1, sel_configurationPreferringMonochrome);
  JUMPOUT(0x1BA9AAA30);
}

uint64_t FormatSymbolImageFill.fillColor.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t FormatSymbolImageFill.symbolColor.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t sub_1BA9AAB24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSymbolImageFill.init(from:)(a1, a2);
}

uint64_t sub_1BA9AAB38(_QWORD *a1)
{
  return FormatSymbolImageFill.encode(to:)(a1);
}

void static FormatSymbolImageColor.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AAB90()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (v0 >> 62)
  {
    sub_1BA739250(v0);
    sub_1BA739250(v1);
    sub_1BA6F5D74(v1);
    sub_1BA6F5D74(v0);
    v4 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v0 + 16);
    sub_1BA739250(v0);
    sub_1BA739250(v1);
    v4 = sub_1BA891D34(v2, v3);
    sub_1BA6F5D74(v1);
    sub_1BA6F5D74(v0);
  }
  return v4 & 1;
}

uint64_t sub_1BA9AAD94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSymbolImageColor.init(from:)(a1, a2);
}

void sub_1BA9AADA8(_QWORD *a1)
{
  FormatSymbolImageColor.encode(to:)(a1);
}

uint64_t sub_1BA9AADC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_1BA9AB13C(a1, a2, a3);
  return v3 & 1;
}

void sub_1BA9AADE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AAE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  swift_retain();
  swift_retain_n();
  v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AADE8)(v5, v4, v7);
  if (v3)
  {
    swift_release();
    swift_release_n();
  }
  else
  {
    v9 = v8;
    swift_release();
    if ((v9 & 1) != 0)
    {
      sub_1BA7FCD4C(v4);
      swift_retain();
      LOBYTE(v6) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AADE8)(v5, v4, v6);
      swift_release();
      sub_1BA7FCCC4(v4);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      LOBYTE(v6) = 0;
    }
  }
  return v6 & 1;
}

uint64_t sub_1BA9AB114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_1BA9AB13C(a1, a2, a3);
  return v3 & 1;
}

void sub_1BA9AB13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AB18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  swift_retain();
  swift_retain_n();
  v9 = v5(v6, v4, v8);
  if (v3)
  {
    swift_release();
    swift_release_n();
  }
  else
  {
    v10 = v9;
    swift_release();
    if ((v10 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      LOBYTE(v7) = v5(v6, v4, v7);
      swift_release();
      swift_release();
      swift_release_n();
    }
    else
    {
      swift_release();
      swift_release();
      LOBYTE(v7) = 0;
    }
  }
  return v7 & 1;
}

void sub_1BA9AB47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for FormatOptionsNodeStatementContext();
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AB514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  swift_retain();
  swift_retain_n();
  v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AB47C)(v3, v2, v6);
  if (v0)
  {
    swift_release();
    swift_release_n();
  }
  else
  {
    v8 = v7;
    swift_release();
    sub_1BA4C2DD8(v2, v4, (uint64_t (*)(_QWORD))type metadata accessor for FormatOptionsNodeStatementContext);
    if ((v8 & 1) != 0)
    {
      swift_retain();
      LOBYTE(v5) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AB47C)(v3, v4, v5);
      swift_release();
    }
    else
    {
      LOBYTE(v5) = 0;
    }
    sub_1BA4A2E80(v4, (uint64_t (*)(_QWORD))type metadata accessor for FormatOptionsNodeStatementContext);
    swift_release();
    swift_release();
  }
  return v5 & 1;
}

void sub_1BA9AB888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AB8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  swift_retain();
  swift_retain_n();
  v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AB888)(v4, v5, v6);
  if (v3)
  {
    swift_release();
    swift_release_n();
  }
  else
  {
    v9 = v8;
    swift_release();
    if ((v9 & 1) != 0)
    {
      sub_1BA9AF608(v5);
      swift_retain();
      LOBYTE(v4) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BA9AB888)(v4, v5, v7);
      swift_release();
      sub_1BA9AF89C(v5);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      LOBYTE(v4) = 0;
    }
  }
  return v4 & 1;
}

void sub_1BA9ABB44(uint64_t a1, uint64_t a2)
{
  sub_1BA9ABDD8(a1, a2);
}

void sub_1BA9ABB68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_1BA9ABBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = swift_allocObject();
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BA9ABB68)(&v12, v4, v6);
  if (v2)
    return (_QWORD *)swift_deallocUninitializedObject();
  v8 = v12;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BA9ABB68)(&v11, v4, v5);
  v10 = v11;
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 24) = v10;
  *v3 = v7;
  return result;
}

void sub_1BA9ABDB4(uint64_t a1, uint64_t a2)
{
  sub_1BA9ABDD8(a1, a2);
}

void sub_1BA9ABDD8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_1BA9ABE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = swift_allocObject();
  v4(&v13, v5, v7);
  if (v2)
    return (_QWORD *)swift_deallocUninitializedObject();
  v9 = v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v4)(&v12, v5, v6);
  v11 = v12;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = v11;
  *v3 = v8;
  return result;
}

void sub_1BA9AC034(uint64_t a1, uint64_t a2)
{
  sub_1BA7E62EC(a1, a2);
}

void sub_1BA9AC058(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_1BA9AC09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = swift_allocObject();
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BA9AC058)(&v12, v4, v6);
  if (v2)
    return (_QWORD *)swift_deallocUninitializedObject();
  v8 = v12;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BA9AC058)(&v11, v4, v5);
  v10 = v11;
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 24) = v10;
  *v3 = v7;
  return result;
}

id sub_1BA9AC2A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BA613EA8(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, uint64_t))sub_1BA9AADC0, (uint64_t (*)(id, uint64_t, unint64_t))sub_1BA744980);
}

id sub_1BA9AC2B8(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  char v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;

  v8 = objc_msgSend(a2, sel_resolvedColorWithTraitCollection_, a1);
  swift_retain();
  sub_1BA9AADE8((uint64_t)v8, a5, a3);
  v10 = v9;
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      v12 = v8;
      v13 = 0;
      v8 = v12;
      do
      {
        v14 = v8;
        v15 = *(_QWORD *)(a4 + 8 * v13++ + 32);
        sub_1BA74444C(v15);
        v8 = (id)sub_1BA9A773C(v8, a5, v15);
        sub_1BA74447C(v15);

      }
      while (v11 != v13);

      swift_bridgeObjectRelease_n();
    }
  }
  return v8;
}

id sub_1BA9AC3D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BA613EA8(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, uint64_t))sub_1BA9AB114, (uint64_t (*)(id, uint64_t, unint64_t))sub_1BA9A7C1C);
}

id sub_1BA9AC3EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BA613EA8(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, uint64_t))sub_1BA9AB47C, (uint64_t (*)(id, uint64_t, unint64_t))sub_1BA9A80D4);
}

id sub_1BA9AC400(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  char v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;

  v8 = objc_msgSend(a2, sel_resolvedColorWithTraitCollection_, a1);
  swift_retain();
  sub_1BA9AB888((uint64_t)v8, a5, a3);
  v10 = v9;
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      v12 = v8;
      v13 = 0;
      v8 = v12;
      do
      {
        v14 = v8;
        v15 = *(_QWORD *)(a4 + 8 * v13++ + 32);
        sub_1BA74444C(v15);
        v8 = (id)sub_1BA9A85F4(v8, a5, v15);
        sub_1BA74447C(v15);

      }
      while (v11 != v13);

      swift_bridgeObjectRelease_n();
    }
  }
  return v8;
}

void sub_1BA9AC520(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AC550()
{
  _QWORD *v0;

  type metadata accessor for FormatLayoutError();
  sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
  swift_allocError();
  *v0 = 0xD00000000000007ALL;
  v0[1] = 0x80000001BB964920;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_1BA9AC5D4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v4);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AC66C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  result = sub_1BAF64A7C(*(_QWORD *)(v3 + *v4 + 8), v6 - 240);
  if (!v2)
  {
    v8 = *(_OWORD *)(v6 - 128);
    v9 = *(_OWORD *)(v6 - 144);
    v10 = v8;
    *(_OWORD *)(v0 + 256) = v9;
    *(_OWORD *)(v0 + 272) = v8;
    *(_OWORD *)(v0 + 281) = *(_OWORD *)(v5 + 121);
    v11 = *(_OWORD *)(v6 - 192);
    v12 = *(_OWORD *)(v6 - 208);
    v13 = v11;
    *(_OWORD *)(v0 + 192) = v12;
    *(_OWORD *)(v0 + 208) = v11;
    v14 = *(_OWORD *)(v6 - 160);
    v16 = *(_OWORD *)(v6 - 176);
    v15 = v14;
    *(_OWORD *)(v0 + 224) = v16;
    *(_OWORD *)(v0 + 240) = v14;
    v17 = *(_OWORD *)(v6 - 224);
    v18 = *(_OWORD *)(v6 - 240);
    *(_OWORD *)(v0 + 160) = v18;
    *(_OWORD *)(v0 + 176) = v17;
    *(_OWORD *)(v0 + 112) = v9;
    *(_OWORD *)(v0 + 128) = v10;
    *(_OWORD *)(v0 + 137) = *(_OWORD *)(v5 + 121);
    *(_OWORD *)(v0 + 48) = v12;
    *(_OWORD *)(v0 + 64) = v13;
    *(_OWORD *)(v0 + 80) = v16;
    *(_OWORD *)(v0 + 96) = v15;
    *(_BYTE *)(v0 + 159) = v1;
    *(_OWORD *)(v0 + 16) = v18;
    *(_OWORD *)(v0 + 32) = v17;
    sub_1BACCCD20();
    return sub_1BA8D1FE4(v0 + 160);
  }
  return result;
}

void sub_1BA9AC8F8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v4);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AC98C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  result = sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF64A7C);
  if (!v1)
  {
    v6 = *(_OWORD *)(v4 - 112);
    v7 = *(_OWORD *)(v4 - 128);
    v8 = v6;
    *(_OWORD *)(v0 + 256) = v7;
    *(_OWORD *)(v0 + 272) = v6;
    *(_OWORD *)(v0 + 281) = *(_OWORD *)(v3 + 121);
    v9 = *(_OWORD *)(v4 - 176);
    v10 = *(_OWORD *)(v4 - 192);
    v11 = v9;
    *(_OWORD *)(v0 + 192) = v10;
    *(_OWORD *)(v0 + 208) = v9;
    v12 = *(_OWORD *)(v4 - 144);
    v14 = *(_OWORD *)(v4 - 160);
    v13 = v12;
    *(_OWORD *)(v0 + 224) = v14;
    *(_OWORD *)(v0 + 240) = v12;
    v15 = *(_OWORD *)(v4 - 208);
    v16 = *(_OWORD *)(v4 - 224);
    *(_OWORD *)(v0 + 160) = v16;
    *(_OWORD *)(v0 + 176) = v15;
    *(_OWORD *)(v0 + 112) = v7;
    *(_OWORD *)(v0 + 128) = v8;
    *(_OWORD *)(v0 + 137) = *(_OWORD *)(v3 + 121);
    *(_OWORD *)(v0 + 48) = v10;
    *(_OWORD *)(v0 + 64) = v11;
    *(_OWORD *)(v0 + 80) = v14;
    *(_OWORD *)(v0 + 96) = v13;
    *(_BYTE *)(v0 + 159) = v2;
    *(_OWORD *)(v0 + 16) = v16;
    *(_OWORD *)(v0 + 32) = v15;
    sub_1BACCCD20();
    return sub_1BA8D1FE4(v0 + 160);
  }
  return result;
}

void sub_1BA9ACBF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v4);
  __asm { BR              X10 }
}

uint64_t sub_1BA9ACC84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  result = sub_1BA9657C0(v4 - 224);
  if (!v1)
  {
    v6 = *(_OWORD *)(v4 - 112);
    v7 = *(_OWORD *)(v4 - 128);
    v8 = v6;
    *(_OWORD *)(v0 + 256) = v7;
    *(_OWORD *)(v0 + 272) = v6;
    *(_OWORD *)(v0 + 281) = *(_OWORD *)(v3 + 121);
    v9 = *(_OWORD *)(v4 - 176);
    v10 = *(_OWORD *)(v4 - 192);
    v11 = v9;
    *(_OWORD *)(v0 + 192) = v10;
    *(_OWORD *)(v0 + 208) = v9;
    v12 = *(_OWORD *)(v4 - 144);
    v14 = *(_OWORD *)(v4 - 160);
    v13 = v12;
    *(_OWORD *)(v0 + 224) = v14;
    *(_OWORD *)(v0 + 240) = v12;
    v15 = *(_OWORD *)(v4 - 208);
    v16 = *(_OWORD *)(v4 - 224);
    *(_OWORD *)(v0 + 160) = v16;
    *(_OWORD *)(v0 + 176) = v15;
    *(_OWORD *)(v0 + 112) = v7;
    *(_OWORD *)(v0 + 128) = v8;
    *(_OWORD *)(v0 + 137) = *(_OWORD *)(v3 + 121);
    *(_OWORD *)(v0 + 48) = v10;
    *(_OWORD *)(v0 + 64) = v11;
    *(_OWORD *)(v0 + 80) = v14;
    *(_OWORD *)(v0 + 96) = v13;
    *(_BYTE *)(v0 + 159) = v2;
    *(_OWORD *)(v0 + 16) = v16;
    *(_OWORD *)(v0 + 32) = v15;
    sub_1BACCCD20();
    return sub_1BA8D1FE4(v0 + 160);
  }
  return result;
}

void sub_1BA9ACEC8(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9ACEF8()
{
  _QWORD *v0;

  type metadata accessor for FormatLayoutError();
  sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
  swift_allocError();
  *v0 = 0xD000000000000048;
  v0[1] = 0x80000001BB9647E0;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_1BA9ACF7C()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BA78731C);
}

uint64_t sub_1BA9ACF98()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB311208);
}

uint64_t sub_1BA9ACFB4()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB3114B0);
}

uint64_t sub_1BA9ACFD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for FormatOptionsNodeStatementContext();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4C2DD8(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *v6;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1BA75BF9C();
    v11 = (char *)v6 + *(int *)(v10 + 48);
    sub_1BB311338(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack), a1);
    swift_release();
    sub_1BA75C00C();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
    sub_1BB311338(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_bindingStack), a1);
    return swift_release();
  }
}

uint64_t sub_1BA9AD100()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB3115D8);
}

uint64_t sub_1BA9AD11C()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BA758A00);
}

uint64_t sub_1BA9AD138()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB31189C);
}

uint64_t sub_1BA9AD154()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB311754);
}

uint64_t sub_1BA9AD170()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BB3118E0);
}

uint64_t sub_1BA9AD18C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for FormatOptionsNodeStatementContext();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4C2DD8(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *v6;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1BA75BF9C();
    v11 = (char *)v6 + *(int *)(v10 + 48);
    sub_1BAF6469C(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8), a1);
    swift_release();
    sub_1BA75C00C();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
    sub_1BAF6469C(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_bindingStack + 8), a1);
    return swift_release();
  }
}

uint64_t sub_1BA9AD2BC()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF64A7C);
}

uint64_t sub_1BA9AD2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for FormatOptionsNodeStatementContext();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4C2DD8(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *v6;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1BA75BF9C();
    v11 = (char *)v6 + *(int *)(v10 + 48);
    sub_1BA7A6E9C(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8), a1);
    swift_release();
    sub_1BA75C00C();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
    sub_1BA7A6E9C(*(_QWORD *)(v9 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_bindingStack + 8), a1);
    return swift_release();
  }
}

uint64_t sub_1BA9AD408()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BA4A9E78);
}

uint64_t sub_1BA9AD424()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF64C48);
}

uint64_t sub_1BA9AD440()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF644E4);
}

uint64_t sub_1BA9AD45C()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF65238);
}

uint64_t sub_1BA9AD478()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF64E08);
}

uint64_t sub_1BA9AD494()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF65040);
}

uint64_t sub_1BA9AD4B0()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF6547C);
}

uint64_t sub_1BA9AD4CC()
{
  return sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BAF64838);
}

void sub_1BA9AD4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for FormatLayoutError();
  MEMORY[0x1E0C80A78](v6);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2500, (void (*)(uint64_t))type metadata accessor for FormatOption);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for FormatOption();
  MEMORY[0x1E0C80A78](v8);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AD5E8()
{
  _QWORD *v0;

  sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
  swift_allocError();
  *v0 = 0xD00000000000006ELL;
  v0[1] = 0x80000001BB9648B0;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_1BA9AD674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1BA7FCD4C(v4);
  sub_1BB86DD80();
  sub_1BA7FCCC4(v4);
  swift_retain();
  swift_release();
  FormatOptionCollection.subscript.getter(v5, *(_QWORD *)(v7 - 88), v1);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v1, 1, v6) == 1)
  {
    sub_1BA502AD0(v1, (unint64_t *)&qword_1ED3D2500, (void (*)(uint64_t))type metadata accessor for FormatOption);
    v8 = *(_QWORD *)(v7 - 88);
    *v3 = v5;
    v3[1] = v8;
    swift_storeEnumTagMultiPayload();
    v9 = *(_BYTE *)(v4 + 8);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
    v10 = (void *)swift_allocError();
    sub_1BA4C2DD8((uint64_t)v3, v11, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);
    if ((v9 & 1) != 0)
    {
      v13 = swift_allocObject();
      *(_BYTE *)(v13 + 16) = 2;
      *(_QWORD *)(v13 + 24) = 0x3FF0000000000000;
      *(_BYTE *)(v13 + 32) = 0;
      **(_QWORD **)(v7 - 104) = v13 | 0x1000000000000000;
      swift_bridgeObjectRetain();
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);

    }
    else
    {
      swift_bridgeObjectRetain();
      swift_willThrow();
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);
    }
  }
  else
  {
    sub_1BA5193C4(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
    swift_retain();
    v12 = *(_QWORD *)(v7 - 96);
    sub_1BB30EF38();
    swift_release();
    if (!v12)
    {
      sub_1BB3149D0(*(_QWORD *)(v7 - 72), *(_QWORD *)(v7 - 88), *(_QWORD *)(v7 - 112), v4, *(_QWORD *)(v7 - 104));
      swift_release();
    }
    sub_1BA4A2E80(v2, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
  }
  JUMPOUT(0x1BA9AD650);
}

void sub_1BA9AD8A8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];

  v11[5] = a1;
  v11[1] = a3;
  v11[3] = a5;
  v11[4] = a2;
  v6 = type metadata accessor for FormatLayoutError();
  MEMORY[0x1E0C80A78](v6);
  v11[2] = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2500, (void (*)(uint64_t))type metadata accessor for FormatOption);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for FormatOption();
  MEMORY[0x1E0C80A78](v9);
  v10 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v10);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AD9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v0 + 48);
  result = sub_1BA70DDB0(*(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_bindingStack), v1);
  if (!v3)
  {
    *(_BYTE *)(v0 + 64) = *(_QWORD *)(v0 + 40);
    sub_1BAAC3F70();
    return sub_1BA4A2E80(v1, type metadata accessor for FeedHeadline);
  }
  return result;
}

void sub_1BA9ADE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v6);
  __asm { BR              X10 }
}

uint64_t sub_1BA9ADEF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  result = sub_1BA75D26C((void (*)(_QWORD, _QWORD))sub_1BA70DDB0);
  if (!v1)
  {
    *(_BYTE *)(v0 + 16) = v2;
    sub_1BAAC3F70();
    return sub_1BA4A2E80(v3, type metadata accessor for FeedHeadline);
  }
  return result;
}

void sub_1BA9AE148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for FormatLayoutError();
  MEMORY[0x1E0C80A78](v6);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2500, (void (*)(uint64_t))type metadata accessor for FormatOption);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for FormatOption();
  MEMORY[0x1E0C80A78](v8);
  __asm { BR              X10 }
}

uint64_t sub_1BA9AE248()
{
  _QWORD *v0;

  sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
  swift_allocError();
  *v0 = 0xD000000000000048;
  v0[1] = 0x80000001BB9647E0;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_1BA9AE2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  FormatOptionCollection.subscript.getter(v5, *(_QWORD *)(v7 - 88), v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v1, 1, v6) == 1)
  {
    sub_1BA502AD0(v1, (unint64_t *)&qword_1ED3D2500, (void (*)(uint64_t))type metadata accessor for FormatOption);
    v8 = *(_QWORD *)(v7 - 88);
    *v3 = v5;
    v3[1] = v8;
    swift_storeEnumTagMultiPayload();
    v9 = *v4;
    sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
    v10 = (void *)swift_allocError();
    sub_1BA4C2DD8((uint64_t)v3, v11, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);
    if ((v9 & 1) != 0)
    {
      v15 = swift_allocObject();
      *(_BYTE *)(v15 + 16) = 2;
      *(_QWORD *)(v15 + 24) = 0x3FF0000000000000;
      *(_BYTE *)(v15 + 32) = 0;
      **(_QWORD **)(v7 - 104) = v15 | 0x1000000000000000;
      swift_bridgeObjectRetain();
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);

    }
    else
    {
      swift_bridgeObjectRetain();
      swift_willThrow();
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);
    }
  }
  else
  {
    sub_1BA5193C4(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
    v12 = *(_QWORD *)(v2 + 16);
    swift_retain();
    v13 = v12;
    v14 = *(_QWORD *)(v7 - 96);
    sub_1BB30F658((uint64_t)v4, v13);
    swift_release();
    if (!v14)
    {
      sub_1BB31C158(*(_QWORD *)(v7 - 72), *(_QWORD *)(v7 - 88), *(_QWORD *)(v7 - 112), (uint64_t)v4, *(_QWORD *)(v7 - 104));
      swift_release();
    }
    sub_1BA4A2E80(v2, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
  }
  JUMPOUT(0x1BA9AE2B0);
}

BOOL _s8NewsFeed17FormatSymbolImageV2eeoiySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_BYTE *)a1 + 24);
  v5 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v6 = *((unsigned __int16 *)a1 + 24);
  v8 = *((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 8);
  v33 = *((_QWORD *)a1 + 10);
  v34 = *((_QWORD *)a1 + 9);
  v32 = *((unsigned __int8 *)a1 + 88);
  v9 = *((_QWORD *)a1 + 12);
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_BYTE *)a2 + 24);
  v13 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v14 = *((unsigned __int16 *)a2 + 24);
  v15 = *((_QWORD *)a2 + 7);
  v35 = *((_QWORD *)a2 + 8);
  v30 = *((_QWORD *)a2 + 10);
  v31 = *((_QWORD *)a2 + 9);
  v29 = *((unsigned __int8 *)a2 + 88);
  v28 = *((_QWORD *)a2 + 12);
  v39 = *a1;
  v40 = v2;
  v41 = v3;
  v36 = *a2;
  v37 = v10;
  v38 = v11;
  if ((_s8NewsFeed16FormatSymbolNameO2eeoiySbAC_ACtFZ_0((uint64_t)&v39, (uint64_t)&v36) & 1) == 0)
    return 0;
  v27 = v9;
  if (v6 >> 8 <= 0xFE)
  {
    *(_QWORD *)&v39 = v5;
    *((_QWORD *)&v39 + 1) = v4;
    LOWORD(v40) = v6;
    if (v14 >> 8 <= 0xFE)
    {
      *(_QWORD *)&v36 = v13;
      *((_QWORD *)&v36 + 1) = v12;
      LOWORD(v37) = v14;
      sub_1BA740E74(v5, v4, v6);
      sub_1BA740408(v5, v4, v6, SBYTE1(v6));
      _s8NewsFeed18FormatSymbolConfigO2eeoiySbAC_ACtFZ_0((uint64_t)&v39);
      v17 = v16;
      sub_1BA740434(v39, *((uint64_t *)&v39 + 1), v40, SBYTE1(v40));
      sub_1BA740460(v5, v4, v6);
      if ((v17 & 1) != 0)
        goto LABEL_9;
      return 0;
    }
    sub_1BA740408(v5, v4, v6, SBYTE1(v6));
    sub_1BA740408(v5, v4, v6, SBYTE1(v6));
    sub_1BA740434(v5, v4, v6, SBYTE1(v6));
LABEL_7:
    sub_1BA740E74(v13, v12, v14);
    sub_1BA740460(v5, v4, v6);
    sub_1BA740460(v13, v12, v14);
    return 0;
  }
  if (v14 >> 8 <= 0xFE)
    goto LABEL_7;
LABEL_9:
  v18 = v15 & 0xF000000000000007;
  if ((~v8 & 0xF000000000000007) == 0)
  {
    if (v18 == 0xF000000000000007)
      goto LABEL_11;
LABEL_17:
    sub_1BA60DEE4(v15);
    sub_1BA60DF1C(v8);
    sub_1BA60DF1C(v15);
    return 0;
  }
  if (v18 == 0xF000000000000007)
  {
    swift_retain();
    swift_retain();
    goto LABEL_17;
  }
  *(_QWORD *)&v39 = v8;
  *(_QWORD *)&v36 = v15;
  sub_1BA60DEE4(v8);
  sub_1BA60DEE4(v8);
  sub_1BA60DEE4(v15);
  static FormatColor.== infix(_:_:)((uint64_t)&v39);
  if ((v21 & 1) == 0)
  {
    sub_1BA60DF1C(v15);
    swift_release();
    swift_release();
    sub_1BA60DF1C(v8);
    return 0;
  }
  *(_QWORD *)&v39 = v7;
  *(_QWORD *)&v36 = v35;
  static FormatColor.== infix(_:_:)((uint64_t)&v39);
  v23 = v22;
  sub_1BA60DF1C(v15);
  swift_release();
  swift_release();
  sub_1BA60DF1C(v8);
  if ((v23 & 1) == 0)
    return 0;
LABEL_11:
  sub_1BA69C808(v34, v33, v32);
  sub_1BA69C808(v31, v30, v29);
  v19 = sub_1BB807F7C(v34, v33, v32, v31, v30, v29);
  sub_1BA69C828(v31, v30, v29);
  sub_1BA69C828(v34, v33, v32);
  if ((v19 & 1) == 0)
    return 0;
  if ((~v27 & 0xF000000000000007) == 0)
  {
    v20 = v28;
    if ((~v28 & 0xF000000000000007) == 0)
      return 1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39 = v27;
  v20 = v28;
  if ((~v28 & 0xF000000000000007) == 0)
  {
    sub_1BA739250(v27);
    sub_1BA739250(v27);
    sub_1BA6F5D74(v27);
LABEL_24:
    sub_1BA895BA4(v20);
    sub_1BA895BB8(v27);
    sub_1BA895BB8(v20);
    return 0;
  }
  *(_QWORD *)&v36 = v28;
  sub_1BA739250(v27);
  sub_1BA739250(v27);
  static FormatSymbolImageColor.== infix(_:_:)((uint64_t)&v39);
  v26 = v25;
  sub_1BA6F5D74(v27);
  sub_1BA895BB8(v27);
  return (v26 & 1) != 0;
}

uint64_t _s8NewsFeed21FormatSymbolImageFillV2eeoiySbAC_ACtFZ_0(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v5;

  v1 = a1[1];
  v5 = *a1;
  static FormatColor.== infix(_:_:)((uint64_t)&v5);
  if ((v2 & 1) != 0)
  {
    v5 = v1;
    static FormatColor.== infix(_:_:)((uint64_t)&v5);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1BA9AE93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1BB873DD4();
    v7 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v8 = *v7++;
      swift_retain();
      sub_1BA742954(a2, v8);
      if (v2)
        break;
      FormatColor.color.getter();
      swift_release();
      swift_release();
      sub_1BB873DB0();
      sub_1BB873DE0();
      sub_1BB873DEC();
      sub_1BB873DBC();
      if (!--v4)
        return v9;
    }
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_1BA9AEA4C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9AEA70();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9AEA70()
{
  unint64_t result;

  result = qword_1EF2AC548;
  if (!qword_1EF2AC548)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImage, &type metadata for FormatSymbolImage);
    atomic_store(result, (unint64_t *)&qword_1EF2AC548);
  }
  return result;
}

uint64_t sub_1BA9AEAB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA586104, (uint64_t (*)(void))sub_1BA58955C, (uint64_t (*)(void))sub_1BA9AEAD0);
}

unint64_t sub_1BA9AEAD0()
{
  unint64_t result;

  result = qword_1EF2AC550;
  if (!qword_1EF2AC550)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImage, &type metadata for FormatSymbolImage);
    atomic_store(result, (unint64_t *)&qword_1EF2AC550);
  }
  return result;
}

unint64_t sub_1BA9AEB14(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9AEB38();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9AEB38()
{
  unint64_t result;

  result = qword_1EF2AC558;
  if (!qword_1EF2AC558)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageFill, &type metadata for FormatSymbolImageFill);
    atomic_store(result, (unint64_t *)&qword_1EF2AC558);
  }
  return result;
}

uint64_t sub_1BA9AEB7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA59DF54, (uint64_t (*)(void))sub_1BA9AEB98, (uint64_t (*)(void))sub_1BA9AEBDC);
}

unint64_t sub_1BA9AEB98()
{
  unint64_t result;

  result = qword_1ED39E170;
  if (!qword_1ED39E170)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageFill, &type metadata for FormatSymbolImageFill);
    atomic_store(result, (unint64_t *)&qword_1ED39E170);
  }
  return result;
}

unint64_t sub_1BA9AEBDC()
{
  unint64_t result;

  result = qword_1EF2AC560;
  if (!qword_1EF2AC560)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageFill, &type metadata for FormatSymbolImageFill);
    atomic_store(result, (unint64_t *)&qword_1EF2AC560);
  }
  return result;
}

unint64_t sub_1BA9AEC20(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9AEC44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9AEC44()
{
  unint64_t result;

  result = qword_1EF2AC568;
  if (!qword_1EF2AC568)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageColor, &type metadata for FormatSymbolImageColor);
    atomic_store(result, (unint64_t *)&qword_1EF2AC568);
  }
  return result;
}

uint64_t sub_1BA9AEC88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA9AECA4, (uint64_t (*)(void))sub_1BA9AECE8, (uint64_t (*)(void))sub_1BA9AED2C);
}

unint64_t sub_1BA9AECA4()
{
  unint64_t result;

  result = qword_1ED3D2450;
  if (!qword_1ED3D2450)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageColor, &type metadata for FormatSymbolImageColor);
    atomic_store(result, (unint64_t *)&qword_1ED3D2450);
  }
  return result;
}

unint64_t sub_1BA9AECE8()
{
  unint64_t result;

  result = qword_1EF2AC570;
  if (!qword_1EF2AC570)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageColor, &type metadata for FormatSymbolImageColor);
    atomic_store(result, (unint64_t *)&qword_1EF2AC570);
  }
  return result;
}

unint64_t sub_1BA9AED2C()
{
  unint64_t result;

  result = qword_1EF2AC578;
  if (!qword_1EF2AC578)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSymbolImageColor, &type metadata for FormatSymbolImageColor);
    atomic_store(result, (unint64_t *)&qword_1EF2AC578);
  }
  return result;
}

uint64_t sub_1BA9AED70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v4;
  return sub_1BA69C808(v3, v2, v4);
}

unint64_t destroy for FormatSymbolImage(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;

  sub_1BA60DFC4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >> 8 <= 0xFE)
    sub_1BA740434(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v2, SBYTE1(v2));
  if ((~*(_QWORD *)(a1 + 56) & 0xF000000000000007) != 0)
  {
    swift_release();
    swift_release();
  }
  sub_1BA69C828(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  result = *(_QWORD *)(a1 + 96);
  if ((~result & 0xF000000000000007) != 0)
    return sub_1BA6F5D74(result);
  return result;
}

uint64_t initializeWithCopy for FormatSymbolImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1BA60DF54(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(unsigned __int16 *)(a2 + 48);
  if (v8 >> 8 <= 0xFE)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    sub_1BA740408(v9, v10, *(unsigned __int16 *)(a2 + 48), SBYTE1(v8));
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_WORD *)(a1 + 48) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  }
  v11 = *(_QWORD *)(a2 + 56);
  if ((~v11 & 0xF000000000000007) != 0)
  {
    v12 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_BYTE *)(a2 + 88);
  sub_1BA69C808(v13, v14, v15);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  if ((~v16 & 0xF000000000000007) != 0)
    sub_1BA739250(v16);
  *(_QWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for FormatSymbolImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 *v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1BA60DF54(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  sub_1BA60DFC4(v8, v9, v10, v11);
  v12 = (__int128 *)(a1 + 32);
  v13 = (__int128 *)(a2 + 32);
  v14 = *(unsigned __int16 *)(a2 + 48);
  v15 = v14 >> 8;
  if (*(unsigned __int8 *)(a1 + 49) == 255)
  {
    if (v15 <= 0xFE)
    {
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 40);
      sub_1BA740408(v18, v19, *(unsigned __int16 *)(a2 + 48), SBYTE1(v14));
      *(_QWORD *)(a1 + 32) = v18;
      *(_QWORD *)(a1 + 40) = v19;
      *(_WORD *)(a1 + 48) = v14;
    }
    else
    {
      v16 = *v13;
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
      *v12 = v16;
    }
  }
  else if (v15 <= 0xFE)
  {
    v20 = *(_QWORD *)(a2 + 32);
    v21 = *(_QWORD *)(a2 + 40);
    sub_1BA740408(v20, v21, *(unsigned __int16 *)(a2 + 48), SBYTE1(v14));
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v21;
    v24 = *(unsigned __int8 *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v14;
    v25 = *(_BYTE *)(a1 + 49);
    *(_BYTE *)(a1 + 49) = BYTE1(v14);
    sub_1BA740434(v22, v23, v24, v25);
  }
  else
  {
    sub_1BA9AF19C(a1 + 32);
    v17 = *(_WORD *)(a2 + 48);
    *v12 = *v13;
    *(_WORD *)(a1 + 48) = v17;
  }
  v26 = *(_QWORD *)(a2 + 56);
  v27 = v26 & 0xF000000000000007;
  if ((~*(_QWORD *)(a1 + 56) & 0xF000000000000007) == 0)
  {
    if (v27 != 0xF000000000000007)
    {
      *(_QWORD *)(a1 + 56) = v26;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_retain();
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v27 == 0xF000000000000007)
  {
    sub_1BA9AF1D0(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 56) = v26;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
LABEL_15:
  v28 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_BYTE *)(a2 + 88);
  sub_1BA69C808(v28, v29, v30);
  v31 = *(_QWORD *)(a1 + 72);
  v32 = *(_QWORD *)(a1 + 80);
  v33 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_BYTE *)(a1 + 88) = v30;
  sub_1BA69C828(v31, v32, v33);
  v34 = (unint64_t *)(a1 + 96);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = v35 & 0xF000000000000007;
  if ((~*(_QWORD *)(a1 + 96) & 0xF000000000000007) != 0)
  {
    if (v36 == 0xF000000000000007)
    {
      sub_1BA9AF208((unint64_t *)(a1 + 96));
      *v34 = *(_QWORD *)(a2 + 96);
    }
    else
    {
      sub_1BA739250(*(_QWORD *)(a2 + 96));
      v37 = *v34;
      *v34 = v35;
      sub_1BA6F5D74(v37);
    }
  }
  else
  {
    if (v36 != 0xF000000000000007)
      sub_1BA739250(*(_QWORD *)(a2 + 96));
    *v34 = v35;
  }
  return a1;
}

uint64_t sub_1BA9AF19C(uint64_t a1)
{
  destroy for FormatSymbolConfig(a1);
  return a1;
}

uint64_t sub_1BA9AF1D0(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

unint64_t *sub_1BA9AF208(unint64_t *a1)
{
  sub_1BA6F5D74(*a1);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FormatSymbolImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_1BA60DFC4(v6, v7, v8, v9);
  v10 = (_OWORD *)(a2 + 32);
  v11 = *(unsigned __int16 *)(a1 + 48);
  if (v11 >> 8 > 0xFE)
    goto LABEL_4;
  v12 = *(unsigned __int16 *)(a2 + 48);
  if (v12 >> 8 > 0xFE)
  {
    sub_1BA9AF19C(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v10;
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *v10;
  *(_WORD *)(a1 + 48) = v12;
  sub_1BA740434(v13, v14, v11, SBYTE1(v11));
LABEL_6:
  v15 = *(_QWORD *)(a2 + 56);
  if ((~*(_QWORD *)(a1 + 56) & 0xF000000000000007) == 0)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_11;
  }
  if ((~v15 & 0xF000000000000007) == 0)
  {
    sub_1BA9AF1D0(a1 + 56);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 56) = v15;
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
LABEL_11:
  v16 = *(_BYTE *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v16;
  sub_1BA69C828(v17, v18, v19);
  v21 = (_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a2 + 96);
  if ((~v20 & 0xF000000000000007) != 0)
  {
    if ((~v22 & 0xF000000000000007) != 0)
    {
      *v21 = v22;
      sub_1BA6F5D74(v20);
      return a1;
    }
    sub_1BA9AF208((unint64_t *)(a1 + 96));
  }
  *v21 = v22;
  return a1;
}

ValueMetadata *type metadata accessor for FormatSymbolImage()
{
  return &type metadata for FormatSymbolImage;
}

ValueMetadata *type metadata accessor for FormatSymbolImageFill()
{
  return &type metadata for FormatSymbolImageFill;
}

ValueMetadata *type metadata accessor for FormatSymbolImageColor()
{
  return &type metadata for FormatSymbolImageColor;
}

uint64_t sub_1BA9AF3E8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BA9AF40C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9D80)
  {
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9D80);
  }
}

uint64_t sub_1BA9AF464()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AF498()
{
  uint64_t v0;

  sub_1BA6F3F50(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

void sub_1BA9AF4D0(uint64_t *a1, _QWORD *a2)
{
  sub_1BA9AFA24(a1, a2);
}

uint64_t sub_1BA9AF4E4()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AF53C()
{
  return objectdestroy_24Tm();
}

id sub_1BA9AF544(uint64_t a1)
{
  return sub_1BA911A44(a1);
}

uint64_t sub_1BA9AF54C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 64))
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

id sub_1BA9AF5C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  uint64_t v9;

  v2 = *(void **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_OWORD *)(v1 + 56);
  v6 = *(_OWORD *)(v1 + 88);
  v8[2] = *(_OWORD *)(v1 + 72);
  v8[3] = v6;
  v9 = *(_QWORD *)(v1 + 104);
  v8[0] = *(_OWORD *)(v1 + 40);
  v8[1] = v5;
  return sub_1BA9AC400(a1, v2, v3, v4, (uint64_t)v8);
}

uint64_t sub_1BA9AF608(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_1BA70A884(v2, v3);
  swift_retain();
  return a1;
}

id sub_1BA9AF674(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA911940(a1, *(id *)(v1 + 16));
}

id sub_1BA9AF67C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA91184C(a1, *(id *)(v1 + 16));
}

void sub_1BA9AF684(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9AF6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  __int16 v18;
  uint64_t v19;
  __n128 v20;

  sub_1BB8737EC();
  v19 = sub_1BA5D5518((uint64_t)&a9, (uint64_t)&a14, &qword_1ED39C318, (void (*)(uint64_t))sub_1BA841DB0);
  v20.n128_u64[0] = a14;
  if (a18)
    v20.n128_f64[0] = 0.0;
  return ((uint64_t (*)(uint64_t, __n128))((char *)sub_1BA9AF844 + 4 * byte_1BB88C17D[HIBYTE(v18)]))(v19, v20);
}

BOOL sub_1BA9AF844(double a1)
{
  double v1;

  return a1 == v1;
}

uint64_t sub_1BA9AF89C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  sub_1BA70AB94(v2, v3);
  swift_release();
  return a1;
}

uint64_t sub_1BA9AF908(uint64_t a1)
{
  uint64_t v1;
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  v1 = qword_1EF2AC588;
  if (!qword_1EF2AC588)
  {
    MEMORY[0x1E0C80A78](a1);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v1 = TupleTypeMetadata;
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EF2AC588);
  }
  return v1;
}

uint64_t sub_1BA9AF9E4()
{
  return objectdestroy_24Tm();
}

uint64_t sub_1BA9AF9EC()
{
  return objectdestroy_24Tm();
}

uint64_t sub_1BA9AF9F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BA9AFA24(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[4];
  uint64_t v10;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *a1;
  v7 = *(_OWORD *)(v5 + 48);
  v9[2] = *(_OWORD *)(v5 + 32);
  v9[3] = v7;
  v10 = *(_QWORD *)(v5 + 64);
  v8 = *(_OWORD *)(v5 + 16);
  v9[0] = *(_OWORD *)v5;
  v9[1] = v8;
  sub_1BA9A8D18((uint64_t)v9, v6);
  if (v3)
    *a2 = v3;
}

uint64_t sub_1BA9AFA7C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AFAB0()
{
  return swift_deallocObject();
}

uint64_t sub_1BA9AFAC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AFAF0()
{
  return swift_deallocObject();
}

void sub_1BA9AFB00(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_1BA7C58B4(*(_QWORD *)(v2 + 16), *a1);
  if (v3)
    *a2 = v3;
}

uint64_t sub_1BA9AFB3C()
{
  return objectdestroy_24Tm();
}

uint64_t sub_1BA9AFB44()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for FormatDecorationContext();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);

  swift_release();
  swift_bridgeObjectRelease();
  v3 = v0 + v2;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v2 + 32))
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  v4 = v3 + *(int *)(v1 + 28);
  v5 = sub_1BB86D7A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v3 + *(int *)(v1 + 32);
  v7 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA9AFC70()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BA9AFC94()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BA9AFCB8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BA9AFCDC(_QWORD *a1, _QWORD *a2)
{
  return sub_1BA9AFCF8(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1BA9A8CEC);
}

uint64_t sub_1BA9AFCF8(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = a3(**(_QWORD **)(v3 + 16), *a1);
  if (v4)
    *a2 = v4;
  return result;
}

uint64_t sub_1BA9AFD34()
{
  return objectdestroy_24Tm();
}

uint64_t sub_1BA9AFD40(uint64_t a1)
{
  return sub_1BA9AFDA8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA9AC3D8);
}

uint64_t sub_1BA9AFD50()
{
  return objectdestroy_24Tm();
}

uint64_t objectdestroy_176Tm()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AFD9C(uint64_t a1)
{
  return sub_1BA9AFDA8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA9AC2A4);
}

uint64_t sub_1BA9AFDA8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5]);
}

void sub_1BA9AFDB8(uint64_t *a1, _QWORD *a2)
{
  sub_1BA9AFB00(a1, a2);
}

uint64_t sub_1BA9AFDE8()
{
  return objectdestroy_24Tm();
}

uint64_t sub_1BA9AFDF0()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FormatOptionsNodeStatementContext() - 8) + 80);

  swift_release();
  swift_bridgeObjectRelease();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    sub_1BA75BF9C();
    v4 = v0 + ((v1 + 40) & ~v1) + *(int *)(v3 + 48);
    sub_1BA75C00C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1BA9AFEBC(uint64_t a1)
{
  return sub_1BA613FD8(a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatOptionsNodeStatementContext, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_1BA9AC3EC);
}

void sub_1BA9AFED0(uint64_t *a1, _QWORD *a2)
{
  sub_1BA9B0038(a1, a2);
}

uint64_t objectdestroy_21Tm_0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

id sub_1BA9AFF18(uint64_t a1)
{
  uint64_t v1;

  return sub_1BAFBB258(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_1BA9AFF28()
{
  return objectdestroy_24Tm();
}

uint64_t objectdestroy_24Tm()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9AFF64()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id sub_1BA9AFFE8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  uint64_t v9;

  v2 = *(void **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_OWORD *)(v1 + 88);
  v8[2] = *(_OWORD *)(v1 + 72);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(v1 + 104);
  v9 = *(_QWORD *)(v1 + 120);
  v6 = *(_OWORD *)(v1 + 56);
  v8[0] = *(_OWORD *)(v1 + 40);
  v8[1] = v6;
  return sub_1BA9AC2B8(a1, v2, v3, v4, (uint64_t)v8);
}

void sub_1BA9B0038(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[5];
  uint64_t v10;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *a1;
  v7 = *(_OWORD *)(v5 + 48);
  v9[2] = *(_OWORD *)(v5 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(v5 + 64);
  v10 = *(_QWORD *)(v5 + 80);
  v8 = *(_OWORD *)(v5 + 16);
  v9[0] = *(_OWORD *)v5;
  v9[1] = v8;
  sub_1BA9A8AF8((uint64_t)v9, v6);
  if (v3)
    *a2 = v3;
}

void FeedModelFactory.create<A>(headline:context:namespace:metadata:nativeAdInfo:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;

  v58 = a8;
  v54 = a7;
  v51 = a6;
  v55 = a5;
  v45 = a1;
  v57 = a9;
  v53 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v52 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v56);
  v63 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v59 = (uint64_t)&v41 - v16;
  v43 = *(void **)a2;
  v17 = (uint64_t)v43;
  v18 = *(_BYTE *)(a2 + 8);
  v19 = *(_BYTE *)(a2 + 9);
  v47 = *(unsigned __int8 *)(a2 + 10);
  v46 = *(unsigned __int8 *)(a2 + 11);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(a2 + 32);
  v60 = *(_QWORD *)(a2 + 16);
  v61 = v20;
  v42 = v21;
  v62 = *(_QWORD *)(a2 + 40);
  v22 = *(_BYTE *)(a2 + 48);
  v44 = v22;
  v48 = *(void **)(a2 + 56);
  v49 = *(_QWORD *)(a2 + 64);
  v50 = *(_QWORD *)(a2 + 72);
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v23 + 32) = a3;
  *(_QWORD *)(v23 + 40) = a4;
  swift_bridgeObjectRetain();
  v24 = objc_msgSend(a1, sel_identifier);
  v25 = sub_1BB8729A0();
  v27 = v26;

  *(_QWORD *)(v23 + 48) = v25;
  *(_QWORD *)(v23 + 56) = v27;
  v64 = v23;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v41 = sub_1BB872904();
  v29 = v28;
  swift_bridgeObjectRelease();
  v64 = v17;
  LOBYTE(v17) = v18;
  v65 = v18;
  v30 = v19;
  v66 = v19;
  v31 = v47;
  v67 = v47;
  LOBYTE(v25) = v46;
  v68 = v46;
  v32 = v59;
  v69 = v60;
  v70 = v61;
  v71 = v21;
  v72 = v62;
  v73 = v22;
  v33 = v48;
  v34 = v49;
  v74 = v48;
  v75 = v49;
  v35 = v50;
  v76 = v50;
  sub_1BA5DECF0(v41, v29, v45, (uint64_t)&v64, v51, v59);
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8(v32, v63, type metadata accessor for FeedHeadline);
  v36 = v43;
  v64 = (uint64_t)v43;
  v65 = v17;
  v66 = v30;
  v67 = v31;
  v68 = v25;
  v69 = v60;
  v70 = v61;
  v37 = v42;
  v38 = v62;
  v71 = v42;
  v72 = v62;
  v73 = v44;
  v74 = v33;
  v75 = v34;
  v76 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v55, v54);
  v39 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v37, v38);
  sub_1BA4A2870(&qword_1ED3C6320, type metadata accessor for FeedHeadline, (uint64_t)&protocol conformance descriptor for FeedHeadline);
  sub_1BA4A2870(&qword_1ED3B2D38, type metadata accessor for FeedHeadline, (uint64_t)&protocol conformance descriptor for FeedHeadline);
  v40 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)(v63, v56, v57);
}

uint64_t sub_1BA9B0638()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_1BA4A2E80(*(_QWORD *)(v1 - 208), v0);
}

uint64_t FeedModelFactory.create(headline:context:namespace:nativeAdInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (**v45)();
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;

  v63 = a6;
  v58 = a2;
  v55 = a1;
  v64 = a7;
  sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  MEMORY[0x1E0C80A78](v11);
  v59 = (uint64_t)&v48 - v12;
  v13 = type metadata accessor for FeedHeadline(0);
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  MEMORY[0x1E0C80A78](v13);
  v49 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v54 = (uint64_t)&v48 - v16;
  v17 = *(void **)a3;
  v18 = *(unsigned __int8 *)(a3 + 8);
  v68 = *(unsigned __int8 *)(a3 + 9);
  v69 = v18;
  v19 = *(unsigned __int8 *)(a3 + 10);
  v66 = *(unsigned __int8 *)(a3 + 11);
  v67 = v19;
  v20 = *(_QWORD *)(a3 + 24);
  v57 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(a3 + 40);
  v70 = *(_QWORD *)(a3 + 32);
  v65 = *(unsigned __int8 *)(a3 + 48);
  v23 = *(void **)(a3 + 56);
  v22 = *(_QWORD *)(a3 + 64);
  v56 = *(_QWORD *)(a3 + 72);
  v24 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v25 + 32) = a4;
  *(_QWORD *)(v25 + 40) = a5;
  *(_QWORD *)(v25 + 48) = a1;
  *(_QWORD *)(v25 + 56) = v58;
  v71 = v25;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v24, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = sub_1BB872904();
  v28 = v27;
  v29 = v56;
  swift_bridgeObjectRelease();
  v50 = v17;
  v71 = (uint64_t)v17;
  v72 = v69;
  v73 = v68;
  v74 = v67;
  v75 = v66;
  v30 = v57;
  v76 = v57;
  v77 = v20;
  v51 = v20;
  v78 = v70;
  v79 = v21;
  v52 = v21;
  v31 = v59;
  v80 = v65;
  v53 = v23;
  v81 = v23;
  v82 = v22;
  v62 = v22;
  v83 = v29;
  sub_1BB757128(v26, v28, (uint64_t)&v71, v63, v59);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v31, 1, v61) == 1)
  {
    sub_1BA502AD0(v31, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
    v32 = sub_1BA5DEC38();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v64, 1, 1, v32);
  }
  else
  {
    v34 = v54;
    sub_1BA5193C4(v31, v54, type metadata accessor for FeedHeadline);
    v35 = v49;
    sub_1BA4C2DD8(v34, v49, type metadata accessor for FeedHeadline);
    v36 = v64;
    sub_1BA5193C4(v35, v64, type metadata accessor for FeedHeadline);
    v37 = (int *)sub_1BA5DEC38();
    v38 = v36 + v37[13];
    v39 = v50;
    *(_QWORD *)v38 = v50;
    *(_BYTE *)(v38 + 8) = v69;
    *(_BYTE *)(v38 + 9) = v68;
    *(_BYTE *)(v38 + 10) = v67;
    *(_BYTE *)(v38 + 11) = v66;
    *(_QWORD *)(v38 + 16) = v30;
    v40 = v70;
    *(_QWORD *)(v38 + 24) = v51;
    *(_QWORD *)(v38 + 32) = v40;
    v41 = v52;
    *(_QWORD *)(v38 + 40) = v52;
    *(_BYTE *)(v38 + 48) = v65;
    v42 = v53;
    v43 = v62;
    *(_QWORD *)(v38 + 56) = v53;
    *(_QWORD *)(v38 + 64) = v43;
    *(_QWORD *)(v38 + 72) = v29;
    v44 = (_QWORD *)(v36 + v37[14]);
    *v44 = 0;
    v44[1] = 0;
    v45 = (uint64_t (**)())(v36 + v37[16]);
    *v45 = sub_1BA647E00;
    v45[1] = 0;
    v46 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA653B2C(v40, v41);
    v47 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v34, type metadata accessor for FeedHeadline);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v37 - 1) + 56))(v36, 0, 1, v37);
  }
}

uint64_t FeedModelFactory.create(issue:context:namespace:traits:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  id v28;
  uint64_t v30;
  void *v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[7];
  _OWORD v59[2];

  v10 = *(_QWORD *)a2;
  v31 = *(void **)a2;
  v11 = *(_BYTE *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 9);
  v13 = *(_BYTE *)(a2 + 10);
  v14 = *(_BYTE *)(a2 + 11);
  v34 = *(_QWORD *)(a2 + 16);
  v35 = *(_QWORD *)(a2 + 24);
  v37 = *(_QWORD *)(a2 + 40);
  v38 = *(_QWORD *)(a2 + 32);
  v33 = *(_BYTE *)(a2 + 48);
  v36 = *(void **)(a2 + 56);
  v42 = *(_QWORD *)(a2 + 64);
  v39 = *(_QWORD *)(a2 + 72);
  v41 = *(_QWORD *)a5;
  v40 = *(_BYTE *)(a5 + 8);
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a4;
  swift_bridgeObjectRetain();
  v16 = objc_msgSend(a1, sel_identifier);
  v17 = sub_1BB8729A0();
  v19 = v18;

  *(_QWORD *)(v15 + 48) = v17;
  *(_QWORD *)(v15 + 56) = v19;
  *(_QWORD *)&v58[0] = v15;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v30 = sub_1BB872904();
  v21 = v20;
  swift_bridgeObjectRelease();
  v45 = v10;
  v46 = v11;
  v47 = v12;
  v48 = v13;
  v49 = v14;
  v50 = v34;
  v51 = v35;
  v52 = v38;
  v53 = v37;
  v54 = v33;
  v55 = v36;
  v56 = v42;
  v57 = v39;
  v43 = v41;
  v44 = v40;
  sub_1BB80E948(v30, v21, a1, &v45, &v43, (uint64_t)v58);
  swift_bridgeObjectRelease();
  v22 = v58[5];
  v23 = v59[0];
  *(_OWORD *)(a6 + 96) = v58[6];
  *(_OWORD *)(a6 + 112) = v23;
  *(_OWORD *)(a6 + 121) = *(_OWORD *)((char *)v59 + 9);
  v24 = v58[1];
  v25 = v58[3];
  v26 = v58[4];
  *(_OWORD *)(a6 + 32) = v58[2];
  *(_OWORD *)(a6 + 48) = v25;
  *(_OWORD *)(a6 + 64) = v26;
  *(_OWORD *)(a6 + 80) = v22;
  *(_OWORD *)a6 = v58[0];
  *(_OWORD *)(a6 + 16) = v24;
  *(_QWORD *)(a6 + 144) = v31;
  *(_BYTE *)(a6 + 152) = v11;
  *(_BYTE *)(a6 + 153) = v12;
  *(_BYTE *)(a6 + 154) = v13;
  *(_BYTE *)(a6 + 155) = v14;
  *(_QWORD *)(a6 + 160) = v34;
  *(_QWORD *)(a6 + 168) = v35;
  *(_QWORD *)(a6 + 176) = v38;
  *(_QWORD *)(a6 + 184) = v37;
  *(_BYTE *)(a6 + 192) = v33;
  *(_DWORD *)(a6 + 193) = v58[0];
  *(_DWORD *)(a6 + 196) = *(_DWORD *)((char *)v58 + 3);
  *(_QWORD *)(a6 + 200) = v36;
  *(_QWORD *)(a6 + 208) = v42;
  *(_QWORD *)(a6 + 216) = v39;
  *(_QWORD *)(a6 + 224) = 0;
  *(_QWORD *)(a6 + 232) = 0;
  *(_QWORD *)(a6 + 240) = sub_1BA647E00;
  *(_QWORD *)(a6 + 248) = 0;
  v27 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v38, v37);
  v28 = v36;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void FeedModelFactory.create<A>(issue:context:namespace:metadata:traits:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];

  v47 = a7;
  v48 = a6;
  v45 = a5;
  v46 = a4;
  v9 = a1;
  v36 = a1;
  v44 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v43 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  v38 = *(unsigned __int8 *)(v11 + 9);
  v39 = v13;
  v37 = *(unsigned __int8 *)(v11 + 10);
  v14 = *(unsigned __int8 *)(v11 + 11);
  v15 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)&v35 = *(_QWORD *)(v11 + 16);
  v16 = v35;
  *((_QWORD *)&v35 + 1) = v15;
  v17 = *(_QWORD *)(v11 + 32);
  v50 = *(_QWORD *)(v11 + 40);
  v51 = v17;
  v52 = *(unsigned __int8 *)(v11 + 48);
  v53 = v14;
  v49 = *(id *)(v11 + 56);
  v18 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v40 = *(_QWORD *)(v11 + 64);
  *((_QWORD *)&v40 + 1) = v18;
  v42 = *(_QWORD *)v19;
  v41 = *(unsigned __int8 *)(v19 + 8);
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = a3;
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(v9, sel_identifier);
  v22 = sub_1BB8729A0();
  v24 = v23;

  *(_QWORD *)(v20 + 48) = v22;
  *(_QWORD *)(v20 + 56) = v24;
  *(_QWORD *)&v64 = v20;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v34 = sub_1BB872904();
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = v12;
  *(_QWORD *)&v54 = v12;
  LOBYTE(v24) = v38;
  LOBYTE(v9) = v39;
  BYTE8(v54) = v39;
  BYTE9(v54) = v38;
  LOBYTE(v12) = v37;
  BYTE10(v54) = v37;
  BYTE11(v54) = v53;
  *(_QWORD *)&v55 = v16;
  *((_QWORD *)&v55 + 1) = v15;
  v28 = v49;
  *(_QWORD *)&v56 = v51;
  *((_QWORD *)&v56 + 1) = v50;
  LOBYTE(v57) = v52;
  v29 = v40;
  *((_QWORD *)&v57 + 1) = v49;
  v58 = v40;
  v62 = v42;
  v63 = v41;
  sub_1BB80E948(v34, v26, v36, (uint64_t *)&v54, &v62, (uint64_t)&v64);
  swift_bridgeObjectRelease();
  v60 = v70;
  v61[0] = v71[0];
  *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v71 + 9);
  v56 = v66;
  v57 = v67;
  v58 = v68;
  v59 = v69;
  v54 = v64;
  v55 = v65;
  *(_QWORD *)&v64 = v27;
  BYTE8(v64) = (_BYTE)v9;
  BYTE9(v64) = v24;
  BYTE10(v64) = (_BYTE)v12;
  BYTE11(v64) = v53;
  v65 = v35;
  v31 = v50;
  v30 = v51;
  *(_QWORD *)&v66 = v51;
  *((_QWORD *)&v66 + 1) = v50;
  LOBYTE(v67) = v52;
  *((_QWORD *)&v67 + 1) = v28;
  v68 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
  v32 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v30, v31);
  sub_1BA9B5338();
  sub_1BA838938();
  v33 = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)((uint64_t)&v54, (uint64_t)&type metadata for FeedIssue, v47);
}

uint64_t FeedModelFactory.create(tag:context:namespace:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  _OWORD v38[9];
  char v39;
  _QWORD v40[20];

  v9 = *(void **)a2;
  v36 = *(_BYTE *)(a2 + 9);
  v37 = *(_BYTE *)(a2 + 8);
  v34 = *(_BYTE *)(a2 + 11);
  v35 = *(_BYTE *)(a2 + 10);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v28 = *(_QWORD *)(a2 + 40);
  v33 = *(_BYTE *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 32);
  v30 = *(void **)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_QWORD *)(a2 + 72);
  v12 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(a1, sel_identifier);
  v15 = sub_1BB8729A0();
  v17 = v16;

  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 56) = v17;
  v40[0] = v13;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v12, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v18 = sub_1BB872904();
  v20 = v19;
  swift_bridgeObjectRelease();
  sub_1BB33EADC(v18, v20, a1, (uint64_t)v40);
  swift_bridgeObjectRelease();
  sub_1BA6A955C((uint64_t)v40, (uint64_t)v38);
  v21 = v38[7];
  *(_OWORD *)(a5 + 96) = v38[6];
  *(_OWORD *)(a5 + 112) = v21;
  *(_OWORD *)(a5 + 128) = v38[8];
  *(_BYTE *)(a5 + 144) = v39;
  v22 = v38[3];
  *(_OWORD *)(a5 + 32) = v38[2];
  *(_OWORD *)(a5 + 48) = v22;
  v23 = v38[5];
  *(_OWORD *)(a5 + 64) = v38[4];
  *(_OWORD *)(a5 + 80) = v23;
  v24 = v38[1];
  *(_OWORD *)a5 = v38[0];
  *(_OWORD *)(a5 + 16) = v24;
  *(_QWORD *)(a5 + 152) = v9;
  *(_BYTE *)(a5 + 160) = v37;
  *(_BYTE *)(a5 + 161) = v36;
  *(_BYTE *)(a5 + 162) = v35;
  *(_BYTE *)(a5 + 163) = v34;
  *(_QWORD *)(a5 + 168) = v11;
  *(_QWORD *)(a5 + 176) = v10;
  *(_QWORD *)(a5 + 184) = v29;
  *(_QWORD *)(a5 + 192) = v28;
  *(_BYTE *)(a5 + 200) = v33;
  *(_QWORD *)(a5 + 208) = v30;
  *(_QWORD *)(a5 + 216) = v31;
  *(_QWORD *)(a5 + 224) = v32;
  *(_QWORD *)(a5 + 232) = 0;
  *(_QWORD *)(a5 + 240) = 0;
  *(_QWORD *)(a5 + 248) = sub_1BA647E00;
  *(_QWORD *)(a5 + 256) = 0;
  v25 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v29, v28);
  v26 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA6A94C4((uint64_t)v40);
}

void FeedModelFactory.create<A>(tag:context:namespace:metadata:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[152];
  _QWORD v64[20];

  v47 = a7;
  v48 = a6;
  v45 = a5;
  v46 = a4;
  v44 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v49 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  v42 = *(unsigned __int8 *)(v11 + 9);
  v43 = v13;
  v14 = *(unsigned __int8 *)(v11 + 10);
  v40 = *(unsigned __int8 *)(v11 + 11);
  v41 = v14;
  v15 = *(_QWORD *)(v11 + 16);
  v16 = *(_QWORD *)(v11 + 24);
  v17 = *(_QWORD *)(v11 + 32);
  v34 = *(_QWORD *)(v11 + 40);
  v35 = v17;
  v39 = *(unsigned __int8 *)(v11 + 48);
  v18 = *(_QWORD *)(v11 + 64);
  v36 = *(void **)(v11 + 56);
  v37 = v18;
  v38 = *(_QWORD *)(v11 + 72);
  v19 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = a3;
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(a1, sel_identifier);
  v22 = sub_1BB8729A0();
  v24 = v23;

  *(_QWORD *)(v20 + 48) = v22;
  *(_QWORD *)(v20 + 56) = v24;
  v64[0] = v20;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v19, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v25 = sub_1BB872904();
  v27 = v26;
  swift_bridgeObjectRelease();
  sub_1BB33EADC(v25, v27, a1, (uint64_t)v64);
  swift_bridgeObjectRelease();
  sub_1BA6A955C((uint64_t)v64, (uint64_t)v63);
  v50 = v12;
  v51 = v43;
  v52 = v42;
  v53 = v41;
  v54 = v40;
  v55 = v15;
  v56 = v16;
  v29 = v34;
  v28 = v35;
  v57 = v35;
  v58 = v34;
  v59 = v39;
  v30 = v36;
  v60 = v36;
  v61 = v37;
  v62 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v49, v46, v45);
  v31 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v28, v29);
  sub_1BA9B537C();
  sub_1BA838E04();
  v32 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)((uint64_t)v63, (uint64_t)&type metadata for FeedTag, v47);
}

uint64_t sub_1BA9B1600()
{
  uint64_t v0;

  return sub_1BA6A94C4(v0 - 240);
}

double FeedModelFactory.create(tag:context:namespace:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  id v23;
  double result;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _OWORD v46[9];
  char v47;

  v28 = *(_BYTE *)(a3 + 9);
  v29 = *(_BYTE *)(a3 + 8);
  v26 = *(_BYTE *)(a3 + 11);
  v27 = *(_BYTE *)(a3 + 10);
  v12 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a3 + 24);
  v30 = *(void **)a3;
  v31 = *(_QWORD *)(a3 + 40);
  v25 = *(_BYTE *)(a3 + 48);
  v32 = *(_QWORD *)(a3 + 32);
  v33 = *(void **)(a3 + 56);
  v34 = *(_QWORD *)(a3 + 64);
  v35 = *(_QWORD *)(a3 + 72);
  v13 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v14 + 32) = a4;
  *(_QWORD *)(v14 + 40) = a5;
  *(_QWORD *)(v14 + 48) = a1;
  *(_QWORD *)(v14 + 56) = a2;
  *(_QWORD *)&v46[0] = v14;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v13, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1BB872904();
  v17 = v16;
  swift_bridgeObjectRelease();
  sub_1BB33EC08(v15, v17, (uint64_t)&v36);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v36 + 1))
  {
    v46[6] = v42;
    v46[7] = v43;
    v46[8] = v44;
    v47 = v45;
    v46[2] = v38;
    v46[3] = v39;
    v46[4] = v40;
    v46[5] = v41;
    v46[0] = v36;
    v46[1] = v37;
    sub_1BA6A955C((uint64_t)v46, (uint64_t)&v36);
    v18 = v43;
    *(_OWORD *)(a6 + 96) = v42;
    *(_OWORD *)(a6 + 112) = v18;
    *(_OWORD *)(a6 + 128) = v44;
    *(_BYTE *)(a6 + 144) = v45;
    v19 = v39;
    *(_OWORD *)(a6 + 32) = v38;
    *(_OWORD *)(a6 + 48) = v19;
    v20 = v41;
    *(_OWORD *)(a6 + 64) = v40;
    *(_OWORD *)(a6 + 80) = v20;
    v21 = v37;
    *(_OWORD *)a6 = v36;
    *(_OWORD *)(a6 + 16) = v21;
    *(_QWORD *)(a6 + 152) = v30;
    *(_BYTE *)(a6 + 160) = v29;
    *(_BYTE *)(a6 + 161) = v28;
    *(_BYTE *)(a6 + 162) = v27;
    *(_BYTE *)(a6 + 163) = v26;
    *(_QWORD *)(a6 + 168) = v12;
    *(_QWORD *)(a6 + 176) = v11;
    *(_QWORD *)(a6 + 184) = v32;
    *(_QWORD *)(a6 + 192) = v31;
    *(_BYTE *)(a6 + 200) = v25;
    *(_QWORD *)(a6 + 208) = v33;
    *(_QWORD *)(a6 + 216) = v34;
    *(_QWORD *)(a6 + 224) = v35;
    *(_QWORD *)(a6 + 232) = 0;
    *(_QWORD *)(a6 + 240) = 0;
    *(_QWORD *)(a6 + 248) = sub_1BA647E00;
    *(_QWORD *)(a6 + 256) = 0;
    v22 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA653B2C(v32, v31);
    v23 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA6A94C4((uint64_t)v46);
  }
  else
  {
    sub_1BA9B53C0((uint64_t)&v36);
    *(_QWORD *)(a6 + 256) = 0;
    result = 0.0;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

uint64_t FeedModelFactory.create(webEmbed:context:namespace:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t (**v40)();
  id v41;
  id v42;
  _BYTE v44[4];
  int v45;
  int v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  char v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v57 = a5;
  v9 = type metadata accessor for FeedWebEmbed();
  MEMORY[0x1E0C80A78](v9);
  v56 = &v44[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v55 = &v44[-v12];
  v58 = *(_QWORD *)a2;
  v13 = *(_BYTE *)(a2 + 8);
  v46 = v13;
  v54 = *(unsigned __int8 *)(a2 + 9);
  v14 = *(_BYTE *)(a2 + 10);
  v45 = v14;
  v15 = *(_BYTE *)(a2 + 11);
  v47 = v15;
  v50 = *(_QWORD *)(a2 + 16);
  v51 = *(_QWORD *)(a2 + 24);
  v49 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int8 *)(a2 + 48);
  v17 = *(void **)(a2 + 56);
  v59 = v16;
  v60 = v17;
  v18 = *(_QWORD *)(a2 + 72);
  v52 = *(_QWORD *)(a2 + 64);
  v53 = v18;
  v19 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  v48 = a1;
  v21 = a1[1];
  *(_QWORD *)(v20 + 48) = *a1;
  *(_QWORD *)(v20 + 56) = v21;
  v62 = v20;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v19, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = sub_1BB872904();
  v24 = v23;
  swift_bridgeObjectRelease();
  v62 = v58;
  v63 = v13;
  LOBYTE(a1) = v54;
  v64 = v54;
  v65 = v14;
  v66 = v15;
  v25 = v50;
  v26 = v51;
  v67 = v50;
  v68 = v51;
  v27 = v49;
  v69 = v49;
  v70 = v59;
  v71 = v61;
  v29 = v52;
  v28 = v53;
  v72 = v60;
  v73 = v52;
  v74 = v53;
  v30 = v55;
  sub_1BB35347C(v22, v24, (uint64_t)v48, &v62, (uint64_t)v55);
  swift_bridgeObjectRelease();
  v31 = v56;
  sub_1BA4C2DD8((uint64_t)v30, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for FeedWebEmbed);
  v32 = (uint64_t)v31;
  v33 = v57;
  sub_1BA5193C4(v32, v57, (uint64_t (*)(_QWORD))type metadata accessor for FeedWebEmbed);
  v34 = (int *)sub_1BA9B5414();
  v35 = v33 + v34[13];
  v36 = (void *)v58;
  v37 = v59;
  *(_QWORD *)v35 = v58;
  *(_BYTE *)(v35 + 8) = v46;
  *(_BYTE *)(v35 + 9) = (_BYTE)a1;
  *(_BYTE *)(v35 + 10) = v45;
  *(_BYTE *)(v35 + 11) = v47;
  *(_QWORD *)(v35 + 16) = v25;
  *(_QWORD *)(v35 + 24) = v26;
  *(_QWORD *)(v35 + 32) = v27;
  *(_QWORD *)(v35 + 40) = v37;
  *(_BYTE *)(v35 + 48) = v61;
  v38 = v60;
  *(_QWORD *)(v35 + 56) = v60;
  *(_QWORD *)(v35 + 64) = v29;
  *(_QWORD *)(v35 + 72) = v28;
  v39 = (_QWORD *)(v33 + v34[14]);
  *v39 = 0;
  v39[1] = 0;
  v40 = (uint64_t (**)())(v33 + v34[16]);
  *v40 = sub_1BA647E00;
  v40[1] = 0;
  v41 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v27, v37);
  v42 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA4A2E80((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FeedWebEmbed);
}

void FeedModelFactory.create<A>(webEmbed:context:namespace:metadata:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;

  v51 = a8;
  v52 = a7;
  v48 = a6;
  v49 = a5;
  v11 = a1;
  v47 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for FeedWebEmbed();
  MEMORY[0x1E0C80A78](v50);
  v58 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v53 = (uint64_t)&v36 - v15;
  v39 = *(_QWORD *)a2;
  v16 = v39;
  v17 = *(_BYTE *)(a2 + 8);
  v18 = *(_BYTE *)(a2 + 9);
  v43 = *(unsigned __int8 *)(a2 + 10);
  v42 = *(unsigned __int8 *)(a2 + 11);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v54 = *(_QWORD *)(a2 + 16);
  v55 = v19;
  v38 = v20;
  v56 = *(_QWORD *)(a2 + 40);
  v41 = *(unsigned __int8 *)(a2 + 48);
  v57 = *(void **)(a2 + 56);
  v44 = *(_QWORD *)(a2 + 64);
  v45 = *(_QWORD *)(a2 + 72);
  v21 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v22 + 32) = a3;
  *(_QWORD *)(v22 + 40) = a4;
  v40 = v11;
  v23 = v11[1];
  *(_QWORD *)(v22 + 48) = *v11;
  *(_QWORD *)(v22 + 56) = v23;
  v59 = v22;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v21, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = sub_1BB872904();
  v25 = v24;
  swift_bridgeObjectRelease();
  v59 = v16;
  v60 = v17;
  LOBYTE(v11) = v18;
  v61 = v18;
  LOBYTE(v16) = v43;
  v62 = v43;
  v26 = v42;
  v63 = v42;
  v27 = v53;
  v64 = v54;
  v65 = v55;
  v66 = v20;
  v67 = v56;
  LOBYTE(v20) = v41;
  v68 = v41;
  v28 = v44;
  v69 = v57;
  v70 = v44;
  v29 = v45;
  v71 = v45;
  sub_1BB35347C(v37, v25, (uint64_t)v40, &v59, v53);
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8(v27, v58, (uint64_t (*)(_QWORD))type metadata accessor for FeedWebEmbed);
  v30 = (void *)v39;
  v59 = v39;
  v60 = v17;
  v61 = (char)v11;
  v62 = v16;
  v63 = v26;
  v64 = v54;
  v65 = v55;
  v31 = v38;
  v32 = v56;
  v66 = v38;
  v67 = v56;
  v68 = v20;
  v33 = v57;
  v69 = v57;
  v70 = v28;
  v71 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
  v34 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v31, v32);
  sub_1BA4A2870(&qword_1ED3A5298, (uint64_t (*)(uint64_t))type metadata accessor for FeedWebEmbed, (uint64_t)&protocol conformance descriptor for FeedWebEmbed);
  sub_1BA4A2870(&qword_1ED39AF50, (uint64_t (*)(uint64_t))type metadata accessor for FeedWebEmbed, (uint64_t)&protocol conformance descriptor for FeedWebEmbed);
  v35 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)(v58, v50, v51);
}

uint64_t sub_1BA9B2024()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_1BA4A2E80(*(_QWORD *)(v1 - 216), v0);
}

uint64_t FeedModelFactory.create(customItem:context:namespace:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t (**v40)();
  id v41;
  id v42;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;

  v10 = type metadata accessor for FeedCustomItem();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v44 - v14);
  v16 = *(void **)a2;
  v17 = *(unsigned __int8 *)(a2 + 8);
  v55 = *(unsigned __int8 *)(a2 + 9);
  v56 = v17;
  v18 = *(unsigned __int8 *)(a2 + 10);
  v53 = *(unsigned __int8 *)(a2 + 11);
  v54 = v18;
  v44 = *(_QWORD *)(a2 + 16);
  v45 = v16;
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 40);
  v46 = *(_QWORD *)(a2 + 24);
  v47 = v20;
  v52 = *(unsigned __int8 *)(a2 + 48);
  v21 = *(void **)(a2 + 56);
  v48 = v19;
  v49 = v21;
  v22 = *(_QWORD *)(a2 + 72);
  v50 = *(_QWORD *)(a2 + 64);
  v51 = v22;
  v23 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v24 + 32) = a3;
  *(_QWORD *)(v24 + 40) = a4;
  v25 = a1[1];
  *(_QWORD *)(v24 + 48) = *a1;
  *(_QWORD *)(v24 + 56) = v25;
  v57 = v24;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v23, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = sub_1BB872904();
  v28 = v27;
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8((uint64_t)a1, (uint64_t)v15 + *(int *)(v10 + 20), (uint64_t (*)(_QWORD))type metadata accessor for FormatCustomItem.Resolved);
  *v15 = v26;
  v15[1] = v28;
  sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FeedCustomItem);
  sub_1BA5193C4((uint64_t)v12, a5, (uint64_t (*)(_QWORD))type metadata accessor for FeedCustomItem);
  v29 = (int *)sub_1BA9B54CC();
  v30 = a5 + v29[13];
  v32 = v44;
  v31 = v45;
  *(_QWORD *)v30 = v45;
  *(_BYTE *)(v30 + 8) = v56;
  *(_BYTE *)(v30 + 9) = v55;
  *(_BYTE *)(v30 + 10) = v54;
  *(_BYTE *)(v30 + 11) = v53;
  v34 = v46;
  v33 = v47;
  *(_QWORD *)(v30 + 16) = v32;
  *(_QWORD *)(v30 + 24) = v34;
  v36 = v48;
  v35 = v49;
  *(_QWORD *)(v30 + 32) = v48;
  *(_QWORD *)(v30 + 40) = v33;
  *(_BYTE *)(v30 + 48) = v52;
  v38 = v50;
  v37 = v51;
  *(_QWORD *)(v30 + 56) = v35;
  *(_QWORD *)(v30 + 64) = v38;
  *(_QWORD *)(v30 + 72) = v37;
  v39 = (_QWORD *)(a5 + v29[14]);
  *v39 = 0;
  v39[1] = 0;
  v40 = (uint64_t (**)())(a5 + v29[16]);
  *v40 = sub_1BA647E00;
  v40[1] = 0;
  v41 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v36, v33);
  v42 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FeedCustomItem);
}

void FeedModelFactory.create<A>(customItem:context:namespace:metadata:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;

  v49 = a8;
  v50 = a7;
  v47 = a6;
  v48 = a5;
  v46 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for FeedCustomItem();
  MEMORY[0x1E0C80A78](v52);
  v51 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v34 - v15);
  v35 = *(void **)a2;
  v17 = *(unsigned __int8 *)(a2 + 8);
  v43 = *(unsigned __int8 *)(a2 + 9);
  v44 = v17;
  v18 = *(unsigned __int8 *)(a2 + 10);
  v41 = *(unsigned __int8 *)(a2 + 11);
  v42 = v18;
  v19 = *(_QWORD *)(a2 + 16);
  v36 = *(_QWORD *)(a2 + 24);
  v38 = *(_QWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a2 + 40);
  v40 = *(unsigned __int8 *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 64);
  v39 = *(void **)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 72);
  v22 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v23 + 32) = a3;
  *(_QWORD *)(v23 + 40) = a4;
  v24 = a1[1];
  *(_QWORD *)(v23 + 48) = *a1;
  *(_QWORD *)(v23 + 56) = v24;
  v53 = v23;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v22, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = sub_1BB872904();
  v27 = v26;
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8((uint64_t)a1, (uint64_t)v16 + *(int *)(v52 + 20), (uint64_t (*)(_QWORD))type metadata accessor for FormatCustomItem.Resolved);
  v34 = v16;
  *v16 = v25;
  v16[1] = v27;
  sub_1BA4C2DD8((uint64_t)v16, v51, (uint64_t (*)(_QWORD))type metadata accessor for FeedCustomItem);
  v28 = v35;
  v53 = (uint64_t)v35;
  v54 = v44;
  v55 = v43;
  v56 = v42;
  v57 = v41;
  v58 = v19;
  v59 = v36;
  v29 = v38;
  v30 = v37;
  v60 = v38;
  v61 = v37;
  v62 = v40;
  v31 = v39;
  v63 = v39;
  v64 = v20;
  v65 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v48, v47);
  v32 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v29, v30);
  sub_1BA4A2870(&qword_1ED3A0D90, (uint64_t (*)(uint64_t))type metadata accessor for FeedCustomItem, (uint64_t)&protocol conformance descriptor for FeedCustomItem);
  sub_1BA4A2870((unint64_t *)&qword_1ED39E458, (uint64_t (*)(uint64_t))type metadata accessor for FeedCustomItem, (uint64_t)&protocol conformance descriptor for FeedCustomItem);
  v33 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)(v51, v52, v49);
}

uint64_t sub_1BA9B2628()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_1BA4A2E80(*(_QWORD *)(v1 - 304), v0);
}

uint64_t FeedModelFactory.createBannerAd(context:namespace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (**v32)();
  id v33;
  id v34;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a2;
  v47 = a3;
  v7 = type metadata accessor for FeedBannerAd();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - v11;
  v13 = *(void **)a1;
  v14 = *(unsigned __int8 *)(a1 + 8);
  v44 = *(unsigned __int8 *)(a1 + 9);
  v45 = v14;
  v15 = *(unsigned __int8 *)(a1 + 10);
  v42 = *(unsigned __int8 *)(a1 + 11);
  v43 = v15;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v41 = *(unsigned __int8 *)(a1 + 48);
  v20 = *(void **)(a1 + 56);
  v37 = v13;
  v38 = v20;
  v21 = *(_QWORD *)(a1 + 72);
  v39 = *(_QWORD *)(a1 + 64);
  v40 = v21;
  v22 = v4[10];
  v23 = v4[11];
  __swift_project_boxed_opaque_existential_1(v4 + 7, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  sub_1BA4C2DD8((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAd);
  sub_1BA5193C4((uint64_t)v9, a4, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAd);
  v24 = (int *)sub_1BA9B5584();
  v25 = a4 + v24[13];
  v26 = v37;
  v27 = v38;
  *(_QWORD *)v25 = v37;
  *(_BYTE *)(v25 + 8) = v45;
  *(_BYTE *)(v25 + 9) = v44;
  *(_BYTE *)(v25 + 10) = v43;
  *(_BYTE *)(v25 + 11) = v42;
  *(_QWORD *)(v25 + 16) = v16;
  *(_QWORD *)(v25 + 24) = v17;
  *(_QWORD *)(v25 + 32) = v19;
  *(_QWORD *)(v25 + 40) = v18;
  *(_BYTE *)(v25 + 48) = v41;
  v29 = v39;
  v28 = v40;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v29;
  *(_QWORD *)(v25 + 72) = v28;
  v30 = (_QWORD *)(a4 + v24[14]);
  v31 = v47;
  *v30 = v46;
  v30[1] = v31;
  v32 = (uint64_t (**)())(a4 + v24[16]);
  *v32 = sub_1BA647E00;
  v32[1] = 0;
  v33 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v19, v18);
  v34 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAd);
}

void FeedModelFactory.createBannerAd<A>(context:namespace:metadata:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  v42 = a4;
  v43 = a5;
  v40 = a2;
  v37 = *(_QWORD *)(a3 - 8);
  v38 = a3;
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for FeedBannerAd();
  MEMORY[0x1E0C80A78](v41);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v9;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - v11;
  v13 = *(void **)a1;
  v14 = *(unsigned __int8 *)(a1 + 8);
  v33 = *(unsigned __int8 *)(a1 + 9);
  v34 = v14;
  v15 = *(unsigned __int8 *)(a1 + 10);
  v31 = *(unsigned __int8 *)(a1 + 11);
  v32 = v15;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 32);
  v30 = *(unsigned __int8 *)(a1 + 48);
  v28 = *(void **)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 64);
  v21 = v5[10];
  v20 = v5[11];
  __swift_project_boxed_opaque_existential_1(v5 + 7, v21);
  v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v39 = v12;
  v22(v21, v20);
  sub_1BA4C2DD8((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAd);
  v44 = v13;
  v45 = v34;
  v46 = v33;
  v47 = v32;
  v48 = v31;
  v49 = v16;
  v50 = v17;
  v23 = v27;
  v51 = v27;
  v52 = v18;
  v53 = v30;
  v24 = v28;
  v54 = v28;
  v55 = v29;
  v56 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v35, v40, v38);
  v25 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v23, v18);
  sub_1BA4A2870(&qword_1ED3A5288, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd, (uint64_t)&protocol conformance descriptor for FeedBannerAd);
  sub_1BA4A2870(&qword_1ED3B2D08, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd, (uint64_t)&protocol conformance descriptor for FeedBannerAd);
  v26 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)((uint64_t)v36, v41, v43);
}

uint64_t sub_1BA9B2AAC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_1BA4A2E80(*(_QWORD *)(v1 - 208), v0);
}

uint64_t FeedModelFactory.create(puzzle:context:namespace:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  _OWORD v40[10];
  uint64_t v41;
  _QWORD v42[22];

  v9 = *(void **)a2;
  v38 = *(_BYTE *)(a2 + 9);
  v39 = *(_BYTE *)(a2 + 8);
  v36 = *(_BYTE *)(a2 + 11);
  v37 = *(_BYTE *)(a2 + 10);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v30 = *(_QWORD *)(a2 + 40);
  v35 = *(_BYTE *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(void **)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_QWORD *)(a2 + 72);
  v12 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(a1, sel_identifier);
  v15 = sub_1BB8729A0();
  v17 = v16;

  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 56) = v17;
  v42[0] = v13;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v12, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v18 = sub_1BB872904();
  v20 = v19;
  swift_bridgeObjectRelease();
  sub_1BB479364(v18, v20, (uint64_t)a1, (uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_1BA93EB58((uint64_t)v42, (uint64_t)v40);
  v21 = v40[9];
  *(_OWORD *)(a5 + 128) = v40[8];
  *(_OWORD *)(a5 + 144) = v21;
  v22 = v41;
  v23 = v40[5];
  *(_OWORD *)(a5 + 64) = v40[4];
  *(_OWORD *)(a5 + 80) = v23;
  v24 = v40[7];
  *(_OWORD *)(a5 + 96) = v40[6];
  *(_OWORD *)(a5 + 112) = v24;
  v25 = v40[1];
  *(_OWORD *)a5 = v40[0];
  *(_OWORD *)(a5 + 16) = v25;
  v26 = v40[3];
  *(_OWORD *)(a5 + 32) = v40[2];
  *(_OWORD *)(a5 + 48) = v26;
  *(_QWORD *)(a5 + 160) = v22;
  *(_QWORD *)(a5 + 168) = v9;
  *(_BYTE *)(a5 + 176) = v39;
  *(_BYTE *)(a5 + 177) = v38;
  *(_BYTE *)(a5 + 178) = v37;
  *(_BYTE *)(a5 + 179) = v36;
  *(_QWORD *)(a5 + 184) = v11;
  *(_QWORD *)(a5 + 192) = v10;
  *(_QWORD *)(a5 + 200) = v31;
  *(_QWORD *)(a5 + 208) = v30;
  *(_BYTE *)(a5 + 216) = v35;
  *(_QWORD *)(a5 + 224) = v32;
  *(_QWORD *)(a5 + 232) = v33;
  *(_QWORD *)(a5 + 240) = v34;
  *(_QWORD *)(a5 + 248) = 0;
  *(_QWORD *)(a5 + 256) = 0;
  *(_QWORD *)(a5 + 264) = sub_1BA647E00;
  *(_QWORD *)(a5 + 272) = 0;
  v27 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v31, v30);
  v28 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA93EBE8((uint64_t)v42);
}

void FeedModelFactory.create<A>(puzzle:context:namespace:metadata:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[168];
  _QWORD v64[22];

  v47 = a7;
  v48 = a6;
  v45 = a5;
  v46 = a4;
  v44 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v49 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  v42 = *(unsigned __int8 *)(v11 + 9);
  v43 = v13;
  v14 = *(unsigned __int8 *)(v11 + 10);
  v40 = *(unsigned __int8 *)(v11 + 11);
  v41 = v14;
  v15 = *(_QWORD *)(v11 + 16);
  v16 = *(_QWORD *)(v11 + 24);
  v17 = *(_QWORD *)(v11 + 32);
  v34 = *(_QWORD *)(v11 + 40);
  v35 = v17;
  v39 = *(unsigned __int8 *)(v11 + 48);
  v18 = *(_QWORD *)(v11 + 64);
  v36 = *(void **)(v11 + 56);
  v37 = v18;
  v38 = *(_QWORD *)(v11 + 72);
  v19 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = a3;
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(a1, sel_identifier);
  v22 = sub_1BB8729A0();
  v24 = v23;

  *(_QWORD *)(v20 + 48) = v22;
  *(_QWORD *)(v20 + 56) = v24;
  v64[0] = v20;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v19, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v25 = sub_1BB872904();
  v27 = v26;
  swift_bridgeObjectRelease();
  sub_1BB479364(v25, v27, (uint64_t)a1, (uint64_t)v64);
  swift_bridgeObjectRelease();
  sub_1BA93EB58((uint64_t)v64, (uint64_t)v63);
  v50 = v12;
  v51 = v43;
  v52 = v42;
  v53 = v41;
  v54 = v40;
  v55 = v15;
  v56 = v16;
  v29 = v34;
  v28 = v35;
  v57 = v35;
  v58 = v34;
  v59 = v39;
  v30 = v36;
  v60 = v36;
  v61 = v37;
  v62 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v49, v46, v45);
  v31 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v28, v29);
  sub_1BA9B563C();
  sub_1BA9B5680();
  v32 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)((uint64_t)v63, (uint64_t)&type metadata for FeedPuzzle, v47);
}

uint64_t sub_1BA9B2FD8()
{
  uint64_t v0;

  return sub_1BA93EBE8(v0 - 256);
}

uint64_t FeedModelFactory.create(puzzleType:context:namespace:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[7];

  v9 = *(void **)a2;
  v29 = *(_BYTE *)(a2 + 9);
  v30 = *(_BYTE *)(a2 + 8);
  v27 = *(_BYTE *)(a2 + 11);
  v28 = *(_BYTE *)(a2 + 10);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_BYTE *)(a2 + 48);
  v31 = *(void **)(a2 + 56);
  v32 = *(_QWORD *)(a2 + 64);
  v33 = *(_QWORD *)(a2 + 72);
  v12 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(a1, sel_identifier);
  v15 = sub_1BB8729A0();
  v17 = v16;

  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 56) = v17;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v12, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v18 = sub_1BB872904();
  v20 = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  *(_DWORD *)(a5 + 17) = v13;
  *(_DWORD *)(a5 + 20) = v13 >> 24;
  *(_OWORD *)(a5 + 24) = xmmword_1BB88C450;
  *(_QWORD *)(a5 + 40) = v18;
  *(_QWORD *)(a5 + 48) = v20;
  *(_QWORD *)(a5 + 56) = a1;
  *(_QWORD *)(a5 + 64) = v9;
  *(_BYTE *)(a5 + 72) = v30;
  *(_BYTE *)(a5 + 73) = v29;
  *(_BYTE *)(a5 + 74) = v28;
  *(_BYTE *)(a5 + 75) = v27;
  *(_QWORD *)(a5 + 80) = v11;
  *(_QWORD *)(a5 + 88) = v10;
  *(_QWORD *)(a5 + 96) = v25;
  *(_QWORD *)(a5 + 104) = v24;
  *(_BYTE *)(a5 + 112) = v26;
  *(_DWORD *)(a5 + 113) = *(_DWORD *)v34;
  *(_DWORD *)(a5 + 116) = *(_DWORD *)&v34[3];
  *(_QWORD *)(a5 + 120) = v31;
  *(_QWORD *)(a5 + 128) = v32;
  *(_QWORD *)(a5 + 136) = v33;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 152) = 0;
  *(_QWORD *)(a5 + 160) = sub_1BA647E00;
  *(_QWORD *)(a5 + 168) = 0;
  swift_unknownObjectRetain();
  v21 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v25, v24);
  v22 = v31;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t FeedModelFactory.create(puzzleStatistic:context:namespace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t (**v60)();
  id v61;
  id v62;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v65 = a5;
  v66 = a3;
  v8 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v8);
  v74 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v64 - v11;
  v67 = type metadata accessor for PuzzleStatistic();
  MEMORY[0x1E0C80A78](v67);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FeedPuzzleStatistic();
  MEMORY[0x1E0C80A78](v15);
  v73 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v64 - v18;
  MEMORY[0x1E0C80A78](v20);
  v64 = (char *)&v64 - v21;
  v22 = *(void **)a2;
  v23 = *(unsigned __int8 *)(a2 + 8);
  v71 = *(unsigned __int8 *)(a2 + 9);
  v72 = v23;
  v24 = *(unsigned __int8 *)(a2 + 10);
  v69 = *(unsigned __int8 *)(a2 + 11);
  v70 = v24;
  v75 = *(_QWORD *)(a2 + 16);
  v76 = v22;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  v77 = *(_QWORD *)(a2 + 24);
  v78 = v26;
  v68 = *(unsigned __int8 *)(a2 + 48);
  v27 = *(void **)(a2 + 56);
  v79 = v25;
  v80 = v27;
  v28 = *(_QWORD *)(a2 + 72);
  v81 = *(_QWORD *)(a2 + 64);
  v82 = v28;
  v29 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v30 + 32) = v66;
  *(_QWORD *)(v30 + 40) = a4;
  swift_bridgeObjectRetain();
  PuzzleStatistic.identifier.getter();
  *(_QWORD *)(v30 + 48) = v31;
  *(_QWORD *)(v30 + 56) = v32;
  v83 = v30;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v29, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v33 = sub_1BB872904();
  v35 = v34;
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  *(_OWORD *)(v19 + 24) = xmmword_1BB88C460;
  *((_QWORD *)v19 + 5) = v33;
  *((_QWORD *)v19 + 6) = v35;
  sub_1BA4C2DD8((uint64_t)v14, (uint64_t)&v19[*(int *)(v15 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  swift_getObjectType();
  swift_bridgeObjectRetain();
  FCPuzzleTypeProviding.puzzleKindTraits.getter(&v83);
  v36 = v83;
  v37 = (uint64_t)&v14[*(int *)(v67 + 20)];
  sub_1BA4C2DD8(v37, (uint64_t)v12, type metadata accessor for PuzzleStatisticCategory);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) < 2)
  {
    sub_1BA4A2E80((uint64_t)v12, type metadata accessor for PuzzleStatisticCategory);
    v40 = (uint64_t)v64;
    v39 = v65;
LABEL_3:
    v41 = 0x100000000000;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload
    && (FCPuzzleTypeProviding.puzzleKind.getter(), v42 = v83, v83 != 3))
  {
    sub_1BA4A2E80((uint64_t)v12, type metadata accessor for PuzzleStatisticCategory);
    v40 = (uint64_t)v64;
    v39 = v65;
    if (!v42)
      goto LABEL_3;
    v41 = 0x80000000000;
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v12, type metadata accessor for PuzzleStatisticCategory);
    v41 = 0x80000000000;
    v40 = (uint64_t)v64;
    v39 = v65;
  }
LABEL_7:
  v43 = v36 | v41;
  v44 = v37;
  v45 = v74;
  sub_1BA4C2DD8(v44, v74, type metadata accessor for PuzzleStatisticCategory);
  v46 = swift_getEnumCaseMultiPayload();
  sub_1BA4A2E80(v45, type metadata accessor for PuzzleStatisticCategory);
  if (v46 == 2)
    v47 = v43 | 0x1000000000000;
  else
    v47 = v43;
  sub_1BA4A2E80((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  *(_QWORD *)v19 = v47;
  sub_1BA5193C4((uint64_t)v19, v40, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
  swift_bridgeObjectRelease();
  v48 = v73;
  sub_1BA4C2DD8(v40, v73, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
  sub_1BA5193C4(v48, v39, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
  v49 = (int *)sub_1BA9B56C4();
  v50 = v39 + v49[13];
  v52 = v75;
  v51 = v76;
  *(_QWORD *)v50 = v76;
  *(_BYTE *)(v50 + 8) = v72;
  *(_BYTE *)(v50 + 9) = v71;
  *(_BYTE *)(v50 + 10) = v70;
  *(_BYTE *)(v50 + 11) = v69;
  v54 = v77;
  v53 = v78;
  *(_QWORD *)(v50 + 16) = v52;
  *(_QWORD *)(v50 + 24) = v54;
  v56 = v79;
  v55 = v80;
  *(_QWORD *)(v50 + 32) = v79;
  *(_QWORD *)(v50 + 40) = v53;
  *(_BYTE *)(v50 + 48) = v68;
  v58 = v81;
  v57 = v82;
  *(_QWORD *)(v50 + 56) = v55;
  *(_QWORD *)(v50 + 64) = v58;
  *(_QWORD *)(v50 + 72) = v57;
  v59 = (_QWORD *)(v39 + v49[14]);
  *v59 = 0;
  v59[1] = 0;
  v60 = (uint64_t (**)())(v39 + v49[16]);
  *v60 = sub_1BA647E00;
  v60[1] = 0;
  v61 = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v56, v53);
  v62 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BA4A2E80(v40, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
}

void FeedModelFactory.create<A>(puzzleType:context:namespace:metadata:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;

  v42 = a6;
  v40 = a5;
  v41 = a4;
  v43 = a7;
  v31 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v44 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)v11;
  v39 = *(unsigned __int8 *)(v11 + 8);
  v38 = *(unsigned __int8 *)(v11 + 9);
  v37 = *(unsigned __int8 *)(v11 + 10);
  v36 = *(unsigned __int8 *)(v11 + 11);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 32);
  v32 = *(_QWORD *)(v11 + 40);
  v35 = *(unsigned __int8 *)(v11 + 48);
  v16 = *(_QWORD *)(v11 + 64);
  v33 = *(void **)(v11 + 56);
  v34 = *(_QWORD *)(v11 + 72);
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  swift_bridgeObjectRetain();
  v18 = objc_msgSend(a1, sel_identifier);
  v19 = sub_1BB8729A0();
  v21 = v20;

  *(_QWORD *)(v17 + 48) = v19;
  *(_QWORD *)(v17 + 56) = v21;
  v45 = v17;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v22 = sub_1BB872904();
  v24 = v23;
  swift_bridgeObjectRelease();
  v58[0] = 0;
  v58[1] = 0;
  v59 = 1;
  v60 = xmmword_1BB88C450;
  v61 = v22;
  v62 = v24;
  v63 = a1;
  v45 = (uint64_t)v12;
  v46 = v39;
  v47 = v38;
  v48 = v37;
  v49 = v36;
  v50 = v13;
  v51 = v14;
  v25 = v15;
  v26 = v32;
  v52 = v15;
  v53 = v32;
  v54 = v35;
  v27 = v33;
  v55 = v33;
  v56 = v16;
  v57 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v44, v41, v40);
  swift_unknownObjectRetain();
  v28 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v25, v26);
  sub_1BA9B577C();
  sub_1BA9B57C0();
  v29 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)((uint64_t)v58, (uint64_t)&type metadata for FeedPuzzleType, v43);
}

void FeedModelFactory.create<A>(puzzleStatistic:context:namespace:metadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;

  v71 = a8;
  v72 = a7;
  v68 = a3;
  v69 = a5;
  v73 = a6;
  v67 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v70 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v12);
  v54 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v51 - v15;
  v55 = type metadata accessor for PuzzleStatistic();
  MEMORY[0x1E0C80A78](v55);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FeedPuzzleStatistic();
  MEMORY[0x1E0C80A78](v19);
  v75 = (uint64_t)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v51 - v22;
  MEMORY[0x1E0C80A78](v24);
  v74 = (uint64_t)&v51 - v25;
  v61 = *(void **)a2;
  v52 = *(unsigned __int8 *)(a2 + 8);
  v59 = *(unsigned __int8 *)(a2 + 9);
  v58 = *(unsigned __int8 *)(a2 + 10);
  v57 = *(unsigned __int8 *)(a2 + 11);
  v60 = *(_QWORD *)(a2 + 16);
  v62 = *(_QWORD *)(a2 + 24);
  v53 = *(_QWORD *)(a2 + 32);
  v63 = *(_QWORD *)(a2 + 40);
  v56 = *(unsigned __int8 *)(a2 + 48);
  v64 = *(void **)(a2 + 56);
  v26 = *(_QWORD *)(a2 + 72);
  v65 = *(_QWORD *)(a2 + 64);
  v66 = v26;
  v27 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v28 + 32) = v68;
  *(_QWORD *)(v28 + 40) = a4;
  swift_bridgeObjectRetain();
  PuzzleStatistic.identifier.getter();
  *(_QWORD *)(v28 + 48) = v29;
  *(_QWORD *)(v28 + 56) = v30;
  v76 = v28;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v27, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  v31 = sub_1BB872904();
  v33 = v32;
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  *(_OWORD *)(v23 + 24) = xmmword_1BB88C460;
  *((_QWORD *)v23 + 5) = v31;
  *((_QWORD *)v23 + 6) = v33;
  v68 = v19;
  sub_1BA4C2DD8((uint64_t)v18, (uint64_t)&v23[*(int *)(v19 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  swift_getObjectType();
  swift_bridgeObjectRetain();
  FCPuzzleTypeProviding.puzzleKindTraits.getter(&v76);
  v51 = v76;
  v34 = (uint64_t)&v18[*(int *)(v55 + 20)];
  sub_1BA4C2DD8(v34, (uint64_t)v16, type metadata accessor for PuzzleStatisticCategory);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) < 2)
  {
    sub_1BA4A2E80((uint64_t)v16, type metadata accessor for PuzzleStatisticCategory);
    v36 = (uint64_t)v54;
    v37 = v53;
    v38 = v52;
    v39 = v51;
LABEL_3:
    v40 = 0x100000000000;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload
    && (FCPuzzleTypeProviding.puzzleKind.getter(), v41 = v76, v76 != 3))
  {
    sub_1BA4A2E80((uint64_t)v16, type metadata accessor for PuzzleStatisticCategory);
    v36 = (uint64_t)v54;
    v37 = v53;
    v38 = v52;
    v39 = v51;
    if (!v41)
      goto LABEL_3;
    v40 = 0x80000000000;
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v16, type metadata accessor for PuzzleStatisticCategory);
    v40 = 0x80000000000;
    v36 = (uint64_t)v54;
    v37 = v53;
    v38 = v52;
    v39 = v51;
  }
LABEL_7:
  v42 = v39 | v40;
  sub_1BA4C2DD8(v34, v36, type metadata accessor for PuzzleStatisticCategory);
  v43 = swift_getEnumCaseMultiPayload();
  sub_1BA4A2E80(v36, type metadata accessor for PuzzleStatisticCategory);
  if (v43 == 2)
    v44 = v42 | 0x1000000000000;
  else
    v44 = v42;
  sub_1BA4A2E80((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  *(_QWORD *)v23 = v44;
  v45 = v74;
  sub_1BA5193C4((uint64_t)v23, v74, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
  swift_bridgeObjectRelease();
  sub_1BA4C2DD8(v45, v75, (uint64_t (*)(_QWORD))type metadata accessor for FeedPuzzleStatistic);
  v46 = v61;
  v76 = (uint64_t)v61;
  v77 = v38;
  v78 = v59;
  v79 = v58;
  v80 = v57;
  v81 = v60;
  v82 = v62;
  v47 = v63;
  v83 = v37;
  v84 = v63;
  v85 = v56;
  v48 = v64;
  v86 = v64;
  v87 = v65;
  v88 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v70, v69, v73);
  v49 = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v37, v47);
  sub_1BA4A2870(&qword_1EF2AC5A8, (uint64_t (*)(uint64_t))type metadata accessor for FeedPuzzleStatistic, (uint64_t)&protocol conformance descriptor for FeedPuzzleStatistic);
  sub_1BA4A2870(&qword_1EF2AC5B0, (uint64_t (*)(uint64_t))type metadata accessor for FeedPuzzleStatistic, (uint64_t)&protocol conformance descriptor for FeedPuzzleStatistic);
  v50 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FeedModel<>.init(model:context:namespace:metadata:)(v75, v68, v71);
}

uint64_t FeedModelFactory.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t FeedModelFactory.__deallocating_deinit()
{
  FeedModelFactory.deinit();
  return swift_deallocClassInstance();
}

uint64_t FeedModelFactory.createAuxiliary(auxiliary:context:parentIdentifier:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD v16[5];

  v6 = v5;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = a2[3];
  v16[2] = a2[2];
  v16[3] = v11;
  v16[4] = a2[4];
  v12 = a2[1];
  v16[0] = *a2;
  v16[1] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BA653910((uint64_t)v16);
  v13 = swift_bridgeObjectRetain();
  v14 = sub_1BA9B5804(v13, a3, a4, v6, (uint64_t)v16);
  sub_1BA4CBDD0((uint64_t)v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *a5 = a3;
  a5[1] = a4;
  a5[2] = v14;
  a5[3] = v10;
  a5[4] = 0x7261696C69787561;
  a5[5] = 0xE900000000000079;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1BA9B41B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a5;
  v39 = a4;
  v41 = a2;
  v42 = a3;
  v43 = a6;
  v29 = type metadata accessor for FeedCustomItem();
  MEMORY[0x1E0C80A78](v29);
  v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FormatCustomItem.Resolved();
  MEMORY[0x1E0C80A78](v8);
  v37 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v37);
  v33 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v31 = (char *)&v26 - v11;
  v28 = type metadata accessor for FeedPuzzleStatistic();
  MEMORY[0x1E0C80A78](v28);
  v36 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v32 = (char *)&v26 - v14;
  v27 = type metadata accessor for PuzzleStatistic();
  MEMORY[0x1E0C80A78](v27);
  v34 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v35 = (char *)&v26 - v17;
  v18 = type metadata accessor for FeedWebEmbed();
  MEMORY[0x1E0C80A78](v18);
  v19 = type metadata accessor for FormatWebEmbed.Resolved();
  MEMORY[0x1E0C80A78](v19);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
  MEMORY[0x1E0C80A78](v20);
  v21 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v21);
  v22 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  MEMORY[0x1E0C80A78](v22);
  v40 = a1;
  sub_1BA4C2DD8(a1, (uint64_t)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
  v25 = (char *)&loc_1BA9B44B0 + dword_1BA9B52F4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BA9B44C0()
{
  _QWORD *v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *v1;
  v6 = objc_msgSend(*v1, sel_identifier);
  v7 = sub_1BB8729A0();
  v9 = v8;

  v10 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BB87FC80;
  *(_QWORD *)(v11 + 32) = 0x7261696C69787561;
  *(_QWORD *)(v11 + 40) = 0xE900000000000079;
  v12 = v0[16];
  *(_QWORD *)(v11 + 48) = v0[15];
  *(_QWORD *)(v11 + 56) = v12;
  *(_QWORD *)(v11 + 64) = v7;
  *(_QWORD *)(v11 + 72) = v9;
  *(_QWORD *)(v4 - 240) = v11;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, v10, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1BB872904();
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (_OWORD *)v0[12];
  v17 = v16[3];
  *(_OWORD *)(v4 - 208) = v16[2];
  *(_OWORD *)(v4 - 192) = v17;
  *(_OWORD *)(v4 - 176) = v16[4];
  v18 = v16[1];
  *(_OWORD *)(v4 - 240) = *v16;
  *(_OWORD *)(v4 - 224) = v18;
  v19 = sub_1BB871B24();
  v20 = (void (*)(uint64_t))MEMORY[0x1E0D52718];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v3, 1, 1, v19);
  sub_1BA5DECF0(v13, v15, v5, v4 - 240, v3, v2);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA502AD0(v3, (unint64_t *)&qword_1ED3B0B00, v20);
  v21 = v0[17];
  sub_1BA5193C4(v2, v21, type metadata accessor for FeedHeadline);
  type metadata accessor for FeedItem(0);
  swift_storeEnumTagMultiPayload();
  v22 = type metadata accessor for FormatContentSlotItemResolution();
  v23 = v0[14];
  v24 = *(_QWORD *)(v23 + *(int *)(v22 + 28));
  v25 = *(_QWORD *)(v23 + *(int *)(v22 + 24));
  v26 = type metadata accessor for FeedItemAuxiliaryItem();
  *(_QWORD *)(v21 + *(int *)(v26 + 20)) = v24;
  *(_QWORD *)(v21 + *(int *)(v26 + 24)) = v25;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 0, 1, v26);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1BA9B514C()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  v1 = type metadata accessor for FeedItemAuxiliaryItem();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(*(_QWORD *)(v0 + 136), 1, 1, v1);
  JUMPOUT(0x1BA9B5124);
}

uint64_t sub_1BA9B5318@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return FeedModelFactory.createAuxiliary(auxiliary:context:parentIdentifier:)(a1, a2, a3, a4, a5);
}

unint64_t sub_1BA9B5338()
{
  unint64_t result;

  result = qword_1EF2AC590;
  if (!qword_1EF2AC590)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedIssue, &type metadata for FeedIssue);
    atomic_store(result, (unint64_t *)&qword_1EF2AC590);
  }
  return result;
}

unint64_t sub_1BA9B537C()
{
  unint64_t result;

  result = qword_1ED3A5230;
  if (!qword_1ED3A5230)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedTag, &type metadata for FeedTag);
    atomic_store(result, (unint64_t *)&qword_1ED3A5230);
  }
  return result;
}

uint64_t sub_1BA9B53C0(uint64_t a1)
{
  uint64_t v2;

  sub_1BA4AD288(0, &qword_1ED3C1098, (uint64_t)&type metadata for FeedTag, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BA9B5414()
{
  uint64_t result;

  result = qword_1ED3A5250;
  if (!qword_1ED3A5250)
  {
    type metadata accessor for FeedWebEmbed();
    sub_1BA4A2870(&qword_1ED3A5298, (uint64_t (*)(uint64_t))type metadata accessor for FeedWebEmbed, (uint64_t)&protocol conformance descriptor for FeedWebEmbed);
    sub_1BA4A2870(&qword_1ED39AF50, (uint64_t (*)(uint64_t))type metadata accessor for FeedWebEmbed, (uint64_t)&protocol conformance descriptor for FeedWebEmbed);
    type metadata accessor for FeedModel();
  }
  return result;
}

uint64_t sub_1BA9B54CC()
{
  uint64_t result;

  result = qword_1ED3A0DF0;
  if (!qword_1ED3A0DF0)
  {
    type metadata accessor for FeedCustomItem();
    sub_1BA4A2870(&qword_1ED3A0D90, (uint64_t (*)(uint64_t))type metadata accessor for FeedCustomItem, (uint64_t)&protocol conformance descriptor for FeedCustomItem);
    sub_1BA4A2870((unint64_t *)&qword_1ED39E458, (uint64_t (*)(uint64_t))type metadata accessor for FeedCustomItem, (uint64_t)&protocol conformance descriptor for FeedCustomItem);
    type metadata accessor for FeedModel();
  }
  return result;
}

uint64_t sub_1BA9B5584()
{
  uint64_t result;

  result = qword_1EF2AC598;
  if (!qword_1EF2AC598)
  {
    type metadata accessor for FeedBannerAd();
    sub_1BA4A2870(&qword_1ED3A5288, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd, (uint64_t)&protocol conformance descriptor for FeedBannerAd);
    sub_1BA4A2870(&qword_1ED3B2D08, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd, (uint64_t)&protocol conformance descriptor for FeedBannerAd);
    type metadata accessor for FeedModel();
  }
  return result;
}

unint64_t sub_1BA9B563C()
{
  unint64_t result;

  result = qword_1EF2C3390;
  if (!qword_1EF2C3390)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzle, &type metadata for FeedPuzzle);
    atomic_store(result, (unint64_t *)&qword_1EF2C3390);
  }
  return result;
}

unint64_t sub_1BA9B5680()
{
  unint64_t result;

  result = qword_1ED3A5260;
  if (!qword_1ED3A5260)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzle, &type metadata for FeedPuzzle);
    atomic_store(result, (unint64_t *)&qword_1ED3A5260);
  }
  return result;
}

uint64_t sub_1BA9B56C4()
{
  uint64_t result;

  result = qword_1EF2AC5A0;
  if (!qword_1EF2AC5A0)
  {
    type metadata accessor for FeedPuzzleStatistic();
    sub_1BA4A2870(&qword_1EF2AC5A8, (uint64_t (*)(uint64_t))type metadata accessor for FeedPuzzleStatistic, (uint64_t)&protocol conformance descriptor for FeedPuzzleStatistic);
    sub_1BA4A2870(&qword_1EF2AC5B0, (uint64_t (*)(uint64_t))type metadata accessor for FeedPuzzleStatistic, (uint64_t)&protocol conformance descriptor for FeedPuzzleStatistic);
    type metadata accessor for FeedModel();
  }
  return result;
}

unint64_t sub_1BA9B577C()
{
  unint64_t result;

  result = qword_1EF2BC230;
  if (!qword_1EF2BC230)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleType, &type metadata for FeedPuzzleType);
    atomic_store(result, (unint64_t *)&qword_1EF2BC230);
  }
  return result;
}

unint64_t sub_1BA9B57C0()
{
  unint64_t result;

  result = qword_1ED3A4988;
  if (!qword_1ED3A4988)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleType, &type metadata for FeedPuzzleType);
    atomic_store(result, (unint64_t *)&qword_1ED3A4988);
  }
  return result;
}

unint64_t sub_1BA9B5804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a4;
  v29 = a2;
  v30 = a3;
  sub_1BA4A3FB4(0, &qword_1ED3A2968, (void (*)(uint64_t))type metadata accessor for FeedItemAuxiliaryItem);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - v9;
  v28 = type metadata accessor for FeedItemAuxiliaryItem();
  v11 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v27 = (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v25 = (uint64_t)&v23 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return MEMORY[0x1E0DEE9D8];
  v16 = *(_QWORD *)(type metadata accessor for FormatContentSlotItemResolution() - 8);
  v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v26 = *(_QWORD *)(v16 + 72);
  v23 = a1;
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1E0DEE9D8];
  v24 = a5;
  do
  {
    sub_1BA9B41B0(v17, v29, v30, v31, a5, (uint64_t)v10);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v28) == 1)
    {
      sub_1BA502AD0((uint64_t)v10, &qword_1ED3A2968, (void (*)(uint64_t))type metadata accessor for FeedItemAuxiliaryItem);
    }
    else
    {
      v19 = v25;
      sub_1BA5193C4((uint64_t)v10, v25, (uint64_t (*)(_QWORD))type metadata accessor for FeedItemAuxiliaryItem);
      sub_1BA5193C4(v19, v27, (uint64_t (*)(_QWORD))type metadata accessor for FeedItemAuxiliaryItem);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1BB38FD18(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
      v21 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      if (v21 >= v20 >> 1)
        v18 = sub_1BB38FD18(v20 > 1, v21 + 1, 1, v18);
      *(_QWORD *)(v18 + 16) = v21 + 1;
      sub_1BA5193C4(v27, v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for FeedItemAuxiliaryItem);
      a5 = v24;
    }
    v17 += v26;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t method lookup function for FeedModelFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t FormatCompilerOptions.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerOptions.properties.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FormatCompilerOptions.properties.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerOptions.slots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerOptions.slots.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*FormatCompilerOptions.slots.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerOptions.newsroom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  sub_1BA9B5BA0(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FormatCompilerOptions(0);
  sub_1BA4C2DD8(v1 + *(int *)(v6 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BA9B5BA0);
  return sub_1BA9B5BF8((uint64_t)v5, a1);
}

void sub_1BA9B5BA0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3C0A90)
  {
    v2 = sub_1BA820D04();
    v4 = type metadata accessor for FormatCodingDefault(a1, (uint64_t)&type metadata for FormatCodingEmptyNewsroomStrategy, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3C0A90);
  }
}

uint64_t sub_1BA9B5BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA9B5C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1BA9B5BA0(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FormatCompilerOptions(0);
  sub_1BA4C2DD8(a1 + *(int *)(v7 + 24), (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA9B5BA0);
  return sub_1BA9B5BF8((uint64_t)v6, a2);
}

uint64_t sub_1BA9B5CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(a1, (uint64_t)v6, v7);
  v8 = type metadata accessor for FormatCompilerOptions(0);
  return sub_1BA9B5D88((uint64_t)v6, a2 + *(int *)(v8 + 24));
}

uint64_t FormatCompilerOptions.newsroom.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FormatCompilerOptions(0) + 24);
  return sub_1BA9B5D88(a1, v3);
}

uint64_t sub_1BA9B5D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*FormatCompilerOptions.newsroom.modify())()
{
  type metadata accessor for FormatCompilerOptions(0);
  return nullsub_1;
}

uint64_t FormatCompilerOptions.editorProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FormatCompilerOptions(0) + 28);
  return sub_1BA6E70E4(v3, a1);
}

uint64_t FormatCompilerOptions.compilerFlags.getter()
{
  type metadata accessor for FormatCompilerOptions(0);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9B5E44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for FormatCompilerOptions(0) + 32);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + v4) = v3;
  return result;
}

uint64_t FormatCompilerOptions.compilerFlags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for FormatCompilerOptions(0) + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*FormatCompilerOptions.compilerFlags.modify())()
{
  type metadata accessor for FormatCompilerOptions(0);
  return nullsub_1;
}

double sub_1BA9B5EF4()
{
  uint64_t v0;
  _OWORD *v1;
  char *v2;
  uint64_t v3;
  double result;

  v0 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  __swift_allocate_value_buffer(v0, qword_1EF2AC5B8);
  v1 = (_OWORD *)__swift_project_value_buffer(v0, (uint64_t)qword_1EF2AC5B8);
  v2 = (char *)v1 + *(int *)(v0 + 20);
  v3 = sub_1BB86E710();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  result = 0.0;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = 0u;
  return result;
}

uint64_t FormatCompilerOptions.Newsroom.init(environments:editorProperties:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = a1[2];
  v5 = (uint64_t)a3 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  return sub_1BA6E7324(a2, v5);
}

uint64_t FormatCompilerOptions.Newsroom.environments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_1BA5931BC(v2, v3);
}

uint64_t FormatCompilerOptions.Newsroom.editorProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  return sub_1BA6E70E4(v3, a1);
}

__n128 FormatCompilerOptions.Newsroom.Environments.init(qa:staging:production:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, __n128 *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v4;
  __n128 result;

  v4 = *a2;
  *a4 = *a1;
  a4[1] = v4;
  result = *a3;
  a4[2] = *a3;
  return result;
}

double static FormatCompilerOptions.Newsroom.Environments.empty.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t FormatCompilerOptions.Newsroom.Environments.qa.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerOptions.Newsroom.Environments.staging.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerOptions.Newsroom.Environments.production.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerOptions.Newsroom.Environment.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

NewsFeed::FormatCompilerOptions::Newsroom::Environment __swiftcall FormatCompilerOptions.Newsroom.Environment.init(identifier:)(NewsFeed::FormatCompilerOptions::Newsroom::Environment identifier)
{
  NewsFeed::FormatCompilerOptions::Newsroom::Environment *v1;

  *v1 = identifier;
  return identifier;
}

uint64_t static FormatCompilerOptions.Newsroom.Environment.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

uint64_t FormatCompilerOptions.init(properties:slots:newsroom:editorProperties:compilerFlags:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v10;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  v10 = (int *)type metadata accessor for FormatCompilerOptions(0);
  sub_1BA9B5BF8(a3, (uint64_t)a6 + v10[6]);
  result = sub_1BA6E7324(a4, (uint64_t)a6 + v10[7]);
  *(_QWORD *)((char *)a6 + v10[8]) = a5;
  return result;
}

uint64_t _s8NewsFeed21FormatCompilerOptionsV8NewsroomV5emptyAEvgZ_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF2A6C88 != -1)
    swift_once();
  v2 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF2AC5B8);
  return sub_1BA4C2DD8(v3, a1, type metadata accessor for FormatCompilerOptions.Newsroom);
}

uint64_t static FormatCodingEmptyNewsroomStrategy.shouldEncode(wrappedValue:)()
{
  return 1;
}

uint64_t sub_1BA9B61B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1BA9B62AC(a1, (uint64_t)sub_1BA9B6230, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1BA9B6230@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1BA9B86F8();
  v5 = (char *)a1 + *(int *)(v4 + 48);
  sub_1BA9B8760();
  v7 = (char *)a2 + *(int *)(v6 + 48);
  v9 = *a1;
  v8 = a1[1];
  v10 = sub_1BB86E710();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v5, v10);
  *a2 = v9;
  a2[1] = v8;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9B62AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  int v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD v53[2];
  char *v54;
  char *v55;
  unsigned int (*v56)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v67 = a5;
  v9 = sub_1BB86E710();
  v57 = *(_QWORD **)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v55 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v54 = (char *)v53 - v12;
  MEMORY[0x1E0C80A78](v13);
  v59 = (char *)v53 - v14;
  sub_1BA4A3FB4(0, &qword_1EF2AC678, (void (*)(uint64_t))sub_1BA9B8760);
  MEMORY[0x1E0C80A78](v15);
  v17 = (_QWORD *)((char *)v53 - v16);
  v18 = -1 << *(_BYTE *)(a1 + 32);
  v19 = ~v18;
  v20 = *(_QWORD *)(a1 + 64);
  v21 = -v18;
  v60 = a1;
  v61 = a1 + 64;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v62 = v19;
  v63 = 0;
  v64 = v22 & v20;
  v65 = a2;
  v66 = a3;
  v53[1] = a1;
  swift_bridgeObjectRetain();
  v53[0] = a3;
  swift_retain();
  sub_1BB29EF8C((uint64_t)v17);
  sub_1BA9B8760();
  v24 = v23;
  v56 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
  if (v56(v17, 1, v23) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BA6EBD18();
    return swift_release();
  }
  v58 = (void (*)(char *, char *, uint64_t))v57[4];
  while (1)
  {
    v33 = v24;
    v34 = *v17;
    v35 = v17[1];
    v58(v59, (char *)v17 + *(int *)(v24 + 48), v9);
    v36 = (_QWORD *)*v67;
    v38 = sub_1BA6E35A8(v34, v35);
    v39 = v36[2];
    v40 = (v37 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      break;
    v42 = v37;
    if (v36[3] >= v41)
    {
      if ((a4 & 1) != 0)
      {
        v47 = (_QWORD *)*v67;
        if ((v37 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        v52 = v67;
        sub_1BB4C3E30();
        v47 = (_QWORD *)*v52;
        if ((v42 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      v43 = a4 & 1;
      v44 = v67;
      sub_1BB4AF918(v41, v43);
      v45 = sub_1BA6E35A8(v34, v35);
      if ((v42 & 1) != (v46 & 1))
        goto LABEL_22;
      v38 = v45;
      v47 = (_QWORD *)*v44;
      if ((v42 & 1) != 0)
      {
LABEL_7:
        v26 = v47[7];
        v27 = v57;
        v28 = v57[9] * v38;
        v29 = (void (*)(char *, unint64_t, uint64_t))v57[2];
        v30 = v55;
        v29(v55, v26 + v28, v9);
        v31 = v54;
        v29(v54, (unint64_t)v30, v9);
        v32 = (void (*)(char *, uint64_t))v27[1];
        v32(v30, v9);
        v32(v59, v9);
        swift_bridgeObjectRelease();
        ((void (*)(unint64_t, char *, uint64_t))v27[5])(*(_QWORD *)(*v67 + 56) + v28, v31, v9);
        goto LABEL_8;
      }
    }
    v47[(v38 >> 6) + 8] |= 1 << v38;
    v48 = (uint64_t *)(v47[6] + 16 * v38);
    *v48 = v34;
    v48[1] = v35;
    v58((char *)(v47[7] + v57[9] * v38), v59, v9);
    v49 = v47[2];
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
      goto LABEL_21;
    v47[2] = v51;
LABEL_8:
    sub_1BB29EF8C((uint64_t)v17);
    a4 = 1;
    v24 = v33;
    if (v56(v17, 1, v33) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

uint64_t _s8NewsFeed21FormatCompilerOptionsV8NewsroomV12EnvironmentsV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;

  v3 = a1[1];
  v2 = a1[2];
  v5 = a1[3];
  v4 = a1[4];
  v6 = a1[5];
  v7 = a2[1];
  v8 = a2[2];
  v10 = a2[3];
  v9 = a2[4];
  v11 = a2[5];
  if (v3)
  {
    if (!v7)
    {
LABEL_25:
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    if (*a1 != *a2 || v3 != v7)
    {
      v12 = sub_1BB874398();
      result = 0;
      if ((v12 & 1) == 0)
        return result;
    }
  }
  else if (v7)
  {
    goto LABEL_26;
  }
  if (!v5)
  {
    if (!v10)
      goto LABEL_16;
LABEL_26:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v10)
    goto LABEL_25;
  if (v2 != v8 || v5 != v10)
  {
    v14 = sub_1BB874398();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
LABEL_16:
  if (!v6)
  {
    if (!v11)
      return 1;
    goto LABEL_26;
  }
  if (!v11)
    goto LABEL_25;
  if (v4 == v9 && v6 == v11)
    return 1;
  v15 = sub_1BB874398();
  result = 0;
  if ((v15 & 1) != 0)
    return 1;
  return result;
}

uint64_t _s8NewsFeed21FormatCompilerOptionsV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  char *v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v4 = sub_1BB86E710();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x1E0C80A78](v4);
  v52 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA793CE8();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, v5);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v47 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v47 - v18;
  v20 = a1;
  v21 = *a1;
  v22 = a2;
  v23 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_1BA882848(v21, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    goto LABEL_10;
  v50 = v10;
  v51 = v16;
  v48 = v13;
  v49 = v19;
  v24 = v20[1];
  v25 = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = sub_1BA8918C4(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
    goto LABEL_10;
  v27 = v22;
  v28 = v20;
  v29 = (int *)type metadata accessor for FormatCompilerOptions(0);
  if (!_s8NewsFeed21FormatCompilerOptionsV8NewsroomV2eeoiySbAE_AEtFZ_0((uint64_t *)((char *)v20 + v29[6]), (uint64_t *)((char *)v22 + v29[6])))goto LABEL_10;
  v30 = (uint64_t)v49;
  sub_1BA6E70E4((uint64_t)v20 + v29[7], (uint64_t)v49);
  v31 = (uint64_t)v51;
  sub_1BA6E70E4((uint64_t)v22 + v29[7], (uint64_t)v51);
  v32 = (uint64_t)v50;
  v33 = (uint64_t)&v50[*(int *)(v8 + 48)];
  sub_1BA6E70E4(v30, (uint64_t)v50);
  sub_1BA6E70E4(v31, v33);
  v35 = v53;
  v34 = v54;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v36(v32, 1, v54) == 1)
  {
    sub_1BA6867EC(v31);
    sub_1BA6867EC(v30);
    if (v36(v33, 1, v34) == 1)
    {
      sub_1BA6867EC(v32);
LABEL_13:
      v44 = v29[8];
      v45 = *(uint64_t *)((char *)v28 + v44);
      v46 = *(uint64_t *)((char *)v27 + v44);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38 = sub_1BA857AC0(v45, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v38 & 1;
    }
    goto LABEL_9;
  }
  v37 = (uint64_t)v48;
  sub_1BA6E70E4(v32, (uint64_t)v48);
  if (v36(v33, 1, v34) == 1)
  {
    sub_1BA6867EC((uint64_t)v51);
    sub_1BA6867EC(v30);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v34);
LABEL_9:
    sub_1BA7AAA44(v32);
    goto LABEL_10;
  }
  v40 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v52, v33, v34);
  sub_1BA4A2870(&qword_1EF2A96D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], MEMORY[0x1E0DB48C8]);
  v41 = sub_1BB872958();
  v42 = v32;
  v43 = *(void (**)(char *, uint64_t))(v35 + 8);
  v43(v40, v34);
  sub_1BA6867EC((uint64_t)v51);
  sub_1BA6867EC(v30);
  v43(v48, v34);
  sub_1BA6867EC(v42);
  if ((v41 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  v38 = 0;
  return v38 & 1;
}

BOOL _s8NewsFeed21FormatCompilerOptionsV8NewsroomV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];
  _QWORD v57[7];

  v4 = sub_1BB86E710();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
  v55 = v4;
  v53 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v44 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA793CE8();
  v50 = v7;
  MEMORY[0x1E0C80A78](v7);
  v54 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, v5);
  MEMORY[0x1E0C80A78](v9);
  v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v51 = (uint64_t)&v43 - v12;
  MEMORY[0x1E0C80A78](v13);
  v52 = (uint64_t)&v43 - v14;
  v15 = *a1;
  v16 = a1[1];
  v18 = a1[2];
  v17 = a1[3];
  v19 = a1[4];
  v20 = a1[5];
  v22 = *a2;
  v21 = a2[1];
  v24 = a2[2];
  v23 = a2[3];
  v26 = a2[4];
  v25 = a2[5];
  if (v16 != 1)
  {
    v57[0] = *a1;
    v57[1] = v16;
    v57[2] = v18;
    v57[3] = v17;
    v57[4] = v19;
    v57[5] = v20;
    if (v21 != 1)
    {
      v56[0] = v22;
      v56[1] = v21;
      v56[2] = v24;
      v56[3] = v23;
      v56[4] = v26;
      v56[5] = v25;
      v28 = v15;
      sub_1BA5931BC(v15, v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v49) = _s8NewsFeed21FormatCompilerOptionsV8NewsroomV12EnvironmentsV2eeoiySbAG_AGtFZ_0(v57, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA5931FC(v28, v16);
      if ((v49 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    v46 = v15;
    v47 = v18;
    v49 = v19;
    v27 = v17;
    swift_bridgeObjectRetain();
    v48 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_6:
    sub_1BA5931BC(v22, v21);
    sub_1BA5931FC(v46, v16);
    sub_1BA5931FC(v22, v21);
    return 0;
  }
  v46 = *a1;
  v47 = v18;
  v48 = v17;
  v49 = v19;
  if (v21 != 1)
    goto LABEL_6;
LABEL_8:
  v29 = type metadata accessor for FormatCompilerOptions.Newsroom(0);
  v30 = (uint64_t)a1 + *(int *)(v29 + 20);
  v31 = v52;
  sub_1BA6E70E4(v30, v52);
  v32 = v51;
  sub_1BA6E70E4((uint64_t)a2 + *(int *)(v29 + 20), v51);
  v33 = v54;
  v34 = v54 + *(int *)(v50 + 48);
  sub_1BA6E70E4(v31, v54);
  sub_1BA6E70E4(v32, v34);
  v35 = v53;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  v37 = v55;
  if (v36(v33, 1, v55) == 1)
  {
    sub_1BA6867EC(v32);
    sub_1BA6867EC(v31);
    if (v36(v34, 1, v37) == 1)
    {
      sub_1BA6867EC(v33);
      return 1;
    }
    goto LABEL_13;
  }
  v38 = v45;
  sub_1BA6E70E4(v33, v45);
  if (v36(v34, 1, v37) == 1)
  {
    sub_1BA6867EC(v32);
    sub_1BA6867EC(v31);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v37);
LABEL_13:
    sub_1BA7AAA44(v33);
    return 0;
  }
  v39 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v44, v34, v37);
  sub_1BA4A2870(&qword_1EF2A96D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], MEMORY[0x1E0DB48C8]);
  v40 = sub_1BB872958();
  v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41(v39, v37);
  sub_1BA6867EC(v32);
  sub_1BA6867EC(v31);
  v41((char *)v38, v37);
  sub_1BA6867EC(v33);
  return (v40 & 1) != 0;
}

unint64_t sub_1BA9B7010(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9B7034();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9B7034()
{
  unint64_t result;

  result = qword_1EF2AC5D0;
  if (!qword_1EF2AC5D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerOptions.Newsroom.Environments, &type metadata for FormatCompilerOptions.Newsroom.Environments);
    atomic_store(result, (unint64_t *)&qword_1EF2AC5D0);
  }
  return result;
}

uint64_t sub_1BA9B7078(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA5457E0, (uint64_t (*)(void))sub_1BA59323C, (uint64_t (*)(void))sub_1BA9B7094);
}

unint64_t sub_1BA9B7094()
{
  unint64_t result;

  result = qword_1EF2AC5D8;
  if (!qword_1EF2AC5D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerOptions.Newsroom.Environments, &type metadata for FormatCompilerOptions.Newsroom.Environments);
    atomic_store(result, (unint64_t *)&qword_1EF2AC5D8);
  }
  return result;
}

unint64_t sub_1BA9B70D8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9B70FC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9B70FC()
{
  unint64_t result;

  result = qword_1EF2AC5E0;
  if (!qword_1EF2AC5E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerOptions.Newsroom.Environment, &type metadata for FormatCompilerOptions.Newsroom.Environment);
    atomic_store(result, (unint64_t *)&qword_1EF2AC5E0);
  }
  return result;
}

uint64_t sub_1BA9B7140(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA537644, (uint64_t (*)(void))sub_1BA5AB344, (uint64_t (*)(void))sub_1BA9B715C);
}

unint64_t sub_1BA9B715C()
{
  unint64_t result;

  result = qword_1EF2AC5E8;
  if (!qword_1EF2AC5E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerOptions.Newsroom.Environment, &type metadata for FormatCompilerOptions.Newsroom.Environment);
    atomic_store(result, (unint64_t *)&qword_1EF2AC5E8);
  }
  return result;
}

uint64_t sub_1BA9B71A0(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2AC5F0, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9B71DC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3B6510, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
  a1[2] = sub_1BA4A2870(&qword_1ED39B768, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
  result = sub_1BA4A2870(&qword_1EF2AC5F8, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
  a1[3] = result;
  return result;
}

uint64_t sub_1BA9B7254(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2AC600, type metadata accessor for FormatCompilerOptions, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9B7290(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3B6518, type metadata accessor for FormatCompilerOptions, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions);
  a1[2] = sub_1BA4A2870(&qword_1ED39B770, type metadata accessor for FormatCompilerOptions, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions);
  result = sub_1BA4A2870(&qword_1EF2AC608, type metadata accessor for FormatCompilerOptions, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions);
  a1[3] = result;
  return result;
}

unint64_t sub_1BA9B7308(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA820D04();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9B732C()
{
  return sub_1BA4A2870(&qword_1ED3B6510, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
}

uint64_t sub_1BA9B7358()
{
  return sub_1BA4A2870(&qword_1ED39B768, type metadata accessor for FormatCompilerOptions.Newsroom, (uint64_t)&protocol conformance descriptor for FormatCompilerOptions.Newsroom);
}

uint64_t sub_1BA9B7384@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9B7390(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1BA9B73D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9B73DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_1BA9B7424@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for FormatCompilerOptions(0) + 32));
  return swift_bridgeObjectRetain();
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatCompilerOptions(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11 == 1)
    {
      v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v12;
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v11;
      v13 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
      *((_QWORD *)v9 + 3) = v13;
      v14 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
      *((_QWORD *)v9 + 5) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v15 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
    v16 = &v9[v15];
    v17 = &v10[v15];
    v18 = sub_1BB86E710();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v20(v17, 1, v18))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = a3[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    if (v20((char *)a2 + v22, 1, v18))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v24, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v23, 0, 1, v18);
    }
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for FormatCompilerOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a1 + v6 + 8);
  v10 = *(_QWORD *)((char *)a2 + v6 + 8);
  if (v9 == 1)
  {
    if (v10 == 1)
    {
      v11 = *(_OWORD *)v8;
      v12 = *((_OWORD *)v8 + 2);
      *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
      *(_OWORD *)(v7 + 32) = v12;
      *(_OWORD *)v7 = v11;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
      *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v10 == 1)
  {
    sub_1BA9B798C(v7);
    v14 = *((_OWORD *)v8 + 1);
    v13 = *((_OWORD *)v8 + 2);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v14;
    *(_OWORD *)(v7 + 32) = v13;
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v15 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  v16 = (void *)(v7 + v15);
  v17 = &v8[v15];
  v18 = sub_1BB86E710();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_13:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_14:
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v20((char *)a1 + v24, 1, v18);
  v28 = v20(v26, 1, v18);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    goto LABEL_19;
  }
  if (v28)
  {
LABEL_19:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
LABEL_20:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BA9B798C(uint64_t a1)
{
  destroy for FormatTypeDefinition.Case();
  return a1;
}

_OWORD *initializeWithTake for FormatCompilerOptions(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a1 = *(_OWORD *)a2;
  v6 = a3[6];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = &a2[v6];
  v9 = *(_OWORD *)&a2[v6 + 32];
  v7[1] = *(_OWORD *)&a2[v6 + 16];
  v7[2] = v9;
  *v7 = *(_OWORD *)&a2[v6];
  v10 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = sub_1BB86E710();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = &a2[v17];
  if (v15(&a2[v17], 1, v13))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v19, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
  }
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)&a2[a3[8]];
  return a1;
}

_QWORD *assignWithTake for FormatCompilerOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  if (*(_QWORD *)((char *)a1 + v6 + 8) == 1)
    goto LABEL_4;
  v9 = *((_QWORD *)v8 + 1);
  if (v9 == 1)
  {
    sub_1BA9B798C(v7);
LABEL_4:
    v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v10;
    *(_OWORD *)(v7 + 32) = *((_OWORD *)v8 + 2);
    goto LABEL_6;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v8 + 3);
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v8 + 5);
  *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
  *(_QWORD *)(v7 + 40) = v12;
  swift_bridgeObjectRelease();
LABEL_6:
  v13 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  v14 = (void *)(v7 + v13);
  v15 = &v8[v13];
  v16 = sub_1BB86E710();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_11:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_12:
  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v18((char *)a1 + v22, 1, v16);
  v26 = v18(v24, 1, v16);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v23, v24, v16);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    goto LABEL_17;
  }
  if (v26)
  {
LABEL_17:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v24, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
LABEL_18:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BA9B7DC0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BA9B5BA0(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

char *sub_1BA9B7E70(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1BA9B5BA0(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FormatCompilerOptions.Newsroom(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7 == 1)
    {
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v10 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v10;
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v12 = *(int *)(a3 + 20);
    v13 = (void *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = sub_1BB86E710();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t assignWithCopy for FormatCompilerOptions.Newsroom(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v6 == 1)
    {
      v7 = *a2;
      v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_1BA9B798C(a1);
    v10 = a2[1];
    v9 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v11 = *(int *)(a3 + 20);
  v12 = (void *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = sub_1BB86E710();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *initializeWithTake for FormatCompilerOptions.Newsroom(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1BB86E710();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for FormatCompilerOptions.Newsroom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 8) == 1)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == 1)
  {
    sub_1BA9B798C(a1);
LABEL_4:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = *(int *)(a3 + 20);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_1BB86E710();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_1BA9B84A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return ((_DWORD)v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1BA9B853C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483645)
  {
    *(_QWORD *)(result + 8) = (a2 + 1);
  }
  else
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

_QWORD *assignWithCopy for FormatTypeDefinition.Case(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FormatTypeDefinition.Case(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatCompilerOptions.Newsroom.Environments()
{
  return &type metadata for FormatCompilerOptions.Newsroom.Environments;
}

ValueMetadata *type metadata accessor for FormatCompilerOptions.Newsroom.Environment()
{
  return &type metadata for FormatCompilerOptions.Newsroom.Environment;
}

ValueMetadata *type metadata accessor for FormatCodingEmptyNewsroomStrategy()
{
  return &type metadata for FormatCodingEmptyNewsroomStrategy;
}

uint64_t sub_1BA9B86D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BA9B86F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2AC670)
  {
    sub_1BB86E710();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2AC670);
  }
}

void sub_1BA9B8760()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3AF7C8)
  {
    sub_1BB86E710();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3AF7C8);
  }
}

uint64_t sub_1BA9B87C4()
{
  sub_1BA4B8748((unint64_t *)&unk_1ED3C45A0, MEMORY[0x1E0DB60C0]);
  return sub_1BB872CDC();
}

uint64_t sub_1BA9B8814()
{
  sub_1BA4B8748((unint64_t *)&unk_1ED3C45A0, MEMORY[0x1E0DB60C0]);
  return sub_1BB872CD0();
}

uint64_t sub_1BA9B886C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t, double);
  uint64_t v12;

  v2 = sub_1BB86D93C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  swift_retain();
  sub_1BB86D2C4();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

Swift::Void __swiftcall FeedScalingManager.resetSize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v0 = sub_1BB86D93C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v8 - v6;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v1 + 104))((char *)&v8 - v6, *MEMORY[0x1E0DB6098], v0, v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v7, v0);
  swift_retain();
  sub_1BB86D2C4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
}

Swift::Bool __swiftcall FeedScalingManager.canIncreaseSize()()
{
  return sub_1BA9B8A44(MEMORY[0x1E0DB6070]);
}

Swift::Bool __swiftcall FeedScalingManager.canDecreaseSize()()
{
  return sub_1BA9B8A44(MEMORY[0x1E0DB6068]);
}

BOOL sub_1BA9B8A44(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = sub_1BB86D93C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - v7;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *a1, v2);
  sub_1BA4B8748(&qword_1ED3C0B38, MEMORY[0x1E0DB60B8]);
  v9 = sub_1BB872958();
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v10(v8, v2);
  return (v9 & 1) == 0;
}

Swift::Bool __swiftcall FeedScalingManager.canResetSize()()
{
  return sub_1BA9B8A44(MEMORY[0x1E0DB6098]);
}

Swift::Void __swiftcall FeedScalingManager.increaseSize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v0 = sub_1BB86D93C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - v5;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - v8;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v10 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v9, v0);
  v11 = *MEMORY[0x1E0DB6088];
  if (v10 == *MEMORY[0x1E0DB6068]
    || (v11 = *MEMORY[0x1E0DB6090], v10 == *MEMORY[0x1E0DB6088])
    || (v12 = v10 == (_DWORD)v11, v11 = *MEMORY[0x1E0DB6098], v12)
    || (v11 = *MEMORY[0x1E0DB6078], v10 == *MEMORY[0x1E0DB6098])
    || (v12 = v10 == (_DWORD)v11, v11 = *MEMORY[0x1E0DB6060], v12)
    || (v11 = *MEMORY[0x1E0DB6070], v10 == *MEMORY[0x1E0DB6060]))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 104))(v6, v11, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
    swift_retain();
    sub_1BB86D2C4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else if (v10 != (_DWORD)v11)
  {
    sub_1BB87438C();
    __break(1u);
  }
}

Swift::Void __swiftcall FeedScalingManager.decreaseSize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v0 = sub_1BB86D93C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - v5;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - v8;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v10 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v9, v0);
  v11 = *MEMORY[0x1E0DB6068];
  if (v10 != (_DWORD)v11)
  {
    if (v10 == *MEMORY[0x1E0DB6088]
      || (v11 = *MEMORY[0x1E0DB6088], v10 == *MEMORY[0x1E0DB6090])
      || (v11 = *MEMORY[0x1E0DB6090], v10 == *MEMORY[0x1E0DB6098])
      || (v11 = *MEMORY[0x1E0DB6098], v10 == *MEMORY[0x1E0DB6078])
      || (v11 = *MEMORY[0x1E0DB6078], v10 == *MEMORY[0x1E0DB6060])
      || (v11 = *MEMORY[0x1E0DB6060], v10 == *MEMORY[0x1E0DB6070]))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 104))(v6, v11, v0);
      (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
      swift_retain();
      sub_1BB86D2C4();
      swift_release();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    }
    else
    {
      sub_1BB87438C();
      __break(1u);
    }
  }
}

uint64_t FeedScalingManager.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t FeedScalingManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA9B8F38()
{
  swift_retain();
  sub_1BB86D2B8();
  return swift_release();
}

uint64_t method lookup function for FeedScalingManager()
{
  return swift_lookUpClassMethod();
}

void static FormatCodingNotScaledFontScalingStrategy.defaultValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 3072;
}

BOOL static FormatCodingNotScaledFontScalingStrategy.shouldEncode(wrappedValue:)(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9) << 8 != 3072;
}

void sub_1BA9B8FA4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 3072;
}

BOOL sub_1BA9B8FB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9) << 8 != 3072;
}

void static FormatCodingRegularFontWeightStrategy.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

BOOL static FormatCodingRegularFontWeightStrategy.shouldEncode(wrappedValue:)(unsigned __int8 *a1)
{
  return *a1 != 5;
}

BOOL sub_1BA9B8FE4(unsigned __int8 *a1)
{
  return *a1 != 5;
}

uint64_t static FormatCodingBlackSixteenSystemFontStrategy.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ED3C1DD0 != -1)
    swift_once();
  swift_beginAccess();
  *a1 = qword_1ED3CF380;
  return swift_retain();
}

uint64_t static FormatCodingBlackSixteenSystemFontStrategy.defaultValue.setter(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (qword_1ED3C1DD0 != -1)
    swift_once();
  swift_beginAccess();
  qword_1ED3CF380 = v1;
  return swift_release();
}

uint64_t (*static FormatCodingBlackSixteenSystemFontStrategy.defaultValue.modify())()
{
  if (qword_1ED3C1DD0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BA9B9154@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ED3C1DD0 != -1)
    swift_once();
  swift_beginAccess();
  *a1 = qword_1ED3CF380;
  return swift_retain();
}

uint64_t _s8NewsFeed42FormatCodingBlackSixteenSystemFontStrategyV12shouldEncode12wrappedValueSbAA0cH0O_tFZ_0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];
  __int16 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  _QWORD v19[2];
  __int16 v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;

  v1 = *a1;
  if ((unint64_t)*a1 >> 61)
  {
    v10 = 1;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(_WORD *)(v1 + 32);
    v4 = *(_BYTE *)(v1 + 34);
    v5 = *(_QWORD *)(v1 + 40);
    v6 = *(_WORD *)(v1 + 80);
    v19[0] = *(_QWORD *)(v1 + 16);
    v19[1] = v2;
    v20 = v3;
    v21 = v4;
    v22 = v5;
    v7 = *(_OWORD *)(v1 + 64);
    v23 = *(_OWORD *)(v1 + 48);
    v24 = v7;
    v25 = v6;
    v8 = qword_1ED3CF378;
    swift_bridgeObjectRetain();
    if (v8 != -1)
      swift_once();
    v12[0] = qword_1ED3CF328;
    v12[1] = qword_1ED3CF330;
    v13 = word_1ED3CF338;
    v14 = byte_1ED3CF33A;
    v15 = qword_1ED3CF340;
    v16 = xmmword_1ED3CF348;
    v17 = unk_1ED3CF358;
    v18 = word_1ED3CF368;
    v9 = _s8NewsFeed16FormatSystemFontV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v12);
    swift_bridgeObjectRelease();
    v10 = v9 ^ 1;
  }
  return v10 & 1;
}

unint64_t sub_1BA9B92D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9B92F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9B92F4()
{
  unint64_t result;

  result = qword_1EF2AC680;
  if (!qword_1EF2AC680)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingNotScaledFontScalingStrategy, &type metadata for FormatCodingNotScaledFontScalingStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2AC680);
  }
  return result;
}

unint64_t sub_1BA9B9340(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9B9364();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9B9364()
{
  unint64_t result;

  result = qword_1EF2AC6E8;
  if (!qword_1EF2AC6E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingRegularFontWeightStrategy, &type metadata for FormatCodingRegularFontWeightStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2AC6E8);
  }
  return result;
}

unint64_t sub_1BA9B93B0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9B93D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9B93D4()
{
  unint64_t result;

  result = qword_1EF2AC750;
  if (!qword_1EF2AC750)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingBlackSixteenSystemFontStrategy, &type metadata for FormatCodingBlackSixteenSystemFontStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2AC750);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatCodingNotScaledFontScalingStrategy()
{
  return &type metadata for FormatCodingNotScaledFontScalingStrategy;
}

ValueMetadata *type metadata accessor for FormatCodingRegularFontWeightStrategy()
{
  return &type metadata for FormatCodingRegularFontWeightStrategy;
}

ValueMetadata *type metadata accessor for FormatCodingBlackSixteenSystemFontStrategy()
{
  return &type metadata for FormatCodingBlackSixteenSystemFontStrategy;
}

uint64_t sub_1BA9B9450()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FeedBannerAdRequester.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t FeedBannerAdRequester.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall FeedBannerAdRequester.hasScheduledRequest(for:)(Swift::String a1)
{
  char v1;

  swift_retain();
  v1 = sub_1BB86E074();
  swift_release();
  return v1 & 1;
}

Swift::Void __swiftcall FeedBannerAdRequester.executeScheduledRequest(for:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[2];
  uint64_t aBlock;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t (*v19)();
  _QWORD *v20;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = sub_1BB872610();
  v14[0] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BB872664();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = countAndFlagsBits;
  v16 = (uint64_t)object;
  swift_retain();
  v11 = sub_1BB86E074();
  swift_release();
  if ((v11 & 1) != 0)
  {
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v1;
    v12[3] = countAndFlagsBits;
    v12[4] = object;
    v19 = sub_1BA9B9B50;
    v20 = v12;
    aBlock = MEMORY[0x1E0C809B0];
    v16 = 1107296256;
    v17 = sub_1BA4F1DD8;
    v18 = &block_descriptor_11;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1BB872634();
    v14[1] = MEMORY[0x1E0DEE9D8];
    sub_1BA4A2870((unint64_t *)&qword_1ED3B0C40, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BA60B87C();
    sub_1BA4A2870((unint64_t *)&qword_1ED3B9320, (uint64_t (*)(uint64_t))sub_1BA60B87C, MEMORY[0x1E0DEAF38]);
    sub_1BB873BC4();
    MEMORY[0x1BCCE3D90](0, v10, v6, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v14[0] + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release();
  }
}

uint64_t sub_1BA9B9770(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_1BA6D5338();
  v7 = v6;
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v41 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1EF2AC7B8, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAdRequester.ScheduledRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for FeedBannerAdRequester.ScheduledRequest();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - v17;
  swift_beginAccess();
  v19 = a1[7];
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v37 = v11;
    v38 = a1;
    v39 = v18;
    v40 = v7;
    v21 = v19 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v36 = v13;
    v22 = *(_QWORD *)(v13 + 72);
    v43 = v19;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      sub_1BA4C2DD8(v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
      if (sub_1BB871F50() == a2 && v23 == a3)
        break;
      v25 = sub_1BB874398();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        goto LABEL_12;
      sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
      v21 += v22;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        v26 = 1;
        v18 = v39;
        v7 = v40;
        v11 = v37;
        a1 = v38;
        v13 = v36;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    v18 = v39;
    v7 = v40;
    v11 = v37;
    a1 = v38;
    v13 = v36;
    swift_bridgeObjectRelease();
    sub_1BA5193C4((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
    v26 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v26 = 1;
  }
LABEL_13:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v26, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_1BA9BA88C((uint64_t)v11);
  sub_1BA5193C4((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
  v28 = v41;
  sub_1BA60C058(v18, v41);
  swift_beginAccess();
  if (a1[2])
  {
    v29 = a1[3];
    swift_endAccess();
    v30 = (uint64_t)v18;
    ObjectType = swift_getObjectType();
    sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3B9CB0, (uint64_t (*)(uint64_t))sub_1BA6D5338, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v32 = v42;
    v33 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1BB87CE70;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 16))(v34 + v33, v28, v7);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 8);
    swift_unknownObjectRetain();
    v35(v34, ObjectType, v29);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v28, v7);
    return sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v7);
    sub_1BA4A2E80((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FeedBannerAdRequester.ScheduledRequest);
    return swift_endAccess();
  }
}

uint64_t sub_1BA9B9B44()
{
  return objectdestroyTm_3((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1BA9B9B50()
{
  uint64_t v0;

  return sub_1BA9B9770(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1BA9B9B5C(uint64_t a1, uint64_t a2)
{
  FeedBannerAdRequester.executeScheduledRequest(for:)(*(Swift::String *)&a1);
}

uint64_t sub_1BA9B9B7C(uint64_t a1, uint64_t a2)
{
  return FeedBannerAdRequester.unscheduleRequests(where:)(a1, a2);
}

uint64_t FeedBannerAdRequester.shouldMonitorMotion.getter()
{
  return 0;
}

uint64_t FeedBannerAdRequester.shouldMonitorScroll.getter()
{
  return 1;
}

void FeedBannerAdRequester.blueprintViewportMonitor(_:viewportScrollDataDidChange:)()
{
  sub_1BA9B9D24();
}

void sub_1BA9B9BB4()
{
  sub_1BA9B9D24();
}

uint64_t sub_1BA9B9BBC()
{
  return sub_1BB870EE8();
}

uint64_t sub_1BA9B9BC4()
{
  return sub_1BB870EF4();
}

uint64_t sub_1BA9B9BCC()
{
  return sub_1BB870EE8();
}

uint64_t sub_1BA9B9BD4()
{
  return sub_1BB870EE8();
}

uint64_t sub_1BA9B9BDC()
{
  return sub_1BB870F24();
}

uint64_t sub_1BA9B9BE4()
{
  return sub_1BB870F24();
}

uint64_t sub_1BA9B9BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for FeedBannerAd();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 64);
  v4 = sub_1BB871F5C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_bridgeObjectRelease();
  v7 = v0 + v3 + *(int *)(v1 + 20);
  v8 = sub_1BB8721C0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  if (*(_QWORD *)(v0 + v3 + *(int *)(v1 + 32) + 8) >= 0x11uLL)
    swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v10 + v6) & ~v6), v4);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9B9D18()
{
  return objectdestroyTm_3((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void sub_1BA9B9D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double MinX;
  CGFloat v21;
  double MinY;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v32;
  double v33;
  CGFloat v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  CGFloat x;
  CGFloat v39;
  uint64_t v40;
  _QWORD aBlock[6];
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v1 = v0;
  v2 = sub_1BB872610();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB872664();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_1BB870C0C();
  sub_1BB8732C4();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v19 = (double)*(uint64_t *)(v1 + 64);
  v42.origin.x = v12;
  v42.origin.y = v14;
  v42.size.width = v16;
  v42.size.height = v18;
  MinX = CGRectGetMinX(v42);
  v43.origin.x = v12;
  v43.origin.y = v14;
  v43.size.width = v16;
  v43.size.height = v18;
  v21 = MinX - CGRectGetWidth(v43) * v19;
  v44.origin.x = v12;
  v44.origin.y = v14;
  v44.size.width = v16;
  v44.size.height = v18;
  MinY = CGRectGetMinY(v44);
  v45.origin.x = v12;
  v45.origin.y = v14;
  v45.size.width = v16;
  v45.size.height = v18;
  v23 = MinY - CGRectGetHeight(v45) * v19;
  v46.origin.x = v12;
  v46.origin.y = v14;
  v46.size.width = v16;
  v46.size.height = v18;
  v24 = v19 + v19;
  v25 = (v19 + v19) * CGRectGetWidth(v46);
  v47.origin.x = v12;
  v47.origin.y = v14;
  v47.size.width = v16;
  v47.size.height = v18;
  v26 = v24 * CGRectGetHeight(v47);
  v52.origin.x = v21;
  v27 = v21;
  v52.origin.y = v23;
  v28 = v23;
  v52.size.width = v25;
  v52.size.height = v26;
  v48 = CGRectIntersection(*(CGRect *)(v1 + 72), v52);
  y = v48.origin.y;
  width = v48.size.width;
  height = v48.size.height;
  x = v48.origin.x;
  v32 = CGRectGetWidth(v48);
  v39 = v27;
  v49.origin.x = v27;
  v49.origin.y = v28;
  v49.size.width = v25;
  v49.size.height = v26;
  if (v32 < CGRectGetWidth(v49) / 3.0)
    goto LABEL_3;
  v50.origin.x = x;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  v33 = CGRectGetHeight(v50);
  v51.origin.x = v39;
  v51.origin.y = v28;
  v51.size.width = v25;
  v51.size.height = v26;
  if (v33 < CGRectGetHeight(v51) / 3.0)
  {
LABEL_3:
    v34 = v39;
    *(CGFloat *)(v1 + 72) = v39;
    *(CGFloat *)(v1 + 80) = v28;
    *(double *)(v1 + 88) = v25;
    *(double *)(v1 + 96) = v26;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v1;
    *(CGFloat *)(v35 + 24) = v34;
    *(CGFloat *)(v35 + 32) = v28;
    *(double *)(v35 + 40) = v25;
    *(double *)(v35 + 48) = v26;
    aBlock[4] = sub_1BA60997C;
    aBlock[5] = v35;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BA4F1DD8;
    aBlock[3] = &block_descriptor_24_1;
    v36 = _Block_copy(aBlock);
    swift_retain();
    sub_1BB872634();
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1BA4A2870((unint64_t *)&qword_1ED3B0C40, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BA60B87C();
    sub_1BA4A2870((unint64_t *)&qword_1ED3B9320, (uint64_t (*)(uint64_t))sub_1BA60B87C, MEMORY[0x1E0DEAF38]);
    sub_1BB873BC4();
    MEMORY[0x1BCCE3D90](0, v9, v5, v36);
    _Block_release(v36);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release();
  }
}

uint64_t dispatch thunk of FeedBannerAdRequesterType.hasScheduledRequest(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of FeedBannerAdRequesterType.executeScheduledRequest(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FeedBannerAdRequesterType.scheduleRequest(for:placement:position:createContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of FeedBannerAdRequesterType.unscheduleRequests(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t method lookup function for FeedBannerAdRequester()
{
  return swift_lookUpClassMethod();
}

uint64_t *sub_1BA9BA0C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for FeedBannerAd();
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1BB8721C0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(uint64_t *)((char *)v4 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    v14 = v8[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v8[8];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    if (v20 >= 0x11)
    {
      *v18 = *v19;
      v18[1] = v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    v22 = a3[5];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_1BB871F5C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = a3[7];
    *(_OWORD *)((char *)v4 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    v27 = (uint64_t *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
  }
  swift_retain();
  return v4;
}

_QWORD *sub_1BA9BA228(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for FeedBannerAd();
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1BB8721C0();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  v13 = v7[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = v7[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  if (v19 >= 0x11)
  {
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  v20 = a3[5];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_1BB871F5C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  swift_retain();
  return a1;
}

_QWORD *sub_1BA9BA360(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for FeedBannerAd();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BB8721C0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = v13[8];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v14;
  v15 = v6[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = *(_QWORD *)((char *)a1 + v15 + 8);
  v19 = *(_QWORD *)((char *)a2 + v15 + 8);
  if (v18 >= 0x11)
  {
    if (v19 >= 0x11)
    {
      *v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1BA905D68((uint64_t)v16);
    goto LABEL_6;
  }
  if (v19 < 0x11)
  {
LABEL_6:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_8;
  }
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
LABEL_8:
  v20 = a3[5];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_1BB871F5C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[6];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  v27 = a3[7];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1BA9BA4F8(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for FeedBannerAd();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BB8721C0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v12[8] = v13[8];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1BB871F5C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  return a1;
}

_QWORD *sub_1BA9BA5E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for FeedBannerAd();
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1BB8721C0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  v12 = v7[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = v7[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  if (*(_QWORD *)((char *)a1 + v15 + 8) >= 0x11uLL)
  {
    v18 = v17[1];
    if (v18 >= 0x11)
    {
      *v16 = *v17;
      v16[1] = v18;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1BA905D68((uint64_t)v16);
  }
  *(_OWORD *)v16 = *(_OWORD *)v17;
LABEL_6:
  v19 = a3[5];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1BB871F5C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  swift_release();
  return a1;
}

uint64_t sub_1BA9BA71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for FeedBannerAd();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1BB871F5C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1BA9BA7C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for FeedBannerAd();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1BB871F5C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1BA9BA868()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9BA88C(uint64_t a1)
{
  uint64_t v2;

  sub_1BA4B07F0(0, qword_1EF2AC7B8, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAdRequester.ScheduledRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FeedCategory.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeedCategory.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeedCategory.icon1x.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA7280B0(v1 + 32, a1);
}

uint64_t FeedCategory.icon2x.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA7280B0(v1 + 72, a1);
}

uint64_t FeedCategory.icon3x.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA7280B0(v1 + 112, a1);
}

double FeedCategory.largestCachedIcon.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;

  v2 = v1;
  v4 = v1 + 112;
  sub_1BA7280B0(v1 + 112, (uint64_t)v14);
  if (v15)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    sub_1BB86FA78();
    v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    if (v6)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      v9 = v4;
LABEL_8:
      sub_1BA7280B0(v9, a1);
      return result;
    }
  }
  else
  {
    sub_1BA728544((uint64_t)v14);
  }
  v4 = v2 + 72;
  sub_1BA7280B0(v2 + 72, (uint64_t)v14);
  if (v15)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    sub_1BB86FA78();
    v8 = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    if (v8)
      goto LABEL_7;
  }
  else
  {
    sub_1BA728544((uint64_t)v14);
  }
  v11 = v2 + 32;
  sub_1BA7280B0(v11, (uint64_t)v14);
  if (v15)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    sub_1BB86FA78();
    v13 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    if (v13)
    {
      swift_bridgeObjectRelease();
      v9 = v11;
      goto LABEL_8;
    }
  }
  else
  {
    sub_1BA728544((uint64_t)v14);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t FeedCategory.init(identifier:title:icon1x:icon2x:icon3x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  sub_1BA9BAB24(a5, (uint64_t)(a8 + 4));
  sub_1BA9BAB24(a6, (uint64_t)(a8 + 9));
  return sub_1BA9BAB24(a7, (uint64_t)(a8 + 14));
}

uint64_t sub_1BA9BAB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA76D7E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static FeedCategory.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

void sub_1BA9BAB98(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

void FeedCategory.traits.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

void sub_1BA9BABB0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void FeedCategory.layoutDirection.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

double sub_1BA9BABC8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1BB88CBB0;
  return result;
}

double FeedCategory.kind.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1BB88CBB0;
  return result;
}

uint64_t FeedCategory.debugSourceName.getter()
{
  return 0;
}

uint64_t sub_1BA9BABF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeedCategory.debugTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeedCategory.debugAssetHandle.getter()
{
  return 0;
}

uint64_t FeedCategory.debugScoreProfile.getter()
{
  return 0;
}

unint64_t sub_1BA9BAC5C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9BAC80();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA9BAC80()
{
  unint64_t result;

  result = qword_1ED39E0A0;
  if (!qword_1ED39E0A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedCategory, &type metadata for FeedCategory);
    atomic_store(result, (unint64_t *)&qword_1ED39E0A0);
  }
  return result;
}

uint64_t destroy for FeedCategory(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (a1[7])
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
  if (a1[12])
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 9));
  if (a1[17])
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 14));
  return result;
}

uint64_t initializeWithCopy for FeedCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 32);
  }
  v10 = (_OWORD *)(a1 + 72);
  v11 = (_OWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 88);
    *v10 = *v11;
    *(_OWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v15 = (_OWORD *)(a1 + 112);
  v16 = (_OWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 136);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 128);
    *v15 = *v16;
    *(_OWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  }
  return a1;
}

uint64_t assignWithCopy for FeedCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
LABEL_8:
  v7 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 96) = v7;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 72, a2 + 72);
    goto LABEL_15;
  }
  v8 = *(_OWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 88) = v9;
LABEL_15:
  v10 = *(_QWORD *)(a2 + 136);
  if (!*(_QWORD *)(a1 + 136))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 136) = v10;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 112, a2 + 112);
      return a1;
    }
LABEL_21:
    v11 = *(_OWORD *)(a2 + 112);
    v12 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v12;
    return a1;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 112);
    goto LABEL_21;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  return a1;
}

uint64_t assignWithTake for FeedCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 136))
    __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

ValueMetadata *type metadata accessor for FeedCategory()
{
  return &type metadata for FeedCategory;
}

_QWORD *initializeBufferWithCopyOfBuffer for FormatShareAttributionData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;

  v4 = type metadata accessor for SharedItem();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_1BB86C8B0();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + v6[5]) = *((_BYTE *)a2 + v6[5]);
    v8 = v6[6];
    v9 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = v6[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_1BB86C67C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v9;
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t initializeWithCopy for FormatShareAttributionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;

  v4 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SharedItem();
  *(_BYTE *)(a1 + v5[5]) = *(_BYTE *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = *(void **)(a2 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  v8 = v5[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BB86C67C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v7;
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for FormatShareAttributionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SharedItem();
  *(_BYTE *)(a1 + v5[5]) = *(_BYTE *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = *(void **)(a2 + v6);
  v8 = *(void **)(a1 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  v9 = v7;

  v10 = v5[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for FormatShareAttributionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SharedItem();
  *(_BYTE *)(a1 + v5[5]) = *(_BYTE *)(a2 + v5[5]);
  *(_QWORD *)(a1 + v5[6]) = *(_QWORD *)(a2 + v5[6]);
  v6 = v5[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for FormatShareAttributionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SharedItem();
  *(_BYTE *)(a1 + v5[5]) = *(_BYTE *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = *(void **)(a1 + v6);
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);

  v8 = v5[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatShareAttributionData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9BB418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharedItem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FormatShareAttributionData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9BB460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharedItem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

_QWORD *sub_1BA9BB4A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v2 = type metadata accessor for SharedItem();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9BB7E8(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2A9CF0, (uint64_t (*)(uint64_t))sub_1BA89EA04, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v25 = xmmword_1BB87CE70;
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  sub_1BA4B07F0(0, &qword_1EF2AC0A0, (uint64_t (*)(uint64_t))sub_1BA8C88C8, v8);
  sub_1BA8C88C8(0);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v25;
  sub_1BA4C2DD8(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA9BB7E8);
  v14 = type metadata accessor for FormatShareAttributionData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v7, 1, v14) == 1)
  {
    sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA9BB7E8);
    v15 = 0;
    v16 = 0;
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SharedItem);
    sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatShareAttributionData);
    v17 = (void *)sub_1BB86C58C();
    v18 = objc_msgSend(v17, sel_fc_NewsArticleID);

    if (v18)
    {
      v15 = sub_1BB8729A0();
      v16 = v19;

    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SharedItem);
  }
  sub_1BAAF7494(0x696669746E656449, 0xEA00000000007265, v15, v16, (_QWORD *)(v13 + v12));
  v20 = type metadata accessor for FormatInspectionItem(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13 + v12, 0, 1, v20);
  sub_1BAF89090(0xD000000000000016, 0x80000001BB966200, 0, 0, v13, v26);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(inited + 56) = &type metadata for FormatInspectionGroup;
  *(_QWORD *)(inited + 64) = &off_1E72D2F60;
  v21 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(v21 + 48) = v27;
  v22 = v26[1];
  *(_OWORD *)(v21 + 16) = v26[0];
  *(_OWORD *)(v21 + 32) = v22;
  v23 = sub_1BB6DF010(inited);
  swift_setDeallocating();
  sub_1BA89EA04(0);
  swift_arrayDestroy();
  return v23;
}

void sub_1BA9BB7E8(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2AC7E8, (uint64_t (*)(uint64_t))type metadata accessor for FormatShareAttributionData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BA9BB804()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t Feed.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id Feed.log.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id Feed.dbLog.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t Feed.adsEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t static Feed.databaseUserVersion.getter()
{
  return 9;
}

uint64_t sub_1BA9BB884()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BB87420C();
  qword_1EF2AC7F0 = result;
  *(_QWORD *)algn_1EF2AC7F8 = v1;
  return result;
}

uint64_t static Feed.databaseVersion.getter()
{
  uint64_t v0;

  if (qword_1EF2A6C98 != -1)
    swift_once();
  v0 = qword_1EF2AC7F0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Feed.densityValue<A>(on:off:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_1BA9BB964(a1, a2, a3, a4, a5, &qword_1ED3D5150, &byte_1ED3D5168);
}

uint64_t static Feed.densityOptionalValue<A>(on:off:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_1BA9BB964(a1, a2, a3, a4, a5, &qword_1ED3D5150, &byte_1ED3D5168);
}

uint64_t sub_1BA9BB964(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, _QWORD *a6, _BYTE *a7)
{
  if (*a6 != -1)
    swift_once();
  if (*a7 == 1)
    return a1();
  else
    return a3();
}

uint64_t static Feed.layoutTransitionsValue<A>(on:off:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_1BA9BB964(a1, a2, a3, a4, a5, &qword_1ED3D2448, &byte_1ED3D2B41);
}

uint64_t sub_1BA9BBA00(uint64_t a1)
{
  return sub_1BA9BBA48(a1, &qword_1ED3D5160, (uint64_t)&qword_1ED3D5140, &byte_1ED3D5168);
}

uint64_t sub_1BA9BBA24(uint64_t a1)
{
  return sub_1BA9BBA48(a1, &qword_1ED3D29F8, (uint64_t)&qword_1ED3D24A8, &byte_1ED3D2B41);
}

uint64_t sub_1BA9BBA48(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v6;
  uint64_t result;

  sub_1BB86D294();
  sub_1BB86D27C();
  if (*a2 != -1)
    swift_once();
  v6 = sub_1BB86D288();
  result = swift_release();
  *a4 = v6 & 1;
  return result;
}

void static Feed.style(navigationItem:backgroundColor:)(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t inited;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  uint64_t v25;
  id v26;
  int v27;
  void *v28;
  double v29;
  id v30;
  void *v31;
  id v32;
  id v33;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A30]), sel_init);
  v4 = (void *)objc_opt_self();
  v5 = v3;
  v6 = objc_msgSend(v4, sel_effectWithStyle_, 4);
  objc_msgSend(v5, sel_setBackgroundEffect_, v6);

  objc_msgSend(v5, sel_setBackgroundColor_, a2);
  objc_msgSend(v5, sel_setShadowColor_, 0);
  sub_1BA847C08();
  inited = swift_initStackObject();
  v8 = (void **)MEMORY[0x1E0DC1140];
  *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
  v9 = *v8;
  *(_QWORD *)(inited + 32) = *v8;
  v10 = (void *)objc_opt_self();
  v11 = v9;
  v33 = v10;
  v12 = objc_msgSend(v10, sel_labelColor);
  v13 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
  *(_QWORD *)(inited + 40) = v12;
  v14 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 64) = v13;
  *(_QWORD *)(inited + 72) = v14;
  v15 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  *(_QWORD *)(inited + 104) = v15;
  v16 = qword_1ED3D5150;
  v17 = v14;
  if (v16 != -1)
    swift_once();
  v18 = byte_1ED3D5168;
  v19 = (void *)objc_opt_self();
  v20 = 34.0;
  if (!v18)
    v20 = 29.0;
  v21 = *MEMORY[0x1E0DC1420];
  v22 = *MEMORY[0x1E0DC1418];
  if (v18)
    v23 = *MEMORY[0x1E0DC1420];
  else
    v23 = *MEMORY[0x1E0DC1418];
  *(_QWORD *)(inited + 80) = objc_msgSend(v19, sel_systemFontOfSize_weight_, v20, v23);
  sub_1BA76E82C(inited);
  type metadata accessor for Key(0);
  sub_1BA76F768();
  v24 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setLargeTitleTextAttributes_, v24);

  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v25 + 32) = v11;
  v26 = v11;
  *(_QWORD *)(v25 + 40) = objc_msgSend(v33, sel_labelColor);
  *(_QWORD *)(v25 + 64) = v13;
  *(_QWORD *)(v25 + 72) = v17;
  *(_QWORD *)(v25 + 104) = v15;
  v27 = byte_1ED3D5168;
  v28 = (void *)objc_opt_self();
  if (v27)
    v29 = 21.0;
  else
    v29 = 19.0;
  if (!v27)
    v21 = v22;
  v30 = v17;
  *(_QWORD *)(v25 + 80) = objc_msgSend(v28, sel_systemFontOfSize_weight_, v29, v21);
  sub_1BA76E82C(v25);
  v31 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setTitleTextAttributes_, v31);

  v32 = v5;
  objc_msgSend(a1, sel_setStandardAppearance_, v32);
  objc_msgSend(a1, sel_setScrollEdgeAppearance_, v32);
  objc_msgSend(a1, sel_setCompactAppearance_, v32);

}

uint64_t assignWithCopy for Feed(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Feed(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

void sub_1BA9BBF70(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BA9BBFB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0x6369706F547369;
  v1[1] = 0xE700000000000000;
  v2 = (uint64_t)v1 + *(int *)(type metadata accessor for FormatJsonKeyValue() + 20);
  return sub_1BA9BE630(v0, v2);
}

void sub_1BA9BC1C8()
{
  __asm { BR              X10 }
}

void sub_1BA9BC214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v34 = objc_msgSend(v33, sel_theme);
  if (v34
    && (v35 = objc_msgSend(v34, sel_foregroundColor),
        swift_unknownObjectRelease(),
        v35))
  {
    v36 = swift_allocObject();
    objc_msgSend(v35, sel_red);
    v38 = v37 * 255.0;
    objc_msgSend(v35, sel_green);
    v40 = v39 * 255.0;
    objc_msgSend(v35, sel_blue);
    v42 = v41 * 255.0;
    objc_msgSend(v35, sel_alpha);
    *(double *)(v36 + 16) = v38;
    *(double *)(v36 + 24) = v40;
    *(double *)(v36 + 32) = v42;
    *(_QWORD *)(v36 + 40) = v43;
    *(_BYTE *)(v36 + 48) = 0;

    v44 = v36 | 0x6000000000000000;
  }
  else
  {
    v45 = swift_allocObject();
    *(_BYTE *)(v45 + 16) = 21;
    *(_QWORD *)(v45 + 24) = 0x3FF0000000000000;
    *(_BYTE *)(v45 + 32) = 0;
    v44 = v45 | 0x1000000000000000;
  }
  *v32 = v44;
}

uint64_t sub_1BA9BCEF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1BA8321E8(*a1);
  v5 = v4;
  if (v3 == sub_1BA8321E8(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BA9BCF78()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA8321E8(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BA9BCFD8()
{
  unsigned __int8 *v0;

  sub_1BA8321E8(*v0);
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9BD018()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA8321E8(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BA9BD074(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E724C2F8;
}

uint64_t FormatTagBinding.Color.hash(into:)()
{
  return sub_1BB8745D8();
}

BOOL static FormatTagBinding.Color.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void *static FormatTagBinding.Color.allCases.getter()
{
  return &unk_1E7251118;
}

uint64_t FormatTagBinding.Color.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BA9BD114()
{
  unint64_t result;

  result = qword_1EF2AC800;
  if (!qword_1EF2AC800)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTagBinding.Color, &type metadata for FormatTagBinding.Color);
    atomic_store(result, (unint64_t *)&qword_1EF2AC800);
  }
  return result;
}

unint64_t sub_1BA9BD158(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9BD17C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9BD17C()
{
  unint64_t result;

  result = qword_1EF2AC808;
  if (!qword_1EF2AC808)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTagBinding.Color, &type metadata for FormatTagBinding.Color);
    atomic_store(result, (unint64_t *)&qword_1EF2AC808);
  }
  return result;
}

uint64_t sub_1BA9BD1C0()
{
  return sub_1BA9BD27C(&qword_1EF2AC810, &qword_1EF2AC818);
}

void sub_1BA9BD1EC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7251118;
}

unint64_t sub_1BA9BD1FC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA644448();
  a1[2] = sub_1BA8320EC();
  result = sub_1BA9BD114();
  a1[3] = result;
  return result;
}

ValueMetadata *type metadata accessor for FormatTagBinding.Color()
{
  return &type metadata for FormatTagBinding.Color;
}

ValueMetadata *_s14descr1E7283981V5ColorO10CodingTypeOMa()
{
  return &_s14descr1E7283981V5ColorO10CodingTypeON;
}

uint64_t sub_1BA9BD250()
{
  return sub_1BA9BD27C(&qword_1EF2AC820, &qword_1EF2AC828);
}

uint64_t sub_1BA9BD27C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_1BA4C576C(255, a2);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BA9BD2C0()
{
  unint64_t result;

  result = qword_1EF2AC830;
  if (!qword_1EF2AC830)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88CF9C, &_s14descr1E7283981V5ColorO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1EF2AC830);
  }
  return result;
}

void sub_1BA9BD304(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9BD34C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_unknownObjectRetain();
  sub_1BA9BC1C8();
  v1 = type metadata accessor for FormatInspectionItem(0);
  v2 = (_QWORD *)(v0 + *(int *)(v1 + 24));
  *v2 = v6;
  v3 = type metadata accessor for FormatInspectionItem.Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  swift_unknownObjectRelease();
  *(_OWORD *)v0 = xmmword_1BB88D050;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v4 = v0 + *(int *)(v1 + 28);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = -1;
  type metadata accessor for FormatInspectionItem(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 0, 1, v1);
}

void sub_1BA9BDDE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatJson();
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X10 }
}

uint64_t sub_1BA9BDE70()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 - 97) = 0;
  swift_unknownObjectRetain();
  sub_1BA9BC1C8();
  swift_unknownObjectRelease();
  *v1 = *(_QWORD *)(v2 - 56);
  swift_storeEnumTagMultiPayload();
  *v0 = 0x756F726765726F66;
  v0[1] = 0xEF726F6C6F43646ELL;
  v3 = type metadata accessor for FormatJsonKeyValue();
  return sub_1BA9BE630((uint64_t)v1, (uint64_t)v0 + *(int *)(v3 + 20));
}

double sub_1BA9BE500@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  _QWORD v6[3];
  _BYTE v7[16];
  _OWORD v8[2];
  uint64_t v9;

  v6[2] = a1;
  v3 = sub_1BA89F4C0((void (*)(char *))sub_1BA9BE614, (uint64_t)v6, (uint64_t)&unk_1E724C2F8, (uint64_t)v7);
  sub_1BAF89090(0x726F6C6F43, 0xE500000000000000, 0, 0, v3, v8);
  swift_bridgeObjectRelease();
  result = *(double *)v8;
  v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_1BA9BE594()
{
  return swift_deallocObject();
}

uint64_t sub_1BA9BE5A4()
{
  return swift_deallocObject();
}

uint64_t sub_1BA9BE5B4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9BE5E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BA9BE60C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB0A8280(a1, *(id *)(v1 + 16));
}

void sub_1BA9BE614(uint64_t a1)
{
  sub_1BA9BD304(a1);
}

uint64_t sub_1BA9BE630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatJson();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA9BE678(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA9BE6B8(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)sub_1BB873D80();
      v7 = (uint64_t)sub_1BA5CEA5C(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_1BA9BF9A4(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_1BA9BE904@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v2 = sub_1BB873CE4();
  swift_getObjectType();
  result = sub_1BB873CE4();
  if (v2 == result)
  {
    v4 = sub_1BB873CF0();
    swift_unknownObjectRelease();
    if ((v4 & 1) != 0)
    {
      result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      sub_1BB873E64();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA9BEA0C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;

  result = sub_1BB782144();
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  else
    return sub_1BA9C02B4(result, v3, 0, a1);
}

uint64_t sub_1BA9BEA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_1BA580CE4(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for WebEmbedDataVisualization();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_1BA9C021C(result, v5, a1, a2);
    v7 = type metadata accessor for WebEmbedDataVisualization();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_1BA9BEB24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void (*v4)(_QWORD *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  sub_1BA9C068C();
  sub_1BA4A2870(&qword_1ED3A32D0, (uint64_t (*)(uint64_t))sub_1BA9C068C, MEMORY[0x1E0CEF540]);
  sub_1BB8730D8();
  sub_1BB873114();
  if (v9[4] == v9[0])
  {
    v2 = sub_1BB86CC10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    v4 = (void (*)(_QWORD *, _QWORD))sub_1BB873198();
    v6 = v5;
    v7 = sub_1BB86CC10();
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v6, v7);
    v4(v9, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
}

uint64_t sub_1BA9BEC3C(uint64_t a1)
{
  return sub_1BA9BEC48(a1, (uint64_t (*)(void))sub_1BA6AFD6C);
}

uint64_t sub_1BA9BEC48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  int v4;
  char v5;

  result = a2();
  if ((v5 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v4)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  sub_1BA9C04DC(result, v4, 0, a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9BECAC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_1BA9BEFB4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_1BB874398() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = sub_1BB874398();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t sub_1BA9BF098()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_1BB873CB4();
  sub_1BB872AFC("Foreground (Dark)");
  sub_1BB87420C();
  sub_1BB872AFC(v0);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v1);
  return 0;
}

uint64_t sub_1BA9BF13C()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_1BB873CB4();
  sub_1BB872AFC("FormatInteger.integer(");
  sub_1BB872AFC(v0);
  sub_1BB872AFC(v1);
  return 0;
}

uint64_t FormatInteger.description.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_BYTE *)(v0 + 16) != 1)
    return sub_1BB87420C();
  sub_1BB872AFC((_QWORD *)0x286E6F6974706FLL);
  sub_1BB872AFC(v1);
  return 0x286E6F6974706FLL;
}

uint64_t FormatInteger.optionIdentifiers.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)v0 + 16) != 1)
    return 0;
  v3 = v0;
  v1 = *v0;
  v2 = v3[1];
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v2;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t FormatInteger.init(value:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t FormatInteger.value(contextLayoutOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;

  sub_1BA856968();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FormatOption();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v11 = *(_QWORD *)(v1 + 8);
    swift_bridgeObjectRetain();
    FormatOptionCollection.subscript.getter(v10, v11, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_1BA4A2E80((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BA856968);
      type metadata accessor for FormatLayoutError();
      sub_1BA4A2870((unint64_t *)&qword_1ED3B4C10, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
      swift_allocError();
      *v12 = v10;
      v12[1] = v11;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      sub_1BA69C828(v10, v11, 1);
      sub_1BA8569CC((uint64_t)v5, (uint64_t)v9);
      v15 = *((_QWORD *)v9 + 2);
      swift_retain();
      v10 = sub_1BA73DA40(&v15, a1, (uint64_t)v9);
      swift_release();
      sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
    }
  }
  return v10;
}

uint64_t sub_1BA9BF4C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)v0 + 16) != 1)
    return 0;
  v3 = v0;
  v1 = *v0;
  v2 = v3[1];
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v2;
  swift_bridgeObjectRetain();
  return v4;
}

_QWORD *sub_1BA9BF53C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_1BA9BF54C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = FormatInteger.value(contextLayoutOptions:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BA9BF574()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_BYTE *)(v0 + 16) != 1)
    return sub_1BB87420C();
  sub_1BB872AFC((_QWORD *)0x286E6F6974706FLL);
  sub_1BB872AFC(v1);
  return 0x286E6F6974706FLL;
}

uint64_t sub_1BA9BF5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v2 = *(_QWORD *)v0;
    v1 = *(_QWORD *)(v0 + 8);
    swift_bridgeObjectRetain();
    v3 = sub_1BA862600((uint64_t)&unk_1E724DD58);
    sub_1BB3D7F90(v2, v1, v3, 0);
    sub_1BA69C828(v2, v1, 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void FormatInteger.bind(binder:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1BA856968();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v7 = v0;
    v5 = *(_QWORD *)v0;
    v6 = *(_QWORD *)(v7 + 8);
    v8 = sub_1BA862600((uint64_t)&unk_1E7253FF0);
    sub_1BB3757A0(v5, v6, v8, 1, (uint64_t)v4);
    if (!v1)
      sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BA856968);
    swift_bridgeObjectRelease();
  }
}

void sub_1BA9BF75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1BA856968();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v7 = v0;
    v5 = *(_QWORD *)v0;
    v6 = *(_QWORD *)(v7 + 8);
    v8 = sub_1BA862600((uint64_t)&unk_1E7253FF0);
    sub_1BB3757A0(v5, v6, v8, 1, (uint64_t)v4);
    if (!v1)
      sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BA856968);
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_1BA9BF828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3AB9E8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unsigned __int8 *sub_1BA9BF898(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA9BFA88(a1, a2, a3);
}

unsigned __int8 *sub_1BA9BF8AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA5CEA5C(a1, a2, a3);
}

uint64_t sub_1BA9BF8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1BB872B8C();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1BA9BFD08();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1BB873D80();
  }
LABEL_7:
  v11 = sub_1BA9BFA88(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1BA9BF9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1BB872B8C();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1BA9BFD08();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1BB873D80();
  }
LABEL_7:
  v11 = sub_1BA5CEA5C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1BA9BFA88(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA9BFD08()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1BB872B98();
  v4 = sub_1BA9BFD84(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1BA9BFD84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1BA9BFEC8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1BA9BF828(v9, 0);
      v12 = sub_1BA9BFFB4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1BCCE33A0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1BCCE33A0);
LABEL_9:
      sub_1BB873D80();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1BCCE33A0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1BA9BFEC8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1BB80CBC0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1BB80CBC0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1BB872B2C();
  }
  __break(1u);
  return result;
}

unint64_t sub_1BA9BFFB4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1BB80CBC0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1BB872B38();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1BB873D80();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1BB80CBC0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1BB872B14();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1BA9C01C4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    *a4 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + result);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1BA9C021C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for WebEmbedDataVisualization();
    return sub_1BA4C2DD8(v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, a4, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1BA9C02B4(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _s8NewsFeed13FormatIntegerO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  if (v4 != 1)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      sub_1BA69C828(*(_QWORD *)a1, v3, 0);
      sub_1BA69C828(v5, v6, 0);
      v9 = v2 == v5;
      return v9 & 1;
    }
LABEL_11:
    sub_1BA69C808(v5, v6, v7);
    sub_1BA69C828(v2, v3, v4);
    sub_1BA69C828(v5, v6, v7);
    v9 = 0;
    return v9 & 1;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v2 == v5 && v3 == v6)
    v9 = 1;
  else
    v9 = sub_1BB874398();
  sub_1BA69C808(v5, v6, 1);
  sub_1BA69C808(v2, v3, 1);
  sub_1BA69C828(v2, v3, 1);
  sub_1BA69C828(v5, v6, 1);
  return v9 & 1;
}

unint64_t sub_1BA9C0430(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_1BB872AD8();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_1BB872B98();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA9C04CC()
{
  return sub_1BA9BF13C();
}

uint64_t sub_1BA9C04D4()
{
  return sub_1BA9BF098();
}

uint64_t sub_1BA9C04DC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_1BA9C0530(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9C0554();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9C0554()
{
  unint64_t result;

  result = qword_1EF2AC838;
  if (!qword_1EF2AC838)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1EF2AC838);
  }
  return result;
}

unint64_t sub_1BA9C0598(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA835DEC();
  a1[2] = sub_1BA835E74();
  result = sub_1BA835E30();
  a1[3] = result;
  return result;
}

_UNKNOWN **sub_1BA9C05CC()
{
  return &protocol witness table for Int;
}

uint64_t assignWithCopy for FormatBoolean(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BA69C808(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BA69C828(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for FormatBoolean(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BA69C828(v4, v5, v6);
  return a1;
}

uint64_t sub_1BA9C0670(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FormatInteger()
{
  return &type metadata for FormatInteger;
}

void sub_1BA9C068C()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED3A32D8)
  {
    sub_1BB86CC10();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608];
    sub_1BA4A2870(&qword_1ED3A3290, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608], MEMORY[0x1E0CEE628]);
    sub_1BA4A2870(&qword_1ED3A3280, v0, MEMORY[0x1E0CEE618]);
    sub_1BA4A2870(&qword_1ED3A3288, v0, MEMORY[0x1E0CEE620]);
    v1 = sub_1BB86CCF4();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED3A32D8);
  }
}

uint64_t FormatContentSlotItemResolution.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4C2DD8(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
}

uint64_t FormatContentSlotItemResolution.auxiliary.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for FormatContentSlotItemResolution() + 20));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_1BA5DCC20(v4);
}

uint64_t FormatContentSlotItemResolution.selectors.getter()
{
  type metadata accessor for FormatContentSlotItemResolution();
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentSlotItemResolution.options.getter()
{
  type metadata accessor for FormatContentSlotItemResolution();
  return swift_bridgeObjectRetain();
}

int *FormatContentSlotItemResolution.init(object:auxiliary:selectors:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int *result;
  _QWORD *v11;

  v8 = *a2;
  v9 = a2[1];
  sub_1BA9C085C(a1, a5);
  result = (int *)type metadata accessor for FormatContentSlotItemResolution();
  v11 = (_QWORD *)(a5 + result[5]);
  *v11 = v8;
  v11[1] = v9;
  *(_QWORD *)(a5 + result[6]) = a3;
  *(_QWORD *)(a5 + result[7]) = a4;
  return result;
}

uint64_t sub_1BA9C085C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA9C08A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA9C08CC + 4 * byte_1BB88D1C0[*v0]))(0x7463656A626FLL, 0xE600000000000000);
}

uint64_t sub_1BA9C08CC()
{
  return 0x7261696C69787561;
}

uint64_t sub_1BA9C08EC()
{
  return 0x726F7463656C6573;
}

uint64_t sub_1BA9C0908()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1BA9C0920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA9C67C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA9C0944()
{
  sub_1BA9C0BF0();
  return sub_1BB874710();
}

uint64_t sub_1BA9C096C()
{
  sub_1BA9C0BF0();
  return sub_1BB87471C();
}

uint64_t FormatContentSlotItemResolution.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v12;
  char v13;
  __int128 v14;

  v3 = v1;
  sub_1BA9C0FF4(0, &qword_1ED3A31F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9C0BF0();
  sub_1BB8746C8();
  LOBYTE(v14) = 0;
  type metadata accessor for FormatContentSlotItemObject.Resolved();
  sub_1BA4A2870((unint64_t *)&unk_1ED3A7F30, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItemObject.Resolved, (uint64_t)&protocol conformance descriptor for FormatContentSlotItemObject.Resolved);
  sub_1BB8741AC();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for FormatContentSlotItemResolution();
    v14 = *(_OWORD *)(v3 + v10[5]);
    v13 = 1;
    sub_1BA82237C();
    sub_1BB87414C();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + v10[6]);
    v13 = 2;
    sub_1BA6BCC84();
    sub_1BA64D3D4((unint64_t *)&qword_1ED39BFB0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    sub_1BB8741AC();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + v10[7]);
    v13 = 3;
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9440, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BA583FEC((unint64_t *)&qword_1ED39BE80, &qword_1ED3AFE80, (uint64_t)&protocol conformance descriptor for FormatOption, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1BA9C0BF0()
{
  unint64_t result;

  result = qword_1ED3A2D48;
  if (!qword_1ED3A2D48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88D3AC, &type metadata for FormatContentSlotItemResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2D48);
  }
  return result;
}

uint64_t FormatContentSlotItemResolution.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v20 = a2;
  v3 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  MEMORY[0x1E0C80A78](v3);
  v21 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9C0FF4(0, &qword_1ED3A3128, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v23 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - v7;
  v9 = (int *)type metadata accessor for FormatContentSlotItemResolution();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9C0BF0();
  v22 = v8;
  v12 = v24;
  sub_1BB87468C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v6;
  v14 = (uint64_t)v11;
  LOBYTE(v25) = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3A7F40, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItemObject.Resolved, (uint64_t)&protocol conformance descriptor for FormatContentSlotItemObject.Resolved);
  v16 = (uint64_t)v21;
  v15 = v22;
  v17 = v23;
  sub_1BB8740D4();
  sub_1BA9C085C(v16, v14);
  v26 = 1;
  sub_1BA822338();
  sub_1BB874068();
  *(_OWORD *)(v14 + v9[5]) = v25;
  sub_1BA6BCC84();
  v26 = 2;
  sub_1BA64D3D4((unint64_t *)&qword_1ED3B96D0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
  sub_1BB8740D4();
  *(_QWORD *)(v14 + v9[6]) = v25;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9440, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v26 = 3;
  sub_1BA583FEC((unint64_t *)&qword_1ED3B9450, &qword_1ED3B37E0, (uint64_t)&protocol conformance descriptor for FormatOption, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v17);
  *(_QWORD *)(v14 + v9[7]) = v25;
  sub_1BA4C2DD8(v14, v20, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BA4A2E80(v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
}

void sub_1BA9C0FF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA9C0BF0();
    v7 = a3(a1, &type metadata for FormatContentSlotItemResolution.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BA9C1054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatContentSlotItemResolution.init(from:)(a1, a2);
}

uint64_t sub_1BA9C1068(_QWORD *a1)
{
  return FormatContentSlotItemResolution.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for FormatContentSlotItemResolution(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for FormatContentSlotItemObject.Resolved();
    v5 = (char *)&loc_1BA9C10E8 + 4 * byte_1BB88D1C4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for FormatContentSlotItemResolution(id *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  type metadata accessor for FormatContentSlotItemObject.Resolved();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 4u:
    case 5u:
      swift_unknownObjectRelease();
      break;
    case 1u:

      break;
    case 3u:
      swift_bridgeObjectRelease();
      v4 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
      v5 = (char *)a1 + v4[5];
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for FormatWebEmbed();
      v7 = &v5[*(int *)(v6 + 20)];
      v8 = sub_1BB86C67C();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(void (**)(char *, uint64_t))(v9 + 8);
      v10(v7, v8);
      v11 = &v5[*(int *)(v6 + 24)];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
        v10(v11, v8);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v12 = (char *)a1 + v4[8];
      v13 = type metadata accessor for WebEmbedDataVisualization();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          swift_bridgeObjectRelease();
          v14 = type metadata accessor for GenericDataVisualization();
          v10(&v12[*(int *)(v14 + 20)], v8);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      v40 = (char *)a1 + v4[9];
      sub_1BA6C5A68();
      v42 = v41;
      v43 = *(_QWORD *)(v41 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v41))
        (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
      break;
    case 6u:
      swift_unknownObjectRelease();
      v15 = (char *)a1 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
      type metadata accessor for PuzzleStatisticCategory(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for PuzzleStatisticValue(0);
          goto LABEL_23;
        case 1u:
          type metadata accessor for PuzzleStatisticValue(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4)
          {
            v20 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v15, 1, v20))
            {
              v21 = sub_1BB86BEC0();
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v15, v21);
            }
          }
          v22 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
          v23 = &v15[*(int *)(v22 + 20)];
          v24 = swift_getEnumCaseMultiPayload();
          if (v24 == 5 || v24 == 4)
          {
            v25 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v23, 1, v25))
            {
              v26 = sub_1BB86BEC0();
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v23, v26);
            }
          }
          v15 += *(int *)(v22 + 24);
LABEL_23:
          v27 = swift_getEnumCaseMultiPayload();
          if (v27 == 5 || v27 == 4)
          {
            v28 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v15, 1, v28))goto LABEL_34;
          }
          goto LABEL_38;
        case 2u:
          v29 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v15, 1, v29))
            goto LABEL_38;
          v30 = sub_1BB86C8B0();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v15, v30);
          v31 = type metadata accessor for PuzzleLeaderboardEntry();
          swift_bridgeObjectRelease();
          v32 = &v15[*(int *)(v31 + 24)];
          swift_bridgeObjectRelease();
          v33 = *((_QWORD *)v32 + 3);
          if (v33 >> 60 != 15)
            sub_1BA69D314(*((_QWORD *)v32 + 2), v33);
          goto LABEL_13;
        case 3u:
          v34 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
          v35 = &v15[*(int *)(v34 + 24)];
          v36 = type metadata accessor for PuzzleStreak();
          v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48);
          if (!v37(v35, 1, v36))
          {
            v38 = sub_1BB86BEC0();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v35, v38);
          }
          v15 += *(int *)(v34 + 28);
          if (!v37(v15, 1, v36))
          {
LABEL_34:
            v39 = sub_1BB86BEC0();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v15, v39);
          }
          goto LABEL_38;
        default:
          goto LABEL_38;
      }
    case 7u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (char *)a1 + *(int *)(type metadata accessor for FormatCustomItem.Resolved() + 24);
      v17 = type metadata accessor for FormatCustomItem.Action();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
      {
        v18 = sub_1BB86C67C();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      }
      goto LABEL_13;
    case 8u:
LABEL_13:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
LABEL_38:
  if (*(id *)((char *)a1 + *(int *)(a2 + 20)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for FormatContentSlotItemResolution()
{
  char *v0;

  type metadata accessor for FormatContentSlotItemObject.Resolved();
  v0 = (char *)sub_1BA9C26EC + 4 * byte_1BB88D1DE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1BA9C26EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__dst, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  int *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  *v30 = *v32;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  v33 = v31[5];
  v34 = (_QWORD *)((char *)v30 + v33);
  v35 = (_QWORD *)((char *)v32 + v33);
  if (*v35)
  {
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  v37 = v31[7];
  *(_QWORD *)((char *)v30 + v31[6]) = *(_QWORD *)((char *)v32 + v31[6]);
  *(_QWORD *)((char *)v30 + v37) = *(_QWORD *)((char *)v32 + v37);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v30;
}

uint64_t assignWithCopy for FormatContentSlotItemResolution(uint64_t a1, uint64_t a2, int *a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
    type metadata accessor for FormatContentSlotItemObject.Resolved();
    v6 = (char *)&loc_1BA9C3764 + 4 * byte_1BB88D1EB[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *(_QWORD *)(a2 + v7);
  if (!v10)
  {
    if (v11)
    {
      *v8 = v11;
      v8[1] = *(_QWORD *)(v9 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
LABEL_9:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_10;
  }
  if (!v11)
  {
    sub_1BA90F4A8(a1 + v7);
    goto LABEL_9;
  }
  *v8 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_10:
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FormatContentSlotItemResolution(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v49)(char *, char *, uint64_t);
  _OWORD *v50;
  int *v51;

  v6 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    v23 = a2[1];
    *a1 = *a2;
    a1[1] = v23;
    v24 = type metadata accessor for FormatCustomItem.Resolved();
    v25 = *(int *)(v24 + 24);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for FormatCustomItem.Action();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      sub_1BA4B07F0(0, &qword_1ED3C7270, (uint64_t (*)(uint64_t))type metadata accessor for FormatCustomItem.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v38 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v26, v27, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_QWORD *)((char *)a1 + *(int *)(v24 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v24 + 28));
    goto LABEL_22;
  }
  if (EnumCaseMultiPayload == 6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    type metadata accessor for PuzzleStatistic();
    type metadata accessor for PuzzleStatisticCategory(0);
    v31 = (char *)&loc_1BA9C4A08 + 4 * byte_1BB88D1F8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (EnumCaseMultiPayload == 3)
  {
    v51 = a3;
    *a1 = *a2;
    v8 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v50 = a2;
    v11 = (char *)a2 + v9;
    *(_OWORD *)((char *)a1 + v9) = *(_OWORD *)((char *)a2 + v9);
    v12 = (int *)type metadata accessor for FormatWebEmbed();
    v13 = v12[5];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = sub_1BB86C67C();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v18(v14, v15, v16);
    v19 = v12[6];
    v20 = &v10[v19];
    v21 = &v11[v19];
    v49 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(&v11[v19], 1, v16))
    {
      sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v18(v20, v21, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
    }
    a2 = v50;
    a3 = v51;
    *(_QWORD *)&v10[v12[7]] = *(_QWORD *)&v11[v12[7]];
    *(_OWORD *)&v10[v12[8]] = *(_OWORD *)&v11[v12[8]];
    *(_OWORD *)&v10[v12[9]] = *(_OWORD *)&v11[v12[9]];
    *(_QWORD *)&v10[v12[10]] = *(_QWORD *)&v11[v12[10]];
    *(_QWORD *)&v10[v12[11]] = *(_QWORD *)&v11[v12[11]];
    *(_QWORD *)&v10[v12[12]] = *(_QWORD *)&v11[v12[12]];
    *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)v50 + v8[6]);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)v50 + v8[7]);
    v32 = v8[8];
    v33 = (_OWORD *)((char *)a1 + v32);
    v34 = (_OWORD *)((char *)v50 + v32);
    v35 = type metadata accessor for WebEmbedDataVisualization();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_1BA4B07F0(0, &qword_1ED3CB5E0, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *v33 = *v34;
        v39 = type metadata accessor for GenericDataVisualization();
        v49((char *)v33 + *(int *)(v39 + 20), (char *)v34 + *(int *)(v39 + 20), v16);
        *(_QWORD *)((char *)v33 + *(int *)(v39 + 24)) = *(_QWORD *)((char *)v34 + *(int *)(v39 + 24));
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v33, v34, *(_QWORD *)(v36 + 64));
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v40 = v8[9];
    v41 = (char *)a1 + v40;
    v42 = (char *)v50 + v40;
    sub_1BA6C5A68();
    v44 = v43;
    v45 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v42, 1, v43))
    {
      sub_1BA4B07F0(0, &qword_1ED3D2C50, (uint64_t (*)(uint64_t))sub_1BA6C5A68, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v42, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
    }
LABEL_22:
    swift_storeEnumTagMultiPayload();
    goto LABEL_23;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_23:
  v47 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v47) = *(_QWORD *)((char *)a2 + v47);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_OWORD *assignWithTake for FormatContentSlotItemResolution(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v50;
  int *v51;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
    v6 = type metadata accessor for FormatContentSlotItemObject.Resolved();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 7)
    {
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = type metadata accessor for FormatCustomItem.Resolved();
      v24 = *(int *)(v23 + 24);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for FormatCustomItem.Action();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_1BA4B07F0(0, &qword_1ED3C7270, (uint64_t (*)(uint64_t))type metadata accessor for FormatCustomItem.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v37 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v25, v26, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      *(_QWORD *)((char *)a1 + *(int *)(v23 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v23 + 28));
    }
    else
    {
      if (EnumCaseMultiPayload == 6)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        type metadata accessor for PuzzleStatistic();
        type metadata accessor for PuzzleStatisticCategory(0);
        v30 = (char *)&loc_1BA9C584C + 4 * byte_1BB88D1FC[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      if (EnumCaseMultiPayload != 3)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_24;
      }
      v51 = a3;
      *a1 = *a2;
      v50 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
      v8 = v50[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
      v11 = (int *)type metadata accessor for FormatWebEmbed();
      v12 = v11[5];
      v13 = &v9[v12];
      v14 = &v10[v12];
      v15 = sub_1BB86C67C();
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v17(v13, v14, v15);
      v18 = v11[6];
      v19 = &v9[v18];
      v20 = &v10[v18];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v10[v18], 1, v15))
      {
        sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v17(v19, v20, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      }
      *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
      *(_OWORD *)&v9[v11[8]] = *(_OWORD *)&v10[v11[8]];
      *(_OWORD *)&v9[v11[9]] = *(_OWORD *)&v10[v11[9]];
      *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
      *(_QWORD *)&v9[v11[11]] = *(_QWORD *)&v10[v11[11]];
      *(_QWORD *)&v9[v11[12]] = *(_QWORD *)&v10[v11[12]];
      *(_QWORD *)((char *)a1 + v50[6]) = *(_QWORD *)((char *)a2 + v50[6]);
      *(_QWORD *)((char *)a1 + v50[7]) = *(_QWORD *)((char *)a2 + v50[7]);
      v31 = v50[8];
      v32 = (_OWORD *)((char *)a1 + v31);
      v33 = (_OWORD *)((char *)a2 + v31);
      v34 = type metadata accessor for WebEmbedDataVisualization();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        sub_1BA4B07F0(0, &qword_1ED3CB5E0, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        a3 = v51;
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *v32 = *v33;
          v38 = type metadata accessor for GenericDataVisualization();
          v17((char *)v32 + *(int *)(v38 + 20), (char *)v33 + *(int *)(v38 + 20), v15);
          *(_QWORD *)((char *)v32 + *(int *)(v38 + 24)) = *(_QWORD *)((char *)v33 + *(int *)(v38 + 24));
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v32, v33, *(_QWORD *)(v35 + 64));
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        a3 = v51;
      }
      v39 = v50[9];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      sub_1BA6C5A68();
      v43 = v42;
      v44 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v41, 1, v42))
      {
        sub_1BA4B07F0(0, &qword_1ED3D2C50, (uint64_t (*)(uint64_t))sub_1BA6C5A68, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v40, v41, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v40, 0, 1, v43);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_24:
  v46 = a3[5];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  if (!*(_QWORD *)((char *)a1 + v46))
  {
LABEL_28:
    *(_OWORD *)v47 = *(_OWORD *)v48;
    goto LABEL_29;
  }
  if (!*(_QWORD *)v48)
  {
    sub_1BA90F4A8(v47);
    goto LABEL_28;
  }
  *(_QWORD *)v47 = *(_QWORD *)v48;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v47 + 8) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRelease();
LABEL_29:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatContentSlotItemResolution()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9C6520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatContentSlotItemResolution()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9C65A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FormatContentSlotItemObject.Resolved();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSlotItemResolution.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA9C666C + 4 * byte_1BB88D205[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA9C66A0 + 4 * byte_1BB88D200[v4]))();
}

uint64_t sub_1BA9C66A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9C66A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA9C66B0);
  return result;
}

uint64_t sub_1BA9C66BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA9C66C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA9C66C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9C66D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSlotItemResolution.CodingKeys()
{
  return &type metadata for FormatContentSlotItemResolution.CodingKeys;
}

unint64_t sub_1BA9C66F0()
{
  unint64_t result;

  result = qword_1EF2AC890;
  if (!qword_1EF2AC890)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88D384, &type metadata for FormatContentSlotItemResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AC890);
  }
  return result;
}

unint64_t sub_1BA9C6738()
{
  unint64_t result;

  result = qword_1ED3A0FF8;
  if (!qword_1ED3A0FF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88D2F4, &type metadata for FormatContentSlotItemResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A0FF8);
  }
  return result;
}

unint64_t sub_1BA9C6780()
{
  unint64_t result;

  result = qword_1ED3A2D50;
  if (!qword_1ED3A2D50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88D31C, &type metadata for FormatContentSlotItemResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2D50);
  }
  return result;
}

uint64_t sub_1BA9C67C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261696C69787561 && a2 == 0xE900000000000079 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F7463656C6573 && a2 == 0xE900000000000073 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void *static FeedKind.allCases.getter()
{
  return &unk_1E72507A8;
}

void sub_1BA9C6994(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BA9C69C0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 1) = 0;
  return sub_1BB86D384();
}

NewsFeed::FeedKind_optional __swiftcall FeedKind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  NewsFeed::FeedKind_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1BB87450C();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v5 = 1;
      goto LABEL_9;
    case 2:
      v5 = 2;
      goto LABEL_9;
    case 3:
      v5 = 3;
      goto LABEL_9;
    case 4:
      v5 = 4;
      goto LABEL_9;
    case 5:
      v5 = 5;
      goto LABEL_9;
    case 6:
      v5 = 6;
LABEL_9:
      v6 = v5;
      break;
    case 7:
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    default:
      v6 = 25;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t FeedKind.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA9C7004 + 4 * byte_1BB88D47A[*v0]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_1BA9C7004()
{
  return 0x6F69647561;
}

uint64_t sub_1BA9C7018()
{
  return 0x6C656E6E616863;
}

uint64_t sub_1BA9C702C()
{
  return 0x536C656E6E616863;
}

uint64_t sub_1BA9C7050()
{
  return 0x747241664F646E65;
}

uint64_t sub_1BA9C7070()
{
  return 0x79726F74736968;
}

uint64_t sub_1BA9C7084()
{
  return 0x6C61636F6CLL;
}

uint64_t sub_1BA9C7098()
{
  return 0x6365536C61636F6CLL;
}

uint64_t sub_1BA9C70B8()
{
  return 0x656E697A6167616DLL;
}

uint64_t sub_1BA9C70D0()
{
  return 0x7374726F7053796DLL;
}

uint64_t sub_1BA9C70E8()
{
  return 0x7548656C7A7A7570;
}

uint64_t sub_1BA9C7104()
{
  return 0x7954656C7A7A7570;
}

unint64_t sub_1BA9C7120()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA9C713C()
{
  return 0x6465766173;
}

uint64_t sub_1BA9C7150()
{
  return 0x686372616573;
}

uint64_t sub_1BA9C7164()
{
  return 0x6F4D686372616573;
}

unint64_t sub_1BA9C7184()
{
  return 0xD000000000000013;
}

uint64_t sub_1BA9C71A4()
{
  return 0x7053686372616573;
}

uint64_t sub_1BA9C71C4()
{
  return 0x6957646572616873;
}

uint64_t sub_1BA9C71E8()
{
  return 0x7961646F74;
}

uint64_t sub_1BA9C71FC()
{
  return 0x6369706F74;
}

uint64_t sub_1BA9C7210()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1BA9C7224()
{
  return 0x6F54736B636F7473;
}

uint64_t sub_1BA9C7244()
{
  return 0x7953736B636F7473;
}

uint64_t sub_1BA9C7264()
{
  return 0x76457374726F7073;
}

uint64_t sub_1BA9C7284(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BB8049A4(*a1, *a2);
}

uint64_t sub_1BA9C7290()
{
  sub_1BB8745CC();
  FeedKind.rawValue.getter();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BA9C72F4()
{
  FeedKind.rawValue.getter();
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9C7344()
{
  sub_1BB8745CC();
  FeedKind.rawValue.getter();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

NewsFeed::FeedKind_optional sub_1BA9C73A4(Swift::String *a1)
{
  return FeedKind.init(rawValue:)(*a1);
}

uint64_t sub_1BA9C73B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FeedKind.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA9C73D4()
{
  sub_1BA9C7888();
  return sub_1BB872CDC();
}

uint64_t sub_1BA9C7414()
{
  sub_1BA9C7888();
  return sub_1BB872CD0();
}

uint64_t sub_1BA9C745C()
{
  sub_1BA9C7888();
  return sub_1BB872CC4();
}

void sub_1BA9C749C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E72507A8;
}

uint64_t sub_1BA9C74AC()
{
  sub_1BA9C7888();
  return sub_1BB872D60();
}

uint64_t sub_1BA9C7508()
{
  sub_1BA9C7888();
  return sub_1BB872D0C();
}

uint64_t _s8NewsFeed0B4KindO7optionsSay11TeaSettings6OptionVyACGGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1BA9C78CC(0, &qword_1EF2AC8B8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DB5820]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v12 - v3;
  v5 = 25;
  v14 = MEMORY[0x1E0DEE9D8];
  sub_1BAC7A5FC(0, 25, 0);
  v6 = &byte_1E72507C8;
  v7 = v14;
  do
  {
    v8 = *v6++;
    v13 = v8;
    sub_1BA9C6994((uint64_t)&v13);
    v14 = v7;
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_1BAC7A5FC(v9 > 1, v10 + 1, 1);
      v7 = v14;
    }
    *(_QWORD *)(v7 + 16) = v10 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v7+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v10, v4, v1);
    --v5;
  }
  while (v5);
  return v7;
}

unint64_t sub_1BA9C769C()
{
  unint64_t result;

  result = qword_1EF2AC898;
  if (!qword_1EF2AC898)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedKind, &type metadata for FeedKind);
    atomic_store(result, (unint64_t *)&qword_1EF2AC898);
  }
  return result;
}

unint64_t sub_1BA9C76E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AC8A0;
  if (!qword_1EF2AC8A0)
  {
    sub_1BA9C78CC(255, &qword_1EF2AC8A8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AC8A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1BA9C7818 + 4 * byte_1BB88D498[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1BA9C784C + 4 * byte_1BB88D493[v4]))();
}

uint64_t sub_1BA9C784C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9C7854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA9C785CLL);
  return result;
}

uint64_t sub_1BA9C7868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA9C7870);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1BA9C7874(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9C787C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1BA9C7888()
{
  unint64_t result;

  result = qword_1EF2AC8B0;
  if (!qword_1EF2AC8B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedKind, &type metadata for FeedKind);
    atomic_store(result, (unint64_t *)&qword_1EF2AC8B0);
  }
  return result;
}

void sub_1BA9C78CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for FeedKind);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t FormatBreakpointNode.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatBreakpointNode.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatBreakpointNode.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FormatBreakpointNode.line.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FormatBreakpointNode.column.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t FormatBreakpointNode.filePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatBreakpointNode.child.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t FormatBreakpointNode.__allocating_init(identifier:line:column:filePath:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;

  v14 = swift_allocObject();
  v17 = a7[1];
  v18 = *a7;
  v15 = *((_QWORD *)a7 + 4);
  swift_beginAccess();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  *(_QWORD *)(v14 + 48) = a5;
  *(_QWORD *)(v14 + 56) = a6;
  *(_OWORD *)(v14 + 64) = v18;
  *(_OWORD *)(v14 + 80) = v17;
  *(_QWORD *)(v14 + 96) = v15;
  return v14;
}

uint64_t FormatBreakpointNode.init(identifier:line:column:filePath:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  uint64_t v7;
  uint64_t v14;
  __int128 v16;
  __int128 v17;

  v16 = a7[1];
  v17 = *a7;
  v14 = *((_QWORD *)a7 + 4);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 48) = a5;
  *(_QWORD *)(v7 + 56) = a6;
  *(_OWORD *)(v7 + 64) = v17;
  *(_OWORD *)(v7 + 80) = v16;
  *(_QWORD *)(v7 + 96) = v14;
  return v7;
}

uint64_t FormatBreakpointNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatBreakpointNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA9C7C3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BAE75570(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BA9C7C64(_QWORD *a1)
{
  return FormatBreakpointNode.encode(to:)(a1);
}

uint64_t sub_1BA9C7C84(uint64_t *a1, uint64_t *a2)
{
  return _s8NewsFeed20FormatBreakpointNodeC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_1BA9C7C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v4 = *(_OWORD *)(a4 + 16);
  v6[0] = *(_OWORD *)a4;
  v6[1] = v4;
  v7 = *(_QWORD *)(a4 + 32);
  return sub_1BB47DFBC((uint64_t *)v6);
}

uint64_t FormatBreakpointNode.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_retain();
  FormatSourceMapNode.bind(binder:context:)(a1, a2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BA9C7D64(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA9C7E50(&qword_1EF2AC8C0, (uint64_t)&protocol conformance descriptor for FormatBreakpointNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FormatBreakpointNode()
{
  return objc_opt_self();
}

uint64_t sub_1BA9C7DB8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA9C7E50(&qword_1EF2AC8C8, (uint64_t)&protocol conformance descriptor for FormatBreakpointNode);
  a1[2] = sub_1BA9C7E50(&qword_1EF2AC8D0, (uint64_t)&protocol conformance descriptor for FormatBreakpointNode);
  result = sub_1BA9C7E50(&qword_1EF2AC8D8, (uint64_t)&protocol conformance descriptor for FormatBreakpointNode);
  a1[3] = result;
  return result;
}

uint64_t sub_1BA9C7E1C(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA9C7E50(&qword_1EF2AC8E0, (uint64_t)&protocol conformance descriptor for FormatBreakpointNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9C7E50(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatBreakpointNode();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA9C7E8C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_retain();
  FormatSourceMapNode.bind(binder:context:)(a1, a2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BA9C7F20(uint64_t a1)
{
  return sub_1BA9C7F94(a1);
}

uint64_t sub_1BA9C7F34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for FormatBreakpointNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatBreakpointNode.__allocating_init(identifier:line:column:filePath:child:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1BA9C7F94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = v2[2];
  if (!v3 || (v4 = v2[v3 + 3], swift_retain(), sub_1BAA736F8(v4), v6 = v5, result = swift_release(), (v6 & 1) == 0))
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1BB38ED0C(0, v2[2] + 1, 1, v2);
      v2 = (_QWORD *)result;
    }
    v9 = v2[2];
    v8 = v2[3];
    if (v9 >= v8 >> 1)
    {
      result = (uint64_t)sub_1BB38ED0C((_QWORD *)(v8 > 1), v9 + 1, 1, v2);
      v2 = (_QWORD *)result;
    }
    v2[2] = v9 + 1;
    v2[v9 + 4] = 0xC000000000000000;
    *(_QWORD *)(a1 + 48) = v2;
  }
  return result;
}

NewsFeed::FeedAdGroupAdjacency __swiftcall FeedAdGroupAdjacency.init(rawValue:)(NewsFeed::FeedAdGroupAdjacency rawValue)
{
  NewsFeed::FeedAdGroupAdjacency *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t FeedAdGroupAdjacency.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_1BA9C8088()
{
  unint64_t result;

  result = qword_1EF2AC9A8;
  if (!qword_1EF2AC9A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAdGroupAdjacency, &type metadata for FeedAdGroupAdjacency);
    atomic_store(result, (unint64_t *)&qword_1EF2AC9A8);
  }
  return result;
}

unint64_t sub_1BA9C80D0()
{
  unint64_t result;

  result = qword_1EF2AC9B0;
  if (!qword_1EF2AC9B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAdGroupAdjacency, &type metadata for FeedAdGroupAdjacency);
    atomic_store(result, (unint64_t *)&qword_1EF2AC9B0);
  }
  return result;
}

uint64_t dispatch thunk of FeedAdGroupDataProviding.allowAdjacentAd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FeedAdGroupDataProviding.adGroupKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FeedAdGroupDataProviding.tag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FeedAdGroupDataProviding.adKeywords.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1BA9C813C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  char v15;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 48);
  v7 = *(_BYTE *)(v1 + 49);
  v8 = 1 << ((2 * v7) | ((v6 & 8) != 0));
  if ((v8 & 0x3FE3) == 0)
  {
    if ((v8 & 0x18) != 0)
    {
      v9 = *(_QWORD *)(v1 + 32);
      v10 = *(_QWORD *)(v1 + 40);
      v11 = *(_QWORD *)(v1 + 24);
      v14[0] = *(_QWORD *)v1;
      v14[1] = v3;
      v14[2] = v5;
      v15 = 5;
      sub_1BA713CDC(v4, v3, v5, v11, v9, v10, v6, v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = sub_1BB6B84D4(v14, &v15);
      if (!v2)
      {
        v13 = v12;
        swift_bridgeObjectRelease();
        sub_1BB3D7F90(v4, v3, v13, 0);
      }
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else if ((v6 & 0xF0) == 0x30)
    {
      __asm { BR              X11 }
    }
  }
  return result;
}

uint64_t sub_1BA9C82A4(uint64_t a1)
{
  return sub_1BA9C813C(a1);
}

void sub_1BA9C82B8(uint64_t a1, uint64_t a2)
{
  FormatTextNodeBinding.bind(binder:context:)(a1, a2);
}

void _s8NewsFeed21FormatTextNodeBindingO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9C8340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  char v24;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v36 = v6;
  v35 = v12;
  v37 = v15;
  if ((2 * v40) | ((v15 & 8) != 0))
  {
    v18 = v14;
    v19 = v13;
    v20 = v16;
    v23 = v7;
    sub_1BA7143C8(v8, v7, v10, v11, a5, a6, v39);
    sub_1BA713CDC(v36, v19, v18, v20, v35, v9, v37, v40);
    sub_1BA6EF090(v8, v23, v10, v11, a5, a6, v39, v38);
    sub_1BA6EF090(v36, v19, v18, v20, v35, v9, v37, v40);
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(v17 - 144) = v8;
    *(_QWORD *)(v17 - 136) = v7;
    *(_QWORD *)(v17 - 128) = v10;
    *(_QWORD *)(v17 - 120) = v11;
    *(_QWORD *)(v17 - 112) = a5;
    *(_QWORD *)(v17 - 104) = a6;
    *(_BYTE *)(v17 - 96) = v39;
    v26 = v15;
    v28 = v12;
    v29 = v9;
    v34 = v9;
    v31 = v11;
    v32 = v7;
    sub_1BA713CDC(v6, v13, v14, v16, v28, v29, v26, v40);
    sub_1BA713CDC(v8, v32, v10, v31, a5, a6, v39, v38);
    sub_1BA713CDC(v8, v32, v10, v31, a5, a6, v39, v38);
    sub_1BA713CDC(v36, v13, v14, v16, v35, v34, v37, v40);
    _s8NewsFeed21FormatHeadlineBindingV4TextO2eeoiySbAE_AEtFZ_0(v17 - 144);
    v24 = v33;
    sub_1BA6EF090(v8, v32, v10, v31, a5, a6, v39, v38);
    sub_1BA6EF090(v36, v13, v14, v16, v35, v34, v37, v40);
    sub_1BA6EF090(v36, v13, v14, v16, v35, v34, v37, v40);
    sub_1BA6EF090(v8, v32, v10, v31, a5, a6, v39, v38);
  }
  return v24 & 1;
}

unint64_t sub_1BA9C9020(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9C9044();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9C9044()
{
  unint64_t result;

  result = qword_1EF2AC9B8;
  if (!qword_1EF2AC9B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeBinding, &type metadata for FormatTextNodeBinding);
    atomic_store(result, (unint64_t *)&qword_1EF2AC9B8);
  }
  return result;
}

unint64_t sub_1BA9C9088(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA646348();
  a1[2] = sub_1BA634D18();
  result = sub_1BA9C90BC();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA9C90BC()
{
  unint64_t result;

  result = qword_1EF2AC9C0;
  if (!qword_1EF2AC9C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeBinding, &type metadata for FormatTextNodeBinding);
    atomic_store(result, (unint64_t *)&qword_1EF2AC9C0);
  }
  return result;
}

uint64_t destroy for FormatTextNodeBinding(uint64_t a1)
{
  return sub_1BA6EF090(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), *(_BYTE *)(a1 + 49));
}

uint64_t initializeWithCopy for FormatTextNodeBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 49);
  v10 = *(_BYTE *)(a2 + 48);
  sub_1BA713CDC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v10, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 49) = v9;
  return a1;
}

uint64_t assignWithCopy for FormatTextNodeBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 49);
  v10 = *(_BYTE *)(a2 + 48);
  sub_1BA713CDC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v10, v9);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v17 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v10;
  v18 = *(_BYTE *)(a1 + 49);
  *(_BYTE *)(a1 + 49) = v9;
  sub_1BA6EF090(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FormatTextNodeBinding(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  char v12;

  v3 = *(_WORD *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 49);
  v12 = *(_BYTE *)(a1 + 48);
  *(_WORD *)(a1 + 48) = v3;
  sub_1BA6EF090(v4, v6, v5, v7, v8, v9, v12, v11);
  return a1;
}

uint64_t sub_1BA9C92C0(uint64_t a1)
{
  return (2 * (*(_BYTE *)(a1 + 49) & 0x7F)) | (*(unsigned __int8 *)(a1 + 48) >> 3) & 1u;
}

uint64_t sub_1BA9C92D4(uint64_t result)
{
  *(_BYTE *)(result + 48) &= ~8u;
  return result;
}

uint64_t sub_1BA9C92E4(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xF7 | (8 * (a2 & 1));
  *(_BYTE *)(result + 49) = a2 >> 1;
  return result;
}

ValueMetadata *type metadata accessor for FormatTextNodeBinding()
{
  return &type metadata for FormatTextNodeBinding;
}

double FormatRemoteFont.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for FormatRemoteFont() + 24));
}

uint64_t FormatRemoteFont.scaling.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for FormatRemoteFont();
  v4 = (uint64_t *)(v1 + *(int *)(result + 28));
  v5 = *v4;
  LOWORD(v4) = *((_WORD *)v4 + 4);
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = (_WORD)v4;
  return result;
}

uint64_t FormatRemoteFont.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatRemoteFont.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatRemoteFont();
  return sub_1BA4C2DD8(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
}

uint64_t FormatRemoteFont.size.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FormatRemoteFont();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*FormatRemoteFont.size.modify())()
{
  type metadata accessor for FormatRemoteFont();
  return nullsub_1;
}

uint64_t FormatRemoteFont.scaling.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 4);
  result = type metadata accessor for FormatRemoteFont();
  v5 = v1 + *(int *)(result + 28);
  *(_QWORD *)v5 = v2;
  *(_WORD *)(v5 + 8) = v3;
  return result;
}

uint64_t (*FormatRemoteFont.scaling.modify())()
{
  type metadata accessor for FormatRemoteFont();
  return nullsub_1;
}

uint64_t sub_1BA9C949C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatRemoteFont.init(from:)(a1, a2);
}

uint64_t sub_1BA9C94B0(_QWORD *a1)
{
  return FormatRemoteFont.encode(to:)(a1);
}

uint64_t sub_1BA9C94C4(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];

  v2 = v1;
  sub_1BA7DC9A0();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v26 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v26 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v26 - v14;
  sub_1BA4C2DD8(v2, (uint64_t)v26 - v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatRemoteFont);
  type metadata accessor for FormatFontResource(0);
  swift_storeEnumTagMultiPayload();
  v16 = type metadata accessor for FormatResource(0);
  swift_storeEnumTagMultiPayload();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BA7DC9A0);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v12, 1, v16) == 1)
    return sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BA7DC9A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA7DC9A0);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v6, 1, v16);
    if ((_DWORD)result != 1)
    {
      v20 = a1[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = sub_1BA6D25A4(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
        v20 = sub_1BA6D25A4(v21 > 1, v22 + 1, 1, v20);
      *(_QWORD *)(v20 + 16) = v22 + 1;
      sub_1BA9CA044((uint64_t)v6, v20+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v22);
      a1[1] = v20;
LABEL_15:
      sub_1BA4A2E80((uint64_t)v12, type metadata accessor for FormatResource);
      return sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BA7DC9A0);
    }
    __break(1u);
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BA7DC9A0);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v9, 1, v16);
    if ((_DWORD)result != 1)
    {
      v23 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_1BA6D25A4(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
        v23 = sub_1BA6D25A4(v24 > 1, v25 + 1, 1, v23);
      *(_QWORD *)(v23 + 16) = v25 + 1;
      sub_1BA9CA044((uint64_t)v9, v23+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v25);
      *a1 = v23;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA9C97D0(unint64_t *a1)
{
  return sub_1BA9C94C4(a1);
}

uint64_t _s8NewsFeed16FormatRemoteFontV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  int *v5;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if ((v4 || (sub_1BB874398() & 1) != 0)
    && (v5 = (int *)type metadata accessor for FormatRemoteFont(),
        (_s8NewsFeed9FormatURLO2eeoiySbAC_ACtFZ_0((uint64_t)a1 + v5[5], (uint64_t)a2 + v5[5]) & 1) != 0)
    && *(double *)((char *)a1 + v5[6]) == *(double *)((char *)a2 + v5[6]))
  {
    return sub_1BB80814C(*(_QWORD *)((char *)a1 + v5[7]), *(_WORD *)((char *)a1 + v5[7] + 8), *(_QWORD *)((char *)a2 + v5[7]), *(_WORD *)((char *)a2 + v5[7] + 8));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1BA9C9894(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA9C992C(&qword_1EF2AC9C8, (uint64_t)&protocol conformance descriptor for FormatRemoteFont);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9C98C8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA9C992C(&qword_1ED39CC40, (uint64_t)&protocol conformance descriptor for FormatRemoteFont);
  a1[2] = sub_1BA9C992C(&qword_1ED39B368, (uint64_t)&protocol conformance descriptor for FormatRemoteFont);
  result = sub_1BA9C992C(&qword_1EF2AC9D0, (uint64_t)&protocol conformance descriptor for FormatRemoteFont);
  a1[3] = result;
  return result;
}

uint64_t sub_1BA9C992C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatRemoteFont();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1BA9C996C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + *(int *)(type metadata accessor for FormatRemoteFont() + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1BA9C99A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for FormatRemoteFont();
  *(_QWORD *)(a2 + *(int *)(result + 24)) = v3;
  return result;
}

uint64_t sub_1BA9C99D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for FormatRemoteFont();
  v5 = (uint64_t *)(a1 + *(int *)(result + 28));
  v6 = *v5;
  LOWORD(v5) = *((_WORD *)v5 + 4);
  *(_QWORD *)a2 = v6;
  *(_WORD *)(a2 + 8) = (_WORD)v5;
  return result;
}

uint64_t sub_1BA9C9A18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_WORD *)a1 + 4);
  result = type metadata accessor for FormatRemoteFont();
  v6 = a2 + *(int *)(result + 28);
  *(_QWORD *)v6 = v3;
  *(_WORD *)(v6 + 8) = v4;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatRemoteFont(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    type metadata accessor for FormatURL();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *(_QWORD *)v10;
      v15 = *((_QWORD *)v10 + 1);
      v16 = *((_QWORD *)v10 + 2);
      v17 = v10[24];
      sub_1BA690C00(v14, v15, v16, v17);
      *(_QWORD *)v9 = v14;
      *((_QWORD *)v9 + 1) = v15;
      *((_QWORD *)v9 + 2) = v16;
      v9[24] = v17;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v12 = *((_QWORD *)v10 + 1);
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_QWORD *)v9 + 1) = v12;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        swift_bridgeObjectRetain();
      }
      else
      {
        v18 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v10, v18);
        v19 = type metadata accessor for FormatAbsoluteURL();
        *(_QWORD *)&v9[*(int *)(v19 + 20)] = *(_QWORD *)&v10[*(int *)(v19 + 20)];
      }
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v20 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  }
  return v4;
}

_QWORD *assignWithCopy for FormatRemoteFont(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_1BA4A2E80((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    type metadata accessor for FormatURL();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = *(_QWORD *)v8;
      v11 = *((_QWORD *)v8 + 1);
      v12 = *((_QWORD *)v8 + 2);
      v13 = v8[24];
      sub_1BA690C00(v10, v11, v12, v13);
      *(_QWORD *)v7 = v10;
      *((_QWORD *)v7 + 1) = v11;
      *((_QWORD *)v7 + 2) = v12;
      v7[24] = v13;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        swift_bridgeObjectRetain();
      }
      else
      {
        v14 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
        v15 = type metadata accessor for FormatAbsoluteURL();
        *(_QWORD *)&v7[*(int *)(v15 + 20)] = *(_QWORD *)&v8[*(int *)(v15 + 20)];
      }
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
  *(_QWORD *)v17 = v19;
  return a1;
}

_OWORD *initializeWithTake for FormatRemoteFont(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FormatURL();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_1BB86C67C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    v11 = type metadata accessor for FormatAbsoluteURL();
    *(_QWORD *)&v7[*(int *)(v11 + 20)] = *(_QWORD *)&v8[*(int *)(v11 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

_QWORD *assignWithTake for FormatRemoteFont(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1BA4A2E80((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    v10 = type metadata accessor for FormatURL();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = type metadata accessor for FormatAbsoluteURL();
      *(_QWORD *)&v8[*(int *)(v12 + 20)] = *(_QWORD *)&v9[*(int *)(v12 + 20)];
      swift_storeEnumTagMultiPayload();
    }
  }
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_WORD *)v14 + 4) = *((_WORD *)v15 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatRemoteFont()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9C9F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FormatURL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FormatRemoteFont()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9C9FD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FormatURL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BA9CA044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA9CA088()
{
  uint64_t v0;
  id v2;
  uint64_t v3;

  if ((*(_WORD *)(v0 + *(int *)(type metadata accessor for FormatRemoteFont() + 28) + 8) & 0xFF00) == 0xC00)
  {
    sub_1BA7425CC();
    return sub_1BB8736A8();
  }
  else
  {
    sub_1BA7425CC();
    v2 = sub_1BA74658C();
    v3 = sub_1BB873678();

    return v3;
  }
}

uint64_t sub_1BA9CA198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  v5 = v3;
  *(_QWORD *)(v4 + 368) = a2;
  *(_QWORD *)(v4 + 376) = v5;
  *(_QWORD *)(v4 + 360) = a1;
  *(_QWORD *)(v4 + 384) = swift_getObjectType();
  sub_1BA4A3FB4(0, (unint64_t *)&unk_1EF2ACAA8, (void (*)(uint64_t))type metadata accessor for PuzzleHistoryInfo);
  *(_QWORD *)(v4 + 392) = swift_task_alloc();
  *(_QWORD *)(v4 + 400) = swift_task_alloc();
  v7 = sub_1BB86C8B0();
  *(_QWORD *)(v4 + 408) = v7;
  *(_QWORD *)(v4 + 416) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 424) = swift_task_alloc();
  *(_QWORD *)(v4 + 432) = type metadata accessor for PuzzleResource();
  *(_QWORD *)(v4 + 440) = swift_task_alloc();
  *(_QWORD *)(v4 + 448) = swift_task_alloc();
  *(_QWORD *)(v4 + 456) = swift_task_alloc();
  v8 = sub_1BB86C67C();
  v9 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  *(_QWORD *)(v4 + 464) = v8;
  *(_QWORD *)(v4 + 472) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 480) = swift_task_alloc();
  *(_QWORD *)(v4 + 488) = swift_task_alloc();
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, v9);
  *(_QWORD *)(v4 + 496) = swift_task_alloc();
  *(_QWORD *)(v4 + 504) = swift_task_alloc();
  *(_QWORD *)(v4 + 512) = type metadata accessor for PuzzleResourceSource();
  *(_QWORD *)(v4 + 520) = swift_task_alloc();
  *(_OWORD *)(v4 + 528) = *(_OWORD *)a3;
  *(_BYTE *)(v4 + 209) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_1BA9CA348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v42;

  sub_1BA4C2DD8(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
  if (qword_1EF2A73A0 != -1)
    swift_once();
  if ((sub_1BB86D258() & 1) != 0)
  {
    if (qword_1EF2A7390 != -1)
      swift_once();
    sub_1BA9CFFE8();
    sub_1BB86D210();
    if (qword_1EF2A7398 != -1)
      swift_once();
    v1 = *(_QWORD *)(v0 + 496);
    v3 = *(_QWORD *)(v0 + 464);
    v2 = *(_QWORD *)(v0 + 472);
    sub_1BB86D210();
    v4 = (unint64_t)PuzzleResourceSource.identifier.getter();
    v6 = v5;
    sub_1BB86C634();
    swift_bridgeObjectRelease();
    sub_1BB86C634();
    swift_bridgeObjectRelease();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
    v8 = *(_QWORD *)(v0 + 496);
    if (v7 == 1)
    {
      swift_bridgeObjectRelease();
      sub_1BA502AD0(v8, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
LABEL_29:
      v39 = *(_QWORD *)(v0 + 520);
      v40 = *(_QWORD *)(v0 + 504);
      sub_1BA9D002C();
      swift_allocError();
      swift_willThrow();
      sub_1BA502AD0(v40, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      sub_1BA4A2E80(v39, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v9 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 472) + 32);
    v9(*(char **)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 464));
    v10 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v10 = v4 & 0xFFFFFFFFFFFFLL;
    if (!v10)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 464));
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    v11 = *(unint64_t **)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 504);
    v13 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 464);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
    sub_1BA976B30();
    v16 = (char *)v11 + *(int *)(v15 + 48);
    v17 = (uint64_t)v11 + *(int *)(v15 + 64);
    *v11 = v4;
    v11[1] = v6;
    v9(v16, v13, v14);
    sub_1BA5D5518(v12, v17, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    swift_storeEnumTagMultiPayload();
  }
  *(CFTimeInterval *)(v0 + 544) = CACurrentMediaTime();
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  v20 = sub_1BB86EFEC();
  *(_QWORD *)(v0 + 552) = __swift_project_value_buffer(v20, (uint64_t)qword_1ED476918);
  sub_1BA6EA1F0(v19, v18);
  sub_1BA6EA1F0(v19, v18);
  v21 = sub_1BB86EFC8();
  v22 = sub_1BB87330C();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v0 + 536);
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v42 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = 0xD000000000000013;
    v27 = 0x80000001BB966870;
    if (!v23)
    {
      v26 = 0xD000000000000011;
      v27 = 0x80000001BB966890;
    }
    if (v23 == 1)
      v28 = 7104878;
    else
      v28 = v26;
    if (v23 == 1)
      v29 = 0xE300000000000000;
    else
      v29 = v27;
    v30 = *(_QWORD *)(v0 + 536);
    v31 = *(_QWORD *)(v0 + 528);
    *(_QWORD *)(v0 + 336) = sub_1BA5D2E14(v28, v29, &v42);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    sub_1BA6E3730(v31, v30);
    sub_1BA6E3730(v31, v30);
    _os_log_impl(&dword_1BA493000, v21, v22, "PuzzleDataManager start fetching resources with puzzleLaunchAction=%s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v25, -1, -1);
    MEMORY[0x1BCCE5C38](v24, -1, -1);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 536);
    v33 = *(_QWORD *)(v0 + 528);
    sub_1BA6E3730(v33, v32);
    sub_1BA6E3730(v33, v32);
  }

  v34 = (_QWORD *)(*(_QWORD *)(v0 + 376) + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleService);
  v35 = v34[3];
  v36 = v34[4];
  __swift_project_boxed_opaque_existential_1(v34, v35);
  v41 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v36 + 24) + *(_QWORD *)(v36 + 24));
  v37 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v37;
  *v37 = v0;
  v37[1] = sub_1BA9CA930;
  return v41(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 520), v35, v36);
}

uint64_t sub_1BA9CA930()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA9CA994()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t ObjectType;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  _OWORD v57[4];
  uint64_t v58;
  char v59;

  v2 = *(_QWORD *)(v0 + 448);
  v1 = *(uint64_t **)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle;
  *(_QWORD *)(v0 + 576) = OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle;
  *(_QWORD *)(v3 + v5) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_1BA4C2DD8((uint64_t)v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
  v6 = sub_1BB86EFC8();
  v7 = sub_1BB87330C();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(double *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 448);
    v10 = swift_slowAlloc();
    v54 = swift_slowAlloc();
    *(_QWORD *)&v57[0] = v54;
    *(_DWORD *)v10 = 136315394;
    v11 = PuzzleResource.description.getter();
    *(_QWORD *)(v0 + 320) = sub_1BA5D2E14(v11, v12, (uint64_t *)v57);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    sub_1BA4A2E80(v9, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
    *(_WORD *)(v10 + 12) = 2048;
    *(CFTimeInterval *)(v0 + 328) = (CACurrentMediaTime() - v8) * 1000.0;
    sub_1BB873A8C();
    _os_log_impl(&dword_1BA493000, v6, v7, "PuzzleDataManager Fetched puzzle resource: %s duration=%f", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v54, -1, -1);
    MEMORY[0x1BCCE5C38](v10, -1, -1);
  }
  else
  {
    sub_1BA4A2E80(*(_QWORD *)(v0 + 448), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
  }

  v13 = *(void **)(v3 + v5);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 424);
    v55 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 376);
    v17 = objc_msgSend(v13, sel_puzzleType);
    *(_QWORD *)(v0 + 584) = v17;
    v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 24);
    v19 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService), v18);
    v20 = objc_msgSend(v17, sel_identifier);
    v21 = sub_1BB8729A0();
    v23 = v22;

    sub_1BB86C7D8();
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v23, v14, v18, v19);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v55);
    *(_QWORD *)(v0 + 592) = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRelease();
    v25 = OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleStatsService;
    *(_QWORD *)(v0 + 600) = OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleStatsService;
    v26 = *(_QWORD *)(v16 + v25 + 24);
    v27 = *(_QWORD *)(v16 + v25 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v16 + v25), v26);
    v56 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v27 + 8) + *(_QWORD *)(v27 + 8));
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 608) = v28;
    *v28 = v0;
    v28[1] = sub_1BA9CB080;
    v29 = v26;
    v30 = v27;
    return v56(v29, v30);
  }
  *(_BYTE *)(v0 + 210) = 0;
  *(_QWORD *)(v0 + 632) = 0;
  v32 = sub_1BB86EFC8();
  v33 = sub_1BB87330C();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_QWORD *)&v57[0] = v35;
    *(_DWORD *)v34 = 136315394;
    v36 = *(double *)(v0 + 544);
    *(_QWORD *)(v0 + 352) = sub_1BA5D2E14(7104878, 0xE300000000000000, (uint64_t *)v57);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2048;
    *(CFTimeInterval *)(v0 + 312) = (CACurrentMediaTime() - v36) * 1000.0;
    sub_1BB873A8C();
    _os_log_impl(&dword_1BA493000, v32, v33, "PuzzleDataManager Fetched puzzle statistics: %s duration=%f", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v35, -1, -1);
    MEMORY[0x1BCCE5C38](v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v37 = *(_QWORD *)(v0 + 576);
  v38 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  v39 = *(_QWORD *)(v38 + v37);
  *(_QWORD *)(v0 + 640) = v39;
  if (!v39)
  {
    *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 568);
    v42 = sub_1BB86EFC8();
    v43 = sub_1BB87330C();
    if (os_log_type_enabled(v42, (os_log_type_t)v43))
    {
      v44 = *(double *)(v0 + 544);
      v45 = swift_slowAlloc();
      v46 = swift_slowAlloc();
      *(_QWORD *)&v57[0] = v46;
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)(v0 + 344) = sub_1BA5D2E14(7104878, 0xE300000000000000, (uint64_t *)v57);
      sub_1BB873A8C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v45 + 12) = 2048;
      *(CFTimeInterval *)(v0 + 264) = (CACurrentMediaTime() - v44) * 1000.0;
      sub_1BB873A8C();
      _os_log_impl(&dword_1BA493000, v42, (os_log_type_t)v43, "PuzzleDataManager Fetched puzzle small thumbnail url: %s duration=%f", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCE5C38](v46, -1, -1);
      MEMORY[0x1BCCE5C38](v45, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v47 = *(_QWORD *)(v0 + 400);
    v48 = *(_QWORD *)(v0 + 376);
    sub_1BA9CCD64(v48, (uint64_t)v57);
    v49 = v57[1];
    *(_OWORD *)(v0 + 688) = v57[0];
    *(_OWORD *)(v0 + 704) = v49;
    v50 = v57[3];
    *(_OWORD *)(v0 + 720) = v57[2];
    *(_OWORD *)(v0 + 736) = v50;
    *(_QWORD *)(v0 + 752) = v58;
    *(_BYTE *)(v0 + 211) = v59;
    sub_1BA9CD088(v48, v47);
    v51 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleGameCenterService + 8);
    ObjectType = swift_getObjectType();
    v56 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v51 + 32) + *(_QWORD *)(v51 + 32));
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 760) = v53;
    *v53 = v0;
    v53[1] = sub_1BA9CB94C;
    v29 = ObjectType;
    v30 = v51;
    return v56(v29, v30);
  }
  v40 = *(_BYTE *)(v0 + 209);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 528);
  *(_BYTE *)(v0 + 208) = v40;
  swift_unknownObjectRetain();
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 648) = v41;
  *v41 = v0;
  v41[1] = sub_1BA9CB648;
  return sub_1BA9CC694(v39, *(_QWORD *)(v0 + 456), v0 + 192);
}

uint64_t sub_1BA9CB080()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA9CB0D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)(v0[47] + v0[75]);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v0[77] = v4;
  *v4 = v0;
  v4[1] = sub_1BA9CB15C;
  return v6(v0[73], v2, v3);
}

uint64_t sub_1BA9CB15C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 624) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA9CB1B8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  NSObject *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t ObjectType;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  _OWORD v31[4];
  uint64_t v32;
  char v33;

  v1 = *(_QWORD *)(v0 + 624);
  swift_unknownObjectRelease();
  *(_BYTE *)(v0 + 210) = *(_QWORD *)(v0 + 592) != 0;
  *(_QWORD *)(v0 + 632) = v1;
  swift_bridgeObjectRetain_n();
  v2 = sub_1BB86EFC8();
  v3 = sub_1BB87330C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_QWORD *)&v31[0] = v5;
    *(_DWORD *)v4 = 136315394;
    if (v1)
    {
      v6 = type metadata accessor for PuzzleStatistic();
      v7 = swift_bridgeObjectRetain();
      v8 = MEMORY[0x1BCCE376C](v7, v6);
      v10 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = 7104878;
      v10 = 0xE300000000000000;
    }
    v11 = *(double *)(v0 + 544);
    *(_QWORD *)(v0 + 352) = sub_1BA5D2E14(v8, v10, (uint64_t *)v31);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2048;
    *(CFTimeInterval *)(v0 + 312) = (CACurrentMediaTime() - v11) * 1000.0;
    sub_1BB873A8C();
    _os_log_impl(&dword_1BA493000, v2, v3, "PuzzleDataManager Fetched puzzle statistics: %s duration=%f", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v5, -1, -1);
    MEMORY[0x1BCCE5C38](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v12 = *(_QWORD *)(v0 + 576);
  v13 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  v14 = *(_QWORD *)(v13 + v12);
  *(_QWORD *)(v0 + 640) = v14;
  if (v14)
  {
    v15 = *(_BYTE *)(v0 + 209);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 528);
    *(_BYTE *)(v0 + 208) = v15;
    swift_unknownObjectRetain();
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 648) = v16;
    *v16 = v0;
    v16[1] = sub_1BA9CB648;
    return sub_1BA9CC694(v14, *(_QWORD *)(v0 + 456), v0 + 192);
  }
  else
  {
    *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 568);
    v18 = sub_1BB86EFC8();
    v19 = sub_1BB87330C();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v20 = *(double *)(v0 + 544);
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      *(_QWORD *)&v31[0] = v22;
      *(_DWORD *)v21 = 136315394;
      *(_QWORD *)(v0 + 344) = sub_1BA5D2E14(7104878, 0xE300000000000000, (uint64_t *)v31);
      sub_1BB873A8C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2048;
      *(CFTimeInterval *)(v0 + 264) = (CACurrentMediaTime() - v20) * 1000.0;
      sub_1BB873A8C();
      _os_log_impl(&dword_1BA493000, v18, (os_log_type_t)v19, "PuzzleDataManager Fetched puzzle small thumbnail url: %s duration=%f", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCE5C38](v22, -1, -1);
      MEMORY[0x1BCCE5C38](v21, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v23 = *(_QWORD *)(v0 + 400);
    v24 = *(_QWORD *)(v0 + 376);
    sub_1BA9CCD64(v24, (uint64_t)v31);
    v25 = v31[1];
    *(_OWORD *)(v0 + 688) = v31[0];
    *(_OWORD *)(v0 + 704) = v25;
    v26 = v31[3];
    *(_OWORD *)(v0 + 720) = v31[2];
    *(_OWORD *)(v0 + 736) = v26;
    *(_QWORD *)(v0 + 752) = v32;
    *(_BYTE *)(v0 + 211) = v33;
    sub_1BA9CD088(v24, v23);
    v27 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleGameCenterService + 8);
    ObjectType = swift_getObjectType();
    v30 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v27 + 32) + *(_QWORD *)(v27 + 32));
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 760) = v29;
    *v29 = v0;
    v29[1] = sub_1BA9CB94C;
    return v30(ObjectType, v27);
  }
}

uint64_t sub_1BA9CB648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 656) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 664) = a2;
    *(_QWORD *)(v6 + 672) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1BA9CB6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t);
  _OWORD v21[4];
  uint64_t v22;
  char v23;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 216) = v1;
  *(_QWORD *)(v0 + 224) = v2;
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 656);
  swift_bridgeObjectRetain_n();
  v5 = sub_1BB86EFC8();
  v6 = sub_1BB87330C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(double *)(v0 + 544);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_QWORD *)&v21[0] = v9;
    *(_DWORD *)v8 = 136315394;
    if (v4)
      v10 = v3;
    else
      v10 = 7104878;
    if (v4)
      v11 = v4;
    else
      v11 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 344) = sub_1BA5D2E14(v10, v11, (uint64_t *)v21);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2048;
    *(CFTimeInterval *)(v0 + 264) = (CACurrentMediaTime() - v7) * 1000.0;
    sub_1BB873A8C();
    _os_log_impl(&dword_1BA493000, v5, v6, "PuzzleDataManager Fetched puzzle small thumbnail url: %s duration=%f", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v9, -1, -1);
    MEMORY[0x1BCCE5C38](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 376);
  sub_1BA9CCD64(v13, (uint64_t)v21);
  v14 = v21[1];
  *(_OWORD *)(v0 + 688) = v21[0];
  *(_OWORD *)(v0 + 704) = v14;
  v15 = v21[3];
  *(_OWORD *)(v0 + 720) = v21[2];
  *(_OWORD *)(v0 + 736) = v15;
  *(_QWORD *)(v0 + 752) = v22;
  *(_BYTE *)(v0 + 211) = v23;
  sub_1BA9CD088(v13, v12);
  v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleGameCenterService + 8);
  ObjectType = swift_getObjectType();
  v20 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v16 + 32) + *(_QWORD *)(v16 + 32));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 760) = v18;
  *v18 = v0;
  v18[1] = sub_1BA9CB94C;
  return v20(ObjectType, v16);
}

uint64_t sub_1BA9CB94C(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 212) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA9CB9A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  unint64_t v4;
  char v5;
  char v6;
  id v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  NSObject *v43;
  os_log_type_t v44;
  double v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  unsigned __int8 v77;
  char v78;
  unsigned __int8 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[9];
  char v85;
  _QWORD v86[2];
  char v87;

  v1 = *(_QWORD *)(v0 + 376);
  sub_1BA4C2DD8(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 440), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
  v2 = (char *)objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_bundleSubscriptionManager), sel_cachedSubscription);
  if (objc_getAssociatedObject(v2, v2 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
  }
  sub_1BA78DE64(v0 + 80, v0 + 48);
  if (!*(_QWORD *)(v0 + 72))
  {
    sub_1BA6EDA74(v0 + 48);
    goto LABEL_9;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v3 = 0;
    v4 = 0;
    goto LABEL_10;
  }
  v3 = *(void **)(v0 + 304);
  v4 = (unint64_t)objc_msgSend(v3, sel_integerValue);
  if (v4 == -1)
  {

    v63 = 21;
    v5 = -1;
    goto LABEL_19;
  }
LABEL_10:
  v6 = v4;
  if (objc_getAssociatedObject(v2, (const void *)~v4))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
  }
  sub_1BA78DE64(v0 + 112, v0 + 16);
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_1BA6EDA74(v0 + 16);
    goto LABEL_17;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:

    v9 = 21;
    goto LABEL_18;
  }
  v7 = *(id *)(v0 + 272);
  v8 = objc_msgSend(v7, sel_integerValue);

  v9 = v8 + 21;
LABEL_18:
  v63 = v9;
  v5 = v6;
LABEL_19:
  v78 = *(_BYTE *)(v0 + 211);
  v81 = *(_QWORD *)(v0 + 744);
  v10 = *(_QWORD *)(v0 + 736);
  v11 = *(_QWORD *)(v0 + 728);
  v12 = *(_QWORD *)(v0 + 720);
  v13 = *(_QWORD *)(v0 + 712);
  v14 = *(_QWORD *)(v0 + 704);
  v15 = *(_QWORD *)(v0 + 696);
  v16 = *(_QWORD *)(v0 + 688);
  v74 = *(_QWORD *)(v0 + 536);
  v76 = *(_QWORD *)(v0 + 752);
  v73 = *(_QWORD *)(v0 + 528);
  v17 = *(_QWORD *)(v0 + 376);
  v65 = v5 + 1;
  v18 = **(void ***)(v0 + 456);
  v69 = *(_BYTE *)(v0 + 209);
  v19 = (void *)swift_unknownObjectRetain();
  v80 = sub_1BA9CD2E8(v19);
  swift_unknownObjectRelease();
  v84[0] = v16;
  v84[1] = v15;
  v84[2] = v14;
  v84[3] = v13;
  v84[4] = v12;
  v84[5] = v11;
  v84[6] = v10;
  v84[7] = v81;
  v84[8] = v76;
  v85 = v78;
  v86[0] = v73;
  v86[1] = v74;
  v87 = v69;
  v20 = *(void **)(v17 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleTypeSettings);
  sub_1BA6EA1F0(v73, v74);
  sub_1BA9CFF54(v16, v15, v14, v13, v12, v11, v10, v81, v76);
  v21 = objc_msgSend(objc_msgSend(v18, sel_puzzleType), sel_identifier);
  swift_unknownObjectRelease();
  if (!v21)
  {
    sub_1BB8729A0();
    v21 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  v22 = objc_msgSend(v20, sel_settingsDataForPuzzleTypeID_, v21);

  if (v22)
  {
    v23 = sub_1BB86C6E8();
    v71 = v24;
    v72 = v23;

  }
  else
  {
    v71 = 0xF000000000000000;
    v72 = 0;
  }
  v79 = *(_BYTE *)(v0 + 212);
  v82 = *(_QWORD *)(v0 + 680);
  v77 = *(_BYTE *)(v0 + 210);
  v25 = *(_QWORD *)(v0 + 632);
  v75 = *(void ***)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 392);
  v26 = *(_QWORD *)(v0 + 400);
  sub_1BA9CD564();
  v29 = v28;
  v31 = v30;
  type metadata accessor for PuzzleStatsInfo();
  swift_allocObject();
  v32 = PuzzleStatsInfo.init(statistics:)(v25);
  sub_1BA9CFF94(v26, v27);
  swift_beginAccess();
  v34 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 224);
  v35 = sub_1BA9CD9FC();
  v37 = v36;
  type metadata accessor for PuzzleDatastore();
  swift_allocObject();
  v38 = sub_1BAFA1DB0(v75, (v65 ^ v63) & 1, v80 & 1, (uint64_t)v84, (uint64_t)v86, v72, v71, v29, v31, v32, v27, v77, v79, v34, v33, v35, v37);
  if (v82)
  {
    v39 = *(_QWORD *)(v0 + 520);
    v40 = *(_QWORD *)(v0 + 456);
    v41 = *(_QWORD *)(v0 + 400);
    sub_1BA92CCAC(*(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752));
    sub_1BA502AD0(v41, (unint64_t *)&unk_1EF2ACAA8, (void (*)(uint64_t))type metadata accessor for PuzzleHistoryInfo);
    sub_1BA4A2E80(v40, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
    sub_1BA4A2E80(v39, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v42 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v83 = v38;
    v43 = sub_1BB86EFC8();
    v44 = sub_1BB87330C();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = *(double *)(v0 + 544);
      v46 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v46 = 134217984;
      *(CFTimeInterval *)(v0 + 288) = (CACurrentMediaTime() - v45) * 1000.0;
      sub_1BB873A8C();
      _os_log_impl(&dword_1BA493000, v43, v44, "PuzzleDataManager finished assembling puzzle data duration=%f", v46, 0xCu);
      MEMORY[0x1BCCE5C38](v46, -1, -1);
    }
    v47 = *(_QWORD *)(v0 + 752);
    v60 = *(_QWORD *)(v0 + 728);
    v61 = *(_QWORD *)(v0 + 736);
    v59 = *(_QWORD *)(v0 + 720);
    v48 = *(_QWORD *)(v0 + 712);
    v49 = *(_QWORD *)(v0 + 704);
    v50 = *(_QWORD *)(v0 + 696);
    v51 = *(_QWORD *)(v0 + 688);
    v64 = *(_QWORD *)(v0 + 744);
    v66 = *(_QWORD *)(v0 + 520);
    v67 = *(_QWORD *)(v0 + 472);
    v68 = *(_QWORD *)(v0 + 464);
    v70 = *(_QWORD *)(v0 + 480);
    v52 = v43;
    v53 = *(char **)(v0 + 456);
    v62 = *(_QWORD *)(v0 + 432);
    v54 = *(_QWORD *)(v0 + 400);
    v55 = *(char **)(v0 + 360);

    sub_1BA92CCAC(v51, v50, v49, v48, v59, v60, v61, v64, v47);
    sub_1BA502AD0(v54, (unint64_t *)&unk_1EF2ACAA8, (void (*)(uint64_t))type metadata accessor for PuzzleHistoryInfo);
    sub_1BA4A2E80(v66, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
    v56 = *(_QWORD *)v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v70, &v53[*(int *)(v62 + 20)], v68);
    swift_unknownObjectRetain();
    sub_1BA4A2E80((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResource);
    *(_QWORD *)v55 = v56;
    v57 = type metadata accessor for PuzzleData();
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(&v55[*(int *)(v57 + 20)], v70, v68);
    *(_QWORD *)&v55[*(int *)(v57 + 24)] = v83;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v42 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v42();
}

uint64_t sub_1BA9CC200()
{
  uint64_t v0;

  sub_1BA4A2E80(*(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BA9CC2D4()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t ObjectType;
  _QWORD *v25;
  uint64_t (*v27)(uint64_t, uint64_t);
  _OWORD v28[4];
  uint64_t v29;
  char v30;

  v1 = (_QWORD *)(v0 + 216);
  v2 = *(void **)(v0 + 656);
  swift_unknownObjectRelease();
  v3 = v2;
  v4 = v2;
  v5 = sub_1BB86EFC8();
  v6 = sub_1BB8732F4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 656);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_QWORD *)&v28[0] = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue();
    v10 = sub_1BB87456C();
    *(_QWORD *)(v0 + 296) = sub_1BA5D2E14(v10, v11, (uint64_t *)v28);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BA493000, v5, v6, "PuzzleDataManager Failed to obtain thumbnail small url with error: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v9, -1, -1);
    MEMORY[0x1BCCE5C38](v8, -1, -1);

    v12 = v7;
    v1 = (_QWORD *)(v0 + 216);

  }
  else
  {
    v13 = *(void **)(v0 + 656);

  }
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)(v0 + 680) = 0;
  v14 = sub_1BB86EFC8();
  v15 = sub_1BB87330C();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = *(double *)(v0 + 544);
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    *(_QWORD *)&v28[0] = v18;
    *(_DWORD *)v17 = 136315394;
    *(_QWORD *)(v0 + 344) = sub_1BA5D2E14(7104878, 0xE300000000000000, (uint64_t *)v28);
    sub_1BB873A8C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2048;
    *(CFTimeInterval *)(v0 + 264) = (CACurrentMediaTime() - v16) * 1000.0;
    sub_1BB873A8C();
    _os_log_impl(&dword_1BA493000, v14, v15, "PuzzleDataManager Fetched puzzle small thumbnail url: %s duration=%f", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v18, -1, -1);
    MEMORY[0x1BCCE5C38](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v19 = *(_QWORD *)(v0 + 400);
  v20 = *(_QWORD *)(v0 + 376);
  sub_1BA9CCD64(v20, (uint64_t)v28);
  v21 = v28[1];
  *(_OWORD *)(v0 + 688) = v28[0];
  *(_OWORD *)(v0 + 704) = v21;
  v22 = v28[3];
  *(_OWORD *)(v0 + 720) = v28[2];
  *(_OWORD *)(v0 + 736) = v22;
  *(_QWORD *)(v0 + 752) = v29;
  *(_BYTE *)(v0 + 211) = v30;
  sub_1BA9CD088(v20, v19);
  v23 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleGameCenterService + 8);
  ObjectType = swift_getObjectType();
  v27 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v23 + 32) + *(_QWORD *)(v23 + 32));
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 760) = v25;
  *v25 = v0;
  v25[1] = sub_1BA9CB94C;
  return v27(ObjectType, v23);
}

uint64_t sub_1BA9CC694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a2;
  v4[6] = v3;
  v4[4] = a1;
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v4[7] = swift_task_alloc();
  v6 = sub_1BB86C67C();
  v4[8] = v6;
  v4[9] = *(_QWORD *)(v6 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v7 = swift_task_alloc();
  v8 = *(_QWORD *)(a3 + 8);
  v4[12] = v7;
  v4[13] = v8;
  return swift_task_switch();
}

uint64_t sub_1BA9CC780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v23;
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  void *v28;
  unsigned int v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;

  sub_1BA9CF35C(*(void **)(v0 + 32));
  if (!v1)
    goto LABEL_4;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  sub_1BB86C634();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1BA502AD0(*(_QWORD *)(v0 + 56), (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
LABEL_4:
    if (*(_QWORD *)(v0 + 104) < 2uLL)
    {
      v5 = (_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleService);
      v6 = v5[3];
      v7 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v6);
      v8 = *(int **)(v7 + 144);
      v9 = *v8;
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v10;
      *v10 = v0;
      v10[1] = sub_1BA9CCC80;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))((char *)v8 + v9))(*(_QWORD *)(v0 + 32), v6, v7);
    }
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v12 = sub_1BB86EFEC();
    __swift_project_value_buffer(v12, (uint64_t)qword_1ED476918);
    v13 = sub_1BB86EFC8();
    v14 = sub_1BB87330C();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1BA493000, v13, v14, "PuzzleDataManager Skipping fetch thumbnailSmallUrl as cached data not available in fullScreen modal launchMode", v15, 2u);
      MEMORY[0x1BCCE5C38](v15, -1, -1);
    }

    v16 = 0;
    v17 = 0;
    goto LABEL_16;
  }
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v19 + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56), v20);
  v16 = sub_1BB86C568();
  v17 = v21;
  type metadata accessor for PuzzleResource();
  sub_1BB86C5D4();
  sub_1BB86C5BC();
  v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v22(v18, v20);
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_defaultManager);
  sub_1BB86C610();
  v25 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_fileExistsAtPath_, v25);

  if (v26)
  {
    v27 = objc_msgSend(v23, sel_defaultManager);
    v28 = (void *)sub_1BB86C58C();
    *(_QWORD *)(v0 + 24) = 0;
    v29 = objc_msgSend(v27, sel_removeItemAtURL_error_, v28, v0 + 24);

    v30 = *(void **)(v0 + 24);
    if (!v29)
    {
      v45 = *(_QWORD *)(v0 + 88);
      v44 = *(_QWORD *)(v0 + 96);
      v46 = *(_QWORD *)(v0 + 64);
      v47 = v30;
      swift_bridgeObjectRelease();
      sub_1BB86C484();

      swift_willThrow();
      v22(v45, v46);
      v42 = v44;
      v43 = v46;
      goto LABEL_19;
    }
    v31 = v30;
  }
  v32 = objc_msgSend(v23, sel_defaultManager);
  v33 = (void *)sub_1BB86C58C();
  v34 = (void *)sub_1BB86C58C();
  *(_QWORD *)(v0 + 16) = 0;
  v35 = objc_msgSend(v32, sel_copyItemAtURL_toURL_error_, v33, v34, v0 + 16);

  v36 = *(void **)(v0 + 16);
  v38 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 64);
  if (v35)
  {
    v40 = v36;
    v22(v38, v39);
    v22(v37, v39);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v16, v17);
  }
  v41 = v36;
  swift_bridgeObjectRelease();
  sub_1BB86C484();

  swift_willThrow();
  v22(v38, v39);
  v42 = v37;
  v43 = v39;
LABEL_19:
  v22(v42, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BA9CCC80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

void sub_1BA9CCD64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;

  v4 = sub_1BB86C8B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, v8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v35 - v10;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService), *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 24));
  v13 = PuzzleResourceSource.identifier.getter();
  v14 = (void *)(*(uint64_t (**)(id))(*(_QWORD *)(v12 + 8) + 48))(v13);
  swift_bridgeObjectRelease();
  if (!v14)
  {
    v17 = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v18 = 1;
    goto LABEL_21;
  }
  v38 = objc_msgSend(v14, sel_progressLevel);
  v15 = objc_msgSend(v14, sel_score);
  v16 = v15;
  if (v15)
  {
    v37 = objc_msgSend(v15, sel_integerValue);

  }
  else
  {
    v37 = 0;
  }
  v19 = objc_msgSend(v14, sel_rankID);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1BB8729A0();
    v35 = v22;
    v36 = v21;

  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  v23 = objc_msgSend(v14, sel_usedReveal, v35, v36);
  if (v23)
  {
    v24 = v23;
    v17 = objc_msgSend(v23, sel_BOOLValue);

  }
  else
  {
    v17 = 0;
  }
  v25 = objc_msgSend(v14, sel_playDuration);
  v26 = objc_msgSend(v14, sel_completedDate);
  if (v26)
  {
    v27 = v26;
    sub_1BB86C874();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
    v28 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) != 1)
      goto LABEL_17;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
  }
  v28 = 0;
LABEL_17:
  sub_1BA502AD0((uint64_t)v11, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v29 = objc_msgSend(v14, sel_progressData);
  if (v29)
  {
    v30 = v29;
    v31 = sub_1BB86C6E8();
    v33 = v32;

  }
  else
  {

    v31 = 0;
    v33 = 0xF000000000000000;
  }
  *(_QWORD *)a2 = v38;
  *(_QWORD *)(a2 + 8) = v25;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v31;
  v34 = v37;
  *(_QWORD *)(a2 + 32) = v33;
  *(_QWORD *)(a2 + 40) = v34;
  *(_QWORD *)(a2 + 48) = v16 == 0;
  *(_QWORD *)(a2 + 56) = v36;
  v18 = v35;
LABEL_21:
  *(_QWORD *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v17;
}

uint64_t sub_1BA9CD088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - v5;
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService), *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 24));
  v8 = PuzzleResourceSource.identifier.getter();
  v9 = (void *)(*(uint64_t (**)(id))(*(_QWORD *)(v7 + 8) + 48))(v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = objc_msgSend(v9, sel_firstCompletedDate);
    if (v10)
    {
      v11 = v10;
      sub_1BB86C874();

      v12 = sub_1BB86C8B0();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 0, 1, v12);
    }
    else
    {
      v15 = sub_1BB86C8B0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
    }
    v16 = objc_msgSend(v9, sel_firstPlayDuration);
    v17 = v16;
    if (v16)
    {
      v18 = objc_msgSend(v16, sel_integerValue);

    }
    else
    {
      v18 = 0;
    }
    v19 = objc_msgSend(v9, sel_bestScore);
    v20 = v19;
    if (v19)
    {
      v21 = objc_msgSend(v19, sel_integerValue);

    }
    else
    {
      v21 = 0;
    }

    sub_1BA5D5518((uint64_t)v6, a2, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v22 = type metadata accessor for PuzzleHistoryInfo();
    v23 = a2 + *(int *)(v22 + 20);
    *(_QWORD *)v23 = v18;
    *(_BYTE *)(v23 + 8) = v17 == 0;
    v24 = a2 + *(int *)(v22 + 24);
    *(_QWORD *)v24 = v21;
    *(_BYTE *)(v24 + 8) = v20 == 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 0, 1, v22);
  }
  else
  {
    v13 = type metadata accessor for PuzzleHistoryInfo();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
}

uint64_t sub_1BA9CD2E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  void *v12;
  unint64_t v13;
  id v14;
  unsigned int v15;
  id v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[24];
  uint64_t v20;

  v2 = v1;
  if (!objc_msgSend(a1, sel_isPaid))
    return 1;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 24);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService), v4);
  v6 = objc_msgSend(a1, sel_identifier);
  v7 = sub_1BB8729A0();
  v9 = v8;

  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v7, v9, v4);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return 1;
  v11 = (char *)objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_bundleSubscriptionManager), sel_cachedSubscription);
  if (objc_getAssociatedObject(v11, v11 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v17, (uint64_t)v19);
  if (v20)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v12 = v16;
      v13 = (unint64_t)objc_msgSend(v16, sel_integerValue);
      if (v13 == -1)
        goto LABEL_20;
      goto LABEL_13;
    }
  }
  else
  {
    sub_1BA6EDA74((uint64_t)v19);
  }
  v12 = 0;
  v13 = 0;
LABEL_13:
  if (objc_getAssociatedObject(v11, (const void *)~v13))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v17, (uint64_t)v19);
  if (v20)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v14 = v16;
      v15 = objc_msgSend(v14, sel_integerValue);

      return ((v15 + 1) ^ ((_DWORD)v13 + 1)) & 1;
    }
  }
  else
  {
    sub_1BA6EDA74((uint64_t)v19);
  }
LABEL_20:

  return v13 & 1;
}

void sub_1BA9CD564()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle);
  if (!v1)
    return;
  v2 = objc_msgSend(objc_msgSend(v1, sel_puzzleType), sel_navigationBarThemeByRankID);
  swift_unknownObjectRelease();
  if (!v2)
    return;
  sub_1BA9D0070();
  v3 = MEMORY[0x1E0DEA968];
  v4 = sub_1BB87276C();

  v5 = 0;
  v6 = v4 + 64;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v39 = v10;
  if (!v9)
    goto LABEL_9;
LABEL_6:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v19)) + (v5 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_navigationBarBackgroundColor);
    if (v17)
    {
      v21 = v17;
      v22 = v3;
      v23 = objc_msgSend(v17, sel_hex);

      v24 = sub_1BB8729A0();
      v40 = v25;

      v44 = v22;
      *(_QWORD *)&v43 = v15;
      *((_QWORD *)&v43 + 1) = v14;
      sub_1BA76EAE0(&v43, v42);
      v26 = MEMORY[0x1E0DEE9E0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1BA785F30(v42, 0x6E6564496B6E6172, 0xEE00726569666974, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v44 = v22;
      *(_QWORD *)&v43 = v24;
      *((_QWORD *)&v43 + 1) = v40;
      sub_1BA76EAE0(&v43, v42);
      v28 = swift_isUniquelyReferenced_nonNull_native();
      sub_1BA785F30(v42, 0xD00000000000001CLL, 0x80000001BB9668B0, v28);
      swift_bridgeObjectRelease();
      v29 = objc_msgSend(v16, sel_navigationBarBackgroundDarkModeColor);
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v29, sel_hex);

        v32 = sub_1BB8729A0();
        v34 = v33;

        v35 = MEMORY[0x1E0DEA968];
        v44 = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v43 = v32;
        *((_QWORD *)&v43 + 1) = v34;
        sub_1BA76EAE0(&v43, v42);
        v36 = swift_isUniquelyReferenced_nonNull_native();
        sub_1BA785F30(v42, 0xD000000000000024, 0x80000001BB9668D0, v36);
        swift_bridgeObjectRelease();
      }
      else
      {
        v35 = MEMORY[0x1E0DEA968];
      }
      v10 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v41 = sub_1BB3905B0(0, v41[2] + 1, 1, v41);
      v3 = v35;
      v38 = v41[2];
      v37 = v41[3];
      if (v38 >= v37 >> 1)
        v41 = sub_1BB3905B0((_QWORD *)(v37 > 1), v38 + 1, 1, v41);
      v41[2] = v38 + 1;
      v41[v38 + 4] = v26;
      swift_unknownObjectRelease();
      if (v9)
        goto LABEL_6;
    }
    else
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_6;
    }
LABEL_9:
    v18 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v18 >= v10)
      goto LABEL_32;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v5;
    if (!v19)
    {
      v5 = v18 + 1;
      if (v18 + 1 >= v10)
        goto LABEL_32;
      v19 = *(_QWORD *)(v6 + 8 * v5);
      if (!v19)
      {
        v5 = v18 + 2;
        if (v18 + 2 >= v10)
          goto LABEL_32;
        v19 = *(_QWORD *)(v6 + 8 * v5);
        if (!v19)
          break;
      }
    }
LABEL_22:
    v9 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v10)
  {
LABEL_32:
    swift_release();
    sub_1BA78647C();
    sub_1BB872DF0();
    swift_bridgeObjectRelease();
    return;
  }
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v5 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v19 = *(_QWORD *)(v6 + 8 * v5);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_1BA9CD9FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t v38;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_puzzleType);
  v3 = objc_msgSend(objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_appConfigurationManager), sel_appConfiguration), sel_puzzlesConfig);
  swift_unknownObjectRelease();
  v4 = objc_msgSend(v3, sel_puzzleRanksByPuzzleTypeID);

  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  sub_1BA81D86C(0, (unint64_t *)&qword_1ED3A2FB0, &qword_1ED3A2FD0, 0x1E0D58E38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v5 = sub_1BB87276C();

  v6 = objc_msgSend(v2, sel_identifier);
  v7 = sub_1BB8729A0();
  v9 = v8;

  if (!*(_QWORD *)(v5 + 16) || (v10 = sub_1BA6E35A8(v7, v9), (v11 & 1) == 0))
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_7;
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    sub_1BA78647C();
    v34 = sub_1BB872DF0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return v34;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1BB873F30();
  result = swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_23;
LABEL_7:
  if (v14 >= 1)
  {
    v15 = 0;
    v35 = v12 & 0xC000000000000001;
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v17 = v12;
    do
    {
      if (v35)
        v18 = (id)MEMORY[0x1BCCE4630](v15, v12);
      else
        v18 = *(id *)(v12 + 8 * v15 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_identifier);
      v21 = sub_1BB8729A0();
      v23 = v22;

      v24 = MEMORY[0x1E0DEA968];
      v38 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v37 = v21;
      *((_QWORD *)&v37 + 1) = v23;
      sub_1BA76EAE0(&v37, v36);
      v25 = MEMORY[0x1E0DEE9E0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1BA785F30(v36, 0x696669746E656469, 0xEA00000000007265, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(v19, sel_name);
      v28 = sub_1BB8729A0();
      v30 = v29;

      v38 = v24;
      *(_QWORD *)&v37 = v28;
      *((_QWORD *)&v37 + 1) = v30;
      sub_1BA76EAE0(&v37, v36);
      v31 = swift_isUniquelyReferenced_nonNull_native();
      sub_1BA785F30(v36, 1701667182, 0xE400000000000000, v31);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = sub_1BB3905B0(0, v16[2] + 1, 1, v16);
      v33 = v16[2];
      v32 = v16[3];
      if (v33 >= v32 >> 1)
        v16 = sub_1BB3905B0((_QWORD *)(v32 > 1), v33 + 1, 1, v16);
      ++v15;
      v16[2] = v33 + 1;
      v16[v33 + 4] = v25;

      v12 = v17;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PuzzleDataManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA9CDF1C()
{
  swift_getObjectType();
  return sub_1BB86D210();
}

uint64_t sub_1BA9CDF60()
{
  swift_getObjectType();
  return sub_1BB86D21C();
}

uint64_t sub_1BA9CDFBC()
{
  swift_getObjectType();
  return sub_1BB86D1F8();
}

uint64_t sub_1BA9CE028(void *a1)
{
  return sub_1BA9CD2E8(a1) & 1;
}

uint64_t sub_1BA9CE04C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;

  v1 = v0;
  v2 = (char *)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_bundleSubscriptionManager), sel_cachedSubscription);
  if (objc_getAssociatedObject(v2, v2 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v18, (uint64_t)v20);
  if (!v21)
  {
    sub_1BA6EDA74((uint64_t)v20);
    goto LABEL_9;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v3 = 0;
    v5 = 0;
    goto LABEL_10;
  }
  v3 = v17;
  v4 = objc_msgSend(v17, sel_integerValue);
  if (v4 == (id)-1)
  {

    return 1;
  }
  v5 = (unint64_t)v4;
LABEL_10:
  if (objc_getAssociatedObject(v2, (const void *)~v5))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v18, (uint64_t)v20);
  if (!v21)
  {
    sub_1BA6EDA74((uint64_t)v20);
LABEL_18:

    if ((v5 & 1) != 0)
      return 1;
    goto LABEL_19;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  v6 = v17;
  v7 = objc_msgSend(v6, sel_integerValue);

  if ((((v7 + 1) ^ ((_DWORD)v5 + 1)) & 1) != 0)
    return 1;
LABEL_19:
  v8 = *(void **)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle);
  if (!v8)
    return 0;
  if ((objc_msgSend((id)swift_unknownObjectRetain(), sel_isPaid) & 1) != 0)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 24);
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService), v9);
    v11 = objc_msgSend(v8, sel_identifier);
    v12 = sub_1BB8729A0();
    v14 = v13;

    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 8))(v12, v14, v9);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return 1;
    return *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration);
  }
  else
  {
    swift_unknownObjectRelease();
    return 1;
  }
}

uint64_t sub_1BA9CE314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a4;
  v5[8] = a5;
  v5[9] = type metadata accessor for PuzzleResourceSource();
  v5[10] = swift_task_alloc();
  type metadata accessor for PuzzleData();
  v5[11] = swift_task_alloc();
  sub_1BB872F7C();
  v5[12] = sub_1BB872F70();
  v5[13] = sub_1BB872F28();
  v5[14] = v6;
  return swift_task_switch();
}

uint64_t sub_1BA9CE3C4()
{
  uint64_t v0;
  uint64_t *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(uint64_t **)(v0 + 80);
  v2 = objc_msgSend(*(id *)(v0 + 64), sel_identifier);
  v3 = sub_1BB8729A0();
  v5 = v4;

  *v1 = v3;
  v1[1] = v5;
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(v0 + 16) = xmmword_1BB87FC90;
  *(_BYTE *)(v0 + 32) = 0;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v6;
  *v6 = v0;
  v6[1] = sub_1BA9CE480;
  return sub_1BA9CA198(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80), v0 + 16);
}

uint64_t sub_1BA9CE480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  sub_1BA4A2E80(v2, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleResourceSource);
  return swift_task_switch();
}

uint64_t sub_1BA9CE500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  v2 = MEMORY[0x1BCCE5D40](v1 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_delegate);
  if (v2)
  {
    sub_1BA9CFC74(*(_QWORD *)(v0 + 88), v2);
    swift_unknownObjectRelease();
  }
  sub_1BA4A2E80(*(_QWORD *)(v0 + 88), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleData);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BA9CE580()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  swift_release();
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = *(void **)(v0 + 128);
  v2 = sub_1BB86EFEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED476918);
  v3 = v1;
  swift_unknownObjectRetain();
  v4 = v1;
  swift_unknownObjectRetain();
  v5 = sub_1BB86EFC8();
  v6 = sub_1BB8732F4();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 128);
  v9 = *(void **)(v0 + 64);
  if (v7)
  {
    v10 = swift_slowAlloc();
    v18 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v10 = 136315394;
    v11 = objc_msgSend(v9, sel_identifier);
    v12 = sub_1BB8729A0();
    v14 = v13;

    *(_QWORD *)(v0 + 40) = sub_1BA5D2E14(v12, v14, &v20);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    v15 = v8;
    v16 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 48) = v16;
    sub_1BB873A8C();
    *v18 = v16;

    _os_log_impl(&dword_1BA493000, v5, v6, "PuzzleDataManager Error fetching puzzle data for puzzleID=%s error=%@", (uint8_t *)v10, 0x16u);
    sub_1BA81D86C(0, (unint64_t *)&qword_1ED3A1060, (unint64_t *)&qword_1ED3B99D0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v18, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v19, -1, -1);
    MEMORY[0x1BCCE5C38](v10, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for PuzzleDataManager.Configuration()
{
  return &type metadata for PuzzleDataManager.Configuration;
}

uint64_t *sub_1BA9CE8B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BB86C67C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_unknownObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v7;
}

uint64_t sub_1BA9CE96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

_QWORD *sub_1BA9CE9C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C67C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_unknownObjectRetain();
  v10(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

_QWORD *sub_1BA9CEA58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C67C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1BA9CEAF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C67C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1BA9CEB68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_unknownObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C67C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_1BA9CEBF0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9CEBFC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BB86C67C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1BA9CEC78()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BA9CEC84(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BB86C67C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void *sub_1BA9CECF8()
{
  uint64_t v0;
  void *result;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(void **)(v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle);
  if (result)
  {
    v2 = objc_msgSend(result, sel_identifier);
    v3 = sub_1BB8729A0();
    v5 = v4;

    swift_bridgeObjectRetain();
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1BA9CF01C(v6, v3, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 16) && MEMORY[0x1BCCE5D40](v0 + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_delegate))
    {
      sub_1BB1BC13C(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (void *)swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

id sub_1BA9CEE14(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5, void *a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  void (*v24)(_QWORD *__return_ptr);
  id v25;
  objc_class *ObjectType;
  _QWORD v30[5];
  objc_super v31;

  v11 = v10;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v19 = OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration;
  v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration] = 1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_appConfigurationManager] = a1;
  sub_1BA4C010C(a2, (uint64_t)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleService]);
  sub_1BA4C010C((uint64_t)a3, (uint64_t)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleHistoryService]);
  sub_1BA4C010C(a4, (uint64_t)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleNotificationAutoEnableManager]);
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleTypeSettings] = a5;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_bundleSubscriptionManager] = a6;
  v11[v19] = a7 & 1;
  sub_1BA4C010C(a8, (uint64_t)&v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleStatsService]);
  v20 = &v11[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzleGameCenterService];
  *v20 = a9;
  v20[1] = a10;
  v31.receiver = v11;
  v31.super_class = ObjectType;
  swift_unknownObjectRetain();
  v21 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v22 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(a6, sel_addObserver_, v22);
  v23 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  v24 = *(void (**)(_QWORD *__return_ptr))(v23 + 80);
  v25 = v22;
  v24(v30);

  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v25;
}

uint64_t sub_1BA9CF01C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *i;
  void *v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = 0;
  v6 = result + 48;
  v43 = -(uint64_t)v3;
  v7 = MEMORY[0x1E0DEE9D8];
  v40 = result + 48;
  v41 = *(_QWORD *)(result + 16);
  do
  {
    v42 = v7;
    if (v5 <= v3)
      v8 = v3;
    else
      v8 = v5;
    v45 = -(uint64_t)v8;
    for (i = (_BYTE *)(v6 + 24 * v5++); ; i += 24)
    {
      if (v45 + v5 == 1)
      {
        __break(1u);
        return result;
      }
      v11 = (void *)*((_QWORD *)i - 2);
      v10 = (void *)*((_QWORD *)i - 1);
      v12 = *i;
      if (!*i)
        break;
      if (v12 == 1)
      {
        v13 = v11;
        swift_unknownObjectRetain_n();
        v14 = v13;
        v15 = objc_msgSend(v10, sel_identifier);
        v16 = sub_1BB8729A0();
        v18 = v17;

        if (v16 == a2 && v18 == a3)
          goto LABEL_29;
        v20 = sub_1BB874398();
        swift_bridgeObjectRelease();
        sub_1BA9D00C4(v11, (uint64_t)v10, 1u);
        if ((v20 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = v11;
        swift_unknownObjectRetain_n();
        v30 = v29;
        v31 = objc_msgSend(v10, sel_identifier);
        v32 = sub_1BB8729A0();
        v34 = v33;

        if (v32 == a2 && v34 == a3)
          goto LABEL_29;
        v36 = sub_1BB874398();
        swift_bridgeObjectRelease();
        sub_1BA9D00C4(v11, (uint64_t)v10, 2u);
        if ((v36 & 1) != 0)
          goto LABEL_30;
      }
LABEL_27:
      result = (uint64_t)sub_1BA9D00C4(v11, (uint64_t)v10, v12);
      ++v5;
      if (v43 + v5 == 1)
        return v42;
    }
    v21 = v11;
    swift_unknownObjectRetain_n();
    v22 = v21;
    v23 = objc_msgSend(v10, sel_identifier);
    v24 = sub_1BB8729A0();
    v26 = v25;

    if (v24 != a2 || v26 != a3)
    {
      v28 = sub_1BB874398();
      swift_bridgeObjectRelease();
      sub_1BA9D00C4(v11, (uint64_t)v10, 0);
      if ((v28 & 1) != 0)
        goto LABEL_30;
      goto LABEL_27;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    sub_1BA9D00C4(v11, (uint64_t)v10, v12);
LABEL_30:
    v7 = v42;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1BAC7A708(0, *(_QWORD *)(v42 + 16) + 1, 1);
      v7 = v42;
    }
    v6 = v40;
    v3 = v41;
    v38 = *(_QWORD *)(v7 + 16);
    v37 = *(_QWORD *)(v7 + 24);
    if (v38 >= v37 >> 1)
    {
      result = sub_1BAC7A708(v37 > 1, v38 + 1, 1);
      v6 = v40;
      v3 = v41;
      v7 = v42;
    }
    *(_QWORD *)(v7 + 16) = v38 + 1;
    v39 = v7 + 24 * v38;
    *(_QWORD *)(v39 + 32) = v11;
    *(_QWORD *)(v39 + 40) = v10;
    *(_BYTE *)(v39 + 48) = v12;
  }
  while (v43 + v5);
  return v7;
}

uint64_t sub_1BA9CF35C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  id v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  char *v64;
  void *v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v2 = sub_1BB86C52C();
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  MEMORY[0x1E0C80A78](v2);
  v71 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v4);
  v78 = (char *)&v68 - v5;
  v82 = sub_1BB86C67C();
  v79 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v74 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v75 = (char *)&v68 - v8;
  MEMORY[0x1E0C80A78](v9);
  v83 = (char *)&v68 - v10;
  v11 = sub_1BB86CAC0();
  v80 = *(_QWORD *)(v11 - 8);
  v81 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0558, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v68 - v15;
  v17 = sub_1BB86C9E8();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1BB86CAD8();
  v76 = *(_QWORD *)(v21 - 8);
  v77 = v21;
  MEMORY[0x1E0C80A78](v21);
  v85 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v68 - v24;
  v26 = sub_1BB86C8B0();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v30);
  v84 = (char *)&v68 - v32;
  v70 = a1;
  v33 = objc_msgSend(a1, sel_publishDate, v31);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
    goto LABEL_7;
  }
  v34 = v33;
  sub_1BB86C874();

  v35 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v35(v25, v29, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
LABEL_7:
    v49 = &qword_1ED3B0540;
    v50 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    v51 = (uint64_t)v25;
    goto LABEL_8;
  }
  v69 = v27;
  v35(v84, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0CB0EF8], v17);
  sub_1BB86C9F4();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_1BB86CB20();
  v36 = sub_1BB86CB50();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v16, 1, v36);
  if ((_DWORD)result != 1)
  {
    v68 = v26;
    sub_1BB86CAB4();
    v39 = v80;
    v38 = v81;
    (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v13, *MEMORY[0x1E0CB1198], v81);
    v40 = sub_1BB86CACC();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v38);
    v41 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v42 = 1;
    v43 = objc_msgSend(v41, sel_URLsForDirectory_inDomains_, 9, 1);
    v44 = v82;
    v45 = sub_1BB872DB4();

    if (*(_QWORD *)(v45 + 16))
    {
      v46 = v78;
      v47 = v79;
      (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v78, v45 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), v44);
      v42 = 0;
      v48 = v83;
    }
    else
    {
      v48 = v83;
      v46 = v78;
      v47 = v79;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, v42, 1, v44);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v46, 1, v44) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v48, v46, v44);
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_1BB87FC80;
      *(_QWORD *)(v53 + 32) = 0x7954656C7A7A7570;
      *(_QWORD *)(v53 + 40) = 0xEA00000000006570;
      v54 = objc_msgSend(objc_msgSend(v70, sel_puzzleType), sel_identifier);
      swift_unknownObjectRelease();
      v55 = sub_1BB8729A0();
      v57 = v56;

      *(_QWORD *)(v53 + 48) = v55;
      *(_QWORD *)(v53 + 56) = v57;
      *(_QWORD *)(v53 + 64) = 0x69616E626D756874;
      *(_QWORD *)(v53 + 72) = 0xEA0000000000736CLL;
      v59 = v71;
      v58 = v72;
      v60 = v73;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, *MEMORY[0x1E0CAFD78], v73);
      sub_1BA7114A0();
      v61 = v75;
      sub_1BB86C64C();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
      v87 = 115;
      v88 = 0xE100000000000000;
      v86 = v40;
      sub_1BB87420C();
      sub_1BB872AFC(v62);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v63);
      v64 = v74;
      sub_1BB86C5B0();
      swift_bridgeObjectRelease();
      sub_1BB86C610();
      v65 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      LODWORD(v60) = objc_msgSend(v41, sel_fileExistsAtPath_, v65);

      if ((_DWORD)v60)
      {
        v52 = sub_1BB86C538();

        v66 = *(void (**)(char *, uint64_t))(v47 + 8);
        v66(v64, v44);
        v66(v61, v44);
        v66(v83, v44);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v85, v77);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v84, v68);
        return v52;
      }

      v67 = *(void (**)(char *, uint64_t))(v47 + 8);
      v67(v64, v44);
      v67(v61, v44);
      v67(v83, v44);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v85, v77);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v84, v68);
      return 0;
    }

    (*(void (**)(char *, uint64_t))(v76 + 8))(v85, v77);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v84, v68);
    v49 = &qword_1ED3D2E70;
    v50 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
    v51 = (uint64_t)v46;
LABEL_8:
    sub_1BA502AD0(v51, (unint64_t *)v49, v50);
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1BA9CFB64()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  sub_1BA4A3FB4(0, &qword_1ED3C1DE0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - v2;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_puzzle];
  if (v4)
  {
    v5 = sub_1BB872F94();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    sub_1BB872F7C();
    swift_unknownObjectRetain_n();
    v6 = v0;
    v7 = sub_1BB872F70();
    v8 = (_QWORD *)swift_allocObject();
    v9 = MEMORY[0x1E0DF06E8];
    v8[2] = v7;
    v8[3] = v9;
    v8[4] = v6;
    v8[5] = v4;
    sub_1BB1B6AEC((uint64_t)v3, (uint64_t)&unk_1EF2ACAE8, (uint64_t)v8);
    swift_release();
    swift_unknownObjectRelease();
  }
}

void sub_1BA9CFC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  id v11;
  id v12;
  unint64_t v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;

  sub_1BA4A3FB4(0, qword_1ED3D53F0, (void (*)(uint64_t))type metadata accessor for PuzzleData);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - v5;
  sub_1BA4C2DD8(a1, (uint64_t)&v16 - v5, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleData);
  v7 = type metadata accessor for PuzzleData();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  v8 = a2 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleData;
  swift_beginAccess();
  sub_1BA9D01A4((uint64_t)v6, v8);
  swift_endAccess();
  v9 = *(void **)(a2 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController);
  objc_msgSend(v9, sel_loadLocalDatastore_forceUpdate_completion_, *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v7 + 24)) + 16), 0, 0);
  v10 = (char *)objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_bundleSubscriptionManager), sel_cachedSubscription);
  if (objc_getAssociatedObject(v10, v10 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v18, (uint64_t)v20);
  if (!v21)
  {
    sub_1BA6EDA74((uint64_t)v20);
    goto LABEL_9;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v11 = 0;
    v13 = 0;
    goto LABEL_10;
  }
  v11 = v17;
  v12 = objc_msgSend(v17, sel_integerValue);
  if (v12 == (id)-1)
  {

    goto LABEL_21;
  }
  v13 = (unint64_t)v12;
LABEL_10:
  if (objc_getAssociatedObject(v10, (const void *)~v13))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v18, (uint64_t)v20);
  if (v21)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99C0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v14 = v17;
      v15 = objc_msgSend(v14, sel_integerValue);

      if (((v15 ^ v13) & 1) == 0)
        return;
LABEL_21:
      objc_msgSend(v9, sel_setFocusShouldStartInputSession_, 1);
      return;
    }
  }
  else
  {
    sub_1BA6EDA74((uint64_t)v20);
  }

  if ((v13 & 1) != 0)
    goto LABEL_21;
}

uint64_t sub_1BA9CFF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a9 != 1)
  {
    sub_1BA86B484(a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BA9CFF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4A3FB4(0, (unint64_t *)&unk_1EF2ACAA8, (void (*)(uint64_t))type metadata accessor for PuzzleHistoryInfo);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BA9CFFE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2ACAC0;
  if (!qword_1EF2ACAC0)
  {
    v1 = type metadata accessor for PuzzleDataManager();
    result = MEMORY[0x1BCCE5B24](&unk_1BB88DD88, v1);
    atomic_store(result, (unint64_t *)&qword_1EF2ACAC0);
  }
  return result;
}

unint64_t sub_1BA9D002C()
{
  unint64_t result;

  result = qword_1EF2ACAC8;
  if (!qword_1EF2ACAC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88DEC8, &type metadata for PuzzleDataManager.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF2ACAC8);
  }
  return result;
}

unint64_t sub_1BA9D0070()
{
  unint64_t result;

  result = qword_1ED3A1050;
  if (!qword_1ED3A1050)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3A1050);
  }
  return result;
}

void *sub_1BA9D00C4(void *result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u)
  {

    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1BA9D00F8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA9D012C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1BA4B0D38;
  return sub_1BA9CE314(a1, v4, v5, v7, v6);
}

uint64_t sub_1BA9D01A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4A3FB4(0, qword_1ED3D53F0, (void (*)(uint64_t))type metadata accessor for PuzzleData);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for PuzzleDataManager.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA9D0238 + 4 * byte_1BB88DC90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA9D0258 + 4 * byte_1BB88DC95[v4]))();
}

_BYTE *sub_1BA9D0238(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA9D0258(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA9D0260(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA9D0268(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA9D0270(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA9D0278(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleDataManager.Errors()
{
  return &type metadata for PuzzleDataManager.Errors;
}

uint64_t _s8NewsFeed17PuzzleDataManagerC22PuzzlePresentationModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA9D02E0 + 4 * byte_1BB88DC9F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA9D0314 + 4 * byte_1BB88DC9A[v4]))();
}

uint64_t sub_1BA9D0314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9D031C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA9D0324);
  return result;
}

uint64_t sub_1BA9D0330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA9D0338);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA9D033C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9D0344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleDataManager.PuzzlePresentationMode()
{
  return &type metadata for PuzzleDataManager.PuzzlePresentationMode;
}

unint64_t sub_1BA9D0364()
{
  unint64_t result;

  result = qword_1EF2ACAF8;
  if (!qword_1EF2ACAF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88DE38, &type metadata for PuzzleDataManager.PuzzlePresentationMode);
    atomic_store(result, (unint64_t *)&qword_1EF2ACAF8);
  }
  return result;
}

unint64_t sub_1BA9D03AC()
{
  unint64_t result;

  result = qword_1EF2ACB00;
  if (!qword_1EF2ACB00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88DEA0, &type metadata for PuzzleDataManager.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF2ACB00);
  }
  return result;
}

CGSize_optional __swiftcall FormatLayoutSizeSnapshot.size(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v5;
  char v6;
  uint64_t v7;
  double v8;
  double v9;
  Swift::Bool v10;
  CGSize_optional result;

  v2 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    object = a1._object;
    countAndFlagsBits = a1._countAndFlagsBits;
    swift_bridgeObjectRetain();
    v5 = sub_1BA6E35A8(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v5);
    else
      LOBYTE(v7) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  v10 = v7;
  result.value.height = v9;
  result.value.width = v8;
  result.is_nil = v10;
  return result;
}

uint64_t static FormatLayoutSizeSnapshot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1BA6A472C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1BA9D0488(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_1BA6E35A8(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = sub_1BB874398();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t FormatLayoutSizeSnapshot.hash(into:)(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA6A37C0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t FormatLayoutSizeSnapshot.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatLayoutSizeSnapshot.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_1BB8745CC();
  sub_1BA6A37C0((uint64_t)v2, *(_QWORD *)(v0 + 16));
  return sub_1BB874608();
}

uint64_t sub_1BA9D06F0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA6A37C0((uint64_t)v3, *(_QWORD *)(v1 + 16));
  return sub_1BB874608();
}

uint64_t sub_1BA9D0734(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA6A37C0(a1, *(_QWORD *)(*(_QWORD *)v1 + 16));
}

uint64_t sub_1BA9D0740()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA6A37C0((uint64_t)v3, *(_QWORD *)(v1 + 16));
  return sub_1BB874608();
}

uint64_t sub_1BA9D0780(uint64_t a1, uint64_t a2)
{
  return sub_1BA6A472C(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
}

_QWORD *FormatLayoutResizingProvider.__allocating_init()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1BB86DD44();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB31F8];
  MEMORY[0x1E0C80A78](v0);
  v2 = (_QWORD *)swift_allocObject();
  sub_1BA50AD30((unint64_t *)&qword_1ED3BBE30, 255, v1, MEMORY[0x1E0DB3208]);
  sub_1BA9727B8(0);
  sub_1BA50AD30((unint64_t *)&qword_1ED3C02F0, 255, (uint64_t (*)(uint64_t))sub_1BA9727B8, MEMORY[0x1E0DEAF38]);
  sub_1BB873BC4();
  sub_1BB86DD5C();
  swift_allocObject();
  v3 = sub_1BB86DD50();
  v4 = MEMORY[0x1E0DEE9E0];
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = 0;
  v2[5] = 0;
  return v2;
}

_QWORD *FormatLayoutResizingProvider.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1BB86DD44();
  MEMORY[0x1E0C80A78](v1);
  sub_1BA50AD30((unint64_t *)&qword_1ED3BBE30, 255, v2, MEMORY[0x1E0DB3208]);
  sub_1BA9727B8(0);
  sub_1BA50AD30((unint64_t *)&qword_1ED3C02F0, 255, (uint64_t (*)(uint64_t))sub_1BA9727B8, MEMORY[0x1E0DEAF38]);
  sub_1BB873BC4();
  sub_1BB86DD5C();
  swift_allocObject();
  v3 = sub_1BB86DD50();
  v4 = MEMORY[0x1E0DEE9E0];
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = 0;
  v0[5] = 0;
  return v0;
}

uint64_t sub_1BA9D09DC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  uint64_t result;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  v7 = v6;
  sub_1BB86DD20();
  swift_beginAccess();
  v14 = *(_QWORD *)(v6 + 24);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1BB4AB454(a5, a6), (v16 & 1) != 0))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    v17 = sub_1BA6A2E0C(MEMORY[0x1E0DEE9D8]);
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BB4BEC48(a1, a2, isUniquelyReferenced_nonNull_native, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = swift_isUniquelyReferenced_nonNull_native();
  v23 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = 0x8000000000000000;
  sub_1BB4BEB0C(v17, v19, a5, a6);
  *(_QWORD *)(v7 + 24) = v23;
  swift_bridgeObjectRelease();
  swift_endAccess();
  result = sub_1BB86DD2C();
  v21 = *(void (**)(uint64_t))(v7 + 32);
  if (v21)
  {
    v22 = swift_retain();
    v21(v22);
    return sub_1BA49EBE0((uint64_t)v21);
  }
  return result;
}

uint64_t FormatLayoutResizingProvider.onChange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_1BA49EBE0(v3);
  return swift_retain();
}

uint64_t FormatLayoutResizingProvider.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1BA49EBE0(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t FormatLayoutResizingProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1BA49EBE0(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t sub_1BA9D0C08(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2ACB10, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutSizeSnapshot, (uint64_t)&protocol conformance descriptor for FormatLayoutSizeSnapshot);
}

uint64_t method lookup function for FormatLayoutSizeSnapshot()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for FormatLayoutResizingProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatLayoutResizingProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1BA9D0C54(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D0C9C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9D0D70()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D0DF0(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BA9D0E38()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D0EC8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D0F08()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D0FBC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1004()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D10BC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1108()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D11CC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1218()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D12DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D131C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D13C8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1414()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1508(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1554()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1618(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1658()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1700(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1748()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1810(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D185C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1904(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1940()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1A14(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1A5C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1B18(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1B5C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1C58(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1CA4()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1D18(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1D60()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1E30(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1E70()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D1F48(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D1F84()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2068(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D20AC()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2150(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D218C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D220C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2248()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D22FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2344()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D23C8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D240C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D24A4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D24E0()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D25AC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D25E8()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2684(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D26C4()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2798(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D27E0()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9D2898()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2918(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D295C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2A48(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2A90()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2B18(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2B5C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2BEC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2C30()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2CB0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2CF4()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2DD0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2E18()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2EE0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D2F1C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D2FC0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3004()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9D3084()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3100(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3140()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3200(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D323C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D32F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3338()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D33F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3444()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D352C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3568()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3630(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D367C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3710(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3748()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3800(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3840()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D38F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3938()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3A08(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BA9D3A50()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3ADC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3B24()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3BDC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3C1C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3CEC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3D28()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3DEC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3E2C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3EE4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D3F20()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D3FD4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4010()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D40C0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D410C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D421C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4264()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D4348(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4384()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D4424(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4468()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D44E4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4528()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D45D4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D461C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D4690(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D46D4()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D4770(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D47B4()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D4850(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D4890()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BA9D495C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BA9D499C()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

char *FormatPuzzleEmbedViewController.__allocating_init(puzzleEmbedViewController:componentProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  char *v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_1BA9ECC64(a1, a2, a3);

  swift_unknownObjectRelease();
  return v8;
}

id FormatPuzzleEmbedViewController.puzzleEmbedViewController.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController);
}

id FormatPuzzleEmbedViewController.onReuse.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onReuse);
}

uint64_t FormatPuzzleEmbedViewController.layoutIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_layoutIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FormatPuzzleEmbedViewController.layoutIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_layoutIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPuzzleEmbedViewController.layoutIdentifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FormatPuzzleEmbedViewController.resizingProvider.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t FormatPuzzleEmbedViewController.resizingProvider.setter()
{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

void (*FormatPuzzleEmbedViewController.resizingProvider.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_resizingProvider;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return sub_1BA9D4CB4;
}

void sub_1BA9D4CB4(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_weakAssign();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t sub_1BA9D4D20@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)(double *, double *)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(double *, double *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1BA9ED67C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(double *, double *))v6;
  return sub_1BA4BEB58(v4);
}

uint64_t sub_1BA9D4DB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(double, double, double, double, double, double, double, double);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1BA9ED678;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1BA4BEB58(v3);
  return sub_1BA49EBE0(v8);
}

uint64_t FormatPuzzleEmbedViewController.onKeyboardWillShow.getter()
{
  return sub_1BA9D5020(&OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow);
}

uint64_t FormatPuzzleEmbedViewController.onKeyboardWillShow.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BA9D5080(a1, a2, &OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow);
}

uint64_t (*FormatPuzzleEmbedViewController.onKeyboardWillShow.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BA9D4EC8@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)(double *, double *)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(double *, double *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1BA9ED67C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(double *, double *))v6;
  return sub_1BA4BEB58(v4);
}

uint64_t sub_1BA9D4F5C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(double, double, double, double, double, double, double, double);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1BA9ED678;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1BA4BEB58(v3);
  return sub_1BA49EBE0(v8);
}

uint64_t FormatPuzzleEmbedViewController.onKeyboardWillHide.getter()
{
  return sub_1BA9D5020(&OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide);
}

uint64_t sub_1BA9D5020(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  sub_1BA4BEB58(*v2);
  return v3;
}

uint64_t FormatPuzzleEmbedViewController.onKeyboardWillHide.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BA9D5080(a1, a2, &OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide);
}

uint64_t sub_1BA9D5080(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  v7 = *v6;
  *v6 = a1;
  v6[1] = a2;
  return sub_1BA49EBE0(v7);
}

uint64_t (*FormatPuzzleEmbedViewController.onKeyboardWillHide.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

char *FormatPuzzleEmbedViewController.init(puzzleEmbedViewController:componentProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  v4 = sub_1BA9ECC64(a1, a2, a3);

  swift_unknownObjectRelease();
  return v4;
}

id FormatPuzzleEmbedViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void FormatPuzzleEmbedViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FormatPuzzleEmbedViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.viewDidLoad()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  char *v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v11, sel_viewDidLoad);
  v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  objc_msgSend(v1, sel_setClipsToBounds_, 1);

  objc_msgSend(v0, sel_setEdgesForExtendedLayout_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  objc_msgSend(v3, sel_setAutoresizingMask_, 0);

  v5 = *(char **)&v0[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController];
  objc_msgSend(v0, sel_addChildViewController_, v5);
  v6 = objc_msgSend(v0, sel_view);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_view);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v7, sel_addSubview_, v8);

    objc_msgSend(v5, sel_didMoveToParentViewController_, v0);
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController], sel_prewarm);
    v10 = &v5[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_delegate];
    swift_beginAccess();
    *((_QWORD *)v10 + 1) = &protocol witness table for FormatPuzzleEmbedViewController;
    swift_unknownObjectWeakAssign();
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  char *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, sel_viewWillAppear_, a1);
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView])
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

    if (!v4 && (objc_msgSend((id)objc_opt_self(), sel_isHardwareKeyboardAttached) & 1) == 0)
      sub_1BA9D567C();
  }
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_defaultCenter);
  objc_msgSend(v6, sel_addObserver_selector_name_object_, v1, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);

  v7 = objc_msgSend(v5, sel_defaultCenter);
  objc_msgSend(v7, sel_addObserver_selector_name_object_, v1, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

}

void sub_1BA9D567C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, _QWORD *, void (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _QWORD *);
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_componentProvider + 8);
  ObjectType = swift_getObjectType();
  v27 = 0xD000000000000013;
  v28 = 0x80000001BB966CA0;
  v29 = 0;
  v30 = 0;
  v31 = 2;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 4;
  v26[0] = 0;
  v26[1] = 0;
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = *(uint64_t (**)(uint64_t *, _QWORD *, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v2 + 32);
  swift_retain();
  v6 = (void *)v5(&v27, v26, sub_1BA9ED758, v4, ObjectType, v2);
  v8 = v7;
  swift_release();
  v24 = v35;
  sub_1BA8FD8B0(v27, v28, v29, v30, v31, v32, v33, v34);
  swift_release();
  v9 = (void **)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView);
  *v9 = v6;
  v9[1] = v8;
  v11 = v6;

  v12 = *v9;
  if (*v9)
  {
    v13 = v9[1];
    v14 = swift_getObjectType();
    v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_identifier);
    v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_identifier + 8);
    v17 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))v13[2];
    v18 = v12;
    swift_bridgeObjectRetain();
    v17(v15, v16, v14, v13);

  }
  v19 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController);
  sub_1BA49A224(0, &qword_1EF2BD180);
  v20 = v11;
  v21 = (void *)sub_1BB872D9C();
  v22 = (void *)sub_1BB872D9C();
  objc_msgSend(v19, sel_setShortcutsBarWithLeadingGroups_trailingGroups_, v21, v22, v24);

  objc_msgSend(v19, sel_setInputAccessoryView_, v20);
  v23 = objc_msgSend((id)objc_opt_self(), sel_current);
  if (v23)
  {
    v25 = v23;
    objc_msgSend(v23, sel_setPencilInputExpected_, 0);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_viewWillDisappear_, a1);
  v3 = &v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView];
  v4 = *(void **)&v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;

  v5 = *(void **)(*(_QWORD *)&v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController]
                + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController);
  sub_1BA49A224(0, &qword_1EF2BD180);
  v6 = (void *)sub_1BB872D9C();
  v7 = (void *)sub_1BB872D9C();
  objc_msgSend(v5, sel_setShortcutsBarWithLeadingGroups_trailingGroups_, v6, v7);

  objc_msgSend(v5, sel_setInputAccessoryView_, 0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v8, sel_removeObserver_, v1);

}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.viewWillLayoutSubviews()()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  objc_super v45;

  v45.receiver = v0;
  v45.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v45, sel_viewWillLayoutSubviews);
  v1 = *(char **)&v0[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController];
  v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v2;
  objc_msgSend(v2, sel_bounds);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = objc_msgSend(v0, sel_view);
  if (!v12)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = v12;
  objc_msgSend(v12, sel_layoutMargins);
  v15 = v14;
  v17 = v16;

  v18 = UIEdgeInsetsInsetRect(v5, v7, v9, v11, v15, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = (double *)&v1[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_contentFrame];
  swift_beginAccess();
  *v25 = v18;
  *((_QWORD *)v25 + 1) = v20;
  *((_QWORD *)v25 + 2) = v22;
  *((_QWORD *)v25 + 3) = v24;
  v26 = objc_msgSend(v0, sel_view);
  if (!v26)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v27 = v26;
  objc_msgSend(v26, sel_bounds);
  v29 = v28;
  v31 = v30;

  v32 = &v1[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_viewportSize];
  swift_beginAccess();
  *(_QWORD *)v32 = v29;
  *((_QWORD *)v32 + 1) = v31;
  v33 = objc_msgSend(v1, sel_view);
  if (!v33)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v34 = v33;
  v35 = objc_msgSend(v0, sel_view);
  if (v35)
  {
    v36 = v35;
    objc_msgSend(v35, sel_bounds);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    v44 = v43;

    objc_msgSend(v34, sel_setFrame_, v38, v40, v42, v44);
    return;
  }
LABEL_11:
  __break(1u);
}

void FormatPuzzleEmbedViewController.keyboardWillShow(notification:)(uint64_t a1)
{
  sub_1BA9D5D3C(a1, (SEL *)&selRef_bounds, &OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow);
}

void FormatPuzzleEmbedViewController.keyboardWillHide(notification:)(uint64_t a1)
{
  sub_1BA9D5D3C(a1, (SEL *)&selRef_frame, &OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide);
}

void sub_1BA9D5D3C(uint64_t a1, SEL *a2, _QWORD *a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  char v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  void (*v39)(uint64_t, double, double, double, double, double, double);
  uint64_t v40;
  uint64_t v41;
  double v42;
  _BYTE v43[40];
  __int128 v44;
  __int128 v45;

  v6 = v3;
  v7 = sub_1BB86BEE4();
  if (v7)
  {
    v8 = v7;
    v41 = sub_1BB8729A0();
    v42 = v9;
    sub_1BB873C48();
    if (*(_QWORD *)(v8 + 16) && (v10 = sub_1BB4AB200((uint64_t)v43), (v11 & 1) != 0))
    {
      sub_1BA747A10(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)&v44);
    }
    else
    {
      v44 = 0u;
      v45 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1BA9ECE7C((uint64_t)v43);
    if (!*((_QWORD *)&v45 + 1))
    {
      sub_1BA6EDA74((uint64_t)&v44);
      return;
    }
    type metadata accessor for CGRect(0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (objc_msgSend(v6, sel_isViewLoaded))
      {
        v12 = objc_msgSend(v6, sel_view);
        if (v12)
        {
          v13 = v12;
          v14 = objc_msgSend(v12, sel_window);

          if (!v14)
            return;
          v15 = objc_msgSend(v6, sel_view);
          if (v15)
          {
            v16 = v15;
            v17 = objc_msgSend(v6, sel_view);
            if (v17)
            {
              v18 = v17;
              objc_msgSend(v17, *a2);
              v20 = v19;
              v22 = v21;
              v24 = v23;
              v26 = v25;

              v27 = objc_msgSend(v6, sel_view);
              if (v27)
              {
                v28 = v27;
                v29 = (void *)sub_1BB8736D8();

                objc_msgSend(v16, sel_convertRect_toCoordinateSpace_, v29, v20, v22, v24, v26);
                v31 = v30;
                v33 = v32;
                v35 = v34;
                v37 = v36;

                v38 = &v6[*a3];
                swift_beginAccess();
                v39 = *(void (**)(uint64_t, double, double, double, double, double, double))v38;
                if (*(_QWORD *)v38)
                {
                  v40 = swift_retain();
                  v39(v40, v31, v33, v35, v37, *(double *)&v41, v42);
                  sub_1BA49EBE0((uint64_t)v39);
                }
                return;
              }
LABEL_21:
              __break(1u);
              return;
            }
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_20;
      }
    }
  }
}

uint64_t sub_1BA9D5FEC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v12;

  v6 = sub_1BB86BEF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB86BECC();
  v10 = a1;
  a4(v9);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1BA9D608C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1BCCE5D40](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    objc_msgSend(v5, sel_sendAction_to_from_forEvent_, sel_resignFirstResponder, 0, 0, 0);

  }
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.puzzleEmbedDidReceiveInteractionMessage()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  char v4;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v0 = sub_1BB86EFEC();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED476918);
  v1 = sub_1BB86EFC8();
  v2 = sub_1BB87330C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BA493000, v1, v2, "FormatPuzzleEmbedViewController: puzzleEmbedDidReceiveInteractionMessage", v3, 2u);
    MEMORY[0x1BCCE5C38](v3, -1, -1);
  }

  swift_beginAccess();
  sub_1BA9D7190(&v4, 1);
  swift_endAccess();
}

uint64_t FormatPuzzleEmbedViewController.puzzleEmbedDidReceiveProgress(_:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  char v5;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v0 = sub_1BB86EFEC();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED476918);
  v1 = sub_1BB86EFC8();
  v2 = sub_1BB87330C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BA493000, v1, v2, "FormatPuzzleEmbedViewController: puzzleEmbedDidReceiveProgress", v3, 2u);
    MEMORY[0x1BCCE5C38](v3, -1, -1);
  }

  swift_beginAccess();
  sub_1BA9D7190(&v5, 0);
  return swift_endAccess();
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.puzzleEmbedDidFinishLoading()()
{
  sub_1BA9D6354("FormatPuzzleEmbedViewController: puzzleEmbedDidFinishLoading");
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.puzzleEmbedProcessTerminated()()
{
  sub_1BA9D6354("FormatPuzzleEmbedViewController: puzzleEmbedProcessTerminated");
}

void sub_1BA9D6354(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v2 = sub_1BB86EFEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED476918);
  oslog = sub_1BB86EFC8();
  v3 = sub_1BB87330C();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BA493000, oslog, v3, a1, v4, 2u);
    MEMORY[0x1BCCE5C38](v4, -1, -1);
  }

}

void sub_1BA9D6428(uint64_t a1, uint64_t a2)
{
  sub_1BA9D6440(a1, a2, "FormatPuzzleEmbedViewController: puzzleEmbedDidFinishLoading");
}

void sub_1BA9D6434(uint64_t a1, uint64_t a2)
{
  sub_1BA9D6440(a1, a2, "FormatPuzzleEmbedViewController: puzzleEmbedProcessTerminated");
}

void sub_1BA9D6440(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v4 = sub_1BB86EFEC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED476918);
  oslog = sub_1BB86EFC8();
  v5 = sub_1BB87330C();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BA493000, oslog, v5, a3, v6, 2u);
    MEMORY[0x1BCCE5C38](v6, -1, -1);
  }

}

uint64_t FormatPuzzleEmbedViewController.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1BA9D6584@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)(*a1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9D65E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*(_QWORD *)(*a2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t FormatPuzzleEmbedViewController.reuseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*FormatPuzzleEmbedViewController.reuseIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController);
  v5 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier;
  v3[5] = v4;
  v3[6] = v5;
  v6 = (_QWORD *)(v4 + v5);
  swift_beginAccess();
  v7 = v6[1];
  v3[3] = *v6;
  v3[4] = v7;
  swift_bridgeObjectRetain();
  return sub_1BA9D6750;
}

void sub_1BA9D6750(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = (_QWORD *)(v5 + v4);
  *v7 = v3;
  v7[1] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_1BA9D67A8()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1BA9D6810(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;

  v5 = (_QWORD *)(*(_QWORD *)(*v2 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)
                + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*sub_1BA9D6880(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FormatPuzzleEmbedViewController.reuseIdentifier.modify(v2);
  return sub_1BA9D68C8;
}

void sub_1BA9D68C8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.refresh()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)+ OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_presentationManager), sel_refresh);
}

id sub_1BA9D6918()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController)+ OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_presentationManager), sel_refresh);
}

Swift::Void __swiftcall FormatPuzzleEmbedViewController.prepareForReuse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  MEMORY[0x1BCCE1C6C]();

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController);
  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onEmbedInteraction);
  swift_beginAccess();
  v3 = *v2;
  *v2 = 0;
  v2[1] = 0;
  sub_1BA49EBE0(v3);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_hasPuzzleDataLoadAttempted) = 0;
}

uint64_t sub_1BA9D69C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v1 = *v0;
  MEMORY[0x1BCCE1C6C]();

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController);
  v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onEmbedInteraction);
  swift_beginAccess();
  v4 = *v3;
  *v3 = 0;
  v3[1] = 0;
  result = sub_1BA49EBE0(v4);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_hasPuzzleDataLoadAttempted) = 0;
  return result;
}

id sub_1BA9D6A48(char a1, char a2)
{
  id *v2;

  return objc_msgSend(*v2, sel_setEditing_animated_, a1 & 1, a2 & 1);
}

void sub_1BA9D6A68(uint64_t a1, uint64_t a2)
{
  sub_1BA50AD30(&qword_1EF2ACBE0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatPuzzleEmbedViewController, (uint64_t)&protocol conformance descriptor for FormatPuzzleEmbedViewController);
  JUMPOUT(0x1BCCE1E7CLL);
}

uint64_t FormatPuzzleEmbedViewController.skipUpdatesOnUnchangedConfig(for:)()
{
  return 1;
}

Swift::Bool __swiftcall FormatPuzzleEmbedViewController.shouldProcessAccessoryConfigEvent()()
{
  return 0;
}

void FormatPuzzleEmbedViewController.puzzleColorTheme.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1BA9D6AC0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1BA9D6AC8(uint64_t a1, uint64_t a2)
{
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BA9D6B20()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  sub_1BB8745E4();
  swift_bridgeObjectRetain();
  v2 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X10 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  swift_retain();
  sub_1BA9E12BC(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  *v6 = v0;
  return 1;
}

uint64_t sub_1BA9D6D8C(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;

  v5 = *v2;
  sub_1BB8745CC();
  v20 = v2;
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v6 = sub_1BB874608();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v20;
    *v20 = 0x8000000000000000;
    sub_1BA9E15E8(a2, v8, isUniquelyReferenced_nonNull_native);
    *v20 = v21;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_30;
  }
  v9 = ~v7;
  while (1)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v8);
    v11 = 0xD000000000000021;
    if (v10 != 1)
      v11 = 0x7461636572706564;
    v12 = 0xEA00000000006465;
    if (v10 == 1)
      v12 = 0x80000001BB95C6F0;
    v13 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v8) ? v11 : 0xD000000000000014;
    v14 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v8) ? v12 : 0x80000001BB95C6D0;
    if ((_BYTE)a2)
    {
      if (a2 == 1)
        v15 = 0xD000000000000021;
      else
        v15 = 0x7461636572706564;
      if (a2 == 1)
        v16 = 0x80000001BB95C6F0;
      else
        v16 = 0xEA00000000006465;
      if (v13 != v15)
        goto LABEL_24;
    }
    else
    {
      v16 = 0x80000001BB95C6D0;
      if (v13 != 0xD000000000000014)
        goto LABEL_24;
    }
    if (v14 == v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
LABEL_24:
    v17 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      break;
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_26;
  }
  swift_bridgeObjectRelease();
LABEL_29:
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v20 + 48) + v8);
LABEL_30:
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9D7034(_QWORD *a1, void *a2)
{
  return sub_1BA9DB5D0(a1, a2, (unint64_t *)&qword_1ED3B97E0, 0x1E0D58C60, (unint64_t *)&qword_1ED39DAF8, (unint64_t *)&qword_1ED3B97F0);
}

uint64_t sub_1BA9D7058(_BYTE *a1, uint64_t a2)
{
  return sub_1BA9DA970(a1, a2, &qword_1ED3C04A8, (void (*)(void))sub_1BA865EAC);
}

uint64_t sub_1BA9D7074(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_1BB8745CC();
  sub_1BB8745D8();
  v6 = sub_1BB874608();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_1BA9E194C(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9D7190(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;

  v5 = *v2;
  sub_1BB8745CC();
  v18 = v2;
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v6 = sub_1BB874608();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v18;
    *v18 = 0x8000000000000000;
    sub_1BA9E1ACC(a2, v8, isUniquelyReferenced_nonNull_native);
    *v18 = v19;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_25;
  }
  v9 = ~v7;
  while (1)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 48) + v8))
    {
      if (*(_BYTE *)(*(_QWORD *)(v5 + 48) + v8) == 1)
      {
        v10 = 0x80000001BB95E570;
        v11 = 0xD000000000000010;
        v12 = a2;
        if ((_BYTE)a2)
          goto LABEL_8;
      }
      else
      {
        v10 = 0xE400000000000000;
        v11 = 1752461154;
        v12 = a2;
        if ((_BYTE)a2)
        {
LABEL_8:
          if (v12 == 1)
            v13 = 0xD000000000000010;
          else
            v13 = 1752461154;
          if (v12 == 1)
            v14 = 0x80000001BB95E570;
          else
            v14 = 0xE400000000000000;
          if (v11 != v13)
            goto LABEL_19;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v11 = 0x6E4572657474656CLL;
      v10 = 0xEB00000000797274;
      v12 = a2;
      if ((_BYTE)a2)
        goto LABEL_8;
    }
    v14 = 0xEB00000000797274;
    if (v11 != 0x6E4572657474656CLL)
      goto LABEL_19;
LABEL_18:
    if (v10 == v14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
LABEL_19:
    v15 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      break;
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_21;
  }
  swift_bridgeObjectRelease();
LABEL_24:
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v18 + 48) + v8);
LABEL_25:
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9D742C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v25;

  v6 = *v3;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  FeedItem.Kind.hash(into:)();
  v7 = sub_1BB874608();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v23;
    *v23 = 0x8000000000000000;
    sub_1BA75A650(a2, a3);
    sub_1BA9E1D80(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *v23 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v10 = ~v8;
  while (2)
  {
    v11 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
    v12 = *v11;
    v13 = v11[1];
    switch(v13)
    {
      case 0uLL:
        if (a3)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0);
        v18 = a2;
        v19 = 0;
        goto LABEL_48;
      case 1uLL:
        if (a3 != 1)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 1uLL);
        v18 = a2;
        v19 = 1;
        goto LABEL_48;
      case 2uLL:
        if (a3 != 2)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 2uLL);
        v18 = a2;
        v19 = 2;
        goto LABEL_48;
      case 3uLL:
        if (a3 != 3)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 3uLL);
        v18 = a2;
        v19 = 3;
        goto LABEL_48;
      case 4uLL:
        if (a3 != 4)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 4uLL);
        v18 = a2;
        v19 = 4;
        goto LABEL_48;
      case 5uLL:
        if (a3 != 5)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 5uLL);
        v18 = a2;
        v19 = 5;
        goto LABEL_48;
      case 6uLL:
        if (a3 != 6)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 6uLL);
        v18 = a2;
        v19 = 6;
        goto LABEL_48;
      case 7uLL:
        if (a3 != 7)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 7uLL);
        v18 = a2;
        v19 = 7;
        goto LABEL_48;
      case 8uLL:
        if (a3 != 8)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 8uLL);
        v18 = a2;
        v19 = 8;
        goto LABEL_48;
      case 9uLL:
        if (a3 != 9)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 9uLL);
        v18 = a2;
        v19 = 9;
        goto LABEL_48;
      case 0xAuLL:
        if (a3 != 10)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xAuLL);
        v18 = a2;
        v19 = 10;
        goto LABEL_48;
      case 0xBuLL:
        if (a3 != 11)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xBuLL);
        v18 = a2;
        v19 = 11;
        goto LABEL_48;
      case 0xCuLL:
        if (a3 != 12)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xCuLL);
        v18 = a2;
        v19 = 12;
        goto LABEL_48;
      case 0xDuLL:
        if (a3 != 13)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xDuLL);
        v18 = a2;
        v19 = 13;
        goto LABEL_48;
      case 0xEuLL:
        if (a3 != 14)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xEuLL);
        v18 = a2;
        v19 = 14;
        goto LABEL_48;
      case 0xFuLL:
        if (a3 != 15)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0xFuLL);
        v18 = a2;
        v19 = 15;
        goto LABEL_48;
      case 0x10uLL:
        if (a3 != 16)
          goto LABEL_44;
        sub_1BA6E0CBC(*v11, 0x10uLL);
        v18 = a2;
        v19 = 16;
LABEL_48:
        sub_1BA6E0CBC(v18, v19);
        swift_bridgeObjectRelease();
        goto LABEL_49;
      default:
        if (a3 < 0x11)
        {
LABEL_44:
          sub_1BA75A650(a2, a3);
          sub_1BA75A650(v12, v13);
          sub_1BA6E0CBC(v12, v13);
          sub_1BA6E0CBC(a2, a3);
LABEL_45:
          v9 = (v9 + 1) & v10;
          if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
            goto LABEL_46;
          continue;
        }
        if (v12 != a2 || v13 != a3)
        {
          v15 = sub_1BB874398();
          sub_1BA75A650(a2, a3);
          sub_1BA75A650(v12, v13);
          sub_1BA6E0CBC(v12, v13);
          sub_1BA6E0CBC(a2, a3);
          if ((v15 & 1) != 0)
            goto LABEL_52;
          goto LABEL_45;
        }
        sub_1BA75A650(a2, a3);
        sub_1BA75A650(a2, a3);
        sub_1BA6E0CBC(a2, a3);
        sub_1BA6E0CBC(a2, a3);
LABEL_52:
        swift_bridgeObjectRelease();
        sub_1BA6E0CBC(a2, a3);
LABEL_49:
        v20 = (uint64_t *)(*(_QWORD *)(*v23 + 48) + 16 * v9);
        v21 = *v20;
        v22 = v20[1];
        *a1 = *v20;
        a1[1] = v22;
        sub_1BA75A650(v21, v22);
        return 0;
    }
  }
}

uint64_t sub_1BA9D78EC(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = *v2;
  sub_1BB8745CC();
  v17 = v2;
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v5 = sub_1BB874608();
  v6 = -1 << *(_BYTE *)(v19 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v19 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v17;
    *v17 = 0x8000000000000000;
    sub_1BA9E2100(a2, v7, isUniquelyReferenced_nonNull_native);
    *v17 = v20;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_29;
  }
  v18 = ~v6;
  while (1)
  {
    v8 = 0xD00000000000001CLL;
    if (*(_BYTE *)(*(_QWORD *)(v19 + 48) + v7) == 1)
    {
      v9 = 0x80000001BB959F60;
    }
    else
    {
      v8 = 0xD000000000000028;
      v9 = 0x80000001BB959F80;
    }
    v10 = *(_BYTE *)(*(_QWORD *)(v19 + 48) + v7) ? v8 : 0xD000000000000010;
    v11 = *(_BYTE *)(*(_QWORD *)(v19 + 48) + v7) ? v9 : 0x80000001BB959F40;
    if ((_BYTE)a2)
    {
      if (a2 == 1)
        v12 = 0xD00000000000001CLL;
      else
        v12 = 0xD000000000000028;
      if (a2 == 1)
        v13 = 0x80000001BB959F60;
      else
        v13 = 0x80000001BB959F80;
      if (v10 != v12)
        goto LABEL_23;
    }
    else
    {
      v13 = 0x80000001BB959F40;
      if (v10 != 0xD000000000000010)
        goto LABEL_23;
    }
    if (v11 == v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
LABEL_23:
    v14 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      break;
    v7 = (v7 + 1) & v18;
    if (((*(_QWORD *)(v19 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v17 + 48) + v7);
LABEL_29:
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9D7B94(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;

  v6 = *v3;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  FormatItemKind.hash(into:)();
  v7 = sub_1BB874608();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *v24;
    *v24 = 0x8000000000000000;
    sub_1BA682148(a2, a3);
    sub_1BA9E23C0(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *v24 = v26;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v10 = ~v8;
  while (2)
  {
    v11 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
    v12 = *v11;
    v13 = v11[1];
    switch(v13)
    {
      case 0uLL:
        if (a3)
          goto LABEL_40;
        sub_1BA766C18(*v11, 0);
        v18 = 0;
        goto LABEL_45;
      case 1uLL:
        if (a3 != 1)
          goto LABEL_40;
        v18 = 1;
        sub_1BA766C18(*v11, 1uLL);
        goto LABEL_45;
      case 2uLL:
        if (a3 != 2)
          goto LABEL_40;
        v18 = 2;
        sub_1BA766C18(*v11, 2uLL);
        goto LABEL_45;
      case 3uLL:
        if (a3 != 3)
          goto LABEL_40;
        v18 = 3;
        sub_1BA766C18(*v11, 3uLL);
        goto LABEL_45;
      case 4uLL:
        if (a3 != 4)
          goto LABEL_40;
        v18 = 4;
        sub_1BA766C18(*v11, 4uLL);
        goto LABEL_45;
      case 5uLL:
        if (a3 != 5)
          goto LABEL_40;
        v18 = 5;
        sub_1BA766C18(*v11, 5uLL);
        goto LABEL_45;
      case 6uLL:
        if (a3 != 6)
          goto LABEL_40;
        v18 = 6;
        sub_1BA766C18(*v11, 6uLL);
        goto LABEL_45;
      case 7uLL:
        if (a3 != 7)
          goto LABEL_40;
        v18 = 7;
        sub_1BA766C18(*v11, 7uLL);
        goto LABEL_45;
      case 8uLL:
        if (a3 != 8)
          goto LABEL_40;
        v18 = 8;
        sub_1BA766C18(*v11, 8uLL);
        goto LABEL_45;
      case 9uLL:
        if (a3 != 9)
          goto LABEL_40;
        v18 = 9;
        sub_1BA766C18(*v11, 9uLL);
        goto LABEL_45;
      case 0xAuLL:
        if (a3 != 10)
          goto LABEL_40;
        v18 = 10;
        sub_1BA766C18(*v11, 0xAuLL);
        goto LABEL_45;
      case 0xBuLL:
        if (a3 != 11)
          goto LABEL_40;
        v18 = 11;
        sub_1BA766C18(*v11, 0xBuLL);
        goto LABEL_45;
      case 0xCuLL:
        if (a3 != 12)
          goto LABEL_40;
        v18 = 12;
        sub_1BA766C18(*v11, 0xCuLL);
        goto LABEL_45;
      case 0xDuLL:
        if (a3 != 13)
          goto LABEL_40;
        v18 = 13;
        sub_1BA766C18(*v11, 0xDuLL);
        goto LABEL_45;
      case 0xEuLL:
        if (a3 != 14)
          goto LABEL_40;
        v18 = 14;
        sub_1BA766C18(*v11, 0xEuLL);
        goto LABEL_45;
      default:
        if (a3 < 0xF)
        {
LABEL_40:
          sub_1BA682148(a2, a3);
          sub_1BA682148(v12, v13);
          sub_1BA766C18(v12, v13);
          sub_1BA766C18(a2, a3);
          goto LABEL_41;
        }
        if (v12 != a2 || v13 != a3)
        {
          v15 = sub_1BB874398();
          sub_1BA682148(a2, a3);
          sub_1BA682148(v12, v13);
          sub_1BA766C18(v12, v13);
          sub_1BA766C18(a2, a3);
          if ((v15 & 1) != 0)
          {
            v23 = v24;
            v22 = a1;
            goto LABEL_46;
          }
LABEL_41:
          v9 = (v9 + 1) & v10;
          if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
            goto LABEL_42;
          continue;
        }
        sub_1BA682148(a2, a3);
        sub_1BA682148(a2, a3);
        sub_1BA766C18(a2, a3);
        v18 = a3;
LABEL_45:
        v23 = v24;
        v22 = a1;
        sub_1BA766C18(a2, v18);
LABEL_46:
        swift_bridgeObjectRelease();
        sub_1BA766C18(a2, a3);
        v19 = (uint64_t *)(*(_QWORD *)(*v23 + 48) + 16 * v9);
        v20 = *v19;
        v21 = v19[1];
        *v22 = *v19;
        v22[1] = v21;
        sub_1BA682148(v20, v21);
        return 0;
    }
  }
}

uint64_t sub_1BA9D7FD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *v4;
  sub_1BB8745CC();
  sub_1BB8745D8();
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  v10 = sub_1BB874608();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  v24 = v4;
  v25 = a1;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v9 + 48);
    do
    {
      v15 = v14 + 24 * v12;
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (*(_BYTE *)(v15 + 16))
      {
        if (v16 == 1)
        {
          if (a4 != 1)
            goto LABEL_4;
        }
        else if (a4 != 2)
        {
          goto LABEL_4;
        }
      }
      else if (a4)
      {
        goto LABEL_4;
      }
      v17 = *(_QWORD *)v15 == a2 && *(_QWORD *)(v15 + 8) == a3;
      if (v17 || (sub_1BB874398() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1BA8D5088(a2, a3, v16);
        v18 = *(_QWORD *)(*v24 + 48) + 24 * v12;
        v19 = *(_QWORD *)v18;
        v20 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)v25 = *(_QWORD *)v18;
        *(_QWORD *)(v25 + 8) = v20;
        v21 = *(_BYTE *)(v18 + 16);
        *(_BYTE *)(v25 + 16) = v21;
        sub_1BA8D4E00(v19, v20, v21);
        return 0;
      }
LABEL_4:
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26 = *v24;
  *v24 = 0x8000000000000000;
  sub_1BA8D4E00(a2, a3, a4);
  sub_1BA9E2720(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
  *v24 = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)v25 = a2;
  *(_QWORD *)(v25 + 8) = a3;
  result = 1;
  *(_BYTE *)(v25 + 16) = a4;
  return result;
}

uint64_t sub_1BA9D81CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(unint64_t, uint64_t, unint64_t);
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[8];

  v3 = v2;
  v95 = a1;
  v5 = type metadata accessor for FormatVersionRequirement(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9ED538(0, (unint64_t *)&qword_1EF2A96D0, (void (*)(uint64_t))sub_1BA8E5458);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v82 - v11;
  sub_1BA8E5458();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v88 = (uint64_t)&v82 - v17;
  v18 = type metadata accessor for FormatDerivedDataOptionReferenceResolution(0);
  MEMORY[0x1E0C80A78](v18);
  v90 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9ED538(0, (unint64_t *)&qword_1EF2A99E0, v20);
  v92 = v21;
  MEMORY[0x1E0C80A78](v21);
  v93 = (uint64_t)&v82 - v22;
  v91 = type metadata accessor for FormatDerivedDataResultOptionReference(0);
  v23 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v101 = (uint64_t)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v94 = (uint64_t)&v82 - v26;
  v27 = *v3;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  v102 = (uint64_t *)a2;
  sub_1BA8D7C4C((uint64_t)v106);
  v28 = sub_1BB874608();
  v29 = -1 << *(_BYTE *)(v27 + 32);
  v30 = v28 & ~v29;
  v31 = v27;
  v32 = v30;
  v100 = v31 + 56;
  if (((*(_QWORD *)(v31 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
  {
    v83 = v15;
    v84 = v12;
    v85 = v10;
    v82 = v8;
    v86 = v6;
    v87 = v5;
    v89 = v3;
    v97 = ~v29;
    v99 = *(_QWORD *)(v23 + 72);
    v33 = v101;
    v98 = v31;
    while (1)
    {
      v34 = *(_QWORD *)(v31 + 48);
      v103 = v32;
      v96 = v99 * v32;
      sub_1BA4C2DD8(v34 + v99 * v32, v33, type metadata accessor for FormatDerivedDataResultOptionReference);
      v35 = *(_QWORD *)v33;
      v36 = *v102;
      v104 = *(_QWORD *)(*(_QWORD *)v33 + 16);
      v105 = v36;
      if (v104 != *(_QWORD *)(v36 + 16))
        goto LABEL_5;
      if (v104)
        v37 = v35 == v105;
      else
        v37 = 1;
      if (v37)
      {
LABEL_12:
        v38 = *(_QWORD *)(v101 + 24);
        v39 = *(_QWORD *)(v101 + 32);
        v40 = v102[3];
        v5 = v102[4];
        if ((*(_QWORD *)(v101 + 8) != v102[1] || *(_QWORD *)(v101 + 16) != v102[2]) && (sub_1BB874398() & 1) == 0
          || (sub_1BA857260(v38, v40) & 1) == 0
          || v39 != v5)
        {
          goto LABEL_5;
        }
        v42 = *(_QWORD *)(v101 + 40);
        v41 = *(_QWORD *)(v101 + 48);
        v8 = *(unsigned __int8 *)(v101 + 56);
        v43 = v102[5];
        v5 = v102[6];
        v10 = *((unsigned __int8 *)v102 + 56);
        if (*(_BYTE *)(v101 + 56))
        {
          if ((_DWORD)v8 == 1)
          {
            if ((_DWORD)v10 == 1)
            {
              if (v42 != v43 || v41 != v5)
              {
                v8 = sub_1BB874398();
                sub_1BA8D4E00(v43, v5, 1u);
                sub_1BA8D4E00(v42, v41, 1u);
                sub_1BA8D5088(v42, v41, 1u);
                sub_1BA8D5088(v43, v5, 1u);
                if ((v8 & 1) == 0)
                  goto LABEL_5;
                goto LABEL_142;
              }
LABEL_141:
              sub_1BA8D4E00(v42, v41, v8);
              sub_1BA8D4E00(v42, v41, v8);
              sub_1BA8D5088(v42, v41, v8);
              sub_1BA8D5088(v42, v41, v8);
              goto LABEL_142;
            }
LABEL_4:
            sub_1BA8D4E00(v102[5], v102[6], *((_BYTE *)v102 + 56));
            sub_1BA8D4E00(v42, v41, v8);
            sub_1BA8D5088(v42, v41, v8);
            sub_1BA8D5088(v43, v5, v10);
            goto LABEL_5;
          }
          if ((_DWORD)v10 != 2)
            goto LABEL_4;
          if (v42 == v43 && v41 == v5)
            goto LABEL_141;
          v8 = sub_1BB874398();
          sub_1BA8D4E00(v43, v5, 2u);
          sub_1BA8D4E00(v42, v41, 2u);
          sub_1BA8D5088(v42, v41, 2u);
          sub_1BA8D5088(v43, v5, 2u);
          if ((v8 & 1) == 0)
            goto LABEL_5;
        }
        else
        {
          if (*((_BYTE *)v102 + 56))
            goto LABEL_4;
          if (v42 == v43 && v41 == v5)
            goto LABEL_141;
          v8 = sub_1BB874398();
          sub_1BA8D4E00(v43, v5, 0);
          sub_1BA8D4E00(v42, v41, 0);
          sub_1BA8D5088(v42, v41, 0);
          sub_1BA8D5088(v43, v5, 0);
          if ((v8 & 1) == 0)
            goto LABEL_5;
        }
LABEL_142:
        v62 = *(int *)(v91 + 28);
        v10 = v101;
        v63 = (uint64_t)v102 + v62;
        v8 = v93;
        v64 = v93 + *(int *)(v92 + 48);
        sub_1BA4C2DD8(v101 + v62, v93, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
        sub_1BA4C2DD8(v63, v64, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
        sub_1BA8D4E18();
        v66 = v65;
        v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48);
        if (v67(v8, 1, v65) == 1)
        {
          if (v67(v64, 1, v66) == 1)
          {
LABEL_172:
            sub_1BA4A2E80(v8, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
            sub_1BA4A2E80(v10, type metadata accessor for FormatDerivedDataResultOptionReference);
            swift_bridgeObjectRelease();
            sub_1BA4A2E80((uint64_t)v102, type metadata accessor for FormatDerivedDataResultOptionReference);
            sub_1BA4C2DD8(*(_QWORD *)(*v89 + 48) + v96, v95, type metadata accessor for FormatDerivedDataResultOptionReference);
            return 0;
          }
LABEL_147:
          sub_1BA9ED590(v8, (unint64_t *)&qword_1EF2A99E0, (void (*)(uint64_t))type metadata accessor for FormatDerivedDataOptionReferenceResolution);
          goto LABEL_5;
        }
        v68 = v90;
        sub_1BA4C2DD8(v8, v90, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
        if (v67(v64, 1, v66) == 1)
        {
          sub_1BA4A2E80(v68, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          goto LABEL_147;
        }
        v69 = v88;
        sub_1BA5193C4(v64, v88, (uint64_t (*)(_QWORD))sub_1BA8E5458);
        v5 = (unint64_t)v84;
        v70 = (uint64_t)&v84[*(int *)(v85 + 48)];
        sub_1BA5193C4(v68, (uint64_t)v84, (uint64_t (*)(_QWORD))sub_1BA8E5458);
        sub_1BA4C2DD8(v69, v70, (uint64_t (*)(_QWORD))sub_1BA8E5458);
        v71 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t))(v86 + 48);
        v72 = v87;
        v73 = v71(v5, 1, v87);
        v74 = (uint64_t)v83;
        if (v73 == 1)
        {
          sub_1BA4A2E80(v69, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          if (v71(v70, 1, v72) == 1)
          {
LABEL_171:
            sub_1BA4A2E80(v5, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            goto LABEL_172;
          }
LABEL_156:
          sub_1BA9ED590(v5, (unint64_t *)&qword_1EF2A96D0, (void (*)(uint64_t))sub_1BA8E5458);
        }
        else
        {
          sub_1BA4C2DD8(v5, (uint64_t)v83, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          if (v71(v70, 1, v72) == 1)
          {
            sub_1BA4A2E80(v69, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            sub_1BA4A2E80(v74, type metadata accessor for FormatVersionRequirement);
            goto LABEL_156;
          }
          v75 = v82;
          sub_1BA5193C4(v70, v82, type metadata accessor for FormatVersionRequirement);
          v76 = sub_1BA9FD2E0(v74, v75);
          sub_1BA4A2E80(v75, type metadata accessor for FormatVersionRequirement);
          sub_1BA4A2E80(v69, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          sub_1BA4A2E80(v74, type metadata accessor for FormatVersionRequirement);
          sub_1BA4A2E80(v5, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          if ((v76 & 1) != 0)
            goto LABEL_172;
        }
        sub_1BA4A2E80(v8, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
        goto LABEL_5;
      }
      v44 = 0;
      v45 = (unsigned __int8 *)(v105 + 48);
      v46 = (unsigned __int8 *)(v35 + 48);
      while (1)
      {
        if (v44 >= *(_QWORD *)(v105 + 16))
        {
          __break(1u);
          goto LABEL_171;
        }
        v8 = *((_QWORD *)v46 - 2);
        v48 = *((_QWORD *)v46 - 1);
        v49 = *v46;
        v10 = *((_QWORD *)v45 - 2);
        v5 = *((_QWORD *)v45 - 1);
        v50 = *v45;
        if (!(v49 >> 6))
        {
          if (v50 >= 0x40)
          {
LABEL_136:
            sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
            sub_1BA895B64(v8, v48, v49);
            v56 = v8;
            v57 = v48;
            v58 = v49;
            goto LABEL_165;
          }
          if (v8 == v10 && v48 == v5)
          {
            sub_1BA895B64(*((_QWORD *)v46 - 2), *((_QWORD *)v46 - 1), *v45);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA895B84(v8, v48, v49);
            sub_1BA895B84(v8, v48, v50);
          }
          else
          {
            v54 = sub_1BB874398();
            sub_1BA895B64(v10, v5, v50);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA895B84(v8, v48, v49);
            sub_1BA895B84(v10, v5, v50);
            if ((v54 & 1) == 0)
              goto LABEL_5;
          }
          if (((v49 ^ v50) & 1) != 0)
            goto LABEL_5;
          goto LABEL_26;
        }
        if (v49 >> 6 != 1)
          break;
        if ((v50 & 0xC0) != 0x40)
          goto LABEL_136;
        switch(v48)
        {
          case 0uLL:
            if (v5)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0, *v45);
            sub_1BA895B64(v10, 0, v50);
            sub_1BA895B64(v10, 0, v50);
            sub_1BA895B64(v8, 0, v49);
            sub_1BA766C18(v8, 0);
            sub_1BA766C18(v10, 0);
            sub_1BA895B84(v8, 0, v49);
            sub_1BA895B84(v10, 0, v50);
            sub_1BA895B84(v10, 0, v50);
            sub_1BA895B84(v8, 0, v49);
            sub_1BA895B84(v10, 0, v50);
            v51 = v8;
            v52 = 0;
            goto LABEL_24;
          case 1uLL:
            if (v5 != 1)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 1uLL, *v45);
            sub_1BA895B64(v10, 1uLL, v50);
            sub_1BA895B64(v10, 1uLL, v50);
            sub_1BA895B64(v8, 1uLL, v49);
            sub_1BA766C18(v8, 1uLL);
            sub_1BA766C18(v10, 1uLL);
            sub_1BA895B84(v8, 1uLL, v49);
            sub_1BA895B84(v10, 1uLL, v50);
            sub_1BA895B84(v10, 1uLL, v50);
            sub_1BA895B84(v8, 1uLL, v49);
            sub_1BA895B84(v10, 1uLL, v50);
            v51 = v8;
            v52 = 1;
            goto LABEL_24;
          case 2uLL:
            if (v5 != 2)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 2uLL, *v45);
            sub_1BA895B64(v10, 2uLL, v50);
            sub_1BA895B64(v10, 2uLL, v50);
            sub_1BA895B64(v8, 2uLL, v49);
            sub_1BA766C18(v8, 2uLL);
            sub_1BA766C18(v10, 2uLL);
            sub_1BA895B84(v8, 2uLL, v49);
            sub_1BA895B84(v10, 2uLL, v50);
            sub_1BA895B84(v10, 2uLL, v50);
            sub_1BA895B84(v8, 2uLL, v49);
            sub_1BA895B84(v10, 2uLL, v50);
            v51 = v8;
            v52 = 2;
            goto LABEL_24;
          case 3uLL:
            if (v5 != 3)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 3uLL, *v45);
            sub_1BA895B64(v10, 3uLL, v50);
            sub_1BA895B64(v10, 3uLL, v50);
            sub_1BA895B64(v8, 3uLL, v49);
            sub_1BA766C18(v8, 3uLL);
            sub_1BA766C18(v10, 3uLL);
            sub_1BA895B84(v8, 3uLL, v49);
            sub_1BA895B84(v10, 3uLL, v50);
            sub_1BA895B84(v10, 3uLL, v50);
            sub_1BA895B84(v8, 3uLL, v49);
            sub_1BA895B84(v10, 3uLL, v50);
            v51 = v8;
            v52 = 3;
            goto LABEL_24;
          case 4uLL:
            if (v5 != 4)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 4uLL, *v45);
            sub_1BA895B64(v10, 4uLL, v50);
            sub_1BA895B64(v10, 4uLL, v50);
            sub_1BA895B64(v8, 4uLL, v49);
            sub_1BA766C18(v8, 4uLL);
            sub_1BA766C18(v10, 4uLL);
            sub_1BA895B84(v8, 4uLL, v49);
            sub_1BA895B84(v10, 4uLL, v50);
            sub_1BA895B84(v10, 4uLL, v50);
            sub_1BA895B84(v8, 4uLL, v49);
            sub_1BA895B84(v10, 4uLL, v50);
            v51 = v8;
            v52 = 4;
            goto LABEL_24;
          case 5uLL:
            if (v5 != 5)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 5uLL, *v45);
            sub_1BA895B64(v10, 5uLL, v50);
            sub_1BA895B64(v10, 5uLL, v50);
            sub_1BA895B64(v8, 5uLL, v49);
            sub_1BA766C18(v8, 5uLL);
            sub_1BA766C18(v10, 5uLL);
            sub_1BA895B84(v8, 5uLL, v49);
            sub_1BA895B84(v10, 5uLL, v50);
            sub_1BA895B84(v10, 5uLL, v50);
            sub_1BA895B84(v8, 5uLL, v49);
            sub_1BA895B84(v10, 5uLL, v50);
            v51 = v8;
            v52 = 5;
            goto LABEL_24;
          case 6uLL:
            if (v5 != 6)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 6uLL, *v45);
            sub_1BA895B64(v10, 6uLL, v50);
            sub_1BA895B64(v10, 6uLL, v50);
            sub_1BA895B64(v8, 6uLL, v49);
            sub_1BA766C18(v8, 6uLL);
            sub_1BA766C18(v10, 6uLL);
            sub_1BA895B84(v8, 6uLL, v49);
            sub_1BA895B84(v10, 6uLL, v50);
            sub_1BA895B84(v10, 6uLL, v50);
            sub_1BA895B84(v8, 6uLL, v49);
            sub_1BA895B84(v10, 6uLL, v50);
            v51 = v8;
            v52 = 6;
            goto LABEL_24;
          case 7uLL:
            if (v5 != 7)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 7uLL, *v45);
            sub_1BA895B64(v10, 7uLL, v50);
            sub_1BA895B64(v10, 7uLL, v50);
            sub_1BA895B64(v8, 7uLL, v49);
            sub_1BA766C18(v8, 7uLL);
            sub_1BA766C18(v10, 7uLL);
            sub_1BA895B84(v8, 7uLL, v49);
            sub_1BA895B84(v10, 7uLL, v50);
            sub_1BA895B84(v10, 7uLL, v50);
            sub_1BA895B84(v8, 7uLL, v49);
            sub_1BA895B84(v10, 7uLL, v50);
            v51 = v8;
            v52 = 7;
            goto LABEL_24;
          case 8uLL:
            if (v5 != 8)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 8uLL, *v45);
            sub_1BA895B64(v10, 8uLL, v50);
            sub_1BA895B64(v10, 8uLL, v50);
            sub_1BA895B64(v8, 8uLL, v49);
            sub_1BA766C18(v8, 8uLL);
            sub_1BA766C18(v10, 8uLL);
            sub_1BA895B84(v8, 8uLL, v49);
            sub_1BA895B84(v10, 8uLL, v50);
            sub_1BA895B84(v10, 8uLL, v50);
            sub_1BA895B84(v8, 8uLL, v49);
            sub_1BA895B84(v10, 8uLL, v50);
            v51 = v8;
            v52 = 8;
            goto LABEL_24;
          case 9uLL:
            if (v5 != 9)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 9uLL, *v45);
            sub_1BA895B64(v10, 9uLL, v50);
            sub_1BA895B64(v10, 9uLL, v50);
            sub_1BA895B64(v8, 9uLL, v49);
            sub_1BA766C18(v8, 9uLL);
            sub_1BA766C18(v10, 9uLL);
            sub_1BA895B84(v8, 9uLL, v49);
            sub_1BA895B84(v10, 9uLL, v50);
            sub_1BA895B84(v10, 9uLL, v50);
            sub_1BA895B84(v8, 9uLL, v49);
            sub_1BA895B84(v10, 9uLL, v50);
            v51 = v8;
            v52 = 9;
            goto LABEL_24;
          case 0xAuLL:
            if (v5 != 10)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0xAuLL, *v45);
            sub_1BA895B64(v10, 0xAuLL, v50);
            sub_1BA895B64(v10, 0xAuLL, v50);
            sub_1BA895B64(v8, 0xAuLL, v49);
            sub_1BA766C18(v8, 0xAuLL);
            sub_1BA766C18(v10, 0xAuLL);
            sub_1BA895B84(v8, 0xAuLL, v49);
            sub_1BA895B84(v10, 0xAuLL, v50);
            sub_1BA895B84(v10, 0xAuLL, v50);
            sub_1BA895B84(v8, 0xAuLL, v49);
            sub_1BA895B84(v10, 0xAuLL, v50);
            v51 = v8;
            v52 = 10;
            goto LABEL_24;
          case 0xBuLL:
            if (v5 != 11)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0xBuLL, *v45);
            sub_1BA895B64(v10, 0xBuLL, v50);
            sub_1BA895B64(v10, 0xBuLL, v50);
            sub_1BA895B64(v8, 0xBuLL, v49);
            sub_1BA766C18(v8, 0xBuLL);
            sub_1BA766C18(v10, 0xBuLL);
            sub_1BA895B84(v8, 0xBuLL, v49);
            sub_1BA895B84(v10, 0xBuLL, v50);
            sub_1BA895B84(v10, 0xBuLL, v50);
            sub_1BA895B84(v8, 0xBuLL, v49);
            sub_1BA895B84(v10, 0xBuLL, v50);
            v51 = v8;
            v52 = 11;
            goto LABEL_24;
          case 0xCuLL:
            if (v5 != 12)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0xCuLL, *v45);
            sub_1BA895B64(v10, 0xCuLL, v50);
            sub_1BA895B64(v10, 0xCuLL, v50);
            sub_1BA895B64(v8, 0xCuLL, v49);
            sub_1BA766C18(v8, 0xCuLL);
            sub_1BA766C18(v10, 0xCuLL);
            sub_1BA895B84(v8, 0xCuLL, v49);
            sub_1BA895B84(v10, 0xCuLL, v50);
            sub_1BA895B84(v10, 0xCuLL, v50);
            sub_1BA895B84(v8, 0xCuLL, v49);
            sub_1BA895B84(v10, 0xCuLL, v50);
            v51 = v8;
            v52 = 12;
            goto LABEL_24;
          case 0xDuLL:
            if (v5 != 13)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0xDuLL, *v45);
            sub_1BA895B64(v10, 0xDuLL, v50);
            sub_1BA895B64(v10, 0xDuLL, v50);
            sub_1BA895B64(v8, 0xDuLL, v49);
            sub_1BA766C18(v8, 0xDuLL);
            sub_1BA766C18(v10, 0xDuLL);
            sub_1BA895B84(v8, 0xDuLL, v49);
            sub_1BA895B84(v10, 0xDuLL, v50);
            sub_1BA895B84(v10, 0xDuLL, v50);
            sub_1BA895B84(v8, 0xDuLL, v49);
            sub_1BA895B84(v10, 0xDuLL, v50);
            v51 = v8;
            v52 = 13;
            goto LABEL_24;
          case 0xEuLL:
            if (v5 != 14)
              goto LABEL_138;
            sub_1BA895B64(*((_QWORD *)v45 - 2), 0xEuLL, *v45);
            sub_1BA895B64(v10, 0xEuLL, v50);
            sub_1BA895B64(v10, 0xEuLL, v50);
            sub_1BA895B64(v8, 0xEuLL, v49);
            sub_1BA766C18(v8, 0xEuLL);
            sub_1BA766C18(v10, 0xEuLL);
            sub_1BA895B84(v8, 0xEuLL, v49);
            sub_1BA895B84(v10, 0xEuLL, v50);
            sub_1BA895B84(v10, 0xEuLL, v50);
            sub_1BA895B84(v8, 0xEuLL, v49);
            sub_1BA895B84(v10, 0xEuLL, v50);
            v51 = v8;
            v52 = 14;
LABEL_24:
            v47 = v49;
            goto LABEL_25;
          default:
            if (v5 < 0xF)
            {
LABEL_138:
              sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
              sub_1BA895B64(v8, v48, v49);
              sub_1BA895B64(v10, v5, v50);
              sub_1BA895B64(v8, v48, v49);
              sub_1BA895B64(v10, v5, v50);
              sub_1BA895B64(v8, v48, v49);
              sub_1BA895B64(v10, v5, v50);
              sub_1BA895B64(v8, v48, v49);
              sub_1BA766C18(v8, v48);
              sub_1BA766C18(v10, v5);
              sub_1BA895B84(v8, v48, v49);
              sub_1BA895B84(v10, v5, v50);
              sub_1BA895B84(v10, v5, v50);
              sub_1BA895B84(v8, v48, v49);
              sub_1BA895B84(v10, v5, v50);
              v59 = v8;
              v60 = v48;
              v61 = v49;
              goto LABEL_166;
            }
            if (v8 == v10 && v48 == v5)
              v55 = 1;
            else
              v55 = sub_1BB874398();
            sub_1BA895B64(v10, v5, v50);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA895B64(v10, v5, v50);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA895B64(v10, v5, v50);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA895B64(v10, v5, v50);
            sub_1BA895B64(v8, v48, v49);
            sub_1BA766C18(v8, v48);
            sub_1BA766C18(v10, v5);
            sub_1BA895B84(v8, v48, v49);
            sub_1BA895B84(v10, v5, v50);
            sub_1BA895B84(v10, v5, v50);
            sub_1BA895B84(v8, v48, v49);
            sub_1BA895B84(v10, v5, v50);
            sub_1BA895B84(v8, v48, v49);
            if ((v55 & 1) == 0)
              goto LABEL_5;
            break;
        }
LABEL_26:
        ++v44;
        v46 += 24;
        v45 += 24;
        if (v104 == v44)
          goto LABEL_12;
      }
      if (!(v48 | v8) && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v5 | v10 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 0;
          goto LABEL_164;
        }
        sub_1BA895B84(0, 0, 0x80u);
        v51 = 0;
        goto LABEL_130;
      }
      if (v8 == 1 && !v48 && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v10 != 1 || v5 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 1;
          goto LABEL_164;
        }
        sub_1BA895B84(1, 0, 0x80u);
        v51 = 1;
        goto LABEL_130;
      }
      if (v8 == 2 && !v48 && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v10 != 2 || v5 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 2;
          goto LABEL_164;
        }
        sub_1BA895B84(2, 0, 0x80u);
        v51 = 2;
        goto LABEL_130;
      }
      if (v8 == 3 && !v48 && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v10 != 3 || v5 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 3;
          goto LABEL_164;
        }
        sub_1BA895B84(3, 0, 0x80u);
        v51 = 3;
        goto LABEL_130;
      }
      if (v8 == 4 && !v48 && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v10 != 4 || v5 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 4;
          goto LABEL_164;
        }
        sub_1BA895B84(4, 0, 0x80u);
        v51 = 4;
        goto LABEL_130;
      }
      if (v8 == 5 && !v48 && v49 == 128)
      {
        if ((v50 & 0xC0) != 0x80 || v10 != 5 || v5 || v50 != 128)
        {
          sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
          v56 = 5;
          goto LABEL_164;
        }
        sub_1BA895B84(5, 0, 0x80u);
        v51 = 5;
        goto LABEL_130;
      }
      if ((v50 & 0xC0) == 0x80 && v10 == 6 && !v5 && v50 == 128)
      {
        sub_1BA895B84(6, 0, 0x80u);
        v51 = 6;
LABEL_130:
        v52 = 0;
        v47 = 0x80;
LABEL_25:
        sub_1BA895B84(v51, v52, v47);
        goto LABEL_26;
      }
      sub_1BA895B64(*((_QWORD *)v45 - 2), *((_QWORD *)v45 - 1), *v45);
      v56 = 6;
LABEL_164:
      v57 = 0;
      v58 = 0x80;
LABEL_165:
      sub_1BA895B84(v56, v57, v58);
      v59 = v10;
      v60 = v5;
      v61 = v50;
LABEL_166:
      sub_1BA895B84(v59, v60, v61);
LABEL_5:
      v33 = v101;
      sub_1BA4A2E80(v101, type metadata accessor for FormatDerivedDataResultOptionReference);
      v31 = v98;
      v32 = (v103 + 1) & v97;
      if (((*(_QWORD *)(v100 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v77 = v95;
        v3 = v89;
        goto LABEL_169;
      }
    }
  }
  swift_bridgeObjectRelease();
  v77 = v95;
LABEL_169:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v79 = (uint64_t)v102;
  v80 = v94;
  sub_1BA4C2DD8((uint64_t)v102, v94, type metadata accessor for FormatDerivedDataResultOptionReference);
  v106[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_1BA9E2944(v80, v32, isUniquelyReferenced_nonNull_native);
  *v3 = v106[0];
  swift_bridgeObjectRelease();
  sub_1BA5193C4(v79, v77, type metadata accessor for FormatDerivedDataResultOptionReference);
  return 1;
}

void sub_1BA9D9CB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1BB8745CC();
  __asm { BR              X10 }
}

uint64_t sub_1BA9D9D14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v9;

  sub_1BB8745D8();
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  v6 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v5 + 32));
  if (((*(_QWORD *)(v5 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v1;
  *v1 = 0x8000000000000000;
  sub_1BA9ED4DC((uint64_t)v3, v2, v4);
  sub_1BA9E43EC(v3, v2, v4, v6, isUniquelyReferenced_nonNull_native);
  *v1 = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)v0 = v3;
  *(_QWORD *)(v0 + 8) = v2;
  result = 1;
  *(_BYTE *)(v0 + 16) = v4;
  return result;
}

uint64_t sub_1BA9DA054(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v3 = v2;
  v6 = type metadata accessor for GenericDataVisualization();
  MEMORY[0x1E0C80A78](v6);
  v50 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for WebEmbedDataVisualization();
  v8 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v40 - v12);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v40 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v40 - v18;
  v20 = *v3;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  v51 = a2;
  WebEmbedDataVisualization.identifier.getter();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v21 = sub_1BB874608();
  v22 = -1 << *(_BYTE *)(v20 + 32);
  v23 = v21 & ~v22;
  v47 = v20 + 56;
  if (((*(_QWORD *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v36 = a1;
LABEL_15:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v38 = v51;
    sub_1BA4C2DD8(v51, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    v54 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BA9E46BC((uint64_t)v19, v23, isUniquelyReferenced_nonNull_native);
    *v3 = v54;
    swift_bridgeObjectRelease();
    sub_1BA5193C4(v38, v36, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    return 1;
  }
  v41 = v19;
  v42 = v3;
  v43 = a1;
  v45 = ~v22;
  v49 = *(_QWORD *)(v8 + 72);
  v48 = v20;
  v44 = v13;
  while (1)
  {
    v24 = *(_QWORD *)(v20 + 48);
    v46 = v49 * v23;
    sub_1BA4C2DD8(v24 + v49 * v23, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    sub_1BA4C2DD8((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = v50;
      sub_1BA5193C4((uint64_t)v13, v50, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
      v54 = 0x3A636972656E6567;
      v55 = 0xE90000000000003ALL;
      swift_bridgeObjectRetain();
      sub_1BB872AFC(v26);
      swift_bridgeObjectRelease();
      v28 = v54;
      v27 = v55;
      sub_1BA4A2E80(v25, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
    }
    else
    {
      v53 = *v13;
      v54 = 0x3A3A7374726F7073;
      v55 = 0xE800000000000000;
      SportsDataVisualization.identifier.getter();
      sub_1BB872AFC(v29);
      swift_bridgeObjectRelease();
      swift_release();
      v28 = v54;
      v27 = v55;
    }
    sub_1BA4C2DD8(v51, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    if (swift_getEnumCaseMultiPayload() != 1)
      break;
    v30 = v50;
    sub_1BA5193C4((uint64_t)v10, v50, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
    v54 = 0x3A636972656E6567;
    v55 = 0xE90000000000003ALL;
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v31);
    swift_bridgeObjectRelease();
    v33 = v54;
    v32 = v55;
    v13 = v44;
    sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
    if (v28 == v33)
      goto LABEL_10;
LABEL_11:
    v35 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA4A2E80((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    if ((v35 & 1) != 0)
      goto LABEL_17;
    v23 = (v23 + 1) & v45;
    v20 = v48;
    if (((*(_QWORD *)(v47 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v3 = v42;
      v36 = v43;
      v19 = v41;
      goto LABEL_15;
    }
  }
  v53 = *v10;
  v54 = 0x3A3A7374726F7073;
  v55 = 0xE800000000000000;
  SportsDataVisualization.identifier.getter();
  sub_1BB872AFC(v34);
  swift_bridgeObjectRelease();
  swift_release();
  v32 = v55;
  if (v28 != v54)
    goto LABEL_11;
LABEL_10:
  if (v27 != v32)
    goto LABEL_11;
  swift_bridgeObjectRelease_n();
  sub_1BA4A2E80((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
LABEL_17:
  swift_bridgeObjectRelease();
  sub_1BA4A2E80(v51, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
  sub_1BA4C2DD8(*(_QWORD *)(*v42 + 48) + v46, v43, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
  return 0;
}

uint64_t sub_1BA9DA56C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[9];

  v3 = v2;
  v6 = type metadata accessor for WebEmbedDatastoreCacheKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  sub_1BB41AD48((uint64_t)v22);
  v11 = sub_1BB874608();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = v2;
    v21 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1BA4C2DD8(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      v16 = sub_1BB41CA78((uint64_t)v9, a2);
      sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1BA4A2E80(a2, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    sub_1BA4C2DD8(*(_QWORD *)(*v20 + 48) + v15 * v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1BA4C2DD8(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    v22[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_1BA9E4B80((unint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v22[0];
    swift_bridgeObjectRelease();
    sub_1BA5193C4(a2, a1, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    return 1;
  }
}

uint64_t sub_1BA9DA768(_BYTE *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  uint64_t result;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v21;

  v4 = *v2;
  sub_1BB8745CC();
  v18 = a2 & 1;
  if ((a2 & 1) != 0)
    v5 = 0x746C7561666564;
  else
    v5 = 1685217635;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE400000000000000;
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v7 = sub_1BB874608();
  v8 = -1 << *(_BYTE *)(v4 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0x746C7561666564 : 1685217635;
      v12 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0xE700000000000000 : 0xE400000000000000;
      if (v11 == v5 && v12 == v6)
        break;
      v14 = sub_1BB874398();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_23;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    result = 0;
    v16 = *(_BYTE *)(*(_QWORD *)(*v19 + 48) + v9);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v19;
    *v19 = 0x8000000000000000;
    v16 = v18;
    sub_1BA9E4D80(v18, v9, isUniquelyReferenced_nonNull_native);
    *v19 = v21;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_1BA9DA954(_BYTE *a1, uint64_t a2)
{
  return sub_1BA9DA970(a1, a2, &qword_1EF2ACB88, (void (*)(void))sub_1BA9ED424);
}

uint64_t sub_1BA9DA970(_BYTE *a1, uint64_t a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v9 = *v4;
  sub_1BB8745CC();
  sub_1BB8745D8();
  v10 = sub_1BB874608();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    *v4 = 0x8000000000000000;
    sub_1BA9E541C(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    *v4 = v17;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v9 + 48);
  if (*(unsigned __int8 *)(v13 + v12) != a2)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v13 + v12) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v4 + 48) + v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9DAAB4(char *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v10;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  sub_1BAB0AAD0(v5, a2);
  v7 = v6 & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v10;
  *v10 = 0x8000000000000000;
  sub_1BA9E558C(a2, v7, isUniquelyReferenced_nonNull_native);
  *v10 = v12;
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_1BA9DADA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v12;
  uint64_t v14;

  v8 = *v4;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  sub_1BB36AEB8();
  v9 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v8 + 32));
  if (((*(_QWORD *)(v8 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v12;
  *v12 = 0x8000000000000000;
  sub_1BA9ED468(a2, a3, a4);
  sub_1BA9E58C4(a2, a3, a4, v9, isUniquelyReferenced_nonNull_native);
  *v12 = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 1;
  *(_BYTE *)(a1 + 16) = a4;
  return result;
}

uint64_t sub_1BA9DB168(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1BB871E9C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1BA50AD30(&qword_1EF2A92A8, 255, v11, MEMORY[0x1E0D52FE8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1BB87285C();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1BA50AD30(&qword_1EF2A92B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FF0]);
      v21 = sub_1BB872958();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BA9E5BAC((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1BA9DB3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v12 = *v5;
  sub_1BB8745CC();
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  sub_1BB8745D8();
  sub_1BB8745D8();
  v13 = sub_1BB874608();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  v15 = v13 & ~v14;
  v16 = v12 + 56;
  v28 = v6;
  v29 = a1;
  if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v17 = ~v14;
    v18 = *(_QWORD *)(v12 + 48);
    while (1)
    {
      v20 = (_QWORD *)(v18 + 32 * v15);
      v22 = v20[2];
      v21 = v20[3];
      v23 = *v20 == a2 && v20[1] == a3;
      if ((v23 || (sub_1BB874398() & 1) != 0) && v22 == a4 && v21 == a5)
        break;
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(*v28 + 48) + 32 * v15;
    v27 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)v29 = *(_QWORD *)v26;
    *(_QWORD *)(v29 + 8) = v27;
    *(_OWORD *)(v29 + 16) = *(_OWORD *)(v26 + 16);
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *v28;
    *v28 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_1BA9E5E18(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
    *v28 = v30;
    swift_bridgeObjectRelease();
    *(_QWORD *)v29 = a2;
    *(_QWORD *)(v29 + 8) = a3;
    result = 1;
    *(_QWORD *)(v29 + 16) = a4;
    *(_QWORD *)(v29 + 24) = a5;
  }
  return result;
}

uint64_t sub_1BA9DB5AC(_QWORD *a1, void *a2)
{
  return sub_1BA9DB5D0(a1, a2, (unint64_t *)&qword_1ED3B9950, 0x1E0DC3F10, (unint64_t *)&unk_1EF2A9288, &qword_1EF2A9298);
}

uint64_t sub_1BA9DB5D0(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  unint64_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = v6;
  v14 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *v6;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = a2;
    v17 = sub_1BB873C00();

    if (v17)
    {
      swift_bridgeObjectRelease();

      sub_1BA49A224(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v42;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1BB873BF4();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_1BA9DBE54(v15, result + 1, a5, a3, a4, a6);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v35 = a5;
      v36 = v30 + 1;
      v37 = v16;
      sub_1BA9E0780(v36, v35, a3, a4, a6);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v16;
    }
    sub_1BA9E1200((uint64_t)v16, v31);
    *v11 = v31;
    swift_bridgeObjectRelease();
    *a1 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = sub_1BB8738AC();
    v20 = -1 << *(_BYTE *)(v14 + 32);
    v21 = v19 & ~v20;
    v40 = a4;
    if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_1BA49A224(0, a3);
      v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
      v23 = sub_1BB8738B8();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v27 = *(void **)(*(_QWORD *)(*v6 + 48) + 8 * v21);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
        v26 = sub_1BB8738B8();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44 = *v6;
    *v6 = 0x8000000000000000;
    v34 = a2;
    sub_1BA9E5FCC((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v40, a6);
    *v6 = v44;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

uint64_t sub_1BA9DB8B8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1BB86CBE0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1BA50AD30(&qword_1ED39C240, 255, v11, MEMORY[0x1E0CB1668]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1BB87285C();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1BA50AD30(&qword_1ED3B0560, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v21 = sub_1BB872958();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BA9E6180((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

void sub_1BA9DBB1C(uint64_t a1, char a2)
{
  sub_1BB8745CC();
  __asm { BR              X10 }
}

uint64_t sub_1BA9DBB88()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  v2 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  sub_1BA9E63EC(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  result = 1;
  *v6 = (_BYTE)v0;
  return result;
}

uint64_t sub_1BA9DBE30(uint64_t a1, uint64_t a2)
{
  return sub_1BA9DBE54(a1, a2, (unint64_t *)&qword_1ED39DAF8, (unint64_t *)&qword_1ED3B97E0, 0x1E0D58C60, (unint64_t *)&qword_1ED3B97F0);
}

uint64_t sub_1BA9DBE54(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_1BA865A4C(0, a3, a4, a5, a6);
    v10 = sub_1BB873C6C();
    v23 = v10;
    sub_1BB873BE8();
    if (sub_1BB873C0C())
    {
      sub_1BA49A224(0, a4);
      do
      {
        swift_dynamicCast();
        v10 = v23;
        v17 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v17)
        {
          sub_1BA9E0780(v17 + 1, a3, a4, a5, a6);
          v10 = v23;
        }
        result = sub_1BB8738AC();
        v12 = v10 + 56;
        v13 = -1 << *(_BYTE *)(v10 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16) = v22;
        ++*(_QWORD *)(v10 + 16);
      }
      while (sub_1BB873C0C());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v10;
}

uint64_t sub_1BA9DC078()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3B9A00, (void (*)(void))sub_1BA61CDBC);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9DC3BCLL);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

void sub_1BA9DC3D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3AB210, (void (*)(void))sub_1BA9ED760);
  v3 = sub_1BB873C60();
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 1 << *(_BYTE *)(v2 + 32);
    v5 = (_QWORD *)(v2 + 56);
    v6 = -1;
    if (v4 < 64)
      v6 = ~(-1 << v4);
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    swift_retain();
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return;
        }
        if (v12 >= v8)
          goto LABEL_22;
        v13 = v5[v12];
        ++v9;
        if (!v13)
        {
          v9 = v12 + 1;
          if (v12 + 1 >= v8)
            goto LABEL_22;
          v13 = v5[v9];
          if (!v13)
          {
            v9 = v12 + 2;
            if (v12 + 2 >= v8)
              goto LABEL_22;
            v13 = v5[v9];
            if (!v13)
            {
              v14 = v12 + 3;
              if (v14 >= v8)
              {
LABEL_22:
                swift_release();
                v15 = 1 << *(_BYTE *)(v2 + 32);
                if (v15 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v15;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v13 = v5[v14];
              if (!v13)
              {
                while (1)
                {
                  v9 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_28;
                  if (v9 >= v8)
                    goto LABEL_22;
                  v13 = v5[v9];
                  ++v14;
                  if (v13)
                    goto LABEL_21;
                }
              }
              v9 = v14;
            }
          }
        }
LABEL_21:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v9 << 6);
      }
      sub_1BA9E10F0(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11));
    }
  }
  swift_release();
  *v1 = v3;
}

uint64_t sub_1BA9DC5AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v1 = v0;
  v2 = *v0;
  sub_1BA6EE8F0(0, &qword_1ED3AB220);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 0;
  v6 = (uint64_t *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  v28 = -1 << v7;
  v29 = v1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v30 = 1 << *(_BYTE *)(v2 + 32);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_38;
    if (v15 >= v10)
      break;
    v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        break;
      v16 = v6[v5];
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          break;
        v16 = v6[v5];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v10)
            break;
          v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v5 >= v10)
                goto LABEL_33;
              v16 = v6[v5];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    v19 = MEMORY[0x1BCCE4ED0](*(_QWORD *)(v4 + 40), v18, 4);
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1BA9DC844);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v11 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  if (v30 >= 64)
    bzero((void *)(v2 + 56), 8 * v10);
  else
    *v6 = v28;
  v1 = v29;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DC870()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBF0, (void (*)(void))sub_1BA8308F0);
  v2 = sub_1BB873C60();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v12);
      sub_1BB8745CC();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      result = sub_1BB874608();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

uint64_t sub_1BA9DCBD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3B9A08, (void (*)(void))sub_1BA832824);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9DCFA4);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1BA9DCFD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3B9A10, (void (*)(void))sub_1BA822498);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9DD354);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1BA9DD36C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA7195B4(0, &qword_1EF2ACB80, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (unint64_t *)&qword_1EF2A9730, (uint64_t)&unk_1BB87BE18);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 0;
  v6 = (_QWORD *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_38;
    if (v15 >= v10)
      break;
    v16 = v6[v15];
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        break;
      v16 = v6[v5];
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          break;
        v16 = v6[v5];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v10)
            break;
          v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v5 >= v10)
                goto LABEL_33;
              v16 = v6[v5];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1BB8745CC();
    sub_1BB8745D8();
    v19 = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1BA9DD630);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v11 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  v27 = 1 << *(_BYTE *)(v2 + 32);
  if (v27 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v6 = -1 << v27;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DD664()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBF8, (void (*)(void))sub_1BA9ED6F0);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      sub_1BB8745CC();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      result = sub_1BB874608();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DD994()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3AF7D0, (void (*)(void))sub_1BA9ED3E0);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_40;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_41;
    if (v15 >= v8)
      break;
    v16 = v31[v15];
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        break;
      v16 = v31[v10];
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          break;
        v16 = v31[v10];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v8)
            break;
          v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v10 >= v8)
                goto LABEL_36;
              v16 = v31[v10];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_1BB8745CC();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        sub_1BB8745D8();
        break;
      default:
        sub_1BB8745D8();
        sub_1BB872A90();
        break;
    }
    v21 = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x1BA9DDD80);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  swift_release();
  v1 = v0;
  v29 = 1 << *(_BYTE *)(v2 + 32);
  if (v29 > 63)
    bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v29;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DDDC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACB70, (void (*)(void))sub_1BA9ED39C);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v28 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v27 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v27)
          goto LABEL_33;
        v15 = v28[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v27)
            goto LABEL_33;
          v15 = v28[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v27)
              goto LABEL_33;
            v15 = v28[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v27)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v28 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v28[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_39;
                  if (v10 >= v27)
                    goto LABEL_33;
                  v15 = v28[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v7 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = v2;
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v13);
      sub_1BB8745CC();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      result = sub_1BB874608();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v11) = v18;
      ++*(_QWORD *)(v4 + 16);
      v2 = v17;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DE134()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3CFA38, (void (*)(void))sub_1BA835484);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_40;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_41;
    if (v15 >= v8)
      break;
    v16 = v31[v15];
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        break;
      v16 = v31[v10];
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          break;
        v16 = v31[v10];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v8)
            break;
          v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v10 >= v8)
                goto LABEL_36;
              v16 = v31[v10];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_1BB8745CC();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        sub_1BB8745D8();
        break;
      default:
        sub_1BB8745D8();
        sub_1BB872A90();
        break;
    }
    v21 = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x1BA9DE508);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  swift_release();
  v1 = v0;
  v29 = 1 << *(_BYTE *)(v2 + 32);
  if (v29 > 63)
    bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v29;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DE544(uint64_t a1)
{
  return sub_1BA9E0138(a1, &qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4);
}

uint64_t sub_1BA9DE560()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = type metadata accessor for FormatDerivedDataResultOptionReference(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1BA7195B4(0, &qword_1EF2ACBB0, v7, &qword_1EF2ACBB8, (uint64_t)&unk_1BB88020C);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v11 = *(_QWORD *)(v6 + 56);
    v25 = v0;
    v26 = (_QWORD *)(v6 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v27 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v21 >= v27)
          goto LABEL_23;
        v22 = v26[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v27)
            goto LABEL_23;
          v22 = v26[v16];
          if (!v22)
          {
            v16 = v21 + 2;
            if (v21 + 2 >= v27)
              goto LABEL_23;
            v22 = v26[v16];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v27)
              {
LABEL_23:
                swift_release();
                v24 = 1 << *(_BYTE *)(v6 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                v1 = v25;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v22 = v26[v23];
              if (!v22)
              {
                while (1)
                {
                  v16 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_29;
                  if (v16 >= v27)
                    goto LABEL_23;
                  v22 = v26[v16];
                  ++v23;
                  if (v22)
                    goto LABEL_22;
                }
              }
              v16 = v23;
            }
          }
        }
LABEL_22:
        v13 = (v22 - 1) & v22;
        v18 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v19 = *(_QWORD *)(v3 + 72);
      sub_1BA5193C4(*(_QWORD *)(v6 + 48) + v19 * v18, (uint64_t)v5, type metadata accessor for FormatDerivedDataResultOptionReference);
      sub_1BB8745CC();
      sub_1BA8D7C4C((uint64_t)v28);
      sub_1BB874608();
      v20 = sub_1BB873BDC();
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      result = sub_1BA5193C4((uint64_t)v5, *(_QWORD *)(v9 + 48) + v20 * v19, type metadata accessor for FormatDerivedDataResultOptionReference);
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v1 = v9;
  return result;
}

uint64_t sub_1BA9DE850()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  _QWORD *v14;

  v1 = *v0;
  sub_1BA756C1C(0, &qword_1EF2A91C0, (void (*)(void))sub_1BA865124);
  v2 = sub_1BB873C60();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_25;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v14 = (_QWORD *)(v1 + 56);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v13 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v13 > 1)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_19;
    v8 = 2;
    if (v13 > 2)
    {
      v7 = *(_QWORD *)(v1 + 72);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if (v13 > 3)
      {
        v7 = *(_QWORD *)(v1 + 80);
        if (!v7)
        {
          v9 = 4;
          if (v13 > 4)
          {
            v7 = *(_QWORD *)(v1 + 88);
            if (v7)
            {
              v8 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v8 = v9 + 1;
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9DEBCCLL);
              }
              if (v8 >= v13)
                break;
              v7 = v14[v8];
              ++v9;
              if (v7)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_20:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 24 * v6 + 16);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v11 = 1 << *(_BYTE *)(v1 + 32);
  if (v11 > 63)
    bzero(v14, ((unint64_t)(v11 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v14 = -1 << v11;
  *(_QWORD *)(v1 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v0 = v2;
  return result;
}

uint64_t sub_1BA9DEBE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = type metadata accessor for WebEmbedDatastoreCacheKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1BA7195B4(0, &qword_1ED3AB218, v7, &qword_1ED3CB660, (uint64_t)&unk_1BB915F8C);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v11 = *(_QWORD *)(v6 + 56);
    v25 = v0;
    v26 = (_QWORD *)(v6 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v27 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v21 >= v27)
          goto LABEL_23;
        v22 = v26[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v27)
            goto LABEL_23;
          v22 = v26[v16];
          if (!v22)
          {
            v16 = v21 + 2;
            if (v21 + 2 >= v27)
              goto LABEL_23;
            v22 = v26[v16];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v27)
              {
LABEL_23:
                swift_release();
                v24 = 1 << *(_BYTE *)(v6 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                v1 = v25;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v22 = v26[v23];
              if (!v22)
              {
                while (1)
                {
                  v16 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_29;
                  if (v16 >= v27)
                    goto LABEL_23;
                  v22 = v26[v16];
                  ++v23;
                  if (v22)
                    goto LABEL_22;
                }
              }
              v16 = v23;
            }
          }
        }
LABEL_22:
        v13 = (v22 - 1) & v22;
        v18 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v19 = *(_QWORD *)(v3 + 72);
      sub_1BA5193C4(*(_QWORD *)(v6 + 48) + v19 * v18, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      sub_1BB8745CC();
      sub_1BB41AD48((uint64_t)v28);
      sub_1BB874608();
      v20 = sub_1BB873BDC();
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      result = sub_1BA5193C4((uint64_t)v5, *(_QWORD *)(v9 + 48) + v20 * v19, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v1 = v9;
  return result;
}

uint64_t sub_1BA9DEED4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v1 = v0;
  v2 = type metadata accessor for GenericDataVisualization();
  MEMORY[0x1E0C80A78](v2);
  v48 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WebEmbedDataVisualization();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v47 - v8;
  v10 = *v0;
  sub_1BA7195B4(0, (unint64_t *)&unk_1ED3A3010, v11, (unint64_t *)&unk_1ED3A7A50, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualization);
  v12 = sub_1BB873C60();
  v13 = v12;
  if (*(_QWORD *)(v10 + 16))
  {
    v47 = v0;
    v14 = 1 << *(_BYTE *)(v10 + 32);
    v15 = *(_QWORD *)(v10 + 56);
    v51 = (_QWORD *)(v10 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v50 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    v21 = (uint64_t *)v49;
    v53 = v10;
    v54 = v9;
    while (1)
    {
      if (v17)
      {
        v23 = __clz(__rbit64(v17));
        v24 = (v17 - 1) & v17;
        v25 = v23 | (v20 << 6);
      }
      else
      {
        v26 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v26 >= v50)
          goto LABEL_36;
        v27 = v51[v26];
        ++v20;
        if (!v27)
        {
          v20 = v26 + 1;
          if (v26 + 1 >= v50)
            goto LABEL_36;
          v27 = v51[v20];
          if (!v27)
          {
            v20 = v26 + 2;
            if (v26 + 2 >= v50)
              goto LABEL_36;
            v27 = v51[v20];
            if (!v27)
            {
              v28 = v26 + 3;
              if (v28 >= v50)
              {
LABEL_36:
                swift_release();
                v1 = v47;
                v46 = 1 << *(_BYTE *)(v10 + 32);
                if (v46 > 63)
                  bzero(v51, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v51 = -1 << v46;
                *(_QWORD *)(v10 + 16) = 0;
                break;
              }
              v27 = v51[v28];
              if (!v27)
              {
                while (1)
                {
                  v20 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_42;
                  if (v20 >= v50)
                    goto LABEL_36;
                  v27 = v51[v20];
                  ++v28;
                  if (v27)
                    goto LABEL_23;
                }
              }
              v20 = v28;
            }
          }
        }
LABEL_23:
        v24 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v20 << 6);
      }
      v29 = *(_QWORD *)(v10 + 48);
      v30 = *(_QWORD *)(v5 + 72);
      sub_1BA5193C4(v29 + v30 * v25, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
      sub_1BB8745CC();
      sub_1BA4C2DD8((uint64_t)v9, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v55 = v24;
      if (EnumCaseMultiPayload == 1)
      {
        v32 = (uint64_t)v21;
        v33 = v5;
        v34 = v4;
        v35 = v48;
        v52 = v30;
        sub_1BA5193C4(v32, v48, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
        v57 = 0x3A636972656E6567;
        v58 = 0xE90000000000003ALL;
        swift_bridgeObjectRetain();
        sub_1BB872AFC(v36);
        v9 = v54;
        swift_bridgeObjectRelease();
        v37 = v35;
        v4 = v34;
        v5 = v33;
        v21 = (uint64_t *)v49;
        v30 = v52;
        sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
      }
      else
      {
        v56 = *v21;
        v57 = 0x3A3A7374726F7073;
        v58 = 0xE800000000000000;
        SportsDataVisualization.identifier.getter();
        sub_1BB872AFC(v38);
        swift_bridgeObjectRelease();
        v9 = v54;
        swift_release();
      }
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      result = sub_1BB874608();
      v39 = -1 << *(_BYTE *)(v13 + 32);
      v40 = result & ~v39;
      v41 = v40 >> 6;
      if (((-1 << v40) & ~*(_QWORD *)(v18 + 8 * (v40 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v18 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
        v17 = v55;
      }
      else
      {
        v42 = 0;
        v43 = (unint64_t)(63 - v39) >> 6;
        v17 = v55;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v44 = v41 == v43;
          if (v41 == v43)
            v41 = 0;
          v42 |= v44;
          v45 = *(_QWORD *)(v18 + 8 * v41);
        }
        while (v45 == -1);
        v22 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      result = sub_1BA5193C4((uint64_t)v9, *(_QWORD *)(v13 + 48) + v22 * v30, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
      ++*(_QWORD *)(v13 + 16);
      v10 = v53;
    }
  }
  result = swift_release();
  *v1 = v13;
  return result;
}

uint64_t sub_1BA9DF3DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACB78, (void (*)(void))sub_1BA89D7DC);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      sub_1BB8745CC();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      result = sub_1BB874608();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DF6DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3CFA58, (void (*)(void))sub_1BA821B50);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_40;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_41;
    if (v15 >= v9)
      break;
    v16 = v6[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v9)
        break;
      v16 = v6[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v9)
          break;
        v16 = v6[v11];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v9)
            break;
          v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v11 >= v9)
                goto LABEL_36;
              v16 = v6[v11];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v11 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
    sub_1BB8745CC();
    if ((_DWORD)v18 != 12)
    {
      sub_1BB8745D8();
      __asm { BR              X8 }
    }
    sub_1BB8745D8();
    v19 = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x1BA9DFAD0);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = 12;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  swift_release();
  v1 = v0;
  v27 = 1 << *(_BYTE *)(v2 + 32);
  if (v27 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v6 = -1 << v27;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9DFB00(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v5 = *v3;
  sub_1BA756C1C(0, a2, a3);
  result = sub_1BB873C60();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (_QWORD *)(v5 + 56);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_33;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_33;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_33;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_33:
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero((void *)(v5 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v29;
                v4 = v3;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v8 >= v13)
                    goto LABEL_33;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_23:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
      sub_1BB8745CC();
      sub_1BB8745D8();
      result = sub_1BB874608();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v4 = v7;
  return result;
}

uint64_t sub_1BA9DFDA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBD0, (void (*)(void))sub_1BA9ED610);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9E011CLL);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1BA9E0138(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;

  v4 = v3;
  v5 = *v3;
  sub_1BA756C1C(0, a2, a3);
  v6 = sub_1BB873C60();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 56);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v4 = v3;
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 > 63)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v13 >= v34)
                    goto LABEL_33;
                  v19 = v35[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48) + 24 * v17;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      v25 = *(_BYTE *)(v22 + 16);
      sub_1BB8745CC();
      sub_1BB8745D8();
      sub_1BB872A90();
      result = sub_1BB874608();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v11 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
      *(_QWORD *)v15 = v23;
      *(_QWORD *)(v15 + 8) = v24;
      *(_BYTE *)(v15 + 16) = v25;
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v4 = v7;
  return result;
}

uint64_t sub_1BA9E044C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBC0, (void (*)(void))sub_1BA9ED5CC);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      sub_1BB8745CC();
      sub_1BB872A90();
      sub_1BB8745D8();
      sub_1BB8745D8();
      result = sub_1BB874608();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v20;
      v12[1] = v21;
      v12[2] = v22;
      v12[3] = v23;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9E0780(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v6 = v5;
  v7 = *v5;
  sub_1BA865A4C(0, a2, a3, a4, a5);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v33 = v5;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 56;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14)
          goto LABEL_33;
        v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v14)
            goto LABEL_33;
          v22 = v11[v17];
          if (!v22)
          {
            v17 = v21 + 2;
            if (v21 + 2 >= v14)
              goto LABEL_33;
            v22 = v11[v17];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                v6 = v33;
                v32 = 1 << *(_BYTE *)(v7 + 32);
                if (v32 > 63)
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v11 = -1 << v32;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  v17 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_39;
                  if (v17 >= v14)
                    goto LABEL_33;
                  v22 = v11[v17];
                  ++v23;
                  if (v22)
                    goto LABEL_23;
                }
              }
              v17 = v23;
            }
          }
        }
LABEL_23:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
      result = sub_1BB8738AC();
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v6 = v9;
  return result;
}

uint64_t sub_1BA9E0A18(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v10 = v5;
  v11 = a2(0);
  v46 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v42 - v12;
  v14 = *v5;
  v47 = a2;
  v48 = a4;
  v49 = a5;
  sub_1BA7195B4(0, a3, a2, a4, a5);
  v15 = sub_1BB873C60();
  v16 = v15;
  if (*(_QWORD *)(v14 + 16))
  {
    v17 = 1 << *(_BYTE *)(v14 + 32);
    v18 = *(_QWORD *)(v14 + 56);
    v45 = (_QWORD *)(v14 + 56);
    if (v17 < 64)
      v19 = ~(-1 << v17);
    else
      v19 = -1;
    v20 = v19 & v18;
    v43 = v5;
    v44 = (unint64_t)(v17 + 63) >> 6;
    v21 = v15 + 56;
    result = swift_retain();
    v23 = 0;
    while (1)
    {
      if (v20)
      {
        v25 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v26 = v25 | (v23 << 6);
      }
      else
      {
        v27 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v27 >= v44)
          goto LABEL_33;
        v28 = v45[v27];
        ++v23;
        if (!v28)
        {
          v23 = v27 + 1;
          if (v27 + 1 >= v44)
            goto LABEL_33;
          v28 = v45[v23];
          if (!v28)
          {
            v23 = v27 + 2;
            if (v27 + 2 >= v44)
              goto LABEL_33;
            v28 = v45[v23];
            if (!v28)
            {
              v29 = v27 + 3;
              if (v29 >= v44)
              {
LABEL_33:
                swift_release();
                v10 = v43;
                v41 = 1 << *(_BYTE *)(v14 + 32);
                if (v41 > 63)
                  bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v41;
                *(_QWORD *)(v14 + 16) = 0;
                break;
              }
              v28 = v45[v29];
              if (!v28)
              {
                while (1)
                {
                  v23 = v29 + 1;
                  if (__OFADD__(v29, 1))
                    goto LABEL_39;
                  if (v23 >= v44)
                    goto LABEL_33;
                  v28 = v45[v23];
                  ++v29;
                  if (v28)
                    goto LABEL_23;
                }
              }
              v23 = v29;
            }
          }
        }
LABEL_23:
        v20 = (v28 - 1) & v28;
        v26 = __clz(__rbit64(v28)) + (v23 << 6);
      }
      v30 = v14;
      v31 = *(_QWORD *)(v14 + 48);
      v32 = *(_QWORD *)(v46 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
      v33(v13, v31 + v32 * v26, v11);
      sub_1BA50AD30(v48, 255, v47, v49);
      result = sub_1BB87285C();
      v34 = -1 << *(_BYTE *)(v16 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v21 + 8 * (v35 >> 6))) != 0)
      {
        v24 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v21 + 8 * v36);
        }
        while (v40 == -1);
        v24 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v33)(*(_QWORD *)(v16 + 48) + v24 * v32, v13, v11);
      ++*(_QWORD *)(v16 + 16);
      v14 = v30;
    }
  }
  result = swift_release();
  *v10 = v16;
  return result;
}

uint64_t sub_1BA9E0D98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBE8, (void (*)(void))sub_1BA82BC68);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9E10E0);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

void sub_1BA9E10F0(uint64_t a1)
{
  sub_1BB8745CC();
  __asm { BR              X10 }
}

unint64_t sub_1BA9E1138()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  sub_1BB8745E4();
  sub_1BB874608();
  result = sub_1BB873BDC();
  *(_QWORD *)(v0 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * result) = v1;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

unint64_t sub_1BA9E1200(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1BB8738AC();
  result = sub_1BB873BDC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void *sub_1BA9E12BC(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;

  v5 = result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  v13 = result;
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DC3D0();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1BA9E8584();
LABEL_8:
      sub_1BB8745CC();
      __asm { BR              X9 }
    }
    result = sub_1BA9E68F4();
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1BA9E1540);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

uint64_t sub_1BA9E15E8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v22 = result;
  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 <= v5 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DC870();
    }
    else
    {
      if (v6 > v5)
      {
        result = (uint64_t)sub_1BA9E6E00(&qword_1EF2ACBF0, (void (*)(void))sub_1BA8308F0);
        goto LABEL_32;
      }
      sub_1BA9E89D4();
    }
    v21 = *v3;
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v7 = -1 << *(_BYTE *)(v21 + 32);
    a2 = result & ~v7;
    if (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v8 = ~v7;
      do
      {
        v9 = 0xD000000000000021;
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2) == 1)
        {
          v10 = 0x80000001BB95C6F0;
        }
        else
        {
          v9 = 0x7461636572706564;
          v10 = 0xEA00000000006465;
        }
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2))
          v11 = v9;
        else
          v11 = 0xD000000000000014;
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2))
          v12 = v10;
        else
          v12 = 0x80000001BB95C6D0;
        if (v22)
        {
          if (v22 == 1)
            v13 = 0xD000000000000021;
          else
            v13 = 0x7461636572706564;
          if (v22 == 1)
            v14 = 0x80000001BB95C6F0;
          else
            v14 = 0xEA00000000006465;
          if (v11 == v13)
          {
LABEL_29:
            if (v12 == v14)
              goto LABEL_35;
          }
        }
        else
        {
          v14 = 0x80000001BB95C6D0;
          if (v11 == 0xD000000000000014)
            goto LABEL_29;
        }
        v15 = sub_1BB874398();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_36;
        a2 = (a2 + 1) & v8;
      }
      while (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_32:
  v16 = *v20;
  *(_QWORD *)(*v20 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v22;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_35:
    swift_bridgeObjectRelease_n();
LABEL_36:
    sub_1BB874554();
    __break(1u);
    JUMPOUT(0x1BA9E18A4);
  }
  *(_QWORD *)(v16 + 16) = v19;
  return result;
}

uint64_t sub_1BA9E194C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DD36C();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1BA9E6F98();
        goto LABEL_14;
      }
      sub_1BA9E90E4();
    }
    v8 = *v3;
    sub_1BB8745CC();
    sub_1BB8745D8();
    result = sub_1BB874608();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 48);
      if (*(_QWORD *)(v10 + 8 * a2) == v5)
      {
LABEL_13:
        type metadata accessor for UIUserInterfaceIdiom(0);
        result = sub_1BB874554();
        __break(1u);
      }
      else
      {
        v11 = ~v9;
        while (1)
        {
          a2 = (a2 + 1) & v11;
          if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_QWORD *)(v10 + 8 * a2) == v5)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1BA9E1A98);
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1BA9E1ACC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DD664();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1BA9E6E00(&qword_1EF2ACBF8, (void (*)(void))sub_1BA9ED6F0);
        goto LABEL_28;
      }
      sub_1BA9E93AC();
    }
    v8 = *v3;
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = ~v9;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(v8 + 48) + a2))
        {
          if (*(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) == 1)
          {
            v11 = 0x80000001BB95E570;
            v12 = 0xD000000000000010;
            v13 = v5;
            if (!v5)
              goto LABEL_24;
          }
          else
          {
            v11 = 0xE400000000000000;
            v12 = 1752461154;
            v13 = v5;
            if (!v5)
            {
LABEL_24:
              v15 = 0xEB00000000797274;
              if (v12 == 0x6E4572657474656CLL)
                goto LABEL_25;
              goto LABEL_26;
            }
          }
        }
        else
        {
          v12 = 0x6E4572657474656CLL;
          v11 = 0xEB00000000797274;
          v13 = v5;
          if (!v5)
            goto LABEL_24;
        }
        if (v13 == 1)
          v14 = 0xD000000000000010;
        else
          v14 = 1752461154;
        if (v13 == 1)
          v15 = 0x80000001BB95E570;
        else
          v15 = 0xE400000000000000;
        if (v12 == v14)
        {
LABEL_25:
          if (v11 == v15)
            goto LABEL_31;
        }
LABEL_26:
        v16 = sub_1BB874398();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_32;
        a2 = (a2 + 1) & v10;
      }
      while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_28:
  v17 = *v21;
  *(_QWORD *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v17 + 48) + a2) = v5;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease_n();
LABEL_32:
    result = sub_1BB874554();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = v20;
  }
  return result;
}

uint64_t sub_1BA9E1D80(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;

  v6 = (uint64_t *)v4;
  v9 = result;
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  if (v11 <= v10 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1BA9DD994();
    }
    else
    {
      if (v11 > v10)
      {
        result = (uint64_t)sub_1BA9E714C((unint64_t *)&unk_1ED3AF7D0, (void (*)(void))sub_1BA9ED3E0, (uint64_t)&type metadata for FeedItem.Kind, sub_1BA75A650);
        goto LABEL_53;
      }
      sub_1BA9E96A8();
    }
    v12 = *(_QWORD *)v4;
    v24 = v9;
    v25 = a2;
    sub_1BB8745CC();
    FeedItem.Kind.hash(into:)();
    v4 = &v23;
    result = sub_1BB874608();
    v13 = -1 << *(_BYTE *)(v12 + 32);
    a3 = result & ~v13;
    if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = ~v13;
      while (2)
      {
        v15 = *(_QWORD *)(v12 + 48) + 16 * a3;
        v4 = *(char **)v15;
        v5 = *(_QWORD *)(v15 + 8);
        switch(v5)
        {
          case 0uLL:
            if (!a2)
              goto LABEL_56;
            goto LABEL_51;
          case 1uLL:
            if (a2 == 1)
              goto LABEL_56;
            goto LABEL_51;
          case 2uLL:
            if (a2 == 2)
              goto LABEL_56;
            goto LABEL_51;
          case 3uLL:
            if (a2 == 3)
              goto LABEL_56;
            goto LABEL_51;
          case 4uLL:
            if (a2 == 4)
              goto LABEL_56;
            goto LABEL_51;
          case 5uLL:
            if (a2 == 5)
              goto LABEL_56;
            goto LABEL_51;
          case 6uLL:
            if (a2 == 6)
              goto LABEL_56;
            goto LABEL_51;
          case 7uLL:
            if (a2 == 7)
              goto LABEL_56;
            goto LABEL_51;
          case 8uLL:
            if (a2 == 8)
              goto LABEL_56;
            goto LABEL_51;
          case 9uLL:
            if (a2 == 9)
              goto LABEL_56;
            goto LABEL_51;
          case 0xAuLL:
            if (a2 != 10)
              goto LABEL_51;
            goto LABEL_56;
          case 0xBuLL:
            if (a2 == 11)
              goto LABEL_56;
            goto LABEL_51;
          case 0xCuLL:
            if (a2 == 12)
              goto LABEL_56;
            goto LABEL_51;
          case 0xDuLL:
            if (a2 == 13)
              goto LABEL_56;
            goto LABEL_51;
          case 0xEuLL:
            if (a2 == 14)
              goto LABEL_56;
            goto LABEL_51;
          case 0xFuLL:
            if (a2 == 15)
              goto LABEL_56;
            goto LABEL_51;
          case 0x10uLL:
            if (a2 == 16)
              goto LABEL_56;
            goto LABEL_51;
          default:
            if (a2 < 0x11)
            {
LABEL_51:
              sub_1BA75A650(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
              sub_1BA75A650(v9, a2);
              sub_1BA6E0CBC((uint64_t)v4, v5);
              result = sub_1BA6E0CBC(v9, a2);
            }
            else
            {
              if (v4 == (char *)v9 && v5 == a2)
                goto LABEL_59;
              v22 = sub_1BB874398();
              sub_1BA75A650((uint64_t)v4, v5);
              sub_1BA75A650(v9, a2);
              sub_1BA6E0CBC((uint64_t)v4, v5);
              result = sub_1BA6E0CBC(v9, a2);
              if ((v22 & 1) != 0)
              {
                while (1)
                {
                  sub_1BB874554();
                  __break(1u);
LABEL_59:
                  sub_1BA75A650(v9, a2);
                  sub_1BA75A650(v9, a2);
                  v4 = (char *)v9;
LABEL_57:
                  sub_1BA6E0CBC((uint64_t)v4, a2);
                  sub_1BA6E0CBC(v9, a2);
                }
              }
            }
            a3 = (a3 + 1) & v14;
            if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
              break;
            continue;
        }
        break;
      }
    }
  }
LABEL_53:
  v17 = *v6;
  *(_QWORD *)(*v6 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v18 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * a3);
  *v18 = v9;
  v18[1] = a2;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
LABEL_56:
    a2 = v5;
    goto LABEL_57;
  }
  *(_QWORD *)(v17 + 16) = v21;
  return result;
}

uint64_t sub_1BA9E2100(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v22 = result;
  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 <= v5 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DDDC4();
    }
    else
    {
      if (v6 > v5)
      {
        result = (uint64_t)sub_1BA9E6E00(&qword_1EF2ACB70, (void (*)(void))sub_1BA9ED39C);
        goto LABEL_32;
      }
      sub_1BA9E9AA8();
    }
    v21 = *v3;
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v7 = -1 << *(_BYTE *)(v21 + 32);
    a2 = result & ~v7;
    if (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v8 = ~v7;
      do
      {
        v9 = 0xD00000000000001CLL;
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2) == 1)
        {
          v10 = 0x80000001BB959F60;
        }
        else
        {
          v9 = 0xD000000000000028;
          v10 = 0x80000001BB959F80;
        }
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2))
          v11 = v9;
        else
          v11 = 0xD000000000000010;
        if (*(_BYTE *)(*(_QWORD *)(v21 + 48) + a2))
          v12 = v10;
        else
          v12 = 0x80000001BB959F40;
        if (v22)
        {
          if (v22 == 1)
            v13 = 0xD00000000000001CLL;
          else
            v13 = 0xD000000000000028;
          if (v22 == 1)
            v14 = 0x80000001BB959F60;
          else
            v14 = 0x80000001BB959F80;
          if (v11 == v13)
          {
LABEL_29:
            if (v12 == v14)
              goto LABEL_35;
          }
        }
        else
        {
          v14 = 0x80000001BB959F40;
          if (v11 == 0xD000000000000010)
            goto LABEL_29;
        }
        v15 = sub_1BB874398();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_36;
        a2 = (a2 + 1) & v8;
      }
      while (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_32:
  v16 = *v20;
  *(_QWORD *)(*v20 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v22;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_35:
    swift_bridgeObjectRelease_n();
LABEL_36:
    result = sub_1BB874554();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v16 + 16) = v19;
  }
  return result;
}

uint64_t sub_1BA9E23C0(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;

  v6 = (uint64_t *)v4;
  v9 = result;
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  if (v11 <= v10 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1BA9DE134();
    }
    else
    {
      if (v11 > v10)
      {
        result = (uint64_t)sub_1BA9E714C((unint64_t *)&unk_1ED3CFA38, (void (*)(void))sub_1BA835484, (uint64_t)&type metadata for FormatItemKind, sub_1BA682148);
        goto LABEL_49;
      }
      sub_1BA9E9DE0();
    }
    v12 = *(_QWORD *)v4;
    v24 = v9;
    v25 = a2;
    sub_1BB8745CC();
    FormatItemKind.hash(into:)();
    v4 = &v23;
    result = sub_1BB874608();
    v13 = -1 << *(_BYTE *)(v12 + 32);
    a3 = result & ~v13;
    if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = ~v13;
      while (2)
      {
        v15 = *(_QWORD *)(v12 + 48) + 16 * a3;
        v4 = *(char **)v15;
        v5 = *(_QWORD *)(v15 + 8);
        switch(v5)
        {
          case 0uLL:
            if (!a2)
              goto LABEL_52;
            goto LABEL_47;
          case 1uLL:
            if (a2 == 1)
              goto LABEL_52;
            goto LABEL_47;
          case 2uLL:
            if (a2 == 2)
              goto LABEL_52;
            goto LABEL_47;
          case 3uLL:
            if (a2 == 3)
              goto LABEL_52;
            goto LABEL_47;
          case 4uLL:
            if (a2 == 4)
              goto LABEL_52;
            goto LABEL_47;
          case 5uLL:
            if (a2 == 5)
              goto LABEL_52;
            goto LABEL_47;
          case 6uLL:
            if (a2 == 6)
              goto LABEL_52;
            goto LABEL_47;
          case 7uLL:
            if (a2 == 7)
              goto LABEL_52;
            goto LABEL_47;
          case 8uLL:
            if (a2 != 8)
              goto LABEL_47;
            goto LABEL_52;
          case 9uLL:
            if (a2 == 9)
              goto LABEL_52;
            goto LABEL_47;
          case 0xAuLL:
            if (a2 == 10)
              goto LABEL_52;
            goto LABEL_47;
          case 0xBuLL:
            if (a2 == 11)
              goto LABEL_52;
            goto LABEL_47;
          case 0xCuLL:
            if (a2 == 12)
              goto LABEL_52;
            goto LABEL_47;
          case 0xDuLL:
            if (a2 == 13)
              goto LABEL_52;
            goto LABEL_47;
          case 0xEuLL:
            if (a2 == 14)
              goto LABEL_52;
            goto LABEL_47;
          default:
            if (a2 < 0xF)
            {
LABEL_47:
              sub_1BA682148(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
              sub_1BA682148(v9, a2);
              sub_1BA766C18((uint64_t)v4, v5);
              result = sub_1BA766C18(v9, a2);
            }
            else
            {
              if (v4 == (char *)v9 && v5 == a2)
                goto LABEL_55;
              v22 = sub_1BB874398();
              sub_1BA682148((uint64_t)v4, v5);
              sub_1BA682148(v9, a2);
              sub_1BA766C18((uint64_t)v4, v5);
              result = sub_1BA766C18(v9, a2);
              if ((v22 & 1) != 0)
              {
                while (1)
                {
                  sub_1BB874554();
                  __break(1u);
LABEL_55:
                  sub_1BA682148(v9, a2);
                  sub_1BA682148(v9, a2);
                  v4 = (char *)v9;
LABEL_53:
                  sub_1BA766C18((uint64_t)v4, a2);
                  sub_1BA766C18(v9, a2);
                }
              }
            }
            a3 = (a3 + 1) & v14;
            if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
              break;
            continue;
        }
        break;
      }
    }
  }
LABEL_49:
  v17 = *v6;
  *(_QWORD *)(*v6 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v18 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * a3);
  *v18 = v9;
  v18[1] = a2;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
LABEL_52:
    a2 = v5;
    goto LABEL_53;
  }
  *(_QWORD *)(v17 + 16) = v21;
  return result;
}

uint64_t sub_1BA9E2720(uint64_t result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v6 = v5;
  v10 = result;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_23;
  v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_1BA9E0138(v13, &qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4);
  }
  else
  {
    if (v12 > v11)
    {
      result = (uint64_t)sub_1BA9E7574(&qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4, (uint64_t)&type metadata for FormatDerivedDataFileReference, (uint64_t (*)(void))sub_1BA9ED7A4);
      goto LABEL_23;
    }
    sub_1BA9EBC14(v13, &qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4);
  }
  v14 = *v5;
  sub_1BB8745CC();
  sub_1BB8745D8();
  sub_1BB872A90();
  result = sub_1BB874608();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a4 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v14 + 48);
    do
    {
      v19 = v18 + 24 * a4;
      result = *(_QWORD *)v19;
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(unsigned __int8 *)(v19 + 16);
      if (v21)
      {
        if (v21 == 1)
        {
          if (a3 != 1)
            goto LABEL_11;
        }
        else if (a3 != 2)
        {
          goto LABEL_11;
        }
      }
      else if (a3)
      {
        goto LABEL_11;
      }
      v22 = result == v10 && v20 == a2;
      if (v22 || (result = sub_1BB874398(), (result & 1) != 0))
      {
        result = sub_1BB874554();
        __break(1u);
        break;
      }
LABEL_11:
      a4 = (a4 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_23:
  v23 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v24 = *(_QWORD *)(v23 + 48) + 24 * a4;
  *(_QWORD *)v24 = v10;
  *(_QWORD *)(v24 + 8) = a2;
  *(_BYTE *)(v24 + 16) = a3;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_1BA9E2944(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 *v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  char v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(unsigned __int8 *, uint64_t, unsigned __int8 *);
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110[80];

  v106 = (uint64_t *)a1;
  v6 = (unsigned __int8 *)type metadata accessor for FormatVersionRequirement(0);
  v7 = *((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9ED538(0, (unint64_t *)&qword_1EF2A96D0, (void (*)(uint64_t))sub_1BA8E5458);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v88 - v12;
  sub_1BA8E5458();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v88 - v18;
  v20 = type metadata accessor for FormatDerivedDataOptionReferenceResolution(0);
  MEMORY[0x1E0C80A78](v20);
  v96 = (uint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA9ED538(0, (unint64_t *)&qword_1EF2A99E0, v22);
  v97 = v23;
  MEMORY[0x1E0C80A78](v23);
  v98 = (uint64_t)&v88 - v24;
  v25 = type metadata accessor for FormatDerivedDataResultOptionReference(0);
  v100 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v105 = (uint64_t)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(*v3 + 16);
  v29 = *(_QWORD *)(*v3 + 24);
  v99 = v3;
  if (v29 <= v28 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v95 = v26;
      sub_1BA9DE560();
    }
    else
    {
      if (v29 > v28)
      {
        sub_1BA9E732C(type metadata accessor for FormatDerivedDataResultOptionReference, &qword_1EF2ACBB0, &qword_1EF2ACBB8, (uint64_t)&unk_1BB88020C);
        goto LABEL_174;
      }
      v95 = v26;
      sub_1BA9EA1DC();
    }
    v30 = *v3;
    sub_1BB8745CC();
    sub_1BA8D7C4C((uint64_t)v110);
    v31 = sub_1BB874608();
    v32 = -1 << *(_BYTE *)(v30 + 32);
    a2 = v31 & ~v32;
    v103 = v30 + 56;
    v104 = v30;
    if (((*(_QWORD *)(v30 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v89 = v19;
      v90 = v16;
      v91 = (unsigned __int8 *)v13;
      v92 = v11;
      v88 = v9;
      v93 = v7;
      v94 = v6;
      v101 = ~v32;
      v102 = *(_QWORD *)(v100 + 72);
      v33 = v105;
      do
      {
        v34 = *(_QWORD *)(v104 + 48);
        v107 = a2;
        sub_1BA4C2DD8(v34 + v102 * a2, v33, type metadata accessor for FormatDerivedDataResultOptionReference);
        v35 = *(_QWORD *)v33;
        v36 = *v106;
        v108 = *(_QWORD *)(*(_QWORD *)v33 + 16);
        v109 = v36;
        if (v108 != *(_QWORD *)(v36 + 16))
          goto LABEL_12;
        if (v108)
          v37 = v35 == v109;
        else
          v37 = 1;
        if (v37)
        {
LABEL_19:
          v39 = *(_QWORD *)(v105 + 24);
          v38 = *(unsigned __int8 **)(v105 + 32);
          v40 = v106[3];
          v6 = (unsigned __int8 *)v106[4];
          if ((*(_QWORD *)(v105 + 8) != v106[1] || *(_QWORD *)(v105 + 16) != v106[2]) && (sub_1BB874398() & 1) == 0
            || (sub_1BA857260(v39, v40) & 1) == 0
            || v38 != v6)
          {
            goto LABEL_12;
          }
          v42 = *(_QWORD *)(v105 + 40);
          v41 = *(_QWORD *)(v105 + 48);
          v43 = *(unsigned __int8 *)(v105 + 56);
          v11 = v106[5];
          v44 = v106[6];
          v45 = *((unsigned __int8 *)v106 + 56);
          if (*(_BYTE *)(v105 + 56))
          {
            if (v43 == 1)
            {
              if (v45 == 1)
              {
                if (v42 != v11 || v41 != v44)
                {
                  v46 = sub_1BB874398();
                  sub_1BA8D4E00(v11, v44, 1u);
                  sub_1BA8D4E00(v42, v41, 1u);
                  sub_1BA8D5088(v42, v41, 1u);
                  sub_1BA8D5088(v11, v44, 1u);
                  if ((v46 & 1) == 0)
                    goto LABEL_12;
                  goto LABEL_149;
                }
LABEL_148:
                sub_1BA8D4E00(v42, v41, v43);
                sub_1BA8D4E00(v42, v41, v43);
                sub_1BA8D5088(v42, v41, v43);
                sub_1BA8D5088(v42, v41, v43);
                goto LABEL_149;
              }
LABEL_11:
              sub_1BA8D4E00(v106[5], v106[6], *((_BYTE *)v106 + 56));
              sub_1BA8D4E00(v42, v41, v43);
              sub_1BA8D5088(v42, v41, v43);
              sub_1BA8D5088(v11, v44, v45);
              goto LABEL_12;
            }
            if (v45 != 2)
              goto LABEL_11;
            if (v42 == v11 && v41 == v44)
              goto LABEL_148;
            v49 = sub_1BB874398();
            sub_1BA8D4E00(v11, v44, 2u);
            sub_1BA8D4E00(v42, v41, 2u);
            sub_1BA8D5088(v42, v41, 2u);
            sub_1BA8D5088(v11, v44, 2u);
            if ((v49 & 1) == 0)
              goto LABEL_12;
          }
          else
          {
            if (*((_BYTE *)v106 + 56))
              goto LABEL_11;
            if (v42 == v11 && v41 == v44)
              goto LABEL_148;
            v80 = sub_1BB874398();
            sub_1BA8D4E00(v11, v44, 0);
            sub_1BA8D4E00(v42, v41, 0);
            sub_1BA8D5088(v42, v41, 0);
            sub_1BA8D5088(v11, v44, 0);
            if ((v80 & 1) == 0)
              goto LABEL_12;
          }
LABEL_149:
          v67 = *(int *)(v95 + 28);
          v68 = (uint64_t)v106 + v67;
          v11 = v98;
          v69 = v98 + *(int *)(v97 + 48);
          sub_1BA4C2DD8(v105 + v67, v98, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
          sub_1BA4C2DD8(v68, v69, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
          sub_1BA8D4E18();
          v71 = v70;
          v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
          if (v72(v11, 1, v70) == 1)
          {
            if (v72(v69, 1, v71) == 1)
              goto LABEL_179;
LABEL_154:
            sub_1BA9ED590(v11, (unint64_t *)&qword_1EF2A99E0, (void (*)(uint64_t))type metadata accessor for FormatDerivedDataOptionReferenceResolution);
            goto LABEL_12;
          }
          v73 = v96;
          sub_1BA4C2DD8(v11, v96, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
          if (v72(v69, 1, v71) == 1)
          {
            sub_1BA4A2E80(v73, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            goto LABEL_154;
          }
          v74 = (uint64_t)v89;
          sub_1BA5193C4(v69, (uint64_t)v89, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          v6 = v91;
          v75 = (uint64_t)&v91[*(int *)(v92 + 48)];
          sub_1BA5193C4(v73, (uint64_t)v91, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          sub_1BA4C2DD8(v74, v75, (uint64_t (*)(_QWORD))sub_1BA8E5458);
          v76 = *(uint64_t (**)(unsigned __int8 *, uint64_t, unsigned __int8 *))(v93 + 48);
          v77 = v94;
          v78 = v76(v6, 1, v94);
          v79 = (uint64_t)v90;
          if (v78 == 1)
          {
            sub_1BA4A2E80(v74, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            if (v76((unsigned __int8 *)v75, 1, v77) == 1)
              goto LABEL_178;
LABEL_163:
            sub_1BA9ED590((uint64_t)v6, (unint64_t *)&qword_1EF2A96D0, (void (*)(uint64_t))sub_1BA8E5458);
          }
          else
          {
            sub_1BA4C2DD8((uint64_t)v6, (uint64_t)v90, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            if (v76((unsigned __int8 *)v75, 1, v77) == 1)
            {
              sub_1BA4A2E80(v74, (uint64_t (*)(_QWORD))sub_1BA8E5458);
              sub_1BA4A2E80(v79, type metadata accessor for FormatVersionRequirement);
              goto LABEL_163;
            }
            v81 = (uint64_t)v88;
            sub_1BA5193C4(v75, (uint64_t)v88, type metadata accessor for FormatVersionRequirement);
            v82 = sub_1BA9FD2E0(v79, v81);
            sub_1BA4A2E80(v81, type metadata accessor for FormatVersionRequirement);
            sub_1BA4A2E80(v74, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            sub_1BA4A2E80(v79, type metadata accessor for FormatVersionRequirement);
            sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA8E5458);
            if ((v82 & 1) != 0)
              goto LABEL_179;
          }
          sub_1BA4A2E80(v11, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
          goto LABEL_12;
        }
        v47 = 0;
        v48 = (unsigned __int8 *)(v109 + 48);
        v6 = (unsigned __int8 *)(v35 + 48);
        while (1)
        {
          if (v47 >= *(_QWORD *)(v109 + 16))
          {
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA8E5458);
LABEL_179:
            sub_1BA4A2E80(v11, type metadata accessor for FormatDerivedDataOptionReferenceResolution);
            sub_1BA4A2E80(v105, type metadata accessor for FormatDerivedDataResultOptionReference);
            sub_1BB874554();
            __break(1u);
            JUMPOUT(0x1BA9E43B0);
          }
          v54 = *((_QWORD *)v6 - 2);
          v53 = *((_QWORD *)v6 - 1);
          v55 = *v6;
          v11 = *((_QWORD *)v48 - 2);
          v56 = *((_QWORD *)v48 - 1);
          v57 = *v48;
          if (!(v55 >> 6))
          {
            if (v57 >= 0x40)
            {
LABEL_143:
              sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
              sub_1BA895B64(v54, v53, v55);
              v61 = v54;
              v62 = v53;
              v63 = v55;
              goto LABEL_172;
            }
            if (v54 == v11 && v53 == v56)
            {
              sub_1BA895B64(*((_QWORD *)v6 - 2), *((_QWORD *)v6 - 1), *v48);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA895B84(v54, v53, v55);
              sub_1BA895B84(v54, v53, v57);
            }
            else
            {
              v59 = sub_1BB874398();
              sub_1BA895B64(v11, v56, v57);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA895B84(v54, v53, v55);
              sub_1BA895B84(v11, v56, v57);
              if ((v59 & 1) == 0)
                goto LABEL_12;
            }
            if (((v55 ^ v57) & 1) != 0)
              goto LABEL_12;
            goto LABEL_40;
          }
          if (v55 >> 6 != 1)
            break;
          if ((v57 & 0xC0) != 0x40)
            goto LABEL_143;
          switch(v53)
          {
            case 0uLL:
              if (v56)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0, *v48);
              sub_1BA895B64(v11, 0, v57);
              sub_1BA895B64(v11, 0, v57);
              sub_1BA895B64(v54, 0, v55);
              sub_1BA766C18(v54, 0);
              sub_1BA766C18(v11, 0);
              sub_1BA895B84(v54, 0, v55);
              sub_1BA895B84(v11, 0, v57);
              sub_1BA895B84(v11, 0, v57);
              sub_1BA895B84(v54, 0, v55);
              sub_1BA895B84(v11, 0, v57);
              v50 = v54;
              v51 = 0;
              goto LABEL_38;
            case 1uLL:
              if (v56 != 1)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 1uLL, *v48);
              sub_1BA895B64(v11, 1uLL, v57);
              sub_1BA895B64(v11, 1uLL, v57);
              sub_1BA895B64(v54, 1uLL, v55);
              sub_1BA766C18(v54, 1uLL);
              sub_1BA766C18(v11, 1uLL);
              sub_1BA895B84(v54, 1uLL, v55);
              sub_1BA895B84(v11, 1uLL, v57);
              sub_1BA895B84(v11, 1uLL, v57);
              sub_1BA895B84(v54, 1uLL, v55);
              sub_1BA895B84(v11, 1uLL, v57);
              v50 = v54;
              v51 = 1;
              goto LABEL_38;
            case 2uLL:
              if (v56 != 2)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 2uLL, *v48);
              sub_1BA895B64(v11, 2uLL, v57);
              sub_1BA895B64(v11, 2uLL, v57);
              sub_1BA895B64(v54, 2uLL, v55);
              sub_1BA766C18(v54, 2uLL);
              sub_1BA766C18(v11, 2uLL);
              sub_1BA895B84(v54, 2uLL, v55);
              sub_1BA895B84(v11, 2uLL, v57);
              sub_1BA895B84(v11, 2uLL, v57);
              sub_1BA895B84(v54, 2uLL, v55);
              sub_1BA895B84(v11, 2uLL, v57);
              v50 = v54;
              v51 = 2;
              goto LABEL_38;
            case 3uLL:
              if (v56 != 3)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 3uLL, *v48);
              sub_1BA895B64(v11, 3uLL, v57);
              sub_1BA895B64(v11, 3uLL, v57);
              sub_1BA895B64(v54, 3uLL, v55);
              sub_1BA766C18(v54, 3uLL);
              sub_1BA766C18(v11, 3uLL);
              sub_1BA895B84(v54, 3uLL, v55);
              sub_1BA895B84(v11, 3uLL, v57);
              sub_1BA895B84(v11, 3uLL, v57);
              sub_1BA895B84(v54, 3uLL, v55);
              sub_1BA895B84(v11, 3uLL, v57);
              v50 = v54;
              v51 = 3;
              goto LABEL_38;
            case 4uLL:
              if (v56 != 4)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 4uLL, *v48);
              sub_1BA895B64(v11, 4uLL, v57);
              sub_1BA895B64(v11, 4uLL, v57);
              sub_1BA895B64(v54, 4uLL, v55);
              sub_1BA766C18(v54, 4uLL);
              sub_1BA766C18(v11, 4uLL);
              sub_1BA895B84(v54, 4uLL, v55);
              sub_1BA895B84(v11, 4uLL, v57);
              sub_1BA895B84(v11, 4uLL, v57);
              sub_1BA895B84(v54, 4uLL, v55);
              sub_1BA895B84(v11, 4uLL, v57);
              v50 = v54;
              v51 = 4;
              goto LABEL_38;
            case 5uLL:
              if (v56 != 5)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 5uLL, *v48);
              sub_1BA895B64(v11, 5uLL, v57);
              sub_1BA895B64(v11, 5uLL, v57);
              sub_1BA895B64(v54, 5uLL, v55);
              sub_1BA766C18(v54, 5uLL);
              sub_1BA766C18(v11, 5uLL);
              sub_1BA895B84(v54, 5uLL, v55);
              sub_1BA895B84(v11, 5uLL, v57);
              sub_1BA895B84(v11, 5uLL, v57);
              sub_1BA895B84(v54, 5uLL, v55);
              sub_1BA895B84(v11, 5uLL, v57);
              v50 = v54;
              v51 = 5;
              goto LABEL_38;
            case 6uLL:
              if (v56 != 6)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 6uLL, *v48);
              sub_1BA895B64(v11, 6uLL, v57);
              sub_1BA895B64(v11, 6uLL, v57);
              sub_1BA895B64(v54, 6uLL, v55);
              sub_1BA766C18(v54, 6uLL);
              sub_1BA766C18(v11, 6uLL);
              sub_1BA895B84(v54, 6uLL, v55);
              sub_1BA895B84(v11, 6uLL, v57);
              sub_1BA895B84(v11, 6uLL, v57);
              sub_1BA895B84(v54, 6uLL, v55);
              sub_1BA895B84(v11, 6uLL, v57);
              v50 = v54;
              v51 = 6;
              goto LABEL_38;
            case 7uLL:
              if (v56 != 7)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 7uLL, *v48);
              sub_1BA895B64(v11, 7uLL, v57);
              sub_1BA895B64(v11, 7uLL, v57);
              sub_1BA895B64(v54, 7uLL, v55);
              sub_1BA766C18(v54, 7uLL);
              sub_1BA766C18(v11, 7uLL);
              sub_1BA895B84(v54, 7uLL, v55);
              sub_1BA895B84(v11, 7uLL, v57);
              sub_1BA895B84(v11, 7uLL, v57);
              sub_1BA895B84(v54, 7uLL, v55);
              sub_1BA895B84(v11, 7uLL, v57);
              v50 = v54;
              v51 = 7;
              goto LABEL_38;
            case 8uLL:
              if (v56 != 8)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 8uLL, *v48);
              sub_1BA895B64(v11, 8uLL, v57);
              sub_1BA895B64(v11, 8uLL, v57);
              sub_1BA895B64(v54, 8uLL, v55);
              sub_1BA766C18(v54, 8uLL);
              sub_1BA766C18(v11, 8uLL);
              sub_1BA895B84(v54, 8uLL, v55);
              sub_1BA895B84(v11, 8uLL, v57);
              sub_1BA895B84(v11, 8uLL, v57);
              sub_1BA895B84(v54, 8uLL, v55);
              sub_1BA895B84(v11, 8uLL, v57);
              v50 = v54;
              v51 = 8;
              goto LABEL_38;
            case 9uLL:
              if (v56 != 9)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 9uLL, *v48);
              sub_1BA895B64(v11, 9uLL, v57);
              sub_1BA895B64(v11, 9uLL, v57);
              sub_1BA895B64(v54, 9uLL, v55);
              sub_1BA766C18(v54, 9uLL);
              sub_1BA766C18(v11, 9uLL);
              sub_1BA895B84(v54, 9uLL, v55);
              sub_1BA895B84(v11, 9uLL, v57);
              sub_1BA895B84(v11, 9uLL, v57);
              sub_1BA895B84(v54, 9uLL, v55);
              sub_1BA895B84(v11, 9uLL, v57);
              v50 = v54;
              v51 = 9;
              goto LABEL_38;
            case 0xAuLL:
              if (v56 != 10)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0xAuLL, *v48);
              sub_1BA895B64(v11, 0xAuLL, v57);
              sub_1BA895B64(v11, 0xAuLL, v57);
              sub_1BA895B64(v54, 0xAuLL, v55);
              sub_1BA766C18(v54, 0xAuLL);
              sub_1BA766C18(v11, 0xAuLL);
              sub_1BA895B84(v54, 0xAuLL, v55);
              sub_1BA895B84(v11, 0xAuLL, v57);
              sub_1BA895B84(v11, 0xAuLL, v57);
              sub_1BA895B84(v54, 0xAuLL, v55);
              sub_1BA895B84(v11, 0xAuLL, v57);
              v50 = v54;
              v51 = 10;
              goto LABEL_38;
            case 0xBuLL:
              if (v56 != 11)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0xBuLL, *v48);
              sub_1BA895B64(v11, 0xBuLL, v57);
              sub_1BA895B64(v11, 0xBuLL, v57);
              sub_1BA895B64(v54, 0xBuLL, v55);
              sub_1BA766C18(v54, 0xBuLL);
              sub_1BA766C18(v11, 0xBuLL);
              sub_1BA895B84(v54, 0xBuLL, v55);
              sub_1BA895B84(v11, 0xBuLL, v57);
              sub_1BA895B84(v11, 0xBuLL, v57);
              sub_1BA895B84(v54, 0xBuLL, v55);
              sub_1BA895B84(v11, 0xBuLL, v57);
              v50 = v54;
              v51 = 11;
              goto LABEL_38;
            case 0xCuLL:
              if (v56 != 12)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0xCuLL, *v48);
              sub_1BA895B64(v11, 0xCuLL, v57);
              sub_1BA895B64(v11, 0xCuLL, v57);
              sub_1BA895B64(v54, 0xCuLL, v55);
              sub_1BA766C18(v54, 0xCuLL);
              sub_1BA766C18(v11, 0xCuLL);
              sub_1BA895B84(v54, 0xCuLL, v55);
              sub_1BA895B84(v11, 0xCuLL, v57);
              sub_1BA895B84(v11, 0xCuLL, v57);
              sub_1BA895B84(v54, 0xCuLL, v55);
              sub_1BA895B84(v11, 0xCuLL, v57);
              v50 = v54;
              v51 = 12;
              goto LABEL_38;
            case 0xDuLL:
              if (v56 != 13)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0xDuLL, *v48);
              sub_1BA895B64(v11, 0xDuLL, v57);
              sub_1BA895B64(v11, 0xDuLL, v57);
              sub_1BA895B64(v54, 0xDuLL, v55);
              sub_1BA766C18(v54, 0xDuLL);
              sub_1BA766C18(v11, 0xDuLL);
              sub_1BA895B84(v54, 0xDuLL, v55);
              sub_1BA895B84(v11, 0xDuLL, v57);
              sub_1BA895B84(v11, 0xDuLL, v57);
              sub_1BA895B84(v54, 0xDuLL, v55);
              sub_1BA895B84(v11, 0xDuLL, v57);
              v50 = v54;
              v51 = 13;
              goto LABEL_38;
            case 0xEuLL:
              if (v56 != 14)
                goto LABEL_145;
              sub_1BA895B64(*((_QWORD *)v48 - 2), 0xEuLL, *v48);
              sub_1BA895B64(v11, 0xEuLL, v57);
              sub_1BA895B64(v11, 0xEuLL, v57);
              sub_1BA895B64(v54, 0xEuLL, v55);
              sub_1BA766C18(v54, 0xEuLL);
              sub_1BA766C18(v11, 0xEuLL);
              sub_1BA895B84(v54, 0xEuLL, v55);
              sub_1BA895B84(v11, 0xEuLL, v57);
              sub_1BA895B84(v11, 0xEuLL, v57);
              sub_1BA895B84(v54, 0xEuLL, v55);
              sub_1BA895B84(v11, 0xEuLL, v57);
              v50 = v54;
              v51 = 14;
LABEL_38:
              v52 = v55;
              goto LABEL_39;
            default:
              if (v56 < 0xF)
              {
LABEL_145:
                sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
                sub_1BA895B64(v54, v53, v55);
                sub_1BA895B64(v11, v56, v57);
                sub_1BA895B64(v54, v53, v55);
                sub_1BA895B64(v11, v56, v57);
                sub_1BA895B64(v54, v53, v55);
                sub_1BA895B64(v11, v56, v57);
                sub_1BA895B64(v54, v53, v55);
                sub_1BA766C18(v54, v53);
                sub_1BA766C18(v11, v56);
                sub_1BA895B84(v54, v53, v55);
                sub_1BA895B84(v11, v56, v57);
                sub_1BA895B84(v11, v56, v57);
                sub_1BA895B84(v54, v53, v55);
                sub_1BA895B84(v11, v56, v57);
                v64 = v54;
                v65 = v53;
                v66 = v55;
                goto LABEL_173;
              }
              if (v54 == v11 && v53 == v56)
                v60 = 1;
              else
                v60 = sub_1BB874398();
              sub_1BA895B64(v11, v56, v57);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA895B64(v11, v56, v57);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA895B64(v11, v56, v57);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA895B64(v11, v56, v57);
              sub_1BA895B64(v54, v53, v55);
              sub_1BA766C18(v54, v53);
              sub_1BA766C18(v11, v56);
              sub_1BA895B84(v54, v53, v55);
              sub_1BA895B84(v11, v56, v57);
              sub_1BA895B84(v11, v56, v57);
              sub_1BA895B84(v54, v53, v55);
              sub_1BA895B84(v11, v56, v57);
              sub_1BA895B84(v54, v53, v55);
              if ((v60 & 1) == 0)
                goto LABEL_12;
              break;
          }
LABEL_40:
          ++v47;
          v6 += 24;
          v48 += 24;
          if (v108 == v47)
            goto LABEL_19;
        }
        if (!(v53 | v54) && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v56 | v11 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 0;
            goto LABEL_171;
          }
          sub_1BA895B84(0, 0, 0x80u);
          v50 = 0;
          goto LABEL_142;
        }
        if (v54 == 1 && !v53 && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v11 != 1 || v56 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 1;
            goto LABEL_171;
          }
          sub_1BA895B84(1, 0, 0x80u);
          v50 = 1;
          goto LABEL_142;
        }
        if (v54 == 2 && !v53 && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v11 != 2 || v56 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 2;
            goto LABEL_171;
          }
          sub_1BA895B84(2, 0, 0x80u);
          v50 = 2;
          goto LABEL_142;
        }
        if (v54 == 3 && !v53 && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v11 != 3 || v56 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 3;
            goto LABEL_171;
          }
          sub_1BA895B84(3, 0, 0x80u);
          v50 = 3;
          goto LABEL_142;
        }
        if (v54 == 4 && !v53 && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v11 != 4 || v56 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 4;
            goto LABEL_171;
          }
          sub_1BA895B84(4, 0, 0x80u);
          v50 = 4;
          goto LABEL_142;
        }
        if (v54 == 5 && !v53 && v55 == 128)
        {
          if ((v57 & 0xC0) != 0x80 || v11 != 5 || v56 || v57 != 128)
          {
            sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
            v61 = 5;
            goto LABEL_171;
          }
          sub_1BA895B84(5, 0, 0x80u);
          v50 = 5;
          goto LABEL_142;
        }
        if ((v57 & 0xC0) == 0x80 && v11 == 6 && !v56 && v57 == 128)
        {
          sub_1BA895B84(6, 0, 0x80u);
          v50 = 6;
LABEL_142:
          v51 = 0;
          v52 = 0x80;
LABEL_39:
          sub_1BA895B84(v50, v51, v52);
          goto LABEL_40;
        }
        sub_1BA895B64(*((_QWORD *)v48 - 2), *((_QWORD *)v48 - 1), *v48);
        v61 = 6;
LABEL_171:
        v62 = 0;
        v63 = 0x80;
LABEL_172:
        sub_1BA895B84(v61, v62, v63);
        v64 = v11;
        v65 = v56;
        v66 = v57;
LABEL_173:
        sub_1BA895B84(v64, v65, v66);
LABEL_12:
        v33 = v105;
        sub_1BA4A2E80(v105, type metadata accessor for FormatDerivedDataResultOptionReference);
        a2 = (v107 + 1) & v101;
      }
      while (((*(_QWORD *)(v103 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_174:
  v83 = *v99;
  *(_QWORD *)(*v99 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1BA5193C4((uint64_t)v106, *(_QWORD *)(v83 + 48) + *(_QWORD *)(v100 + 72) * a2, type metadata accessor for FormatDerivedDataResultOptionReference);
  v85 = *(_QWORD *)(v83 + 16);
  v86 = __OFADD__(v85, 1);
  v87 = v85 + 1;
  if (v86)
    goto LABEL_177;
  *(_QWORD *)(v83 + 16) = v87;
  return result;
}

void *sub_1BA9E43EC(void *result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v9 = result;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 <= v10 || (a5 & 1) == 0)
  {
    if ((a5 & 1) != 0)
    {
      sub_1BA9DE850();
      goto LABEL_8;
    }
    if (v11 <= v10)
    {
      sub_1BA9EA494();
LABEL_8:
      sub_1BB8745CC();
      __asm { BR              X10 }
    }
    result = sub_1BA9E7574(&qword_1EF2A91C0, (void (*)(void))sub_1BA865124, (uint64_t)&type metadata for FormatDerivedDataOptionScope, (uint64_t (*)(void))sub_1BA9ED4DC);
  }
  v12 = *v5;
  *(_QWORD *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v13 = *(_QWORD *)(v12 + 48) + 24 * a4;
  *(_QWORD *)v13 = v9;
  *(_QWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 16) = a3;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1BA9E468CLL);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

uint64_t sub_1BA9E46BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v50 = a1;
  v6 = type metadata accessor for GenericDataVisualization();
  MEMORY[0x1E0C80A78](v6);
  v49 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WebEmbedDataVisualization();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v40 - v13);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v40 - v16;
  v18 = *(_QWORD *)(*v3 + 16);
  v19 = *(_QWORD *)(*v3 + 24);
  v41 = v9;
  v42 = v3;
  if (v19 <= v18 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DEED4();
    }
    else
    {
      if (v19 > v18)
      {
        sub_1BA9E732C((uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization, (unint64_t *)&unk_1ED3A3010, (unint64_t *)&unk_1ED3A7A50, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualization);
        goto LABEL_20;
      }
      sub_1BA9EAAB0();
    }
    v20 = *v3;
    sub_1BB8745CC();
    WebEmbedDataVisualization.identifier.getter();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v21 = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v20 + 32);
    a2 = v21 & ~v22;
    v47 = v20 + 56;
    v48 = v20;
    if (((*(_QWORD *)(v20 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v45 = ~v22;
      v46 = v11;
      v23 = *(_QWORD *)(v9 + 72);
      v43 = v8;
      v44 = v23;
      do
      {
        sub_1BA4C2DD8(*(_QWORD *)(v48 + 48) + v44 * a2, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
        sub_1BA4C2DD8((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v24 = v49;
          sub_1BA5193C4((uint64_t)v14, v49, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
          v52 = 0x3A636972656E6567;
          v53 = 0xE90000000000003ALL;
          swift_bridgeObjectRetain();
          sub_1BB872AFC(v25);
          swift_bridgeObjectRelease();
          v27 = v52;
          v26 = v53;
          sub_1BA4A2E80(v24, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
        }
        else
        {
          v51 = *v14;
          v52 = 0x3A3A7374726F7073;
          v53 = 0xE800000000000000;
          SportsDataVisualization.identifier.getter();
          sub_1BB872AFC(v28);
          swift_bridgeObjectRelease();
          swift_release();
          v27 = v52;
          v26 = v53;
        }
        sub_1BA4C2DD8(v50, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v29 = v49;
          sub_1BA5193C4((uint64_t)v11, v49, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
          v52 = 0x3A636972656E6567;
          v53 = 0xE90000000000003ALL;
          swift_bridgeObjectRetain();
          sub_1BB872AFC(v30);
          swift_bridgeObjectRelease();
          v32 = v52;
          v31 = v53;
          sub_1BA4A2E80(v29, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
          if (v27 == v32)
            goto LABEL_17;
        }
        else
        {
          v51 = *v11;
          v52 = 0x3A3A7374726F7073;
          v53 = 0xE800000000000000;
          SportsDataVisualization.identifier.getter();
          sub_1BB872AFC(v33);
          swift_bridgeObjectRelease();
          swift_release();
          v31 = v53;
          if (v27 == v52)
          {
LABEL_17:
            if (v26 == v31)
              goto LABEL_23;
          }
        }
        v34 = sub_1BB874398();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BA4A2E80((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
        v11 = v46;
        if ((v34 & 1) != 0)
          goto LABEL_24;
        a2 = (a2 + 1) & v45;
      }
      while (((*(_QWORD *)(v47 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_20:
  v35 = *v42;
  *(_QWORD *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1BA5193C4(v50, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v41 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
  v37 = *(_QWORD *)(v35 + 16);
  v38 = __OFADD__(v37, 1);
  v39 = v37 + 1;
  if (v38)
  {
    __break(1u);
LABEL_23:
    swift_bridgeObjectRelease_n();
    sub_1BA4A2E80((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
LABEL_24:
    result = sub_1BB874554();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v35 + 16) = v39;
  }
  return result;
}

uint64_t sub_1BA9E4B80(unint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  _BYTE v27[72];

  v4 = v3;
  v8 = type metadata accessor for WebEmbedDatastoreCacheKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v26 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1BA9DEBE4();
  }
  else
  {
    if (v13 > v12)
    {
      sub_1BA9E732C((uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey, &qword_1ED3AB218, &qword_1ED3CB660, (uint64_t)&unk_1BB915F8C);
      goto LABEL_12;
    }
    sub_1BA9EA7F8();
  }
  v14 = *v4;
  sub_1BB8745CC();
  sub_1BB41AD48((uint64_t)v27);
  v15 = sub_1BB874608();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25[1] = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1BA4C2DD8(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      v19 = sub_1BB41CA78((uint64_t)v11, a1);
      sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1BA5193C4(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v26 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BB874554();
  __break(1u);
  return result;
}

uint64_t sub_1BA9E4D80(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;

  v5 = result & 1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v22 = result & 1;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_28;
  if ((a3 & 1) != 0)
  {
    sub_1BA9DF3DC();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1BA9E7784();
      goto LABEL_28;
    }
    sub_1BA9EAF84();
  }
  v8 = *v3;
  sub_1BB8745CC();
  if (v5)
    v9 = 0x746C7561666564;
  else
    v9 = 1685217635;
  if (v5)
    v10 = 0xE700000000000000;
  else
    v10 = 0xE400000000000000;
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  result = sub_1BB874608();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) ? 0x746C7561666564 : 1685217635;
      v14 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) ? 0xE700000000000000 : 0xE400000000000000;
      if (v13 == v9 && v14 == v10)
        goto LABEL_31;
      v16 = sub_1BB874398();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_32;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v17 = *v21;
  *(_QWORD *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v17 + 48) + a2) = v22;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n();
LABEL_32:
  result = sub_1BB874554();
  __break(1u);
  return result;
}

uint64_t sub_1BA9E4F70(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DF6DC();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1BA9E7928();
        goto LABEL_17;
      }
      sub_1BA9EB250();
    }
    v8 = *v3;
    sub_1BB8745CC();
    sub_1BB8745D8();
    if (v5 != 12)
    {
      FormatOptionType.rawValue.getter();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
    }
    result = sub_1BB874608();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v10 = ~v9;
      do
      {
        v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + a2);
        if ((_DWORD)v11 == 12)
        {
          if (v5 == 12)
          {
            sub_1BB874554();
            __break(1u);
            JUMPOUT(0x1BA9E53BCLL);
          }
        }
        else if (v5 != 12)
        {
          __asm { BR              X9 }
        }
        a2 = (a2 + 1) & v10;
      }
      while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_17:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1BA9E53A0);
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1BA9E541C(uint64_t result, unint64_t a2, char a3, unint64_t *a4, void (*a5)(void))
{
  uint64_t *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = result;
  v8 = *(_QWORD *)(*v5 + 16);
  v9 = *(_QWORD *)(*v5 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_14;
  v10 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BA9DFB00(v10, a4, a5);
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_1BA9E6E00(a4, a5);
      goto LABEL_14;
    }
    sub_1BA9EB640(v10, a4, a5);
  }
  v11 = *v5;
  sub_1BB8745CC();
  sub_1BB8745D8();
  result = sub_1BB874608();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = *(_QWORD *)(v11 + 48);
    if (*(unsigned __int8 *)(v13 + a2) == v7)
    {
LABEL_13:
      result = sub_1BB874554();
      __break(1u);
    }
    else
    {
      v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v13 + a2) == v7)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v15 + 48) + a2) = v7;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

void sub_1BA9E558C(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9DFDA4();
    }
    else
    {
      if (v7 > v6)
      {
        sub_1BA9E6E00(&qword_1EF2ACBD0, (void (*)(void))sub_1BA9ED610);
        goto LABEL_10;
      }
      sub_1BA9EB8B4();
    }
    v8 = *v3;
    sub_1BAB0AAD0(*(_QWORD *)(*v3 + 40), a1);
    a2 = v9 & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v10 = *v14;
  *(_QWORD *)(*v14 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v15;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x1BA9E5870);
  }
  *(_QWORD *)(v10 + 16) = v13;
}

uint64_t sub_1BA9E58C4(uint64_t result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v9 = result;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 <= v10 || (a5 & 1) == 0)
  {
    v12 = v10 + 1;
    if ((a5 & 1) != 0)
    {
      sub_1BA9E0138(v12, &qword_1EF2ACB98, (void (*)(void))sub_1BA9ED498);
    }
    else
    {
      if (v11 > v10)
      {
        result = (uint64_t)sub_1BA9E7574(&qword_1EF2ACB98, (void (*)(void))sub_1BA9ED498, (uint64_t)&type metadata for FormatFileKey, (uint64_t (*)(void))sub_1BA9ED468);
        goto LABEL_10;
      }
      sub_1BA9EBC14(v12, &qword_1EF2ACB98, (void (*)(void))sub_1BA9ED498);
    }
    v13 = *v5;
    sub_1BB8745CC();
    sub_1BB36AEB8();
    result = sub_1BB874608();
    a4 = result & ~(-1 << *(_BYTE *)(v13 + 32));
    if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v14 = *v5;
  *(_QWORD *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v15 = *(_QWORD *)(v14 + 48) + 24 * a4;
  *(_QWORD *)v15 = v9;
  *(_QWORD *)(v15 + 8) = a2;
  *(_BYTE *)(v15 + 16) = a3;
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
    JUMPOUT(0x1BA9E5B7CLL);
  }
  *(_QWORD *)(v14 + 16) = v18;
  return result;
}

uint64_t sub_1BA9E5BAC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = a1;
  v6 = sub_1BB871E9C();
  v7 = *(_QWORD *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BA9E0A18(v13, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], (unint64_t *)&qword_1EF2A92A0, &qword_1EF2A92A8, MEMORY[0x1E0D52FE8]);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1BA9E8030((uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], (unint64_t *)&qword_1EF2A92A0, &qword_1EF2A92A8, MEMORY[0x1E0D52FE8]);
      goto LABEL_12;
    }
    sub_1BA9EC460(v13, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], (unint64_t *)&qword_1EF2A92A0, &qword_1EF2A92A8, MEMORY[0x1E0D52FE8]);
  }
  v14 = *v3;
  sub_1BA50AD30(&qword_1EF2A92A8, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FE8]);
  v15 = sub_1BB87285C();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v10, *(_QWORD *)(v14 + 48) + v18 * a2, v6);
      sub_1BA50AD30(&qword_1EF2A92B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FF0]);
      v20 = sub_1BB872958();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = v28;
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v22 + 48) + *(_QWORD *)(v7 + 72) * a2, v21, v6, v8);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BB874554();
  __break(1u);
  return result;
}

uint64_t sub_1BA9E5E18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_21;
  if ((a6 & 1) != 0)
  {
    sub_1BA9E044C();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_1BA9E7AE8();
      goto LABEL_21;
    }
    sub_1BA9EBEF0();
  }
  v14 = *v6;
  sub_1BB8745CC();
  sub_1BB872A90();
  sub_1BB8745D8();
  sub_1BB8745D8();
  result = sub_1BB874608();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v14 + 48);
    do
    {
      v20 = (uint64_t *)(v18 + 32 * a5);
      result = *v20;
      v21 = v20[2];
      v22 = v20[3];
      v23 = *v20 == v11 && v20[1] == a2;
      if (v23 || (result = sub_1BB874398(), (result & 1) != 0))
      {
        if (v21 == a3 && v22 == a4)
          goto LABEL_24;
      }
      a5 = (a5 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_21:
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v11;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_24:
  result = sub_1BB874554();
  __break(1u);
  return result;
}

void sub_1BA9E5FCC(uint64_t a1, unint64_t a2, char a3, unint64_t *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BA9E0780(v13, a4, a5, a6, a7);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1BA9E7E7C(a4, a5, a6, a7);
      goto LABEL_14;
    }
    sub_1BA9EC1EC(v13, a4, a5, a6, a7);
  }
  v14 = *v7;
  v15 = sub_1BB8738AC();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1BA49A224(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = sub_1BB8738B8();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      sub_1BB874554();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = sub_1BB8738B8();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t sub_1BA9E6180(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_1BB86CBE0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BA9E0A18(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (unint64_t *)&unk_1ED39DAD0, &qword_1ED39C240, MEMORY[0x1E0CB1668]);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1BA9E8030((uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (unint64_t *)&unk_1ED39DAD0, &qword_1ED39C240, MEMORY[0x1E0CB1668]);
      goto LABEL_12;
    }
    sub_1BA9EC460(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (unint64_t *)&unk_1ED39DAD0, &qword_1ED39C240, MEMORY[0x1E0CB1668]);
  }
  v13 = *v3;
  sub_1BA50AD30(&qword_1ED39C240, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1668]);
  v14 = sub_1BB87285C();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_1BA50AD30(&qword_1ED3B0560, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v19 = sub_1BB872958();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BB874554();
  __break(1u);
  return result;
}

void *sub_1BA9E63EC(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BA9E0D98();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1BA9EC79C();
LABEL_8:
      sub_1BB8745CC();
      __asm { BR              X10 }
    }
    result = sub_1BA9E6E00(&qword_1EF2ACBE8, (void (*)(void))sub_1BA82BC68);
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1BA9E6700);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

void *sub_1BA9E674C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA6EE8F0(0, &qword_1ED3B9A28);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E68F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA756C1C(0, &qword_1ED3AB210, (void (*)(void))sub_1BA9ED760);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E6AB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA6EE8F0(0, &qword_1ED3AB220);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E6C5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3C4400, (void (*)(void))sub_1BA82BDC8);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E6E00(unint64_t *a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v3 = v2;
  sub_1BA756C1C(0, a1, a2);
  v4 = *v2;
  v5 = sub_1BB873C54();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v3 = v6;
    return result;
  }
  result = (void *)(v5 + 56);
  v8 = v4 + 56;
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 56 + 8 * v9)
    result = memmove(result, (const void *)(v4 + 56), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_28;
      v19 = *(_QWORD *)(v8 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_28;
        v19 = *(_QWORD *)(v8 + 8 * v11);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v14 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v17) = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v17);
  }
  v20 = v18 + 3;
  if (v20 >= v15)
    goto LABEL_28;
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v8 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E6F98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v1 = v0;
  sub_1BA7195B4(0, &qword_1EF2ACB80, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (unint64_t *)&qword_1EF2A9730, (uint64_t)&unk_1BB87BE18);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_25:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v12)
      goto LABEL_25;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_25;
      v16 = *(_QWORD *)(v6 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_25;
        v16 = *(_QWORD *)(v6 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_24:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_9:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_25;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v12)
      goto LABEL_25;
    v16 = *(_QWORD *)(v6 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1BA9E714C(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v6 = v4;
  sub_1BA756C1C(0, a1, a2);
  v7 = *v4;
  v8 = sub_1BB873C54();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v6 = v9;
    return result;
  }
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v18)
      goto LABEL_28;
    v24 = *(_QWORD *)(v11 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v18)
        goto LABEL_28;
      v24 = *(_QWORD *)(v11 + 8 * v14);
      if (!v24)
      {
        v14 = v23 + 2;
        if (v23 + 2 >= v18)
          goto LABEL_28;
        v24 = *(_QWORD *)(v11 + 8 * v14);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v17 = (v24 - 1) & v24;
    v20 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = *(_OWORD *)(*(_QWORD *)(v7 + 48) + v21);
    *(_OWORD *)(*(_QWORD *)(v9 + 48) + v21) = v22;
    result = (void *)a4(v22, *((_QWORD *)&v22 + 1));
  }
  v25 = v23 + 3;
  if (v25 >= v18)
    goto LABEL_28;
  v24 = *(_QWORD *)(v11 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v24 = *(_QWORD *)(v11 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E7308()
{
  return sub_1BA9E7574(&qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4, (uint64_t)&type metadata for FormatDerivedDataFileReference, (uint64_t (*)(void))sub_1BA9ED7A4);
}

void *sub_1BA9E732C(uint64_t (*a1)(uint64_t), unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  uint64_t v17;
  unint64_t v18;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v9 = a1(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - v11;
  sub_1BA7195B4(0, a2, a1, a3, a4);
  v32 = v4;
  v13 = *v4;
  v14 = sub_1BB873C54();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v32 = v15;
    return result;
  }
  result = (void *)(v14 + 56);
  v17 = v13 + 56;
  v18 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  if (v15 != v13 || (unint64_t)result >= v13 + 56 + 8 * v18)
    result = memmove(result, (const void *)(v13 + 56), 8 * v18);
  v20 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
  v21 = 1 << *(_BYTE *)(v13 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v13 + 56);
  v24 = (unint64_t)(v21 + 63) >> 6;
  while (1)
  {
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v26 = v25 | (v20 << 6);
      goto LABEL_12;
    }
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v24)
      goto LABEL_28;
    v29 = *(_QWORD *)(v17 + 8 * v28);
    ++v20;
    if (!v29)
    {
      v20 = v28 + 1;
      if (v28 + 1 >= v24)
        goto LABEL_28;
      v29 = *(_QWORD *)(v17 + 8 * v20);
      if (!v29)
      {
        v20 = v28 + 2;
        if (v28 + 2 >= v24)
          goto LABEL_28;
        v29 = *(_QWORD *)(v17 + 8 * v20);
        if (!v29)
          break;
      }
    }
LABEL_27:
    v23 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_12:
    v27 = *(_QWORD *)(v10 + 72) * v26;
    sub_1BA4C2DD8(*(_QWORD *)(v13 + 48) + v27, (uint64_t)v12, a1);
    result = (void *)sub_1BA5193C4((uint64_t)v12, *(_QWORD *)(v15 + 48) + v27, a1);
  }
  v30 = v28 + 3;
  if (v30 >= v24)
    goto LABEL_28;
  v29 = *(_QWORD *)(v17 + 8 * v30);
  if (v29)
  {
    v20 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    v20 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v20 >= v24)
      goto LABEL_28;
    v29 = *(_QWORD *)(v17 + 8 * v20);
    ++v30;
    if (v29)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E7550()
{
  return sub_1BA9E7574(&qword_1EF2A91C0, (void (*)(void))sub_1BA865124, (uint64_t)&type metadata for FormatDerivedDataOptionScope, (uint64_t (*)(void))sub_1BA9ED4DC);
}

void *sub_1BA9E7574(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v6 = v4;
  sub_1BA756C1C(0, a1, a2);
  v7 = *v4;
  v8 = sub_1BB873C54();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v6 = v9;
    return result;
  }
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v18)
      goto LABEL_28;
    v27 = *(_QWORD *)(v11 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v18)
        goto LABEL_28;
      v27 = *(_QWORD *)(v11 + 8 * v14);
      if (!v27)
      {
        v14 = v26 + 2;
        if (v26 + 2 >= v18)
          goto LABEL_28;
        v27 = *(_QWORD *)(v11 + 8 * v14);
        if (!v27)
          break;
      }
    }
LABEL_27:
    v17 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v21 = 24 * v20;
    v22 = *(_QWORD *)(v7 + 48) + v21;
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(_QWORD *)(v9 + 48) + v21;
    v25 = *(_BYTE *)(v22 + 16);
    *(_QWORD *)v24 = *(_QWORD *)v22;
    *(_QWORD *)(v24 + 8) = v23;
    *(_BYTE *)(v24 + 16) = v25;
    result = (void *)a4();
  }
  v28 = v26 + 3;
  if (v28 >= v18)
    goto LABEL_28;
  v27 = *(_QWORD *)(v11 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v27 = *(_QWORD *)(v11 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E773C()
{
  return sub_1BA9E732C((uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey, &qword_1ED3AB218, &qword_1ED3CB660, (uint64_t)&unk_1BB915F8C);
}

void *sub_1BA9E7760()
{
  return sub_1BA9E732C((uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization, (unint64_t *)&unk_1ED3A3010, (unint64_t *)&unk_1ED3A7A50, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualization);
}

void *sub_1BA9E7784()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA756C1C(0, &qword_1EF2ACB78, (void (*)(void))sub_1BA89D7DC);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E7928()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1BA756C1C(0, &qword_1ED3CFA58, (void (*)(void))sub_1BA821B50);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E7ACC()
{
  return sub_1BA9E6E00(&qword_1EF2ACBD0, (void (*)(void))sub_1BA9ED610);
}

void *sub_1BA9E7AE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_1BA756C1C(0, &qword_1EF2ACBC0, (void (*)(void))sub_1BA9ED5CC);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    v20 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)v19 = *(_QWORD *)v17;
    *(_QWORD *)(v19 + 8) = v18;
    *(_OWORD *)(v19 + 16) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1BA9E7CB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1BA756C1C(0, &qword_1ED39DAF0, (void (*)(void))sub_1BA837470);
  v2 = *v0;
  v3 = sub_1BB873C54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(void **)v17;
    v18 = *(void **)(v17 + 8);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    v21 = v18;
    result = v19;
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1BA9E7E7C(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  sub_1BA865A4C(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = sub_1BB873C54();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v5 = v8;
    return result;
  }
  result = (id)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_28;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_28;
        v23 = *(_QWORD *)(v10 + 8 * v13);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 3;
  if (v24 >= v17)
    goto LABEL_28;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BA9E8030(uint64_t (*a1)(uint64_t), unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  uint64_t v17;
  unint64_t v18;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v9 = a1(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v31 - v11;
  sub_1BA7195B4(0, a2, a1, a3, a4);
  v32 = v4;
  v13 = *v4;
  v14 = sub_1BB873C54();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v32 = v15;
    return result;
  }
  result = (void *)(v14 + 56);
  v17 = v13 + 56;
  v18 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  if (v15 != v13 || (unint64_t)result >= v13 + 56 + 8 * v18)
    result = memmove(result, (const void *)(v13 + 56), 8 * v18);
  v20 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
  v21 = 1 << *(_BYTE *)(v13 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v13 + 56);
  v24 = (unint64_t)(v21 + 63) >> 6;
  while (1)
  {
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v26 = v25 | (v20 << 6);
      goto LABEL_12;
    }
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v24)
      goto LABEL_28;
    v29 = *(_QWORD *)(v17 + 8 * v28);
    ++v20;
    if (!v29)
    {
      v20 = v28 + 1;
      if (v28 + 1 >= v24)
        goto LABEL_28;
      v29 = *(_QWORD *)(v17 + 8 * v20);
      if (!v29)
      {
        v20 = v28 + 2;
        if (v28 + 2 >= v24)
          goto LABEL_28;
        v29 = *(_QWORD *)(v17 + 8 * v20);
        if (!v29)
          break;
      }
    }
LABEL_27:
    v23 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_12:
    v27 = *(_QWORD *)(v10 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v27, v9);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v27, v12, v9);
  }
  v30 = v28 + 3;
  if (v30 >= v24)
    goto LABEL_28;
  v29 = *(_QWORD *)(v17 + 8 * v30);
  if (v29)
  {
    v20 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    v20 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v20 >= v24)
      goto LABEL_28;
    v29 = *(_QWORD *)(v17 + 8 * v20);
    ++v30;
    if (v29)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1BA9E8260()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3B9A00, (void (*)(void))sub_1BA61CDBC);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9E8570);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

void sub_1BA9E8584()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3AB210, (void (*)(void))sub_1BA9ED760);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    swift_release();
    *v1 = v3;
    return;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = v2 + 56;
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_6;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_22;
      v14 = *(_QWORD *)(v5 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_22;
        v14 = *(_QWORD *)(v5 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_6:
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    swift_retain();
    sub_1BA9E10F0(v12);
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1BA9E8730()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  sub_1BA6EE8F0(0, &qword_1ED3AB220);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_35;
  }
  v28 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v15 >= v10)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v10)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_37;
              if (v5 >= v10)
                goto LABEL_33;
              v16 = *(_QWORD *)(v6 + 8 * v5);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    v19 = MEMORY[0x1BCCE4ED0](*(_QWORD *)(v4 + 40), v18, 4);
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1BA9E89A8);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v11 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  result = swift_release();
  v1 = v28;
LABEL_35:
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9E89D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBF0, (void (*)(void))sub_1BA8308F0);
  v2 = sub_1BB873C60();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v12);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9E8CFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3B9A08, (void (*)(void))sub_1BA832824);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9E909CLL);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t sub_1BA9E90E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA7195B4(0, &qword_1EF2ACB80, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (unint64_t *)&qword_1EF2A9730, (uint64_t)&unk_1BB87BE18);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_35;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v15 >= v10)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v10)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_37;
              if (v5 >= v10)
                goto LABEL_33;
              v16 = *(_QWORD *)(v6 + 8 * v5);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1BB8745CC();
    sub_1BB8745D8();
    v19 = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1BA9E9378);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v11 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  result = swift_release();
  v1 = v0;
LABEL_35:
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9E93AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBF8, (void (*)(void))sub_1BA9ED6F0);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9E96A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3AF7D0, (void (*)(void))sub_1BA9ED3E0);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_38;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v15 >= v30)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v30)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v30)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v10);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v30)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_40;
              if (v10 >= v30)
                goto LABEL_36;
              v16 = *(_QWORD *)(v6 + 8 * v10);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_1BB8745CC();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        sub_1BB8745D8();
        break;
      default:
        sub_1BB8745D8();
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        break;
    }
    v21 = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1BA9E9A64);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  result = swift_release_n();
  v1 = v0;
LABEL_38:
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9E9AA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACB70, (void (*)(void))sub_1BA9ED39C);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v26 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v27)
      goto LABEL_33;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v27)
        goto LABEL_33;
      v15 = *(_QWORD *)(v26 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v27)
          goto LABEL_33;
        v15 = *(_QWORD *)(v26 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = v2;
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v13);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v8 + 8 * v21);
      }
      while (v25 == -1);
      v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v11) = v18;
    ++*(_QWORD *)(v4 + 16);
    v2 = v17;
  }
  v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v27)
      goto LABEL_33;
    v15 = *(_QWORD *)(v26 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9E9DE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, (unint64_t *)&unk_1ED3CFA38, (void (*)(void))sub_1BA835484);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_38;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v15 >= v30)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v30)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v30)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v10);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v30)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_40;
              if (v10 >= v30)
                goto LABEL_36;
              v16 = *(_QWORD *)(v6 + 8 * v10);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_1BB8745CC();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        sub_1BB8745D8();
        break;
      default:
        sub_1BB8745D8();
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        break;
    }
    v21 = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1BA9EA184);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  result = swift_release_n();
  v1 = v0;
LABEL_38:
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9EA1C0(uint64_t a1)
{
  return sub_1BA9EBC14(a1, &qword_1EF2ACBA0, (void (*)(void))sub_1BA9ED4F4);
}

uint64_t sub_1BA9EA1DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  char v27[72];

  v1 = v0;
  v2 = type metadata accessor for FormatDerivedDataResultOptionReference(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1BA7195B4(0, &qword_1EF2ACBB0, v7, &qword_1EF2ACBB8, (uint64_t)&unk_1BB88020C);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_25:
    *v1 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = *(_QWORD *)(v6 + 56);
  v24 = v0;
  v25 = v6 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v26 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_7;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v16;
    if (!v22)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (!v22)
      {
        v16 = v21 + 2;
        if (v21 + 2 >= v26)
          goto LABEL_23;
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
          break;
      }
    }
LABEL_22:
    v13 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_7:
    v19 = *(_QWORD *)(v3 + 72);
    sub_1BA4C2DD8(*(_QWORD *)(v6 + 48) + v19 * v18, (uint64_t)v5, type metadata accessor for FormatDerivedDataResultOptionReference);
    sub_1BB8745CC();
    sub_1BA8D7C4C((uint64_t)v27);
    sub_1BB874608();
    v20 = sub_1BB873BDC();
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = sub_1BA5193C4((uint64_t)v5, *(_QWORD *)(v9 + 48) + v20 * v19, type metadata accessor for FormatDerivedDataResultOptionReference);
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v26)
  {
LABEL_23:
    result = swift_release_n();
    v1 = v24;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v16 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v16 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v16);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EA494()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;

  v1 = *v0;
  sub_1BA756C1C(0, &qword_1EF2A91C0, (void (*)(void))sub_1BA865124);
  v2 = sub_1BB873C60();
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v12 > 1)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_19;
    v8 = 2;
    if (v12 > 2)
    {
      v7 = *(_QWORD *)(v1 + 72);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if (v12 > 3)
      {
        v7 = *(_QWORD *)(v1 + 80);
        if (!v7)
        {
          v9 = 4;
          if (v12 > 4)
          {
            v7 = *(_QWORD *)(v1 + 88);
            if (v7)
            {
              v8 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v8 = v9 + 1;
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9EA7E0);
              }
              if (v8 >= v12)
                break;
              v7 = *(_QWORD *)(v1 + 56 + 8 * v8);
              ++v9;
              if (v7)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_20:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 24 * v6 + 16);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
LABEL_23:
  *v0 = v2;
  return result;
}

uint64_t sub_1BA9EA7F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  char v27[72];

  v1 = v0;
  v2 = type metadata accessor for WebEmbedDatastoreCacheKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1BA7195B4(0, &qword_1ED3AB218, v7, &qword_1ED3CB660, (uint64_t)&unk_1BB915F8C);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_25:
    *v1 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = *(_QWORD *)(v6 + 56);
  v24 = v0;
  v25 = v6 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v26 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_7;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v16;
    if (!v22)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (!v22)
      {
        v16 = v21 + 2;
        if (v21 + 2 >= v26)
          goto LABEL_23;
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
          break;
      }
    }
LABEL_22:
    v13 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_7:
    v19 = *(_QWORD *)(v3 + 72);
    sub_1BA4C2DD8(*(_QWORD *)(v6 + 48) + v19 * v18, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    sub_1BB8745CC();
    sub_1BB41AD48((uint64_t)v27);
    sub_1BB874608();
    v20 = sub_1BB873BDC();
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = sub_1BA5193C4((uint64_t)v5, *(_QWORD *)(v9 + 48) + v20 * v19, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCacheKey);
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v26)
  {
LABEL_23:
    result = swift_release_n();
    v1 = v24;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v16 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v16 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v16);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EAAB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v1 = v0;
  v2 = type metadata accessor for GenericDataVisualization();
  MEMORY[0x1E0C80A78](v2);
  v51 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WebEmbedDataVisualization();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v52 = (char *)&v49 - v9;
  v10 = *v0;
  sub_1BA7195B4(0, (unint64_t *)&unk_1ED3A3010, v11, (unint64_t *)&unk_1ED3A7A50, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualization);
  v12 = sub_1BB873C60();
  v13 = v12;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v13;
    return result;
  }
  v50 = v0;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 56);
  v53 = v10 + 56;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v54 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 56;
  result = swift_retain();
  v20 = 0;
  v21 = (uint64_t)v52;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v24 = (v17 - 1) & v17;
      v56 = v20;
      v25 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v54)
      goto LABEL_36;
    v27 = *(_QWORD *)(v53 + 8 * v26);
    v28 = v20 + 1;
    if (!v27)
    {
      v28 = v20 + 2;
      if (v20 + 2 >= v54)
        goto LABEL_36;
      v27 = *(_QWORD *)(v53 + 8 * v28);
      if (!v27)
      {
        v28 = v20 + 3;
        if (v20 + 3 >= v54)
          goto LABEL_36;
        v27 = *(_QWORD *)(v53 + 8 * v28);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v24 = (v27 - 1) & v27;
    v56 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v10 + 48);
    v55 = *(_QWORD *)(v5 + 72);
    sub_1BA4C2DD8(v30 + v55 * v25, v21, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    sub_1BB8745CC();
    sub_1BA4C2DD8(v21, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v57 = v24;
    if (EnumCaseMultiPayload == 1)
    {
      v32 = (uint64_t)v7;
      v33 = v7;
      v34 = v13;
      v35 = v10;
      v36 = v5;
      v37 = v4;
      v38 = v51;
      sub_1BA5193C4(v32, v51, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
      v59 = 0x3A636972656E6567;
      v60 = 0xE90000000000003ALL;
      swift_bridgeObjectRetain();
      sub_1BB872AFC(v39);
      swift_bridgeObjectRelease();
      v40 = v38;
      v4 = v37;
      v5 = v36;
      v10 = v35;
      v13 = v34;
      v7 = v33;
      v21 = (uint64_t)v52;
      sub_1BA4A2E80(v40, (uint64_t (*)(_QWORD))type metadata accessor for GenericDataVisualization);
    }
    else
    {
      v58 = *v7;
      v59 = 0x3A3A7374726F7073;
      v60 = 0xE800000000000000;
      SportsDataVisualization.identifier.getter();
      sub_1BB872AFC(v41);
      swift_bridgeObjectRelease();
      swift_release();
    }
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v42 = -1 << *(_BYTE *)(v13 + 32);
    v43 = result & ~v42;
    v44 = v43 >> 6;
    if (((-1 << v43) & ~*(_QWORD *)(v18 + 8 * (v43 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v18 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
      v17 = v57;
    }
    else
    {
      v45 = 0;
      v46 = (unint64_t)(63 - v42) >> 6;
      v17 = v57;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v47 = v44 == v46;
        if (v44 == v46)
          v44 = 0;
        v45 |= v47;
        v48 = *(_QWORD *)(v18 + 8 * v44);
      }
      while (v48 == -1);
      v22 = __clz(__rbit64(~v48)) + (v44 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = sub_1BA5193C4(v21, *(_QWORD *)(v13 + 48) + v22 * v55, (uint64_t (*)(_QWORD))type metadata accessor for WebEmbedDataVisualization);
    ++*(_QWORD *)(v13 + 16);
    v20 = v56;
  }
  v29 = v20 + 4;
  if (v20 + 4 >= v54)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v50;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v53 + 8 * v29);
  if (v27)
  {
    v28 = v20 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v54)
      goto LABEL_36;
    v27 = *(_QWORD *)(v53 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EAF84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACB78, (void (*)(void))sub_1BA89D7DC);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    result = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EB250()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1ED3CFA58, (void (*)(void))sub_1BA821B50);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_38;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v9)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v9)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v9)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v9)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_40;
              if (v11 >= v9)
                goto LABEL_36;
              v16 = *(_QWORD *)(v6 + 8 * v11);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v11 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
    sub_1BB8745CC();
    if ((_DWORD)v18 != 12)
    {
      sub_1BB8745D8();
      __asm { BR              X8 }
    }
    sub_1BB8745D8();
    v19 = sub_1BB874608();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v23 = 0;
    v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1BA9EB610);
      }
      v25 = v22 == v24;
      if (v22 == v24)
        v22 = 0;
      v23 |= v25;
      v26 = *(_QWORD *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = 12;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  result = swift_release_n();
  v1 = v0;
LABEL_38:
  *v1 = v4;
  return result;
}

uint64_t sub_1BA9EB640(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v5 = *v3;
  sub_1BA756C1C(0, a2, a3);
  result = sub_1BB873C60();
  v7 = result;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v4 = v7;
    return result;
  }
  v8 = 0;
  v9 = v5 + 56;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_24;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v13)
      goto LABEL_33;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_33;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_33;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_24:
    v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    sub_1BB8745CC();
    sub_1BB8745D8();
    result = sub_1BB874608();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_33:
    result = swift_release();
    v4 = v3;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_33;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EB8B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBD0, (void (*)(void))sub_1BA9ED610);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9EBBF8);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t sub_1BA9EBC14(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v4 = *v3;
  sub_1BA756C1C(0, a2, a3);
  v5 = sub_1BB873C60();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v31 = v4 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v32)
      goto LABEL_33;
    v18 = *(_QWORD *)(v31 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_33;
      v18 = *(_QWORD *)(v31 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_33;
        v18 = *(_QWORD *)(v31 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
    v20 = *(_QWORD *)(v4 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    sub_1BB8745CC();
    sub_1BB8745D8();
    swift_bridgeObjectRetain();
    sub_1BB872A90();
    result = sub_1BB874608();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_QWORD *)v14 = v21;
    *(_QWORD *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + 16) = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_33;
    v18 = *(_QWORD *)(v31 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EBEF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBC0, (void (*)(void))sub_1BA9ED5CC);
  v3 = sub_1BB873C60();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_33;
      v16 = *(_QWORD *)(v30 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_33;
        v16 = *(_QWORD *)(v30 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    sub_1BB8745CC();
    swift_bridgeObjectRetain();
    sub_1BB872A90();
    sub_1BB8745D8();
    sub_1BB8745D8();
    result = sub_1BB874608();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v19;
    v12[1] = v20;
    v12[2] = v21;
    v12[3] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EC1EC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;

  v6 = v5;
  v7 = *v5;
  sub_1BA865A4C(0, a2, a3, a4, a5);
  v8 = sub_1BB873C60();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v6 = v9;
    return result;
  }
  v32 = v5;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  v15 = v8 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_33;
      v22 = *(_QWORD *)(v11 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_33;
        v22 = *(_QWORD *)(v11 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v13 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = sub_1BB8738AC();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v14)
  {
LABEL_33:
    result = swift_release_n();
    v6 = v32;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v11 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EC460(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v10 = v5;
  v11 = a2(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78]();
  v14 = (char *)&v39 - v13;
  v15 = *v5;
  v42 = a2;
  v43 = a4;
  v44 = a5;
  sub_1BA7195B4(0, a3, a2, a4, a5);
  v16 = sub_1BB873C60();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
  {
    result = swift_release();
LABEL_35:
    *v10 = v17;
    return result;
  }
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 56);
  v39 = v5;
  v40 = v15 + 56;
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v41 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 56;
  result = swift_retain();
  v24 = 0;
  while (1)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v28 >= v41)
      goto LABEL_33;
    v29 = *(_QWORD *)(v40 + 8 * v28);
    ++v24;
    if (!v29)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v41)
        goto LABEL_33;
      v29 = *(_QWORD *)(v40 + 8 * v24);
      if (!v29)
      {
        v24 = v28 + 2;
        if (v28 + 2 >= v41)
          goto LABEL_33;
        v29 = *(_QWORD *)(v40 + 8 * v24);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v24 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v12 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, *(_QWORD *)(v15 + 48) + v31 * v27, v11);
    sub_1BA50AD30(v43, 255, v42, v44);
    result = sub_1BB87285C();
    v32 = -1 << *(_BYTE *)(v17 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v22 + 8 * (v33 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v22 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v22 + 8 * v34);
      }
      while (v38 == -1);
      v25 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v25 * v31, v14, v11);
    ++*(_QWORD *)(v17 + 16);
  }
  v30 = v28 + 3;
  if (v30 >= v41)
  {
LABEL_33:
    result = swift_release_n();
    v10 = v39;
    goto LABEL_35;
  }
  v29 = *(_QWORD *)(v40 + 8 * v30);
  if (v29)
  {
    v24 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v24 >= v41)
      goto LABEL_33;
    v29 = *(_QWORD *)(v40 + 8 * v24);
    ++v30;
    if (v29)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BA9EC79C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1BA756C1C(0, &qword_1EF2ACBE8, (void (*)(void))sub_1BA82BC68);
  v3 = sub_1BB873C60();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1BA9ECAB0);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1BB8745CC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

void sub_1BA9ECAC0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_1BA9ECB1C(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController), sel_messageHandlerManager);
  v3 = (void *)sub_1BB872970();
  objc_msgSend(v2, sel_addMessageHandler_name_, v1, v3);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

}

char *sub_1BA9ECC64(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Class v13;
  id v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  char *v26;
  uint64_t v27;
  objc_class *ObjectType;
  objc_super v30;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = sub_1BB86C8E0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onReuse;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  v14 = objc_allocWithZone(v13);
  v15 = v4;
  *(_QWORD *)&v4[v12] = objc_msgSend(v14, sel_init);
  v16 = &v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_layoutIdentifier];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  swift_weakInit();
  v17 = &v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = &v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_teaserInteractionEvents] = MEMORY[0x1E0DEE9E8];
  v19 = &v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = (uint64_t *)&v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_identifier];
  sub_1BB86C8D4();
  v21 = sub_1BB86C8C8();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *v20 = v21;
  v20[1] = v23;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController] = a1;
  v24 = &v15[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_componentProvider];
  *(_QWORD *)v24 = a2;
  *((_QWORD *)v24 + 1) = a3;
  v25 = a1;
  swift_unknownObjectRetain();

  v30.receiver = v15;
  v30.super_class = ObjectType;
  v26 = (char *)objc_msgSendSuper2(&v30, sel_initWithNibName_bundle_, 0, 0);
  v27 = *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_puzzleEmbedViewController]
      + OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v27 + 8) = &protocol witness table for FormatPuzzleEmbedViewController;
  swift_unknownObjectWeakAssign();
  return v26;
}

uint64_t sub_1BA9ECE7C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

void sub_1BA9ECEB0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Class v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_1BB86C8E0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onReuse;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  *(_QWORD *)&v1[v6] = objc_msgSend(objc_allocWithZone(v7), sel_init);
  v8 = &v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_layoutIdentifier];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  swift_weakInit();
  v9 = &v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillShow];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_onKeyboardWillHide];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_teaserInteractionEvents] = MEMORY[0x1E0DEE9E8];
  v11 = &v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_currentAccessoryView];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = (uint64_t *)&v1[OBJC_IVAR____TtC8NewsFeed31FormatPuzzleEmbedViewController_identifier];
  sub_1BB86C8D4();
  v13 = sub_1BB86C8C8();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *v12 = v13;
  v12[1] = v15;

  sub_1BB873EAC();
  __break(1u);
}

id _s8NewsFeed31FormatPuzzleEmbedViewControllerC06puzzleE16DidReceiveAction6actionySo07SWEmbedK0_p_tF_0(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id result;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v2 = sub_1BB86EFEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED476918);
  swift_unknownObjectRetain_n();
  v3 = sub_1BB86EFC8();
  v4 = sub_1BB87330C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(a1, sel_description);
    v8 = sub_1BB8729A0();
    v10 = v9;

    sub_1BA5D2E14(v8, v10, &v15);
    sub_1BB873A8C();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BA493000, v3, v4, "FormatPuzzleEmbedViewController: Received embed action: type= %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v6, -1, -1);
    MEMORY[0x1BCCE5C38](v5, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  result = objc_msgSend(a1, sel_canHandle);
  if ((_DWORD)result)
  {
    v12 = sub_1BB86EFC8();
    v13 = sub_1BB87330C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1BA493000, v12, v13, "FormatPuzzleEmbedViewController: Action is handled internally...", v14, 2u);
      MEMORY[0x1BCCE5C38](v14, -1, -1);
    }

    return objc_msgSend(a1, sel_perform);
  }
  return result;
}

uint64_t sub_1BA9ED29C(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2ACB58, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatPuzzleEmbedViewController, (uint64_t)&protocol conformance descriptor for FormatPuzzleEmbedViewController);
}

uint64_t sub_1BA9ED2C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1BA9ED31C()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t method lookup function for FormatPuzzleEmbedViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatPuzzleEmbedViewController.__allocating_init(puzzleEmbedViewController:componentProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

unint64_t sub_1BA9ED39C()
{
  unint64_t result;

  result = qword_1EF2B13A0;
  if (!qword_1EF2B13A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8889E8, &type metadata for FormatDerivedDataCompilerMode);
    atomic_store(result, (unint64_t *)&qword_1EF2B13A0);
  }
  return result;
}

unint64_t sub_1BA9ED3E0()
{
  unint64_t result;

  result = qword_1ED3AF768;
  if (!qword_1ED3AF768)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedItem.Kind, &type metadata for FeedItem.Kind);
    atomic_store(result, (unint64_t *)&qword_1ED3AF768);
  }
  return result;
}

unint64_t sub_1BA9ED424()
{
  unint64_t result;

  result = qword_1EF2ACB90;
  if (!qword_1EF2ACB90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93AB7C, &type metadata for FormatGroupLayoutFactoryOption);
    atomic_store(result, (unint64_t *)&qword_1EF2ACB90);
  }
  return result;
}

uint64_t sub_1BA9ED468(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBu)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BA9ED480(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBu)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1BA9ED498()
{
  unint64_t result;

  result = qword_1EF2C51E0;
  if (!qword_1EF2C51E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90CD80, &type metadata for FormatFileKey);
    atomic_store(result, (unint64_t *)&qword_1EF2C51E0);
  }
  return result;
}

uint64_t sub_1BA9ED4DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_1BA9ED4F4()
{
  unint64_t result;

  result = qword_1EF2ACBA8;
  if (!qword_1EF2ACBA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB94A330, &type metadata for FormatDerivedDataFileReference);
    atomic_store(result, (unint64_t *)&qword_1EF2ACBA8);
  }
  return result;
}

void sub_1BA9ED538(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1BA9ED590(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BA9ED538(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1BA9ED5CC()
{
  unint64_t result;

  result = qword_1EF2ACBC8;
  if (!qword_1EF2ACBC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSourceMap, &type metadata for FormatSourceMap);
    atomic_store(result, (unint64_t *)&qword_1EF2ACBC8);
  }
  return result;
}

unint64_t sub_1BA9ED610()
{
  unint64_t result;

  result = qword_1EF2ACBD8;
  if (!qword_1EF2ACBD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPackageRole, &type metadata for FormatPackageRole);
    atomic_store(result, (unint64_t *)&qword_1EF2ACBD8);
  }
  return result;
}

uint64_t sub_1BA9ED654()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9ED680(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, _QWORD *);
  _QWORD v11[4];
  _QWORD v12[4];

  v9 = *(uint64_t (**)(_QWORD *, _QWORD *))(v8 + 16);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  *(double *)v11 = a5;
  *(double *)&v11[1] = a6;
  *(double *)&v11[2] = a7;
  *(double *)&v11[3] = a8;
  return v9(v12, v11);
}

uint64_t sub_1BA9ED6C0(double *a1, double *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(double, double, double, double, double, double, double, double))(v2 + 16))(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

unint64_t sub_1BA9ED6F0()
{
  unint64_t result;

  result = qword_1EF2ACC00;
  if (!qword_1EF2ACC00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleTeaserInteractionType, &type metadata for PuzzleTeaserInteractionType);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC00);
  }
  return result;
}

uint64_t sub_1BA9ED734()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BA9ED758(uint64_t a1)
{
  uint64_t v1;

  sub_1BA9D608C(a1, v1);
}

unint64_t sub_1BA9ED760()
{
  unint64_t result;

  result = qword_1ED3A6700;
  if (!qword_1ED3A6700)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB939458, &type metadata for SportsTaxonomyGraph.SportsTaxonomyGraphNodeHasher);
    atomic_store(result, (unint64_t *)&qword_1ED3A6700);
  }
  return result;
}

uint64_t FormatGroupNodeStyle.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatGroupNodeStyle.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatGroupNodeStyle.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FormatGroupNodeStyle.class.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatGroupNodeStyle.selectors.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.selectors.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatGroupNodeStyle.selectors.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatGroupNodeStyle.alpha.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.borders.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.cornerRadius.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 88);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1BA6E6C54(v2, v3, v4);
}

uint64_t FormatGroupNodeStyle.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 136);
  v8 = *(_QWORD *)(v1 + 144);
  v9 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 160);
  v11 = *(_QWORD *)(v1 + 168);
  v12 = *(_BYTE *)(v1 + 176);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  return sub_1BA6E8A48(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t FormatGroupNodeStyle.clipsToBounds.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 177);
}

uint64_t FormatGroupNodeStyle.ignoresSmartInvertColors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 178);
}

uint64_t FormatGroupNodeStyle.__allocating_init(identifier:class:selectors:alpha:borders:cornerRadius:shadow:clipsToBounds:ignoresSmartInvertColors:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, __int128 *a9, __int16 a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v14 = swift_allocObject();
  v15 = *a6;
  v16 = *a8;
  v17 = a8[1];
  LOBYTE(a8) = *((_BYTE *)a8 + 16);
  v24 = a9[1];
  v25 = *a9;
  v22 = a9[3];
  v23 = a9[2];
  v18 = *((_QWORD *)a9 + 8);
  v19 = *((_QWORD *)a9 + 9);
  v20 = *((_BYTE *)a9 + 80);
  swift_beginAccess();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  swift_beginAccess();
  *(_QWORD *)(v14 + 48) = a5;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = a7;
  *(_QWORD *)(v14 + 72) = v16;
  *(_QWORD *)(v14 + 80) = v17;
  *(_BYTE *)(v14 + 88) = (_BYTE)a8;
  *(_OWORD *)(v14 + 96) = v25;
  *(_OWORD *)(v14 + 112) = v24;
  *(_OWORD *)(v14 + 128) = v23;
  *(_OWORD *)(v14 + 144) = v22;
  *(_QWORD *)(v14 + 160) = v18;
  *(_QWORD *)(v14 + 168) = v19;
  *(_BYTE *)(v14 + 176) = v20;
  *(_WORD *)(v14 + 177) = a10;
  return v14;
}

uint64_t FormatGroupNodeStyle.init(identifier:class:selectors:alpha:borders:cornerRadius:shadow:clipsToBounds:ignoresSmartInvertColors:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, __int128 *a9, __int16 a10)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v15 = *a6;
  v17 = *a8;
  v16 = a8[1];
  v26 = *((_BYTE *)a8 + 16);
  v24 = a9[1];
  v25 = *a9;
  v22 = a9[3];
  v23 = a9[2];
  v18 = *((_QWORD *)a9 + 8);
  v21 = *((_QWORD *)a9 + 9);
  v19 = *((_BYTE *)a9 + 80);
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  swift_beginAccess();
  *(_QWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 56) = v15;
  *(_QWORD *)(v10 + 64) = a7;
  *(_QWORD *)(v10 + 72) = v17;
  *(_QWORD *)(v10 + 80) = v16;
  *(_BYTE *)(v10 + 88) = v26;
  *(_OWORD *)(v10 + 96) = v25;
  *(_OWORD *)(v10 + 112) = v24;
  *(_OWORD *)(v10 + 128) = v23;
  *(_OWORD *)(v10 + 144) = v22;
  *(_QWORD *)(v10 + 160) = v18;
  *(_QWORD *)(v10 + 168) = v21;
  *(_BYTE *)(v10 + 176) = v19;
  *(_WORD *)(v10 + 177) = a10;
  return v10;
}

uint64_t sub_1BA9EDC24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t v48;
  __int16 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  unsigned __int8 v100;
  uint64_t v101;
  char v102;
  char v103;
  __int128 v104;
  char v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  char v116;
  unint64_t v117;
  uint64_t v118;
  _BOOL8 v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t *v149;
  uint64_t v150;
  __int16 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned __int8 v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t result;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _OWORD v280[9];
  __int16 v281;
  _QWORD *v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int16 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int16 v302;
  unint64_t v303;

  swift_beginAccess();
  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  swift_beginAccess();
  v224 = v1;
  v7 = v1[6];
  swift_beginAccess();
  v225 = a1;
  v8 = *(_QWORD *)(a1 + 48);
  v303 = MEMORY[0x1E0DEE9E0];
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v8 + 16);
  if (__OFADD__(v9, v10))
    goto LABEL_99;
  v221 = v5;
  v223 = v4;
  sub_1BA9F04E4();
  v222 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v7;
  sub_1BB8727C0();
  v278 = sub_1BA6E6D30(0, v9, 0, MEMORY[0x1E0DEE9D8]);
  v12 = *(_QWORD *)(v7 + 16);
  v220 = v6;
  v226 = v8;
  if (!v12)
    goto LABEL_20;
  v275 = v10;
  swift_bridgeObjectRetain();
  v13 = *(_OWORD *)(v11 + 144);
  v299 = *(_OWORD *)(v11 + 128);
  v300 = v13;
  v301 = *(_OWORD *)(v11 + 160);
  v302 = *(_WORD *)(v11 + 176);
  v14 = *(_OWORD *)(v11 + 80);
  v295 = *(_OWORD *)(v11 + 64);
  v296 = v14;
  v15 = *(_OWORD *)(v11 + 112);
  v297 = *(_OWORD *)(v11 + 96);
  v298 = v15;
  v16 = *(_OWORD *)(v11 + 48);
  v293 = *(_OWORD *)(v11 + 32);
  v294 = v16;
  v17 = *((_QWORD *)&v293 + 1);
  v18 = v12 - 1;
  for (i = 184; ; i += 152)
  {
    v20 = v293;
    sub_1BA9F06B0((uint64_t)&v293);
    sub_1BA9F06B0((uint64_t)&v293);
    swift_bridgeObjectRetain();
    v21 = v303;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v280[0] = v21;
    v24 = sub_1BA6E35A8(v20, v17);
    v25 = *(_QWORD *)(v21 + 16);
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      result = sub_1BB874560();
      __break(1u);
      return result;
    }
    v28 = v23;
    if (*(_QWORD *)(v21 + 24) >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v23 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        sub_1BB4C4754();
        if ((v28 & 1) != 0)
          goto LABEL_11;
      }
    }
    else
    {
      sub_1BB4B1CAC(v27, isUniquelyReferenced_nonNull_native);
      v29 = sub_1BA6E35A8(v20, v17);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_100;
      v24 = v29;
      if ((v28 & 1) != 0)
      {
LABEL_11:
        v31 = *(_QWORD **)&v280[0];
        v32 = *(_QWORD *)(*(_QWORD *)&v280[0] + 56) + 152 * v24;
        v33 = *(_OWORD *)(v32 + 16);
        v283 = *(_OWORD *)v32;
        v284 = v33;
        v34 = *(_OWORD *)(v32 + 80);
        v36 = *(_OWORD *)(v32 + 32);
        v35 = *(_OWORD *)(v32 + 48);
        v287 = *(_OWORD *)(v32 + 64);
        v288 = v34;
        v285 = v36;
        v286 = v35;
        v38 = *(_OWORD *)(v32 + 112);
        v37 = *(_OWORD *)(v32 + 128);
        v39 = *(_OWORD *)(v32 + 96);
        v292 = *(_WORD *)(v32 + 144);
        v290 = v38;
        v291 = v37;
        v289 = v39;
        sub_1BA9F0544((uint64_t)&v283);
        v40 = v294;
        *(_OWORD *)v32 = v293;
        *(_OWORD *)(v32 + 16) = v40;
        v41 = v298;
        v43 = v295;
        v42 = v296;
        *(_OWORD *)(v32 + 64) = v297;
        *(_OWORD *)(v32 + 80) = v41;
        *(_OWORD *)(v32 + 32) = v43;
        *(_OWORD *)(v32 + 48) = v42;
        v45 = v300;
        v44 = v301;
        v46 = v299;
        *(_WORD *)(v32 + 144) = v302;
        *(_OWORD *)(v32 + 112) = v45;
        *(_OWORD *)(v32 + 128) = v44;
        *(_OWORD *)(v32 + 96) = v46;
        goto LABEL_15;
      }
    }
    v31 = *(_QWORD **)&v280[0];
    *(_QWORD *)(*(_QWORD *)&v280[0] + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v47 = (uint64_t *)(v31[6] + 16 * v24);
    *v47 = v20;
    v47[1] = v17;
    v48 = v31[7] + 152 * v24;
    v49 = v302;
    v51 = v300;
    v50 = v301;
    *(_OWORD *)(v48 + 96) = v299;
    *(_OWORD *)(v48 + 112) = v51;
    *(_OWORD *)(v48 + 128) = v50;
    *(_WORD *)(v48 + 144) = v49;
    v53 = v297;
    v52 = v298;
    v54 = v296;
    *(_OWORD *)(v48 + 32) = v295;
    *(_OWORD *)(v48 + 48) = v54;
    *(_OWORD *)(v48 + 64) = v53;
    *(_OWORD *)(v48 + 80) = v52;
    v55 = v294;
    *(_OWORD *)v48 = v293;
    *(_OWORD *)(v48 + 16) = v55;
    v56 = v31[2];
    v57 = __OFADD__(v56, 1);
    v58 = v56 + 1;
    if (v57)
      goto LABEL_95;
    v31[2] = v58;
    swift_bridgeObjectRetain();
LABEL_15:
    v303 = (unint64_t)v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = v278[2];
    v60 = v278[3];
    swift_bridgeObjectRetain();
    if (v59 >= v60 >> 1)
      v278 = sub_1BA6E6D30((_QWORD *)(v60 > 1), v59 + 1, 1, v278);
    v278[2] = v59 + 1;
    v61 = &v278[2 * v59];
    v61[4] = v20;
    v61[5] = v17;
    sub_1BA9F0544((uint64_t)&v293);
    if (!v18)
      break;
    v62 = *(_OWORD *)(v11 + i + 16);
    v293 = *(_OWORD *)(v11 + i);
    v294 = v62;
    v63 = *(_OWORD *)(v11 + i + 32);
    v64 = *(_OWORD *)(v11 + i + 48);
    v65 = *(_OWORD *)(v11 + i + 80);
    v297 = *(_OWORD *)(v11 + i + 64);
    v298 = v65;
    v295 = v63;
    v296 = v64;
    v66 = *(_OWORD *)(v11 + i + 96);
    v67 = *(_OWORD *)(v11 + i + 112);
    v68 = *(_OWORD *)(v11 + i + 128);
    v302 = *(_WORD *)(v11 + i + 144);
    v300 = v67;
    v301 = v68;
    v299 = v66;
    v17 = *((_QWORD *)&v293 + 1);
    --v18;
  }
  swift_bridgeObjectRelease();
  v8 = v226;
  v10 = v275;
LABEL_20:
  v69 = sub_1BA6E6D30(0, v10, 0, MEMORY[0x1E0DEE9D8]);
  v70 = *(_QWORD *)(v8 + 16);
  if (!v70)
    goto LABEL_67;
  swift_bridgeObjectRetain();
  v71 = *(_OWORD *)(v8 + 144);
  v299 = *(_OWORD *)(v8 + 128);
  v300 = v71;
  v301 = *(_OWORD *)(v8 + 160);
  v302 = *(_WORD *)(v8 + 176);
  v72 = *(_OWORD *)(v8 + 80);
  v295 = *(_OWORD *)(v8 + 64);
  v296 = v72;
  v73 = *(_OWORD *)(v8 + 112);
  v297 = *(_OWORD *)(v8 + 96);
  v298 = v73;
  v74 = *(_OWORD *)(v8 + 48);
  v293 = *(_OWORD *)(v8 + 32);
  v294 = v74;
  v75 = v70 - 1;
  v76 = *((_QWORD *)&v293 + 1);
  v77 = 184;
  while (2)
  {
    v78 = v293;
    v79 = (_QWORD *)v303;
    v80 = *(_QWORD *)(v303 + 16);
    sub_1BA9F06B0((uint64_t)&v293);
    if (v80)
    {
      swift_bridgeObjectRetain();
      v81 = sub_1BA6E35A8(v78, v76);
      if ((v82 & 1) != 0)
      {
        v83 = v79[7] + 152 * v81;
        v84 = *(_OWORD *)(v83 + 16);
        v283 = *(_OWORD *)v83;
        v284 = v84;
        v85 = *(_OWORD *)(v83 + 80);
        v87 = *(_OWORD *)(v83 + 32);
        v86 = *(_OWORD *)(v83 + 48);
        v287 = *(_OWORD *)(v83 + 64);
        v288 = v85;
        v285 = v87;
        v286 = v86;
        v88 = *(_OWORD *)(v83 + 96);
        v89 = *(_OWORD *)(v83 + 112);
        v90 = *(_OWORD *)(v83 + 128);
        v292 = *(_WORD *)(v83 + 144);
        v290 = v89;
        v291 = v90;
        v289 = v88;
        sub_1BA9F06B0((uint64_t)&v283);
        swift_bridgeObjectRelease();
        v91 = v284;
        if (!(_QWORD)v284)
          v91 = swift_bridgeObjectRetain();
        v227 = v91;
        v241 = v69;
        v92 = *((_QWORD *)&v284 + 1);
        v93 = v285;
        v94 = BYTE8(v285);
        v257 = v285;
        v259 = *((_QWORD *)&v284 + 1);
        v95 = BYTE8(v285);
        if (BYTE8(v285) >= 0xFEu)
        {
          v92 = *((_QWORD *)&v294 + 1);
          v93 = v295;
          v95 = BYTE8(v295);
          sub_1BA6E6C54(*((uint64_t *)&v294 + 1), v295, SBYTE8(v295));
        }
        v233 = v95;
        v235 = v93;
        v239 = v75;
        v97 = *((_QWORD *)&v286 + 1);
        v96 = v286;
        v98 = *((_QWORD *)&v289 + 1);
        v99 = v290;
        v253 = *((_QWORD *)&v286 + 1);
        v255 = v286;
        v249 = *((_QWORD *)&v287 + 1);
        v273 = *((_QWORD *)&v287 + 1);
        v251 = v287;
        v276 = v287;
        v245 = *((_QWORD *)&v288 + 1);
        v270 = *((_QWORD *)&v288 + 1);
        v247 = v288;
        v271 = v288;
        v267 = *((_QWORD *)&v289 + 1);
        v243 = v289;
        v269 = v289;
        v263 = *((_QWORD *)&v290 + 1);
        v265 = v290;
        v100 = v291;
        v261 = v291;
        if (v291 == 254)
        {
          v97 = *((_QWORD *)&v296 + 1);
          v96 = v296;
          v261 = v301;
          v263 = *((_QWORD *)&v300 + 1);
          v265 = v300;
          v273 = *((_QWORD *)&v297 + 1);
          v276 = v297;
          v270 = *((_QWORD *)&v298 + 1);
          v271 = v298;
          v267 = *((_QWORD *)&v299 + 1);
          v269 = v299;
          sub_1BA6E8A48(v296, *((uint64_t *)&v296 + 1), v297, *((uint64_t *)&v297 + 1), v298, *((uint64_t *)&v298 + 1), v299, *((uint64_t *)&v299 + 1), v300, *((uint64_t *)&v300 + 1), v301);
        }
        v231 = v96;
        v101 = *((_QWORD *)&v291 + 1);
        if (!*((_QWORD *)&v291 + 1))
          v101 = swift_bridgeObjectRetain();
        v230 = v101;
        if (v292 == 2)
          v102 = v302;
        else
          v102 = v292;
        v103 = HIBYTE(v292);
        if (HIBYTE(v292) == 2)
          v103 = HIBYTE(v302);
        v228 = v103;
        v229 = v102;
        v104 = v283;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_1BA6E6C54(v259, v257, v94);
        sub_1BA6E8A48(v255, v253, v251, v249, v247, v245, v243, v98, v99, *((uint64_t *)&v99 + 1), v100);
        swift_bridgeObjectRetain();
        v105 = swift_isUniquelyReferenced_nonNull_native();
        v282 = v79;
        v303 = 0x8000000000000000;
        v107 = sub_1BA6E35A8(v104, *((uint64_t *)&v104 + 1));
        v108 = v79[2];
        v109 = (v106 & 1) == 0;
        v110 = v108 + v109;
        if (__OFADD__(v108, v109))
          goto LABEL_97;
        v111 = v106;
        if (v79[3] >= v110)
        {
          v75 = v239;
          v69 = v241;
          if ((v105 & 1) != 0)
          {
            v114 = v227;
            if ((v106 & 1) == 0)
              goto LABEL_62;
          }
          else
          {
            sub_1BB4C4754();
            v114 = v227;
            if ((v111 & 1) == 0)
              goto LABEL_62;
          }
        }
        else
        {
          sub_1BB4B1CAC(v110, v105);
          v112 = sub_1BA6E35A8(v104, *((uint64_t *)&v104 + 1));
          v75 = v239;
          v69 = v241;
          if ((v111 & 1) != (v113 & 1))
            goto LABEL_100;
          v107 = v112;
          v114 = v227;
          if ((v111 & 1) == 0)
          {
LABEL_62:
            v140 = v282;
            v282[(v107 >> 6) + 8] |= 1 << v107;
            *(_OWORD *)(v140[6] + 16 * v107) = v104;
            v163 = v140[7] + 152 * v107;
            *(_OWORD *)v163 = v104;
            *(_QWORD *)(v163 + 16) = v114;
            *(_QWORD *)(v163 + 24) = v92;
            *(_QWORD *)(v163 + 32) = v235;
            *(_BYTE *)(v163 + 40) = v233;
            *(_QWORD *)(v163 + 48) = v231;
            *(_QWORD *)(v163 + 56) = v97;
            *(_QWORD *)(v163 + 64) = v276;
            *(_QWORD *)(v163 + 72) = v273;
            *(_QWORD *)(v163 + 80) = v271;
            *(_QWORD *)(v163 + 88) = v270;
            *(_QWORD *)(v163 + 96) = v269;
            *(_QWORD *)(v163 + 104) = v267;
            *(_QWORD *)(v163 + 112) = v265;
            *(_QWORD *)(v163 + 120) = v263;
            *(_BYTE *)(v163 + 128) = v261;
            *(_QWORD *)(v163 + 136) = v230;
            *(_BYTE *)(v163 + 144) = v229;
            *(_BYTE *)(v163 + 145) = v228;
            v164 = v140[2];
            v57 = __OFADD__(v164, 1);
            v165 = v164 + 1;
            if (v57)
              goto LABEL_98;
            v140[2] = v165;
            swift_bridgeObjectRetain();
            goto LABEL_64;
          }
        }
        v140 = v282;
        v141 = v282[7] + 152 * v107;
        v142 = *(_OWORD *)(v141 + 16);
        v280[0] = *(_OWORD *)v141;
        v280[1] = v142;
        v143 = *(_OWORD *)(v141 + 80);
        v145 = *(_OWORD *)(v141 + 32);
        v144 = *(_OWORD *)(v141 + 48);
        v280[4] = *(_OWORD *)(v141 + 64);
        v280[5] = v143;
        v280[2] = v145;
        v280[3] = v144;
        v147 = *(_OWORD *)(v141 + 112);
        v146 = *(_OWORD *)(v141 + 128);
        v148 = *(_OWORD *)(v141 + 96);
        v281 = *(_WORD *)(v141 + 144);
        v280[7] = v147;
        v280[8] = v146;
        v280[6] = v148;
        sub_1BA9F0544((uint64_t)v280);
        *(_OWORD *)v141 = v104;
        *(_QWORD *)(v141 + 16) = v114;
        *(_QWORD *)(v141 + 24) = v92;
        *(_QWORD *)(v141 + 32) = v235;
        *(_BYTE *)(v141 + 40) = v233;
        *(_QWORD *)(v141 + 48) = v231;
        *(_QWORD *)(v141 + 56) = v97;
        *(_QWORD *)(v141 + 64) = v276;
        *(_QWORD *)(v141 + 72) = v273;
        *(_QWORD *)(v141 + 80) = v271;
        *(_QWORD *)(v141 + 88) = v270;
        *(_QWORD *)(v141 + 96) = v269;
        *(_QWORD *)(v141 + 104) = v267;
        *(_QWORD *)(v141 + 112) = v265;
        *(_QWORD *)(v141 + 120) = v263;
        *(_BYTE *)(v141 + 128) = v261;
        *(_QWORD *)(v141 + 136) = v230;
        *(_BYTE *)(v141 + 144) = v229;
        *(_BYTE *)(v141 + 145) = v228;
LABEL_64:
        v303 = (unint64_t)v140;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BA9F0544((uint64_t)&v283);
        sub_1BA9F0544((uint64_t)&v293);
        v8 = v226;
        if (!v75)
          goto LABEL_66;
LABEL_65:
        v166 = *(_OWORD *)(v8 + v77 + 16);
        v293 = *(_OWORD *)(v8 + v77);
        v294 = v166;
        v167 = *(_OWORD *)(v8 + v77 + 32);
        v168 = *(_OWORD *)(v8 + v77 + 48);
        v169 = *(_OWORD *)(v8 + v77 + 80);
        v297 = *(_OWORD *)(v8 + v77 + 64);
        v298 = v169;
        v295 = v167;
        v296 = v168;
        v170 = *(_OWORD *)(v8 + v77 + 96);
        v171 = *(_OWORD *)(v8 + v77 + 112);
        v172 = *(_OWORD *)(v8 + v77 + 128);
        v302 = *(_WORD *)(v8 + v77 + 144);
        v300 = v171;
        v301 = v172;
        v299 = v170;
        v76 = *((_QWORD *)&v293 + 1);
        v77 += 152;
        --v75;
        continue;
      }
      swift_bridgeObjectRelease();
    }
    break;
  }
  sub_1BA9F06B0((uint64_t)&v293);
  swift_bridgeObjectRetain();
  v115 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v280[0] = v79;
  v117 = sub_1BA6E35A8(v78, v76);
  v118 = v79[2];
  v119 = (v116 & 1) == 0;
  v120 = v118 + v119;
  if (__OFADD__(v118, v119))
    goto LABEL_94;
  v121 = v116;
  if (v79[3] >= v120)
  {
    if ((v115 & 1) != 0)
    {
      if ((v116 & 1) == 0)
        goto LABEL_55;
    }
    else
    {
      sub_1BB4C4754();
      if ((v121 & 1) == 0)
        goto LABEL_55;
    }
    goto LABEL_50;
  }
  sub_1BB4B1CAC(v120, v115);
  v122 = sub_1BA6E35A8(v78, v76);
  if ((v121 & 1) != (v123 & 1))
    goto LABEL_100;
  v117 = v122;
  if ((v121 & 1) != 0)
  {
LABEL_50:
    v124 = *(_QWORD **)&v280[0];
    v125 = *(_QWORD *)(*(_QWORD *)&v280[0] + 56) + 152 * v117;
    v126 = *(_OWORD *)(v125 + 16);
    v283 = *(_OWORD *)v125;
    v284 = v126;
    v127 = *(_OWORD *)(v125 + 80);
    v129 = *(_OWORD *)(v125 + 32);
    v128 = *(_OWORD *)(v125 + 48);
    v287 = *(_OWORD *)(v125 + 64);
    v288 = v127;
    v285 = v129;
    v286 = v128;
    v131 = *(_OWORD *)(v125 + 112);
    v130 = *(_OWORD *)(v125 + 128);
    v132 = *(_OWORD *)(v125 + 96);
    v292 = *(_WORD *)(v125 + 144);
    v290 = v131;
    v291 = v130;
    v289 = v132;
    sub_1BA9F0544((uint64_t)&v283);
    v133 = v294;
    *(_OWORD *)v125 = v293;
    *(_OWORD *)(v125 + 16) = v133;
    v134 = v298;
    v136 = v295;
    v135 = v296;
    *(_OWORD *)(v125 + 64) = v297;
    *(_OWORD *)(v125 + 80) = v134;
    *(_OWORD *)(v125 + 32) = v136;
    *(_OWORD *)(v125 + 48) = v135;
    v138 = v300;
    v137 = v301;
    v139 = v299;
    *(_WORD *)(v125 + 144) = v302;
    *(_OWORD *)(v125 + 112) = v138;
    *(_OWORD *)(v125 + 128) = v137;
    *(_OWORD *)(v125 + 96) = v139;
    goto LABEL_57;
  }
LABEL_55:
  v124 = *(_QWORD **)&v280[0];
  *(_QWORD *)(*(_QWORD *)&v280[0] + 8 * (v117 >> 6) + 64) |= 1 << v117;
  v149 = (uint64_t *)(v124[6] + 16 * v117);
  *v149 = v78;
  v149[1] = v76;
  v150 = v124[7] + 152 * v117;
  v151 = v302;
  v153 = v300;
  v152 = v301;
  *(_OWORD *)(v150 + 96) = v299;
  *(_OWORD *)(v150 + 112) = v153;
  *(_OWORD *)(v150 + 128) = v152;
  *(_WORD *)(v150 + 144) = v151;
  v155 = v297;
  v154 = v298;
  v156 = v296;
  *(_OWORD *)(v150 + 32) = v295;
  *(_OWORD *)(v150 + 48) = v156;
  *(_OWORD *)(v150 + 64) = v155;
  *(_OWORD *)(v150 + 80) = v154;
  v157 = v294;
  *(_OWORD *)v150 = v293;
  *(_OWORD *)(v150 + 16) = v157;
  v158 = v124[2];
  v57 = __OFADD__(v158, 1);
  v159 = v158 + 1;
  if (v57)
    goto LABEL_96;
  v124[2] = v159;
  swift_bridgeObjectRetain();
LABEL_57:
  v303 = (unint64_t)v124;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v160 = v69[2];
  v161 = v69[3];
  swift_bridgeObjectRetain();
  if (v160 >= v161 >> 1)
    v69 = sub_1BA6E6D30((_QWORD *)(v161 > 1), v160 + 1, 1, v69);
  v69[2] = v160 + 1;
  v162 = &v69[2 * v160];
  v162[4] = v78;
  v162[5] = v76;
  sub_1BA9F0544((uint64_t)&v293);
  if (v75)
    goto LABEL_65;
LABEL_66:
  swift_bridgeObjectRelease();
LABEL_67:
  *(_QWORD *)&v293 = v69;
  swift_bridgeObjectRetain();
  v173 = swift_bridgeObjectRetain();
  sub_1BA6E6E94(v173);
  v174 = v293;
  v175 = *(_QWORD *)(v293 + 16);
  if (v175)
  {
    swift_bridgeObjectRetain();
    v176 = (uint64_t *)(v174 + 40);
    v177 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v178 = v303;
      if (*(_QWORD *)(v303 + 16))
      {
        v180 = *(v176 - 1);
        v179 = *v176;
        swift_bridgeObjectRetain_n();
        v181 = sub_1BA6E35A8(v180, v179);
        if ((v182 & 1) != 0)
        {
          v183 = *(_QWORD *)(v178 + 56) + 152 * v181;
          v184 = *(_OWORD *)(v183 + 16);
          v293 = *(_OWORD *)v183;
          v294 = v184;
          v185 = *(_OWORD *)(v183 + 80);
          v187 = *(_OWORD *)(v183 + 32);
          v186 = *(_OWORD *)(v183 + 48);
          v297 = *(_OWORD *)(v183 + 64);
          v298 = v185;
          v295 = v187;
          v296 = v186;
          v188 = *(_OWORD *)(v183 + 96);
          v189 = *(_OWORD *)(v183 + 112);
          v190 = *(_OWORD *)(v183 + 128);
          v302 = *(_WORD *)(v183 + 144);
          v300 = v189;
          v301 = v190;
          v299 = v188;
          sub_1BA9F06B0((uint64_t)&v293);
          swift_bridgeObjectRelease_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v177 = sub_1BB38DF38(0, v177[2] + 1, 1, v177);
          v192 = v177[2];
          v191 = v177[3];
          if (v192 >= v191 >> 1)
            v177 = sub_1BB38DF38((_QWORD *)(v191 > 1), v192 + 1, 1, v177);
          v177[2] = v192 + 1;
          v193 = &v177[19 * v192];
          v194 = v294;
          *((_OWORD *)v193 + 2) = v293;
          *((_OWORD *)v193 + 3) = v194;
          v195 = v295;
          v196 = v296;
          v197 = v298;
          *((_OWORD *)v193 + 6) = v297;
          *((_OWORD *)v193 + 7) = v197;
          *((_OWORD *)v193 + 4) = v195;
          *((_OWORD *)v193 + 5) = v196;
          v198 = v299;
          v199 = v300;
          v200 = v301;
          *((_WORD *)v193 + 88) = v302;
          *((_OWORD *)v193 + 9) = v199;
          *((_OWORD *)v193 + 10) = v200;
          *((_OWORD *)v193 + 8) = v198;
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v176 += 2;
      --v175;
    }
    while (v175);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v177 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v201 = v224;
  v202 = v224[7];
  if (!v202)
  {
    v202 = *(_QWORD *)(v225 + 56);
    swift_bridgeObjectRetain();
    v201 = v224;
  }
  v203 = v201[8];
  if (!v203)
  {
    v203 = swift_bridgeObjectRetain();
    v201 = v224;
  }
  v260 = v203;
  v266 = v202;
  v204 = v201[9];
  v205 = v201[10];
  v268 = v204;
  v264 = v205;
  v206 = *((unsigned __int8 *)v201 + 88);
  v262 = *((_BYTE *)v201 + 88);
  if (v206 >= 0xFE)
  {
    v204 = *(_QWORD *)(v225 + 72);
    v205 = *(_QWORD *)(v225 + 80);
    LOBYTE(v206) = *(_BYTE *)(v225 + 88);
    sub_1BA6E6C54(v204, v205, v206);
    v201 = v224;
  }
  v240 = v205;
  v242 = v204;
  v207 = v201[12];
  v208 = v201[13];
  v209 = v201[18];
  v210 = v201[19];
  v211 = v201[20];
  v212 = v201[21];
  v256 = v208;
  v258 = v207;
  v252 = v201[15];
  v254 = v201[14];
  v277 = v252;
  v279 = v254;
  v248 = v201[17];
  v250 = v201[16];
  v272 = v248;
  v274 = v250;
  v244 = v210;
  v246 = v209;
  v236 = v212;
  v237 = v211;
  v213 = *((unsigned __int8 *)v201 + 176);
  v214 = *((_BYTE *)v201 + 176);
  if (v213 == 254)
  {
    v207 = *(_QWORD *)(v225 + 96);
    v208 = *(_QWORD *)(v225 + 104);
    v209 = *(_QWORD *)(v225 + 144);
    v210 = *(_QWORD *)(v225 + 152);
    v211 = *(_QWORD *)(v225 + 160);
    v212 = *(_QWORD *)(v225 + 168);
    v214 = *(_BYTE *)(v225 + 176);
    v277 = *(_QWORD *)(v225 + 120);
    v279 = *(_QWORD *)(v225 + 112);
    v272 = *(_QWORD *)(v225 + 136);
    v274 = *(_QWORD *)(v225 + 128);
    sub_1BA6E8A48(v207, v208, v279, v277, v274, v272, v209, v210, v211, v212, v214);
    v201 = v224;
  }
  v232 = v209;
  v234 = v208;
  v238 = v206;
  v215 = *((unsigned __int8 *)v201 + 177);
  if (v215 == 2)
    LOBYTE(v215) = *(_BYTE *)(v225 + 177);
  v216 = v207;
  v217 = *((unsigned __int8 *)v201 + 178);
  if (v217 == 2)
    LOBYTE(v217) = *(_BYTE *)(v225 + 178);
  v218 = swift_allocObject();
  swift_beginAccess();
  *(_QWORD *)(v218 + 16) = v223;
  *(_QWORD *)(v218 + 24) = v222;
  *(_QWORD *)(v218 + 32) = v221;
  *(_QWORD *)(v218 + 40) = v220;
  swift_beginAccess();
  *(_QWORD *)(v218 + 48) = v177;
  *(_QWORD *)(v218 + 56) = v266;
  *(_QWORD *)(v218 + 64) = v260;
  *(_QWORD *)(v218 + 72) = v242;
  *(_QWORD *)(v218 + 80) = v240;
  *(_BYTE *)(v218 + 88) = v238;
  *(_QWORD *)(v218 + 96) = v216;
  *(_QWORD *)(v218 + 104) = v234;
  *(_QWORD *)(v218 + 112) = v279;
  *(_QWORD *)(v218 + 120) = v277;
  *(_QWORD *)(v218 + 128) = v274;
  *(_QWORD *)(v218 + 136) = v272;
  *(_QWORD *)(v218 + 144) = v232;
  *(_QWORD *)(v218 + 152) = v210;
  *(_QWORD *)(v218 + 160) = v211;
  *(_QWORD *)(v218 + 168) = v212;
  *(_BYTE *)(v218 + 176) = v214;
  *(_BYTE *)(v218 + 177) = v215;
  *(_BYTE *)(v218 + 178) = v217;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA6E6C54(v268, v264, v262);
  sub_1BA6E8A48(v258, v256, v254, v252, v250, v248, v246, v244, v237, v236, v213);
  return v218;
}

uint64_t sub_1BA9EEB88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  size_t v25;
  uint64_t isStackAllocationSafe;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t j;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t result;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int16 v121;
  uint64_t v122;

  v100 = a1;
  v101 = 0;
  v122 = *MEMORY[0x1E0C80C00];
  v94 = *v1;
  swift_beginAccess();
  v89 = v1;
  v2 = v1[6];
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = sub_1BB38DF38(0, v3, 0, MEMORY[0x1E0DEE9D8]);
  v90 = sub_1BB38DE1C(0, v3, 0, v4);
  v92 = *(_QWORD *)(v2 + 16);
  v93 = v2;
  if (!v92)
  {
LABEL_31:
    sub_1BA9F0614(0);
    v55 = sub_1BB872DE4();
    swift_bridgeObjectRelease();
    v56 = *(_QWORD *)(v55 + 16);
    if (v56)
    {
      v57 = v56 - 1;
      for (i = 32; ; i += 160)
      {
        v59 = *(_OWORD *)(v55 + i + 16);
        v102 = *(_OWORD *)(v55 + i);
        v103 = v59;
        v60 = *(_OWORD *)(v55 + i + 32);
        v61 = *(_OWORD *)(v55 + i + 48);
        v62 = *(_OWORD *)(v55 + i + 80);
        v106 = *(_OWORD *)(v55 + i + 64);
        v107 = v62;
        v104 = v60;
        v105 = v61;
        v63 = *(_OWORD *)(v55 + i + 96);
        v64 = *(_OWORD *)(v55 + i + 112);
        v65 = *(_OWORD *)(v55 + i + 144);
        v110 = *(_OWORD *)(v55 + i + 128);
        v111 = v65;
        v108 = v63;
        v109 = v64;
        sub_1BA9F06B0((uint64_t)&v102);
        v67 = v5[2];
        v66 = v5[3];
        if (v67 >= v66 >> 1)
          v5 = sub_1BB38DF38((_QWORD *)(v66 > 1), v67 + 1, 1, v5);
        v5[2] = v67 + 1;
        v68 = &v5[19 * v67];
        v69 = v103;
        *((_OWORD *)v68 + 2) = v102;
        *((_OWORD *)v68 + 3) = v69;
        v70 = v104;
        v71 = v105;
        v72 = v107;
        *((_OWORD *)v68 + 6) = v106;
        *((_OWORD *)v68 + 7) = v72;
        *((_OWORD *)v68 + 4) = v70;
        *((_OWORD *)v68 + 5) = v71;
        v73 = v108;
        v74 = v109;
        v75 = v110;
        *((_WORD *)v68 + 88) = v111;
        *((_OWORD *)v68 + 9) = v74;
        *((_OWORD *)v68 + 10) = v75;
        *((_OWORD *)v68 + 8) = v73;
        if (!v57)
          break;
        --v57;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76 = v5[2];
    if (v76)
    {
      v77 = (uint64_t)v89;
      swift_retain();
      swift_bridgeObjectRetain();
      v78 = v76 - 1;
      v79 = v77;
      for (j = 4; ; j += 19)
      {
        v81 = *(_OWORD *)&v5[j + 2];
        v102 = *(_OWORD *)&v5[j];
        v103 = v81;
        v82 = *(_OWORD *)&v5[j + 4];
        v83 = *(_OWORD *)&v5[j + 6];
        v84 = *(_OWORD *)&v5[j + 10];
        v106 = *(_OWORD *)&v5[j + 8];
        v107 = v84;
        v104 = v82;
        v105 = v83;
        v85 = *(_OWORD *)&v5[j + 12];
        v86 = *(_OWORD *)&v5[j + 14];
        v87 = *(_OWORD *)&v5[j + 16];
        LOWORD(v111) = v5[j + 18];
        v110 = v87;
        v108 = v85;
        v109 = v86;
        v118 = v85;
        v119 = v86;
        v120 = v87;
        v121 = v111;
        v114 = v104;
        v115 = v105;
        v116 = v106;
        v117 = v84;
        v112 = v102;
        v113 = v103;
        swift_allocObject();
        sub_1BA9F06B0((uint64_t)&v102);
        v79 = sub_1BA9F077C(v79, &v112);
        swift_release();
        if (!v78)
          break;
        --v78;
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v79 = (uint64_t)v89;
      swift_retain();
      swift_bridgeObjectRelease();
    }
    return v79;
  }
  v91 = v2 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
LABEL_3:
  v96 = v6;
  v7 = v91 + 152 * v6;
  v8 = *(_OWORD *)(v7 + 16);
  v112 = *(_OWORD *)v7;
  v113 = v8;
  v9 = *(_OWORD *)(v7 + 32);
  v10 = *(_OWORD *)(v7 + 48);
  v11 = *(_OWORD *)(v7 + 80);
  v116 = *(_OWORD *)(v7 + 64);
  v117 = v11;
  v114 = v9;
  v115 = v10;
  v12 = *(_OWORD *)(v7 + 96);
  v13 = *(_OWORD *)(v7 + 112);
  v14 = *(_OWORD *)(v7 + 128);
  v121 = *(_WORD *)(v7 + 144);
  v119 = v13;
  v120 = v14;
  v118 = v12;
  v15 = v112;
  sub_1BA9F06B0((uint64_t)&v112);
  if (qword_1ED3BE7F8 != -1)
    swift_once();
  v102 = v15;
  swift_bridgeObjectRetain();
  v16 = sub_1BA6E583C((uint64_t *)&v102);
  swift_bridgeObjectRelease();
  v98 = *(_QWORD *)(v16 + 16);
  if (!v98)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v95 = v5;
  v17 = 0;
  v18 = (uint64_t *)(v16 + 64);
  v19 = v16;
  while (1)
  {
    if (v17 >= *(_QWORD *)(v19 + 16))
    {
      __break(1u);
      goto LABEL_45;
    }
    v97 = *(v18 - 2);
    v20 = *(v18 - 1);
    v21 = *v18;
    v22 = *(_BYTE *)(v20 + 32);
    v23 = v22 & 0x3F;
    v24 = (unint64_t)((1 << v22) + 63) >> 6;
    v25 = 8 * v24;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v27 = (char *)swift_slowAlloc();
    bzero(v27, v25);
    v31 = v24;
    v29 = v101;
    v30 = sub_1BA6EB5B4((uint64_t)v27, v31, v20, v100);
    swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_47;
    v101 = 0;
    MEMORY[0x1BCCE5C38](v27, -1, -1);
LABEL_15:
    v32 = sub_1BA6EB330(v30, v20);
    swift_release();
    if ((v32 & 1) != 0 && (sub_1BA6EBD20(v100, v21) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v33 = v97;
      if (v97 < 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BA9F06B0((uint64_t)&v112);
        v5 = v95;
        v46 = v95[2];
        v45 = v95[3];
        if (v46 >= v45 >> 1)
          v5 = sub_1BB38DF38((_QWORD *)(v45 > 1), v46 + 1, 1, v95);
        v5[2] = v46 + 1;
        v47 = &v5[19 * v46];
        v48 = v113;
        *((_OWORD *)v47 + 2) = v112;
        *((_OWORD *)v47 + 3) = v48;
        v49 = v114;
        v50 = v115;
        v51 = v117;
        *((_OWORD *)v47 + 6) = v116;
        *((_OWORD *)v47 + 7) = v51;
        *((_OWORD *)v47 + 4) = v49;
        *((_OWORD *)v47 + 5) = v50;
        v52 = v118;
        v53 = v119;
        v54 = v120;
        *((_WORD *)v47 + 88) = v121;
        *((_OWORD *)v47 + 9) = v53;
        *((_OWORD *)v47 + 10) = v54;
        *((_OWORD *)v47 + 8) = v52;
      }
      else
      {
        sub_1BA9F06B0((uint64_t)&v112);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v90;
        v36 = v90[2];
        v35 = v90[3];
        v5 = v95;
        if (v36 >= v35 >> 1)
          v34 = sub_1BB38DE1C((_QWORD *)(v35 > 1), v36 + 1, 1, v90);
        v106 = v116;
        v107 = v117;
        v104 = v114;
        v105 = v115;
        LOWORD(v111) = v121;
        v110 = v120;
        v108 = v118;
        v109 = v119;
        v102 = v112;
        v103 = v113;
        v34[2] = v36 + 1;
        v90 = v34;
        v37 = &v34[20 * v36];
        v38 = v103;
        *((_OWORD *)v37 + 2) = v102;
        *((_OWORD *)v37 + 3) = v38;
        v39 = v104;
        v40 = v105;
        v41 = v107;
        *((_OWORD *)v37 + 6) = v106;
        *((_OWORD *)v37 + 7) = v41;
        *((_OWORD *)v37 + 4) = v39;
        *((_OWORD *)v37 + 5) = v40;
        v42 = v108;
        v43 = v110;
        v44 = v111;
        *((_OWORD *)v37 + 9) = v109;
        *((_OWORD *)v37 + 10) = v43;
        *((_OWORD *)v37 + 8) = v42;
        v37[22] = v44;
        v37[23] = v33;
      }
LABEL_26:
      sub_1BA9F0544((uint64_t)&v112);
LABEL_27:
      v6 = v96 + 1;
      if (v96 + 1 == v92)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      if (v6 >= *(_QWORD *)(v93 + 16))
LABEL_45:
        __break(1u);
      goto LABEL_3;
    }
    ++v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 += 5;
    if (v98 == v17)
    {
      swift_bridgeObjectRelease();
      sub_1BA9F0544((uint64_t)&v112);
      v5 = v95;
      goto LABEL_27;
    }
  }
  v99 = &v89;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v27 = (char *)&v89 - ((v25 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v27, v25);
  v28 = v24;
  v29 = v101;
  v30 = sub_1BA6EB5B4((uint64_t)v27, v28, v20, v100);
  swift_bridgeObjectRelease();
  if (!v29)
  {
    v101 = 0;
    goto LABEL_15;
  }
  swift_willThrow();

  __break(1u);
LABEL_47:

  result = MEMORY[0x1BCCE5C38](v27, -1, -1);
  __break(1u);
  return result;
}

uint64_t sub_1BA9EF2D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  swift_beginAccess();
  v2 = v0[3];
  v29 = v0[2];
  v3 = v0[5];
  v27 = v0[4];
  swift_beginAccess();
  v4 = v0[6];
  v5 = v0[7];
  v6 = v0[8];
  v28 = v2;
  v26 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
    v7 = sub_1BAF49D98(v6);
  else
    v7 = 0;
  v8 = v1[9];
  v9 = v1[10];
  v10 = *((_BYTE *)v1 + 88);
  v11 = v1[13];
  v12 = v1[16];
  v13 = *((unsigned __int8 *)v1 + 176);
  v24 = v1[12];
  v25 = v7;
  v22 = v1[15];
  v23 = v1[14];
  v20 = v1[18];
  v21 = v1[17];
  v18 = v1[20];
  v19 = v1[19];
  v17 = v1[21];
  sub_1BA6E6C54(v8, v9, v10);
  if (v13 != 254)
  {
    sub_1BB525134();
    v12 = v30;
    v11 = v11;
  }
  v14 = *(_WORD *)((char *)v1 + 177);
  v15 = swift_allocObject();
  swift_beginAccess();
  *(_QWORD *)(v15 + 16) = v29;
  *(_QWORD *)(v15 + 24) = v28;
  *(_QWORD *)(v15 + 32) = v27;
  *(_QWORD *)(v15 + 40) = v26;
  swift_beginAccess();
  *(_QWORD *)(v15 + 48) = v4;
  *(_QWORD *)(v15 + 56) = v5;
  *(_QWORD *)(v15 + 64) = v25;
  *(_QWORD *)(v15 + 72) = v8;
  *(_QWORD *)(v15 + 80) = v9;
  *(_BYTE *)(v15 + 88) = v10;
  *(_QWORD *)(v15 + 96) = v24;
  *(_QWORD *)(v15 + 104) = v11;
  *(_QWORD *)(v15 + 112) = v23;
  *(_QWORD *)(v15 + 120) = v22;
  *(_QWORD *)(v15 + 128) = v12;
  *(_QWORD *)(v15 + 136) = v21;
  *(_QWORD *)(v15 + 144) = v20;
  *(_QWORD *)(v15 + 152) = v19;
  *(_QWORD *)(v15 + 160) = v18;
  *(_QWORD *)(v15 + 168) = v17;
  *(_BYTE *)(v15 + 176) = v13;
  *(_WORD *)(v15 + 177) = v14;
  return v15;
}

uint64_t FormatGroupNodeStyle.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6E6CC4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  sub_1BA6E8A78(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 176));
  return v0;
}

uint64_t FormatGroupNodeStyle.__deallocating_deinit()
{
  FormatGroupNodeStyle.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA9EF56C(uint64_t *a1, uint64_t *a2)
{
  return _s8NewsFeed20FormatGroupNodeStyleC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t FormatGroupNodeStyle.Selector.selector.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.Selector.borders.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.Selector.cornerRadius.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1BA6E6C54(v2, v3, v4);
}

uint64_t FormatGroupNodeStyle.Selector.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 120);
  v12 = *(_BYTE *)(v1 + 128);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  return sub_1BA6E8A48(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t FormatGroupNodeStyle.Selector.alpha.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 136);
  return swift_bridgeObjectRetain();
}

uint64_t FormatGroupNodeStyle.Selector.clipsToBounds.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t FormatGroupNodeStyle.Selector.ignoresSmartInvertColors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t sub_1BA9EF614@<X0>(__int128 *a1@<X0>, __int128 *a2@<X8>)
{
  return FormatGroupNodeStyle.Selector.init(from:)(a1, a2);
}

uint64_t sub_1BA9EF628(_QWORD *a1)
{
  return FormatGroupNodeStyle.Selector.encode(to:)(a1);
}

uint64_t FormatGroupNodeStyle.auxViewRequirements.getter()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA9EF64C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 152);
  return result;
}

uint64_t sub_1BA9EF658()
{
  sub_1BA833E3C();
  return sub_1BB86BD28();
}

uint64_t _s8NewsFeed20FormatGroupNodeStyleC8SelectorV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v50 = *(_QWORD *)(a1 + 48);
  v51 = *(_QWORD *)(a1 + 56);
  v52 = *(_QWORD *)(a1 + 64);
  v53 = *(_QWORD *)(a1 + 72);
  v54 = *(_QWORD *)(a1 + 80);
  v55 = *(_QWORD *)(a1 + 88);
  v56 = *(_QWORD *)(a1 + 96);
  v57 = *(_QWORD *)(a1 + 104);
  v48 = *(_QWORD *)(a1 + 120);
  v49 = *(_QWORD *)(a1 + 112);
  v58 = *(unsigned __int8 *)(a1 + 128);
  v37 = *(_QWORD *)(a1 + 136);
  v35 = *(unsigned __int8 *)(a1 + 144);
  v6 = *(unsigned __int8 *)(a1 + 145);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(unsigned __int8 *)(a2 + 40);
  v40 = *(_QWORD *)(a2 + 48);
  v41 = *(_QWORD *)(a2 + 56);
  v42 = *(_QWORD *)(a2 + 64);
  v43 = *(_QWORD *)(a2 + 72);
  v44 = *(_QWORD *)(a2 + 80);
  v45 = *(_QWORD *)(a2 + 88);
  v46 = *(_QWORD *)(a2 + 96);
  v47 = *(_QWORD *)(a2 + 104);
  v38 = *(_QWORD *)(a2 + 120);
  v39 = *(_QWORD *)(a2 + 112);
  v11 = *(unsigned __int8 *)(a2 + 128);
  v36 = *(_QWORD *)(a2 + 136);
  v33 = *(unsigned __int8 *)(a2 + 145);
  v34 = *(unsigned __int8 *)(a2 + 144);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v12 = sub_1BB874398();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
  if (v2)
  {
    if (!v8)
      return 0;
    v32 = v6;
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v15 = sub_1BA882894(v14, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v15)
      return 0;
  }
  else
  {
    v32 = v6;
    if (v8)
      return 0;
  }
  if (v5 > 0xFD)
  {
    if (v10 > 0xFD)
      goto LABEL_16;
LABEL_14:
    sub_1BA6E6C54(v7, v9, v10);
    sub_1BA6E6CC4(v3, v4, v5);
    sub_1BA6E6CC4(v7, v9, v10);
    return 0;
  }
  v70 = v3;
  v71 = v4;
  LOBYTE(v72) = v5;
  if (v10 > 0xFD)
  {
    sub_1BA6F2B04(v3, v4, v5);
    sub_1BA6F2B04(v3, v4, v5);
    sub_1BA6F2B88(v3, v4, v5);
    goto LABEL_14;
  }
  v59 = v7;
  v60 = v9;
  LOBYTE(v61) = v10;
  sub_1BA6E6C54(v3, v4, v5);
  sub_1BA6F2B04(v3, v4, v5);
  v16 = _s8NewsFeed18FormatCornerRadiusO2eeoiySbAC_ACtFZ_0((uint64_t)&v70, (uint64_t)&v59);
  sub_1BA6F2B88(v70, v71, v72);
  sub_1BA6E6CC4(v3, v4, v5);
  if ((v16 & 1) == 0)
    return 0;
LABEL_16:
  v17 = v58;
  if (v58 == 254)
  {
    v18 = v32;
    v20 = v56;
    v19 = v57;
    v22 = v54;
    v21 = v55;
    v24 = v52;
    v23 = v53;
    v25 = v50;
    v26 = v51;
    v27 = v48;
    v28 = v49;
    if (v11 == 254)
      goto LABEL_23;
LABEL_21:
    v70 = v25;
    v71 = v26;
    v72 = v24;
    v73 = v23;
    v74 = v22;
    v75 = v21;
    v76 = v20;
    v77 = v19;
    v78 = v28;
    v79 = v27;
    v80 = v17;
    v81 = v40;
    v82 = v41;
    v83 = v42;
    v84 = v43;
    v85 = v44;
    v86 = v45;
    v87 = v46;
    v88 = v47;
    v89 = v39;
    v90 = v38;
    v91 = v11;
    sub_1BA6E8A48(v40, v41, v42, v43, v44, v45, v46, v47, v39, v38, v11);
    sub_1BA9F10E8((uint64_t)&v70);
    return 0;
  }
  v25 = v50;
  v26 = v51;
  v70 = v50;
  v71 = v51;
  v24 = v52;
  v23 = v53;
  v72 = v52;
  v73 = v53;
  v22 = v54;
  v21 = v55;
  v74 = v54;
  v75 = v55;
  v20 = v56;
  v76 = v56;
  v77 = v57;
  v27 = v48;
  v28 = v49;
  v78 = v49;
  v79 = v48;
  v80 = v58;
  if (v11 == 254)
  {
    swift_retain();
    v19 = v57;
    v17 = v58;
    goto LABEL_21;
  }
  v59 = v40;
  LODWORD(v60) = v41;
  v61 = v42;
  v62 = v43;
  v63 = v44;
  v64 = v45;
  v65 = v46;
  v66 = v47;
  v67 = v39;
  v68 = v38;
  v69 = v11;
  sub_1BA6E8A48(v50, v51, v52, v53, v54, v55, v56, v57, v49, v48, v58);
  swift_retain();
  v29 = _s8NewsFeed12FormatShadowV2eeoiySbAC_ACtFZ_0((uint64_t)&v70, (uint64_t)&v59);
  swift_release();
  sub_1BA6E8A78(v50, v51, v52, v53, v54, v55, v56, v57, v49, v48, v58);
  v18 = v32;
  if ((v29 & 1) == 0)
    return 0;
LABEL_23:
  if (v37)
  {
    if (!v36)
      return 0;
    v30 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = sub_1BA881EAC(v37, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = v30;
    if ((v31 & 1) == 0)
      return 0;
    goto LABEL_28;
  }
  if (v36)
    return 0;
LABEL_28:
  if (v35 == 2)
  {
    if (v34 != 2)
      return 0;
LABEL_33:
    if (v18 == 2)
    {
      if (v33 != 2)
        return 0;
    }
    else if (v33 == 2 || ((((v18 & 1) == 0) ^ v33) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  result = 0;
  if (v34 != 2 && ((((v35 & 1) == 0) ^ v34) & 1) != 0)
    goto LABEL_33;
  return result;
}

uint64_t sub_1BA9EFB98(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA9EFC7C(&qword_1EF2ACC08, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9EFBCC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_1BA9EFC7C(&qword_1ED3C8D60, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  result = sub_1BA9EFC7C(&qword_1ED3A6800, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1BA9EFC18(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA9EFC7C(&qword_1ED3C8D60, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  a1[2] = sub_1BA9EFC7C(&qword_1ED3A6800, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  result = sub_1BA9EFC7C(&qword_1EF2ACC10, (uint64_t)&protocol conformance descriptor for FormatGroupNodeStyle);
  a1[3] = result;
  return result;
}

uint64_t sub_1BA9EFC7C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatGroupNodeStyle();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BA9EFCB8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9EFCDC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9EFCDC()
{
  unint64_t result;

  result = qword_1EF2ACC18;
  if (!qword_1EF2ACC18)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeStyle.Selector, &type metadata for FormatGroupNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC18);
  }
  return result;
}

unint64_t sub_1BA9EFD20(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA82D454();
  result = sub_1BA82D498();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA9EFD4C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA82D454();
  a1[2] = sub_1BA82D498();
  result = sub_1BA9EFD80();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA9EFD80()
{
  unint64_t result;

  result = qword_1EF2ACC20;
  if (!qword_1EF2ACC20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeStyle.Selector, &type metadata for FormatGroupNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC20);
  }
  return result;
}

uint64_t sub_1BA9EFDC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9EFE10@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for FormatGroupNodeStyle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatGroupNodeStyle.__allocating_init(identifier:class:selectors:alpha:borders:cornerRadius:shadow:clipsToBounds:ignoresSmartInvertColors:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for FormatGroupNodeStyle.Selector(uint64_t a1)
{
  unsigned int v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 <= 0xFD)
    sub_1BA6F2B88(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  if (*(unsigned __int8 *)(a1 + 128) != 254)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatGroupNodeStyle.Selector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 <= 0xFD)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    sub_1BA6F2B04(v6, v7, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  if (*(unsigned __int8 *)(a2 + 128) == 254)
  {
    v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    swift_retain();
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatGroupNodeStyle.Selector(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) <= 0xFDu)
  {
    if (v6 <= 0xFD)
    {
      v11 = *(_QWORD *)(a2 + 24);
      v12 = *(_QWORD *)(a2 + 32);
      sub_1BA6F2B04(v11, v12, *(_BYTE *)(a2 + 40));
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v12;
      v15 = *(_BYTE *)(a1 + 40);
      *(_BYTE *)(a1 + 40) = v6;
      sub_1BA6F2B88(v13, v14, v15);
    }
    else
    {
      sub_1BA9F0244(a1 + 24);
      v8 = *(_BYTE *)(a2 + 40);
      *v4 = *v5;
      *(_BYTE *)(a1 + 40) = v8;
    }
  }
  else if (v6 <= 0xFD)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    sub_1BA6F2B04(v9, v10, *(_BYTE *)(a2 + 40));
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    v7 = *v5;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *v4 = v7;
  }
  v16 = (_OWORD *)(a1 + 48);
  v17 = (_OWORD *)(a2 + 48);
  v18 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 254)
  {
    if (v18 == 254)
    {
      v19 = *(_OWORD *)(a2 + 64);
      *v16 = *v17;
      *(_OWORD *)(a1 + 64) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 96);
      v22 = *(_OWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_OWORD *)(a1 + 96) = v21;
      *(_OWORD *)(a1 + 112) = v22;
      *(_OWORD *)(a1 + 80) = v20;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v27 = *(_OWORD *)(a2 + 88);
      v28 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      *(_OWORD *)(a1 + 104) = v28;
      *(_OWORD *)(a1 + 88) = v27;
      swift_retain();
    }
  }
  else if (v18 == 254)
  {
    sub_1BA9F0278(a1 + 48);
    v23 = *(_OWORD *)(a2 + 64);
    *v16 = *v17;
    *(_OWORD *)(a1 + 64) = v23;
    v25 = *(_OWORD *)(a2 + 96);
    v24 = *(_OWORD *)(a2 + 112);
    v26 = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v25;
    *(_OWORD *)(a1 + 112) = v24;
    *(_OWORD *)(a1 + 80) = v26;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_release();
    v29 = *(_OWORD *)(a2 + 88);
    v30 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    *(_OWORD *)(a1 + 104) = v30;
    *(_OWORD *)(a1 + 88) = v29;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  return a1;
}

uint64_t sub_1BA9F0244(uint64_t a1)
{
  destroy for FormatCornerRadius(a1);
  return a1;
}

uint64_t sub_1BA9F0278(uint64_t a1)
{
  destroy for FormatShadow();
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FormatGroupNodeStyle.Selector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 > 0xFD)
    goto LABEL_4;
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (v7 > 0xFD)
  {
    sub_1BA9F0244(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v5;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *v5;
  *(_BYTE *)(a1 + 40) = v7;
  sub_1BA6F2B88(v8, v9, v6);
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 128) != 254)
  {
    if (*(unsigned __int8 *)(a2 + 128) != 254)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_release();
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      goto LABEL_11;
    }
    sub_1BA9F0278(a1 + 48);
  }
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
LABEL_11:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatGroupNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 146))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatGroupNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 146) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 146) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatGroupNodeStyle.Selector()
{
  return &type metadata for FormatGroupNodeStyle.Selector;
}

void sub_1BA9F04E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AAC20)
  {
    sub_1BA834FF0();
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AAC20);
  }
}

uint64_t sub_1BA9F0544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6E6CC4(v2, v3, v9);
  sub_1BA6E8A78(v16, v15, v14, v13, v4, v5, v12, v11, v6, v7, v8);
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1BA9F0614(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3A8430)
  {
    v2 = sub_1BA9F066C();
    v4 = type metadata accessor for FormatNodeStyleSelectorOrder(a1, (uint64_t)&type metadata for FormatGroupNodeStyle.Selector, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3A8430);
  }
}

unint64_t sub_1BA9F066C()
{
  unint64_t result;

  result = qword_1ED3A67F8;
  if (!qword_1ED3A67F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88E564, &type metadata for FormatGroupNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A67F8);
  }
  return result;
}

uint64_t sub_1BA9F06B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA6E6C54(v2, v3, v9);
  sub_1BA6E8A48(v16, v15, v14, v13, v4, v5, v12, v11, v6, v7, v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BA9F077C(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int128 v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;

  v4 = a2[7];
  v55 = a2[6];
  v56 = v4;
  v57 = a2[8];
  v58 = *((_WORD *)a2 + 72);
  v5 = a2[3];
  v51 = a2[2];
  v52 = v5;
  v6 = a2[5];
  v53 = a2[4];
  v54 = v6;
  v7 = a2[1];
  v49 = *a2;
  v50 = v7;
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = v8;
  *(_QWORD *)(v2 + 24) = v9;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 40) = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = v11;
  v12 = *((_QWORD *)&v57 + 1);
  if (!*((_QWORD *)&v57 + 1))
    v12 = swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 56) = v12;
  v13 = v50;
  if (!(_QWORD)v50)
    v13 = swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 64) = v13;
  v14 = *((_QWORD *)&v50 + 1);
  v15 = v51;
  v47 = v51;
  v48 = *((_QWORD *)&v50 + 1);
  v16 = BYTE8(v51);
  v46 = BYTE8(v51);
  if (BYTE8(v51) >= 0xFEu)
  {
    v14 = *(_QWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(_BYTE *)(a1 + 88);
    sub_1BA6E6C54(v14, v15, v16);
  }
  *(_QWORD *)(v2 + 72) = v14;
  *(_QWORD *)(v2 + 80) = v15;
  v17 = *((_QWORD *)&v52 + 1);
  v19 = *((_QWORD *)&v53 + 1);
  v18 = v53;
  v21 = *((_QWORD *)&v54 + 1);
  v20 = v54;
  v23 = *((_QWORD *)&v55 + 1);
  v22 = v55;
  v44 = *((_QWORD *)&v52 + 1);
  v45 = v52;
  v24 = v52;
  v42 = *((_QWORD *)&v53 + 1);
  v43 = v53;
  v40 = *((_QWORD *)&v54 + 1);
  v41 = v54;
  v38 = *((_QWORD *)&v55 + 1);
  v39 = v55;
  v25 = *((_QWORD *)&v56 + 1);
  v27 = v56;
  v36 = v27 >> 64;
  v26 = v27;
  v37 = v56;
  *(_BYTE *)(v2 + 88) = v16;
  v28 = v57;
  v35 = v57;
  if (v57 == 254)
  {
    v33 = *(_QWORD *)(a1 + 104);
    v34 = *(_QWORD *)(a1 + 96);
    v19 = *(_QWORD *)(a1 + 120);
    v32 = *(_QWORD *)(a1 + 112);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = *(_QWORD *)(a1 + 136);
    v22 = *(_QWORD *)(a1 + 144);
    v23 = *(_QWORD *)(a1 + 152);
    v26 = *(_QWORD *)(a1 + 160);
    v25 = *(_QWORD *)(a1 + 168);
    v28 = *(_BYTE *)(a1 + 176);
    sub_1BA6E8A48(v34, v33, v32, v19, v20, v21, v22, v23, v26, v25, v28);
    v18 = v32;
    v17 = v33;
    v24 = v34;
  }
  *(_QWORD *)(v2 + 96) = v24;
  *(_QWORD *)(v2 + 104) = v17;
  *(_QWORD *)(v2 + 112) = v18;
  *(_QWORD *)(v2 + 120) = v19;
  *(_QWORD *)(v2 + 128) = v20;
  *(_QWORD *)(v2 + 136) = v21;
  *(_QWORD *)(v2 + 144) = v22;
  *(_QWORD *)(v2 + 152) = v23;
  *(_QWORD *)(v2 + 160) = v26;
  *(_QWORD *)(v2 + 168) = v25;
  *(_BYTE *)(v2 + 176) = v28;
  v29 = v58;
  if (v58 == 2)
    v29 = *(_BYTE *)(a1 + 177);
  *(_BYTE *)(v2 + 177) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA6E6C54(v48, v47, v46);
  sub_1BA6E8A48(v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v35);
  sub_1BA9F0544((uint64_t)&v49);
  v30 = HIBYTE(v58);
  if (HIBYTE(v58) == 2)
    v30 = *(_BYTE *)(a1 + 178);
  *(_BYTE *)(v2 + 178) = v30;
  return v2;
}

_QWORD *sub_1BA9F0A00(double *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  char *v16;
  void (*v17)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v41;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2A9CF0, (uint64_t (*)(uint64_t))sub_1BA89EA04, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87D7A0;
  sub_1BA4B07F0(0, &qword_1EF2AC0A0, (uint64_t (*)(uint64_t))sub_1BA8C88C8, v3);
  sub_1BA8C88C8(0);
  v5 = *(_QWORD *)(v4 - 8);
  v46 = *(_QWORD *)(v5 + 72);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BB87CE70;
  v8 = (_QWORD *)(v7 + v6);
  if (a2)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    v48 = sub_1BA9EF2D0();
    v49 = 0u;
    v50 = 0u;
    v51 = 0;
    v52 = xmmword_1BB88E420;
    v11 = swift_allocObject();
    sub_1BA9F1094((uint64_t)&v48, v11 + 16);
    v12 = sub_1BA9F10D0;
  }
  else
  {
    v11 = 0;
    v9 = 0;
    v10 = 0xE000000000000000;
    v12 = sub_1BB739F50;
  }
  v13 = type metadata accessor for FormatInspectionItem(0);
  v14 = (uint64_t (**)())((char *)v8 + *(int *)(v13 + 24));
  *v14 = v12;
  v14[1] = (uint64_t (*)())v11;
  v15 = type metadata accessor for FormatInspectionItem.Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t (**)(), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  *(_QWORD *)(v7 + v6) = v9;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = v10;
  v16 = (char *)v8 + *(int *)(v13 + 28);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = -1;
  v17 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v17(v8, 0, 1, v13);
  sub_1BAF89090(0x6C4320656C797453, 0xEB00000000737361, 0, 0, v7, v56);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(inited + 56) = &type metadata for FormatInspectionGroup;
  *(_QWORD *)(inited + 64) = &off_1E72D2F60;
  v18 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(v18 + 48) = v57;
  v19 = v56[1];
  *(_OWORD *)(v18 + 16) = v56[0];
  *(_OWORD *)(v18 + 32) = v19;
  v20 = v46;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1BB87D7A0;
  v22 = v21 + v6;
  sub_1BAAF7494(1701869908, 0xE400000000000000, 0x70756F7247, 0xE500000000000000, (_QWORD *)(v21 + v6));
  v17((_QWORD *)(v21 + v6), 0, 1, v13);
  if (a2)
  {
    v23 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    sub_1BAAF3E48(0x6168706C41, 0xE500000000000000, v23, (_QWORD *)(v22 + v46));
    v20 = v46;
    v17((_QWORD *)(v22 + v46), 0, 1, v13);
    v24 = *(_BYTE *)(a2 + 177);
  }
  else
  {
    sub_1BAAF3E48(0x6168706C41, 0xE500000000000000, 0, (_QWORD *)(v22 + v46));
    v17((_QWORD *)(v22 + v46), 0, 1, v13);
    v24 = 2;
  }
  sub_1BAAF6B38(0x426F547370696C43, 0xED000073646E756FLL, v24, (_QWORD *)(v22 + 2 * v20));
  v17((_QWORD *)(v22 + 2 * v20), 0, 1, v13);
  if (a2)
    v25 = *(_BYTE *)(a2 + 178);
  else
    v25 = 2;
  sub_1BAAF6B38(0xD00000000000001BLL, 0x80000001BB966D20, v25, (_QWORD *)(v22 + 3 * v20));
  v17((_QWORD *)(v22 + 3 * v20), 0, 1, v13);
  sub_1BAF89090(2003134806, 0xE400000000000000, 0, 0, v21, v58);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(inited + 96) = &type metadata for FormatInspectionGroup;
  *(_QWORD *)(inited + 104) = &off_1E72D2F60;
  v26 = swift_allocObject();
  *(_QWORD *)(inited + 72) = v26;
  *(_QWORD *)(v26 + 48) = v59;
  v27 = v58[1];
  *(_OWORD *)(v26 + 16) = v58[0];
  *(_OWORD *)(v26 + 32) = v27;
  if (a2)
  {
    v28 = *(_QWORD *)(a2 + 72);
    v29 = *(_QWORD *)(a2 + 80);
    v30 = *(_BYTE *)(a2 + 88);
    sub_1BA6E6C54(v28, v29, v30);
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = -2;
  }
  v48 = v28;
  *(_QWORD *)&v49 = v29;
  BYTE8(v49) = v30;
  v31 = sub_1BB4D88A0(a1, (uint64_t)&v48);
  sub_1BA6E6CC4(v28, v29, v30);
  *(_QWORD *)(inited + 136) = &type metadata for FormatInspection;
  *(_QWORD *)(inited + 144) = &off_1E7335C38;
  *(_QWORD *)(inited + 112) = v31;
  if (a2)
  {
    v43 = *(_BYTE *)(a2 + 176);
    v44 = *(_QWORD *)(a2 + 168);
    v47 = *(_QWORD *)(a2 + 160);
    v32 = *(_QWORD *)(a2 + 96);
    v33 = *(_QWORD *)(a2 + 104);
    v34 = *(_QWORD *)(a2 + 112);
    v35 = *(_QWORD *)(a2 + 120);
    v36 = *(_QWORD *)(a2 + 128);
    v37 = *(_QWORD *)(a2 + 136);
    v38 = *(_QWORD *)(a2 + 144);
    a2 = *(_QWORD *)(a2 + 152);
    sub_1BA6E8A48(v32, v33, v34, v35, v36, v37, v38, a2, v47, v44, v43);
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v47 = 0;
    v44 = 0;
    v43 = -2;
  }
  v48 = v32;
  *(_QWORD *)&v49 = v33;
  *((_QWORD *)&v49 + 1) = v34;
  *(_QWORD *)&v50 = v35;
  *((_QWORD *)&v50 + 1) = v36;
  v51 = v37;
  *(_QWORD *)&v52 = v38;
  *((_QWORD *)&v52 + 1) = a2;
  v53 = v47;
  v54 = v44;
  v55 = v43;
  v41 = sub_1BB05E83C((uint64_t)&v48);
  sub_1BA6E8A78(v32, v33, v34, v35, v36, v37, v38, a2, v47, v44, v43);
  *(_QWORD *)(inited + 176) = &type metadata for FormatInspection;
  *(_QWORD *)(inited + 184) = &off_1E7335C38;
  *(_QWORD *)(inited + 152) = v41;
  v39 = sub_1BB6DF010(inited);
  swift_setDeallocating();
  sub_1BA89EA04(0);
  swift_arrayDestroy();
  return v39;
}

uint64_t sub_1BA9F1030()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA9F1064()
{
  uint64_t v0;

  sub_1BA76B698(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t sub_1BA9F1094(uint64_t a1, uint64_t a2)
{
  __swift_memcpy64_8(a2, a1);
  return a2;
}

uint64_t sub_1BA9F10D0()
{
  return sub_1BA9EF658();
}

uint64_t sub_1BA9F10E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  sub_1BA6E8A78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  sub_1BA6E8A78(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t FormatContentSubgroupFilterLink.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static FormatContentSubgroupFilterLink.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

uint64_t sub_1BA9F1200()
{
  return 0x696669746E656469;
}

uint64_t sub_1BA9F121C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BA9F12BC()
{
  sub_1BA9F1400();
  return sub_1BB874710();
}

uint64_t sub_1BA9F12E4()
{
  sub_1BA9F1400();
  return sub_1BB87471C();
}

uint64_t FormatContentSubgroupFilterLink.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BA9F1568(0, &qword_1ED3AB728, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9F1400();
  sub_1BB8746C8();
  sub_1BB87417C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1BA9F1400()
{
  unint64_t result;

  result = qword_1ED3A9110;
  if (!qword_1ED3A9110)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88E8A4, &type metadata for FormatContentSubgroupFilterLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9110);
  }
  return result;
}

uint64_t FormatContentSubgroupFilterLink.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_1BA9F1568(0, &qword_1ED3AB4D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9F1400();
  sub_1BB87468C();
  if (!v2)
  {
    v10 = sub_1BB874098();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BA9F1568(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA9F1400();
    v7 = a3(a1, &type metadata for FormatContentSubgroupFilterLink.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA9F15C4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA9F15F8();
  a1[2] = sub_1BA9F163C();
  result = sub_1BA9F1680();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA9F15F8()
{
  unint64_t result;

  result = qword_1ED3A9130;
  if (!qword_1ED3A9130)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilterLink, &type metadata for FormatContentSubgroupFilterLink);
    atomic_store(result, (unint64_t *)&qword_1ED3A9130);
  }
  return result;
}

unint64_t sub_1BA9F163C()
{
  unint64_t result;

  result = qword_1ED3A9128;
  if (!qword_1ED3A9128)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilterLink, &type metadata for FormatContentSubgroupFilterLink);
    atomic_store(result, (unint64_t *)&qword_1ED3A9128);
  }
  return result;
}

unint64_t sub_1BA9F1680()
{
  unint64_t result;

  result = qword_1EF2ACC28;
  if (!qword_1EF2ACC28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilterLink, &type metadata for FormatContentSubgroupFilterLink);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC28);
  }
  return result;
}

uint64_t sub_1BA9F16C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatContentSubgroupFilterLink.init(from:)(a1, a2);
}

uint64_t sub_1BA9F16D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BA9F1568(0, &qword_1ED3AB728, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9F1400();
  sub_1BB8746C8();
  sub_1BB87417C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for FormatContentSubgroupFilterLink()
{
  return &type metadata for FormatContentSubgroupFilterLink;
}

uint64_t storeEnumTagSinglePayload for FormatContentSubgroupFilterLink.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA9F181C + 4 * asc_1BB88E700[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA9F183C + 4 * byte_1BB88E705[v4]))();
}

_BYTE *sub_1BA9F181C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA9F183C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA9F1844(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA9F184C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA9F1854(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA9F185C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSubgroupFilterLink.CodingKeys()
{
  return &type metadata for FormatContentSubgroupFilterLink.CodingKeys;
}

unint64_t sub_1BA9F187C()
{
  unint64_t result;

  result = qword_1EF2ACC30;
  if (!qword_1EF2ACC30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88E87C, &type metadata for FormatContentSubgroupFilterLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC30);
  }
  return result;
}

unint64_t sub_1BA9F18C4()
{
  unint64_t result;

  result = qword_1ED3A9120;
  if (!qword_1ED3A9120)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88E7EC, &type metadata for FormatContentSubgroupFilterLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9120);
  }
  return result;
}

unint64_t sub_1BA9F190C()
{
  unint64_t result;

  result = qword_1ED3A9118;
  if (!qword_1ED3A9118)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88E814, &type metadata for FormatContentSubgroupFilterLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9118);
  }
  return result;
}

uint64_t sub_1BA9F1950(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  sub_1BA9F2B08();
  swift_bridgeObjectRetain();
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_1BA502AD0((uint64_t)v14, qword_1EF2ACC98, (void (*)(uint64_t))sub_1BA9F2B08);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_1BB873D80();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_1BA9F2D14(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_1BB872B08();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_1BA9F2D78(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v14[0]);
    sub_1BA9F23AC();
    __asm { BR              X12 }
  }
  sub_1BA4CECCC(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_1BB86C1A8();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

void static FormatFloat.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X12 }
}

BOOL sub_1BA9F2024@<W0>(unint64_t a1@<X8>)
{
  uint64_t v1;

  return !(a1 >> 61) && *(double *)(v1 + 16) == *(double *)(a1 + 16);
}

uint64_t FormatFloat.optionIdentifiers.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  if ((*v0 & 0x8000000000000000) == 0)
    return 0;
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BA6EA07C();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FormatFloat.init(value:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result;
  return result;
}

uint64_t sub_1BA9F21F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  if ((*v0 & 0x8000000000000000) == 0)
    return 0;
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BA6EA07C();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1BA9F2258@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

void sub_1BA9F229C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  FormatFloat.value(contextLayoutOptions:)();
  if (!v1)
    *a1 = v3;
}

void sub_1BA9F22C4()
{
  __asm { BR              X11 }
}

uint64_t sub_1BA9F2300()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))sub_1BA9F22C4)(v0);
}

void sub_1BA9F2384()
{
  sub_1BA9F22C4();
}

void sub_1BA9F2398()
{
  FormatFloat.bind(binder:context:)();
}

void sub_1BA9F23AC()
{
  __asm { BR              X11 }
}

_QWORD *sub_1BA9F240C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_1BA9F269C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1BA9F2B5C(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1BA9F2C1C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1BA9F2C94((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_1BA9F2710(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_1BA9F2774(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_1BB86C01C();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_1BB86C040();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_1BB86C034();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1BA9F2820(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

uint64_t sub_1BA9F2874@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_1BB873CC0();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BA9F28FC@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

_BYTE *sub_1BA9F2938@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1BA9F29A8(a1, a2);
}

uint64_t sub_1BA9F294C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA9F2970()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA9F2998()
{
  return swift_deallocObject();
}

_BYTE *sub_1BA9F29A8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_1BA9F2A14(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA9F2A38();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA9F2A38()
{
  unint64_t result;

  result = qword_1EF2ACC38;
  if (!qword_1EF2ACC38)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFloat, &type metadata for FormatFloat);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC38);
  }
  return result;
}

unint64_t sub_1BA9F2A7C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA61BC14();
  a1[2] = sub_1BA62B2B4();
  result = sub_1BA837114();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA9F2AB4()
{
  unint64_t result;

  result = qword_1EF2ACC40;
  if (!qword_1EF2ACC40)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CGFloat, MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EF2ACC40);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatFloat()
{
  return &type metadata for FormatFloat;
}

unint64_t sub_1BA9F2B08()
{
  unint64_t result;

  result = qword_1ED39EB10;
  if (!qword_1ED39EB10)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED39EB10);
  }
  return result;
}

uint64_t sub_1BA9F2B5C(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1BA9F2C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1BB86C058();
  swift_allocObject();
  result = sub_1BB86C010();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1BB86C6AC();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1BA9F2C94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1BB86C058();
  swift_allocObject();
  result = sub_1BB86C010();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_1BA9F2D14(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1BA9F2B5C(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1BA9F2C1C((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_1BA9F2C94((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1BA9F2D78(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_1BB86C058();
      swift_allocObject();
      sub_1BB86C028();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1BB86C6AC();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_1BA9F2E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1BA9F2710((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BA9F2E70, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1BA9F2E70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BA9F2874(a1, a2);
}

uint64_t dispatch thunk of FormatCollectionType.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FormatCollectionType.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

_QWORD *sub_1BA9F2E9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_retain();
    if (EnumCaseMultiPayload == 1)
    {
      if (v8 != 1)
        swift_bridgeObjectRetain();
      a1[3] = v8;
      v9 = *(int *)(type metadata accessor for FormatOption() + 28);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for FormatVersionRequirement(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
LABEL_11:
        sub_1BA8E5458();
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_22:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      type metadata accessor for FormatVersionRequirement.Value(0);
      v17 = swift_getEnumCaseMultiPayload();
      if (v17 != 2)
      {
        if (v17 == 1)
          goto LABEL_17;
        goto LABEL_20;
      }
    }
    else
    {
      if (v8 != 1)
        swift_bridgeObjectRetain();
      a1[3] = v8;
      v15 = *(int *)(type metadata accessor for FormatOption() + 28);
      v10 = (char *)a1 + v15;
      v11 = (char *)a2 + v15;
      v12 = type metadata accessor for FormatVersionRequirement(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        goto LABEL_11;
      type metadata accessor for FormatVersionRequirement.Value(0);
      v18 = swift_getEnumCaseMultiPayload();
      if (v18 != 2)
      {
        if (v18 == 1)
        {
LABEL_17:
          v19 = sub_1BB86EB84();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, v11, v19);
          sub_1BA8D4E7C();
          v21 = *(int *)(v20 + 48);
LABEL_19:
          v26 = &v10[v21];
          v27 = &v11[v21];
          v28 = *((_QWORD *)v27 + 1);
          *(_QWORD *)v26 = *(_QWORD *)v27;
          *((_QWORD *)v26 + 1) = v28;
          swift_bridgeObjectRetain();
LABEL_21:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
          goto LABEL_22;
        }
LABEL_20:
        v29 = sub_1BB86EB84();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v10, v11, v29);
        goto LABEL_21;
      }
    }
    v22 = sub_1BB86EB84();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v10, v11, v22);
    sub_1BA6F3F88();
    v25 = v24;
    v23(&v10[*(int *)(v24 + 48)], &v11[*(int *)(v24 + 48)], v22);
    v21 = *(int *)(v25 + 64);
    goto LABEL_19;
  }
  v14 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_1BA9F3268(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  swift_release();
  v3 = *(_QWORD *)(a1 + 24);
  if (EnumCaseMultiPayload == 1)
  {
    if (v3 != 1)
      swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(type metadata accessor for FormatOption() + 28);
    v5 = type metadata accessor for FormatVersionRequirement(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
    if (!(_DWORD)result)
    {
      type metadata accessor for FormatVersionRequirement.Value(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result != 2)
      {
        if ((_DWORD)result != 1)
          goto LABEL_7;
LABEL_15:
        v9 = sub_1BB86EB84();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
        sub_1BA8D4E7C();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
  }
  else
  {
    if (v3 != 1)
      swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(type metadata accessor for FormatOption() + 28);
    v8 = type metadata accessor for FormatVersionRequirement(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8);
    if (!(_DWORD)result)
    {
      type metadata accessor for FormatVersionRequirement.Value(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result != 2)
      {
        if ((_DWORD)result != 1)
        {
LABEL_7:
          if (!(_DWORD)result)
          {
            v7 = sub_1BB86EB84();
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
          }
          return result;
        }
        goto LABEL_15;
      }
LABEL_16:
      v10 = sub_1BB86EB84();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v4, v10);
      sub_1BA6F3F88();
      v11(v4 + *(int *)(v12 + 48), v10);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *sub_1BA9F342C(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  if (EnumCaseMultiPayload != 1)
  {
    if (v6 != 1)
      swift_bridgeObjectRetain();
    a1[3] = v6;
    v13 = *(int *)(type metadata accessor for FormatOption() + 28);
    v8 = (char *)a1 + v13;
    v9 = (char *)a2 + v13;
    v10 = type metadata accessor for FormatVersionRequirement(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      goto LABEL_5;
    type metadata accessor for FormatVersionRequirement.Value(0);
    v15 = swift_getEnumCaseMultiPayload();
    if (v15 != 2)
    {
      if (v15 == 1)
      {
LABEL_15:
        v16 = sub_1BB86EB84();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v9, v16);
        sub_1BA8D4E7C();
        v18 = *(int *)(v17 + 48);
LABEL_17:
        v23 = &v8[v18];
        v24 = &v9[v18];
        v25 = *((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = *(_QWORD *)v24;
        *((_QWORD *)v23 + 1) = v25;
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        goto LABEL_20;
      }
LABEL_18:
      v26 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v8, v9, v26);
      goto LABEL_19;
    }
LABEL_16:
    v19 = sub_1BB86EB84();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v20(v8, v9, v19);
    sub_1BA6F3F88();
    v22 = v21;
    v20(&v8[*(int *)(v21 + 48)], &v9[*(int *)(v21 + 48)], v19);
    v18 = *(int *)(v22 + 64);
    goto LABEL_17;
  }
  if (v6 != 1)
    swift_bridgeObjectRetain();
  a1[3] = v6;
  v7 = *(int *)(type metadata accessor for FormatOption() + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for FormatVersionRequirement(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for FormatVersionRequirement.Value(0);
    v14 = swift_getEnumCaseMultiPayload();
    if (v14 != 2)
    {
      if (v14 == 1)
        goto LABEL_15;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_5:
  sub_1BA8E5458();
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_20:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_1BA9F37CC(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_1BA9F3B98((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    v5 = a2[3];
    swift_bridgeObjectRetain();
    swift_retain();
    if (EnumCaseMultiPayload == 1)
    {
      if (v5 != 1)
        swift_bridgeObjectRetain();
      a1[3] = v5;
      v6 = *(int *)(type metadata accessor for FormatOption() + 28);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for FormatVersionRequirement(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
LABEL_6:
        sub_1BA8E5458();
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_23:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      type metadata accessor for FormatVersionRequirement.Value(0);
      v13 = swift_getEnumCaseMultiPayload();
      if (v13 != 2)
      {
        if (v13 == 1)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else
    {
      if (v5 != 1)
        swift_bridgeObjectRetain();
      a1[3] = v5;
      v12 = *(int *)(type metadata accessor for FormatOption() + 28);
      v7 = (char *)a1 + v12;
      v8 = (char *)a2 + v12;
      v9 = type metadata accessor for FormatVersionRequirement(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
        goto LABEL_6;
      type metadata accessor for FormatVersionRequirement.Value(0);
      v14 = swift_getEnumCaseMultiPayload();
      if (v14 != 2)
      {
        if (v14 == 1)
        {
LABEL_16:
          v15 = sub_1BB86EB84();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v7, v8, v15);
          sub_1BA8D4E7C();
          v17 = *(int *)(v16 + 48);
LABEL_20:
          v22 = &v7[v17];
          v23 = &v8[v17];
          *(_QWORD *)v22 = *(_QWORD *)v23;
          *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
          swift_bridgeObjectRetain();
LABEL_22:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
          goto LABEL_23;
        }
LABEL_21:
        v24 = sub_1BB86EB84();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v7, v8, v24);
        goto LABEL_22;
      }
    }
    v18 = sub_1BB86EB84();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v7, v8, v18);
    sub_1BA6F3F88();
    v21 = v20;
    v19(&v7[*(int *)(v20 + 48)], &v8[*(int *)(v20 + 48)], v18);
    v17 = *(int *)(v21 + 64);
    goto LABEL_20;
  }
  return a1;
}

uint64_t sub_1BA9F3B98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatScopedOption();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FormatScopedOption()
{
  uint64_t result;

  result = qword_1EF2ACD10;
  if (!qword_1EF2ACD10)
    return swift_getSingletonMetadata();
  return result;
}

_OWORD *sub_1BA9F3C10(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(type metadata accessor for FormatOption() + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FormatVersionRequirement(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (EnumCaseMultiPayload != 1)
  {
    if (v11)
      goto LABEL_3;
    type metadata accessor for FormatVersionRequirement.Value(0);
    v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      v24 = sub_1BB86EB84();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      v30(v7, v8, v24);
      sub_1BA6F3F88();
      v26 = v25;
      v30(&v7[*(int *)(v25 + 48)], &v8[*(int *)(v25 + 48)], v24);
      v20 = *(int *)(v26 + 64);
    }
    else
    {
      if (v17 != 1)
        goto LABEL_16;
      v18 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v7, v8, v18);
      sub_1BA8D4E7C();
      v20 = *(int *)(v19 + 48);
    }
    *(_OWORD *)&v7[v20] = *(_OWORD *)&v8[v20];
    goto LABEL_17;
  }
  if (!v11)
  {
    type metadata accessor for FormatVersionRequirement.Value(0);
    v13 = swift_getEnumCaseMultiPayload();
    if (v13 == 2)
    {
      v21 = sub_1BB86EB84();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v29(v7, v8, v21);
      sub_1BA6F3F88();
      v23 = v22;
      v29(&v7[*(int *)(v22 + 48)], &v8[*(int *)(v22 + 48)], v21);
      v16 = *(int *)(v23 + 64);
      goto LABEL_13;
    }
    if (v13 == 1)
    {
      v14 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
      sub_1BA8D4E7C();
      v16 = *(int *)(v15 + 48);
LABEL_13:
      *(_OWORD *)&v7[v16] = *(_OWORD *)&v8[v16];
LABEL_17:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_18;
    }
LABEL_16:
    v27 = sub_1BB86EB84();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v7, v8, v27);
    goto LABEL_17;
  }
LABEL_3:
  sub_1BA8E5458();
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_18:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *sub_1BA9F3F20(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1BA9F3B98((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(type metadata accessor for FormatOption() + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for FormatVersionRequirement(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (EnumCaseMultiPayload == 1)
    {
      if (v11)
      {
LABEL_4:
        sub_1BA8E5458();
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      type metadata accessor for FormatVersionRequirement.Value(0);
      v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 2)
      {
        v21 = sub_1BB86EB84();
        v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
        v29(v7, v8, v21);
        sub_1BA6F3F88();
        v23 = v22;
        v29(&v7[*(int *)(v22 + 48)], &v8[*(int *)(v22 + 48)], v21);
        v16 = *(int *)(v23 + 64);
        goto LABEL_14;
      }
      if (v13 == 1)
      {
        v14 = sub_1BB86EB84();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
        sub_1BA8D4E7C();
        v16 = *(int *)(v15 + 48);
LABEL_14:
        *(_OWORD *)&v7[v16] = *(_OWORD *)&v8[v16];
LABEL_19:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
        goto LABEL_20;
      }
LABEL_18:
      v27 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v7, v8, v27);
      goto LABEL_19;
    }
    if (v11)
      goto LABEL_4;
    type metadata accessor for FormatVersionRequirement.Value(0);
    v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      v24 = sub_1BB86EB84();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      v30(v7, v8, v24);
      sub_1BA6F3F88();
      v26 = v25;
      v30(&v7[*(int *)(v25 + 48)], &v8[*(int *)(v25 + 48)], v24);
      v20 = *(int *)(v26 + 64);
    }
    else
    {
      if (v17 != 1)
        goto LABEL_18;
      v18 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v7, v8, v18);
      sub_1BA8D4E7C();
      v20 = *(int *)(v19 + 48);
    }
    *(_OWORD *)&v7[v20] = *(_OWORD *)&v8[v20];
    goto LABEL_19;
  }
  return a1;
}

uint64_t sub_1BA9F4240()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatOption();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t FormatCompilerSlotDefinition.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatCompilerSlotDefinition.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatCompilerSlotDefinition.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatCompilerSlotDefinition.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FormatCompilerSlotDefinition.description.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerSlotDefinition.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerSlotDefinition.properties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*FormatCompilerSlotDefinition.properties.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerSlotDefinition.transforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatCompilerSlotDefinition.transforms.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*FormatCompilerSlotDefinition.transforms.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerSlotDefinition.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t FormatCompilerSlotDefinition.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*FormatCompilerSlotDefinition.count.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatCompilerSlotDefinition.items.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatCompilerSlotDefinition(0);
  return sub_1BA57B488(v1 + *(int *)(v3 + 40), a1, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
}

uint64_t FormatCompilerSlotDefinition.editorProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatCompilerSlotDefinition(0);
  return sub_1BA57B488(v1 + *(int *)(v3 + 44), a1, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
}

uint64_t sub_1BA9F449C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = a1[1];
  v11 = *a1;
  v12 = a2 + *(int *)(type metadata accessor for FormatCompilingSlotDefinition(0) + 20);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  v14 = sub_1BA9F6E04(v13, a3);
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    *a4 = v5;
  }
  else
  {
    swift_release();
    if (a1[3])
    {
      v25 = v14;
      v16 = *(_QWORD *)(v12 + 8);
      if (v16)
      {
        v24 = *(_QWORD *)(v12 + 16);
        swift_retain();
        v17 = swift_bridgeObjectRetain();
        v23 = sub_1BA9F6E04(v17, a3);
        swift_bridgeObjectRelease();
        swift_release();
        swift_retain();
        sub_1BA8EF4D4(v16);
        v18 = swift_bridgeObjectRetain();
        v19 = sub_1BA9F6F74(v18, v16, v24, a3);
        swift_release();
        sub_1BA5DCC4C(v16);
        swift_bridgeObjectRelease();
        v14 = v25;
        v20 = v23;
      }
      else
      {
        v20 = 0;
        v19 = 0;
        v14 = v25;
      }
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = v12 + *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
    v22 = type metadata accessor for FormatSlotDefinitionItemSet();
    result = sub_1BA57B488(v21, (uint64_t)a5 + *(int *)(v22 + 36), (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    *a5 = v11;
    a5[1] = v10;
    a5[2] = v14;
    a5[3] = v20;
    a5[4] = v19;
  }
  return result;
}

BOOL _s8NewsFeed28FormatCompilerSlotDefinitionV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BOOL8 result;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  uint64_t (*v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  void (*v66)(uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t);
  char *v69;
  void (*v70)(uint64_t);
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v4 = sub_1BB86E710();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
  v82 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v77 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA896B1C(0, (unint64_t *)&qword_1ED3C47F0, (unint64_t *)&qword_1ED3C47E8, v5);
  v79 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v73 - v8;
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, v5);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v80 = (uint64_t)&v73 - v14;
  MEMORY[0x1E0C80A78](v15);
  v81 = (uint64_t)&v73 - v16;
  v83 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
  v17 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v78 = (uint64_t *)((char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA896B1C(0, &qword_1EF2ACD58, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19);
  v84 = (uint64_t)&v73 - v21;
  sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
  MEMORY[0x1E0C80A78](v22);
  v24 = (uint64_t *)((char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v73 - v26;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v73 - v29;
  if (*a1 == *a2 && a1[1] == a2[1] || (v31 = sub_1BB874398(), result = 0, (v31 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (v33 = sub_1BB874398(), result = 0, (v33 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5] || (v34 = sub_1BB874398(), result = 0, (v34 & 1) != 0))
      {
        v74 = v12;
        v75 = v9;
        v76 = v4;
        v35 = a1[6];
        v36 = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = sub_1BA882848(v35, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
          return 0;
        v38 = a1[7];
        v39 = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40 = sub_1BA88285C(v38, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0 || a1[8] != a2[8])
          return 0;
        v41 = type metadata accessor for FormatCompilerSlotDefinition(0);
        sub_1BA57B488((uint64_t)a1 + *(int *)(v41 + 40), (uint64_t)v30, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
        v73 = v41;
        sub_1BA57B488((uint64_t)a2 + *(int *)(v41 + 40), (uint64_t)v27, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
        v42 = v84;
        v43 = v84 + *(int *)(v20 + 48);
        sub_1BA57B488((uint64_t)v30, v84, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
        sub_1BA57B488((uint64_t)v27, v43, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
        v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
        v45 = v83;
        if (v44(v42, 1, v83) == 1)
        {
          sub_1BA502AD0((uint64_t)v27, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
          sub_1BA502AD0((uint64_t)v30, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
          v46 = v44(v43, 1, v45);
          v47 = (uint64_t)v75;
          v48 = v76;
          if (v46 == 1)
          {
            sub_1BA502AD0(v84, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
LABEL_20:
            v57 = v73;
            v58 = (uint64_t)a1 + *(int *)(v73 + 44);
            v59 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
            v60 = v81;
            sub_1BA57B488(v58, v81, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
            v61 = (uint64_t)a2 + *(int *)(v57 + 44);
            v62 = v80;
            sub_1BA57B488(v61, v80, (unint64_t *)&qword_1ED3C47E8, v59);
            v63 = v47 + *(int *)(v79 + 48);
            sub_1BA57B488(v60, v47, (unint64_t *)&qword_1ED3C47E8, v59);
            sub_1BA57B488(v62, v63, (unint64_t *)&qword_1ED3C47E8, v59);
            v64 = v82;
            v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
            if (v65(v47, 1, v48) == 1)
            {
              v66 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
              sub_1BA502AD0(v62, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
              sub_1BA502AD0(v60, (unint64_t *)&qword_1ED3C47E8, v66);
              if (v65(v63, 1, v48) == 1)
              {
                sub_1BA502AD0(v47, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
                return 1;
              }
            }
            else
            {
              v67 = (uint64_t)v74;
              sub_1BA57B488(v47, (uint64_t)v74, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
              if (v65(v63, 1, v48) != 1)
              {
                v69 = v77;
                (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v77, v63, v48);
                v70 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
                sub_1BA4A2870(&qword_1EF2A96D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], MEMORY[0x1E0DB48C8]);
                v71 = sub_1BB872958();
                v72 = *(void (**)(char *, uint64_t))(v64 + 8);
                v72(v69, v48);
                sub_1BA502AD0(v62, (unint64_t *)&qword_1ED3C47E8, v70);
                sub_1BA502AD0(v60, (unint64_t *)&qword_1ED3C47E8, v70);
                v72((char *)v67, v48);
                sub_1BA502AD0(v47, (unint64_t *)&qword_1ED3C47E8, v70);
                return (v71 & 1) != 0;
              }
              v68 = (void (*)(uint64_t))MEMORY[0x1E0DB48B0];
              sub_1BA502AD0(v62, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
              sub_1BA502AD0(v60, (unint64_t *)&qword_1ED3C47E8, v68);
              (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v48);
            }
            v51 = (unint64_t *)&qword_1ED3C47F0;
            v52 = (unint64_t *)&qword_1ED3C47E8;
            v53 = MEMORY[0x1E0DB48B0];
            v54 = v47;
            goto LABEL_26;
          }
        }
        else
        {
          sub_1BA57B488(v42, (uint64_t)v24, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
          v49 = v44(v43, 1, v45);
          v47 = (uint64_t)v75;
          v50 = v76;
          if (v49 != 1)
          {
            v55 = v43;
            v56 = v78;
            sub_1BA5193C4(v55, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
            LODWORD(v83) = _s8NewsFeed35FormatCompilerSlotDefinitionItemSetV2eeoiySbAC_ACtFZ_0(v24, v56);
            sub_1BA9F57CC((uint64_t)v56);
            sub_1BA502AD0((uint64_t)v27, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
            sub_1BA502AD0((uint64_t)v30, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
            sub_1BA9F57CC((uint64_t)v24);
            sub_1BA502AD0(v42, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
            v48 = v50;
            if ((v83 & 1) == 0)
              return 0;
            goto LABEL_20;
          }
          sub_1BA502AD0((uint64_t)v27, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
          sub_1BA502AD0((uint64_t)v30, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
          sub_1BA9F57CC((uint64_t)v24);
        }
        v51 = &qword_1EF2ACD58;
        v52 = &qword_1ED3CE608;
        v53 = type metadata accessor for FormatCompilerSlotDefinitionItemSet;
        v54 = v84;
LABEL_26:
        sub_1BA896B7C(v54, v51, v52, (void (*)(uint64_t))v53);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BA9F4EA4(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2ACD48, type metadata accessor for FormatCompilerSlotDefinition, (uint64_t)&protocol conformance descriptor for FormatCompilerSlotDefinition);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9F4EE0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870((unint64_t *)&unk_1ED3B8240, type metadata accessor for FormatCompilerSlotDefinition, (uint64_t)&protocol conformance descriptor for FormatCompilerSlotDefinition);
  a1[2] = sub_1BA4A2870(&qword_1ED3B01E8, type metadata accessor for FormatCompilerSlotDefinition, (uint64_t)&protocol conformance descriptor for FormatCompilerSlotDefinition);
  result = sub_1BA4A2870(&qword_1EF2ACD50, type metadata accessor for FormatCompilerSlotDefinition, (uint64_t)&protocol conformance descriptor for FormatCompilerSlotDefinition);
  a1[3] = result;
  return result;
}

uint64_t sub_1BA9F4F58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9F4F64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_1BA9F4FA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9F4FB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_1BA9F4FF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9F4FFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 56) = v3;
  return result;
}

uint64_t sub_1BA9F503C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 64);
  return result;
}

_QWORD *sub_1BA9F5048(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 64) = *result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatCompilerSlotDefinition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v33)(_QWORD *, uint64_t, uint64_t);
  _QWORD *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[6];
    v10 = a2[8];
    a1[7] = a2[7];
    a1[8] = v10;
    v11 = *(int *)(a3 + 40);
    __dst = (uint64_t *)((char *)a1 + v11);
    v12 = (uint64_t *)((char *)a2 + v11);
    a1[6] = v9;
    v13 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
    v14 = *(_QWORD *)(v13 - 8);
    v33 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v12, 1, v13))
    {
      sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *__dst = *v12;
      v17 = v12[1];
      swift_bridgeObjectRetain();
      if (v17)
      {
        v18 = v12[2];
        __dst[1] = v17;
        __dst[2] = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v12 + 1);
      }
      v19 = v14;
      v20 = *(int *)(v13 + 24);
      v21 = (char *)__dst + v20;
      v22 = (char *)v12 + v20;
      v23 = sub_1BB86E710();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v13);
    }
    v26 = *(int *)(a3 + 44);
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = sub_1BB86E710();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  return v4;
}

_QWORD *assignWithCopy for FormatCompilerSlotDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  v6 = *(int *)(a3 + 40);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1BA9F57CC((uint64_t)v7);
      goto LABEL_7;
    }
    *v7 = *v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v19 = v8[1];
    if (v7[1])
    {
      if (v19)
      {
        v7[1] = v19;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_29:
        v36 = *(int *)(v9 + 24);
        v37 = (char *)v7 + v36;
        v38 = (char *)v8 + v36;
        v39 = sub_1BB86E710();
        v40 = *(_QWORD *)(v39 - 8);
        v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
        v42 = v41(v37, 1, v39);
        v43 = v41(v38, 1, v39);
        if (v42)
        {
          if (!v43)
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
            goto LABEL_17;
          }
        }
        else
        {
          if (!v43)
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
            goto LABEL_17;
          }
          (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
        }
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        v16 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
        v17 = v37;
        v18 = v38;
LABEL_8:
        memcpy(v17, v18, v16);
        goto LABEL_17;
      }
      sub_1BA9F5798((uint64_t)(v7 + 1));
    }
    else if (v19)
    {
      v7[1] = v19;
      v7[2] = v8[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
    goto LABEL_29;
  }
  if (v13)
  {
LABEL_7:
    sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = (char *)v7;
    v18 = (char *)v8;
    goto LABEL_8;
  }
  *v7 = *v8;
  v14 = v8[1];
  swift_bridgeObjectRetain();
  if (v14)
  {
    v7[1] = v14;
    v7[2] = v8[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
  }
  v20 = *(int *)(v9 + 24);
  v21 = (char *)v7 + v20;
  v22 = (char *)v8 + v20;
  v23 = sub_1BB86E710();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  v26 = *(int *)(a3 + 44);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_1BB86E710();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_22;
  }
  if (v33)
  {
LABEL_22:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return a1;
}

uint64_t sub_1BA9F5798(uint64_t a1)
{
  destroy for FormatSizeEquation();
  return a1;
}

uint64_t sub_1BA9F57CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for FormatCompilerSlotDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 40);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
    v14 = *(int *)(v11 + 24);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = sub_1BB86E710();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = *(int *)(a3 + 44);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_1BB86E710();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithTake for FormatCompilerSlotDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  v9 = *(int *)(a3 + 40);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1BA9F57CC((uint64_t)v10);
      goto LABEL_7;
    }
    *v10 = *v11;
    swift_bridgeObjectRelease();
    v27 = v11[1];
    if (v10[1])
    {
      if (v27)
      {
        v10[1] = v27;
        swift_bridgeObjectRelease();
        v10[2] = v11[2];
        swift_bridgeObjectRelease();
LABEL_24:
        v38 = *(int *)(v12 + 24);
        v39 = (char *)v10 + v38;
        v40 = (char *)v11 + v38;
        v41 = sub_1BB86E710();
        v42 = *(_QWORD *)(v41 - 8);
        v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
        v44 = v43(v39, 1, v41);
        v45 = v43(v40, 1, v41);
        if (v44)
        {
          if (!v45)
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
            goto LABEL_14;
          }
        }
        else
        {
          if (!v45)
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v39, v40, v41);
            goto LABEL_14;
          }
          (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
        }
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        v24 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
        v25 = v39;
        v26 = v40;
LABEL_8:
        memcpy(v25, v26, v24);
        goto LABEL_14;
      }
      sub_1BA9F5798((uint64_t)(v10 + 1));
    }
    *(_OWORD *)(v10 + 1) = *(_OWORD *)(v11 + 1);
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_7:
    sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
    v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64);
    v25 = (char *)v10;
    v26 = (char *)v11;
    goto LABEL_8;
  }
  *v10 = *v11;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(v11 + 1);
  v17 = *(int *)(v12 + 24);
  v18 = (char *)v10 + v17;
  v19 = (char *)v11 + v17;
  v20 = sub_1BB86E710();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v28 = *(int *)(a3 + 44);
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = sub_1BB86E710();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v29, v30, v31);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_19;
  }
  if (v35)
  {
LABEL_19:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_1BA9F5DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1BA9F5EAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1BA4A3FB4(0, &qword_1ED3CE608, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSet);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t *sub_1BA9F5F68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    a1[8] = a2[8];
    v10 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
    __dst = (char *)v4 + v10;
    v11 = (char *)a2 + v10;
    v12 = sub_1BB86E710();
    v30 = *(_QWORD *)(v12 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v14 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v11, 1, v14))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      v16 = v30;
    }
    else
    {
      v16 = v30;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v11, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v14);
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    *(uint64_t *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    v21 = (_OWORD *)((char *)v4 + v18 + 8);
    v23 = (uint64_t *)((char *)a2 + v18 + 8);
    v22 = *v23;
    swift_bridgeObjectRetain();
    if (v22)
    {
      v24 = *((_QWORD *)v20 + 2);
      *((_QWORD *)v19 + 1) = v22;
      *((_QWORD *)v19 + 2) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *v21 = *(_OWORD *)v23;
    }
    v25 = *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
    v26 = &v19[v25];
    v27 = &v20[v25];
    if (v13(v27, 1, v14))
    {
      sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v26, v27, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v14);
    }
  }
  return v4;
}

uint64_t sub_1BA9F61BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
  v5 = sub_1BB86E710();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v9 = v8 + *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v9, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

_QWORD *sub_1BA9F62CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  a1[8] = a2[8];
  v9 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = sub_1BB86E710();
  v26 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v10, 1, v11))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v17 = (_OWORD *)((char *)a1 + v14 + 8);
  v19 = (_QWORD *)((char *)a2 + v14 + 8);
  v18 = *v19;
  swift_bridgeObjectRetain();
  if (v18)
  {
    v20 = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *v17 = *(_OWORD *)v19;
  }
  v21 = *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
  v22 = &v15[v21];
  v23 = &v16[v21];
  if (v12(&v16[v21], 1, v11))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v22, v23, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v11);
  }
  return a1;
}

_QWORD *sub_1BA9F64FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86E710();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v17 + 1);
  if (*((_QWORD *)v16 + 1))
  {
    if (v18)
    {
      *((_QWORD *)v16 + 1) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_1BA9F5798((uint64_t)(v16 + 8));
  }
  else if (v18)
  {
    *((_QWORD *)v16 + 1) = v18;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 8);
LABEL_14:
  v19 = *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
  v20 = &v16[v19];
  v21 = &v17[v19];
  v22 = v11(&v16[v19], 1, v9);
  v23 = v11(v21, 1, v9);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v20, v21, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
    goto LABEL_19;
  }
  if (v23)
  {
LABEL_19:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  return a1;
}

uint64_t sub_1BA9F6828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1BB86E710();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)(a2 + v15);
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + v15 + 8);
  v18 = *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
  v19 = (void *)(v16 + v18);
  v20 = (const void *)(v17 + v18);
  if (v13((const void *)(v17 + v18), 1, v11))
  {
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v19, v20, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
  }
  return a1;
}

_QWORD *sub_1BA9F69B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  v9 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1BB86E710();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v20 + 1);
  if (*((_QWORD *)v19 + 1))
  {
    if (v21)
    {
      *((_QWORD *)v19 + 1) = v21;
      swift_bridgeObjectRelease();
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1BA9F5798((uint64_t)(v19 + 8));
  }
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
LABEL_12:
  v22 = *(int *)(type metadata accessor for FormatCompilerSlotDefinitionItemSet() + 24);
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = v14(&v19[v22], 1, v12);
  v26 = v14(v24, 1, v12);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v23, v24, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
    goto LABEL_17;
  }
  if (v26)
  {
LABEL_17:
    sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v23, v24, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v12);
  return a1;
}

uint64_t sub_1BA9F6C64()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9F6C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FormatSlotDefinition();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1BA9F6CE4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9F6CF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FormatSlotDefinition();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for FormatCompilingSlotDefinition(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3D2060);
}

uint64_t sub_1BA9F6D80()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FormatSlotDefinition();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FormatCompilerSlotDefinitionItemSet();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BA9F6E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v4 = type metadata accessor for FormatPropertyDefinition(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1BAC7A760(0, v8, 0);
    v9 = v17;
    v10 = *(_QWORD *)(type metadata accessor for FormatCompilerProperty(0) - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v15 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      sub_1BB6E0258(v16, (uint64_t)v7);
      if (v2)
        break;
      v17 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1BAC7A760(v12 > 1, v13 + 1, 1);
        v9 = v17;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      sub_1BA5193C4((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, type metadata accessor for FormatPropertyDefinition);
      v11 += v15;
      if (!--v8)
        return v9;
    }
    swift_release();
  }
  return v9;
}

uint64_t sub_1BA9F6F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a4;
  v7 = type metadata accessor for FormatPropertyDefinition(0);
  v51 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormatSlotDefinitionItemSet();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return MEMORY[0x1E0DEE9D8];
  v54 = MEMORY[0x1E0DEE9D8];
  v40 = v13;
  v15 = MEMORY[0x1E0DEE9D8];
  v46 = v14;
  sub_1BAC7A78C(0, v14, 0);
  v16 = v40;
  v50 = v54;
  v43 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v45 = a1 + v43;
  v17 = *(_QWORD *)(v11 + 72);
  if (a3)
    v18 = a3;
  else
    v18 = v15;
  v19 = 0;
  v41 = v40 + 3;
  v42 = v17;
  v47 = v18;
  v38 = v10;
  v39 = a3;
  while (1)
  {
    v20 = (_QWORD *)(v45 + v17 * v19);
    v21 = v20[1];
    v48 = v20;
    v49 = v19;
    v22 = *v20;
    v23 = *(_QWORD *)(v18 + 16);
    if (v23)
      break;
    v30 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    sub_1BA57B488((uint64_t)v48 + *(int *)(v10 + 36), (uint64_t)v16 + *(int *)(v10 + 36), (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    *v16 = v22;
    v16[1] = v30;
    v16[2] = v24;
    v31 = v41;
    *v41 = 0;
    v31[1] = 0;
    v33 = v49;
    v32 = v50;
    v54 = v50;
    v35 = *(_QWORD *)(v50 + 16);
    v34 = *(_QWORD *)(v50 + 24);
    if (v35 >= v34 >> 1)
    {
      sub_1BAC7A78C(v34 > 1, v35 + 1, 1);
      v16 = v40;
      v32 = v54;
    }
    v19 = v33 + 1;
    *(_QWORD *)(v32 + 16) = v35 + 1;
    v50 = v32;
    v17 = v42;
    sub_1BA5193C4((uint64_t)v16, v32 + v43 + v35 * v42, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
    v18 = v47;
    if (v19 == v46)
      return v50;
  }
  v53 = MEMORY[0x1E0DEE9D8];
  v44 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BAC7A760(0, v23, 0);
  v24 = v53;
  v25 = *(_QWORD *)(type metadata accessor for FormatCompilerProperty(0) - 8);
  v26 = v18 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  v27 = *(_QWORD *)(v25 + 72);
  while (1)
  {
    sub_1BB6E0258(v52, (uint64_t)v9);
    if (v4)
      break;
    v53 = v24;
    v29 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    if (v29 >= v28 >> 1)
    {
      sub_1BAC7A760(v28 > 1, v29 + 1, 1);
      v24 = v53;
    }
    *(_QWORD *)(v24 + 16) = v29 + 1;
    sub_1BA5193C4((uint64_t)v9, v24+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v29, type metadata accessor for FormatPropertyDefinition);
    v26 += v27;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v10 = v38;
      v16 = v40;
      v30 = v44;
      goto LABEL_14;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t Dictionary<>.seedFormatCodingVersion(mode:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *boxed_opaque_existential_0;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;

  v2 = sub_1BB86EB84();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v51 = (char *)&v45 - v6;
  MEMORY[0x1E0C80A78](v7);
  v50 = (char *)&v45 - v8;
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v45 - v10;
  v57 = type metadata accessor for FormatVersioningMode(0);
  MEMORY[0x1E0C80A78](v57);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FormatVersionInfo(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v47 = (char *)&v45 - v19;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v45 - v21;
  v23 = sub_1BB873E58();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v46 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v45 = (char *)&v45 - v27;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v45 - v29;
  sub_1BB873E4C();
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  result = v56(v22, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v53 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v53(v30, v22, v23);
  sub_1BA4C2DD8(a1, (uint64_t)v15, type metadata accessor for FormatVersioningMode);
  v32 = &v15[*(int *)(v13 + 20)];
  v54 = v2;
  v55 = v3;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v32, 1, 1, v2);
  *(_QWORD *)&v15[*(int *)(v13 + 24)] = MEMORY[0x1E0DEE9D8];
  sub_1BA4B07F0(0, &qword_1EF2ACD60, type metadata accessor for FormatVersionInfo, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for Box);
  v34 = v33;
  v35 = swift_allocObject();
  sub_1BA5193C4((uint64_t)v15, v35 + *(_QWORD *)(*(_QWORD *)v35 + 88), type metadata accessor for FormatVersionInfo);
  v59 = v34;
  v58[0] = v35;
  sub_1BB4A9CB8((uint64_t)v58, (uint64_t)v30);
  sub_1BA4C2DD8(a1, (uint64_t)v12, type metadata accessor for FormatVersioningMode);
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v36 = v54;
    v37 = v55;
    v38 = v49;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v49, v12, v54);
    v39 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v40 = v50;
    v39(v50, v38, v36);
    v41 = v47;
    sub_1BB873E4C();
    result = v56(v41, 1, v23);
    if ((_DWORD)result != 1)
    {
      v42 = (uint64_t)v45;
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result != 1)
    return result;
  v36 = v54;
  v37 = v55;
  v38 = v51;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v51, v12, v54);
  v39 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v40 = v52;
  v39(v52, v38, v36);
  v41 = v48;
  sub_1BB873E4C();
  result = v56(v41, 1, v23);
  if ((_DWORD)result == 1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v42 = (uint64_t)v46;
LABEL_8:
  v53((char *)v42, v41, v23);
  v59 = v36;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v58);
  v39((char *)boxed_opaque_existential_0, v40, v36);
  sub_1BB4A9CB8((uint64_t)v58, v42);
  v44 = *(void (**)(char *, uint64_t))(v37 + 8);
  v44(v40, v36);
  return ((uint64_t (*)(char *, uint64_t))v44)(v38, v36);
}

uint64_t static CodingUserInfoKey.formatCodingVersionInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - v3;
  sub_1BB873E4C();
  v5 = sub_1BB873E58();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t sub_1BA9F78A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BA4B07F0(0, &qword_1ED3C7A78, type metadata accessor for FormatVersionInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - v5;
  sub_1BA5E01A4(a1, (uint64_t)&v8 - v5, &qword_1ED3C7A78, type metadata accessor for FormatVersionInfo);
  return Dictionary<>.formatCodingVersionInfo.setter((uint64_t)v6, *a2);
}

void (*Dictionary<>.formatCodingVersionInfo.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;

  *a1 = a2;
  sub_1BA4B07F0(0, &qword_1ED3C7A78, type metadata accessor for FormatVersionInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  a1[1] = (uint64_t)malloc(v5);
  v6 = malloc(v5);
  a1[2] = (uint64_t)v6;
  Dictionary<>.formatCodingVersionInfo.getter(a2, (uint64_t)v6);
  return sub_1BA9F79D0;
}

void sub_1BA9F79D0(uint64_t *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)a1[1];
  v3 = (void *)a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_1BA5E01A4(a1[2], (uint64_t)v2, &qword_1ED3C7A78, type metadata accessor for FormatVersionInfo);
    Dictionary<>.formatCodingVersionInfo.setter((uint64_t)v2, v4);
    sub_1BA6ED6EC((uint64_t)v3, (uint64_t)&qword_1ED3C7A78, (uint64_t)type metadata accessor for FormatVersionInfo, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
  }
  else
  {
    Dictionary<>.formatCodingVersionInfo.setter(a1[2], v4);
  }
  free(v3);
  free(v2);
}

uint64_t sub_1BA9F7A68()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t sub_1BA9F7AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      swift_bridgeObjectRelease();
      v9 = sub_1BB86EB84();
      v10 = *(_QWORD *)(v9 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v9);
    }
    else
    {
      sub_1BA6F3F88();
      v15 = &v6[*(int *)(v14 + 48)];
      swift_bridgeObjectRelease();
      v16 = sub_1BB86EB84();
      v17 = *(_QWORD *)(v16 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a1, v6, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    }
  }
  else
  {
    v12 = sub_1BB86EB84();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v6, v12);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
}

uint64_t sub_1BA9F7C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v10 = &v6[*(int *)(v9 + 48)];
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      sub_1BAA00E84(0, &qword_1EF2ACFE0);
      v14 = v13;
      v15 = (_QWORD *)(a1 + *(int *)(v13 + 48));
      v16 = sub_1BB86EB84();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, v6, v16);
      *v15 = v11;
      v15[1] = v12;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
    }
    else
    {
      sub_1BA6F3F88();
      v20 = &v6[*(int *)(v19 + 48)];
      v21 = &v6[*(int *)(v19 + 64)];
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      sub_1BAA00E84(0, &qword_1EF2ACFE0);
      v25 = v24;
      v26 = (_QWORD *)(a1 + *(int *)(v24 + 48));
      v27 = sub_1BB86EB84();
      v28 = *(_QWORD *)(v27 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(a1, v20, v27);
      *v26 = v22;
      v26[1] = v23;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 0, 1, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v6, v27);
    }
  }
  else
  {
    sub_1BAA00E84(0, &qword_1EF2ACFE0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
    return sub_1BA4A2E80((uint64_t)v6, type metadata accessor for FormatVersionRequirement.Value);
  }
}

uint64_t sub_1BA9F7E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;

  v1 = v0;
  v2 = sub_1BB86EB84();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v17, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v21 = *(_QWORD *)&v17[*(int *)(v20 + 48) + 8];
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v17, v2);
      sub_1BB872A90();
      sub_1BB86EB24();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      sub_1BB8745E4();
      if (v21)
      {
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    }
    else
    {
      sub_1BA6F3F88();
      v24 = &v17[*(int *)(v23 + 48)];
      v25 = *(_QWORD *)&v17[*(int *)(v23 + 64) + 8];
      v26 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v26(v8, v17, v2);
      v26(v5, v24, v2);
      sub_1BB872A90();
      sub_1BB86EB24();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      sub_1BB86EB24();
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      sub_1BB8745E4();
      if (v25)
      {
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        swift_bridgeObjectRelease();
      }
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v5, v2);
      v27(v8, v2);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v14, v17, v2);
    sub_1BB872A90();
    sub_1BB86EB24();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v14, v2);
  }
}

uint64_t sub_1BA9F81E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  char v49;

  v46 = a2;
  v42 = type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v42);
  v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for FormatVersionRequirement.DeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v41);
  v39 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for FormatVersionRequirement.IntroducedRequirement(0);
  MEMORY[0x1E0C80A78](v44);
  v43 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1ED3B9C10, (uint64_t (*)(void))sub_1BA6B8518, (uint64_t)&type metadata for FormatCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v45 = v6;
  v7 = *((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA6B8518();
  v13 = v47;
  sub_1BB87468C();
  if (v13)
  {
    v17 = (uint64_t)a1;
  }
  else
  {
    v14 = v43;
    v38 = v12;
    v15 = v46;
    v47 = a1;
    sub_1BAA00FCC();
    v48 = 0uLL;
    v16 = v45;
    sub_1BB8740D4();
    v19 = v9;
    v20 = v7;
    if (v49)
    {
      v48 = xmmword_1BB87FC90;
      if (v49 == 1)
      {
        sub_1BA4A2870(&qword_1EF2AD008, type metadata accessor for FormatVersionRequirement.DeprecatedRequirement, (uint64_t)&unk_1BB88F404);
        v21 = v39;
        v22 = v41;
        sub_1BB8740D4();
        v23 = v16;
        v27 = v15;
        (*(void (**)(char *, char *))(v20 + 8))(v19, v23);
        sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
        v29 = *(int *)(v28 + 48);
        v30 = sub_1BB86EB84();
        v31 = (uint64_t)v38;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v38, v21, v30);
        *(_OWORD *)(v31 + v29) = *(_OWORD *)&v21[*(int *)(v22 + 20)];
      }
      else
      {
        sub_1BA4A2870(&qword_1EF2AD000, type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement, (uint64_t)&unk_1BB88F42C);
        v24 = v40;
        v25 = v42;
        sub_1BB8740D4();
        v26 = v16;
        v27 = v15;
        (*(void (**)(char *, char *))(v7 + 8))(v19, v26);
        sub_1BA6F3F88();
        v34 = (uint64_t)v38;
        v45 = &v38[*(int *)(v33 + 48)];
        v35 = *(int *)(v33 + 64);
        v36 = sub_1BB86EB84();
        v37 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
        v37(v34, v24, v36);
        v37((uint64_t)v45, &v24[*(int *)(v25 + 20)], v36);
        *(_OWORD *)(v34 + v35) = *(_OWORD *)&v24[*(int *)(v25 + 24)];
        v31 = v34;
      }
    }
    else
    {
      v48 = xmmword_1BB87FC90;
      sub_1BA4A2870(&qword_1EF2AD010, type metadata accessor for FormatVersionRequirement.IntroducedRequirement, (uint64_t)&unk_1BB88F3DC);
      sub_1BB8740D4();
      (*(void (**)(char *, char *))(v7 + 8))(v19, v16);
      v32 = sub_1BB86EB84();
      v31 = (uint64_t)v38;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v38, v14, v32);
      v27 = v15;
    }
    swift_storeEnumTagMultiPayload();
    sub_1BA5193C4(v31, v27, type metadata accessor for FormatVersionRequirement.Value);
    v17 = (uint64_t)v47;
  }
  return __swift_destroy_boxed_opaque_existential_1(v17);
}

uint64_t sub_1BA9F86A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;

  v64 = type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v64);
  v65 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for FormatVersionRequirement.DeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v62);
  v63 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FormatVersionRequirement.IntroducedRequirement(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1BB86EB84();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v67 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v69 = (char *)&v61 - v9;
  MEMORY[0x1E0C80A78](v10);
  v68 = (char *)&v61 - v11;
  MEMORY[0x1E0C80A78](v12);
  v66 = (char *)&v61 - v13;
  v14 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1ED39DBE0, (uint64_t (*)(void))sub_1BA6B8518, (uint64_t)&type metadata for FormatCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v76 = v17;
  v73 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v61 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA6B8518();
  v70 = v19;
  sub_1BB8746C8();
  sub_1BA4C2DD8(v75, (uint64_t)v16, type metadata accessor for FormatVersionRequirement.Value);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v22 = &v16[*(int *)(v21 + 48)];
      v23 = *(_QWORD *)v22;
      v24 = *((_QWORD *)v22 + 1);
      v25 = v72;
      v26 = v68;
      v27 = v16;
      v28 = v74;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v68, v27, v74);
      v78 = 1;
      sub_1BAA01010();
      v77 = 0uLL;
      v29 = v76;
      v30 = v70;
      v31 = v71;
      sub_1BB8741AC();
      if (v31)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
      }
      else
      {
        v53 = (uint64_t)v63;
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v63, v26, v28);
        v54 = (_QWORD *)(v53 + *(int *)(v62 + 20));
        *v54 = v23;
        v54[1] = v24;
        v77 = xmmword_1BB87FC90;
        sub_1BA4A2870(&qword_1EF2AD028, type metadata accessor for FormatVersionRequirement.DeprecatedRequirement, (uint64_t)&unk_1BB88F364);
        sub_1BB8741AC();
        sub_1BA4A2E80(v53, type metadata accessor for FormatVersionRequirement.DeprecatedRequirement);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v68, v28);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v30, v29);
    }
    else
    {
      sub_1BA6F3F88();
      v41 = &v16[*(int *)(v40 + 48)];
      v42 = (uint64_t *)&v16[*(int *)(v40 + 64)];
      v43 = v42[1];
      v75 = *v42;
      v44 = v72;
      v45 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v46 = v69;
      v47 = v74;
      v45(v69, v16, v74);
      v48 = v67;
      v45(v67, v41, v47);
      v78 = 2;
      sub_1BAA01010();
      v77 = 0uLL;
      v49 = v76;
      v50 = v70;
      v51 = v71;
      sub_1BB8741AC();
      if (v51)
      {
        swift_bridgeObjectRelease();
        v52 = *(void (**)(char *, uint64_t))(v44 + 8);
        v52(v48, v47);
        v52(v46, v47);
        return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v50, v49);
      }
      else
      {
        v55 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v56 = (uint64_t)v65;
        v55(v65, v46, v47);
        v57 = v64;
        v55((char *)(v56 + *(int *)(v64 + 20)), v48, v47);
        v58 = (_QWORD *)(v56 + *(int *)(v57 + 24));
        *v58 = v75;
        v58[1] = v43;
        v77 = xmmword_1BB87FC90;
        sub_1BA4A2870(&qword_1EF2AD020, type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement, (uint64_t)&unk_1BB88F38C);
        v59 = v76;
        sub_1BB8741AC();
        sub_1BA4A2E80(v56, type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement);
        v60 = *(void (**)(char *, uint64_t))(v44 + 8);
        v60(v48, v47);
        v60(v69, v47);
        return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v50, v59);
      }
    }
  }
  else
  {
    v32 = v72;
    v33 = v66;
    v34 = v16;
    v35 = v74;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v66, v34, v74);
    v78 = 0;
    sub_1BAA01010();
    v77 = 0uLL;
    v36 = v76;
    v37 = v70;
    v38 = v71;
    sub_1BB8741AC();
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v6, v33, v35);
      v77 = xmmword_1BB87FC90;
      sub_1BA4A2870(&qword_1EF2AD030, type metadata accessor for FormatVersionRequirement.IntroducedRequirement, (uint64_t)&unk_1BB88F33C);
      sub_1BB8741AC();
      sub_1BA4A2E80((uint64_t)v6, type metadata accessor for FormatVersionRequirement.IntroducedRequirement);
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v37, v36);
  }
}

uint64_t sub_1BA9F8CF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = a2;
  v19 = sub_1BB86EB84();
  v3 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2AD250, (uint64_t (*)(void))sub_1BAA01E9C, (uint64_t)&type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v20 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for FormatVersionRequirement.IntroducedRequirement(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E9C();
  v12 = v21;
  sub_1BB87468C();
  if (!v12)
  {
    v13 = (uint64_t)v11;
    sub_1BA4A2870(&qword_1ED3B0918, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF0]);
    v15 = v18;
    v14 = v19;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13, v15, v14);
    sub_1BA5193C4(v13, v17, type metadata accessor for FormatVersionRequirement.IntroducedRequirement);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BA9F8EEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  sub_1BA4CDF6C(0, &qword_1EF2AD268, (uint64_t (*)(void))sub_1BAA01E58, (uint64_t)&type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E58();
  sub_1BB8746C8();
  v11 = 0;
  sub_1BB86EB84();
  sub_1BA4A2870(&qword_1ED39C370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DD8]);
  sub_1BB8741AC();
  if (!v1)
  {
    type metadata accessor for FormatVersionRequirement.DeprecatedRequirement(0);
    v10 = 1;
    sub_1BB87411C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BA9F905C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v24 = a2;
  v28 = sub_1BB86EB84();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2AD240, (uint64_t (*)(void))sub_1BAA01E58, (uint64_t)&type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for FormatVersionRequirement.DeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E58();
  v11 = v29;
  sub_1BB87468C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = a1;
  v29 = v5;
  v12 = (uint64_t)v10;
  v13 = v25;
  v31 = 0;
  sub_1BA4A2870(&qword_1ED3B0918, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF0]);
  v15 = v26;
  v14 = v27;
  v16 = v28;
  sub_1BB8740D4();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v12, v15, v16);
  v30 = 1;
  v17 = sub_1BB87402C();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v14);
  v20 = (uint64_t *)(v12 + *(int *)(v8 + 20));
  *v20 = v17;
  v20[1] = v19;
  sub_1BA4C2DD8(v12, v24, type metadata accessor for FormatVersionRequirement.DeprecatedRequirement);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_1BA4A2E80(v12, type metadata accessor for FormatVersionRequirement.DeprecatedRequirement);
}

uint64_t sub_1BA9F9300(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_1BA4CDF6C(0, &qword_1EF2AD260, (uint64_t (*)(void))sub_1BAA01E14, (uint64_t)&type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E14();
  sub_1BB8746C8();
  v12 = 0;
  sub_1BB86EB84();
  sub_1BA4A2870(&qword_1ED39C370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DD8]);
  sub_1BB8741AC();
  if (!v1)
  {
    type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement(0);
    v11 = 1;
    sub_1BB8741AC();
    v10 = 2;
    sub_1BB87411C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BA9F94AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char v37;
  char v38;
  char v39;

  v29 = a2;
  v33 = sub_1BB86EB84();
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v32 = (char *)&v27 - v5;
  sub_1BA4CDF6C(0, &qword_1EF2AD230, (uint64_t (*)(void))sub_1BAA01E14, (uint64_t)&type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v34 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E14();
  v35 = v9;
  v13 = v36;
  sub_1BB87468C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v14 = v31;
  v27 = v10;
  v28 = v12;
  v36 = a1;
  v39 = 0;
  sub_1BA4A2870(&qword_1ED3B0918, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF0]);
  v15 = v32;
  v16 = v33;
  sub_1BB8740D4();
  v32 = *(char **)(v30 + 32);
  ((void (*)(char *, char *, uint64_t))v32)(v28, v15, v16);
  v38 = 1;
  v17 = v14;
  sub_1BB8740D4();
  v19 = v27;
  v18 = (uint64_t)v28;
  ((void (*)(char *, char *, uint64_t))v32)(&v28[*(int *)(v27 + 20)], v17, v16);
  v37 = 2;
  v20 = sub_1BB87402C();
  v21 = (uint64_t)v36;
  v22 = v20;
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v35, v34);
  v25 = (uint64_t *)(v18 + *(int *)(v19 + 24));
  *v25 = v22;
  v25[1] = v24;
  sub_1BA4C2DD8(v18, v29, type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement);
  __swift_destroy_boxed_opaque_existential_1(v21);
  return sub_1BA4A2E80(v18, type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement);
}

uint64_t sub_1BA9F97F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v17 = a2;
  v18 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v18);
  v19 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2ACFC0, (uint64_t (*)(void))sub_1BAA00D7C, (uint64_t)&type metadata for FormatVersionRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for FormatVersionRequirement(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA00D7C();
  v12 = v20;
  sub_1BB87468C();
  if (!v12)
  {
    v13 = v17;
    sub_1BA4A2870(&qword_1EF2ACF98, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EF90);
    v14 = (uint64_t)v19;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1BA5193C4(v14, (uint64_t)v11, type metadata accessor for FormatVersionRequirement.Value);
    sub_1BA5193C4((uint64_t)v11, v13, type metadata accessor for FormatVersionRequirement);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BA9F99E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BB7F4DA0(*a1, *a2);
}

uint64_t sub_1BA9F99F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BAA0084C();
  *a1 = result;
  return result;
}

void sub_1BA9F9A20(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xEA00000000006465;
  v3 = *v1;
  v4 = 0x7461636572706564;
  v5 = 0x80000001BB95A420;
  if (v3 == 1)
    v5 = 0xEA00000000006465;
  else
    v4 = 0xD000000000000018;
  v6 = v3 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x6375646F72746E69;
  if (!v6)
    v2 = v5;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_1BA9F9A84()
{
  sub_1BAA01DD0();
  return sub_1BB872D60();
}

uint64_t sub_1BA9F9AE0()
{
  sub_1BAA01DD0();
  return sub_1BB872D0C();
}

uint64_t sub_1BA9F9B2C()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BA9F9BD0()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA9F9C50()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BA9F9CF4()
{
  sub_1BB8745CC();
  sub_1BA9F7E54();
  return sub_1BB874608();
}

uint64_t sub_1BA9F9D34()
{
  sub_1BB8745CC();
  sub_1BA9F7E54();
  return sub_1BB874608();
}

uint64_t sub_1BA9F9D6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BA9F81E0(a1, a2);
}

uint64_t sub_1BA9F9D80(_QWORD *a1)
{
  return sub_1BA9F86A8(a1);
}

uint64_t sub_1BA9F9D94()
{
  return 0x6375646F72746E69;
}

uint64_t sub_1BA9F9DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6375646F72746E69 && a2 == 0xEA00000000006465)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BA9F9E50()
{
  sub_1BAA01E9C();
  return sub_1BB874710();
}

uint64_t sub_1BA9F9E78()
{
  sub_1BAA01E9C();
  return sub_1BB87471C();
}

uint64_t sub_1BA9F9EA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BA9F8CF4(a1, a2);
}

uint64_t sub_1BA9F9EB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BA4CDF6C(0, &qword_1EF2AD270, (uint64_t (*)(void))sub_1BAA01E9C, (uint64_t)&type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA01E9C();
  sub_1BB8746C8();
  sub_1BB86EB84();
  sub_1BA4A2870(&qword_1ED39C370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DD8]);
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BA9F9FE4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D6563616C706572;
  else
    return 0x7461636572706564;
}

uint64_t sub_1BA9FA02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA00894(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA9FA050()
{
  sub_1BAA01E58();
  return sub_1BB874710();
}

uint64_t sub_1BA9FA078()
{
  sub_1BAA01E58();
  return sub_1BB87471C();
}

uint64_t sub_1BA9FA0A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BA9F905C(a1, a2);
}

uint64_t sub_1BA9FA0B4(_QWORD *a1)
{
  return sub_1BA9F8EEC(a1);
}

uint64_t sub_1BA9FA0C8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7461636572706564;
  if (*v0 != 1)
    v1 = 0x6D6563616C706572;
  if (*v0)
    return v1;
  else
    return 0x6375646F72746E69;
}

uint64_t sub_1BA9FA12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA009A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA9FA150()
{
  sub_1BAA01E14();
  return sub_1BB874710();
}

uint64_t sub_1BA9FA178()
{
  sub_1BAA01E14();
  return sub_1BB87471C();
}

uint64_t sub_1BA9FA1A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BA9F94AC(a1, a2);
}

uint64_t sub_1BA9FA1B4(_QWORD *a1)
{
  return sub_1BA9F9300(a1);
}

uint64_t sub_1BA9FA1C8()
{
  return 0x65756C6176;
}

uint64_t sub_1BA9FA1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BA9FA268()
{
  sub_1BAA00D7C();
  return sub_1BB874710();
}

uint64_t sub_1BA9FA290()
{
  sub_1BAA00D7C();
  return sub_1BB87471C();
}

uint64_t sub_1BA9FA2B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BA9F97F4(a1, a2);
}

uint64_t sub_1BA9FA2CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BA4CDF6C(0, &qword_1EF2AD038, (uint64_t (*)(void))sub_1BAA00D7C, (uint64_t)&type metadata for FormatVersionRequirement.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA00D7C();
  sub_1BB8746C8();
  type metadata accessor for FormatVersionRequirement.Value(0);
  sub_1BA4A2870(&qword_1EF2ACFA0, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EF68);
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FormatVersionInfo.mode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4C2DD8(v1, a1, type metadata accessor for FormatVersioningMode);
}

uint64_t FormatVersionInfo.detectedVersion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatVersionInfo(0);
  return sub_1BA5E01A4(v1 + *(int *)(v3 + 20), a1, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
}

uint64_t FormatVersionInfo.recordedDeprecations.getter()
{
  type metadata accessor for FormatVersionInfo(0);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA9FA484(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  void (*v67)(char *, uint64_t);
  char *v68;
  uint64_t (*v69)(uint64_t);
  char v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  char *v89;
  void (*v90)(void);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t (*v116)(void);
  uint64_t v117;
  uint64_t (*v118)(void);
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v115 = a5;
  v116 = a4;
  v117 = a3;
  v118 = a2;
  v6 = type metadata accessor for FormatDeprecationWarning(0);
  v109 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v112 = (uint64_t)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA00E20();
  MEMORY[0x1E0C80A78](v8);
  v126 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA00F0C();
  v121 = v10;
  MEMORY[0x1E0C80A78](v10);
  v120 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FormatVersioningMode(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v123 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v108 - v15;
  sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v18 = MEMORY[0x1E0C80A78](v17);
  v111 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v108 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v108 - v23;
  v25 = sub_1BB86EB84();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v119 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v124 = (char *)&v108 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v114 = (char *)&v108 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v113 = (char *)&v108 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v110 = (char *)&v108 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v108 - v38;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v108 - v40;
  v125 = a1;
  sub_1BA9F7AA0((uint64_t)v24);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v43 = v42(v24, 1, v25);
  v128 = v26;
  v122 = v12;
  if (v43 == 1)
  {
    sub_1BA6ED6EC((uint64_t)v24, (uint64_t)&qword_1ED3B0930, (uint64_t)MEMORY[0x1E0DB4DC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
    v44 = (uint64_t)v126;
    v45 = v25;
  }
  else
  {
    v108 = v22;
    v46 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v46(v41, v24, v25);
    v47 = v127;
    sub_1BA4C2DD8(v127, (uint64_t)v16, type metadata accessor for FormatVersioningMode);
    v48 = v47;
    v49 = v41;
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      v63 = (void (*)(uint64_t, char *, uint64_t))v46;
      v64 = v48 + *(int *)(type metadata accessor for FormatVersionInfo(0) + 20);
      v65 = (uint64_t)v108;
      sub_1BA5E01A4(v64, (uint64_t)v108, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
      v45 = v25;
      if (v42((char *)v65, 1, v25) == 1)
      {
        v66 = MEMORY[0x1E0DB4DC8];
        sub_1BA6ED6EC(v65, (uint64_t)&qword_1ED3B0930, (uint64_t)MEMORY[0x1E0DB4DC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        sub_1BA6ED6EC(v64, (uint64_t)&qword_1ED3B0930, (uint64_t)v66, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        v63(v64, v49, v25);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v64, 0, 1, v25);
      }
      else
      {
        v68 = v110;
        v63((uint64_t)v110, (char *)v65, v45);
        v69 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
        sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
        v70 = sub_1BB872928();
        v71 = v45;
        v72 = v49;
        v73 = v128;
        if ((v70 & 1) != 0)
          v74 = v72;
        else
          v74 = v68;
        v75 = (uint64_t)v111;
        (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v111, v74, v71);
        v76 = *(void (**)(char *, uint64_t))(v73 + 8);
        v76(v68, v71);
        v77 = v72;
        v45 = v71;
        v76(v77, v71);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v75, 0, 1, v71);
        sub_1BA9FD288(v75, v64, &qword_1ED3B0930, v69);
      }
      v44 = (uint64_t)v126;
    }
    else
    {
      v46(v39, v16, v25);
      sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
      v50 = sub_1BB87291C();
      v51 = v41;
      v44 = (uint64_t)v126;
      v45 = v25;
      if ((v50 & 1) != 0)
      {
        v52 = v113;
        (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v113, v51, v45);
        v53 = v114;
        v54 = ((uint64_t (*)(char *, char *, uint64_t))v46)(v114, v39, v45);
        v129 = ((uint64_t (*)(uint64_t))v116)(v54);
        v127 = v55;
        v56 = v118();
        v57 = (int *)type metadata accessor for FormatVersioningError(0);
        sub_1BA4A2870(qword_1EF2ACD98, type metadata accessor for FormatVersioningError, (uint64_t)&protocol conformance descriptor for FormatVersioningError);
        swift_allocError();
        v59 = v58;
        v46(v58, v52, v45);
        v46(&v59[v57[5]], v53, v45);
        v60 = (uint64_t *)&v59[v57[6]];
        v61 = v127;
        *v60 = v129;
        v60[1] = v61;
        *(_QWORD *)&v59[v57[7]] = v56;
        swift_willThrow();
        return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v51, v45);
      }
      v67 = *(void (**)(char *, uint64_t))(v128 + 8);
      v67(v39, v25);
      v67(v51, v25);
    }
  }
  sub_1BA9F7C44(v44);
  sub_1BAA00E84(0, &qword_1EF2ACFE0);
  v79 = v78;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v44, 1, v78) == 1)
    return sub_1BA4A2E80(v44, (uint64_t (*)(_QWORD))sub_1BAA00E20);
  v80 = (uint64_t *)(v44 + *(int *)(v79 + 48));
  v81 = *v80;
  v82 = v80[1];
  v83 = v120;
  v84 = v121;
  v85 = &v120[*(int *)(v121 + 48)];
  v86 = v128;
  v87 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 32);
  v87(v120, v44, v45);
  *(_QWORD *)v85 = v81;
  *((_QWORD *)v85 + 1) = v82;
  v88 = &v83[*(int *)(v84 + 48)];
  v89 = *(char **)v88;
  v90 = (void (*)(void))*((_QWORD *)v88 + 1);
  v91 = v124;
  v87(v124, (uint64_t)v83, v45);
  v92 = v123;
  sub_1BA4C2DD8(v127, v123, type metadata accessor for FormatVersioningMode);
  if (swift_getEnumCaseMultiPayload() >= 2)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v91, v45);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v93 = v86;
    v94 = v119;
    v87(v119, v92, v45);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
    if ((sub_1BB87291C() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v95 = *(void (**)(char *, uint64_t))(v93 + 8);
      v95(v94, v45);
      return ((uint64_t (*)(char *, uint64_t))v95)(v91, v45);
    }
    else
    {
      v125 = v116();
      v126 = v89;
      v97 = v96;
      v98 = v118();
      v99 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
      v100 = (uint64_t)v113;
      v99(v113, v94, v45);
      v101 = (uint64_t)v114;
      v99(v114, v91, v45);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v102 = (uint64_t)v126;
      v126 = (char *)v98;
      sub_1BA9FADDC(v100, v101, v102, v90, v98, v125, v97, v112);
      v103 = *(int *)(type metadata accessor for FormatVersionInfo(0) + 24);
      v104 = *(_QWORD *)(v127 + v103);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v104 = sub_1BB38C7C0(0, *(_QWORD *)(v104 + 16) + 1, 1, v104);
      v106 = *(_QWORD *)(v104 + 16);
      v105 = *(_QWORD *)(v104 + 24);
      if (v106 >= v105 >> 1)
        v104 = sub_1BB38C7C0(v105 > 1, v106 + 1, 1, v104);
      *(_QWORD *)(v104 + 16) = v106 + 1;
      sub_1BA5193C4(v112, v104+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(_QWORD *)(v109 + 72) * v106, type metadata accessor for FormatDeprecationWarning);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v127 + v103) = v104;
      v107 = *(void (**)(char *, uint64_t))(v128 + 8);
      v107(v119, v45);
      return ((uint64_t (*)(char *, uint64_t))v107)(v124, v45);
    }
  }
}

uint64_t sub_1BA9FADDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  v63 = a6;
  v64 = a7;
  v65 = a5;
  v66 = a2;
  v57 = a3;
  v58 = a4;
  v67 = a1;
  v9 = sub_1BB86DE4C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BB86DE58();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v53 = (char *)&v51 - v17;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v51 - v20;
  v22 = (int *)type metadata accessor for FormatDeprecationWarning(0);
  v23 = (_QWORD *)(a8 + v22[6]);
  v24 = a8 + v22[7];
  v55 = v14;
  v56 = v13;
  v25 = *(void (**)(void))(v14 + 56);
  v59 = v24;
  v25();
  v26 = (uint64_t *)(a8 + v22[8]);
  v27 = sub_1BB86EB84();
  *v26 = 0;
  v26[1] = 0;
  v62 = v26;
  v60 = *(_QWORD *)(v27 - 8);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v28(a8, v67, v27);
  v29 = v22[5];
  v30 = v66;
  v52 = a8;
  v61 = v27;
  v28(a8 + v29, v66, v27);
  v31 = v65;
  v32 = v58;
  *v23 = v57;
  v23[1] = v32;
  if (v31)
  {
    v58 = v25;
    v33 = v56;
    v34 = *(_QWORD *)(v31 + 16);
    if (v34)
    {
      v70 = MEMORY[0x1E0DEE9D8];
      sub_1BAC79DF0(0, v34, 0);
      v35 = v31 + 32;
      do
      {
        sub_1BA4C010C(v35, (uint64_t)v68);
        __swift_project_boxed_opaque_existential_1(v68, v69);
        sub_1BB874704();
        if ((v36 & 1) != 0)
        {
          __swift_project_boxed_opaque_existential_1(v68, v69);
          sub_1BB8746EC();
          sub_1BB86DE40();
        }
        else
        {
          sub_1BB86DE34();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
        v37 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1BAC79DF0(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = v70;
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_1BAC79DF0(v38 > 1, v39 + 1, 1);
          v37 = v70;
        }
        *(_QWORD *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v37+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v39, v12, v9);
        v70 = v37;
        v35 += 40;
        --v34;
      }
      while (v34);
      v30 = v66;
    }
    v40 = v54;
    sub_1BB86DDF8();
    v41 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v42 = v53;
    v41(v53, v40, v33);
    v41(v21, v42, v33);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v58)(v21, 0, 1, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v21, 1, 1, v56);
  }
  v43 = v63;
  sub_1BA9FD288((uint64_t)v21, v59, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
  v44 = v64;
  if (!v64)
  {
    v43 = sub_1BA9FC1BC(v52);
    v44 = v45;
  }
  v46 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v47 = v30;
  v48 = v61;
  v46(v47, v61);
  v46(v67, v48);
  v49 = v62;
  result = swift_bridgeObjectRelease();
  *v49 = v43;
  v49[1] = v44;
  return result;
}

uint64_t sub_1BA9FB1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v5 = type metadata accessor for FormatVersioningMode(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BB86EB84();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - v13;
  sub_1BA4C2DD8(v3, (uint64_t)v7, type metadata accessor for FormatVersioningMode);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    sub_1BA6EDCB0(a2, v19);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
    v15 = sub_1BB87291C() ^ 1;
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v11, v8);
    v16(v14, v8);
  }
  return v15 & 1;
}

uint64_t sub_1BA9FB364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  id v31;

  v29 = a1;
  v10 = type metadata accessor for FormatVersioningError(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FormatVersioningMode(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v5, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)EnumCaseMultiPayload)
  {
    v23 = sub_1BB86EB84();
    EnumCaseMultiPayload = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v15, v23);
LABEL_8:
    v24 = MEMORY[0x1E0C80A78](EnumCaseMultiPayload);
    *(&v29 - 2) = a2;
    *(&v29 - 1) = a3;
    MEMORY[0x1E0C80A78](v24);
    *(&v29 - 2) = a4;
    *(&v29 - 1) = a5;
    v25 = v30;
    sub_1BA9FA484(v29, sub_1BA4D7950, v26, sub_1BAA0239C, (uint64_t)(&v29 - 4));
    if (!v25)
      LOBYTE(a2) = 1;
    return a2 & 1;
  }
  if ((_DWORD)EnumCaseMultiPayload != 1)
    goto LABEL_8;
  v18 = MEMORY[0x1E0C80A78](EnumCaseMultiPayload);
  *(&v29 - 2) = a2;
  *(&v29 - 1) = a3;
  MEMORY[0x1E0C80A78](v18);
  *(&v29 - 2) = a4;
  *(&v29 - 1) = a5;
  v19 = v30;
  sub_1BA9FA484(v29, sub_1BAA0239C, v20, sub_1BA4D7950, (uint64_t)(&v29 - 4));
  LOBYTE(a2) = v19 == 0;
  if (v19)
  {
    v31 = v19;
    v21 = v19;
    sub_1BA8EBDF8();
    if (!swift_dynamicCast())
    {

      v27 = sub_1BB86EB84();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v15, v27);
      return a2 & 1;
    }

    sub_1BA4A2E80((uint64_t)v12, type metadata accessor for FormatVersioningError);
  }
  v22 = sub_1BB86EB84();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v15, v22);
  return a2 & 1;
}

uint64_t (*FormatVersioningError.detectedVersion.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatVersioningError.maxVersion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA9FBED8(type metadata accessor for FormatVersioningError, a1);
}

uint64_t FormatVersioningError.maxVersion.setter(uint64_t a1)
{
  return sub_1BA9FBF30(a1, type metadata accessor for FormatVersioningError);
}

uint64_t (*FormatVersioningError.maxVersion.modify())()
{
  type metadata accessor for FormatVersioningError(0);
  return nullsub_1;
}

uint64_t FormatVersioningError.feature.getter()
{
  return sub_1BA9FBFAC(type metadata accessor for FormatVersioningError);
}

uint64_t FormatVersioningError.feature.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BA9FBFF8(a1, a2, type metadata accessor for FormatVersioningError);
}

uint64_t (*FormatVersioningError.feature.modify())()
{
  type metadata accessor for FormatVersioningError(0);
  return nullsub_1;
}

uint64_t FormatVersioningError.codingPath.getter()
{
  type metadata accessor for FormatVersioningError(0);
  return swift_bridgeObjectRetain();
}

uint64_t FormatVersioningError.codingPath.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for FormatVersioningError(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*FormatVersioningError.codingPath.modify())()
{
  type metadata accessor for FormatVersioningError(0);
  return nullsub_1;
}

uint64_t FormatVersioningError.readableCodingPath.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatVersioningError(0) + 28));
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1BA7447E8(0, v2, 0);
    v4 = v1 + 32;
    do
    {
      sub_1BA4C010C(v4, (uint64_t)v15);
      __swift_project_boxed_opaque_existential_1(v15, v16);
      sub_1BB874704();
      if ((v5 & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_1(v15, v16);
        v6 = sub_1BB8746EC();
      }
      else
      {
        v6 = sub_1BB87420C();
      }
      v8 = v6;
      v9 = v7;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v3 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BA7447E8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v17;
      }
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1BA7447E8(v10 > 1, v11 + 1, 1);
        v3 = v17;
      }
      *(_QWORD *)(v3 + 16) = v11 + 1;
      v12 = v3 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v8;
      *(_QWORD *)(v12 + 40) = v9;
      v4 += 40;
      --v2;
    }
    while (v2);
  }
  v15[0] = v3;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6A0BA4();
  sub_1BB872904();
  swift_bridgeObjectRelease();
  v15[0] = 47;
  v15[1] = 0xE100000000000000;
  sub_1BB872AFC(v13);
  swift_bridgeObjectRelease();
  return v15[0];
}

uint64_t FormatVersioningError.failingProperty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatVersioningError(0) + 28));
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  sub_1BA4C010C(v1 + 40 * v2 - 8, (uint64_t)v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  v3 = sub_1BB8746EC();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t FormatVersioningError.failingIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatVersioningError(0) + 28));
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  sub_1BA4C010C(v1 + 40 * v2 - 8, (uint64_t)v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  v3 = sub_1BB874704();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t FormatVersioningError.errorDescription.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v18[2];

  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatVersioningError(0) + 24) + 8))
  {
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    strcpy((char *)v18, "Compiling for ");
    HIBYTE(v18[1]) = -18;
    sub_1BB86EB84();
    sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
    sub_1BB87420C();
    sub_1BB872AFC(v1);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v2);
    sub_1BB872AFC(v3);
  }
  else
  {
    FormatVersioningError.failingIndex.getter();
    if ((v5 & 1) == 0)
    {
      sub_1BB873CB4();
      swift_bridgeObjectRelease();
      strcpy((char *)v18, "Compiling for ");
      HIBYTE(v18[1]) = -18;
      sub_1BB86EB84();
      sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
      sub_1BB87420C();
      sub_1BB872AFC(v6);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v7);
      sub_1BB87420C();
      sub_1BB872AFC(v8);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v9);
      goto LABEL_9;
    }
    FormatVersioningError.failingProperty.getter();
    if (!v10)
    {
      sub_1BB873CB4();
      swift_bridgeObjectRelease();
      strcpy((char *)v18, "Compiling for ");
      HIBYTE(v18[1]) = -18;
      sub_1BB86EB84();
      sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
      sub_1BB87420C();
      sub_1BB872AFC(v14);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v15);
      goto LABEL_9;
    }
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    strcpy((char *)v18, "Compiling for ");
    HIBYTE(v18[1]) = -18;
    sub_1BB86EB84();
    sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
    sub_1BB87420C();
    sub_1BB872AFC(v11);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v12);
    sub_1BB872AFC(v13);
    swift_bridgeObjectRelease();
  }
  sub_1BB872AFC(v4);
LABEL_9:
  sub_1BB87420C();
  sub_1BB872AFC(v16);
  swift_bridgeObjectRelease();
  return v18[0];
}

uint64_t FormatVersioningError.errorHint.getter()
{
  return 0;
}

uint64_t _s8NewsFeed21FormatVersioningErrorV15detectedVersion13TeaFoundation0G0Vvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _s8NewsFeed21FormatVersioningErrorV15detectedVersion13TeaFoundation0G0Vvs_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*FormatDeprecationWarning.target.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatDeprecationWarning.deprecatedIn.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA9FBED8(type metadata accessor for FormatDeprecationWarning, a1);
}

uint64_t sub_1BA9FBED8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t FormatDeprecationWarning.deprecatedIn.setter(uint64_t a1)
{
  return sub_1BA9FBF30(a1, type metadata accessor for FormatDeprecationWarning);
}

uint64_t sub_1BA9FBF30(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*FormatDeprecationWarning.deprecatedIn.modify())()
{
  type metadata accessor for FormatDeprecationWarning(0);
  return nullsub_1;
}

uint64_t FormatDeprecationWarning.replacement.getter()
{
  return sub_1BA9FBFAC(type metadata accessor for FormatDeprecationWarning);
}

uint64_t sub_1BA9FBFAC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FormatDeprecationWarning.replacement.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BA9FBFF8(a1, a2, type metadata accessor for FormatDeprecationWarning);
}

uint64_t sub_1BA9FBFF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 24));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*FormatDeprecationWarning.replacement.modify())()
{
  type metadata accessor for FormatDeprecationWarning(0);
  return nullsub_1;
}

uint64_t FormatDeprecationWarning.codingPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatDeprecationWarning(0);
  return sub_1BA5E01A4(v1 + *(int *)(v3 + 28), a1, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
}

uint64_t FormatDeprecationWarning.codingPath.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FormatDeprecationWarning(0);
  return sub_1BA9FD288(a1, v1 + *(int *)(v3 + 28), (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
}

uint64_t (*FormatDeprecationWarning.codingPath.modify())()
{
  type metadata accessor for FormatDeprecationWarning(0);
  return nullsub_1;
}

uint64_t FormatDeprecationWarning.feature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatDeprecationWarning(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatDeprecationWarning.feature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FormatDeprecationWarning(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FormatDeprecationWarning.feature.modify())()
{
  type metadata accessor for FormatDeprecationWarning(0);
  return nullsub_1;
}

uint64_t sub_1BA9FC1BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  unint64_t v37;

  v2 = sub_1BB86DE58();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v35 - v7;
  sub_1BA4B07F0(0, &qword_1EF2ACFF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3388], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v35 - v13;
  v15 = a1 + *(int *)(type metadata accessor for FormatDeprecationWarning(0) + 28);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v16(v15, 1, v2))
  {
    v35[0] = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v15, v2);
    v17 = sub_1BB86DE04();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = sub_1BB86DE4C();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v14, v17+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, v20);
    }
    else
    {
      v20 = sub_1BB86DE4C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
    sub_1BB86DE4C();
    v22 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v20) == 1)
    {
      sub_1BA6ED6EC((uint64_t)v14, (uint64_t)&qword_1EF2ACFF0, (uint64_t)MEMORY[0x1E0DB3388], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
      v12 = (char *)v35[0];
    }
    else
    {
      v23 = sub_1BB86DE28();
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v20);
      v12 = (char *)v35[0];
      if ((v25 & 1) == 0)
      {
        v36 = 0x5B206D657469;
        v37 = 0xE600000000000000;
        v35[1] = v23;
        sub_1BB87420C();
        sub_1BB872AFC(v26);
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
  }
  if (v16(v15, 1, v2))
    return 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v15, v2);
  v28 = sub_1BB86DE04();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v29 = *(_QWORD *)(v28 + 16);
  if (v29)
  {
    v30 = v29 - 1;
    v31 = sub_1BB86DE4C();
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v12, v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v12, 0, 1, v31);
  }
  else
  {
    v31 = sub_1BB86DE4C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 1, 1, v31);
  }
  swift_bridgeObjectRelease();
  sub_1BB86DE4C();
  v33 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v12, 1, v31) == 1)
  {
    sub_1BA6ED6EC((uint64_t)v12, (uint64_t)&qword_1EF2ACFF0, (uint64_t)MEMORY[0x1E0DB3388], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
    return 0;
  }
  sub_1BB86DE1C();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v31);
  v36 = 0x79747265706F7270;
  v37 = 0xEA00000000002720;
  sub_1BB872AFC((_QWORD *)0x79747265706F7270);
  swift_bridgeObjectRelease();
LABEL_17:
  sub_1BB872AFC(v27);
  return v36;
}

uint64_t FormatDeprecationWarning.message.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[2];

  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatDeprecationWarning(0) + 32) + 8))
  {
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    strcpy((char *)v7, "Compiling for ");
    HIBYTE(v7[1]) = -18;
    sub_1BB86EB84();
    sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
    sub_1BB87420C();
    sub_1BB872AFC(v1);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v2);
    sub_1BB872AFC(v3);
    sub_1BB872AFC("ionality deprecated as of ");
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0xE000000000000000;
    sub_1BB873CB4();
    sub_1BB872AFC(0);
    sub_1BB86EB84();
    sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
    sub_1BB87420C();
    sub_1BB872AFC(v4);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(".formatCodingVersionInfo");
  }
  sub_1BB87420C();
  sub_1BB872AFC(v5);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_1BA9FC80C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA9FC838 + 4 * byte_1BB88EC30[*v0]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_1BA9FC838()
{
  return 0x7461636572706564;
}

uint64_t sub_1BA9FC858()
{
  return 0x6D6563616C706572;
}

uint64_t sub_1BA9FC878()
{
  return 0x6150676E69646F63;
}

uint64_t sub_1BA9FC894()
{
  return 0x65727574616566;
}

uint64_t sub_1BA9FC8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA00B2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA9FC8D0()
{
  sub_1BA9FDE30();
  return sub_1BB874710();
}

uint64_t sub_1BA9FC8F8()
{
  sub_1BA9FDE30();
  return sub_1BB87471C();
}

uint64_t FormatDeprecationWarning.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  sub_1BA4CDF6C(0, &qword_1EF2ACD70, (uint64_t (*)(void))sub_1BA9FDE30, (uint64_t)&type metadata for FormatDeprecationWarning.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9FDE30();
  sub_1BB8746C8();
  v14 = 0;
  sub_1BB86EB84();
  sub_1BA4A2870(&qword_1ED39C370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DD8]);
  sub_1BB8741AC();
  if (!v1)
  {
    type metadata accessor for FormatDeprecationWarning(0);
    v13 = 1;
    sub_1BB8741AC();
    v12 = 2;
    sub_1BB87411C();
    v11 = 3;
    sub_1BB86DE58();
    sub_1BA4A2870(&qword_1EF2ACD80, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], MEMORY[0x1E0DB33A0]);
    sub_1BB87414C();
    v10 = 4;
    sub_1BB87411C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FormatDeprecationWarning.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t *v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v41 = a2;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v42 = (char *)&v39 - v4;
  v5 = sub_1BB86EB84();
  v6 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v45 = v6;
  MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v39 - v9;
  sub_1BA4CDF6C(0, &qword_1EF2ACD88, (uint64_t (*)(void))sub_1BA9FDE30, (uint64_t)&type metadata for FormatDeprecationWarning.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v46 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - v12;
  v14 = type metadata accessor for FormatDeprecationWarning(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v16[*(int *)(v17 + 24)];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v52 = (uint64_t *)v18;
  v19 = (uint64_t)&v16[*(int *)(v17 + 28)];
  v20 = sub_1BB86DE58();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v49 = v19;
  v21(v19, 1, 1, v20);
  v22 = &v16[*(int *)(v14 + 32)];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v50 = v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA9FDE30();
  v48 = v13;
  v23 = (uint64_t)v51;
  sub_1BB87468C();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v26 = v49;
    swift_bridgeObjectRelease();
    sub_1BA6ED6EC(v26, (uint64_t)&qword_1EF2ACD68, (uint64_t)MEMORY[0x1E0DB3390], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v40 = v11;
    v24 = v45;
    v51 = a1;
    v57 = 0;
    sub_1BA4A2870(&qword_1ED3B0918, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF0]);
    v25 = v44;
    sub_1BB8740D4();
    v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27(v16, v47, v25);
    v56 = 1;
    v28 = v43;
    sub_1BB8740D4();
    v27(&v16[*(int *)(v14 + 20)], v28, v25);
    v55 = 2;
    v29 = v46;
    v30 = sub_1BB87402C();
    v47 = 0;
    v31 = v52;
    *v52 = v30;
    v31[1] = v32;
    v54 = 3;
    sub_1BA4A2870(&qword_1EF2ACD90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], MEMORY[0x1E0DB33B0]);
    v33 = (uint64_t)v42;
    sub_1BB874068();
    sub_1BA9FD288(v33, v49, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
    v53 = 4;
    v34 = sub_1BB87402C();
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v29);
    v37 = (uint64_t *)v50;
    swift_bridgeObjectRelease();
    *v37 = v34;
    v37[1] = v36;
    sub_1BA4C2DD8((uint64_t)v16, v41, type metadata accessor for FormatDeprecationWarning);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return sub_1BA4A2E80((uint64_t)v16, type metadata accessor for FormatDeprecationWarning);
  }
}

uint64_t sub_1BA9FD074@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatDeprecationWarning.init(from:)(a1, a2);
}

uint64_t sub_1BA9FD088(_QWORD *a1)
{
  return FormatDeprecationWarning.encode(to:)(a1);
}

uint64_t FormatVersioningError.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  sub_1BB873CB4();
  sub_1BB872AFC("' is deprecated as of ");
  FormatVersioningError.errorDescription.getter();
  sub_1BB872A48();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v0);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v1);
  FormatVersioningError.readableCodingPath.getter();
  sub_1BB872AFC((_QWORD *)0xE300000000000000);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v2);
  return 0;
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

uint64_t sub_1BA9FD1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4B07F0(0, &qword_1ED3C7A78, type metadata accessor for FormatVersionInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA9FD21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatVersionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FormatVersioningError(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2ACE78);
}

uint64_t type metadata accessor for FormatDeprecationWarning(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2ACF10);
}

uint64_t sub_1BA9FD288(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BA4B07F0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BA9FD2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char v64;
  uint64_t (*v65)(_QWORD);
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  v4 = sub_1BB86EB84();
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  MEMORY[0x1E0C80A78](v4);
  v78 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v79 = (char *)&v73 - v7;
  MEMORY[0x1E0C80A78](v8);
  v80 = (char *)&v73 - v9;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v73 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v73 - v14;
  v16 = type metadata accessor for FormatVersionRequirement.Value(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v73 - v20;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v73 - v23;
  sub_1BAA00DC0();
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v73 + *(int *)(v27 + 48) - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v30 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v29, (uint64_t)v30, type metadata accessor for FormatVersionRequirement.Value);
  sub_1BA4C2DD8(a2, (uint64_t)v28, type metadata accessor for FormatVersionRequirement.Value);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BA4C2DD8((uint64_t)v30, (uint64_t)v21, type metadata accessor for FormatVersionRequirement.Value);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v33 = *(int *)(v32 + 48);
      v35 = *(_QWORD *)&v21[v33];
      v34 = *(_QWORD *)&v21[v33 + 8];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v36 = v30;
        v38 = *(_QWORD *)&v28[v33];
        v37 = *(_QWORD *)&v28[v33 + 8];
        v39 = v81;
        v40 = v28;
        v41 = v82;
        (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v12, v40, v82);
        v42 = sub_1BB86EB3C();
        v43 = *(void (**)(char *, uint64_t))(v39 + 8);
        v43(v21, v41);
        if ((v42 & 1) == 0)
        {
          v43(v12, v41);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v64 = 0;
LABEL_37:
          v65 = type metadata accessor for FormatVersionRequirement.Value;
          v30 = v36;
          goto LABEL_46;
        }
        if (v34)
        {
          if (v37)
          {
            if (v35 != v38 || v34 != v37)
            {
              v45 = sub_1BB874398();
              swift_bridgeObjectRelease();
              v43(v12, v41);
              swift_bridgeObjectRelease();
              v30 = v36;
              if ((v45 & 1) == 0)
                goto LABEL_44;
              goto LABEL_43;
            }
            swift_bridgeObjectRelease();
            v43(v12, v41);
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
          v43(v12, v41);
        }
        else
        {
          v43(v12, v41);
          if (!v37)
          {
LABEL_36:
            v64 = 1;
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease();
        v30 = v36;
LABEL_44:
        v64 = 0;
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v82);
      goto LABEL_24;
    }
    v77 = v30;
    sub_1BA4C2DD8((uint64_t)v30, (uint64_t)v18, type metadata accessor for FormatVersionRequirement.Value);
    sub_1BA6F3F88();
    v47 = *(int *)(v46 + 48);
    v48 = &v18[v47];
    v49 = *(int *)(v46 + 64);
    v51 = *(_QWORD *)&v18[v49];
    v50 = *(_QWORD *)&v18[v49 + 8];
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      swift_bridgeObjectRelease();
      v66 = v82;
      v67 = *(void (**)(char *, uint64_t))(v81 + 8);
      v67(v48, v82);
      v67(v18, v66);
      v64 = 0;
      v65 = (uint64_t (*)(_QWORD))sub_1BAA00DC0;
LABEL_30:
      v30 = v77;
      goto LABEL_46;
    }
    v76 = v50;
    v52 = &v28[v47];
    v53 = *(_QWORD *)&v28[v49];
    v54 = *(_QWORD *)&v28[v49 + 8];
    v74 = v51;
    v75 = v53;
    v56 = v80;
    v55 = v81;
    v57 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    v58 = v28;
    v59 = v82;
    v57(v80, v58, v82);
    v60 = v79;
    v57(v79, v48, v59);
    v61 = v78;
    v57(v78, v52, v59);
    LOBYTE(v52) = sub_1BB86EB3C();
    v62 = *(void (**)(char *, uint64_t))(v55 + 8);
    v62(v18, v59);
    if ((v52 & 1) == 0 || (v63 = v75, (sub_1BB86EB3C() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62(v61, v59);
      v62(v60, v59);
      v62(v56, v59);
      v64 = 0;
LABEL_29:
      v65 = type metadata accessor for FormatVersionRequirement.Value;
      goto LABEL_30;
    }
    if (v76)
    {
      if (v54)
      {
        if (v74 != v63 || v76 != v54)
        {
          v71 = sub_1BB874398();
          swift_bridgeObjectRelease();
          v62(v61, v59);
          v62(v60, v59);
          v62(v56, v59);
          swift_bridgeObjectRelease();
          v30 = v77;
          if ((v71 & 1) != 0)
          {
LABEL_43:
            v64 = 1;
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        swift_bridgeObjectRelease();
        v62(v61, v59);
        v62(v60, v59);
        v62(v56, v59);
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      v62(v61, v59);
      v62(v60, v59);
      v62(v56, v59);
      swift_bridgeObjectRelease();
    }
    else
    {
      v62(v61, v59);
      v62(v60, v59);
      v62(v56, v59);
      if (!v54)
      {
LABEL_39:
        v64 = 1;
        goto LABEL_29;
      }
    }
    v30 = v77;
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  sub_1BA4C2DD8((uint64_t)v30, (uint64_t)v24, type metadata accessor for FormatVersionRequirement.Value);
  if (!swift_getEnumCaseMultiPayload())
  {
    v68 = v81;
    v69 = v82;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v15, v28, v82);
    v64 = sub_1BB86EB3C();
    v70 = *(void (**)(char *, uint64_t))(v68 + 8);
    v70(v15, v69);
    v70(v24, v69);
LABEL_45:
    v65 = type metadata accessor for FormatVersionRequirement.Value;
    goto LABEL_46;
  }
  (*(void (**)(char *, uint64_t))(v81 + 8))(v24, v82);
LABEL_24:
  v64 = 0;
  v65 = (uint64_t (*)(_QWORD))sub_1BAA00DC0;
LABEL_46:
  sub_1BA4A2E80((uint64_t)v30, v65);
  return v64 & 1;
}

uint64_t _s8NewsFeed24FormatDeprecationWarningV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)(void);
  uint64_t (*v36)(void);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v4 = sub_1BB86DE58();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA01054();
  v10 = v9;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v47 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v47 - v20;
  if ((sub_1BB86EB3C() & 1) == 0)
    return 0;
  v49 = v8;
  v50 = v4;
  v51 = v6;
  v52 = v12;
  v22 = (int *)type metadata accessor for FormatDeprecationWarning(0);
  if ((sub_1BB86EB3C() & 1) == 0)
    return 0;
  v23 = v22[6];
  v24 = (_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a1 + v23 + 8);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  if (!v25)
  {
    if (v27)
      return 0;
    goto LABEL_10;
  }
  if (!v27)
    return 0;
  if (*v24 == *v26 && v25 == v27 || (v28 = sub_1BB874398(), result = 0, (v28 & 1) != 0))
  {
LABEL_10:
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390];
    sub_1BA5E01A4(a1 + v22[7], (uint64_t)v21, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
    sub_1BA5E01A4(a2 + v22[7], (uint64_t)v18, (unint64_t *)&qword_1EF2ACD68, v30);
    v31 = (uint64_t)v52;
    v32 = (uint64_t)&v52[*(int *)(v10 + 48)];
    sub_1BA5E01A4((uint64_t)v21, (uint64_t)v52, (unint64_t *)&qword_1EF2ACD68, v30);
    v48 = v32;
    sub_1BA5E01A4((uint64_t)v18, v32, (unint64_t *)&qword_1EF2ACD68, v30);
    v33 = v50;
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    if (v34(v31, 1, v50) == 1)
    {
      v35 = MEMORY[0x1E0DB3390];
      sub_1BA6ED6EC((uint64_t)v18, (uint64_t)&qword_1EF2ACD68, (uint64_t)MEMORY[0x1E0DB3390], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
      sub_1BA6ED6EC((uint64_t)v21, (uint64_t)&qword_1EF2ACD68, (uint64_t)v35, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
      if (v34(v48, 1, v33) == 1)
      {
        sub_1BA6ED6EC((uint64_t)v52, (uint64_t)&qword_1EF2ACD68, (uint64_t)MEMORY[0x1E0DB3390], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
LABEL_17:
        v42 = v22[8];
        v43 = (_QWORD *)(a1 + v42);
        v44 = *(_QWORD *)(a1 + v42 + 8);
        v45 = (_QWORD *)(a2 + v42);
        v46 = v45[1];
        if (v44)
        {
          if (v46 && (*v43 == *v45 && v44 == v46 || (sub_1BB874398() & 1) != 0))
            return 1;
        }
        else if (!v46)
        {
          return 1;
        }
        return 0;
      }
    }
    else
    {
      sub_1BA5E01A4(v31, (uint64_t)v15, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390]);
      if (v34(v48, 1, v33) != 1)
      {
        v37 = v51;
        v38 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v49, v48, v33);
        sub_1BA4A2870(qword_1EF2AD048, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], MEMORY[0x1E0DB33A8]);
        LODWORD(v48) = sub_1BB872958();
        v39 = *(void (**)(char *, uint64_t))(v37 + 8);
        v39(v38, v33);
        v40 = (uint64_t)v18;
        v41 = MEMORY[0x1E0DB3390];
        sub_1BA6ED6EC(v40, (uint64_t)&qword_1EF2ACD68, (uint64_t)MEMORY[0x1E0DB3390], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        sub_1BA6ED6EC((uint64_t)v21, (uint64_t)&qword_1EF2ACD68, (uint64_t)v41, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        v39(v15, v33);
        sub_1BA6ED6EC((uint64_t)v52, (uint64_t)&qword_1EF2ACD68, (uint64_t)v41, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        if ((v48 & 1) == 0)
          return 0;
        goto LABEL_17;
      }
      v36 = MEMORY[0x1E0DB3390];
      sub_1BA6ED6EC((uint64_t)v18, (uint64_t)&qword_1EF2ACD68, (uint64_t)MEMORY[0x1E0DB3390], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
      sub_1BA6ED6EC((uint64_t)v21, (uint64_t)&qword_1EF2ACD68, (uint64_t)v36, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v33);
    }
    sub_1BA4A2E80((uint64_t)v52, (uint64_t (*)(_QWORD))sub_1BAA01054);
    return 0;
  }
  return result;
}

unint64_t sub_1BA9FDE30()
{
  unint64_t result;

  result = qword_1EF2ACD78;
  if (!qword_1EF2ACD78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F11C, &type metadata for FormatDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACD78);
  }
  return result;
}

uint64_t sub_1BA9FDE74(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(qword_1EF2ACD98, type metadata accessor for FormatVersioningError, (uint64_t)&protocol conformance descriptor for FormatVersioningError);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA9FDEB0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Dictionary<>.formatCodingVersionInfo.getter(*a1, a2);
}

uint64_t sub_1BA9FDEBC()
{
  return 0;
}

uint64_t sub_1BA9FDECC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatVersionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FormatVersioningMode(0);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = sub_1BB86EB84();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_1BB86EB84();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FormatVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for FormatVersioningMode(0);
  if (swift_getEnumCaseMultiPayload() <= 1)
  {
    v4 = sub_1BB86EB84();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1BB86EB84();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for FormatVersionInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for FormatVersioningMode(0);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = sub_1BB86EB84();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86EB84();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for FormatVersionInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, type metadata accessor for FormatVersioningMode);
    v6 = type metadata accessor for FormatVersioningMode(0);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86EB84();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_10;
  }
  if (v15)
  {
LABEL_10:
    sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_11:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FormatVersionInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for FormatVersioningMode(0);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = sub_1BB86EB84();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86EB84();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for FormatVersionInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, type metadata accessor for FormatVersioningMode);
    v6 = type metadata accessor for FormatVersioningMode(0);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86EB84();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_10;
  }
  if (v15)
  {
LABEL_10:
    sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_11:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BA9FE894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for FormatVersioningMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

void sub_1BA9FE954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for FormatVersioningMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_1BA4B07F0(0, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatVersioningError(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86EB84();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FormatVersioningError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_1BB86EB84();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatVersioningError(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatVersioningError(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FormatVersioningError(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for FormatVersioningError(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatVersioningError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatVersioningError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9FEDD8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86EB84();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatDeprecationWarning(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86EB84();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (char *)a1 + v10;
    v15 = (char *)a2 + v10;
    v16 = sub_1BB86DE58();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FormatDeprecationWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1BB86EB84();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  v7 = sub_1BB86DE58();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatDeprecationWarning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (void *)(a1 + v9);
  v14 = (const void *)(a2 + v9);
  v15 = sub_1BB86DE58();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatDeprecationWarning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_1BB86DE58();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FormatDeprecationWarning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1BB86DE58();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for FormatDeprecationWarning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = sub_1BB86DE58();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatDeprecationWarning()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9FF644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = sub_1BB86EB84();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for FormatDeprecationWarning()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA9FF720(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1BB86EB84();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return result;
    }
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BA9FF7E0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BB86EB84();
  if (v0 <= 0x3F)
  {
    sub_1BA4B07F0(319, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for FormatDeprecationWarning.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA9FF8D4 + 4 * byte_1BB88EC3A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA9FF908 + 4 * byte_1BB88EC35[v4]))();
}

uint64_t sub_1BA9FF908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9FF910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA9FF918);
  return result;
}

uint64_t sub_1BA9FF924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA9FF92CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA9FF930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA9FF938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatDeprecationWarning.CodingKeys()
{
  return &type metadata for FormatDeprecationWarning.CodingKeys;
}

uint64_t *sub_1BA9FF954(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = sub_1BB86EB84();
      v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(a1, a2, v14);
      sub_1BA6F3F88();
      v17 = v16;
      v15((uint64_t *)((char *)a1 + *(int *)(v16 + 48)), (uint64_t *)((char *)a2 + *(int *)(v16 + 48)), v14);
      v18 = *(int *)(v17 + 64);
      v19 = (uint64_t *)((char *)a1 + v18);
      v20 = (uint64_t *)((char *)a2 + v18);
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_1BB86EB84();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v9 = *(int *)(v8 + 48);
      v10 = (uint64_t *)((char *)a1 + v9);
      v11 = (uint64_t *)((char *)a2 + v9);
      v12 = v11[1];
      *v10 = *v11;
      v10[1] = v12;
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = sub_1BB86EB84();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BA9FFAD0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v4 = sub_1BB86EB84();
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v5(a1, v4);
      sub_1BA6F3F88();
      v5(a1 + *(int *)(v6 + 48), v4);
      return swift_bridgeObjectRelease();
    case 1:
      v7 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      return swift_bridgeObjectRelease();
    case 0:
      v3 = sub_1BB86EB84();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t sub_1BA9FFBC8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, type metadata accessor for FormatVersionRequirement.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_1BB86EB84();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_1BA6F3F88();
      v11 = v10;
      v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
      v7 = *(int *)(v11 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v14 = sub_1BB86EB84();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        goto LABEL_8;
      }
      v5 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v7 = *(int *)(v6 + 48);
    }
    v12 = (_QWORD *)(a1 + v7);
    v13 = (_QWORD *)(a2 + v7);
    *v12 = *v13;
    v12[1] = v13[1];
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BA9FFD18(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = sub_1BB86EB84();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    sub_1BA6F3F88();
    v11 = v10;
    v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
    v7 = *(int *)(v11 + 64);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      v12 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      goto LABEL_7;
    }
    v5 = sub_1BB86EB84();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
    v7 = *(int *)(v6 + 48);
  }
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1BA9FFE3C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, type metadata accessor for FormatVersionRequirement.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_1BB86EB84();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
      v9(a1, a2, v8);
      sub_1BA6F3F88();
      v11 = v10;
      v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
      v7 = *(int *)(v11 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v12 = sub_1BB86EB84();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        goto LABEL_8;
      }
      v5 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v7 = *(int *)(v6 + 48);
    }
    *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
LABEL_8:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *sub_1BA9FFF78(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for FormatVersionRequirement.Value(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = sub_1BB86EB84();
      v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(a1, a2, v13);
      sub_1BA6F3F88();
      v16 = v15;
      v14((uint64_t *)((char *)a1 + *(int *)(v15 + 48)), (uint64_t *)((char *)a2 + *(int *)(v15 + 48)), v13);
      v17 = *(int *)(v16 + 64);
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = sub_1BB86EB84();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v8 = *(int *)(v7 + 48);
      v9 = (uint64_t *)((char *)a1 + v8);
      v10 = (uint64_t *)((char *)a2 + v8);
      v11 = v10[1];
      *v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = sub_1BB86EB84();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BAA000FC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for FormatVersionRequirement.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = sub_1BB86EB84();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    sub_1BA6F3F88();
    v11 = v10;
    v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
    v7 = *(int *)(v11 + 64);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      v15 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      goto LABEL_7;
    }
    v5 = sub_1BB86EB84();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
    v7 = *(int *)(v6 + 48);
  }
  v12 = (_QWORD *)(a1 + v7);
  v13 = (_QWORD *)(a2 + v7);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1BAA00234(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, type metadata accessor for FormatVersionRequirement.Value);
    type metadata accessor for FormatVersionRequirement.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_1BB86EB84();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_1BA6F3F88();
      v11 = v10;
      v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
      v7 = *(int *)(v11 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v14 = sub_1BB86EB84();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        goto LABEL_8;
      }
      v5 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v7 = *(int *)(v6 + 48);
    }
    v12 = (_QWORD *)(a1 + v7);
    v13 = (_QWORD *)(a2 + v7);
    *v12 = *v13;
    v12[1] = v13[1];
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BAA0038C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for FormatVersionRequirement.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = sub_1BB86EB84();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    sub_1BA6F3F88();
    v11 = v10;
    v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
    v7 = *(int *)(v11 + 64);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      v12 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      goto LABEL_7;
    }
    v5 = sub_1BB86EB84();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
    v7 = *(int *)(v6 + 48);
  }
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1BAA004B8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, type metadata accessor for FormatVersionRequirement.Value);
    type metadata accessor for FormatVersionRequirement.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_1BB86EB84();
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
      v9(a1, a2, v8);
      sub_1BA6F3F88();
      v11 = v10;
      v9(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v8);
      v7 = *(int *)(v11 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v12 = sub_1BB86EB84();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        goto LABEL_8;
      }
      v5 = sub_1BB86EB84();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      sub_1BAA00E84(0, (unint64_t *)&qword_1EF2A98B0);
      v7 = *(int *)(v6 + 48);
    }
    *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
LABEL_8:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BAA005FC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA00608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_5Tm(a1, a2, a3, type metadata accessor for FormatVersionRequirement.Value);
}

uint64_t sub_1BAA00614()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA00620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_6Tm(a1, a2, a3, a4, type metadata accessor for FormatVersionRequirement.Value);
}

uint64_t sub_1BAA0062C()
{
  return sub_1BA4A2870(&qword_1EF2ACF80, type metadata accessor for FormatVersionRequirement, (uint64_t)&unk_1BB88EF24);
}

uint64_t sub_1BAA00658(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3D0B40, type metadata accessor for FormatVersionRequirement, (uint64_t)&unk_1BB88F0F4);
  a1[2] = sub_1BA4A2870(&qword_1EF2ACF88, type metadata accessor for FormatVersionRequirement, (uint64_t)&unk_1BB88EEBC);
  result = sub_1BA4A2870(&qword_1EF2ACF80, type metadata accessor for FormatVersionRequirement, (uint64_t)&unk_1BB88EF24);
  a1[3] = result;
  return result;
}

uint64_t sub_1BAA006D0()
{
  return sub_1BA4A2870(&qword_1EF2ACF90, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EFF8);
}

uint64_t sub_1BAA006FC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1EF2ACF98, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EF90);
  a1[2] = sub_1BA4A2870(&qword_1EF2ACFA0, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EF68);
  result = sub_1BA4A2870(&qword_1EF2ACF90, type metadata accessor for FormatVersionRequirement.Value, (uint64_t)&unk_1BB88EFF8);
  a1[3] = result;
  return result;
}

unint64_t sub_1BAA00778()
{
  unint64_t result;

  result = qword_1EF2ACFA8;
  if (!qword_1EF2ACFA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F0CC, &type metadata for FormatDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACFA8);
  }
  return result;
}

unint64_t sub_1BAA007C0()
{
  unint64_t result;

  result = qword_1EF2ACFB0;
  if (!qword_1EF2ACFB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F03C, &type metadata for FormatDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACFB0);
  }
  return result;
}

unint64_t sub_1BAA00808()
{
  unint64_t result;

  result = qword_1EF2ACFB8;
  if (!qword_1EF2ACFB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F064, &type metadata for FormatDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACFB8);
  }
  return result;
}

uint64_t sub_1BAA0084C()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1BAA00894(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7461636572706564 && a2 == 0xEA00000000006465;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BAA009A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6375646F72746E69 && a2 == 0xEA00000000006465;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461636572706564 && a2 == 0xEA00000000006465 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BAA00B2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461636572706564 && a2 == 0xEC0000006E496465 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6150676E69646F63 && a2 == 0xEA00000000006874 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65727574616566 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_1BAA00D7C()
{
  unint64_t result;

  result = qword_1EF2ACFC8;
  if (!qword_1EF2ACFC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F47C, &type metadata for FormatVersionRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ACFC8);
  }
  return result;
}

void sub_1BAA00DC0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2ACFD0)
  {
    type metadata accessor for FormatVersionRequirement.Value(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2ACFD0);
  }
}

void sub_1BAA00E20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2ACFD8)
  {
    sub_1BAA00E84(255, &qword_1EF2ACFE0);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2ACFD8);
  }
}

void sub_1BAA00E84(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    sub_1BB86EB84();
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1BAA00F0C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2ACFE8)
  {
    sub_1BB86EB84();
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2ACFE8);
  }
}

uint64_t type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2AD1C8);
}

uint64_t type metadata accessor for FormatVersionRequirement.DeprecatedRequirement(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2AD138);
}

uint64_t type metadata accessor for FormatVersionRequirement.IntroducedRequirement(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2AD0A8);
}

unint64_t sub_1BAA00FCC()
{
  unint64_t result;

  result = qword_1EF2ACFF8;
  if (!qword_1EF2ACFF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F454, &type metadata for FormatVersionRequirement.Value.CodingType);
    atomic_store(result, (unint64_t *)&qword_1EF2ACFF8);
  }
  return result;
}

unint64_t sub_1BAA01010()
{
  unint64_t result;

  result = qword_1EF2AD018;
  if (!qword_1EF2AD018)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F3B4, &type metadata for FormatVersionRequirement.Value.CodingType);
    atomic_store(result, (unint64_t *)&qword_1EF2AD018);
  }
  return result;
}

void sub_1BAA01054()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2AD040)
  {
    sub_1BA4B07F0(255, (unint64_t *)&qword_1EF2ACD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3390], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2AD040);
  }
}

uint64_t sub_1BAA010CC()
{
  return sub_1BB87465C();
}

ValueMetadata *type metadata accessor for FormatVersionRequirement.Value.CodingType()
{
  return &type metadata for FormatVersionRequirement.Value.CodingType;
}

uint64_t sub_1BAA01104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86EB84();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1BAA01140(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1BAA01174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BAA011B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BAA011FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BAA01240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BAA01284()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA01290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_5Tm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0DB4DC8]);
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t sub_1BAA012D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA012E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_6Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0DB4DC8]);
}

uint64_t __swift_store_extra_inhabitant_index_6Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_1BAA01330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BAA0133C(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
}

uint64_t sub_1BAA0133C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BAA013A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86EB84();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BAA01438(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BAA01480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BAA014E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BAA01564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1BAA015C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BAA0162C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA01638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1BB86EB84();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1BAA016C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA016D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BB86EB84();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_1BAA0174C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86EB84();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BAA017BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86EB84();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BAA01870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_1BB86EB84();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BAA018D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BAA0195C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BAA019F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1BAA01A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BAA01B00()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1BB86EB84();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1BAA01B9C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BB86EB84();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_1BAA01C28()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86EB84();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatVersionRequirement.CodingKeys()
{
  return &type metadata for FormatVersionRequirement.CodingKeys;
}

unint64_t sub_1BAA01CB4()
{
  unint64_t result;

  result = qword_1EF2AD208;
  if (!qword_1EF2AD208)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F274, &type metadata for FormatVersionRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD208);
  }
  return result;
}

unint64_t sub_1BAA01CFC()
{
  unint64_t result;

  result = qword_1EF2AD210;
  if (!qword_1EF2AD210)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F314, &type metadata for FormatVersionRequirement.Value.CodingType);
    atomic_store(result, (unint64_t *)&qword_1EF2AD210);
  }
  return result;
}

unint64_t sub_1BAA01D44()
{
  unint64_t result;

  result = qword_1EF2AD218;
  if (!qword_1EF2AD218)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F1E4, &type metadata for FormatVersionRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD218);
  }
  return result;
}

unint64_t sub_1BAA01D8C()
{
  unint64_t result;

  result = qword_1EF2AD220;
  if (!qword_1EF2AD220)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F20C, &type metadata for FormatVersionRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD220);
  }
  return result;
}

unint64_t sub_1BAA01DD0()
{
  unint64_t result;

  result = qword_1EF2AD228;
  if (!qword_1EF2AD228)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F2DC, &type metadata for FormatVersionRequirement.Value.CodingType);
    atomic_store(result, (unint64_t *)&qword_1EF2AD228);
  }
  return result;
}

unint64_t sub_1BAA01E14()
{
  unint64_t result;

  result = qword_1EF2AD238;
  if (!qword_1EF2AD238)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F794, &type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD238);
  }
  return result;
}

unint64_t sub_1BAA01E58()
{
  unint64_t result;

  result = qword_1EF2AD248;
  if (!qword_1EF2AD248)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F744, &type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD248);
  }
  return result;
}

unint64_t sub_1BAA01E9C()
{
  unint64_t result;

  result = qword_1EF2AD258;
  if (!qword_1EF2AD258)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F6F4, &type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD258);
  }
  return result;
}

uint64_t _s8NewsFeed24FormatVersionRequirementV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BAA01F20 + 4 * byte_1BB88EC3F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BAA01F40 + 4 * byte_1BB88EC44[v4]))();
}

_BYTE *sub_1BAA01F20(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BAA01F40(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA01F48(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA01F50(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA01F58(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA01F60(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatVersionRequirement.IntroducedRequirement.CodingKeys()
{
  return &type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FormatVersionRequirement.DeprecatedRequirement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BAA01FC8 + 4 * byte_1BB88EC4E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BAA01FFC + 4 * byte_1BB88EC49[v4]))();
}

uint64_t sub_1BAA01FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA02004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA0200CLL);
  return result;
}

uint64_t sub_1BAA02018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA02020);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BAA02024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA0202C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatVersionRequirement.DeprecatedRequirement.CodingKeys()
{
  return &type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys;
}

uint64_t _s8NewsFeed24FormatVersionRequirementV5ValueO10CodingTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BAA02094 + 4 * byte_1BB88EC58[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BAA020C8 + 4 * byte_1BB88EC53[v4]))();
}

uint64_t sub_1BAA020C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA020D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA020D8);
  return result;
}

uint64_t sub_1BAA020E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA020ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BAA020F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA020F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys()
{
  return &type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys;
}

unint64_t sub_1BAA02118()
{
  unint64_t result;

  result = qword_1EF2AD278;
  if (!qword_1EF2AD278)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F55C, &type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD278);
  }
  return result;
}

unint64_t sub_1BAA02160()
{
  unint64_t result;

  result = qword_1EF2AD280;
  if (!qword_1EF2AD280)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F614, &type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD280);
  }
  return result;
}

unint64_t sub_1BAA021A8()
{
  unint64_t result;

  result = qword_1EF2AD288;
  if (!qword_1EF2AD288)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F6CC, &type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD288);
  }
  return result;
}

unint64_t sub_1BAA021F0()
{
  unint64_t result;

  result = qword_1EF2AD290;
  if (!qword_1EF2AD290)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F63C, &type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD290);
  }
  return result;
}

unint64_t sub_1BAA02238()
{
  unint64_t result;

  result = qword_1EF2AD298;
  if (!qword_1EF2AD298)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F664, &type metadata for FormatVersionRequirement.IntroducedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD298);
  }
  return result;
}

unint64_t sub_1BAA02280()
{
  unint64_t result;

  result = qword_1EF2AD2A0;
  if (!qword_1EF2AD2A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F584, &type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2A0);
  }
  return result;
}

unint64_t sub_1BAA022C8()
{
  unint64_t result;

  result = qword_1EF2AD2A8;
  if (!qword_1EF2AD2A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F5AC, &type metadata for FormatVersionRequirement.DeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2A8);
  }
  return result;
}

unint64_t sub_1BAA02310()
{
  unint64_t result;

  result = qword_1EF2AD2B0;
  if (!qword_1EF2AD2B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F4CC, &type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2B0);
  }
  return result;
}

unint64_t sub_1BAA02358()
{
  unint64_t result;

  result = qword_1EF2AD2B8;
  if (!qword_1EF2AD2B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F4F4, &type metadata for FormatVersionRequirement.IntroducedThenDeprecatedRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2B8);
  }
  return result;
}

unint64_t sub_1BAA023A0(uint64_t a1)
{
  unint64_t result;

  result = 0x696E692D72657375;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x682D697261666173;
      break;
    case 2:
    case 3:
      result = 0xD000000000000012;
      break;
    case 4:
      result = 0xD000000000000013;
      break;
    case 5:
      result = 0xD000000000000017;
      break;
    case 6:
      result = 0x6B6361626C6C6166;
      break;
    case 7:
      result = 0x2D746C7561666564;
      break;
    case 8:
      result = 0x7469617274726F70;
      break;
    case 9:
      result = 0x6E6F697461636F6CLL;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t PuzzleStatsState.environment.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PuzzleStatsState.cumulativeStats.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PuzzleStatsState.lastProcessedDate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PuzzleStatsState.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PuzzleStatsState() + 28);
  v4 = sub_1BB86C8B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PuzzleStatsState.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1BB873CB4();
  sub_1BB872AFC(0);
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v0);
  swift_bridgeObjectRelease();
  sub_1BB872AFC("external-app-usage");
  swift_bridgeObjectRetain();
  sub_1BB872778();
  sub_1BB872AFC(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(" cumulativeStats: ");
  sub_1BB86C8B0();
  swift_bridgeObjectRetain();
  sub_1BB872778();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v3);
  type metadata accessor for PuzzleStatsState();
  sub_1BA629A0C((unint64_t *)&qword_1ED3B0530, MEMORY[0x1E0CB08F0]);
  sub_1BB87420C();
  sub_1BB872AFC(v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BAA0275C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA02D04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BAA02780()
{
  sub_1BA5D2960();
  return sub_1BB874710();
}

uint64_t sub_1BAA027A8()
{
  sub_1BA5D2960();
  return sub_1BB87471C();
}

uint64_t *initializeBufferWithCopyOfBuffer for PuzzleStatsState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1BB86C8B0();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

_QWORD *assignWithCopy for PuzzleStatsState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C8B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PuzzleStatsState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1BB86C8B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_1BAA02998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BB86C8B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1BAA02A14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BB86C8B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatsState.CodingKeys()
{
  return &type metadata for PuzzleStatsState.CodingKeys;
}

unint64_t sub_1BAA02A9C()
{
  unint64_t result;

  result = qword_1EF2AD2C0;
  if (!qword_1EF2AD2C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F95C, &type metadata for PuzzleStatsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2C0);
  }
  return result;
}

uint64_t sub_1BAA02AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v31 = a2;
  v9 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v30 - v18;
  v33 = v5[3];
  v20 = a1;
  v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v21((char *)&v30 - v18, v20, v9, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v19, 1, v9) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    sub_1BAA494B0(v31, a3, (uint64_t)v15);
    swift_bridgeObjectRelease();
    sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    v22 = v33;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = v23;
    sub_1BB4BEDAC((uint64_t)v12, v31, a3, isUniquelyReferenced_nonNull_native);
    v22 = v32;
    v33 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v26 = *v5;
  v25 = v5[1];
  v27 = v5[2];
  v28 = type metadata accessor for PuzzleStatsState();
  ((void (*)(char *, char *, uint64_t))v21)((char *)a4 + *(int *)(v28 + 28), (char *)v5 + *(int *)(v28 + 28), v9);
  *a4 = v26;
  a4[1] = v25;
  a4[2] = v27;
  a4[3] = v22;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BAA02D04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D6E6F7269766E65 && a2 == 0xEB00000000746E65;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974616C756D7563 && a2 == 0xEF73746174536576 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB966EC0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t GenericDataVisualizationResponseItem.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericDataVisualizationResponseItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  sub_1BAA03294(0, &qword_1EF2AD2C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA030FC();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = 0;
  v10 = sub_1BB874098();
  v12 = v11;
  type metadata accessor for WebEmbedDataVisualizationURLDataSource();
  v16 = 1;
  sub_1BAA03360(&qword_1ED3AA680, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualizationURLDataSource);
  swift_bridgeObjectRetain();
  v13 = sub_1BB874014();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1BAA030FC()
{
  unint64_t result;

  result = qword_1EF2AD2D0;
  if (!qword_1EF2AD2D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FB58, &type metadata for GenericDataVisualizationResponseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2D0);
  }
  return result;
}

uint64_t GenericDataVisualizationResponseItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  char v15;

  sub_1BAA03294(0, &qword_1EF2AD2D8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v13 - v6;
  v13[0] = *(_QWORD *)(v1 + 16);
  v8 = a1[3];
  v9 = a1;
  v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_1BAA030FC();
  sub_1BB8746C8();
  v15 = 0;
  sub_1BB87417C();
  if (!v2)
  {
    v13[1] = v13[0];
    v14 = 1;
    sub_1BA865434(0);
    sub_1BAA032F0();
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v11);
}

void sub_1BAA03294(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BAA030FC();
    v7 = a3(a1, &type metadata for GenericDataVisualizationResponseItem.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BAA032F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED3AB080;
  if (!qword_1ED3AB080)
  {
    sub_1BA865434(255);
    v2 = v1;
    v3 = sub_1BAA03360((unint64_t *)&unk_1ED3AA670, (uint64_t)&protocol conformance descriptor for WebEmbedDataVisualizationURLDataSource);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3AB080);
  }
  return result;
}

uint64_t sub_1BAA03360(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for WebEmbedDataVisualizationURLDataSource();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BAA033A0()
{
  _BYTE *v0;

  if (*v0)
    return 0x53617461446C7275;
  else
    return 0x696669746E656469;
}

uint64_t sub_1BAA033EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA0363C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BAA03410()
{
  sub_1BAA030FC();
  return sub_1BB874710();
}

uint64_t sub_1BAA03438()
{
  sub_1BAA030FC();
  return sub_1BB87471C();
}

uint64_t sub_1BAA03460@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GenericDataVisualizationResponseItem.init(from:)(a1, a2);
}

uint64_t sub_1BAA03474(_QWORD *a1)
{
  return GenericDataVisualizationResponseItem.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for GenericDataVisualizationResponseItem()
{
  return &type metadata for GenericDataVisualizationResponseItem;
}

uint64_t storeEnumTagSinglePayload for GenericDataVisualizationResponseItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BAA034E4 + 4 * byte_1BB88F9E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BAA03518 + 4 * byte_1BB88F9E0[v4]))();
}

uint64_t sub_1BAA03518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA03520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA03528);
  return result;
}

uint64_t sub_1BAA03534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA0353CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BAA03540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA03548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericDataVisualizationResponseItem.CodingKeys()
{
  return &type metadata for GenericDataVisualizationResponseItem.CodingKeys;
}

unint64_t sub_1BAA03568()
{
  unint64_t result;

  result = qword_1EF2AD2E0;
  if (!qword_1EF2AD2E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FB30, &type metadata for GenericDataVisualizationResponseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2E0);
  }
  return result;
}

unint64_t sub_1BAA035B0()
{
  unint64_t result;

  result = qword_1EF2AD2E8;
  if (!qword_1EF2AD2E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FAA0, &type metadata for GenericDataVisualizationResponseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2E8);
  }
  return result;
}

unint64_t sub_1BAA035F8()
{
  unint64_t result;

  result = qword_1EF2AD2F0;
  if (!qword_1EF2AD2F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FAC8, &type metadata for GenericDataVisualizationResponseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2F0);
  }
  return result;
}

uint64_t sub_1BAA0363C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x53617461446C7275 && a2 == 0xEE0073656372756FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t FeedGroupKind.description.getter()
{
  _QWORD *v0;
  unint64_t result;
  _QWORD *v2;

  result = 7364935;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
    case 2:
      result = 0x656E696C64616548;
      break;
    case 3:
      result = 0x5320736575737349;
      break;
    case 4:
      result = 0x4720736575737349;
      break;
    case 5:
      result = 0xD000000000000013;
      break;
    case 6:
      result = 0xD000000000000010;
      break;
    case 7:
      result = 25665;
      break;
    case 8:
      result = 0x69726F6765746143;
      break;
    case 9:
      result = 0x656D656761676E45;
      break;
    case 0xALL:
      result = 0x6E6967756C50;
      break;
    default:
      swift_retain();
      sub_1BB873CB4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BB872AFC(v2);
      swift_release();
      swift_bridgeObjectRelease();
      result = 0x472074616D726F46;
      break;
  }
  return result;
}

unint64_t destroy for FeedGroupKind(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s8NewsFeed13FeedGroupKindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for FeedGroupKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_retain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FeedGroupKind(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedGroupKind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF4 && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 2147483637);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 10;
  if (v4 >= 0xC)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FeedGroupKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF5)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 10;
  }
  return result;
}

ValueMetadata *type metadata accessor for A18_V15()
{
  return &type metadata for A18_V15;
}

uint64_t sub_1BAA03BDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2AD430, (uint64_t (*)(void))sub_1BAA066CC, (uint64_t)&type metadata for A18_V15.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA066CC();
  sub_1BB8746C8();
  v10 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v10;
  v13 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA4A2870(&qword_1EF2A9A18, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    *(_QWORD *)&v12[0] = *(_QWORD *)(v3 + 32);
    v13 = 1;
    sub_1BA4C576C(0, &qword_1ED3B94A0);
    sub_1BA4DB848(&qword_1EF2A9F98, (uint64_t (*)(void))sub_1BA82F554, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BAA03D90()
{
  sub_1BAA066CC();
  return sub_1BB874710();
}

uint64_t sub_1BAA03DB8()
{
  sub_1BAA066CC();
  return sub_1BB87471C();
}

double sub_1BAA03DE0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1BAA064B8(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1BAA03E24(_QWORD *a1)
{
  return sub_1BAA03BDC(a1);
}

uint64_t sub_1BAA03E38()
{
  sub_1BAA061A0();
  return sub_1BB86D96C();
}

uint64_t sub_1BAA03EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  unsigned __int8 v67;
  ValueMetadata *v68;
  unint64_t v69;
  uint64_t v70;

  v56 = a2;
  v70 = a1;
  v47 = a3;
  v48 = sub_1BB86C8E0();
  v6 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupLayoutContext();
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  MEMORY[0x1E0C80A78](v9);
  v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - v12;
  v55 = type metadata accessor for GroupLayoutBindingContext();
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v51 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v3;
  v52 = *v3;
  v16 = (void *)*((_QWORD *)v3 + 1);
  v17 = v3[16];
  sub_1BA4C2DD8(a1, v51, v18);
  sub_1BA4C2DD8(a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA7C26A0(v16, v17);
  sub_1BB86C8D4();
  v50 = sub_1BB86C8C8();
  v49 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v48);
  v68 = &type metadata for A18_V15;
  v20 = sub_1BA8EE00C();
  v69 = v20;
  LOBYTE(v66) = v15;
  *((_QWORD *)&v66 + 1) = v16;
  v67 = v17;
  type metadata accessor for GroupLayoutKey();
  v21 = swift_allocObject();
  sub_1BA7C26A0(v16, v17);
  v60 = sub_1BB874734();
  v61 = v22;
  v64 = 95;
  v65 = 0xE100000000000000;
  v62 = 45;
  v63 = 0xE100000000000000;
  sub_1BA7114A0();
  v23 = sub_1BB873B04();
  v25 = v24;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 24) = v25;
  v26 = (uint64_t)v53;
  v27 = (uint64_t *)(v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier);
  v28 = v49;
  *v27 = v50;
  v27[1] = v28;
  sub_1BA4C010C((uint64_t)&v66, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_factory);
  v29 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings;
  sub_1BA5193C4(v51, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutBindingContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v29, 0, 1, v55);
  v30 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext;
  sub_1BA5193C4((uint64_t)v13, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v30, 0, 1, v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
  sub_1BA7C2538(v16, v17);
  v68 = &type metadata for A18_V15;
  v69 = v20;
  LOBYTE(v66) = v52;
  *((_QWORD *)&v66 + 1) = v16;
  v67 = v17;
  sub_1BA4C2DD8(v56, v26, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA7C26A0(v16, v17);
  v31 = v59;
  v32 = sub_1BA7E1F18((uint64_t)&unk_1E7254EA8, 0, 0, 0, 4, 0, 0, 0);
  if (v31)
  {
    swift_release();
    sub_1BA4A2E80(v26, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
  }
  else
  {
    v33 = v32;
    sub_1BA4B07F0(0, qword_1ED3B0E60, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FeedItemSorter);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = MEMORY[0x1E0DEE9D8];
    v35 = (_QWORD *)(v34 + 16);
    swift_beginAccess();
    v36 = *(_QWORD **)(v34 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v34 + 16) = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v36 = sub_1BA7892A0(0, v36[2] + 1, 1, v36);
      *v35 = v36;
    }
    v39 = v36[2];
    v38 = v36[3];
    if (v39 >= v38 >> 1)
    {
      v36 = sub_1BA7892A0((_QWORD *)(v38 > 1), v39 + 1, 1, v36);
      *v35 = v36;
    }
    v36[2] = v39 + 1;
    v40 = &v36[2 * v39];
    v40[4] = sub_1BACB8D7C;
    v40[5] = 0;
    swift_endAccess();
    v41 = sub_1BA7E1F18((uint64_t)&unk_1E7254ED0, 0, 0, v34, 0, 0, 0, 0);
    swift_release();
    v60 = v33;
    sub_1BA7DD6A0(v41);
    v42 = v60;
    v43 = type metadata accessor for A18_V15.Bound();
    v44 = v47;
    v47[3] = v43;
    v44[4] = sub_1BA4A2870(&qword_1EF2AD308, (uint64_t (*)(uint64_t))type metadata accessor for A18_V15.Bound, (uint64_t)&unk_1BB88FD20);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v44);
    *boxed_opaque_existential_0 = v21;
    sub_1BA4CECCC(&v66, (uint64_t)(boxed_opaque_existential_0 + 1));
    result = sub_1BA5193C4(v26, (uint64_t)boxed_opaque_existential_0 + *(int *)(v43 + 24), (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    *(uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v43 + 28)) = v42;
  }
  return result;
}

double sub_1BAA04428@<D0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[18];
  char v50[105];
  __int128 v51[2];
  __int128 v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v43 = a1;
  v3 = sub_1BB86DA38();
  v40 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for A18_V15.Bound();
  v7 = v1 + *(int *)(v6 + 24);
  v8 = type metadata accessor for GroupLayoutContext();
  v9 = *(int *)(v8 + 40);
  v10 = v7;
  v42 = v7;
  v11 = *(_QWORD *)(v7 + v9);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(double *)(v10 + *(int *)(v8 + 32));
  sub_1BA4C010C(v12 + 16, (uint64_t)v52);
  sub_1BA4C010C(v12 + 56, (uint64_t)v51);
  v14 = v13 * *(double *)(v12 + 96);
  type metadata accessor for FeedLayoutStylerFactory();
  inited = swift_initStackObject();
  sub_1BA4CECCC(v52, inited + 16);
  sub_1BA4CECCC(v51, inited + 56);
  *(double *)(inited + 96) = v14;
  v50[0] = 1;
  FeedLayoutStylerFactory.styler(withHeading:)(v50, (uint64_t *)&v53);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(inited + 16);
  __swift_destroy_boxed_opaque_existential_1(inited + 56);
  sub_1BA829A4C();
  v16 = 2;
  v17 = sub_1BB872E74();
  *(_QWORD *)(v17 + 16) = 2;
  sub_1BA4C010C((uint64_t)&v53, v17 + 32);
  sub_1BA4CECCC(&v53, v17 + 72);
  v18 = *(_QWORD *)(v11 + 16);
  sub_1BA4C010C(v18 + 16, (uint64_t)v52);
  sub_1BA4C010C(v18 + 56, (uint64_t)v51);
  v19 = v13 * *(double *)(v18 + 96);
  v20 = swift_initStackObject();
  sub_1BA4CECCC(v52, v20 + 16);
  sub_1BA4CECCC(v51, v20 + 56);
  *(double *)(v20 + 96) = v19;
  v50[0] = 2;
  FeedLayoutStylerFactory.styler(withHeading:)(v50, (uint64_t *)&v53);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v20 + 16);
  __swift_destroy_boxed_opaque_existential_1(v20 + 56);
  v21 = sub_1BA6B5B08((uint64_t)&v53, *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v6 + 28)) + 16) - 1);
  *(_QWORD *)&v53 = v17;
  sub_1BA6B5BE8(v21);
  v22 = v53;
  v49[2] = v2;
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1BACB8FF0(v23, v22, (void (*)(char *, uint64_t))sub_1BA6B5C04, (uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v24 + 16);
  if (v25 < 2)
    v16 = *(_QWORD *)(v24 + 16);
  v26 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeadlineViewLayout.Context(0) - 8) + 80);
  v27 = v24 + ((v26 + 32) & ~v26);
  v28 = (2 * v25) | 1;
  v29 = *MEMORY[0x1E0DB5D88];
  v30 = sub_1BB86D678();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v5, v29, v30);
  (*(void (**)(char *, _QWORD, _QWORD))(v40 + 104))(v5, *MEMORY[0x1E0DB6200], v41);
  v44 = v24;
  v45 = v24;
  v46 = v27;
  v47 = v16;
  v48 = v28;
  sub_1BAA0625C(0, &qword_1EF2AD3B0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB6308]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v42 = sub_1BB86DB34();
  v31 = sub_1BB86DB40();
  v41 = v53;
  v32 = v54;
  v33 = v55;
  *(_QWORD *)&v53 = v24;
  *(_QWORD *)&v52[0] = v56;
  MEMORY[0x1E0C80A78](v31);
  sub_1BA4B07F0(0, &qword_1ED3B94B8, type metadata accessor for HeadlineViewLayout.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  sub_1BA6B5AA8();
  sub_1BA6B50E4(&qword_1ED3B94A8, &qword_1ED3B94A0);
  swift_bridgeObjectRetain();
  v34 = sub_1BB86ED58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v53 = v34;
  sub_1BA4C576C(0, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B50E4((unint64_t *)&qword_1ED3B9360, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B39A0();
  v35 = sub_1BB872BBC();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v43;
  *v43 = 0;
  result = *(double *)&v41;
  *(_OWORD *)(v36 + 8) = v41;
  *((_QWORD *)v36 + 3) = v32;
  *((_QWORD *)v36 + 4) = v33;
  v38 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v36 + 5) = v35;
  *((_QWORD *)v36 + 6) = v38;
  return result;
}

uint64_t sub_1BAA0493C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)&v20[-v15];
  v26 = a1;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 18;
  *v16 = v17;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0DB63F8], v13);
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v18 = MEMORY[0x1E0DB5DD0];
  sub_1BAA0625C(0, &qword_1EF2AD3D0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BAA0621C(&qword_1EF2AD3D8, &qword_1EF2AD3D0, (uint64_t (*)(uint64_t, _QWORD *))v18, MEMORY[0x1E0DB5DD8]);
  sub_1BB86D4BC();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1BAA04ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  uint64_t (*v16)(uint64_t, _QWORD *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *);
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  void (*v34)(uint64_t *, uint64_t);
  unsigned int v35;
  void (*v36)(uint64_t);
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t *);
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  void (*v45)(uint64_t);
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v49 = a5;
  v50 = a6;
  v47 = a3;
  v48 = a4;
  v43 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (_QWORD *)((char *)v32 - v10);
  v56 = a1;
  v33 = a1;
  v12 = sub_1BB86D438();
  v13 = swift_allocBox();
  v46 = *MEMORY[0x1E0DB5A38];
  v45 = *(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 104);
  v45(v14);
  *v11 = v13;
  v44 = *MEMORY[0x1E0DB6318];
  v15 = *(void (**)(uint64_t *))(v9 + 104);
  v15(v11);
  v41 = v15;
  v16 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
  v32[1] = v17;
  sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v16, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4EC();
  v34 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
  v34(v11, v8);
  v56 = a1;
  v42 = *MEMORY[0x1E0DB6410];
  v15(v11);
  sub_1BAA062D8();
  v40 = v18;
  sub_1BA4CDF6C(0, &qword_1EF2AD3F8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 32) & ~v22;
  v39 = v23 + *(_QWORD *)(v21 + 72);
  v38 = v22 | 7;
  v24 = swift_allocObject();
  v37 = xmmword_1BB87CE70;
  *(_OWORD *)(v24 + 16) = xmmword_1BB87CE70;
  v35 = *MEMORY[0x1E0DB5C80];
  v36 = *(void (**)(uint64_t))(v21 + 104);
  v36(v24 + v23);
  v55 = v43;
  sub_1BB86D498();
  swift_bridgeObjectRelease();
  v25 = v34;
  v34(v11, v8);
  v26 = v33;
  v56 = v33;
  v27 = swift_allocBox();
  ((void (*)(uint64_t, _QWORD, uint64_t))v45)(v28, v46, v12);
  *v11 = v27;
  v29 = v41;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v41)(v11, v44, v8);
  sub_1BB86D4EC();
  v25(v11, v8);
  v56 = v26;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v29)(v11, v42, v8);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = v37;
  ((void (*)(uint64_t, _QWORD, uint64_t))v36)(v30 + v23, v35, v20);
  v51 = v47;
  v52 = v48;
  v53 = v49;
  v54 = v50;
  sub_1BB86D498();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t *, uint64_t))v25)(v11, v8);
}

uint64_t sub_1BAA04EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)&v16[-v7];
  v19 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 9;
  *v8 = v9;
  v10 = *MEMORY[0x1E0DB63F8];
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, v10, v5);
  v18 = a2;
  v12 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
  sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v12, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  v13 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v13(v8, v5);
  v19 = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 9;
  *v8 = v14;
  v11(v8, v10, v5);
  v17 = a2;
  sub_1BB86D4BC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v8, v5);
}

uint64_t sub_1BAA05094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  double v32;
  uint64_t (*v33)(uint64_t, _QWORD *);
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v36 - v19;
  v44 = a1;
  KeyPath = swift_getKeyPath();
  v22 = *MEMORY[0x1E0DB6410];
  v43 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v22, v17);
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  v36[1] = KeyPath;
  v37 = v17;
  sub_1BA4C2DD8(a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v23 = (char *)v11 + v9[5];
  v24 = *MEMORY[0x1E0DB61C8];
  v25 = sub_1BB86DA20();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  v27 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 0;
  *(_QWORD *)((char *)v11 + v9[6]) = 0;
  v28 = *v27;
  *(_QWORD *)((char *)v11 + v9[7]) = v28;
  v29 = qword_1ED3BC390;
  v30 = v28;
  if (v29 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v31 = swift_release();
  v32 = MEMORY[0x1E0C80A78](v31);
  v36[-4] = v15;
  v36[-3] = v11;
  v35 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v32);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v33 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
  sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v33, MEMORY[0x1E0DB5A18]);
  v35 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v37);
}

uint64_t sub_1BAA05490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  double v32;
  uint64_t (*v33)(uint64_t, _QWORD *);
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v36 - v19;
  v44 = a1;
  KeyPath = swift_getKeyPath();
  v22 = *MEMORY[0x1E0DB6410];
  v43 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v22, v17);
  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v36[1] = KeyPath;
  v37 = v17;
  sub_1BA4C2DD8(a2+ *(_QWORD *)(v13 + 72)+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v23 = (char *)v11 + v9[5];
  v24 = *MEMORY[0x1E0DB61C8];
  v25 = sub_1BB86DA20();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  v27 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 0;
  *(_QWORD *)((char *)v11 + v9[6]) = 0;
  v28 = *v27;
  *(_QWORD *)((char *)v11 + v9[7]) = v28;
  v29 = qword_1ED3BC390;
  v30 = v28;
  if (v29 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v31 = swift_release();
  v32 = MEMORY[0x1E0C80A78](v31);
  v36[-4] = v15;
  v36[-3] = v11;
  v35 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v32);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v33 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
  sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v33, MEMORY[0x1E0DB5A18]);
  v35 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v37);
}

void sub_1BAA05898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *);
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v26 - v13);
  v15 = type metadata accessor for HeadlineViewLayout.Context(0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a5 >> 1;
  v20 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v19 != a4 && v20 == 3)
  {
    if (v19 > a4)
    {
      v21 = *(_QWORD *)(v16 + 72);
      v28 = *MEMORY[0x1E0DB63F8];
      v26 = a2;
      swift_unknownObjectRetain();
      v29 = v21;
      v30 = v11;
      v22 = a3 + v21 * a4;
      v27 = v12;
      do
      {
        sub_1BA4C2DD8(v22, (uint64_t)v18, type metadata accessor for HeadlineViewLayout.Context);
        v31 = a1;
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = 6;
        *v14 = v23;
        v24 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v12 + 104))(v14, v28, v11);
        MEMORY[0x1E0C80A78](v24);
        v25 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
        sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
        sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v25, MEMORY[0x1E0DB5A18]);
        sub_1BB86D4BC();
        v12 = v27;
        v11 = v30;
        (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v14, v30);
        sub_1BA4A2E80((uint64_t)v18, type metadata accessor for HeadlineViewLayout.Context);
        v22 += v29;
        --v20;
      }
      while (v20);
      swift_unknownObjectRelease();
      return;
    }
LABEL_10:
    __break(1u);
  }
}

uint64_t sub_1BAA05B00(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t (*v23)(uint64_t, _QWORD *);
  _QWORD v25[2];

  v4 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4CDF6C(0, &qword_1EF2AD3C8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v25[0] = v7;
  MEMORY[0x1E0C80A78](v7);
  v11 = (_QWORD *)((char *)v25 - v10);
  v25[1] = a1;
  swift_getKeyPath();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 0x4060E00000000000;
  *v11 = v12;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DB6330], v8);
  v13 = (char *)v6 + v4[5];
  v14 = *MEMORY[0x1E0DB61C8];
  v15 = sub_1BB86DA20();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  v17 = (void *)*MEMORY[0x1E0DC4918];
  *v6 = 0;
  *(_QWORD *)((char *)v6 + v4[6]) = 0;
  *(_QWORD *)((char *)v6 + v4[7]) = v17;
  v18 = *MEMORY[0x1E0DC49E8];
  v19 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v20 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v21 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  v22 = v17;
  _s8NewsFeed18HeadlineViewLayoutV16imageOnRightSide7context7options6insets11TeaTemplate0E0CyA2C10AttributesVGAC7ContextV_AC7OptionsVSo12UIEdgeInsetsVtFZ_0(a2, (uint64_t)v6, v18, v19, v20, v21);
  sub_1BA4A2E80((uint64_t)v6, type metadata accessor for HeadlineViewLayout.Options);
  v23 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BAA0625C(0, &qword_1EF2AD3E0, MEMORY[0x1E0DB5A10]);
  sub_1BAA0621C(&qword_1EF2AD3E8, &qword_1EF2AD3E0, v23, MEMORY[0x1E0DB5A18]);
  sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t *, _QWORD))(v9 + 8))(v11, v25[0]);
}

uint64_t sub_1BAA05D8C@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[304];

  memcpy(v21, __src, sizeof(v21));
  sub_1BA640FB4();
  v10 = v9;
  v11 = swift_allocBox();
  v13 = v12;
  v14 = (void *)(v12 + *(int *)(v10 + 48));
  v15 = *(int *)(v10 + 64);
  sub_1BA4C2DD8(a3, v12, type metadata accessor for HeadlineViewLayout.Context);
  memcpy(v14, v21, 0x130uLL);
  v16 = a4 + *(int *)(type metadata accessor for A18_V15.Bound() + 24);
  result = type metadata accessor for GroupLayoutContext();
  v18 = *(_QWORD *)(v16 + *(int *)(result + 28));
  v19 = __OFADD__(v18, a2);
  v20 = v18 + a2;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + v15) = v20;
    *a5 = v11 | 0x4000000000000000;
  }
  return result;
}

uint64_t sub_1BAA05E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1BAA03EA0(a1, a2, a3);
}

uint64_t sub_1BAA05E80()
{
  return sub_1BB6909D4();
}

unint64_t sub_1BAA05E90(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BAA05EBC();
  result = sub_1BAA05F00();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BAA05EBC()
{
  unint64_t result;

  result = qword_1EF2AD2F8;
  if (!qword_1EF2AD2F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FC6C, &type metadata for A18_V15);
    atomic_store(result, (unint64_t *)&qword_1EF2AD2F8);
  }
  return result;
}

unint64_t sub_1BAA05F00()
{
  unint64_t result;

  result = qword_1EF2AD300;
  if (!qword_1EF2AD300)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FC94, &type metadata for A18_V15);
    atomic_store(result, (unint64_t *)&qword_1EF2AD300);
  }
  return result;
}

uint64_t type metadata accessor for A18_V15.Bound()
{
  uint64_t result;

  result = qword_1EF2AD368;
  if (!qword_1EF2AD368)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BAA05F80()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA05F8C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GroupLayoutContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1BAA06008()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BAA06014(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GroupLayoutContext();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BAA06088()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BAA06114(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2AD3A8, (uint64_t (*)(uint64_t))type metadata accessor for A18_V15.Bound, (uint64_t)&unk_1BB88FCF8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BAA06150(uint64_t a1)
{
  return sub_1BAA06208(a1, sub_1BAA0493C);
}

unint64_t sub_1BAA0615C()
{
  unint64_t result;

  result = qword_1EF2AD3B8;
  if (!qword_1EF2AD3B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FE50, &type metadata for A18_V15.Layout);
    atomic_store(result, (unint64_t *)&qword_1EF2AD3B8);
  }
  return result;
}

unint64_t sub_1BAA061A0()
{
  unint64_t result;

  result = qword_1EF2AD3C0;
  if (!qword_1EF2AD3C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FE20, &type metadata for A18_V15.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2AD3C0);
  }
  return result;
}

uint64_t sub_1BAA061E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BAA05D8C(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BAA061EC()
{
  return swift_deallocObject();
}

uint64_t sub_1BAA061FC(uint64_t a1)
{
  return sub_1BAA06208(a1, sub_1BAA04ABC);
}

uint64_t sub_1BAA06208(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1BAA0621C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BAA0625C(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BAA0625C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for A18_V15.Layout;
    v8[1] = &type metadata for A18_V15.Layout.Attributes;
    v8[2] = sub_1BAA0615C();
    v8[3] = sub_1BAA061A0();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BAA062D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2AD3F0)
  {
    sub_1BA4CDF6C(255, &qword_1EF2AD3F8, (uint64_t (*)(void))sub_1BAA0615C, (uint64_t)&type metadata for A18_V15.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2AD3F0);
  }
}

uint64_t sub_1BAA0634C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BAA04EAC(a1, *(_QWORD *)(v1 + 16));
}

void sub_1BAA06354(uint64_t a1)
{
  uint64_t v1;

  sub_1BAA05898(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1BAA06360(uint64_t a1)
{
  uint64_t v1;

  return sub_1BAA05B00(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BAA06368(uint64_t a1)
{
  uint64_t v1;

  return sub_1BAA05094(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BAA06370(uint64_t a1)
{
  uint64_t v1;

  return sub_1BAA05490(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for A18_V15.Layout.Attributes()
{
  return &type metadata for A18_V15.Layout.Attributes;
}

ValueMetadata *type metadata accessor for A18_V15.Layout()
{
  return &type metadata for A18_V15.Layout;
}

unint64_t sub_1BAA0639C()
{
  unint64_t result;

  result = qword_1EF2AD400;
  if (!qword_1EF2AD400)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FDC0, &type metadata for A18_V15.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2AD400);
  }
  return result;
}

unint64_t sub_1BAA063E4()
{
  unint64_t result;

  result = qword_1EF2AD408;
  if (!qword_1EF2AD408)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FD98, &type metadata for A18_V15.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2AD408);
  }
  return result;
}

unint64_t sub_1BAA0642C()
{
  unint64_t result;

  result = qword_1EF2AD410;
  if (!qword_1EF2AD410)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FD70, &type metadata for A18_V15.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2AD410);
  }
  return result;
}

unint64_t sub_1BAA06474()
{
  unint64_t result;

  result = qword_1EF2AD418;
  if (!qword_1EF2AD418)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FDE8, &type metadata for A18_V15.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2AD418);
  }
  return result;
}

uint64_t sub_1BAA064B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2AD420, (uint64_t (*)(void))sub_1BAA066CC, (uint64_t)&type metadata for A18_V15.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA066CC();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v10 = v18;
  type metadata accessor for CGRect(0);
  v23 = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3B9910, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
  sub_1BB8740D4();
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  v23 = 1;
  sub_1BA4DB848(&qword_1ED3B94B0, (uint64_t (*)(void))sub_1BA82F510, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
  v15 = v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  v10[3] = v14;
  v10[4] = v15;
  return result;
}

unint64_t sub_1BAA066CC()
{
  unint64_t result;

  result = qword_1EF2AD428;
  if (!qword_1EF2AD428)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FF44, &type metadata for A18_V15.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD428);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for A18_V15.Layout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BAA0675C + 4 * byte_1BB88FC5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BAA06790 + 4 * byte_1BB88FC58[v4]))();
}

uint64_t sub_1BAA06790(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA06798(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA067A0);
  return result;
}

uint64_t sub_1BAA067AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA067B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BAA067B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA067C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for A18_V15.Layout.Attributes.CodingKeys()
{
  return &type metadata for A18_V15.Layout.Attributes.CodingKeys;
}

unint64_t sub_1BAA067E0()
{
  unint64_t result;

  result = qword_1EF2AD438;
  if (!qword_1EF2AD438)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FF1C, &type metadata for A18_V15.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD438);
  }
  return result;
}

unint64_t sub_1BAA06828()
{
  unint64_t result;

  result = qword_1EF2AD440;
  if (!qword_1EF2AD440)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FE8C, &type metadata for A18_V15.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD440);
  }
  return result;
}

unint64_t sub_1BAA06870()
{
  unint64_t result;

  result = qword_1EF2AD448;
  if (!qword_1EF2AD448)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FEB4, &type metadata for A18_V15.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD448);
  }
  return result;
}

_QWORD *assignWithCopy for FeedGroupEntity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for FeedGroupEntity(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  swift_release();
  a1[4] = a2[4];
  swift_release();
  swift_release();
  a1[5] = a2[5];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FeedGroupEntity()
{
  return &type metadata for FeedGroupEntity;
}

uint64_t sub_1BAA06AC4()
{
  if (qword_1EF2A6C98 != -1)
    swift_once();
  qword_1ED476380 = qword_1EF2AC7F0;
  *(_QWORD *)algn_1ED476388 = *(_QWORD *)algn_1EF2AC7F8;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BAA06B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  void (*v4)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t, uint64_t, unint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t, uint64_t, unint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t result;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t, uint64_t, uint64_t);
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  void (*v173)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t AssociatedTypeWitness;
  uint64_t v180;
  uint64_t AssociatedConformanceWitness;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  void (*v194)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;

  v178 = a3;
  v188 = a2;
  v186 = a1;
  v161 = a4;
  v4 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 80);
  v180 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v173 = v4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v160 = swift_getAssociatedTypeWitness();
  v159 = *(_QWORD *)(v160 - 8);
  MEMORY[0x1E0C80A78](v160);
  v158 = (char *)&v157 - v5;
  v162 = sub_1BB86DFF0();
  v163 = *(_QWORD *)(v162 - 8);
  MEMORY[0x1E0C80A78](v162);
  v184 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1BB86BD10();
  v175 = *(_QWORD *)(v176 - 8);
  MEMORY[0x1E0C80A78](v176);
  v174 = (uint64_t *)((char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v8);
  v183 = (char *)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA5AA370(0, &qword_1ED3A3C78, &qword_1ED3A3C70, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4);
  MEMORY[0x1E0C80A78](v10);
  v172 = (char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v171 = (char *)&v157 - v13;
  sub_1BA5AA370(0, &qword_1ED3A3C58, &qword_1ED3A3C50, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8);
  MEMORY[0x1E0C80A78](v14);
  v170 = (char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v169 = (char *)&v157 - v17;
  sub_1BA5AA528(0, (unint64_t *)&qword_1ED3A3C48, (uint64_t)&qword_1ED3A3C40, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1BA50CB54);
  MEMORY[0x1E0C80A78](v18);
  v191 = (char *)&v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v190 = (char *)&v157 - v21;
  v22 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1BA5AA370(0, &qword_1ED39A6B0, &qword_1ED39A6A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328);
  MEMORY[0x1E0C80A78](v23);
  v198 = (char *)&v157 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v193 = (char *)&v157 - v26;
  sub_1BA5AA584();
  MEMORY[0x1E0C80A78](v27);
  v192 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v189 = (char *)&v157 - v30;
  sub_1BA5AA528(0, (unint64_t *)&qword_1ED39A6D0, (uint64_t)&qword_1ED39A6C8, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1BA5AA31C);
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v157 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v157 - v35;
  v37 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2C88];
  sub_1BA5AA31C(0, &qword_1ED39A6C8, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2C88]);
  v39 = v38;
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v194 = v40;
  v195 = v38;
  v182 = v36;
  v40(v36, 1, 1, v38);
  v164 = v33;
  v40(v33, 1, 1, v39);
  v41 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2CA8];
  sub_1BA5AA31C(0, &qword_1ED39A708, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2CA8]);
  v185 = v42;
  swift_allocObject();
  sub_1BB86F214();
  sub_1BA5AA31C(0, &qword_1ED39A670, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2980]);
  swift_allocObject();
  v204 = sub_1BB86F058();
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A6B8, v37);
  v44 = v43;
  v168 = v43;
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v167 = v45;
  v45(v189, 1, 1, v43);
  v45(v192, 1, 1, v44);
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A710, v41);
  v166 = v46;
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A678, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
  v165 = v47;
  swift_allocObject();
  v196 = sub_1BB86F058();
  v48 = v22;
  sub_1BA5AA2AC(0, &qword_1ED39A6A8, v22, sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37);
  v50 = v49;
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
  v52 = v193;
  v51(v193, 1, 1, v49);
  v53 = v198;
  v51(v198, 1, 1, v50);
  sub_1BA5AA2AC(0, &qword_1ED39A700, v48, sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  sub_1BA5AA2AC(0, &qword_1ED39A668, v48, sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  swift_allocObject();
  v197 = sub_1BB86F058();
  v51(v52, 1, 1, v50);
  v51(v53, 1, 1, v50);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v198 = (char *)sub_1BB86F058();
  v54 = v194;
  v55 = v195;
  v194(v182, 1, 1, v195);
  v56 = v164;
  v54(v164, 1, 1, v55);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v193 = (char *)sub_1BB86F058();
  sub_1BA50CB54(0, &qword_1ED3A3C40, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2C88]);
  v58 = v57;
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56);
  v60 = v190;
  v59(v190, 1, 1, v57);
  v61 = v191;
  v59(v191, 1, 1, v58);
  sub_1BA50CB54(0, &qword_1ED3A3CB0, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  sub_1BA50CB54(0, &qword_1ED3A3BD8, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
  swift_allocObject();
  v62 = sub_1BB86F058();
  v59(v60, 1, 1, v58);
  v59(v61, 1, 1, v58);
  v187 = v62;
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v191 = (char *)sub_1BB86F058();
  v63 = v182;
  v64 = v194;
  v65 = v195;
  v194(v182, 1, 1, v195);
  v64(v56, 1, 1, v65);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v190 = (char *)sub_1BB86F058();
  v64(v63, 1, 1, v65);
  v64(v56, 1, 1, v65);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v195 = sub_1BB86F058();
  sub_1BA5AA2AC(0, &qword_1ED3A3C50, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2C88]);
  v67 = v66;
  v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
  v68(v169, 1, 1, v66);
  v68(v170, 1, 1, v67);
  v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8];
  sub_1BA5AA2AC(0, &qword_1ED3A3CC0, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980];
  sub_1BA5AA2AC(0, &qword_1ED3A3BE8, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  swift_allocObject();
  v194 = (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_1BB86F058();
  v71 = v168;
  v72 = v167;
  v167(v189, 1, 1, v168);
  v72(v192, 1, 1, v71);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  swift_allocObject();
  v73 = sub_1BB86F058();
  sub_1BA5AA2AC(0, &qword_1ED3A3C70, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2C88]);
  v75 = v74;
  v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
  v76(v171, 1, 1, v74);
  v76(v172, 1, 1, v75);
  sub_1BA5AA2AC(0, &qword_1ED3A3CD0, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, v69);
  swift_allocObject();
  swift_retain();
  sub_1BB86F214();
  sub_1BA5AA2AC(0, &qword_1ED3A3BF8, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, v70);
  swift_allocObject();
  v77 = sub_1BB86F058();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v192 = (char *)v73;
  swift_retain();
  v182 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v185 = type metadata accessor for FeedCursorGroup(0, (uint64_t)v173, v180, v78);
  v201 = FeedCursorGroup.identifier.getter();
  v202 = v79;
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v189 = (char *)v77;
  swift_retain();
  v182 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v180 = v188 + *(int *)(v185 + 36);
  v80 = AssociatedConformanceWitness;
  v81 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  AssociatedTypeWitness = swift_checkMetadataState();
  v201 = v81(AssociatedTypeWitness, v80);
  v202 = v82;
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v172 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v83 = sub_1BB86C8B0();
  v84 = *(_QWORD *)(v83 - 8);
  v182 = *(char **)(v84 + 16);
  v85 = v183;
  ((void (*)(char *, uint64_t, uint64_t))v182)(v183, v188, v83);
  v173 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56);
  v173(v85, 0, 1, v83);
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v86 = v183;
  ((void (*)(char *, uint64_t, uint64_t))v182)(v183, v186 + qword_1ED4767C0, v83);
  v173(v86, 0, 1, v83);
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v87 = *(_QWORD *)(v186 + 24);
  v201 = *(_QWORD *)(v186 + 16);
  v202 = v87;
  swift_bridgeObjectRetain();
  sub_1BB86F238();
  swift_release();
  sub_1BB86E2CC();
  swift_allocObject();
  v88 = sub_1BB86BD40();
  v89 = v174;
  *v174 = 0x7974696E69666E69;
  v89[1] = 0xE800000000000000;
  v89[2] = 0x74696E69666E692DLL;
  v89[3] = 0xE900000000000079;
  v89[4] = 7233902;
  v89[5] = 0xE300000000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v175 + 104))(v89, *MEMORY[0x1E0CAE180], v176);
  sub_1BB86BD1C();
  v178 = v88;
  v90 = (void (*)(_QWORD, _QWORD, _QWORD))v177;
  sub_1BB86E2B4();
  v182 = (char *)v90;
  if (v90)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)(v185 - 8) + 8))(v188);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v183 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v201 = 0x2D617461642E67;
  v202 = 0xE700000000000000;
  v91 = v186;
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v92);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v93);
  FeedCursorGroup.identifier.getter();
  sub_1BB872AFC(v94);
  swift_bridgeObjectRelease();
  v95 = v201;
  v96 = v202;
  v97 = *(_QWORD *)(v91 + 16);
  v98 = *(_QWORD *)(v91 + 24);
  swift_bridgeObjectRetain();
  v99 = sub_1BB86DFD8();
  v201 = sub_1BAA8469C(v95, v96, v97, v98, v99, v100);
  v202 = v101;
  v203 = v102;
  sub_1BA4CDF6C(0, &qword_1ED3A10E8, (uint64_t (*)(void))sub_1BA5C6DD8, (uint64_t)&type metadata for FeedBlobEntity, MEMORY[0x1E0DB29F0]);
  v177 = v103;
  swift_allocObject();
  v201 = sub_1BB86F0E8();
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v183 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v201 = 0x2D6C6F6F702E67;
  v202 = 0xE700000000000000;
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v104);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v105);
  v106 = v185;
  FeedCursorGroup.identifier.getter();
  sub_1BB872AFC(v107);
  swift_bridgeObjectRelease();
  v108 = v202;
  v176 = v201;
  v109 = *(_QWORD *)(v91 + 16);
  v110 = *(_QWORD *)(v91 + 24);
  swift_bridgeObjectRetain();
  v201 = sub_1BB86DFE4();
  sub_1BB86E5B4();
  sub_1BA4A2870(&qword_1ED39A568, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4370], MEMORY[0x1E0DB4378]);
  v111 = (void (*)(_QWORD, _QWORD, _QWORD))v182;
  v112 = sub_1BB86BD28();
  v182 = (char *)v111;
  if (v111)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v188, v106);
    swift_release();
    (*(void (**)(char *, uint64_t))(v163 + 8))(v184, v162);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_5;
  }
  v115 = v112;
  v116 = v113;
  swift_release();
  v201 = sub_1BAA8469C(v176, v108, v109, v110, v115, v116);
  v202 = v117;
  v203 = v118;
  swift_allocObject();
  v201 = sub_1BB86F0E8();
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v119 = (uint64_t *)(v188 + *(int *)(v106 + 40));
  v120 = v119[1];
  v201 = *v119;
  v202 = v120;
  swift_bridgeObjectRetain();
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v183 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v121 = v158;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v122 = v160;
  swift_getAssociatedConformanceWitness();
  sub_1BB872CF4();
  (*(void (**)(char *, uint64_t))(v159 + 8))(v121, v122);
  v199 = v201;
  v200 = v202;
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v183 = (char *)sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(AssociatedConformanceWitness + 88))(&v201, AssociatedTypeWitness);
  sub_1BA5AA6C0();
  swift_allocObject();
  v201 = sub_1BB86F334();
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v183 = (char *)sub_1BB86F064();
  v123 = AssociatedConformanceWitness;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v124 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v123 + 104))(AssociatedTypeWitness, v123);
  v125 = (uint64_t)v124;
  if (v124)
  {
    v126 = objc_msgSend(v124, sel_identifier);
    swift_unknownObjectRelease();
    v125 = sub_1BB8729A0();
    v128 = v127;

  }
  else
  {
    v128 = 1;
  }
  v129 = v161;
  v201 = v125;
  v202 = v128;
  sub_1BB86F238();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v177 = sub_1BB86F064();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 32))(AssociatedTypeWitness);
  v131 = v163;
  if (v130 >> 62)
    v132 = sub_1BB873F30();
  else
    v132 = *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v132)
  {
    swift_bridgeObjectRelease();
    v134 = MEMORY[0x1E0DEE9D8];
    v145 = v188;
    v146 = v184;
LABEL_22:
    v201 = v134;
    sub_1BA5AA5E8();
    swift_allocObject();
    v201 = sub_1BB86F334();
    sub_1BB86F238();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)(v185 - 8) + 8))(v145);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v146, v162);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v147 = v190;
    swift_release();
    v148 = v191;
    swift_release();
    v149 = v187;
    swift_release();
    v150 = v193;
    swift_release();
    v151 = v198;
    swift_release();
    v152 = v197;
    swift_release();
    v153 = v196;
    swift_release();
    v154 = v204;
    result = swift_release();
    *v129 = v154;
    v129[1] = v153;
    v129[2] = v152;
    v129[3] = (uint64_t)v151;
    v129[4] = (uint64_t)v150;
    v129[5] = v149;
    v129[6] = (uint64_t)v148;
    v129[7] = (uint64_t)v147;
    v155 = v194;
    v129[8] = v195;
    v129[9] = (uint64_t)v155;
    v156 = v189;
    v129[10] = (uint64_t)v192;
    v129[11] = (uint64_t)v156;
    return result;
  }
  v201 = MEMORY[0x1E0DEE9D8];
  result = sub_1BA7447E8(0, v132 & ~(v132 >> 63), 0);
  v183 = (char *)v132;
  if ((v132 & 0x8000000000000000) == 0)
  {
    v133 = 0;
    v134 = v201;
    v135 = v130 & 0xC000000000000001;
    v136 = v130;
    do
    {
      if (v135)
      {
        v137 = (void *)MEMORY[0x1BCCE4630](v133, v130);
      }
      else
      {
        v137 = *(void **)(v130 + 8 * (_QWORD)v133 + 32);
        swift_unknownObjectRetain();
      }
      v138 = objc_msgSend(v137, sel_itemID);
      v139 = sub_1BB8729A0();
      v141 = v140;
      swift_unknownObjectRelease();

      v201 = v134;
      v143 = *(_QWORD *)(v134 + 16);
      v142 = *(_QWORD *)(v134 + 24);
      if (v143 >= v142 >> 1)
      {
        sub_1BA7447E8(v142 > 1, v143 + 1, 1);
        v134 = v201;
      }
      ++v133;
      *(_QWORD *)(v134 + 16) = v143 + 1;
      v144 = v134 + 16 * v143;
      *(_QWORD *)(v144 + 32) = v139;
      *(_QWORD *)(v144 + 40) = v141;
      v130 = v136;
    }
    while (v183 != v133);
    swift_bridgeObjectRelease();
    v145 = v188;
    v129 = v161;
    v131 = v163;
    v146 = v184;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BAA09158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69[2];
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;

  v80 = a5;
  v78 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v77 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v75 = (char *)v69 - v8;
  v9 = sub_1BB86DFF0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BB86BD10();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BB86E2CC();
  swift_allocObject();
  v17 = sub_1BB86BD40();
  *v16 = 0x7974696E69666E69;
  v16[1] = 0xE800000000000000;
  v16[2] = 0x74696E69666E692DLL;
  v16[3] = 0xE900000000000079;
  v16[4] = 7233902;
  v16[5] = 0xE300000000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0CAE180], v13);
  sub_1BB86BD1C();
  v18 = v86;
  sub_1BB86E2B4();
  if (v18)
    return swift_release();
  v69[1] = a1;
  v70 = a2;
  v80 = v12;
  v72 = v10;
  v73 = v9;
  sub_1BB86F064();
  v81 = 0x2D617461642E67;
  v82 = 0xE700000000000000;
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  if (!v85)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v74 = v17;
  sub_1BB872AFC(v20);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v21);
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  if (!v85)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1BB872AFC(v22);
  swift_bridgeObjectRelease();
  v23 = v81;
  v24 = v82;
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  v25 = v82;
  if (!v82)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v26 = v81;
  v27 = sub_1BB86DFD8();
  v81 = sub_1BAA8469C(v23, v24, v26, v25, v27, v28);
  v82 = v29;
  v83 = v30;
  sub_1BA4CDF6C(0, &qword_1ED3A10E8, (uint64_t (*)(void))sub_1BA5C6DD8, (uint64_t)&type metadata for FeedBlobEntity, MEMORY[0x1E0DB29F0]);
  swift_allocObject();
  v81 = sub_1BB86F0E8();
  sub_1BB86F238();
  swift_release();
  v31 = sub_1BB86F064();
  v81 = 0x2D6C6F6F702E67;
  v82 = 0xE700000000000000;
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  if (!v85)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_1BB872AFC(v32);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v33);
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  if (!v85)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v86 = v31;
  sub_1BB872AFC(v34);
  swift_bridgeObjectRelease();
  v35 = v82;
  v69[0] = v81;
  sub_1BB86F064();
  sub_1BB86F22C();
  result = swift_release();
  v36 = v82;
  if (v82)
  {
    v37 = v81;
    v84 = sub_1BB86DFE4();
    sub_1BB86E5B4();
    sub_1BA4A2870(&qword_1ED39A568, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4370], MEMORY[0x1E0DB4378]);
    v38 = sub_1BB86BD28();
    v71 = v18;
    v39 = v38;
    v41 = v40;
    swift_release();
    v81 = sub_1BAA8469C(v69[0], v35, v37, v36, v39, v41);
    v82 = v42;
    v83 = v43;
    swift_allocObject();
    v81 = sub_1BB86F0E8();
    sub_1BB86F238();
    swift_release();
    sub_1BB86F064();
    v44 = v78;
    v45 = v75;
    v46 = v70;
    (*(void (**)(uint64_t, uint64_t))(v78 + 64))(v70, v78);
    v47 = v77;
    swift_getAssociatedConformanceWitness();
    sub_1BB872CF4();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v47);
    v84 = v81;
    v85 = v82;
    sub_1BB86F238();
    swift_release();
    sub_1BB86F064();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v44 + 88))(&v81, v46, v44);
    sub_1BA5AA6C0();
    swift_allocObject();
    v81 = sub_1BB86F334();
    sub_1BB86F238();
    swift_release();
    sub_1BB86F064();
    v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 104))(v46, v44);
    v49 = (uint64_t)v48;
    if (v48)
    {
      v50 = objc_msgSend(v48, sel_identifier);
      swift_unknownObjectRelease();
      v49 = sub_1BB8729A0();
      v52 = v51;

    }
    else
    {
      v52 = 1;
    }
    v53 = v73;
    v81 = v49;
    v82 = v52;
    sub_1BB86F238();
    swift_release();
    v54 = sub_1BB86F064();
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 + 8) + 32))(v46);
    if (v55 >> 62)
    {
      v56 = sub_1BB873F30();
      v57 = v72;
      if (v56)
        goto LABEL_14;
    }
    else
    {
      v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      v57 = v72;
      if (v56)
      {
LABEL_14:
        v79 = v54;
        v81 = MEMORY[0x1E0DEE9D8];
        result = sub_1BA7447E8(0, v56 & ~(v56 >> 63), 0);
        if ((v56 & 0x8000000000000000) == 0)
        {
          v58 = 0;
          v59 = v81;
          v86 = v55 & 0xC000000000000001;
          v60 = v55;
          do
          {
            if (v86)
            {
              v61 = (void *)MEMORY[0x1BCCE4630](v58, v55);
            }
            else
            {
              v61 = *(void **)(v55 + 8 * v58 + 32);
              swift_unknownObjectRetain();
            }
            v62 = objc_msgSend(v61, sel_itemID);
            v63 = sub_1BB8729A0();
            v65 = v64;
            swift_unknownObjectRelease();

            v81 = v59;
            v67 = *(_QWORD *)(v59 + 16);
            v66 = *(_QWORD *)(v59 + 24);
            if (v67 >= v66 >> 1)
            {
              sub_1BA7447E8(v66 > 1, v67 + 1, 1);
              v59 = v81;
            }
            ++v58;
            *(_QWORD *)(v59 + 16) = v67 + 1;
            v68 = v59 + 16 * v67;
            *(_QWORD *)(v68 + 32) = v63;
            *(_QWORD *)(v68 + 40) = v65;
            v55 = v60;
          }
          while (v56 != v58);
          swift_bridgeObjectRelease();
          v57 = v72;
          v53 = v73;
          goto LABEL_25;
        }
        __break(1u);
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease();
    v59 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    v81 = v59;
    sub_1BA5AA5E8();
    swift_allocObject();
    v81 = sub_1BB86F334();
    sub_1BB86F238();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v80, v53);
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BAA099E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BAA09A08 + 4 * byte_1BB88FF94[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1BAA09A08()
{
  return 0x6449646E696BLL;
}

uint64_t sub_1BAA09A1C()
{
  return 0x4464657461657263;
}

uint64_t sub_1BAA09A50()
{
  return 0x6449726F73727563;
}

uint64_t sub_1BAA09A68()
{
  return 0x74614470756F7267;
}

uint64_t sub_1BAA09A84()
{
  return 0x617461446C6F6F70;
}

uint64_t sub_1BAA09A9C()
{
  return 0x64496769666E6F63;
}

uint64_t sub_1BAA09AB4()
{
  return 1684957547;
}

uint64_t sub_1BAA09AC4()
{
  return 0x6E696C6F6F706572;
}

uint64_t sub_1BAA09AE4()
{
  return 0x6449676174;
}

uint64_t sub_1BAA09AF8()
{
  return 0x7364496D657469;
}

uint64_t sub_1BAA09B10(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2AD498, (uint64_t (*)(void))sub_1BAA0BFDC, (uint64_t)&type metadata for FeedGroupEntity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA0BFDC();
  sub_1BB8746C8();
  v21 = *v3;
  v20 = 0;
  sub_1BA5AA31C(0, &qword_1ED39A670, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2980]);
  sub_1BAA0C020((unint64_t *)&qword_1EF2AD4A0, MEMORY[0x1E0DB2990]);
  sub_1BB8741AC();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = v7;
  v21 = v3[1];
  v20 = 1;
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A678, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
  v12 = v11;
  v13 = sub_1BAA0C070(&qword_1EF2AD4A8, MEMORY[0x1E0DB2990]);
  sub_1BB8741AC();
  v17[1] = v13;
  v17[2] = v12;
  v18 = v3;
  v21 = v3[2];
  v20 = 2;
  sub_1BA5AA2AC(0, &qword_1ED39A668, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  sub_1BAA0C1F8();
  sub_1BB8741AC();
  v21 = v18[3];
  v20 = 3;
  sub_1BB8741AC();
  v14 = v18;
  v21 = v18[4];
  v20 = 4;
  sub_1BB8741AC();
  v21 = v14[5];
  v20 = 5;
  sub_1BA50CB54(0, &qword_1ED3A3BD8, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
  v16 = v15;
  sub_1BAA0C260(&qword_1EF2AD4B8, MEMORY[0x1E0DB2990]);
  v17[0] = v16;
  sub_1BB8741AC();
  v21 = v14[6];
  v20 = 6;
  sub_1BB8741AC();
  v21 = v14[7];
  v20 = 7;
  sub_1BB8741AC();
  v21 = v14[8];
  v20 = 8;
  sub_1BB8741AC();
  v21 = v14[9];
  v20 = 9;
  sub_1BA5AA2AC(0, &qword_1ED3A3BE8, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  sub_1BAA0C2B0();
  sub_1BB8741AC();
  v21 = v14[10];
  v20 = 10;
  sub_1BB8741AC();
  v21 = v18[11];
  v20 = 11;
  sub_1BA5AA2AC(0, &qword_1ED3A3BF8, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  sub_1BAA0C318();
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v9, v6);
}

uint64_t sub_1BAA09FF4()
{
  unsigned __int8 *v0;

  return sub_1BAA099E0(*v0);
}

uint64_t sub_1BAA09FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA0A344(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BAA0A020(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1BAA0A02C()
{
  sub_1BAA0BFDC();
  return sub_1BB874710();
}

uint64_t sub_1BAA0A054()
{
  sub_1BAA0BFDC();
  return sub_1BB87471C();
}

uint64_t sub_1BAA0A07C()
{
  return sub_1BB86F064();
}

uint64_t sub_1BAA0A09C()
{
  uint64_t v0;

  if (qword_1ED39E470 != -1)
    swift_once();
  v0 = qword_1ED476380;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1BAA0A0F8()
{
  sub_1BA5C6D94();
  return sub_1BB86F004();
}

uint64_t sub_1BAA0A130()
{
  sub_1BA5C6D94();
  return sub_1BB86F01C();
}

uint64_t sub_1BAA0A168()
{
  sub_1BA5C6D94();
  return sub_1BB86F010();
}

double sub_1BAA0A1B8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1BAA0A818(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1BAA0A200(_QWORD *a1)
{
  return sub_1BAA09B10(a1);
}

uint64_t sub_1BAA0A214()
{
  sub_1BA5C6D94();
  return sub_1BB86F040();
}

uint64_t sub_1BAA0A24C()
{
  sub_1BA5C6D94();
  return sub_1BB86F034();
}

uint64_t sub_1BAA0A28C()
{
  sub_1BA5C6D94();
  return sub_1BB86F028();
}

unint64_t sub_1BAA0A2E4()
{
  unint64_t result;

  result = qword_1EF2AD450;
  if (!qword_1EF2AD450)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890104, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1EF2AD450);
  }
  return result;
}

uint64_t sub_1BAA0A328()
{
  return sub_1BA4A2870(&qword_1ED39A470, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0DB2910]);
}

uint64_t sub_1BAA0A344(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449646E696BLL && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4464657461657263 && a2 == 0xEB00000000657461 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x446873696C627570 && a2 == 0xEB00000000657461 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6449726F73727563 && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74614470756F7267 && a2 == 0xE900000000000061 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x617461446C6F6F70 && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64496769666E6F63 && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6E696C6F6F706572 && a2 == 0xE900000000000067 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6449676174 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7364496D657469 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_1BAA0A818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(uint64_t, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t, unint64_t);
  uint64_t (*v35)(uint64_t, uint64_t, unint64_t);
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  char *v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t, uint64_t, char *);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t result;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  _QWORD v109[3];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t, char *);
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  void (*v133)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  char *v136;
  char v137;
  char *v138;

  v129 = a1;
  v109[0] = a2;
  sub_1BA4CDF6C(0, &qword_1EF2AD458, (uint64_t (*)(void))sub_1BAA0BFDC, (uint64_t)&type metadata for FeedGroupEntity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v111 = v2;
  v110 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v124 = (char *)v109 - v3;
  sub_1BA5AA370(0, &qword_1ED3A3C78, &qword_1ED3A3C70, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4);
  MEMORY[0x1E0C80A78](v4);
  v122 = (char *)v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v121 = (char *)v109 - v7;
  sub_1BA5AA370(0, &qword_1ED3A3C58, &qword_1ED3A3C50, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8);
  MEMORY[0x1E0C80A78](v8);
  v120 = (char *)v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v119 = (char *)v109 - v11;
  sub_1BA5AA528(0, (unint64_t *)&qword_1ED3A3C48, (uint64_t)&qword_1ED3A3C40, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1BA50CB54);
  MEMORY[0x1E0C80A78](v12);
  v127 = (char *)v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v115 = (char *)v109 - v15;
  sub_1BA5AA370(0, &qword_1ED39A6B0, &qword_1ED39A6A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328);
  MEMORY[0x1E0C80A78](v16);
  v128 = (char *)v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v114 = (char *)v109 - v19;
  sub_1BA5AA584();
  MEMORY[0x1E0C80A78](v20);
  v136 = (char *)v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v135 = (char *)v109 - v23;
  sub_1BA5AA528(0, (unint64_t *)&qword_1ED39A6D0, (uint64_t)&qword_1ED39A6C8, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1BA5AA31C);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)v109 - v28;
  v30 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2C88];
  sub_1BA5AA31C(0, &qword_1ED39A6C8, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2C88]);
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v133 = v33;
  v134 = v31;
  v131 = v29;
  v33(v29, 1, 1, v31);
  v132 = v26;
  v33(v26, 1, 1, v32);
  v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2CA8];
  sub_1BA5AA31C(0, &qword_1ED39A708, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  sub_1BB86F214();
  v35 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980];
  sub_1BA5AA31C(0, &qword_1ED39A670, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2980]);
  v37 = v36;
  swift_allocObject();
  v125 = sub_1BB86F058();
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A6B8, v30);
  v39 = v38;
  v40 = *(void (**)(char *, uint64_t, uint64_t, char *))(*((_QWORD *)v38 - 1) + 56);
  v117 = v40;
  v118 = v38;
  v40(v135, 1, 1, v38);
  v40(v136, 1, 1, v39);
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A710, v34);
  v116 = v41;
  swift_allocObject();
  sub_1BB86F214();
  sub_1BA5AA3D4(0, (unint64_t *)&qword_1ED39A678, v35);
  v130 = v42;
  swift_allocObject();
  v123 = sub_1BB86F058();
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1BA5AA2AC(0, &qword_1ED39A6A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30);
  v45 = v44;
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
  v47 = v114;
  v46(v114, 1, 1, v44);
  v48 = v128;
  v46(v128, 1, 1, v45);
  sub_1BA5AA2AC(0, &qword_1ED39A700, v43, sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  sub_1BB86F214();
  sub_1BA5AA2AC(0, &qword_1ED39A668, v43, sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  v50 = v49;
  swift_allocObject();
  v113 = sub_1BB86F058();
  v46(v47, 1, 1, v45);
  v46(v48, 1, 1, v45);
  swift_allocObject();
  sub_1BB86F214();
  v109[2] = v50;
  swift_allocObject();
  v114 = (char *)sub_1BB86F058();
  v51 = v133;
  v52 = v134;
  v133(v131, 1, 1, v134);
  v51(v132, 1, 1, v52);
  swift_allocObject();
  sub_1BB86F214();
  swift_allocObject();
  v112 = sub_1BB86F058();
  sub_1BA50CB54(0, &qword_1ED3A3C40, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2C88]);
  v54 = v53;
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v56 = v115;
  v55(v115, 1, 1, v53);
  v57 = v127;
  v55(v127, 1, 1, v54);
  sub_1BA50CB54(0, &qword_1ED3A3CB0, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  sub_1BB86F214();
  sub_1BA50CB54(0, &qword_1ED3A3BD8, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
  v59 = v58;
  swift_allocObject();
  v128 = (char *)sub_1BB86F058();
  v55(v56, 1, 1, v54);
  v55(v57, 1, 1, v54);
  v60 = v37;
  swift_allocObject();
  sub_1BB86F214();
  v109[1] = v59;
  swift_allocObject();
  v127 = (char *)sub_1BB86F058();
  v61 = v131;
  v63 = v133;
  v62 = v134;
  v133(v131, 1, 1, v134);
  v64 = v132;
  v63(v132, 1, 1, v62);
  swift_allocObject();
  sub_1BB86F214();
  swift_allocObject();
  v115 = (char *)sub_1BB86F058();
  v63(v61, 1, 1, v62);
  v63(v64, 1, 1, v62);
  swift_allocObject();
  sub_1BB86F214();
  swift_allocObject();
  v133 = (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_1BB86F058();
  v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2C88];
  sub_1BA5AA2AC(0, &qword_1ED3A3C50, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2C88]);
  v67 = v66;
  v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
  v68(v119, 1, 1, v66);
  v68(v120, 1, 1, v67);
  sub_1BA5AA2AC(0, &qword_1ED3A3CC0, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  sub_1BB86F214();
  v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980];
  sub_1BA5AA2AC(0, &qword_1ED3A3BE8, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
  v71 = v70;
  swift_allocObject();
  v134 = sub_1BB86F058();
  v73 = v117;
  v72 = v118;
  v117(v135, 1, 1, v118);
  v73(v136, 1, 1, v72);
  swift_allocObject();
  sub_1BB86F214();
  swift_allocObject();
  v136 = (char *)sub_1BB86F058();
  sub_1BA5AA2AC(0, &qword_1ED3A3C70, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, v65);
  v75 = v74;
  v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
  v76(v121, 1, 1, v74);
  v76(v122, 1, 1, v75);
  sub_1BA5AA2AC(0, &qword_1ED3A3CD0, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2CA8]);
  swift_allocObject();
  sub_1BB86F214();
  sub_1BA5AA2AC(0, &qword_1ED3A3BF8, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, v69);
  swift_allocObject();
  v135 = (char *)sub_1BB86F058();
  v77 = v129;
  __swift_project_boxed_opaque_existential_1(v129, v129[3]);
  sub_1BAA0BFDC();
  v78 = v124;
  v79 = v126;
  sub_1BB87468C();
  if (v79)
  {
    v81 = v77;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v137 = 0;
  v80 = sub_1BAA0C020((unint64_t *)&qword_1EF2AD468, MEMORY[0x1E0DB2998]);
  sub_1BB8740D4();
  v131 = v60;
  v132 = (char *)v80;
  v83 = v138;
  swift_retain();
  swift_release();
  v137 = 1;
  v84 = sub_1BAA0C070(&qword_1EF2AD470, MEMORY[0x1E0DB2998]);
  sub_1BB8740D4();
  v125 = v84;
  v126 = v83;
  v85 = v138;
  swift_retain();
  swift_release();
  v137 = 2;
  sub_1BAA0C0C0();
  sub_1BB8740D4();
  v123 = v71;
  v86 = v138;
  swift_retain();
  swift_release();
  v137 = 3;
  sub_1BB8740D4();
  v87 = v138;
  swift_retain();
  swift_release();
  v137 = 4;
  sub_1BB8740D4();
  v122 = v138;
  swift_retain();
  swift_release();
  v137 = 5;
  sub_1BAA0C260(&qword_1EF2AD480, MEMORY[0x1E0DB2998]);
  sub_1BB8740D4();
  v121 = v138;
  swift_retain();
  swift_release();
  v137 = 6;
  sub_1BB8740D4();
  v88 = v138;
  swift_retain();
  swift_release();
  v137 = 7;
  sub_1BB8740D4();
  v120 = 0;
  v127 = v88;
  v119 = v138;
  swift_retain();
  swift_release();
  v137 = 8;
  v89 = v111;
  v90 = v120;
  sub_1BB8740D4();
  v120 = v90;
  if (v90)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v89);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v91 = v127;
    swift_release();
    swift_release();
    v127 = v91;
    v128 = v121;
    v81 = v129;
    goto LABEL_4;
  }
  v132 = v87;
  v92 = v86;
  v93 = v138;
  swift_retain();
  swift_release();
  v137 = 9;
  sub_1BAA0C128();
  v94 = v120;
  sub_1BB8740D4();
  v120 = v94;
  if (v94)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v111);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v95 = v127;
    swift_release();
    swift_release();
    swift_release();
    v127 = v95;
    v128 = v121;
LABEL_13:
    v81 = v129;
    goto LABEL_4;
  }
  v96 = (uint64_t)v138;
  swift_retain();
  swift_release();
  v137 = 10;
  v97 = v120;
  sub_1BB8740D4();
  v120 = v97;
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v111);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v128 = v121;
    v134 = v96;
    goto LABEL_13;
  }
  v98 = v138;
  swift_retain();
  swift_release();
  v137 = 11;
  sub_1BAA0C190();
  v99 = v120;
  sub_1BB8740D4();
  v120 = v99;
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v111);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v128 = v121;
    v134 = v96;
    v136 = v98;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v111);
  v136 = v138;
  swift_retain();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
  swift_release();
  v133 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v98;
  swift_release();
  v131 = (char *)v96;
  swift_release();
  v118 = v93;
  swift_release();
  v100 = v119;
  swift_release();
  v101 = v127;
  swift_release();
  v102 = v121;
  swift_release();
  v103 = v122;
  swift_release();
  v104 = v132;
  swift_release();
  swift_release();
  swift_release();
  v105 = v126;
  result = swift_release();
  v106 = (_QWORD *)v109[0];
  *(_QWORD *)v109[0] = v105;
  v106[1] = v85;
  v106[2] = v92;
  v106[3] = v104;
  v106[4] = v103;
  v106[5] = v102;
  v106[6] = v101;
  v106[7] = v100;
  v107 = v131;
  v106[8] = v118;
  v106[9] = v107;
  v108 = v136;
  v106[10] = v133;
  v106[11] = v108;
  return result;
}

unint64_t sub_1BAA0BFDC()
{
  unint64_t result;

  result = qword_1EF2AD460;
  if (!qword_1EF2AD460)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890374, &type metadata for FeedGroupEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD460);
  }
  return result;
}

uint64_t sub_1BAA0C020(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BA5AA31C(255, &qword_1ED39A670, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BAA0C070(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BA5AA3D4(255, (unint64_t *)&qword_1ED39A678, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BAA0C0C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD478;
  if (!qword_1EF2AD478)
  {
    sub_1BA5AA2AC(255, &qword_1ED39A668, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2998], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD478);
  }
  return result;
}

unint64_t sub_1BAA0C128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD488;
  if (!qword_1EF2AD488)
  {
    sub_1BA5AA2AC(255, &qword_1ED3A3BE8, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2998], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD488);
  }
  return result;
}

unint64_t sub_1BAA0C190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD490;
  if (!qword_1EF2AD490)
  {
    sub_1BA5AA2AC(255, &qword_1ED3A3BF8, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2998], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD490);
  }
  return result;
}

unint64_t sub_1BAA0C1F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD4B0;
  if (!qword_1EF2AD4B0)
  {
    sub_1BA5AA2AC(255, &qword_1ED39A668, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], sub_1BAA0A328, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2990], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4B0);
  }
  return result;
}

uint64_t sub_1BAA0C260(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BA50CB54(255, &qword_1ED3A3BD8, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BAA0C2B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD4C0;
  if (!qword_1EF2AD4C0)
  {
    sub_1BA5AA2AC(255, &qword_1ED3A3BE8, (uint64_t (*)(uint64_t))sub_1BA5AA6C0, sub_1BA5AA7F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2990], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4C0);
  }
  return result;
}

unint64_t sub_1BAA0C318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD4C8;
  if (!qword_1EF2AD4C8)
  {
    sub_1BA5AA2AC(255, &qword_1ED3A3BF8, (uint64_t (*)(uint64_t))sub_1BA5AA5E8, sub_1BA5AA6A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2990], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4C8);
  }
  return result;
}

_QWORD *assignWithCopy for FeedGroupEntity.ManifestEntity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FeedGroupEntity.ManifestEntity(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FeedGroupEntity.ManifestEntity()
{
  return &type metadata for FeedGroupEntity.ManifestEntity;
}

ValueMetadata *type metadata accessor for FeedGroupEntity.ItemEntity()
{
  return &type metadata for FeedGroupEntity.ItemEntity;
}

uint64_t storeEnumTagSinglePayload for FeedGroupEntity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1BAA0C4F4 + 4 * byte_1BB88FFA5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1BAA0C528 + 4 * byte_1BB88FFA0[v4]))();
}

uint64_t sub_1BAA0C528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA0C530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA0C538);
  return result;
}

uint64_t sub_1BAA0C544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA0C54CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1BAA0C550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA0C558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupEntity.CodingKeys()
{
  return &type metadata for FeedGroupEntity.CodingKeys;
}

unint64_t sub_1BAA0C578()
{
  unint64_t result;

  result = qword_1EF2AD4D0;
  if (!qword_1EF2AD4D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89024C, &type metadata for FeedGroupEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4D0);
  }
  return result;
}

unint64_t sub_1BAA0C5C0()
{
  unint64_t result;

  result = qword_1EF2AD4D8;
  if (!qword_1EF2AD4D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8901BC, &type metadata for FeedGroupEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4D8);
  }
  return result;
}

unint64_t sub_1BAA0C608()
{
  unint64_t result;

  result = qword_1EF2AD4E0;
  if (!qword_1EF2AD4E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8901E4, &type metadata for FeedGroupEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD4E0);
  }
  return result;
}

uint64_t SharingActivityTypeProvider.supportedActivityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SharingActivityTypeProvider.__allocating_init(supportedActivityTypes:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SharingActivityTypeProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharingActivityTypeProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of SharingActivityTypeProviderType.supportedActivityTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for SharingActivityTypeProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharingActivityTypeProvider.__allocating_init(supportedActivityTypes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FeedDatabaseGroupProcessorType.process(group:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t FormatDecorationCollection.decorations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BAA0C6F0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  v3 = *v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    *a2 = v3;
    return swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v3 + 16);
    v10 = v9 + v8;
    if (__OFADD__(v9, v8))
      break;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v10 <= *(_QWORD *)(v3 + 24) >> 1)
    {
      if (*(_QWORD *)(v7 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v9 <= v10)
        v12 = v9 + v8;
      else
        v12 = v9;
      v3 = sub_1BA79170C(isUniquelyReferenced_nonNull_native, v12, 1, v3);
      if (*(_QWORD *)(v7 + 16))
      {
LABEL_14:
        v13 = *(_QWORD *)(v3 + 16);
        v14 = (*(_QWORD *)(v3 + 24) >> 1) - v13;
        sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B3740, (uint64_t (*)(void))sub_1BA89682C, (uint64_t)&type metadata for FormatDecoration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
        if (v14 < v8)
          goto LABEL_27;
        v16 = *(_QWORD *)(v15 - 8);
        v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v18 = *(_QWORD *)(v16 + 72);
        v19 = v3 + v17 + v18 * v13;
        v20 = v7 + v17;
        v21 = v18 * v8;
        v22 = v19 + v21;
        v23 = v20 + v21;
        if (v20 < v22 && v19 < v23)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v8)
        {
          v25 = *(_QWORD *)(v3 + 16);
          v26 = __OFADD__(v25, v8);
          v27 = v25 + v8;
          if (v26)
            goto LABEL_28;
          *(_QWORD *)(v3 + 16) = v27;
        }
        goto LABEL_4;
      }
    }
    if (v8)
      goto LABEL_26;
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      result = swift_bridgeObjectRelease();
      *a2 = v3;
      return result;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BAA0C908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x697461726F636564 && a2 == 0xEB00000000736E6FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BAA0C9B4()
{
  sub_1BA4E5A38();
  return sub_1BB874710();
}

uint64_t sub_1BAA0C9DC()
{
  sub_1BA4E5A38();
  return sub_1BB87471C();
}

BOOL FormatDecorationCollection.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

NewsFeed::FormatDecorationCollection __swiftcall FormatDecorationCollection.init()()
{
  _QWORD *v0;
  NewsFeed::FormatDecorationCollection result;

  *v0 = MEMORY[0x1E0DEE9D8];
  return result;
}

void sub_1BAA0CA28(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

void sub_1BAA0CA38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5[5];
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  sub_1BA7B8794(a1, v5, *v2);
}

ValueMetadata *type metadata accessor for FormatDecorationCollection()
{
  return &type metadata for FormatDecorationCollection;
}

uint64_t storeEnumTagSinglePayload for FormatDecorationCollection.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BAA0CACC + 4 * asc_1BB890480[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BAA0CAEC + 4 * byte_1BB890485[v4]))();
}

_BYTE *sub_1BAA0CACC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BAA0CAEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA0CAF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA0CAFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA0CB04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA0CB0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatDecorationCollection.CodingKeys()
{
  return &type metadata for FormatDecorationCollection.CodingKeys;
}

unint64_t sub_1BAA0CB2C()
{
  unint64_t result;

  result = qword_1EF2AD4E8[0];
  if (!qword_1EF2AD4E8[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8905C8, &type metadata for FormatDecorationCollection.CodingKeys);
    atomic_store(result, qword_1EF2AD4E8);
  }
  return result;
}

void sub_1BAA0CB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for FormatObject(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v4 <= 0x3F)
  {
    sub_1BAA197E8();
    if (v5 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_1BAA0CBF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(unint64_t, unint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  unint64_t v70;
  size_t v71;
  void (*v72)(unint64_t, unint64_t, uint64_t);
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  _OWORD *v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  const void *v116;
  unsigned int (*v117)(const void *, uint64_t, uint64_t);
  uint64_t v118;
  unsigned __int8 v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  void (*v174)(unint64_t, unint64_t, uint64_t);
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  void *v183;
  const void *v184;
  unsigned int (*v185)(const void *, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *result;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  int v223;
  __int128 v224;
  __int128 v225;
  void *v226;
  const void *v227;
  unsigned int (*v228)(const void *, uint64_t, uint64_t);
  void *v229;
  const void *v230;
  unint64_t v231;
  unint64_t v232;
  void *v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  size_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  size_t v242;
  uint64_t v243;
  size_t v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(unint64_t, unint64_t, uint64_t);
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t __n;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int (*v269)(const void *, uint64_t, uint64_t);
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  size_t v279;
  _QWORD *v280;
  uint64_t v282;
  uint64_t *v283;
  _QWORD *v284;

  v268 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v268 - 8);
  v273 = *(_QWORD *)(v3 + 64);
  v272 = sub_1BB86EB84();
  v4 = *(_QWORD *)(v272 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = v5;
  v270 = v4;
  v8 = *(_QWORD *)(v4 + 64);
  if (v6)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = v8 + 1;
  v277 = v5;
  v279 = v9;
  v259 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v259 - 8);
  v275 = *(_DWORD *)(v10 + 80);
  v262 = sub_1BB871E24();
  v11 = *(_QWORD *)(v262 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | (unint64_t)v275;
  v14 = sub_1BB86E710();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v16 | 7;
  v18 = v13 | v7 | v16 | 7;
  v271 = v6;
  if (v6 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v6;
  if (v19 - 1 < v19)
    v20 = v19;
  else
    v20 = v19 - 1;
  v266 = v275;
  v256 = v275 + 16;
  v257 = *(_QWORD *)(v10 + 64) + 7;
  v258 = v10;
  v21 = v12 + 16;
  v265 = v12;
  v260 = v11;
  v22 = (v16 + 176) & ~v17;
  v23 = v16 + 16;
  v264 = v16 | 7;
  v24 = (v16 + 16) & ~v17;
  v25 = v16 + 48;
  v26 = *(_QWORD *)(v15 + 64);
  if (*(_DWORD *)(v11 + 84))
    v27 = *(_QWORD *)(v11 + 64);
  else
    v27 = *(_QWORD *)(v11 + 64) + 1;
  v254 = v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v255 = v12 | (unint64_t)v275;
  v28 = *(_DWORD *)(v15 + 80);
  v29 = ((((((((((((((v27
                    + 7
                    + ((v12
                      + 16
                      + ((((((((v257 + ((v275 + 16) & ~(unint64_t)v275)) & 0xFFFFFFFFFFFFFFF8)
                            + 23) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v12)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (!*(_DWORD *)(v15 + 84))
    ++v26;
  v30 = v26 + v16 + ((v16 + 48) & ~v16);
  v31 = ((v26 + 7 + ((v30 + v24) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + v7 + 8;
  v32 = v8 + v28;
  v267 = *(_DWORD *)(v15 + 80);
  v33 = ((v8 + v28 + ((v31 + v22) & ~v7)) & ~v28) + v26;
  if (v29 > v33)
    v33 = ((((((((((((((v27
                      + 7
                      + ((v12
                        + 16
                        + ((((((((v257 + ((v275 + 16) & ~(unint64_t)v275)) & 0xFFFFFFFFFFFFFFF8)
                              + 23) & 0xFFFFFFFFFFFFFFF8)
                            + 23) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v12)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v34 = v29 + ((v13 + 48) & (v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8));
  if (v33 > v34)
    v34 = v33;
  if (v34 <= 0x90)
    v35 = 144;
  else
    v35 = v34;
  v36 = v18 | *(_DWORD *)(v3 + 80);
  if (v36 != 7)
    goto LABEL_27;
  if (((v275 | v277 | v12 | *(_DWORD *)(v15 + 80) | *(_DWORD *)(v3 + 80)) & 0x100000) != 0)
    goto LABEL_27;
  v37 = v3;
  v38 = (v7 | 7) + v273;
  v39 = v7 + 16;
  v40 = v8 + v7;
  v41 = v279 + 7;
  v42 = (v38 & ~(v7 | 7))
      + v18
      + ((((((((v279 + 7 + ((v8 + v7 + ((v8 + v7 + ((v7 + 16) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v252 = v7 + 48;
  v274 = ((v7 + 128) & ~v7) + v8 + (v7 | 7);
  v248 = v8 + 7;
  v249 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  __n = ((v249 + ((v274 + ((v7 + 48) & ~(v7 | 7))) & ~(v7 | 7))) & ~v18)
      + (((v35 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (__n + (v42 & ~v18) > 0x18)
  {
LABEL_27:
    v55 = *a2;
    *a1 = *a2;
    v56 = (uint64_t *)(v55 + ((v36 + 16) & ~v36));
    swift_retain();
    return v56;
  }
  v253 = v20;
  v245 = v27 + 7;
  v241 = v23;
  v242 = v27;
  v235 = v25;
  v236 = v30;
  v237 = v26 + 7;
  v238 = v31;
  v239 = v32;
  v240 = v14;
  v243 = *(_QWORD *)(v14 - 8);
  v244 = v26;
  v250 = v35;
  v43 = ~(v7 | 7);
  v278 = ~v18;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(a1, a2, v268);
  v44 = (_QWORD *)(((unint64_t)a1 + v38) & v43);
  v276 = v43;
  v45 = (_QWORD *)(((unint64_t)a2 + v38) & v43);
  *v44 = *v45;
  v44[1] = v45[1];
  v46 = ((unint64_t)v44 + v39) & ~v7;
  v47 = ((unint64_t)v45 + v39) & ~v7;
  v48 = *(void (**)(unint64_t, unint64_t, uint64_t))(v270 + 16);
  swift_bridgeObjectRetain();
  v48(v46, v47, v272);
  v49 = (v40 + v46) & ~v7;
  v50 = (v40 + v47) & ~v7;
  v48(v49, v50, v272);
  v51 = (void *)((v40 + v49) & ~v7);
  v52 = v40 + v50;
  v53 = v272;
  v246 = ~v7;
  v54 = (const void *)(v52 & ~v7);
  v269 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v270 + 48);
  v247 = v48;
  if (v269(v54, 1, v272))
  {
    memcpy(v51, v54, v279);
  }
  else
  {
    v48((unint64_t)v51, (unint64_t)v54, v272);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v270 + 56))(v51, 0, 1, v272);
  }
  v57 = (_QWORD *)(((unint64_t)v51 + v41) & 0xFFFFFFFFFFFFF8);
  v58 = (_QWORD *)(((unint64_t)v54 + v41) & 0xFFFFFFFFFFFFFFF8);
  *v57 = *v58;
  v59 = (_QWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = (_QWORD *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFF8);
  v62 = (_QWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  *(_QWORD *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFF8);
  v56 = a1;
  v63 = v278;
  v64 = (_QWORD *)(((unint64_t)a1 + v42) & v278);
  v65 = (_QWORD *)(((unint64_t)a2 + v42) & v278);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v253 & 0x80000000) != 0)
  {
    v67 = v271;
    if (v269((const void *)((v274 + (((unint64_t)v65 + v252) & v43)) & v43), v271, v272))
    {
LABEL_33:
      memcpy(v64, v65, __n);
      return v56;
    }
  }
  else
  {
    v66 = v65[1];
    if (v66 >= 0xFFFFFFFF)
      LODWORD(v66) = -1;
    v67 = v271;
    if ((_DWORD)v66 != -1)
      goto LABEL_33;
  }
  *v64 = *v65;
  v64[1] = v65[1];
  v64[2] = v65[2];
  *((_BYTE *)v64 + 24) = *((_BYTE *)v65 + 24);
  v64[4] = v65[4];
  v64[5] = v65[5];
  v68 = (_QWORD *)(((unint64_t)v64 + v252) & v43);
  v69 = (uint64_t *)(((unint64_t)v65 + v252) & v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v67 & 0x80000000) != 0)
  {
    v73 = v269((const void *)((v7 + (((unint64_t)v69 + 71) & 0xFFFFFFFFFFFFFFF8) + 64) & v246), v67, v272);
    v71 = ((v7 + 128) & ~v7) + v8;
    if (v73)
    {
LABEL_39:
      memcpy(v68, v69, v71);
      v72 = v247;
      goto LABEL_48;
    }
  }
  else
  {
    v70 = v69[7];
    if (v70 >= 0xFFFFFFFF)
      LODWORD(v70) = -1;
    v71 = ((v7 + 128) & ~v7) + v8;
    if ((_DWORD)v70 != -1)
      goto LABEL_39;
  }
  v74 = *v69;
  v75 = v69[1];
  v76 = *((_BYTE *)v69 + 16);
  sub_1BA987528(*v69, v75, v76);
  *v68 = v74;
  v68[1] = v75;
  *((_BYTE *)v68 + 16) = v76;
  v77 = v68 + 3;
  v78 = v69 + 3;
  v79 = *((unsigned __int8 *)v69 + 40);
  if ((((v79 >> 6) & 0xFFFFFF83 | (4 * ((v79 >> 1) & 0x1F))) ^ 0x7F) < 0x7D)
  {
    v82 = *(_OWORD *)v78;
    *((_BYTE *)v68 + 40) = *((_BYTE *)v69 + 40);
    *v77 = v82;
  }
  else
  {
    v80 = *v78;
    v81 = v69[4];
    sub_1BA895B64(*v78, v81, *((_BYTE *)v69 + 40));
    *(_QWORD *)v77 = v80;
    v68[4] = v81;
    *((_BYTE *)v68 + 40) = v79;
  }
  v68[6] = v69[6];
  v68[7] = v69[7];
  v83 = ((unint64_t)v68 + 71) & 0xFFFFFFFFFFFFFFF8;
  v84 = ((unint64_t)v69 + 71) & 0xFFFFFFFFFFFFFFF8;
  v85 = *(unsigned __int16 *)(v84 + 44);
  v86 = *(unsigned int *)(v84 + 40);
  swift_bridgeObjectRetain();
  if (v85 >> 9 <= 0x7EuLL)
  {
    v89 = v86 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v85 << 32);
    v91 = *(_QWORD *)v84;
    v90 = *(_QWORD *)(v84 + 8);
    v92 = *(_QWORD *)(v84 + 24);
    v282 = *(_QWORD *)(v84 + 16);
    v93 = *(_QWORD *)(v84 + 32);
    sub_1BA8EBBF0(*(_QWORD *)v84, v90, v282, v92, v93, v89);
    *(_QWORD *)v83 = v91;
    *(_QWORD *)(v83 + 8) = v90;
    *(_QWORD *)(v83 + 16) = v282;
    *(_QWORD *)(v83 + 24) = v92;
    *(_QWORD *)(v83 + 32) = v93;
    *(_WORD *)(v83 + 44) = WORD2(v89);
    *(_DWORD *)(v83 + 40) = v89;
  }
  else
  {
    v87 = *(_OWORD *)v84;
    v88 = *(_OWORD *)(v84 + 16);
    *(_OWORD *)(v83 + 30) = *(_OWORD *)(v84 + 30);
    *(_OWORD *)v83 = v87;
    *(_OWORD *)(v83 + 16) = v88;
  }
  v53 = v272;
  v63 = v278;
  *(_QWORD *)(v83 + 48) = *(_QWORD *)(v84 + 48);
  *(_QWORD *)(v83 + 56) = *(_QWORD *)(v84 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = v247;
  v247((v7 + 64 + v83) & v246, (v7 + 64 + v84) & v246, v272);
LABEL_48:
  v94 = ((unint64_t)v68 + v274) & v276;
  v95 = ((unint64_t)v69 + v274) & v276;
  v72(v94, v95, v53);
  *(_QWORD *)((v248 + v94) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v248 + v95) & 0xFFFFFFFFFFFFF8);
  v96 = (v249 + v94) & v63;
  v97 = (v249 + v95) & v63;
  v98 = *(unsigned __int8 *)(v97 + v250);
  swift_bridgeObjectRetain();
  v100 = ~v266;
  v101 = ~v265;
  v102 = ~v264;
  v103 = ~v267;
  switch(v98)
  {
    case 0:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      v104 = (v256 + v96) & v100;
      v105 = (v256 + v97) & v100;
      v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v258 + 16);
      swift_bridgeObjectRetain();
      v106(v104, v105, v259);
      v107 = (_QWORD *)((v257 + v104) & 0xFFFFFFFFFFFFFFF8);
      v108 = (_QWORD *)((v257 + v105) & 0xFFFFFFFFFFFFFFF8);
      *v107 = *v108;
      v107[1] = v108[1];
      v109 = (_QWORD *)(((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF8);
      v110 = (_QWORD *)(((unint64_t)v108 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v109 = *v110;
      v109[1] = v110[1];
      v111 = (_QWORD *)(((unint64_t)v109 + 23) & 0xFFFFFFFFFFFFFFF8);
      v112 = (_QWORD *)(((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v111 = *v112;
      v111[1] = v112[1];
      v113 = (_QWORD *)(((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF8);
      v114 = (_QWORD *)(((unint64_t)v112 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v113 = *v114;
      v113[1] = v114[1];
      v115 = (void *)(((unint64_t)v113 + v21) & v101);
      v116 = (const void *)(((unint64_t)v114 + v21) & v101);
      v117 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v260 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v117(v116, 1, v262))
      {
        memcpy(v115, v116, v242);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v260 + 16))(v115, v116, v262);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v260 + 56))(v115, 0, 1, v262);
      }
      v189 = (_QWORD *)(((unint64_t)v115 + v245) & 0xFFFFFFFFFFFFFFF8);
      v190 = (_QWORD *)(((unint64_t)v116 + v245) & 0xFFFFFFFFFFFFFFF8);
      *v189 = *v190;
      v191 = (_QWORD *)(((unint64_t)v189 + 15) & 0xFFFFFFFFFFFFF8);
      v192 = (_QWORD *)(((unint64_t)v190 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v191 = *v192;
      v193 = (_QWORD *)(((unint64_t)v191 + 15) & 0xFFFFFFFFFFFFFFF8);
      v194 = (_QWORD *)(((unint64_t)v192 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v193 = *v194;
      v195 = (_QWORD *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFF8);
      v196 = (_QWORD *)(((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v195 = *v196;
      v197 = (_QWORD *)(((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8);
      v198 = (_QWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v197 = *v198;
      v199 = (_QWORD *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFF8);
      v200 = (_QWORD *)(((unint64_t)v198 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v199 = *v200;
      *(_QWORD *)(((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFF8);
      v188 = v250;
      *(_BYTE *)(v96 + v250) = 0;
      goto LABEL_85;
    case 1:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      *(_QWORD *)(v96 + 48) = *(_QWORD *)(v97 + 48);
      *(_QWORD *)(v96 + 56) = *(_QWORD *)(v97 + 56);
      v118 = *(_QWORD *)(v97 + 64);
      *(_BYTE *)(v96 + 72) = *(_BYTE *)(v97 + 72);
      *(_QWORD *)(v96 + 64) = v118;
      *(_QWORD *)(v96 + 80) = *(_QWORD *)(v97 + 80);
      *(_QWORD *)(v96 + 88) = *(_QWORD *)(v97 + 88);
      v283 = (uint64_t *)(v97 + 96);
      v119 = *(_BYTE *)(v97 + 106);
      v120 = *(unsigned __int16 *)(v97 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v119 == 255)
      {
        v121 = *v283;
        *(_DWORD *)(v96 + 103) = *(_DWORD *)(v97 + 103);
        *(_QWORD *)(v96 + 96) = v121;
      }
      else
      {
        v186 = v120 & 0xFF00FFFF | (v119 << 16);
        v187 = *v283;
        sub_1BA77A170(*v283, v186, SBYTE2(v186), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
        *(_QWORD *)(v96 + 96) = v187;
        *(_WORD *)(v96 + 104) = v186;
        *(_BYTE *)(v96 + 106) = BYTE2(v186);
      }
      v165 = v250;
      *(_BYTE *)(v96 + v250) = 1;
      goto LABEL_90;
    case 2:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      *(_BYTE *)(v96 + 48) = *(_BYTE *)(v97 + 48);
      *(_QWORD *)(v96 + 56) = *(_QWORD *)(v97 + 56);
      v122 = *(_QWORD *)(v97 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v122 <= 2)
      {
        *(_OWORD *)(v96 + 64) = *(_OWORD *)(v97 + 64);
      }
      else
      {
        *(_BYTE *)(v96 + 64) = *(_BYTE *)(v97 + 64);
        *(_QWORD *)(v96 + 72) = *(_QWORD *)(v97 + 72);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v96 + 80) = *(_QWORD *)(v97 + 80);
      *(_QWORD *)(v96 + 88) = *(_QWORD *)(v97 + 88);
      *(_QWORD *)(v96 + 96) = *(_QWORD *)(v97 + 96);
      *(_QWORD *)(v96 + 104) = *(_QWORD *)(v97 + 104);
      *(_QWORD *)(v96 + 112) = *(_QWORD *)(v97 + 112);
      *(_QWORD *)(v96 + 120) = *(_QWORD *)(v97 + 120);
      *(_BYTE *)(v96 + 128) = *(_BYTE *)(v97 + 128);
      *(_QWORD *)(v96 + 136) = *(_QWORD *)(v97 + 136);
      *(_BYTE *)(v96 + v250) = 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_88;
    case 3:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      v123 = *(_QWORD *)(v97 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v123 >= 0xF)
      {
        *(_QWORD *)(v96 + 48) = *(_QWORD *)(v97 + 48);
        *(_QWORD *)(v96 + 56) = *(_QWORD *)(v97 + 56);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v96 + 48) = *(_OWORD *)(v97 + 48);
      }
      *(_QWORD *)(v96 + 64) = *(_QWORD *)(v97 + 64);
      *(_QWORD *)(v96 + 72) = *(_QWORD *)(v97 + 72);
      *(_QWORD *)(v96 + 80) = *(_QWORD *)(v97 + 80);
      *(_QWORD *)(v96 + 88) = *(_QWORD *)(v97 + 88);
      *(_QWORD *)(v96 + 96) = *(_QWORD *)(v97 + 96);
      *(_QWORD *)(v96 + 104) = *(_QWORD *)(v97 + 104);
      *(_QWORD *)(v96 + 112) = *(_QWORD *)(v97 + 112);
      *(_BYTE *)(v96 + 120) = *(_BYTE *)(v97 + 120);
      v188 = v250;
      *(_BYTE *)(v96 + v250) = 3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_86;
    case 4:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      *(_QWORD *)(v96 + 48) = *(_QWORD *)(v97 + 48);
      *(_BYTE *)(v96 + v250) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_88;
    case 5:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      v124 = (_QWORD *)((v96 + 23) & 0xFFFFFFFFFFFFFFF8);
      v125 = (_QWORD *)((v97 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v124 = *v125;
      v124[1] = v125[1];
      v126 = ((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8;
      v127 = ((unint64_t)v125 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v126 = *(_QWORD *)v127;
      *(_QWORD *)(v126 + 8) = *(_QWORD *)(v127 + 8);
      *(_BYTE *)(v126 + 16) = *(_BYTE *)(v127 + 16);
      *(_BYTE *)(v126 + 17) = *(_BYTE *)(v127 + 17);
      v128 = (_QWORD *)((v126 + 25) & 0xFFFFFFFFFFFFF8);
      v129 = (_QWORD *)((v127 + 25) & 0xFFFFFFFFFFFFF8);
      *v128 = *v129;
      v130 = (_QWORD *)(((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8);
      v131 = (_QWORD *)(((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v130 = *v131;
      v132 = (_QWORD *)(((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFF8);
      v133 = (_QWORD *)(((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFF8);
      *v132 = *v133;
      v134 = (_QWORD *)(((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFF8);
      v135 = (_QWORD *)(((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFF8);
      *v134 = *v135;
      v136 = (_QWORD *)(((unint64_t)v134 + 15) & 0xFFFFFFFFFFFFF8);
      v137 = (_QWORD *)(((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFF8);
      *v136 = *v137;
      v138 = (_QWORD *)(((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFF8);
      v139 = (_QWORD *)(((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFF8);
      *v138 = *v139;
      v140 = (_QWORD *)(((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFF8);
      v141 = (_QWORD *)(((unint64_t)v139 + 15) & 0xFFFFFFFFFFFFF8);
      *v140 = *v141;
      v142 = (_QWORD *)(((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8);
      v143 = (_QWORD *)(((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v142 = *v143;
      v144 = (_QWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFF8);
      v145 = (_QWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFF8);
      *v144 = *v145;
      v146 = (_QWORD *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFF8);
      v147 = (_QWORD *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFF8);
      *v146 = *v147;
      v148 = (_QWORD *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFF8);
      v149 = (_QWORD *)(((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFF8);
      *v148 = *v149;
      v150 = (_QWORD *)(((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFF8);
      v151 = (_QWORD *)(((unint64_t)v149 + 15) & 0xFFFFFFFFFFFFF8);
      *v150 = *v151;
      v152 = (_QWORD *)(((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFF8);
      v153 = (_QWORD *)(((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFF8);
      *v152 = *v153;
      v154 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8;
      v155 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8;
      v156 = *(_QWORD *)(v155 + 8);
      if (v156 >= 0xFFFFFFFF)
        LODWORD(v156) = -1;
      v261 = v156;
      v263 = v156 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v263 > 2)
      {
        *(_OWORD *)v154 = *(_OWORD *)v155;
      }
      else
      {
        v157 = v241;
        if (v261 != -1)
        {
          *(_OWORD *)v154 = *(_OWORD *)v155;
          goto LABEL_94;
        }
        *(_BYTE *)v154 = *(_BYTE *)v155;
        *(_QWORD *)(v154 + 8) = *(_QWORD *)(v155 + 8);
        swift_bridgeObjectRetain();
      }
      v157 = v241;
LABEL_94:
      v284 = (_QWORD *)((v157 + v155) & v102);
      v280 = (_QWORD *)((v157 + v154) & v102);
      *v280 = *v284;
      v218 = (_QWORD *)(((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8);
      v219 = (_QWORD *)(((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v218 = *v219;
      v220 = (_QWORD *)(((unint64_t)v218 + v267 + 8) & v102);
      v221 = (_QWORD *)(((unint64_t)v219 + v267 + 8) & v102);
      v222 = v221[1];
      if (v222 >= 0xFFFFFFFF)
        LODWORD(v222) = -1;
      v223 = v222 - 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v223 < 0)
      {
        *v220 = *v221;
        v220[1] = v221[1];
        v220[2] = v221[2];
        v220[3] = v221[3];
        v220[4] = v221[4];
        v220[5] = v221[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v224 = *(_OWORD *)v221;
        v225 = *((_OWORD *)v221 + 2);
        *((_OWORD *)v220 + 1) = *((_OWORD *)v221 + 1);
        *((_OWORD *)v220 + 2) = v225;
        *(_OWORD *)v220 = v224;
      }
      v226 = (void *)(((unint64_t)v220 + v235) & v103);
      v227 = (const void *)(((unint64_t)v221 + v235) & v103);
      v228 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v243 + 48);
      if (v228(v227, 1, v240))
      {
        memcpy(v226, v227, v244);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v226, v227, v240);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v226, 0, 1, v240);
      }
      v229 = (void *)(((unint64_t)v220 + v236) & v103);
      v230 = (const void *)(((unint64_t)v221 + v236) & v103);
      if (v228(v230, 1, v240))
      {
        memcpy(v229, v230, v244);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v229, v230, v240);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v229, 0, 1, v240);
      }
      *(_QWORD *)(((unint64_t)v229 + v237) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v230 + v237) & 0xFFFFFFFFFFFFF8);
      v231 = ((unint64_t)v280 + v238) & v246;
      v232 = ((unint64_t)v284 + v238) & v246;
      swift_bridgeObjectRetain();
      v247(v231, v232, v272);
      v233 = (void *)((v239 + v231) & v103);
      v234 = (const void *)((v239 + v232) & v103);
      if (v228(v234, 1, v240))
      {
        memcpy(v233, v234, v244);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v233, v234, v240);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v233, 0, 1, v240);
      }
      v165 = v250;
      *(_BYTE *)(v96 + v250) = 5;
LABEL_90:
      v213 = (_QWORD *)(((v96 | 7) + v165 + 1) & 0xFFFFFFFFFFFFFFF8);
      v214 = (uint64_t *)(((v97 | 7) + v165 + 1) & 0xFFFFFFFFFFFFFFF8);
      v215 = *v214;
      v216 = v214[1];
      sub_1BA69D44C(*v214, v216);
      *v213 = v215;
      v213[1] = v216;
      *(_QWORD *)(((unint64_t)v213 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v214 + 23) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v56 = a1;
      break;
    case 6:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_BYTE *)(v96 + v250) = 6;
      swift_bridgeObjectRetain();
      goto LABEL_88;
    case 7:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_BYTE *)(v96 + v250) = 7;
      swift_retain();
      goto LABEL_89;
    case 8:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      *(_QWORD *)(v96 + 48) = *(_QWORD *)(v97 + 48);
      *(_QWORD *)(v96 + 56) = *(_QWORD *)(v97 + 56);
      *(_QWORD *)(v96 + 64) = *(_QWORD *)(v97 + 64);
      *(_BYTE *)(v96 + v250) = 8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_88;
    case 9:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      *(_QWORD *)(v96 + 40) = *(_QWORD *)(v97 + 40);
      *(_QWORD *)(v96 + 48) = *(_QWORD *)(v97 + 48);
      *(_QWORD *)(v96 + 56) = *(_QWORD *)(v97 + 56);
      *(_QWORD *)(v96 + 64) = *(_QWORD *)(v97 + 64);
      *(_QWORD *)(v96 + 72) = *(_QWORD *)(v97 + 72);
      *(_BYTE *)(v96 + 80) = *(_BYTE *)(v97 + 80);
      *(_QWORD *)(v96 + 88) = *(_QWORD *)(v97 + 88);
      *(_QWORD *)(v96 + 96) = *(_QWORD *)(v97 + 96);
      *(_BYTE *)(v96 + 104) = *(_BYTE *)(v97 + 104);
      *(_BYTE *)(v96 + v250) = 9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_88:
      swift_bridgeObjectRetain();
LABEL_89:
      v165 = v250;
      goto LABEL_90;
    case 10:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v97 + 16);
      *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
      v158 = *(_QWORD *)(v97 + 32);
      v159 = *(_QWORD *)(v97 + 40);
      v160 = *(_QWORD *)(v97 + 48);
      v161 = *(_QWORD *)(v97 + 56);
      v162 = *(_QWORD *)(v97 + 64);
      v163 = *(_QWORD *)(v97 + 72);
      v164 = *(_BYTE *)(v97 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BA709DE8(v158, v159, v160, v161, v162, v163, v164);
      v165 = v250;
      *(_QWORD *)(v96 + 32) = v158;
      *(_QWORD *)(v96 + 40) = v159;
      *(_QWORD *)(v96 + 48) = v160;
      *(_QWORD *)(v96 + 56) = v161;
      *(_QWORD *)(v96 + 64) = v162;
      *(_QWORD *)(v96 + 72) = v163;
      *(_BYTE *)(v96 + 80) = v164;
      *(_BYTE *)(v96 + v250) = 10;
      goto LABEL_90;
    case 11:
      *(_QWORD *)v96 = *(_QWORD *)v97;
      *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
      v166 = (_QWORD *)((v96 + 23) & 0xFFFFFFFFFFFFFFF8);
      v167 = (_QWORD *)((v97 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v166 = *v167;
      v166[1] = v167[1];
      v168 = (_QWORD *)(((unint64_t)v166 + 23) & 0xFFFFFFFFFFFFFFF8);
      v169 = (_QWORD *)(((unint64_t)v167 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v168 = *v169;
      v168[1] = v169[1];
      v170 = (_QWORD *)(((unint64_t)v168 + v255 + 16) & v254);
      v171 = (_QWORD *)(((unint64_t)v169 + v255 + 16) & v254);
      *v170 = *v171;
      v170[1] = v171[1];
      v172 = ((unint64_t)v170 + v256) & v100;
      v173 = ((unint64_t)v171 + v256) & v100;
      v174 = *(void (**)(unint64_t, unint64_t, uint64_t))(v258 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v174(v172, v173, v259);
      v175 = (_QWORD *)((v257 + v172) & 0xFFFFFFFFFFFFFFF8);
      v176 = (_QWORD *)((v257 + v173) & 0xFFFFFFFFFFFFFFF8);
      *v175 = *v176;
      v175[1] = v176[1];
      v177 = (_QWORD *)(((unint64_t)v175 + 23) & 0xFFFFFFFFFFFFFFF8);
      v178 = (_QWORD *)(((unint64_t)v176 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v177 = *v178;
      v177[1] = v178[1];
      v179 = (_QWORD *)(((unint64_t)v177 + 23) & 0xFFFFFFFFFFFFFFF8);
      v180 = (_QWORD *)(((unint64_t)v178 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v179 = *v180;
      v179[1] = v180[1];
      v181 = (_QWORD *)(((unint64_t)v179 + 23) & 0xFFFFFFFFFFFFFFF8);
      v182 = (_QWORD *)(((unint64_t)v180 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v181 = *v182;
      v181[1] = v182[1];
      v183 = (void *)(((unint64_t)v181 + v21) & v101);
      v184 = (const void *)(((unint64_t)v182 + v21) & v101);
      v185 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v260 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v185(v184, 1, v262))
      {
        memcpy(v183, v184, v242);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v260 + 16))(v183, v184, v262);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v260 + 56))(v183, 0, 1, v262);
      }
      v201 = (_QWORD *)(((unint64_t)v183 + v245) & 0xFFFFFFFFFFFFFFF8);
      v202 = (_QWORD *)(((unint64_t)v184 + v245) & 0xFFFFFFFFFFFFFFF8);
      *v201 = *v202;
      v203 = (_QWORD *)(((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFF8);
      v204 = (_QWORD *)(((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v203 = *v204;
      v205 = (_QWORD *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8);
      v206 = (_QWORD *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v205 = *v206;
      v207 = (_QWORD *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFF8);
      v208 = (_QWORD *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v207 = *v208;
      v209 = (_QWORD *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8);
      v210 = (_QWORD *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v209 = *v210;
      v211 = (_QWORD *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFF8);
      v212 = (_QWORD *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v211 = *v212;
      *(_QWORD *)(((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFF8);
      v188 = v250;
      *(_BYTE *)(v96 + v250) = 11;
LABEL_85:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_86:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v165 = v188;
      goto LABEL_90;
    default:
      if (v102 <= 3)
        v99 = v102;
      else
        v99 = 4;
      __asm { BR              X11 }
      return result;
  }
  return v56;
}

uint64_t sub_1BAA0E384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int (*v76)(unint64_t, uint64_t, uint64_t);
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(unint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = sub_1BB86EB84();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v113 = a1;
  v115 = (v7 | 7) + v4;
  v105 = v7 | 7;
  swift_bridgeObjectRelease();
  v8 = ~v7;
  v9 = (v7 + 16 + ((v115 + a1) & ~(v7 | 7))) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = (v11 + v7 + v9) & ~v7;
  v109 = (void (*)(unint64_t, uint64_t))v10;
  v10(v12, v5);
  v13 = (v11 + v7 + v12) & ~v7;
  v118 = v5;
  v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v103(v13, 1, v5))
    v10(v13, v5);
  v14 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v14)
    v15 = v11;
  else
    v15 = v11 + 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v110 = v115 & ~(v7 | 7);
  v16 = (((((((v15 + ((v11 + v7 + ((((v7 + 16) | v7) + v11) & v8)) & v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v95 = sub_1BB86C8B0();
  v17 = *(_QWORD *)(v95 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v97 = sub_1BB871E24();
  v19 = *(_QWORD *)(v97 - 8);
  v20 = v11;
  v107 = v18;
  v116 = *(unsigned __int8 *)(v19 + 80);
  v21 = v116 | v18;
  v22 = sub_1BB86E710();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v101 = v21;
  v106 = v24 | 7;
  v25 = v21 | v7 | v24 | 7;
  v26 = (v113 + v110 + v25 + v16 + 8) & ~v25;
  if (v14 <= 0x7FFFFFFF)
    v27 = 0x7FFFFFFF;
  else
    v27 = v14;
  if (v27 - 1 >= v27)
    --v27;
  v94 = v17;
  v28 = *(_QWORD *)(v17 + 64);
  v100 = *(_DWORD *)(v19 + 84);
  v96 = v19;
  v99 = *(_QWORD *)(v19 + 64);
  v102 = *(_DWORD *)(v23 + 84);
  v29 = *(_QWORD *)(v23 + 64);
  v111 = v20;
  v114 = ~v7;
  v30 = v20 + ((v7 + 128) & v8);
  v98 = v30;
  if ((v27 & 0x80000000) != 0)
  {
    v34 = ~(v7 | 7);
    v31 = v14;
    v35 = v14;
    v36 = *(unsigned __int8 *)(v23 + 80);
    v37 = v25;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v103)((v30 + v105 + ((v7 + v26 + 48) & v34)) & v34, v35, v118);
    v25 = v37;
    v24 = v36;
    if ((_DWORD)result)
      return result;
    goto LABEL_17;
  }
  v31 = v14;
  v32 = *(_QWORD *)(v26 + 8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  result = (v32 + 1);
  v34 = ~(v7 | 7);
  if ((_DWORD)v32 == -1)
  {
LABEL_17:
    v91 = v25;
    v92 = v29;
    v84 = v23;
    v81 = v22;
    v82 = v107 + 16;
    v83 = v28 + 7;
    v38 = v116
        + 16
        + ((((((((v28 + 7 + ((v107 + 16) & ~v107)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8);
    v39 = v24 + 176;
    v40 = v24 + 16;
    v93 = v24;
    v41 = v24 + 48;
    v88 = v101 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
    v90 = v111 + 7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v89 = (v7 + v26 + 48) & v34;
    if ((v31 & 0x80000000) != 0)
    {
      v43 = v103((v7 + ((((v7 + v26 + 48) & v34) + 71) & 0xFFFFFFFFFFFFFFF8) + 64) & v114, v31, v118);
    }
    else
    {
      v42 = *(_QWORD *)(((v7 + v26 + 48) & v34) + 0x38);
      if (v42 >= 0xFFFFFFFF)
        LODWORD(v42) = -1;
      v43 = v42 + 1;
    }
    v44 = v91;
    v45 = ~v91;
    v46 = v38 & ~v116;
    v47 = v39 & ~v106;
    v87 = v40;
    v48 = v40 & ~v106;
    v50 = v92;
    v49 = v93;
    v51 = ~v93;
    v80 = v41;
    v52 = v41 & ~v93;
    v53 = v90 & 0xFFFFFFFFFFFFFFF8;
    v86 = v47;
    v85 = v48;
    if (!v43)
    {
      sub_1BA986FA0(*(_QWORD *)v89, *(_QWORD *)(v89 + 8), *(_BYTE *)(v89 + 16));
      v54 = *(unsigned __int8 *)(v89 + 40);
      if ((((v54 >> 6) & 0xFFFFFF83 | (4 * ((v54 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
        sub_1BA895B84(*(_QWORD *)(v89 + 24), *(_QWORD *)(v89 + 32), v54);
      swift_bridgeObjectRelease();
      v55 = (v89 + 71) & 0xFFFFFFFFFFFFFFF8;
      if (*(unsigned __int16 *)(v55 + 44) >> 9 <= 0x7EuLL)
        sub_1BA8EBC78(*(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(_QWORD *)(v55 + 16), *(_QWORD *)(v55 + 24), *(_QWORD *)(v55 + 32), *(unsigned int *)(v55 + 40) | ((unint64_t)*(unsigned __int16 *)(v55 + 44) << 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v109((v7 + v55 + 64) & v114, v118);
      v51 = ~v93;
      v52 = v41 & ~v93;
      v34 = ~(v7 | 7);
      v44 = v91;
      v50 = v92;
      v49 = v93;
      v45 = ~v91;
      v53 = v90 & 0xFFFFFFFFFFFFFFF8;
    }
    v104 = v52;
    v56 = (v98 + v105 + v89) & v34;
    v109(v56, v118);
    swift_bridgeObjectRelease();
    v57 = v99;
    if (!v100)
      v57 = v99 + 1;
    v58 = (v44 + v53 + v56 + 8) & v45;
    v59 = ((((((((((((((v57 + 7 + v46) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if (v102)
      v60 = v50;
    else
      v60 = v50 + 1;
    v61 = v60 + v104;
    v62 = v7 + 8;
    v63 = v111 + v49;
    v64 = ((v111 + v49 + ((v62 + v86 + ((v60 + 7 + ((v85 + v49 + v60 + v104) & v51)) & 0xFFFFFFFFFFFFFFF8)) & v114)) & v51)
        + v60;
    if (v59 > v64)
      v64 = v59;
    v65 = v59 + ((v101 + 48) & v88);
    if (v64 > v65)
      v65 = v64;
    if (v65 <= 0x90)
      v66 = 144;
    else
      v66 = v65;
    v68 = ~v106;
    v119 = v66;
    switch(*(_BYTE *)(v58 + v66))
    {
      case 0:
        swift_bridgeObjectRelease();
        v69 = v82 + v58;
        goto LABEL_73;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(unsigned __int8 *)(v58 + 106) != 255)
        {
          v70 = *(unsigned __int16 *)(v58 + 104) | (*(unsigned __int8 *)(v58 + 106) << 16);
          sub_1BA77A170(*(_QWORD *)(v58 + 96), v70, SBYTE2(v70), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
        }
        goto LABEL_77;
      case 2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v58 + 72) >= 3uLL)
          swift_bridgeObjectRelease();
        goto LABEL_75;
      case 3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v58 + 56) >= 0xFuLL)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      case 5:
        v112 = v60 + 7;
        v108 = v85 + v49;
        v117 = v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(((((((((((((((((((((((((((((((((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                   + 25) & 0xFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8)
                                               + 15) & 0xFFFFFFFFFFFFFFF8)
                                             + 15) & 0xFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFF8)
                           + 15) & 0xFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 8) >= 0xFFFFFFFFuLL)
          swift_bridgeObjectRelease();
        v71 = (v87
             + ((((((((((((((((((((((((((((((((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFF8)
                           + 15) & 0xFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)) & v68;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = (v93 + ((v71 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v68;
        LODWORD(v73) = -1;
        if (*(_QWORD *)(v72 + 8) < 0xFFFFFFFFuLL)
          v73 = *(_QWORD *)(((v93 + ((v71 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v68) + 8);
        if ((int)v73 - 1 < 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v74 = v51;
        v75 = (v80 + v72) & v51;
        v76 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v84 + 48);
        if (!v76(v75, 1, v81))
          (*(void (**)(unint64_t, uint64_t))(v84 + 8))(v75, v81);
        if (!v76((v61 + v93 + v72) & v74, 1, v81))
          (*(void (**)(unint64_t, uint64_t))(v84 + 8))((v61 + v93 + v72) & v74, v81);
        swift_bridgeObjectRelease();
        v109((v62 + v71 + ((v112 + ((v108 + v104 + v60) & v74)) & 0xFFFFFFFFFFFFFFF8)) & v114, v118);
        v77 = (v117 + ((v62 + v71 + ((v112 + ((v108 + v104 + v60) & v74)) & 0xFFFFFFFFFFFFFFF8)) & v114)) & v74;
        if (!v76(v77, 1, v81))
          (*(void (**)(unint64_t, uint64_t))(v84 + 8))(v77, v81);
        goto LABEL_77;
      case 6:
        swift_bridgeObjectRelease();
        goto LABEL_76;
      case 7:
        swift_release();
        goto LABEL_77;
      case 8:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      case 9:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      case 0xA:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BA6C0C20(*(_QWORD *)(v58 + 32), *(_QWORD *)(v58 + 40), *(_QWORD *)(v58 + 48), *(_QWORD *)(v58 + 56), *(_QWORD *)(v58 + 64), *(_QWORD *)(v58 + 72), *(_BYTE *)(v58 + 80));
        goto LABEL_77;
      case 0xB:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = v82 + ((v101 + ((((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v88);
LABEL_73:
        v78 = v69 & ~v107;
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v78, v95);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v79 = (v116
             + 16
             + ((((((((v83 + v78) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v116;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v96 + 48))(v79, 1, v97))
          (*(void (**)(unint64_t, uint64_t))(v96 + 8))(v79, v97);
LABEL_75:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_76:
        swift_bridgeObjectRelease();
LABEL_77:
        sub_1BA69D314(*(_QWORD *)((v58 + v119 + 8) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v58 + v119 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
        result = swift_bridgeObjectRelease();
        break;
      default:
        if (v66 <= 3)
          v67 = v66;
        else
          v67 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return result;
}

uint64_t sub_1BAA0F03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  size_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  unint64_t v65;
  int v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  _OWORD *v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  unint64_t v102;
  size_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void (*v114)(unint64_t, unint64_t, uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  const void *v123;
  unsigned int (*v124)(const void *, uint64_t, uint64_t);
  uint64_t v125;
  unsigned __int8 v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  char v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  const void *v190;
  unsigned int (*v191)(const void *, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  char v218;
  _QWORD *v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t result;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  int v229;
  __int128 v230;
  __int128 v231;
  void *v232;
  const void *v233;
  unsigned int (*v234)(const void *, uint64_t, uint64_t);
  void *v235;
  const void *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  void (*v257)(unint64_t, unint64_t, uint64_t);
  unsigned int (*v258)(const void *, uint64_t, uint64_t);
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  size_t v263;
  unsigned int v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *__dst;
  unint64_t __dsta;
  size_t __n;
  int v273;
  int v274;
  size_t v275;
  size_t v276;
  size_t v277;
  size_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t *v297;
  void (*v298)(unint64_t, unint64_t, uint64_t);
  void *v299;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BB86EB84();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v292 = a1;
  v293 = ~(v9 | 7);
  v11 = (_QWORD *)((v10 + a1) & v293);
  v288 = v9 | 7;
  v290 = a2;
  v12 = (_QWORD *)((v10 + a2) & v293);
  *v11 = *v12;
  v11[1] = v12[1];
  v295 = ~v9;
  v13 = ((unint64_t)v11 + v9 + 16) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 16) & ~v9;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v15(v13, v14, v7);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = (v16 + v9 + v13) & ~v9;
  v18 = (v16 + v9 + v14) & ~v9;
  v15(v17, v18, v7);
  v19 = (void *)((v16 + v9 + v17) & ~v9);
  v20 = (const void *)((v16 + v9 + v18) & ~v9);
  v258 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v261 = v7;
  v257 = (void (*)(unint64_t, unint64_t, uint64_t))v15;
  if (v258(v20, 1, v7))
  {
    v21 = *(unsigned int *)(v8 + 84);
    if ((_DWORD)v21)
      v22 = v16;
    else
      v22 = v16 + 1;
    memcpy(v19, v20, v22);
  }
  else
  {
    v15((uint64_t)v19, (uint64_t)v20, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    v21 = *(unsigned int *)(v8 + 84);
  }
  v23 = v16;
  if ((_DWORD)v21)
    v24 = v16;
  else
    v24 = v16 + 1;
  v25 = (_QWORD *)(((unint64_t)v19 + v24 + 7) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  v284 = v10 & v293;
  v31 = (((((((v24 + ((v16 + v9 + ((((v9 + 16) | v9) + v16) & v295)) & v295) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v250 = sub_1BB86C8B0();
  v32 = *(_QWORD *)(v250 - 8);
  v33 = v21;
  v34 = *(unsigned __int8 *)(v32 + 80);
  v253 = sub_1BB871E24();
  v35 = v23;
  v36 = *(_QWORD *)(v253 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v37 | v34;
  v245 = sub_1BB86E710();
  v39 = *(_QWORD *)(v245 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v286 = v40 | 7;
  v41 = v37 | v34 | v9 | v40 | 7;
  v42 = v284 + v41 + v31 + 8;
  __dst = (_QWORD *)((v42 + v292) & ~v41);
  v285 = v41;
  v43 = (_QWORD *)((v42 + v290) & ~v41);
  if (v33 <= 0x7FFFFFFF)
    v44 = 0x7FFFFFFF;
  else
    v44 = v33;
  if (v44 - 1 >= v44)
    --v44;
  v262 = v44;
  v247 = v34 + 16;
  v255 = v34;
  v45 = (v34 + 16) & ~v34;
  v46 = v37;
  v248 = *(_QWORD *)(v32 + 64) + 7;
  v249 = v32;
  v251 = v37 + 16;
  v252 = v36;
  v265 = v37
       + 16
       + ((((((((v248 + v45) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v274 = *(_DWORD *)(v36 + 84);
  v275 = *(_QWORD *)(v36 + 64);
  v47 = v40 + 176;
  v281 = v40 + 16;
  v291 = *(unsigned __int8 *)(v39 + 80);
  v279 = v40 + 48;
  v273 = *(_DWORD *)(v39 + 84);
  v246 = *(_QWORD *)(v245 - 8);
  v276 = *(_QWORD *)(v39 + 64);
  v280 = v38 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v244 = v38;
  v48 = v38 + 48;
  v49 = v9 + 48;
  v283 = v9;
  v50 = v35 + ((v9 + 128) & v295);
  v278 = v35;
  v51 = v35 + 7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __n = v50;
  if ((v262 & 0x80000000) != 0)
  {
    v54 = ~(v9 | 7);
    v53 = v258((const void *)((v50 + v288 + (((unint64_t)v43 + v49) & v54)) & v54), v33, v261);
  }
  else
  {
    v52 = v43[1];
    if (v52 >= 0xFFFFFFFF)
      LODWORD(v52) = -1;
    v53 = v52 + 1;
    v54 = ~(v9 | 7);
  }
  v55 = v48 & v280;
  v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v53)
  {
    v57 = v275;
    if (!v274)
      v57 = v275 + 1;
    v58 = ((((((((((((((v57 + (v265 & ~v46) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v59 = v276;
    if (!v273)
      v59 = v276 + 1;
    v60 = ((v278
          + v291
          + ((v9
            + (v47 & ~v286)
            + ((v59 + (((v281 & ~v286) + v291 + (v279 & ~v291) + v59) & ~v291) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 8) & v295)) & ~v291)
        + v59;
    if (v58 > v60)
      v60 = v58;
    v61 = v58 + v55;
    if (v60 > v61)
      v61 = v60;
    if (v61 <= 0x90)
      v61 = 144;
    memcpy(__dst, v43, ((((v50 + v288 + (v49 & v54)) & v54) + v56 + v285) & ~v285)+ (((v61 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 8);
  }
  else
  {
    v242 = ~v285;
    v243 = v265 & ~v46;
    v263 = v51;
    v266 = v279 & ~v291;
    v267 = v47 & ~v286;
    v268 = v55;
    v269 = ~v291;
    *__dst = *v43;
    __dst[1] = v43[1];
    __dst[2] = v43[2];
    *((_BYTE *)__dst + 24) = *((_BYTE *)v43 + 24);
    __dst[4] = v43[4];
    __dst[5] = v43[5];
    v62 = v43;
    v63 = (_QWORD *)(((unint64_t)__dst + v49) & v54);
    v64 = (uint64_t *)(((unint64_t)v62 + v49) & v54);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v33 & 0x80000000) != 0)
    {
      v66 = ((uint64_t (*)(unint64_t))v258)((v9
                                                            + (((unint64_t)v64 + 71) & 0xFFFFFFFFFFFFFFF8)
                                                            + 64) & v295);
    }
    else
    {
      v65 = v64[7];
      if (v65 >= 0xFFFFFFFF)
        LODWORD(v65) = -1;
      v66 = v65 + 1;
    }
    __dsta = v46;
    if (v66)
    {
      v67 = v50;
      memcpy(v63, v64, v50);
      v68 = ~v9;
      v69 = v261;
    }
    else
    {
      v70 = *v64;
      v71 = v64[1];
      v72 = *((_BYTE *)v64 + 16);
      sub_1BA987528(*v64, v71, v72);
      *v63 = v70;
      v63[1] = v71;
      *((_BYTE *)v63 + 16) = v72;
      v73 = v63 + 3;
      v74 = v64 + 3;
      v75 = *((unsigned __int8 *)v64 + 40);
      if ((((v75 >> 6) & 0xFFFFFF83 | (4 * ((v75 >> 1) & 0x1F))) ^ 0x7F) < 0x7D)
      {
        v78 = *(_OWORD *)v74;
        *((_BYTE *)v63 + 40) = *((_BYTE *)v64 + 40);
        *v73 = v78;
      }
      else
      {
        v76 = *v74;
        v77 = v64[4];
        sub_1BA895B64(*v74, v77, *((_BYTE *)v64 + 40));
        *(_QWORD *)v73 = v76;
        v63[4] = v77;
        *((_BYTE *)v63 + 40) = v75;
      }
      v63[6] = v64[6];
      v63[7] = v64[7];
      v79 = ((unint64_t)v63 + 71) & 0xFFFFFFFFFFFFFFF8;
      v80 = ((unint64_t)v64 + 71) & 0xFFFFFFFFFFFFFFF8;
      v81 = *(unsigned __int16 *)(v80 + 44);
      v82 = *(unsigned int *)(v80 + 40);
      swift_bridgeObjectRetain();
      if (v81 >> 9 <= 0x7EuLL)
      {
        v85 = v82 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v81 << 32);
        v86 = *(_QWORD *)v80;
        v87 = *(_QWORD *)(v80 + 8);
        v259 = v56;
        v88 = *(_QWORD *)(v80 + 16);
        v89 = *(_QWORD *)(v80 + 24);
        v254 = *(_QWORD *)(v80 + 32);
        sub_1BA8EBBF0(*(_QWORD *)v80, v87, v88, v89, v254, v85);
        *(_QWORD *)v79 = v86;
        *(_QWORD *)(v79 + 8) = v87;
        *(_QWORD *)(v79 + 16) = v88;
        *(_QWORD *)(v79 + 24) = v89;
        v56 = v259;
        *(_QWORD *)(v79 + 32) = v254;
        *(_WORD *)(v79 + 44) = WORD2(v85);
        *(_DWORD *)(v79 + 40) = v85;
      }
      else
      {
        v83 = *(_OWORD *)v80;
        v84 = *(_OWORD *)(v80 + 16);
        *(_OWORD *)(v79 + 30) = *(_OWORD *)(v80 + 30);
        *(_OWORD *)v79 = v83;
        *(_OWORD *)(v79 + 16) = v84;
      }
      *(_QWORD *)(v79 + 48) = *(_QWORD *)(v80 + 48);
      *(_QWORD *)(v79 + 56) = *(_QWORD *)(v80 + 56);
      v90 = v283 + 64 + v79;
      v68 = v295;
      v91 = v90 & v295;
      v92 = v283 + 64 + v80;
      v9 = v283;
      v93 = v92 & v295;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v94 = v93;
      v69 = v261;
      v257(v91, v94, v261);
      v54 = v293;
      v67 = __n;
    }
    v95 = v67 + v288;
    v96 = ((unint64_t)v63 + v67 + v288) & v54;
    v97 = ((unint64_t)v64 + v95) & v54;
    v257(v96, v97, v69);
    if (v274)
      v98 = v275;
    else
      v98 = v275 + 1;
    *(_QWORD *)((v263 + v96) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v263 + v97) & 0xFFFFFFFFFFFFF8);
    v99 = (v285 + v56 + v96) & v242;
    v100 = (v285 + v56 + v97) & v242;
    v101 = v98 + 7;
    v102 = ((((((((((((((v98 + 7 + v243) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    if (v273)
      v103 = v276;
    else
      v103 = v276 + 1;
    v277 = v103 + v266;
    v289 = ((v103 + 7 + (((v281 & ~v286) + v291 + v103 + v266) & v269)) & 0xFFFFFFFFFFFFFFF8) + 8;
    v104 = ((v278 + v291 + ((v267 + v9 + v289) & v68)) & v269) + v103;
    if (v102 > v104)
      v104 = ((((((((((((((v98 + 7 + v243) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 8;
    v105 = v102 + v268;
    if (v104 > v105)
      v105 = v104;
    if (v105 <= 0x90)
      v106 = 144;
    else
      v106 = v105;
    v107 = *(unsigned __int8 *)(v100 + v106);
    swift_bridgeObjectRetain();
    v294 = v106;
    v109 = ~v255;
    v110 = ~__dsta;
    v111 = ~v286;
    switch(v107)
    {
      case 0:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        v112 = (v247 + v99) & v109;
        v113 = (v247 + v100) & v109;
        v114 = *(void (**)(unint64_t, unint64_t, uint64_t))(v249 + 16);
        swift_bridgeObjectRetain();
        v114(v112, v113, v250);
        v115 = (_QWORD *)((v248 + v112) & 0xFFFFFFFFFFFFFFF8);
        v116 = (_QWORD *)((v248 + v113) & 0xFFFFFFFFFFFFFFF8);
        *v115 = *v116;
        v115[1] = v116[1];
        v117 = (_QWORD *)(((unint64_t)v115 + 23) & 0xFFFFFFFFFFFFFFF8);
        v118 = (_QWORD *)(((unint64_t)v116 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v117 = *v118;
        v117[1] = v118[1];
        v119 = (_QWORD *)(((unint64_t)v117 + 23) & 0xFFFFFFFFFFFFFFF8);
        v120 = (_QWORD *)(((unint64_t)v118 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v119 = *v120;
        v119[1] = v120[1];
        v121 = (_QWORD *)(((unint64_t)v119 + 23) & 0xFFFFFFFFFFFFFFF8);
        v122 = (_QWORD *)(((unint64_t)v120 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v121 = *v122;
        v121[1] = v122[1];
        v296 = (void *)(((unint64_t)v121 + v251) & v110);
        v123 = (const void *)(((unint64_t)v122 + v251) & v110);
        v124 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v252 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v124(v123, 1, v253))
        {
          memcpy(v296, v123, v98);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v252 + 16))(v296, v123, v253);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v296, 0, 1, v253);
        }
        v131 = v294;
        v194 = (_QWORD *)(((unint64_t)v296 + v101) & 0xFFFFFFFFFFFFFFF8);
        v195 = (_QWORD *)(((unint64_t)v123 + v101) & 0xFFFFFFFFFFFFFFF8);
        *v194 = *v195;
        v196 = (_QWORD *)(((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFF8);
        v197 = (_QWORD *)(((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v196 = *v197;
        v198 = (_QWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFFFF8);
        v199 = (_QWORD *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v198 = *v199;
        v200 = (_QWORD *)(((unint64_t)v198 + 15) & 0xFFFFFFFFFFFFF8);
        v201 = (_QWORD *)(((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v200 = *v201;
        v202 = (_QWORD *)(((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8);
        v203 = (_QWORD *)(((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v202 = *v203;
        v204 = (_QWORD *)(((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFF8);
        v205 = (_QWORD *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v204 = *v205;
        *(_QWORD *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFF8);
        *(_BYTE *)(v99 + v294) = 0;
        goto LABEL_99;
      case 1:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        *(_QWORD *)(v99 + 48) = *(_QWORD *)(v100 + 48);
        *(_QWORD *)(v99 + 56) = *(_QWORD *)(v100 + 56);
        v125 = *(_QWORD *)(v100 + 64);
        *(_BYTE *)(v99 + 72) = *(_BYTE *)(v100 + 72);
        *(_QWORD *)(v99 + 64) = v125;
        *(_QWORD *)(v99 + 80) = *(_QWORD *)(v100 + 80);
        *(_QWORD *)(v99 + 88) = *(_QWORD *)(v100 + 88);
        v297 = (uint64_t *)(v100 + 96);
        v126 = *(_BYTE *)(v100 + 106);
        v127 = *(unsigned __int16 *)(v100 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v126 == 255)
        {
          v128 = *v297;
          *(_DWORD *)(v99 + 103) = *(_DWORD *)(v100 + 103);
          *(_QWORD *)(v99 + 96) = v128;
        }
        else
        {
          v192 = v127 & 0xFF00FFFF | (v126 << 16);
          v193 = *v297;
          sub_1BA77A170(*v297, v192, SBYTE2(v192), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
          *(_QWORD *)(v99 + 96) = v193;
          *(_WORD *)(v99 + 104) = v192;
          *(_BYTE *)(v99 + 106) = BYTE2(v192);
        }
        v173 = 1;
        goto LABEL_89;
      case 2:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        *(_BYTE *)(v99 + 48) = *(_BYTE *)(v100 + 48);
        *(_QWORD *)(v99 + 56) = *(_QWORD *)(v100 + 56);
        v129 = *(_QWORD *)(v100 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v129 <= 2)
        {
          *(_OWORD *)(v99 + 64) = *(_OWORD *)(v100 + 64);
        }
        else
        {
          *(_BYTE *)(v99 + 64) = *(_BYTE *)(v100 + 64);
          *(_QWORD *)(v99 + 72) = *(_QWORD *)(v100 + 72);
          swift_bridgeObjectRetain();
        }
        v131 = v294;
        *(_QWORD *)(v99 + 80) = *(_QWORD *)(v100 + 80);
        *(_QWORD *)(v99 + 88) = *(_QWORD *)(v100 + 88);
        *(_QWORD *)(v99 + 96) = *(_QWORD *)(v100 + 96);
        *(_QWORD *)(v99 + 104) = *(_QWORD *)(v100 + 104);
        *(_QWORD *)(v99 + 112) = *(_QWORD *)(v100 + 112);
        *(_QWORD *)(v99 + 120) = *(_QWORD *)(v100 + 120);
        *(_BYTE *)(v99 + 128) = *(_BYTE *)(v100 + 128);
        *(_QWORD *)(v99 + 136) = *(_QWORD *)(v100 + 136);
        v218 = 2;
        goto LABEL_98;
      case 3:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        v130 = *(_QWORD *)(v100 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v130 >= 0xF)
        {
          *(_QWORD *)(v99 + 48) = *(_QWORD *)(v100 + 48);
          *(_QWORD *)(v99 + 56) = *(_QWORD *)(v100 + 56);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v99 + 48) = *(_OWORD *)(v100 + 48);
        }
        v131 = v294;
        *(_QWORD *)(v99 + 64) = *(_QWORD *)(v100 + 64);
        *(_QWORD *)(v99 + 72) = *(_QWORD *)(v100 + 72);
        *(_QWORD *)(v99 + 80) = *(_QWORD *)(v100 + 80);
        *(_QWORD *)(v99 + 88) = *(_QWORD *)(v100 + 88);
        *(_QWORD *)(v99 + 96) = *(_QWORD *)(v100 + 96);
        *(_QWORD *)(v99 + 104) = *(_QWORD *)(v100 + 104);
        *(_QWORD *)(v99 + 112) = *(_QWORD *)(v100 + 112);
        *(_BYTE *)(v99 + 120) = *(_BYTE *)(v100 + 120);
        *(_BYTE *)(v99 + v294) = 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_100;
      case 4:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        *(_QWORD *)(v99 + 48) = *(_QWORD *)(v100 + 48);
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 5:
        v260 = v278 + v291;
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        v132 = (_QWORD *)((v99 + 23) & 0xFFFFFFFFFFFFFFF8);
        v133 = (_QWORD *)((v100 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v132 = *v133;
        v132[1] = v133[1];
        v134 = ((unint64_t)v132 + 23) & 0xFFFFFFFFFFFFFFF8;
        v135 = ((unint64_t)v133 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v134 = *(_QWORD *)v135;
        *(_QWORD *)(v134 + 8) = *(_QWORD *)(v135 + 8);
        *(_BYTE *)(v134 + 16) = *(_BYTE *)(v135 + 16);
        *(_BYTE *)(v134 + 17) = *(_BYTE *)(v135 + 17);
        v136 = (_QWORD *)((v134 + 25) & 0xFFFFFFFFFFFFF8);
        v137 = (_QWORD *)((v135 + 25) & 0xFFFFFFFFFFFFF8);
        *v136 = *v137;
        v138 = (_QWORD *)(((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8);
        v139 = (_QWORD *)(((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v138 = *v139;
        v140 = (_QWORD *)(((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFF8);
        v141 = (_QWORD *)(((unint64_t)v139 + 15) & 0xFFFFFFFFFFFFF8);
        *v140 = *v141;
        v142 = (_QWORD *)(((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFF8);
        v143 = (_QWORD *)(((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFF8);
        *v142 = *v143;
        v144 = (_QWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFF8);
        v145 = (_QWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFF8);
        *v144 = *v145;
        v146 = (_QWORD *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFF8);
        v147 = (_QWORD *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFF8);
        *v146 = *v147;
        v148 = (_QWORD *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFF8);
        v149 = (_QWORD *)(((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFF8);
        *v148 = *v149;
        v150 = (_QWORD *)(((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8);
        v151 = (_QWORD *)(((unint64_t)v149 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v150 = *v151;
        v152 = (_QWORD *)(((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFF8);
        v153 = (_QWORD *)(((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFF8);
        *v152 = *v153;
        v154 = (_QWORD *)(((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFF8);
        v155 = (_QWORD *)(((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFF8);
        *v154 = *v155;
        v156 = (_QWORD *)(((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFF8);
        v157 = (_QWORD *)(((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFF8);
        *v156 = *v157;
        v158 = (_QWORD *)(((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFF8);
        v159 = (_QWORD *)(((unint64_t)v157 + 15) & 0xFFFFFFFFFFFFF8);
        *v158 = *v159;
        v160 = (_QWORD *)(((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFF8);
        v161 = (_QWORD *)(((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFF8);
        *v160 = *v161;
        v162 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
        v163 = ((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8;
        v164 = *(_QWORD *)(v163 + 8);
        if (v164 >= 0xFFFFFFFF)
          LODWORD(v164) = -1;
        v256 = v164;
        v264 = v164 + 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v264 > 2)
        {
          *(_OWORD *)v162 = *(_OWORD *)v163;
          v165 = v281;
        }
        else
        {
          v165 = v281;
          if (v256 == -1)
          {
            *(_BYTE *)v162 = *(_BYTE *)v163;
            *(_QWORD *)(v162 + 8) = *(_QWORD *)(v163 + 8);
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)v162 = *(_OWORD *)v163;
          }
        }
        v287 = (_QWORD *)((v165 + v163) & v111);
        v282 = (_QWORD *)((v165 + v162) & v111);
        *v282 = *v287;
        v224 = (_QWORD *)(((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8);
        v225 = (_QWORD *)(((unint64_t)v287 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v224 = *v225;
        v226 = (_QWORD *)(((unint64_t)v224 + v291 + 8) & v111);
        v227 = (_QWORD *)(((unint64_t)v225 + v291 + 8) & v111);
        v228 = v227[1];
        if (v228 >= 0xFFFFFFFF)
          LODWORD(v228) = -1;
        v229 = v228 - 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v229 < 0)
        {
          *v226 = *v227;
          v226[1] = v227[1];
          v226[2] = v227[2];
          v226[3] = v227[3];
          v226[4] = v227[4];
          v226[5] = v227[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v230 = *(_OWORD *)v227;
          v231 = *((_OWORD *)v227 + 2);
          *((_OWORD *)v226 + 1) = *((_OWORD *)v227 + 1);
          *((_OWORD *)v226 + 2) = v231;
          *(_OWORD *)v226 = v230;
        }
        v232 = (void *)(((unint64_t)v226 + v279) & v269);
        v233 = (const void *)(((unint64_t)v227 + v279) & v269);
        v234 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v246 + 48);
        if (v234(v233, 1, v245))
        {
          memcpy(v232, v233, v103);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v246 + 16))(v232, v233, v245);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v232, 0, 1, v245);
        }
        v235 = (void *)(((unint64_t)v226 + v277 + v291) & v269);
        v236 = (const void *)(((unint64_t)v227 + v277 + v291) & v269);
        if (v234(v236, 1, v245))
        {
          memcpy(v235, v236, v103);
          v237 = v246;
        }
        else
        {
          v237 = v246;
          (*(void (**)(void *, const void *, uint64_t))(v246 + 16))(v235, v236, v245);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v235, 0, 1, v245);
        }
        *(_QWORD *)(((unint64_t)v235 + v103 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v236
                                                                                           + v103
                                                                                           + 7) & 0xFFFFFFFFFFFFF8);
        v238 = ((unint64_t)v282 + v289 + v283) & v295;
        v239 = ((unint64_t)v287 + v289 + v283) & v295;
        swift_bridgeObjectRetain();
        v257(v238, v239, v261);
        v240 = (void *)((v260 + v238) & v269);
        v241 = (const void *)((v260 + v239) & v269);
        if (v234(v241, 1, v245))
        {
          memcpy(v240, v241, v103);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v237 + 16))(v240, v241, v245);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v237 + 56))(v240, 0, 1, v245);
        }
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 5;
        break;
      case 6:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 6;
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 7:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 7;
        swift_retain();
        break;
      case 8:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        *(_QWORD *)(v99 + 48) = *(_QWORD *)(v100 + 48);
        *(_QWORD *)(v99 + 56) = *(_QWORD *)(v100 + 56);
        *(_QWORD *)(v99 + 64) = *(_QWORD *)(v100 + 64);
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 9:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
        *(_QWORD *)(v99 + 40) = *(_QWORD *)(v100 + 40);
        *(_QWORD *)(v99 + 48) = *(_QWORD *)(v100 + 48);
        *(_QWORD *)(v99 + 56) = *(_QWORD *)(v100 + 56);
        *(_QWORD *)(v99 + 64) = *(_QWORD *)(v100 + 64);
        *(_QWORD *)(v99 + 72) = *(_QWORD *)(v100 + 72);
        *(_BYTE *)(v99 + 80) = *(_BYTE *)(v100 + 80);
        *(_QWORD *)(v99 + 88) = *(_QWORD *)(v100 + 88);
        *(_QWORD *)(v99 + 96) = *(_QWORD *)(v100 + 96);
        *(_BYTE *)(v99 + 104) = *(_BYTE *)(v100 + 104);
        v131 = v294;
        *(_BYTE *)(v99 + v294) = 9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 10:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v99 + 16) = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
        v166 = *(_QWORD *)(v100 + 32);
        v167 = *(_QWORD *)(v100 + 40);
        v168 = *(_QWORD *)(v100 + 48);
        v169 = *(_QWORD *)(v100 + 56);
        v170 = *(_QWORD *)(v100 + 64);
        v171 = *(_QWORD *)(v100 + 72);
        v172 = *(_BYTE *)(v100 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BA709DE8(v166, v167, v168, v169, v170, v171, v172);
        *(_QWORD *)(v99 + 32) = v166;
        *(_QWORD *)(v99 + 40) = v167;
        *(_QWORD *)(v99 + 48) = v168;
        *(_QWORD *)(v99 + 56) = v169;
        *(_QWORD *)(v99 + 64) = v170;
        *(_QWORD *)(v99 + 72) = v171;
        v173 = 10;
        *(_BYTE *)(v99 + 80) = v172;
LABEL_89:
        v131 = v294;
        *(_BYTE *)(v99 + v294) = v173;
        break;
      case 11:
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        v174 = (_QWORD *)((v99 + 23) & 0xFFFFFFFFFFFFFFF8);
        v175 = (_QWORD *)((v100 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v174 = *v175;
        v174[1] = v175[1];
        v176 = (_QWORD *)(((unint64_t)v174 + 23) & 0xFFFFFFFFFFFFFFF8);
        v177 = (_QWORD *)(((unint64_t)v175 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v176 = *v177;
        v176[1] = v177[1];
        v178 = (_QWORD *)(((unint64_t)v176 + v244 + 16) & v280);
        v179 = (_QWORD *)(((unint64_t)v177 + v244 + 16) & v280);
        *v178 = *v179;
        v178[1] = v179[1];
        v180 = ((unint64_t)v178 + v247) & v109;
        v181 = ((unint64_t)v179 + v247) & v109;
        v298 = *(void (**)(unint64_t, unint64_t, uint64_t))(v249 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v298(v180, v181, v250);
        v182 = (_QWORD *)((v248 + v180) & 0xFFFFFFFFFFFFFFF8);
        v183 = (_QWORD *)((v248 + v181) & 0xFFFFFFFFFFFFFFF8);
        *v182 = *v183;
        v182[1] = v183[1];
        v184 = (_QWORD *)(((unint64_t)v182 + 23) & 0xFFFFFFFFFFFFFFF8);
        v185 = (_QWORD *)(((unint64_t)v183 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v184 = *v185;
        v184[1] = v185[1];
        v186 = (_QWORD *)(((unint64_t)v184 + 23) & 0xFFFFFFFFFFFFFFF8);
        v187 = (_QWORD *)(((unint64_t)v185 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v186 = *v187;
        v186[1] = v187[1];
        v188 = (_QWORD *)(((unint64_t)v186 + 23) & 0xFFFFFFFFFFFFFFF8);
        v189 = (_QWORD *)(((unint64_t)v187 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v188 = *v189;
        v188[1] = v189[1];
        v299 = (void *)(((unint64_t)v188 + v251) & v110);
        v190 = (const void *)(((unint64_t)v189 + v251) & v110);
        v191 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v252 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v191(v190, 1, v253))
        {
          memcpy(v299, v190, v98);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v252 + 16))(v299, v190, v253);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v299, 0, 1, v253);
        }
        v131 = v294;
        v206 = (_QWORD *)(((unint64_t)v299 + v101) & 0xFFFFFFFFFFFFFFF8);
        v207 = (_QWORD *)(((unint64_t)v190 + v101) & 0xFFFFFFFFFFFFFFF8);
        *v206 = *v207;
        v208 = (_QWORD *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFF8);
        v209 = (_QWORD *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v208 = *v209;
        v210 = (_QWORD *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFFFF8);
        v211 = (_QWORD *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v210 = *v211;
        v212 = (_QWORD *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFF8);
        v213 = (_QWORD *)(((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v212 = *v213;
        v214 = (_QWORD *)(((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8);
        v215 = (_QWORD *)(((unint64_t)v213 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v214 = *v215;
        v216 = (_QWORD *)(((unint64_t)v214 + 15) & 0xFFFFFFFFFFFFF8);
        v217 = (_QWORD *)(((unint64_t)v215 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v216 = *v217;
        *(_QWORD *)(((unint64_t)v216 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFF8);
        v218 = 11;
LABEL_98:
        *(_BYTE *)(v99 + v131) = v218;
LABEL_99:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_100:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_101:
        swift_bridgeObjectRetain();
        break;
      default:
        if (v111 <= 3)
          v108 = v111;
        else
          v108 = 4;
        __asm { BR              X11 }
        return result;
    }
    v219 = (_QWORD *)(((v99 | 7) + v131 + 1) & 0xFFFFFFFFFFFFFFF8);
    v220 = (uint64_t *)(((v100 | 7) + v131 + 1) & 0xFFFFFFFFFFFFFFF8);
    v221 = *v220;
    v222 = v220[1];
    sub_1BA69D44C(*v220, v222);
    *v219 = v221;
    v219[1] = v222;
    *(_QWORD *)(((unint64_t)v219 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v220 + 23) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v292;
}

uint64_t sub_1BAA108CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(unint64_t, uint64_t);
  uint64_t v67;
  size_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  size_t v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  size_t v85;
  void (*v86)(unint64_t, unint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  size_t v98;
  unint64_t v99;
  size_t v100;
  int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  size_t v107;
  unint64_t v108;
  unint64_t v109;
  size_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  _OWORD *v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  __int128 v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  size_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  size_t v148;
  unint64_t v149;
  size_t v150;
  size_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 v160;
  _OWORD *v161;
  uint64_t *v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t *v172;
  unsigned __int8 v173;
  int32x2_t v174;
  uint64_t *v175;
  uint32x2_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  size_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int (*v189)(unint64_t, uint64_t, uint64_t);
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  void (*v196)(unint64_t, unint64_t, uint64_t);
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  const void *v205;
  unsigned int (*v206)(const void *, uint64_t, uint64_t);
  __int128 v207;
  unint64_t v208;
  unint64_t v209;
  unsigned int v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(uint64_t, unint64_t, uint64_t);
  uint64_t v222;
  unsigned __int8 v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  unint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  int v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  void (*v284)(unint64_t, unint64_t, uint64_t);
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  const void *v293;
  unsigned int (*v294)(const void *, uint64_t, uint64_t);
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _BOOL8 v320;
  size_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  size_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int (*v347)(uint64_t, uint64_t, uint64_t);
  unint64_t v348;
  unsigned int v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  void (*v355)(unint64_t, unint64_t, uint64_t);
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  const void *v364;
  unsigned int (*v365)(const void *, uint64_t, uint64_t);
  uint64_t v366;
  unsigned __int8 v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  unint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  _QWORD *v399;
  _QWORD *v400;
  _QWORD *v401;
  _QWORD *v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned __int8 v414;
  char v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  void (*v424)(unint64_t, unint64_t, uint64_t);
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  const void *v433;
  unsigned int (*v434)(const void *, uint64_t, uint64_t);
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  const void *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  char v460;
  void *v461;
  const void *v462;
  unint64_t v463;
  unint64_t v464;
  void *v465;
  const void *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t *v471;
  uint64_t v472;
  unint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  _QWORD *v490;
  _QWORD *v491;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  _QWORD *v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  unint64_t v504;
  int v505;
  __int128 v506;
  __int128 v507;
  void *v508;
  const void *v509;
  unsigned int (*v510)(const void *, uint64_t, uint64_t);
  void *v511;
  const void *v512;
  size_t v513;
  unint64_t v514;
  void (*v515)(size_t, unint64_t, uint64_t);
  void *v516;
  uint64_t v517;
  const void *v518;
  unint64_t v519;
  size_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t *v524;
  uint64_t *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t result;
  uint64_t v531;
  _QWORD *__src;
  int __srca;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  void (*__dst)(uint64_t, unint64_t, uint64_t);
  void *__dsta;
  size_t v552;
  size_t v553;
  size_t v554;
  size_t v555;
  int v556;
  uint64_t v557;
  unsigned int v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t (*v561)(void *, uint64_t, uint64_t);
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  int v570;
  size_t v571;
  size_t v572;
  size_t __n;
  size_t __na;
  uint64_t v575;
  size_t v576;
  size_t v577;
  unint64_t v578;
  unint64_t v579;
  unsigned int (*v580)(uint64_t, uint64_t, uint64_t);
  uint64_t v581;
  uint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  int v585;
  _QWORD *v586;
  size_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  size_t v592;
  void *v593;
  uint64_t *v594;
  void *v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int (*v605)(const void *, uint64_t, uint64_t);
  uint64_t v606;
  void (*v607)(unint64_t, uint64_t);
  _BOOL8 v608;
  _BOOL8 v609;
  _BOOL8 v610;
  _BOOL8 v611;
  _BOOL8 v612;
  uint64_t v613;
  unsigned int v614;
  size_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  void (*v629)(unint64_t, unint64_t, uint64_t);
  void *v630;
  uint64_t *v631;
  void *v632;
  uint64_t v633;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BB86EB84();
  v8 = *(_QWORD *)(v7 - 8);
  v624 = a1;
  v625 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v625 | 7) + v6;
  v628 = ~(v625 | 7);
  v10 = (_QWORD *)((v9 + a1) & v628);
  v590 = a2;
  v606 = v625 | 7;
  v613 = v9;
  v11 = (_QWORD *)((v9 + a2) & v628);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v627 = ~v625;
  v12 = ((unint64_t)v10 + v625 + 16) & ~v625;
  v13 = ((unint64_t)v11 + v625 + 16) & ~v625;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v14(v12, v13, v7);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (v15 + v625 + v12) & ~v625;
  v17 = (v15 + v625 + v13) & ~v625;
  v14(v16, v17, v7);
  v18 = (void *)((v15 + v625 + v16) & ~v625);
  v19 = (void *)((v15 + v625 + v17) & ~v625);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v21 = v20(v18, 1, v7);
  v561 = v20;
  v22 = v20(v19, 1, v7);
  v589 = v7;
  __dst = (void (*)(uint64_t, unint64_t, uint64_t))v14;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v18, v19, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v22)
    {
      v14((uint64_t)v18, (uint64_t)v19, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v18, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v23 = v15;
  else
    v23 = v15 + 1;
  memcpy(v18, v19, v23);
LABEL_10:
  v24 = v613;
  v557 = v8;
  v614 = *(_DWORD *)(v8 + 84);
  if (v614)
    v25 = v15;
  else
    v25 = v15 + 1;
  v26 = (_QWORD *)(((unint64_t)v18 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (uint64_t)v19 + v25 + 7;
  v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v26 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v28 &= 0xFFFFFFFFFFFFF8uLL;
  *v29 = *(_QWORD *)v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v28 + 15) & 0xFFFFFFFFFFFFF8);
  *v30 = *v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (((((((v25 + ((v15 + v625 + ((((v625 + 16) | v625) + v15) & v627)) & v627) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v544 = sub_1BB86C8B0();
  v33 = v15;
  v34 = *(_QWORD *)(v544 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v549 = sub_1BB871E24();
  v36 = *(_QWORD *)(v549 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v37 | v35;
  v39 = sub_1BB86E710();
  v40 = *(_QWORD *)(v39 - 8);
  v547 = v40;
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = v41 | 7;
  v43 = v37 | v35 | v625 | v41 | 7;
  v44 = (v24 & v628) + v43 + v32 + 8;
  v45 = (_QWORD *)((v44 + v624) & ~v43);
  v46 = v590;
  v591 = v43;
  v597 = ~v43;
  v47 = (_QWORD *)((v44 + v46) & ~v43);
  if (v614 <= 0x7FFFFFFF)
    v48 = 0x7FFFFFFF;
  else
    v48 = v614;
  if (v48 - 1 >= v48)
    --v48;
  v541 = ~v35;
  v542 = v34;
  v540 = v35 + 16;
  v543 = *(_QWORD *)(v34 + 64) + 7;
  v546 = ~v37;
  v545 = v37 + 16;
  v49 = (v37
       + 16
       + ((((((((v543 + ((v35 + 16) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v37;
  v570 = *(_DWORD *)(v36 + 84);
  v50 = *(_QWORD *)(v36 + 64);
  v537 = ~v42;
  v51 = (v41 + 176) & ~v42;
  v536 = v41 + 16;
  v575 = (v41 + 16) & ~v42;
  v588 = ~v41;
  v584 = *(unsigned __int8 *)(v40 + 80);
  v538 = v41 + 48;
  v582 = (v41 + 48) & ~v41;
  v585 = *(_DWORD *)(v40 + 84);
  v587 = *(_QWORD *)(v40 + 64);
  v534 = v38 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v535 = v38;
  v577 = v33;
  v581 = (v38 + 48) & v534;
  v52 = v625 + 48;
  v53 = v33 + ((v625 + 128) & v627);
  v54 = v33 + 7;
  v55 = ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v56 = (v625 + 48) & v628;
  v539 = v39;
  v548 = v36;
  __n = v53;
  if ((v48 & 0x80000000) != 0)
  {
    v565 = (v41 + 176) & ~v42;
    v68 = v53 + v606;
    v69 = v47;
    v70 = v45;
    __srca = v561((void *)((v53 + v606 + (((unint64_t)v45 + v52) & v628)) & v628), v614, v589);
    v71 = (v68 + (((unint64_t)v69 + v52) & v628)) & v628;
    v51 = v565;
    v58 = v561((void *)v71, v614, v589);
    v45 = v70;
    v56 = (v625 + 48) & v628;
    v47 = v69;
    if (!__srca)
      goto LABEL_22;
  }
  else
  {
    v57 = v47[1];
    if (v57 >= 0xFFFFFFFF)
      LODWORD(v57) = -1;
    v58 = v57 + 1;
    if (v45[1] > 0xFFFFFFFEuLL)
    {
LABEL_22:
      v568 = v49;
      v59 = v625;
      v559 = v55;
      if (v58)
      {
        v531 = v56;
        __src = v47;
        v60 = v51;
        __dsta = v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v61 = ~(v625 | 7);
        v62 = ((unint64_t)__dsta + v52) & v628;
        if ((v614 & 0x80000000) != 0)
        {
          v64 = v589;
          v65 = v588;
          if (((unsigned int (*)(unint64_t))v561)((v625 + ((v62 + 71) & 0xFFFFFFFFFFFFFFF8) + 64) & v627))
          {
LABEL_27:
            v66 = *(void (**)(unint64_t, uint64_t))(v557 + 8);
            v67 = ~v625;
LABEL_64:
            v105 = __n + v606;
            v607 = v66;
            v615 = v105;
            v106 = (v105 + v62) & v628;
            v66(v106, v64);
            swift_bridgeObjectRelease();
            if (v570)
              v107 = v50;
            else
              v107 = v50 + 1;
            v108 = (v591 + v559 + v106) & v597;
            v109 = ((((((((((((((v107 + 7 + v568) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 8;
            if (v585)
              v110 = v587;
            else
              v110 = v587 + 1;
            v111 = v110 + v582;
            v112 = v625 + 8;
            v113 = v577 + v584;
            v114 = ((v577
                   + v584
                   + ((v625 + 8 + v60 + ((v110 + 7 + ((v575 + v584 + v110 + v582) & v65)) & 0xFFFFFFFFFFFFFFF8)) & v67)) & v65)
                 + v110;
            if (v109 > v114)
              v114 = v109;
            v115 = v109 + v581;
            if (v114 > v115)
              v115 = v114;
            if (v115 <= 0x90)
              v116 = 144;
            else
              v116 = v115;
            v626 = v116;
            switch(*(_BYTE *)(v108 + v116))
            {
              case 0:
                swift_bridgeObjectRelease();
                v182 = v540 + v108;
                goto LABEL_143;
              case 1:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v183 = v559;
                v184 = v531;
                v185 = v615;
                if (*(unsigned __int8 *)(v108 + 106) != 255)
                {
                  v186 = *(unsigned __int16 *)(v108 + 104) | (*(unsigned __int8 *)(v108 + 106) << 16);
                  sub_1BA77A170(*(_QWORD *)(v108 + 96), v186, SBYTE2(v186), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
                }
                goto LABEL_148;
              case 2:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v108 + 72) >= 3uLL)
                  swift_bridgeObjectRelease();
                goto LABEL_145;
              case 3:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v108 + 56) >= 0xFuLL)
                  swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_146;
              case 4:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_146;
              case 5:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(((((((((((((((((((((((((((((((((v108 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                           + 25) & 0xFFFFFFFFFFFFF8)
                                                         + 15) & 0xFFFFFFFFFFFFF8)
                                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                                     + 15) & 0xFFFFFFFFFFFFF8)
                                                   + 15) & 0xFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8)
                                               + 15) & 0xFFFFFFFFFFFFF8)
                                             + 15) & 0xFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 8) >= 0xFFFFFFFFuLL)
                  swift_bridgeObjectRelease();
                v578 = (v536
                      + ((((((((((((((((((((((((((((((((v108 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                  + 25) & 0xFFFFFFFFFFFFF8)
                                                + 15) & 0xFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)) & v537;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v187 = (v584 + ((v578 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v537;
                LODWORD(v188) = -1;
                if (*(_QWORD *)(v187 + 8) < 0xFFFFFFFFuLL)
                  v188 = *(_QWORD *)(((v584 + ((v578 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v537) + 8);
                if ((int)v188 - 1 < 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                v189 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v547 + 48);
                if (!v189((v538 + v187) & v588, 1, v539))
                  (*(void (**)(unint64_t, uint64_t))(v547 + 8))((v538 + v187) & v588, v539);
                if (!v189((v111 + v584 + v187) & v588, 1, v539))
                  (*(void (**)(size_t, uint64_t))(v547 + 8))((v111 + v584 + v187) & v588, v539);
                swift_bridgeObjectRelease();
                v190 = (v112 + v578 + ((v110 + 7 + ((v575 + v584 + v582 + v110) & v588)) & 0xFFFFFFFFFFFFFFF8)) & v627;
                v607(v190, v589);
                v191 = (v113 + v190) & v588;
                v183 = v559;
                v184 = v531;
                v185 = v615;
                v61 = v628;
                if (!v189(v191, 1, v539))
                  (*(void (**)(unint64_t, uint64_t))(v547 + 8))(v191, v539);
                goto LABEL_148;
              case 6:
                swift_bridgeObjectRelease();
                goto LABEL_146;
              case 7:
                swift_release();
                goto LABEL_147;
              case 8:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_146;
              case 9:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_146;
              case 0xA:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1BA6C0C20(*(_QWORD *)(v108 + 32), *(_QWORD *)(v108 + 40), *(_QWORD *)(v108 + 48), *(_QWORD *)(v108 + 56), *(_QWORD *)(v108 + 64), *(_QWORD *)(v108 + 72), *(_BYTE *)(v108 + 80));
                goto LABEL_147;
              case 0xB:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v182 = v540
                     + ((v535 + ((((v108 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v534);
LABEL_143:
                v192 = v182 & v541;
                (*(void (**)(uint64_t, uint64_t))(v542 + 8))(v182 & v541, v544);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v193 = (v545
                      + ((((((((v543 + v192) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)) & v546;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v548 + 48))(v193, 1, v549))
                  (*(void (**)(unint64_t, uint64_t))(v548 + 8))(v193, v549);
LABEL_145:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_146:
                swift_bridgeObjectRelease();
LABEL_147:
                v183 = v559;
                v184 = v531;
                v185 = v615;
LABEL_148:
                sub_1BA69D314(*(_QWORD *)((v108 + v626 + 8) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v108 + v626 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
                swift_bridgeObjectRelease();
                v78 = ((((v185 + v184) & v61) + v183 + v591) & v597)
                    + (((v626 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 8;
                v79 = __dsta;
                v47 = __src;
                break;
              default:
                if (v116 <= 3)
                  v117 = v116;
                else
                  v117 = 4;
                __asm { BR              X12 }
                return result;
            }
LABEL_149:
            memcpy(v79, v47, v78);
            return v624;
          }
        }
        else
        {
          v63 = *(_QWORD *)((((unint64_t)__dsta + v52) & v628) + 0x38);
          if (v63 >= 0xFFFFFFFF)
            LODWORD(v63) = -1;
          v64 = v589;
          v65 = v588;
          if ((_DWORD)v63 != -1)
            goto LABEL_27;
        }
        sub_1BA986FA0(*(_QWORD *)v62, *(_QWORD *)(v62 + 8), *(_BYTE *)(v62 + 16));
        v102 = *(unsigned __int8 *)(v62 + 40);
        if ((((v102 >> 6) & 0xFFFFFF83 | (4 * ((v102 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
          sub_1BA895B84(*(_QWORD *)(v62 + 24), *(_QWORD *)(v62 + 32), v102);
        swift_bridgeObjectRelease();
        v103 = (v62 + 71) & 0xFFFFFFFFFFFFFFF8;
        if (*(unsigned __int16 *)(v103 + 44) >> 9 <= 0x7EuLL)
          sub_1BA8EBC78(*(_QWORD *)v103, *(_QWORD *)(v103 + 8), *(_QWORD *)(v103 + 16), *(_QWORD *)(v103 + 24), *(_QWORD *)(v103 + 32), *(unsigned int *)(v103 + 40) | ((unint64_t)*(unsigned __int16 *)(v103 + 44) << 32));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 = ~v625;
        v104 = (v625 + v103 + 64) & v627;
        v66 = *(void (**)(unint64_t, uint64_t))(v557 + 8);
        v66(v104, v64);
        goto LABEL_64;
      }
      v555 = v54;
      *v45 = *v47;
      v45[1] = v47[1];
      v89 = v47;
      v90 = v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v90[2] = v89[2];
      *((_BYTE *)v90 + 24) = *((_BYTE *)v89 + 24);
      v90[4] = v89[4];
      v90[5] = v89[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v91 = ~(v625 | 7);
      v92 = (uint64_t *)(((unint64_t)v90 + v52) & v628);
      v93 = (uint64_t *)(((unint64_t)v89 + v52) & v628);
      v567 = v51;
      v552 = v50;
      if ((v614 & 0x80000000) != 0)
      {
        v126 = v561((void *)((v625 + 64 + (((unint64_t)v92 + 71) & 0xFFFFFFFFFFFFFFF8)) & v627), v614, v589);
        v91 = ~(v625 | 7);
        v59 = v625;
        v96 = v589;
        v95 = v561((void *)((v625 + 64 + (((unint64_t)v93 + 71) & 0xFFFFFFFFFFFFFFF8)) & v627), v614, v589);
        if (!v126)
          goto LABEL_51;
      }
      else
      {
        v94 = v93[7];
        if (v94 >= 0xFFFFFFFF)
          LODWORD(v94) = -1;
        v95 = v94 + 1;
        v96 = v589;
        if (*(_QWORD *)((((unint64_t)v90 + v52) & v628) + 0x38) > 0xFFFFFFFEuLL)
        {
LABEL_51:
          if (v95)
          {
            sub_1BA986FA0(*(_QWORD *)(((unint64_t)v90 + v52) & v628), *(_QWORD *)((((unint64_t)v90 + v52) & v628) + 8), *(_BYTE *)((((unint64_t)v90 + v52) & v628) + 0x10));
            v97 = *(unsigned __int8 *)((((unint64_t)v90 + v52) & v628) + 0x28);
            v98 = v555;
            if ((((v97 >> 6) & 0xFFFFFF83 | (4 * ((v97 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
              sub_1BA895B84(*(_QWORD *)((((unint64_t)v90 + v52) & v628) + 0x18), *(_QWORD *)((((unint64_t)v90 + v52) & v628) + 0x20), v97);
            swift_bridgeObjectRelease();
            v99 = ((unint64_t)v92 + 71) & 0xFFFFFFFFFFFFFFF8;
            if (*(unsigned __int16 *)(v99 + 44) >> 9 <= 0x7EuLL)
              sub_1BA8EBC78(*(_QWORD *)v99, *(_QWORD *)(v99 + 8), *(_QWORD *)(v99 + 16), *(_QWORD *)(v99 + 24), *(_QWORD *)(v99 + 32), *(unsigned int *)(v99 + 40) | ((unint64_t)*(unsigned __int16 *)(v99 + 44) << 32));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v557 + 8))((v59 + v99 + 64) & v627, v96);
            v100 = __n;
            memcpy(v92, v93, __n);
            v101 = v570;
            goto LABEL_199;
          }
          v166 = *v93;
          v167 = v93[1];
          v168 = *((_BYTE *)v93 + 16);
          sub_1BA987528(*v93, v167, v168);
          v169 = *v92;
          v170 = v92[1];
          *v92 = v166;
          v92[1] = v167;
          v171 = *((_BYTE *)v92 + 16);
          *((_BYTE *)v92 + 16) = v168;
          sub_1BA986FA0(v169, v170, v171);
          v172 = v92 + 3;
          v173 = *((_BYTE *)v93 + 40);
          v174.i32[0] = v173;
          v174.i32[1] = *((unsigned __int8 *)v92 + 40);
          v175 = v93 + 3;
          v176 = vcgt_u32((uint32x2_t)veor_s8(vorr_s8(vand_s8((int8x8_t)vadd_s32(v174, v174), (int8x8_t)0x7C0000007CLL), (int8x8_t)vshr_n_u32((uint32x2_t)v174, 6uLL)), (int8x8_t)0x7F0000007FLL), (uint32x2_t)0x7C0000007CLL);
          if ((v176.i8[4] & 1) != 0)
          {
            if ((v176.i8[0] & 1) != 0)
            {
              v177 = *v175;
              v178 = v93[4];
              sub_1BA895B64(*v175, v178, *((_BYTE *)v93 + 40));
              v179 = *v172;
              v180 = v92[4];
              *v172 = v177;
              v92[4] = v178;
              v181 = *((_BYTE *)v92 + 40);
              *((_BYTE *)v92 + 40) = v173;
              sub_1BA895B84(v179, v180, v181);
LABEL_190:
              v92[6] = v93[6];
              v92[7] = v93[7];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v300 = ((unint64_t)v92 + 71) & 0xFFFFFFFFFFFFFFF8;
              v301 = ((unint64_t)v93 + 71) & 0xFFFFFFFFFFFFFFF8;
              v302 = *(unsigned int *)(v301 + 40) | ((unint64_t)*(unsigned __int16 *)(v301 + 44) << 32);
              if (*(unsigned __int16 *)(v300 + 44) >> 9 <= 0x7EuLL)
              {
                if (((v302 >> 41) & 0x7F) == 0x7F)
                {
                  sub_1BAA14AE0(((unint64_t)v92 + 71) & 0xFFFFFFFFFFFFFFF8);
                  v305 = *(_OWORD *)(v301 + 30);
                  v306 = *(_OWORD *)(v301 + 16);
                  *(_OWORD *)v300 = *(_OWORD *)v301;
                  *(_OWORD *)(v300 + 16) = v306;
                  *(_OWORD *)(v300 + 30) = v305;
                }
                else
                {
                  v311 = *(_QWORD *)v301;
                  v310 = *(_QWORD *)(v301 + 8);
                  v312 = *(_QWORD *)(v301 + 16);
                  v619 = *(_QWORD *)(v301 + 24);
                  v563 = *(_QWORD *)(v301 + 32);
                  sub_1BA8EBBF0(*(_QWORD *)v301, v310, v312, v619, v563, v302);
                  v313 = *(_QWORD *)v300;
                  v314 = *(_QWORD *)(v300 + 8);
                  v315 = *(_QWORD *)(v300 + 16);
                  v316 = *(_QWORD *)(v300 + 24);
                  v317 = *(_QWORD *)(v300 + 32);
                  v318 = *(unsigned int *)(v300 + 40) | ((unint64_t)*(unsigned __int16 *)(v300 + 44) << 32);
                  *(_QWORD *)v300 = v311;
                  *(_QWORD *)(v300 + 8) = v310;
                  *(_QWORD *)(v300 + 16) = v312;
                  *(_QWORD *)(v300 + 24) = v619;
                  *(_QWORD *)(v300 + 32) = v563;
                  *(_DWORD *)(v300 + 40) = v302;
                  *(_WORD *)(v300 + 44) = WORD2(v302);
                  sub_1BA8EBC78(v313, v314, v315, v316, v317, v318);
                }
              }
              else if (((v302 >> 41) & 0x7F) == 0x7F)
              {
                v303 = *(_OWORD *)v301;
                v304 = *(_OWORD *)(v301 + 16);
                *(_OWORD *)(v300 + 30) = *(_OWORD *)(v301 + 30);
                *(_OWORD *)v300 = v303;
                *(_OWORD *)(v300 + 16) = v304;
              }
              else
              {
                v308 = *(_QWORD *)v301;
                v307 = *(_QWORD *)(v301 + 8);
                v309 = *(_QWORD *)(v301 + 16);
                v618 = *(_QWORD *)(v301 + 24);
                v562 = *(_QWORD *)(v301 + 32);
                sub_1BA8EBBF0(*(_QWORD *)v301, v307, v309, v618, v562, v302);
                *(_QWORD *)v300 = v308;
                *(_QWORD *)(v300 + 8) = v307;
                *(_QWORD *)(v300 + 16) = v309;
                *(_QWORD *)(v300 + 24) = v618;
                *(_QWORD *)(v300 + 32) = v562;
                *(_WORD *)(v300 + 44) = WORD2(v302);
                *(_DWORD *)(v300 + 40) = v302;
              }
              v101 = v570;
              v98 = v555;
              *(_QWORD *)(v300 + 48) = *(_QWORD *)(v301 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v300 + 56) = *(_QWORD *)(v301 + 56);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v319 = (v59 + 64 + v300) & v627;
              v96 = v589;
              __dst(v319, (v59 + 64 + v301) & v627, v589);
              goto LABEL_198;
            }
            sub_1BA895B84(*v172, v92[4], *((_BYTE *)v92 + 40));
          }
          else if ((v176.i8[0] & 1) != 0)
          {
            v295 = *v175;
            v296 = v93[4];
            sub_1BA895B64(*v175, v296, *((_BYTE *)v93 + 40));
            *v172 = v295;
            v92[4] = v296;
            *((_BYTE *)v92 + 40) = v173;
            goto LABEL_190;
          }
          v299 = *(_OWORD *)v175;
          *((_BYTE *)v92 + 40) = *((_BYTE *)v93 + 40);
          *(_OWORD *)v172 = v299;
          goto LABEL_190;
        }
      }
      if (v95)
      {
        v100 = __n;
        memcpy(v92, v93, __n);
        v101 = v570;
        v98 = v555;
LABEL_199:
        v320 = v101 == 0;
        v321 = v100 + v606;
        v322 = ((unint64_t)v92 + v100 + v606) & v91;
        v323 = ((unint64_t)v93 + v321) & v91;
        __dst(((unint64_t)v92 + v321) & v91, v323, v96);
        *(_QWORD *)((v98 + v322) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v98 + v323) & 0xFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v324 = (v591 + v559 + v322) & v597;
        v325 = (v591 + v559 + v323) & v597;
        if (v324 == v325)
        {
          v329 = v582;
          v330 = v575 + v584;
          v334 = v577 + v584;
          v339 = ~v625;
          v340 = v567;
          v341 = v568;
          v331 = v588;
        }
        else
        {
          v326 = v552 + v320 + 7;
          v327 = ((((((((((((((v326 + v568) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 8;
          if (v585)
            v328 = v587;
          else
            v328 = v587 + 1;
          v329 = v582;
          v330 = v575 + v584;
          __na = v328 + v582;
          v331 = v588;
          v332 = (v575 + v584 + v328 + v582) & v588;
          v576 = v328 + 7;
          v333 = ((v328 + 7 + v332) & 0xFFFFFFFFFFFFFFF8) + 8;
          v334 = v577 + v584;
          v592 = v328;
          v335 = ((v577 + v584 + ((v567 + v59 + v333) & v627)) & v588) + v328;
          if (v327 > v335)
            v335 = ((((((((((((((v326 + v568) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 8;
          v336 = v327 + v581;
          if (v335 > v336)
            v336 = v335;
          if (v336 <= 0x90)
            v337 = 144;
          else
            v337 = v336;
          v633 = v337;
          v564 = v333;
          v571 = v552 + v320;
          switch(*(_BYTE *)(v324 + v337))
          {
            case 0:
              swift_bridgeObjectRelease();
              v342 = v540 + v324;
              goto LABEL_244;
            case 1:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(unsigned __int8 *)(v324 + 106) != 255)
              {
                v343 = *(unsigned __int16 *)(v324 + 104) | (*(unsigned __int8 *)(v324 + 106) << 16);
                sub_1BA77A170(*(_QWORD *)(v324 + 96), v343, SBYTE2(v343), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
              }
              goto LABEL_248;
            case 2:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v324 + 72) >= 3uLL)
                swift_bridgeObjectRelease();
              goto LABEL_246;
            case 3:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v324 + 56) >= 0xFuLL)
                swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_247;
            case 4:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_247;
            case 5:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(((((((((((((((((((((((((((((((((v324 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                         + 25) & 0xFFFFFFFFFFFFF8)
                                                       + 15) & 0xFFFFFFFFFFFFF8)
                                                     + 15) & 0xFFFFFFFFFFFFFFF8)
                                                   + 15) & 0xFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8)
                                               + 15) & 0xFFFFFFFFFFFFF8)
                                             + 15) & 0xFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 8) >= 0xFFFFFFFFuLL)
                swift_bridgeObjectRelease();
              v579 = (v536
                    + ((((((((((((((((((((((((((((((((v324 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                + 25) & 0xFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)) & v537;
              swift_bridgeObjectRelease();
              v344 = (v579 + 15) & 0xFFFFFFFFFFFFFFF8;
              swift_bridgeObjectRelease();
              v345 = (v584 + v344 + 8) & v537;
              LODWORD(v346) = -1;
              if (*(_QWORD *)(v345 + 8) < 0xFFFFFFFFuLL)
                v346 = *(_QWORD *)(((v584 + v344 + 8) & v537) + 8);
              if ((int)v346 - 1 < 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              v347 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v547 + 48);
              if (!v347((v538 + v345) & v588, 1, v539))
                (*(void (**)(uint64_t, uint64_t))(v547 + 8))((v538 + v345) & v588, v539);
              if (!v347((__na + v584 + v345) & v588, 1, v539))
                (*(void (**)(size_t, uint64_t))(v547 + 8))((__na + v584 + v345) & v588, v539);
              swift_bridgeObjectRelease();
              v329 = v582;
              (*(void (**)(unint64_t, uint64_t))(v557 + 8))((v59 + v579 + ((v576 + ((v330 + v582 + v592) & v588)) & 0xFFFFFFFFFFFFFFF8) + 8) & v627, v589);
              v348 = (v334 + ((v59 + v579 + ((v576 + ((v330 + v582 + v592) & v588)) & 0xFFFFFFFFFFFFFFF8) + 8) & v627)) & v588;
              v349 = v347(v348, 1, v539);
              v331 = v588;
              if (!v349)
                (*(void (**)(unint64_t, uint64_t))(v547 + 8))(v348, v539);
              goto LABEL_248;
            case 6:
              swift_bridgeObjectRelease();
              goto LABEL_247;
            case 7:
              swift_release();
              goto LABEL_248;
            case 8:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_247;
            case 9:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_247;
            case 0xA:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1BA6C0C20(*(_QWORD *)(v324 + 32), *(_QWORD *)(v324 + 40), *(_QWORD *)(v324 + 48), *(_QWORD *)(v324 + 56), *(_QWORD *)(v324 + 64), *(_QWORD *)(v324 + 72), *(_BYTE *)(v324 + 80));
              goto LABEL_248;
            case 0xB:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v342 = v540 + ((v535 + ((((v324 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v534);
LABEL_244:
              v350 = v342 & v541;
              (*(void (**)(uint64_t, uint64_t))(v542 + 8))(v342 & v541, v544);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v351 = (v545
                    + ((((((((v543 + v350) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & v546;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v548 + 48))(v351, 1, v549))
                (*(void (**)(unint64_t, uint64_t))(v548 + 8))(v351, v549);
LABEL_246:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_247:
              swift_bridgeObjectRelease();
LABEL_248:
              v340 = v567;
              switch(*(_BYTE *)(v325 + v633))
              {
                case 0:
                  v608 = v320;
                  v601 = v330;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  v353 = (v540 + v324) & v541;
                  v354 = (v540 + v325) & v541;
                  v355 = *(void (**)(unint64_t, unint64_t, uint64_t))(v542 + 16);
                  swift_bridgeObjectRetain();
                  v355(v353, v354, v544);
                  v356 = (_QWORD *)((v543 + v353) & 0xFFFFFFFFFFFFFFF8);
                  v357 = (_QWORD *)((v543 + v354) & 0xFFFFFFFFFFFFFFF8);
                  *v356 = *v357;
                  v356[1] = v357[1];
                  v358 = (_QWORD *)(((unint64_t)v356 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v359 = (_QWORD *)(((unint64_t)v357 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v358 = *v359;
                  v358[1] = v359[1];
                  v360 = (_QWORD *)(((unint64_t)v358 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v361 = (_QWORD *)(((unint64_t)v359 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v360 = *v361;
                  v360[1] = v361[1];
                  v362 = (_QWORD *)(((unint64_t)v360 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v363 = (_QWORD *)(((unint64_t)v361 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v362 = *v363;
                  v362[1] = v363[1];
                  v593 = (void *)(((unint64_t)v362 + v545) & v546);
                  v364 = (const void *)(((unint64_t)v363 + v545) & v546);
                  v365 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v548 + 48);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v365(v364, 1, v549))
                  {
                    memcpy(v593, v364, v571);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v548 + 16))(v593, v364, v549);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v548 + 56))(v593, 0, 1, v549);
                  }
                  v474 = (_QWORD *)(((unint64_t)v593 + v326) & 0xFFFFFFFFFFFFFFF8);
                  v475 = (_QWORD *)(((unint64_t)v364 + v326) & 0xFFFFFFFFFFFFFFF8);
                  *v474 = *v475;
                  v476 = (_QWORD *)(((unint64_t)v474 + 15) & 0xFFFFFFFFFFFFF8);
                  v477 = (_QWORD *)(((unint64_t)v475 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v476 = *v477;
                  v478 = (_QWORD *)(((unint64_t)v476 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v479 = (_QWORD *)(((unint64_t)v477 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v478 = *v479;
                  v480 = (_QWORD *)(((unint64_t)v478 + 15) & 0xFFFFFFFFFFFFF8);
                  v481 = (_QWORD *)(((unint64_t)v479 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v480 = *v481;
                  v482 = (_QWORD *)(((unint64_t)v480 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v483 = (_QWORD *)(((unint64_t)v481 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v482 = *v483;
                  v484 = (_QWORD *)(((unint64_t)v482 + 15) & 0xFFFFFFFFFFFFF8);
                  v485 = (_QWORD *)(((unint64_t)v483 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v484 = *v485;
                  *(_QWORD *)(((unint64_t)v484 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v485
                                                                                               + 15) & 0xFFFFFFFFFFFFF8);
                  *(_BYTE *)(v324 + v633) = 0;
                  goto LABEL_311;
                case 1:
                  v609 = v320;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
                  *(_QWORD *)(v324 + 56) = *(_QWORD *)(v325 + 56);
                  v366 = *(_QWORD *)(v325 + 64);
                  *(_BYTE *)(v324 + 72) = *(_BYTE *)(v325 + 72);
                  *(_QWORD *)(v324 + 64) = v366;
                  *(_QWORD *)(v324 + 80) = *(_QWORD *)(v325 + 80);
                  *(_QWORD *)(v324 + 88) = *(_QWORD *)(v325 + 88);
                  v594 = (uint64_t *)(v325 + 96);
                  v367 = *(_BYTE *)(v325 + 106);
                  v368 = *(unsigned __int16 *)(v325 + 104);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v367 == 255)
                  {
                    v369 = *v594;
                    *(_DWORD *)(v324 + 103) = *(_DWORD *)(v325 + 103);
                    *(_QWORD *)(v324 + 96) = v369;
                  }
                  else
                  {
                    v467 = v368 & 0xFF00FFFF | (v367 << 16);
                    v468 = *v594;
                    sub_1BA77A170(*v594, v467, SBYTE2(v467), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
                    *(_QWORD *)(v324 + 96) = v468;
                    *(_WORD *)(v324 + 104) = v467;
                    *(_BYTE *)(v324 + 106) = BYTE2(v467);
                  }
                  v59 = v625;
                  v339 = ~v625;
                  v331 = v588;
                  v329 = v582;
                  v340 = v567;
                  v341 = v568;
                  v320 = v609;
                  v415 = 1;
                  goto LABEL_297;
                case 2:
                  v610 = v320;
                  v620 = v334;
                  v602 = v330;
                  v370 = v331;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  *(_BYTE *)(v324 + 48) = *(_BYTE *)(v325 + 48);
                  *(_QWORD *)(v324 + 56) = *(_QWORD *)(v325 + 56);
                  v371 = *(_QWORD *)(v325 + 72);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v371 <= 2)
                  {
                    *(_OWORD *)(v324 + 64) = *(_OWORD *)(v325 + 64);
                  }
                  else
                  {
                    *(_BYTE *)(v324 + 64) = *(_BYTE *)(v325 + 64);
                    *(_QWORD *)(v324 + 72) = *(_QWORD *)(v325 + 72);
                    swift_bridgeObjectRetain();
                  }
                  *(_QWORD *)(v324 + 80) = *(_QWORD *)(v325 + 80);
                  *(_QWORD *)(v324 + 88) = *(_QWORD *)(v325 + 88);
                  *(_QWORD *)(v324 + 96) = *(_QWORD *)(v325 + 96);
                  *(_QWORD *)(v324 + 104) = *(_QWORD *)(v325 + 104);
                  *(_QWORD *)(v324 + 112) = *(_QWORD *)(v325 + 112);
                  *(_QWORD *)(v324 + 120) = *(_QWORD *)(v325 + 120);
                  *(_BYTE *)(v324 + 128) = *(_BYTE *)(v325 + 128);
                  *(_QWORD *)(v324 + 136) = *(_QWORD *)(v325 + 136);
                  *(_BYTE *)(v324 + v633) = 2;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  goto LABEL_314;
                case 3:
                  v610 = v320;
                  v620 = v334;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  v372 = *(_QWORD *)(v325 + 56);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v602 = v330;
                  v370 = v588;
                  if (v372 >= 0xF)
                  {
                    *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
                    *(_QWORD *)(v324 + 56) = *(_QWORD *)(v325 + 56);
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v324 + 48) = *(_OWORD *)(v325 + 48);
                  }
                  *(_QWORD *)(v324 + 64) = *(_QWORD *)(v325 + 64);
                  *(_QWORD *)(v324 + 72) = *(_QWORD *)(v325 + 72);
                  *(_QWORD *)(v324 + 80) = *(_QWORD *)(v325 + 80);
                  *(_QWORD *)(v324 + 88) = *(_QWORD *)(v325 + 88);
                  *(_QWORD *)(v324 + 96) = *(_QWORD *)(v325 + 96);
                  *(_QWORD *)(v324 + 104) = *(_QWORD *)(v325 + 104);
                  *(_QWORD *)(v324 + 112) = *(_QWORD *)(v325 + 112);
                  *(_BYTE *)(v324 + 120) = *(_BYTE *)(v325 + 120);
                  *(_BYTE *)(v324 + v633) = 3;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
LABEL_314:
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v331 = v370;
                  v329 = v582;
                  v340 = v567;
                  v341 = v568;
                  v339 = ~v625;
                  v330 = v602;
                  v320 = v610;
                  v334 = v620;
                  goto LABEL_332;
                case 4:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
                  *(_BYTE *)(v324 + v633) = 4;
                  swift_bridgeObjectRetain();
                  v340 = v567;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v331 = v588;
                  goto LABEL_271;
                case 5:
                  v611 = v320;
                  v603 = v330;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  v373 = (_QWORD *)((v324 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v374 = (_QWORD *)((v325 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v373 = *v374;
                  v373[1] = v374[1];
                  v375 = ((unint64_t)v373 + 23) & 0xFFFFFFFFFFFFFFF8;
                  v376 = ((unint64_t)v374 + 23) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v375 = *(_QWORD *)v376;
                  *(_QWORD *)(v375 + 8) = *(_QWORD *)(v376 + 8);
                  *(_BYTE *)(v375 + 16) = *(_BYTE *)(v376 + 16);
                  *(_BYTE *)(v375 + 17) = *(_BYTE *)(v376 + 17);
                  v377 = (_QWORD *)((v375 + 25) & 0xFFFFFFFFFFFFF8);
                  v378 = (_QWORD *)((v376 + 25) & 0xFFFFFFFFFFFFF8);
                  *v377 = *v378;
                  v379 = (_QWORD *)(((unint64_t)v377 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v380 = (_QWORD *)(((unint64_t)v378 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v379 = *v380;
                  v381 = (_QWORD *)(((unint64_t)v379 + 15) & 0xFFFFFFFFFFFFF8);
                  v382 = (_QWORD *)(((unint64_t)v380 + 15) & 0xFFFFFFFFFFFFF8);
                  *v381 = *v382;
                  v383 = (_QWORD *)(((unint64_t)v381 + 15) & 0xFFFFFFFFFFFFF8);
                  v384 = (_QWORD *)(((unint64_t)v382 + 15) & 0xFFFFFFFFFFFFF8);
                  *v383 = *v384;
                  v385 = (_QWORD *)(((unint64_t)v383 + 15) & 0xFFFFFFFFFFFFF8);
                  v386 = (_QWORD *)(((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFF8);
                  *v385 = *v386;
                  v387 = (_QWORD *)(((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFF8);
                  v388 = (_QWORD *)(((unint64_t)v386 + 15) & 0xFFFFFFFFFFFFF8);
                  *v387 = *v388;
                  v389 = (_QWORD *)(((unint64_t)v387 + 15) & 0xFFFFFFFFFFFFF8);
                  v390 = (_QWORD *)(((unint64_t)v388 + 15) & 0xFFFFFFFFFFFFF8);
                  *v389 = *v390;
                  v391 = (_QWORD *)(((unint64_t)v389 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v392 = (_QWORD *)(((unint64_t)v390 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v391 = *v392;
                  v393 = (_QWORD *)(((unint64_t)v391 + 15) & 0xFFFFFFFFFFFFF8);
                  v394 = (_QWORD *)(((unint64_t)v392 + 15) & 0xFFFFFFFFFFFFF8);
                  *v393 = *v394;
                  v395 = (_QWORD *)(((unint64_t)v393 + 15) & 0xFFFFFFFFFFFFF8);
                  v396 = (_QWORD *)(((unint64_t)v394 + 15) & 0xFFFFFFFFFFFFF8);
                  *v395 = *v396;
                  v397 = (_QWORD *)(((unint64_t)v395 + 15) & 0xFFFFFFFFFFFFF8);
                  v398 = (_QWORD *)(((unint64_t)v396 + 15) & 0xFFFFFFFFFFFFF8);
                  *v397 = *v398;
                  v399 = (_QWORD *)(((unint64_t)v397 + 15) & 0xFFFFFFFFFFFFF8);
                  v400 = (_QWORD *)(((unint64_t)v398 + 15) & 0xFFFFFFFFFFFFF8);
                  *v399 = *v400;
                  v401 = (_QWORD *)(((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFF8);
                  v402 = (_QWORD *)(((unint64_t)v400 + 15) & 0xFFFFFFFFFFFFF8);
                  *v401 = *v402;
                  v403 = ((unint64_t)v401 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v404 = ((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFFFF8;
                  if (*(_QWORD *)(v404 + 8) >= 0xFFFFFFFFuLL)
                    LODWORD(v405) = -1;
                  else
                    v405 = *(_QWORD *)(v404 + 8);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((v405 + 1) > 2)
                  {
                    *(_OWORD *)v403 = *(_OWORD *)v404;
                    v406 = v588;
                  }
                  else
                  {
                    v406 = v588;
                    if ((_DWORD)v405 == -1)
                    {
                      *(_BYTE *)v403 = *(_BYTE *)v404;
                      *(_QWORD *)(v403 + 8) = *(_QWORD *)(v404 + 8);
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      *(_OWORD *)v403 = *(_OWORD *)v404;
                    }
                  }
                  v498 = v536 + v403;
                  v499 = (_QWORD *)((v536 + v404) & v537);
                  v572 = v498 & v537;
                  *(_QWORD *)(v498 & v537) = *v499;
                  v500 = (_QWORD *)(((v498 & v537) + 15) & 0xFFFFFFFFFFFFFFF8);
                  v501 = (_QWORD *)(((unint64_t)v499 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v500 = *v501;
                  v502 = (_QWORD *)(((unint64_t)v500 + v584 + 8) & v537);
                  v503 = (_QWORD *)(((unint64_t)v501 + v584 + 8) & v537);
                  v504 = v503[1];
                  if (v504 >= 0xFFFFFFFF)
                    LODWORD(v504) = -1;
                  v505 = v504 - 1;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v505 < 0)
                  {
                    *v502 = *v503;
                    v502[1] = v503[1];
                    v502[2] = v503[2];
                    v502[3] = v503[3];
                    v502[4] = v503[4];
                    v502[5] = v503[5];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    v506 = *(_OWORD *)v503;
                    v507 = *((_OWORD *)v503 + 2);
                    *((_OWORD *)v502 + 1) = *((_OWORD *)v503 + 1);
                    *((_OWORD *)v502 + 2) = v507;
                    *(_OWORD *)v502 = v506;
                  }
                  v508 = (void *)(((unint64_t)v502 + v538) & v406);
                  v509 = (const void *)(((unint64_t)v503 + v538) & v406);
                  v510 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v547 + 48);
                  if (v510(v509, 1, v539))
                  {
                    memcpy(v508, v509, v592);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v508, v509, v539);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v508, 0, 1, v539);
                  }
                  v511 = (void *)(((unint64_t)v502 + __na + v584) & v588);
                  v512 = (const void *)(((unint64_t)v503 + __na + v584) & v588);
                  v580 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v510;
                  if (v510(v512, 1, v539))
                  {
                    memcpy(v511, v512, v592);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v511, v512, v539);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v511, 0, 1, v539);
                  }
                  *(_QWORD *)(((unint64_t)v511 + v576) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v512
                                                                                                 + v576) & 0xFFFFFFFFFFFFF8);
                  v513 = (v564 + v625 + v572) & v627;
                  v514 = ((unint64_t)v499 + v564 + v625) & v627;
                  v515 = *(void (**)(size_t, unint64_t, uint64_t))(v557 + 16);
                  swift_bridgeObjectRetain();
                  v515(v513, v514, v589);
                  v516 = (void *)((v334 + v513) & v588);
                  v517 = v334 + v514;
                  v331 = v588;
                  v518 = (const void *)(v517 & v588);
                  if (v580(v517 & v588, 1, v539))
                  {
                    memcpy(v516, v518, v592);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v516, v518, v539);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v516, 0, 1, v539);
                  }
                  v329 = v582;
                  v339 = ~v625;
                  v59 = v625;
                  v340 = v567;
                  v341 = v568;
                  v330 = v603;
                  v320 = v611;
                  v469 = v633;
                  v415 = 5;
                  goto LABEL_331;
                case 6:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_BYTE *)(v324 + v633) = 6;
                  swift_bridgeObjectRetain();
                  v340 = v567;
LABEL_271:
                  swift_bridgeObjectRetain();
                  goto LABEL_273;
                case 7:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_BYTE *)(v324 + v633) = 7;
                  swift_retain();
LABEL_273:
                  v339 = ~v625;
                  v341 = v568;
                  goto LABEL_332;
                case 8:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  v621 = v334;
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
                  *(_QWORD *)(v324 + 56) = *(_QWORD *)(v325 + 56);
                  *(_QWORD *)(v324 + 64) = *(_QWORD *)(v325 + 64);
                  *(_BYTE *)(v324 + v633) = 8;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v329 = v582;
                  v407 = ~v625;
                  swift_bridgeObjectRetain();
                  v340 = v567;
                  v341 = v568;
                  v331 = v588;
                  goto LABEL_276;
                case 9:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  *(_QWORD *)(v324 + 32) = *(_QWORD *)(v325 + 32);
                  *(_QWORD *)(v324 + 40) = *(_QWORD *)(v325 + 40);
                  *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
                  *(_QWORD *)(v324 + 56) = *(_QWORD *)(v325 + 56);
                  *(_QWORD *)(v324 + 64) = *(_QWORD *)(v325 + 64);
                  *(_QWORD *)(v324 + 72) = *(_QWORD *)(v325 + 72);
                  *(_BYTE *)(v324 + 80) = *(_BYTE *)(v325 + 80);
                  v621 = v334;
                  *(_QWORD *)(v324 + 88) = *(_QWORD *)(v325 + 88);
                  *(_QWORD *)(v324 + 96) = *(_QWORD *)(v325 + 96);
                  *(_BYTE *)(v324 + 104) = *(_BYTE *)(v325 + 104);
                  *(_BYTE *)(v324 + v633) = 9;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v329 = v582;
                  swift_retain();
                  v340 = v567;
                  v331 = v588;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v341 = v568;
                  v59 = v625;
                  v407 = ~v625;
LABEL_276:
                  swift_bridgeObjectRetain();
                  v339 = v407;
                  v334 = v621;
                  break;
                case 0xA:
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  *(_QWORD *)(v324 + 16) = *(_QWORD *)(v325 + 16);
                  *(_QWORD *)(v324 + 24) = *(_QWORD *)(v325 + 24);
                  v604 = v330;
                  v612 = v320;
                  v408 = *(_QWORD *)(v325 + 32);
                  v409 = *(_QWORD *)(v325 + 40);
                  v410 = *(_QWORD *)(v325 + 48);
                  v411 = *(_QWORD *)(v325 + 56);
                  v622 = v334;
                  v412 = *(_QWORD *)(v325 + 64);
                  v413 = *(_QWORD *)(v325 + 72);
                  v414 = *(_BYTE *)(v325 + 80);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_1BA709DE8(v408, v409, v410, v411, v412, v413, v414);
                  *(_QWORD *)(v324 + 32) = v408;
                  *(_QWORD *)(v324 + 40) = v409;
                  *(_QWORD *)(v324 + 48) = v410;
                  *(_QWORD *)(v324 + 56) = v411;
                  v329 = v582;
                  v340 = v567;
                  v341 = v568;
                  v331 = v588;
                  *(_QWORD *)(v324 + 64) = v412;
                  *(_QWORD *)(v324 + 72) = v413;
                  v330 = v604;
                  v320 = v612;
                  v334 = v622;
                  v415 = 10;
                  *(_BYTE *)(v324 + 80) = v414;
                  v59 = v625;
                  v339 = ~v625;
LABEL_297:
                  v469 = v633;
LABEL_331:
                  *(_BYTE *)(v324 + v469) = v415;
                  break;
                case 0xB:
                  v608 = v320;
                  v623 = v552 + v320 + 7;
                  v601 = v330;
                  *(_QWORD *)v324 = *(_QWORD *)v325;
                  *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
                  v416 = (_QWORD *)((v324 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v417 = (_QWORD *)((v325 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v416 = *v417;
                  v416[1] = v417[1];
                  v418 = (_QWORD *)(((unint64_t)v416 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v419 = (_QWORD *)(((unint64_t)v417 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v418 = *v419;
                  v418[1] = v419[1];
                  v420 = (_QWORD *)(((unint64_t)v418 + v535 + 16) & v534);
                  v421 = (_QWORD *)(((unint64_t)v419 + v535 + 16) & v534);
                  *v420 = *v421;
                  v420[1] = v421[1];
                  v422 = ((unint64_t)v420 + v540) & v541;
                  v423 = ((unint64_t)v421 + v540) & v541;
                  v424 = *(void (**)(unint64_t, unint64_t, uint64_t))(v542 + 16);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v424(v422, v423, v544);
                  v425 = (_QWORD *)((v543 + v422) & 0xFFFFFFFFFFFFFFF8);
                  v426 = (_QWORD *)((v543 + v423) & 0xFFFFFFFFFFFFFFF8);
                  *v425 = *v426;
                  v425[1] = v426[1];
                  v427 = (_QWORD *)(((unint64_t)v425 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v428 = (_QWORD *)(((unint64_t)v426 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v427 = *v428;
                  v427[1] = v428[1];
                  v429 = (_QWORD *)(((unint64_t)v427 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v430 = (_QWORD *)(((unint64_t)v428 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v429 = *v430;
                  v429[1] = v430[1];
                  v431 = (_QWORD *)(((unint64_t)v429 + 23) & 0xFFFFFFFFFFFFFFF8);
                  v432 = (_QWORD *)(((unint64_t)v430 + 23) & 0xFFFFFFFFFFFFFFF8);
                  *v431 = *v432;
                  v431[1] = v432[1];
                  v595 = (void *)(((unint64_t)v431 + v545) & v546);
                  v433 = (const void *)(((unint64_t)v432 + v545) & v546);
                  v434 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v548 + 48);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v434(v433, 1, v549))
                  {
                    memcpy(v595, v433, v571);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v548 + 16))(v595, v433, v549);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v548 + 56))(v595, 0, 1, v549);
                  }
                  v486 = (_QWORD *)(((unint64_t)v595 + v623) & 0xFFFFFFFFFFFFFFF8);
                  v487 = (_QWORD *)(((unint64_t)v433 + v623) & 0xFFFFFFFFFFFFFFF8);
                  *v486 = *v487;
                  v488 = (_QWORD *)(((unint64_t)v486 + 15) & 0xFFFFFFFFFFFFF8);
                  v489 = (_QWORD *)(((unint64_t)v487 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v488 = *v489;
                  v490 = (_QWORD *)(((unint64_t)v488 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v491 = (_QWORD *)(((unint64_t)v489 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v490 = *v491;
                  v492 = (_QWORD *)(((unint64_t)v490 + 15) & 0xFFFFFFFFFFFFF8);
                  v493 = (_QWORD *)(((unint64_t)v491 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v492 = *v493;
                  v494 = (_QWORD *)(((unint64_t)v492 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v495 = (_QWORD *)(((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v494 = *v495;
                  v496 = (_QWORD *)(((unint64_t)v494 + 15) & 0xFFFFFFFFFFFFF8);
                  v497 = (_QWORD *)(((unint64_t)v495 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v496 = *v497;
                  *(_QWORD *)(((unint64_t)v496 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v497
                                                                                               + 15) & 0xFFFFFFFFFFFFF8);
                  *(_BYTE *)(v324 + v633) = 11;
LABEL_311:
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v331 = v588;
                  v329 = v582;
                  v340 = v567;
                  v341 = v568;
                  v330 = v601;
                  v320 = v608;
                  v339 = ~v625;
                  break;
                default:
                  if (v633 <= 3)
                    v352 = v633;
                  else
                    v352 = 4;
                  __asm { BR              X12 }
                  return result;
              }
              return result;
            default:
              if (v337 <= 3)
                v338 = v337;
              else
                v338 = 4;
              __asm { BR              X12 }
              return result;
          }
        }
LABEL_332:
        v519 = ((((((((((((((v552 + v320 + v341 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 8;
        v520 = v587;
        if (!v585)
          v520 = v587 + 1;
        v521 = ((v334 + ((v59 + v340 + ((v520 + ((v330 + v329 + v520) & v331) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & v339)) & v331)
             + v520;
        if (v519 > v521)
          v521 = ((((((((((((((v552 + v320 + v341 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 8;
        v522 = v519 + v581;
        if (v521 > v522)
          v522 = v521;
        if (v522 <= 0x90)
          v522 = 144;
        v523 = v522 + 1;
        v524 = (uint64_t *)(((v324 | 7) + v523) & 0xFFFFFFFFFFFFFFF8);
        v525 = (uint64_t *)(((v325 | 7) + v523) & 0xFFFFFFFFFFFFFFF8);
        v526 = *v525;
        v527 = v525[1];
        sub_1BA69D44C(*v525, v527);
        v528 = *v524;
        v529 = v524[1];
        *v524 = v526;
        v524[1] = v527;
        sub_1BA69D314(v528, v529);
        *(_QWORD *)(((unint64_t)v524 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v525 + 23) & 0xFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return v624;
      }
      v158 = *v93;
      v159 = v93[1];
      v160 = *((_BYTE *)v93 + 16);
      sub_1BA987528(*v93, v159, v160);
      *v92 = v158;
      v92[1] = v159;
      *((_BYTE *)v92 + 16) = v160;
      v161 = v92 + 3;
      v162 = v93 + 3;
      v163 = *((unsigned __int8 *)v93 + 40);
      if ((((v163 >> 6) & 0xFFFFFF83 | (4 * ((v163 >> 1) & 0x1F))) ^ 0x7F) < 0x7D)
      {
        v207 = *(_OWORD *)v162;
        *((_BYTE *)v92 + 40) = *((_BYTE *)v93 + 40);
        *v161 = v207;
      }
      else
      {
        v164 = *v162;
        v165 = v93[4];
        sub_1BA895B64(*v162, v165, *((_BYTE *)v93 + 40));
        *(_QWORD *)v161 = v164;
        v92[4] = v165;
        *((_BYTE *)v92 + 40) = v163;
      }
      v92[6] = v93[6];
      v92[7] = v93[7];
      v208 = ((unint64_t)v92 + 71) & 0xFFFFFFFFFFFFFFF8;
      v209 = ((unint64_t)v93 + 71) & 0xFFFFFFFFFFFFFFF8;
      v210 = *(unsigned __int16 *)(v209 + 44);
      v211 = *(unsigned int *)(v209 + 40);
      swift_bridgeObjectRetain();
      if (v210 >> 9 <= 0x7EuLL)
      {
        v214 = v211 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v210 << 32);
        v215 = *(_QWORD *)v209;
        v216 = *(_QWORD *)(v209 + 8);
        v217 = *(_QWORD *)(v209 + 24);
        v218 = *(_QWORD *)(v209 + 32);
        v219 = *(_QWORD *)(v209 + 16);
        sub_1BA8EBBF0(*(_QWORD *)v209, v216, v219, v217, v218, v214);
        *(_QWORD *)v208 = v215;
        *(_QWORD *)(v208 + 8) = v216;
        *(_QWORD *)(v208 + 16) = v219;
        *(_QWORD *)(v208 + 24) = v217;
        v59 = v625;
        *(_QWORD *)(v208 + 32) = v218;
        v91 = ~(v625 | 7);
        *(_WORD *)(v208 + 44) = WORD2(v214);
        *(_DWORD *)(v208 + 40) = v214;
      }
      else
      {
        v212 = *(_OWORD *)v209;
        v213 = *(_OWORD *)(v209 + 16);
        *(_OWORD *)(v208 + 30) = *(_OWORD *)(v209 + 30);
        *(_OWORD *)v208 = v212;
        *(_OWORD *)(v208 + 16) = v213;
      }
      *(_QWORD *)(v208 + 48) = *(_QWORD *)(v209 + 48);
      *(_QWORD *)(v208 + 56) = *(_QWORD *)(v209 + 56);
      v220 = (v59 + 64 + v208) & v627;
      v98 = v555;
      v221 = *(void (**)(uint64_t, unint64_t, uint64_t))(v557 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v96 = v589;
      v221(v220, (v59 + 64 + v209) & v627, v589);
      v101 = v570;
LABEL_198:
      v100 = __n;
      goto LABEL_199;
    }
  }
  v72 = v625;
  if (v58)
  {
    if (v570)
      v73 = v50;
    else
      v73 = v50 + 1;
    v74 = ((((((((((((((v73 + v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v75 = v587;
    if (!v585)
      v75 = v587 + 1;
    v76 = ((v577
          + v584
          + ((v625 + v51 + ((v75 + ((v575 + v584 + v582 + v75) & v588) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & v627)) & v588)
        + v75;
    if (v74 > v76)
      v76 = v74;
    v77 = v74 + v581;
    if (v76 > v77)
      v77 = v76;
    if (v77 <= 0x90)
      v77 = 144;
    v78 = ((((__n + v606 + v56) & v628) + v55 + v591) & v597)
        + (((v77 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v79 = v45;
    goto LABEL_149;
  }
  v566 = v51;
  *v45 = *v47;
  v45[1] = v47[1];
  v45[2] = v47[2];
  *((_BYTE *)v45 + 24) = *((_BYTE *)v47 + 24);
  v45[4] = v47[4];
  v45[5] = v47[5];
  v80 = (char *)(((unint64_t)v45 + v52) & v628);
  v81 = ((unint64_t)v47 + v52) & v628;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v560 = v55;
  if ((v614 & 0x80000000) == 0)
  {
    v82 = *(_QWORD *)(v81 + 56);
    if (v82 >= 0xFFFFFFFF)
      LODWORD(v82) = -1;
    v83 = v589;
    v554 = v54;
    if ((_DWORD)v82 != -1)
      goto LABEL_46;
LABEL_82:
    v553 = v50;
    v118 = *(_QWORD *)v81;
    v119 = *(_QWORD *)(v81 + 8);
    v120 = *(_BYTE *)(v81 + 16);
    sub_1BA987528(*(_QWORD *)v81, v119, v120);
    *(_QWORD *)v80 = v118;
    *((_QWORD *)v80 + 1) = v119;
    v80[16] = v120;
    v121 = v80 + 24;
    v122 = (uint64_t *)(v81 + 24);
    v123 = *(unsigned __int8 *)(v81 + 40);
    if ((((v123 >> 6) & 0xFFFFFF83 | (4 * ((v123 >> 1) & 0x1F))) ^ 0x7F) < 0x7D)
    {
      v127 = *(_OWORD *)v122;
      v80[40] = *(_BYTE *)(v81 + 40);
      *v121 = v127;
    }
    else
    {
      v124 = *v122;
      v125 = *(_QWORD *)(v81 + 32);
      sub_1BA895B64(*v122, v125, *(_BYTE *)(v81 + 40));
      *(_QWORD *)v121 = v124;
      *((_QWORD *)v80 + 4) = v125;
      v80[40] = v123;
    }
    *((_QWORD *)v80 + 6) = *(_QWORD *)(v81 + 48);
    *((_QWORD *)v80 + 7) = *(_QWORD *)(v81 + 56);
    v128 = (unint64_t)(v80 + 71) & 0xFFFFFFFFFFFFFFF8;
    v129 = (v81 + 71) & 0xFFFFFFFFFFFFFFF8;
    v130 = *(unsigned __int16 *)(v129 + 44);
    v131 = *(unsigned int *)(v129 + 40);
    swift_bridgeObjectRetain();
    if (v130 >> 9 <= 0x7EuLL)
    {
      v134 = v131 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v130 << 32);
      v135 = *(_QWORD *)v129;
      v136 = *(_QWORD *)(v129 + 8);
      v569 = v49;
      v138 = *(_QWORD *)(v129 + 16);
      v137 = *(_QWORD *)(v129 + 24);
      v616 = *(_QWORD *)(v129 + 32);
      sub_1BA8EBBF0(*(_QWORD *)v129, v136, v138, v137, v616, v134);
      *(_QWORD *)v128 = v135;
      *(_QWORD *)(v128 + 8) = v136;
      *(_QWORD *)(v128 + 16) = v138;
      *(_QWORD *)(v128 + 24) = v137;
      v84 = v569;
      v72 = v625;
      *(_QWORD *)(v128 + 32) = v616;
      *(_WORD *)(v128 + 44) = WORD2(v134);
      *(_DWORD *)(v128 + 40) = v134;
    }
    else
    {
      v84 = v49;
      v132 = *(_OWORD *)v129;
      v133 = *(_OWORD *)(v129 + 16);
      *(_OWORD *)(v128 + 30) = *(_OWORD *)(v129 + 30);
      *(_OWORD *)v128 = v132;
      *(_OWORD *)(v128 + 16) = v133;
    }
    *(_QWORD *)(v128 + 48) = *(_QWORD *)(v129 + 48);
    *(_QWORD *)(v128 + 56) = *(_QWORD *)(v129 + 56);
    v139 = v72 + 64;
    v140 = v72 + 64 + v128;
    v87 = v72;
    v88 = ~v625;
    v141 = v140 & v627;
    v142 = (v139 + v129) & v627;
    v86 = *(void (**)(unint64_t, unint64_t, uint64_t))(v557 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v83 = v589;
    v86(v141, v142, v589);
    v50 = v553;
    v85 = __n;
    goto LABEL_92;
  }
  v83 = v589;
  v554 = v54;
  if (!((unsigned int (*)(unint64_t))v561)((v625 + ((v81 + 71) & 0xFFFFFFFFFFFFFFF8) + 64) & v627))
    goto LABEL_82;
LABEL_46:
  v84 = v49;
  v85 = __n;
  memcpy(v80, (const void *)v81, __n);
  v86 = *(void (**)(unint64_t, unint64_t, uint64_t))(v557 + 16);
  v87 = v625;
  v88 = ~v625;
LABEL_92:
  v143 = v85 + v606;
  v144 = (unint64_t)&v80[v85 + v606] & v628;
  v145 = (v143 + v81) & v628;
  v629 = v86;
  v86(v144, v145, v83);
  if (!v570)
    ++v50;
  *(_QWORD *)((v554 + v144) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v554 + v145) & 0xFFFFFFFFFFFFF8);
  v146 = (v591 + v560 + v144) & v597;
  v147 = (v591 + v560 + v145) & v597;
  v148 = v50 + 7;
  v149 = ((((((((((((((v50 + 7 + v84) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  if (v585)
    v150 = v587;
  else
    v150 = v587 + 1;
  v151 = v150 + v582;
  v617 = ((v150 + 7 + ((v575 + v584 + v150 + v582) & v588)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v153 = ((v577 + v584 + ((v566 + v87 + v617) & v88)) & v588) + v150;
  if (v149 > v153)
    v153 = ((((((((((((((v50 + 7 + v84) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
  v154 = v149 + v581;
  if (v153 > v154)
    v154 = v153;
  if (v154 <= 0x90)
    v155 = 144;
  else
    v155 = v154;
  v156 = *(unsigned __int8 *)(v147 + v155);
  swift_bridgeObjectRetain();
  switch(v156)
  {
    case 0:
      v598 = v155;
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      v194 = (v540 + v146) & v541;
      v195 = (v540 + v147) & v541;
      v196 = *(void (**)(unint64_t, unint64_t, uint64_t))(v542 + 16);
      swift_bridgeObjectRetain();
      v196(v194, v195, v544);
      v197 = (_QWORD *)((v543 + v194) & 0xFFFFFFFFFFFFFFF8);
      v198 = (_QWORD *)((v543 + v195) & 0xFFFFFFFFFFFFFFF8);
      *v197 = *v198;
      v197[1] = v198[1];
      v199 = (_QWORD *)(((unint64_t)v197 + 23) & 0xFFFFFFFFFFFFFFF8);
      v200 = (_QWORD *)(((unint64_t)v198 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v199 = *v200;
      v199[1] = v200[1];
      v201 = (_QWORD *)(((unint64_t)v199 + 23) & 0xFFFFFFFFFFFFFFF8);
      v202 = (_QWORD *)(((unint64_t)v200 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v201 = *v202;
      v201[1] = v202[1];
      v203 = (_QWORD *)(((unint64_t)v201 + 23) & 0xFFFFFFFFFFFFFFF8);
      v204 = (_QWORD *)(((unint64_t)v202 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v203 = *v204;
      v203[1] = v204[1];
      v630 = (void *)(((unint64_t)v203 + v545) & v546);
      v205 = (const void *)(((unint64_t)v204 + v545) & v546);
      v206 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v548 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v206(v205, 1, v549))
      {
        memcpy(v630, v205, v50);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v548 + 16))(v630, v205, v549);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v548 + 56))(v630, 0, 1, v549);
      }
      v435 = (_QWORD *)(((unint64_t)v630 + v148) & 0xFFFFFFFFFFFFFFF8);
      v436 = (_QWORD *)(((unint64_t)v205 + v148) & 0xFFFFFFFFFFFFFFF8);
      *v435 = *v436;
      v437 = (_QWORD *)(((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFF8);
      v438 = (_QWORD *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v437 = *v438;
      v439 = (_QWORD *)(((unint64_t)v437 + 15) & 0xFFFFFFFFFFFFFFF8);
      v440 = (_QWORD *)(((unint64_t)v438 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v439 = *v440;
      v441 = (_QWORD *)(((unint64_t)v439 + 15) & 0xFFFFFFFFFFFFF8);
      v442 = (_QWORD *)(((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v441 = *v442;
      v443 = (_QWORD *)(((unint64_t)v441 + 15) & 0xFFFFFFFFFFFFFFF8);
      v444 = (_QWORD *)(((unint64_t)v442 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v443 = *v444;
      v445 = (_QWORD *)(((unint64_t)v443 + 15) & 0xFFFFFFFFFFFFF8);
      v446 = (_QWORD *)(((unint64_t)v444 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v445 = *v446;
      *(_QWORD *)(((unint64_t)v445 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v446 + 15) & 0xFFFFFFFFFFFFF8);
      v155 = v598;
      *(_BYTE *)(v146 + v598) = 0;
      goto LABEL_303;
    case 1:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
      *(_QWORD *)(v146 + 56) = *(_QWORD *)(v147 + 56);
      v222 = *(_QWORD *)(v147 + 64);
      *(_BYTE *)(v146 + 72) = *(_BYTE *)(v147 + 72);
      *(_QWORD *)(v146 + 64) = v222;
      *(_QWORD *)(v146 + 80) = *(_QWORD *)(v147 + 80);
      *(_QWORD *)(v146 + 88) = *(_QWORD *)(v147 + 88);
      v631 = (uint64_t *)(v147 + 96);
      v223 = *(_BYTE *)(v147 + 106);
      v224 = *(unsigned __int16 *)(v147 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v223 == 255)
      {
        v225 = *v631;
        *(_DWORD *)(v146 + 103) = *(_DWORD *)(v147 + 103);
        *(_QWORD *)(v146 + 96) = v225;
      }
      else
      {
        v297 = v224 & 0xFF00FFFF | (v223 << 16);
        v298 = *v631;
        sub_1BA77A170(*v631, v297, SBYTE2(v297), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
        *(_QWORD *)(v146 + 96) = v298;
        *(_WORD *)(v146 + 104) = v297;
        *(_BYTE *)(v146 + 106) = BYTE2(v297);
      }
      *(_BYTE *)(v146 + v155) = 1;
      goto LABEL_306;
    case 2:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      *(_BYTE *)(v146 + 48) = *(_BYTE *)(v147 + 48);
      *(_QWORD *)(v146 + 56) = *(_QWORD *)(v147 + 56);
      v226 = *(_QWORD *)(v147 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v226 <= 2)
      {
        *(_OWORD *)(v146 + 64) = *(_OWORD *)(v147 + 64);
      }
      else
      {
        *(_BYTE *)(v146 + 64) = *(_BYTE *)(v147 + 64);
        *(_QWORD *)(v146 + 72) = *(_QWORD *)(v147 + 72);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v146 + 80) = *(_QWORD *)(v147 + 80);
      *(_QWORD *)(v146 + 88) = *(_QWORD *)(v147 + 88);
      *(_QWORD *)(v146 + 96) = *(_QWORD *)(v147 + 96);
      *(_QWORD *)(v146 + 104) = *(_QWORD *)(v147 + 104);
      *(_QWORD *)(v146 + 112) = *(_QWORD *)(v147 + 112);
      *(_QWORD *)(v146 + 120) = *(_QWORD *)(v147 + 120);
      *(_BYTE *)(v146 + 128) = *(_BYTE *)(v147 + 128);
      *(_QWORD *)(v146 + 136) = *(_QWORD *)(v147 + 136);
      v460 = 2;
      goto LABEL_302;
    case 3:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      v227 = *(_QWORD *)(v147 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v227 >= 0xF)
      {
        *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
        *(_QWORD *)(v146 + 56) = *(_QWORD *)(v147 + 56);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v146 + 48) = *(_OWORD *)(v147 + 48);
      }
      *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
      *(_QWORD *)(v146 + 72) = *(_QWORD *)(v147 + 72);
      *(_QWORD *)(v146 + 80) = *(_QWORD *)(v147 + 80);
      *(_QWORD *)(v146 + 88) = *(_QWORD *)(v147 + 88);
      *(_QWORD *)(v146 + 96) = *(_QWORD *)(v147 + 96);
      *(_QWORD *)(v146 + 104) = *(_QWORD *)(v147 + 104);
      *(_QWORD *)(v146 + 112) = *(_QWORD *)(v147 + 112);
      *(_BYTE *)(v146 + 120) = *(_BYTE *)(v147 + 120);
      *(_BYTE *)(v146 + v155) = 3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_304;
    case 4:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
      *(_BYTE *)(v146 + v155) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_305;
    case 5:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      v228 = (_QWORD *)((v146 + 23) & 0xFFFFFFFFFFFFFFF8);
      v229 = (_QWORD *)((v147 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v228 = *v229;
      v228[1] = v229[1];
      v230 = ((unint64_t)v228 + 23) & 0xFFFFFFFFFFFFFFF8;
      v231 = ((unint64_t)v229 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v230 = *(_QWORD *)v231;
      *(_QWORD *)(v230 + 8) = *(_QWORD *)(v231 + 8);
      *(_BYTE *)(v230 + 16) = *(_BYTE *)(v231 + 16);
      *(_BYTE *)(v230 + 17) = *(_BYTE *)(v231 + 17);
      v232 = (_QWORD *)((v230 + 25) & 0xFFFFFFFFFFFFF8);
      v233 = (_QWORD *)((v231 + 25) & 0xFFFFFFFFFFFFF8);
      *v232 = *v233;
      v234 = (_QWORD *)(((unint64_t)v232 + 15) & 0xFFFFFFFFFFFFFFF8);
      v235 = (_QWORD *)(((unint64_t)v233 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v234 = *v235;
      v236 = (_QWORD *)(((unint64_t)v234 + 15) & 0xFFFFFFFFFFFFF8);
      v237 = (_QWORD *)(((unint64_t)v235 + 15) & 0xFFFFFFFFFFFFF8);
      *v236 = *v237;
      v238 = (_QWORD *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFF8);
      v239 = (_QWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFF8);
      *v238 = *v239;
      v240 = (_QWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFF8);
      v241 = (_QWORD *)(((unint64_t)v239 + 15) & 0xFFFFFFFFFFFFF8);
      *v240 = *v241;
      v242 = (_QWORD *)(((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFF8);
      v243 = (_QWORD *)(((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFF8);
      *v242 = *v243;
      v244 = (_QWORD *)(((unint64_t)v242 + 15) & 0xFFFFFFFFFFFFF8);
      v245 = (_QWORD *)(((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFF8);
      *v244 = *v245;
      v246 = (_QWORD *)(((unint64_t)v244 + 15) & 0xFFFFFFFFFFFFFFF8);
      v247 = (_QWORD *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v246 = *v247;
      v248 = (_QWORD *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFF8);
      v249 = (_QWORD *)(((unint64_t)v247 + 15) & 0xFFFFFFFFFFFFF8);
      *v248 = *v249;
      v250 = (_QWORD *)(((unint64_t)v248 + 15) & 0xFFFFFFFFFFFFF8);
      v251 = (_QWORD *)(((unint64_t)v249 + 15) & 0xFFFFFFFFFFFFF8);
      *v250 = *v251;
      v252 = (_QWORD *)(((unint64_t)v250 + 15) & 0xFFFFFFFFFFFFF8);
      v253 = (_QWORD *)(((unint64_t)v251 + 15) & 0xFFFFFFFFFFFFF8);
      *v252 = *v253;
      v254 = (_QWORD *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFF8);
      v255 = (_QWORD *)(((unint64_t)v253 + 15) & 0xFFFFFFFFFFFFF8);
      *v254 = *v255;
      v256 = (_QWORD *)(((unint64_t)v254 + 15) & 0xFFFFFFFFFFFFF8);
      v257 = (_QWORD *)(((unint64_t)v255 + 15) & 0xFFFFFFFFFFFFF8);
      *v256 = *v257;
      v258 = ((unint64_t)v256 + 15) & 0xFFFFFFFFFFFFFFF8;
      v259 = ((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8;
      v260 = *(_QWORD *)(v259 + 8);
      if (v260 >= 0xFFFFFFFF)
        LODWORD(v260) = -1;
      v556 = v260;
      v558 = v260 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v558 <= 2 && v556 == -1)
      {
        *(_BYTE *)v258 = *(_BYTE *)v259;
        *(_QWORD *)(v258 + 8) = *(_QWORD *)(v259 + 8);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v258 = *(_OWORD *)v259;
      }
      v586 = (_QWORD *)((v536 + v259) & v537);
      v583 = (_QWORD *)((v536 + v258) & v537);
      *v583 = *v586;
      v261 = (_QWORD *)(((unint64_t)v583 + 15) & 0xFFFFFFFFFFFFFFF8);
      v262 = (_QWORD *)(((unint64_t)v586 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v261 = *v262;
      v263 = (_QWORD *)(((unint64_t)v261 + v584 + 8) & v537);
      v264 = (_QWORD *)(((unint64_t)v262 + v584 + 8) & v537);
      v265 = v264[1];
      if (v265 >= 0xFFFFFFFF)
        LODWORD(v265) = -1;
      v266 = v265 - 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v152 = v577 + v584;
      if (v266 < 0)
      {
        *v263 = *v264;
        v263[1] = v264[1];
        v263[2] = v264[2];
        v263[3] = v264[3];
        v263[4] = v264[4];
        v263[5] = v264[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v267 = *(_OWORD *)v264;
        v268 = *((_OWORD *)v264 + 2);
        *((_OWORD *)v263 + 1) = *((_OWORD *)v264 + 1);
        *((_OWORD *)v263 + 2) = v268;
        *(_OWORD *)v263 = v267;
      }
      v596 = (void *)(((unint64_t)v263 + v538) & v588);
      v447 = (const void *)(((unint64_t)v264 + v538) & v588);
      v605 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v547 + 48);
      if (v605(v447, 1, v539))
      {
        memcpy(v596, v447, v150);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v596, v447, v539);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v596, 0, 1, v539);
      }
      v461 = (void *)(((unint64_t)v263 + v151 + v584) & v588);
      v462 = (const void *)(((unint64_t)v264 + v151 + v584) & v588);
      if (v605(v462, 1, v539))
      {
        memcpy(v461, v462, v150);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v461, v462, v539);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v461, 0, 1, v539);
      }
      *(_QWORD *)(((unint64_t)v461 + v150 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v462
                                                                                         + v150
                                                                                         + 7) & 0xFFFFFFFFFFFFF8);
      v463 = ((unint64_t)v583 + v617 + v625) & v627;
      v464 = ((unint64_t)v586 + v617 + v625) & v627;
      swift_bridgeObjectRetain();
      v629(v463, v464, v589);
      v465 = (void *)((v152 + v463) & v588);
      v466 = (const void *)((v152 + v464) & v588);
      if (v605(v466, 1, v539))
      {
        memcpy(v465, v466, v150);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v547 + 16))(v465, v466, v539);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v547 + 56))(v465, 0, 1, v539);
      }
      *(_BYTE *)(v146 + v155) = 5;
      goto LABEL_306;
    case 6:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_BYTE *)(v146 + v155) = 6;
      swift_bridgeObjectRetain();
      goto LABEL_305;
    case 7:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_BYTE *)(v146 + v155) = 7;
      swift_retain();
      goto LABEL_306;
    case 8:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
      *(_QWORD *)(v146 + 56) = *(_QWORD *)(v147 + 56);
      *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
      *(_BYTE *)(v146 + v155) = 8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_305;
    case 9:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v147 + 32);
      *(_QWORD *)(v146 + 40) = *(_QWORD *)(v147 + 40);
      *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
      *(_QWORD *)(v146 + 56) = *(_QWORD *)(v147 + 56);
      *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
      *(_QWORD *)(v146 + 72) = *(_QWORD *)(v147 + 72);
      *(_BYTE *)(v146 + 80) = *(_BYTE *)(v147 + 80);
      *(_QWORD *)(v146 + 88) = *(_QWORD *)(v147 + 88);
      *(_QWORD *)(v146 + 96) = *(_QWORD *)(v147 + 96);
      *(_BYTE *)(v146 + 104) = *(_BYTE *)(v147 + 104);
      *(_BYTE *)(v146 + v155) = 9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_305;
    case 10:
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v147 + 16);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      v269 = *(_QWORD *)(v147 + 32);
      v270 = *(_QWORD *)(v147 + 40);
      v271 = *(_QWORD *)(v147 + 48);
      v272 = *(_QWORD *)(v147 + 56);
      v599 = v155;
      v273 = *(_QWORD *)(v147 + 64);
      v274 = *(_QWORD *)(v147 + 72);
      v275 = *(_BYTE *)(v147 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BA709DE8(v269, v270, v271, v272, v273, v274, v275);
      *(_QWORD *)(v146 + 32) = v269;
      *(_QWORD *)(v146 + 40) = v270;
      *(_QWORD *)(v146 + 48) = v271;
      *(_QWORD *)(v146 + 56) = v272;
      *(_QWORD *)(v146 + 64) = v273;
      *(_QWORD *)(v146 + 72) = v274;
      v155 = v599;
      *(_BYTE *)(v146 + 80) = v275;
      *(_BYTE *)(v146 + v599) = 10;
      goto LABEL_306;
    case 11:
      v600 = v155;
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
      v276 = (_QWORD *)((v146 + 23) & 0xFFFFFFFFFFFFFFF8);
      v277 = (_QWORD *)((v147 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v276 = *v277;
      v276[1] = v277[1];
      v278 = (_QWORD *)(((unint64_t)v276 + 23) & 0xFFFFFFFFFFFFFFF8);
      v279 = (_QWORD *)(((unint64_t)v277 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v278 = *v279;
      v278[1] = v279[1];
      v280 = (_QWORD *)(((unint64_t)v278 + v535 + 16) & v534);
      v281 = (_QWORD *)(((unint64_t)v279 + v535 + 16) & v534);
      *v280 = *v281;
      v280[1] = v281[1];
      v282 = ((unint64_t)v280 + v540) & v541;
      v283 = ((unint64_t)v281 + v540) & v541;
      v284 = *(void (**)(unint64_t, unint64_t, uint64_t))(v542 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v284(v282, v283, v544);
      v285 = (_QWORD *)((v543 + v282) & 0xFFFFFFFFFFFFFFF8);
      v286 = (_QWORD *)((v543 + v283) & 0xFFFFFFFFFFFFFFF8);
      *v285 = *v286;
      v285[1] = v286[1];
      v287 = (_QWORD *)(((unint64_t)v285 + 23) & 0xFFFFFFFFFFFFFFF8);
      v288 = (_QWORD *)(((unint64_t)v286 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v287 = *v288;
      v287[1] = v288[1];
      v289 = (_QWORD *)(((unint64_t)v287 + 23) & 0xFFFFFFFFFFFFFFF8);
      v290 = (_QWORD *)(((unint64_t)v288 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v289 = *v290;
      v289[1] = v290[1];
      v291 = (_QWORD *)(((unint64_t)v289 + 23) & 0xFFFFFFFFFFFFFFF8);
      v292 = (_QWORD *)(((unint64_t)v290 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v291 = *v292;
      v291[1] = v292[1];
      v632 = (void *)(((unint64_t)v291 + v545) & v546);
      v293 = (const void *)(((unint64_t)v292 + v545) & v546);
      v294 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v548 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v294(v293, 1, v549))
      {
        memcpy(v632, v293, v50);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v548 + 16))(v632, v293, v549);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v548 + 56))(v632, 0, 1, v549);
      }
      v448 = (_QWORD *)(((unint64_t)v632 + v148) & 0xFFFFFFFFFFFFFFF8);
      v449 = (_QWORD *)(((unint64_t)v293 + v148) & 0xFFFFFFFFFFFFFFF8);
      *v448 = *v449;
      v450 = (_QWORD *)(((unint64_t)v448 + 15) & 0xFFFFFFFFFFFFF8);
      v451 = (_QWORD *)(((unint64_t)v449 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v450 = *v451;
      v452 = (_QWORD *)(((unint64_t)v450 + 15) & 0xFFFFFFFFFFFFFFF8);
      v453 = (_QWORD *)(((unint64_t)v451 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v452 = *v453;
      v454 = (_QWORD *)(((unint64_t)v452 + 15) & 0xFFFFFFFFFFFFF8);
      v455 = (_QWORD *)(((unint64_t)v453 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v454 = *v455;
      v456 = (_QWORD *)(((unint64_t)v454 + 15) & 0xFFFFFFFFFFFFFFF8);
      v457 = (_QWORD *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v456 = *v457;
      v458 = (_QWORD *)(((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFF8);
      v459 = (_QWORD *)(((unint64_t)v457 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v458 = *v459;
      *(_QWORD *)(((unint64_t)v458 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFF8);
      v460 = 11;
      v155 = v600;
LABEL_302:
      *(_BYTE *)(v146 + v155) = v460;
LABEL_303:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_304:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_305:
      swift_bridgeObjectRetain();
LABEL_306:
      v470 = (_QWORD *)(((v146 | 7) + v155 + 1) & 0xFFFFFFFFFFFFFFF8);
      v471 = (uint64_t *)(((v147 | 7) + v155 + 1) & 0xFFFFFFFFFFFFFFF8);
      v472 = *v471;
      v473 = v471[1];
      sub_1BA69D44C(*v471, v473);
      *v470 = v472;
      v470[1] = v473;
      *(_QWORD *)(((unint64_t)v470 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v471 + 23) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      break;
    default:
      if (v155 <= 3)
        v157 = v155;
      else
        v157 = 4;
      __asm { BR              X11 }
      return result;
  }
  return v624;
}

uint64_t sub_1BAA14AE0(uint64_t a1)
{
  destroy for FormatDerivedDataScope(a1);
  return a1;
}

__n128 sub_1BAA14B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  size_t v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  __n128 result;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  void (*v82)(unint64_t, unint64_t, uint64_t);
  uint64_t v83;
  int v84;
  size_t v85;
  uint64_t v86;
  size_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _OWORD *v93;
  __int128 *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  size_t v104;
  size_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _OWORD *v119;
  _OWORD *v120;
  _OWORD *v121;
  _OWORD *v122;
  _OWORD *v123;
  _OWORD *v124;
  _OWORD *v125;
  _OWORD *v126;
  void *v127;
  const void *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD *v150;
  _OWORD *v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _OWORD *v180;
  _OWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _OWORD *v184;
  __int128 *v185;
  __int128 v186;
  __int128 v187;
  const void *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  size_t v202;
  _OWORD *v203;
  _OWORD *v204;
  _OWORD *v205;
  _OWORD *v206;
  _OWORD *v207;
  _OWORD *v208;
  unint64_t v209;
  unint64_t v210;
  _OWORD *v211;
  _OWORD *v212;
  _OWORD *v213;
  _OWORD *v214;
  _OWORD *v215;
  _OWORD *v216;
  _OWORD *v217;
  _OWORD *v218;
  void *v219;
  const void *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  void *v233;
  const void *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  const void *v252;
  _OWORD *v253;
  __n128 *v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  size_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  size_t v279;
  uint64_t v280;
  void (*v281)(uint64_t, uint64_t, uint64_t);
  uint64_t v282;
  size_t v283;
  size_t v284;
  size_t v285;
  size_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  size_t v293;
  size_t v294;
  unsigned int (*v295)(const void *, uint64_t, uint64_t);
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  uint64_t v299;
  uint64_t v300;
  __int128 *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int (*v309)(void);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BB86EB84();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v308 = ~(v9 | 7);
  v11 = (_OWORD *)((v10 + a1) & v308);
  v300 = a2;
  v303 = v9 | 7;
  v12 = (_OWORD *)((v10 + a2) & v308);
  *v11 = *v12;
  v306 = a1;
  v307 = ~v9;
  v13 = ((unint64_t)v11 + v9 + 16) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 16) & ~v9;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v15(v13, v14, v7);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = (v16 + v9 + v13) & ~v9;
  v18 = (v16 + v9 + v14) & ~v9;
  v15(v17, v18, v7);
  v19 = (void *)((v16 + v9 + v17) & ~v9);
  v305 = v9;
  v20 = (const void *)((v16 + v9 + v18) & ~v9);
  v295 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v281 = v15;
  v297 = v7;
  if (v295(v20, 1, v7))
  {
    v21 = *(unsigned int *)(v8 + 84);
    if ((_DWORD)v21)
      v22 = v16;
    else
      v22 = v16 + 1;
    memcpy(v19, v20, v22);
  }
  else
  {
    v15((uint64_t)v19, (uint64_t)v20, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    v21 = *(unsigned int *)(v8 + 84);
  }
  if ((_DWORD)v21)
    v23 = v16;
  else
    v23 = v16 + 1;
  v24 = (_QWORD *)(((unint64_t)v19 + v23 + 7) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  *(_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (((((((v23 + ((v16 + v9 + ((v16 + v9 + ((v9 + 16) & v307)) & v307)) & v307) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = v16;
  v269 = sub_1BB86C8B0();
  v32 = *(_QWORD *)(v269 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v272 = sub_1BB871E24();
  v34 = *(_QWORD *)(v272 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v36 = v35 | v33;
  v37 = sub_1BB86E710();
  v38 = v31;
  v265 = v37;
  v39 = *(_QWORD *)(v37 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = v40 | 7;
  v42 = v305;
  v43 = v35 | v33 | v305 | v40 | 7;
  v44 = (v10 & v308) + v43 + v30 + 8;
  v298 = (_OWORD *)((v44 + v306) & ~v43);
  v45 = (v44 + v300) & ~v43;
  if (v21 <= 0x7FFFFFFF)
    v46 = 0x7FFFFFFF;
  else
    v46 = v21;
  if (v46 - 1 >= v46)
    --v46;
  v266 = v33 + 16;
  v280 = v33;
  v47 = v35;
  v267 = *(_QWORD *)(v32 + 64) + 7;
  v268 = v32;
  v270 = v35 + 16;
  v271 = v34;
  v48 = v35
      + 16
      + ((((((((v267 + ((v33 + 16) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = *(_DWORD *)(v34 + 84);
  v50 = *(_QWORD *)(v34 + 64);
  v51 = v40 + 176;
  v52 = v40 + 16;
  v53 = v40 + 48;
  v54 = *(_DWORD *)(v39 + 84);
  v282 = *(_QWORD *)(v37 - 8);
  v55 = *(_QWORD *)(v39 + 64);
  v56 = v36 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v264 = v36;
  v57 = v36 + 48;
  v58 = v305 + 48;
  v59 = ((v305 + 128) & v307) + v38;
  v279 = v38 + 7;
  v60 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v301 = (__int128 *)v45;
  if ((v46 & 0x80000000) != 0)
  {
    v63 = (v59 + v303 + ((v58 + v45) & v308)) & v308;
    v293 = v38;
    v275 = v40 + 16;
    v277 = v40 + 48;
    v64 = v54;
    v287 = v40 | 7;
    v290 = v47;
    v283 = ((v305 + 128) & v307) + v38;
    v65 = v40;
    v273 = v56;
    v285 = v50;
    v66 = v55;
    v62 = v295((const void *)v63, v21, v297);
    v54 = v64;
    v52 = v275;
    v53 = v277;
    v47 = v290;
    v38 = v293;
    v55 = v66;
    v50 = v285;
    v41 = v287;
    v56 = v273;
    v40 = v65;
    v59 = v283;
    v42 = v305;
  }
  else
  {
    v61 = *(_QWORD *)(v45 + 8);
    if (v61 >= 0xFFFFFFFF)
      LODWORD(v61) = -1;
    v62 = v61 + 1;
  }
  v67 = v48 & ~v47;
  v68 = v60 + 8;
  if (v62)
  {
    if (v49)
      v69 = v50;
    else
      v69 = v50 + 1;
    v70 = ((((((((((((((v69 + v67 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if (v54)
      v71 = v55;
    else
      v71 = v55 + 1;
    v72 = ((v38
          + v40
          + ((v42
            + (v51 & ~v41)
            + ((v71 + (((v52 & ~v41) + v40 + (v53 & ~v40) + v71) & ~v40) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 8) & v307)) & ~v40)
        + v71;
    if (v70 > v72)
      v72 = v70;
    v73 = v70 + (v57 & v56);
    if (v72 > v73)
      v73 = v72;
    if (v73 <= 0x90)
      v73 = 144;
    memcpy(v298, v301, ((((v59 + v303 + (v58 & v308)) & v308) + v68 + v43) & ~v43)+ (((v73 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 8);
  }
  else
  {
    v255 = v68;
    v256 = ~v43;
    v257 = v67;
    v284 = v59;
    v286 = v50;
    v258 = v52 & ~v41;
    v259 = v51 & ~v41;
    v260 = v57 & v56;
    v274 = v56;
    v291 = v47;
    v276 = v52;
    v278 = v53;
    v75 = *v301;
    *(_OWORD *)((char *)v298 + 9) = *(__int128 *)((char *)v301 + 9);
    *v298 = v75;
    v298[2] = v301[2];
    v76 = v308;
    v77 = (_OWORD *)(((unint64_t)v298 + v58) & v308);
    v78 = (_OWORD *)(((unint64_t)v301 + v58) & v308);
    v299 = v53 & ~v40;
    v302 = ~v40;
    v288 = v41;
    if ((v21 & 0x80000000) != 0)
    {
      v79 = v307;
      v84 = v54;
      v83 = v297;
      v85 = v38;
      v86 = v40;
      v87 = v55;
      v81 = ((uint64_t (*)(unint64_t))v295)((v42
                                                            + (((unint64_t)v78 + 71) & 0xFFFFFFFFFFFFFFF8)
                                                            + 64) & v307);
      v38 = v85;
      v54 = v84;
      v55 = v87;
      v76 = v308;
      v40 = v86;
      v82 = (void (*)(unint64_t, unint64_t, uint64_t))v281;
    }
    else
    {
      v79 = v307;
      v80 = *((_QWORD *)v78 + 7);
      if (v80 >= 0xFFFFFFFF)
        LODWORD(v80) = -1;
      v81 = v80 + 1;
      v82 = (void (*)(unint64_t, unint64_t, uint64_t))v281;
      v83 = v297;
    }
    v261 = v54;
    v262 = v55;
    v263 = v40;
    v294 = v38;
    if (v81)
    {
      v88 = v284;
      memcpy(v77, v78, v284);
      v89 = v305;
      v90 = v79;
    }
    else
    {
      v91 = *v78;
      *((_BYTE *)v77 + 16) = *((_BYTE *)v78 + 16);
      *v77 = v91;
      v92 = *(_OWORD *)((char *)v78 + 24);
      *((_BYTE *)v77 + 40) = *((_BYTE *)v78 + 40);
      *(_OWORD *)((char *)v77 + 24) = v92;
      v77[3] = v78[3];
      v93 = (_OWORD *)(((unint64_t)v77 + 71) & 0xFFFFFFFFFFFFFFF8);
      v94 = (__int128 *)(((unint64_t)v78 + 71) & 0xFFFFFFFFFFFFFFF8);
      v95 = *v94;
      v96 = v94[1];
      v97 = v94[3];
      v93[2] = v94[2];
      v93[3] = v97;
      *v93 = v95;
      v93[1] = v96;
      v89 = v305;
      v90 = v79;
      v82(((unint64_t)v93 + v305 + 64) & v79, ((unint64_t)v94 + v305 + 64) & v79, v83);
      v88 = v284;
    }
    v98 = ((unint64_t)v77 + v88 + v303) & v76;
    v99 = ((unint64_t)v78 + v88 + v303) & v76;
    v82(v98, v99, v83);
    if (v49)
      v100 = v286;
    else
      v100 = v286 + 1;
    *(_QWORD *)((v279 + v98) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v279 + v99) & 0xFFFFFFFFFFFFF8);
    v101 = (v43 + v255 + v98) & v256;
    v102 = (v43 + v255 + v99) & v256;
    v103 = ((((((((((((((v100 + 7 + v257) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    if (v261)
      v104 = v262;
    else
      v104 = v262 + 1;
    v105 = v104 + v299;
    v106 = (v89 + v259 + ((v104 + 7 + ((v258 + v263 + v104 + v299) & v302)) & 0xFFFFFFFFFFFFFFF8) + 8) & v90;
    v107 = v294 + v263;
    v108 = ((v294 + v263 + v106) & v302) + v104;
    if (v103 > v108)
      v108 = ((((((((((((((v100 + 7 + v257) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 8;
    v109 = v103 + v260;
    if (v108 > v109)
      v109 = v108;
    if (v109 <= 0x90)
      v110 = 144;
    else
      v110 = v109;
    v112 = ~v280;
    v113 = ~v291;
    v114 = ~v288;
    switch(*(_BYTE *)(v102 + v110))
    {
      case 0:
        v115 = v100 + 7;
        v116 = v110;
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v117 = (v266 + v101) & v112;
        v118 = (v266 + v102) & v112;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v268 + 32))(v117, v118, v269);
        v119 = (_OWORD *)((v267 + v117) & 0xFFFFFFFFFFFFFFF8);
        v120 = (_OWORD *)((v267 + v118) & 0xFFFFFFFFFFFFFFF8);
        *v119 = *v120;
        v121 = (_OWORD *)(((unint64_t)v119 + 23) & 0xFFFFFFFFFFFFFFF8);
        v122 = (_OWORD *)(((unint64_t)v120 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v121 = *v122;
        v123 = (_OWORD *)(((unint64_t)v121 + 23) & 0xFFFFFFFFFFFFFFF8);
        v124 = (_OWORD *)(((unint64_t)v122 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v123 = *v124;
        v125 = (_OWORD *)(((unint64_t)v123 + 23) & 0xFFFFFFFFFFFFFFF8);
        v126 = (_OWORD *)(((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v125 = *v126;
        v127 = (void *)(((unint64_t)v125 + v270) & v113);
        v128 = (const void *)(((unint64_t)v126 + v270) & v113);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v271 + 48))(v128, 1, v272))
        {
          memcpy(v127, v128, v100);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v271 + 32))(v127, v128, v272);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v127, 0, 1, v272);
        }
        v134 = 0;
        v221 = (_QWORD *)(((unint64_t)v127 + v115) & 0xFFFFFFFFFFFFFFF8);
        v222 = (_QWORD *)(((unint64_t)v128 + v115) & 0xFFFFFFFFFFFFFFF8);
        *v221 = *v222;
        v223 = (_QWORD *)(((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFF8);
        v224 = (_QWORD *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v223 = *v224;
        v225 = (_QWORD *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFFFF8);
        v226 = (_QWORD *)(((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v225 = *v226;
        v227 = (_QWORD *)(((unint64_t)v225 + 15) & 0xFFFFFFFFFFFFF8);
        v228 = (_QWORD *)(((unint64_t)v226 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v227 = *v228;
        v229 = (_QWORD *)(((unint64_t)v227 + 15) & 0xFFFFFFFFFFFFFFF8);
        v230 = (_QWORD *)(((unint64_t)v228 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v229 = *v230;
        v231 = (_QWORD *)(((unint64_t)v229 + 15) & 0xFFFFFFFFFFFFF8);
        v232 = (_QWORD *)(((unint64_t)v230 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v231 = *v232;
        *(_QWORD *)(((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v232 + 15) & 0xFFFFFFFFFFFFF8);
        goto LABEL_82;
      case 1:
        v129 = *(_OWORD *)v102;
        v130 = *(_OWORD *)(v102 + 32);
        *(_OWORD *)(v101 + 16) = *(_OWORD *)(v102 + 16);
        *(_OWORD *)(v101 + 32) = v130;
        *(_OWORD *)v101 = v129;
        v131 = *(_OWORD *)(v102 + 48);
        v132 = *(_OWORD *)(v102 + 64);
        v133 = *(_OWORD *)(v102 + 80);
        *(_OWORD *)(v101 + 91) = *(_OWORD *)(v102 + 91);
        *(_OWORD *)(v101 + 64) = v132;
        *(_OWORD *)(v101 + 80) = v133;
        *(_OWORD *)(v101 + 48) = v131;
        v134 = 1;
        goto LABEL_90;
      case 2:
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v135 = *(_OWORD *)(v102 + 16);
        v136 = *(_OWORD *)(v102 + 32);
        v137 = *(_OWORD *)(v102 + 64);
        *(_OWORD *)(v101 + 48) = *(_OWORD *)(v102 + 48);
        *(_OWORD *)(v101 + 64) = v137;
        *(_OWORD *)(v101 + 16) = v135;
        *(_OWORD *)(v101 + 32) = v136;
        v138 = *(_OWORD *)(v102 + 80);
        v139 = *(_OWORD *)(v102 + 96);
        v140 = *(_OWORD *)(v102 + 128);
        *(_OWORD *)(v101 + 112) = *(_OWORD *)(v102 + 112);
        *(_OWORD *)(v101 + 128) = v140;
        *(_OWORD *)(v101 + 80) = v138;
        *(_OWORD *)(v101 + 96) = v139;
        v134 = 2;
        goto LABEL_90;
      case 3:
        v141 = *(_OWORD *)v102;
        v142 = *(_OWORD *)(v102 + 16);
        v143 = *(_OWORD *)(v102 + 48);
        *(_OWORD *)(v101 + 32) = *(_OWORD *)(v102 + 32);
        *(_OWORD *)(v101 + 48) = v143;
        *(_OWORD *)v101 = v141;
        *(_OWORD *)(v101 + 16) = v142;
        v144 = *(_OWORD *)(v102 + 64);
        v145 = *(_OWORD *)(v102 + 80);
        v146 = *(_OWORD *)(v102 + 96);
        *(_OWORD *)(v101 + 105) = *(_OWORD *)(v102 + 105);
        *(_OWORD *)(v101 + 80) = v145;
        *(_OWORD *)(v101 + 96) = v146;
        *(_OWORD *)(v101 + 64) = v144;
        v134 = 3;
        goto LABEL_90;
      case 4:
        v147 = *(_OWORD *)v102;
        v148 = *(_OWORD *)(v102 + 16);
        v149 = *(_OWORD *)(v102 + 32);
        *(_QWORD *)(v101 + 48) = *(_QWORD *)(v102 + 48);
        *(_OWORD *)(v101 + 16) = v148;
        *(_OWORD *)(v101 + 32) = v149;
        *(_OWORD *)v101 = v147;
        v134 = 4;
        goto LABEL_90;
      case 5:
        v296 = v110;
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v150 = (_OWORD *)((v101 + 23) & 0xFFFFFFFFFFFFFFF8);
        v151 = (_OWORD *)((v102 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v150 = *v151;
        v152 = ((unint64_t)v150 + 23) & 0xFFFFFFFFFFFFFFF8;
        v153 = ((unint64_t)v151 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v152 = *(_OWORD *)v153;
        *(_BYTE *)(v152 + 16) = *(_BYTE *)(v153 + 16);
        *(_BYTE *)(v152 + 17) = *(_BYTE *)(v153 + 17);
        v154 = (_QWORD *)((v152 + 25) & 0xFFFFFFFFFFFFF8);
        v155 = (_QWORD *)((v153 + 25) & 0xFFFFFFFFFFFFF8);
        *v154 = *v155;
        v156 = (_QWORD *)(((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8);
        v157 = (_QWORD *)(((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v156 = *v157;
        v158 = (_QWORD *)(((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFF8);
        v159 = (_QWORD *)(((unint64_t)v157 + 15) & 0xFFFFFFFFFFFFF8);
        *v158 = *v159;
        v160 = (_QWORD *)(((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFF8);
        v161 = (_QWORD *)(((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFF8);
        *v160 = *v161;
        v162 = (_QWORD *)(((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8);
        v163 = (_QWORD *)(((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v162 = *v163;
        v164 = (_QWORD *)(((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFF8);
        v165 = (_QWORD *)(((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFF8);
        *v164 = *v165;
        v166 = (_QWORD *)(((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFF8);
        v167 = (_QWORD *)(((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFF8);
        *v166 = *v167;
        v168 = (_QWORD *)(((unint64_t)v166 + 15) & 0xFFFFFFFFFFFFFFF8);
        v169 = (_QWORD *)(((unint64_t)v167 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v168 = *v169;
        v170 = (_QWORD *)(((unint64_t)v168 + 15) & 0xFFFFFFFFFFFFF8);
        v171 = (_QWORD *)(((unint64_t)v169 + 15) & 0xFFFFFFFFFFFFF8);
        *v170 = *v171;
        v172 = (_QWORD *)(((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFF8);
        v173 = (_QWORD *)(((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFF8);
        *v172 = *v173;
        v174 = (_QWORD *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8);
        v175 = (_QWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v174 = *v175;
        v176 = (_QWORD *)(((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFF8);
        v177 = (_QWORD *)(((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFF8);
        *v176 = *v177;
        v178 = (_QWORD *)(((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFF8);
        v179 = (_QWORD *)(((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFF8);
        *v178 = *v179;
        v180 = (_OWORD *)(((unint64_t)v178 + 15) & 0xFFFFFFFFFFFFFFF8);
        v181 = (_OWORD *)(((unint64_t)v179 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v180 = *v181;
        v292 = (_QWORD *)(((unint64_t)v181 + v276) & v114);
        v289 = (_QWORD *)(((unint64_t)v180 + v276) & v114);
        *v289 = *v292;
        v182 = (_QWORD *)(((unint64_t)v289 + 15) & 0xFFFFFFFFFFFFFFF8);
        v183 = (_QWORD *)(((unint64_t)v292 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v182 = *v183;
        v184 = (_OWORD *)(((unint64_t)v182 + v263 + 8) & v114);
        v185 = (__int128 *)(((unint64_t)v183 + v263 + 8) & v114);
        v186 = *v185;
        v187 = v185[2];
        v184[1] = v185[1];
        v184[2] = v187;
        *v184 = v186;
        v304 = (void *)(((unint64_t)v184 + v278) & v302);
        v188 = (const void *)(((unint64_t)v185 + v278) & v302);
        v309 = *(unsigned int (**)(void))(v282 + 48);
        if (v309())
        {
          memcpy(v304, v188, v104);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v282 + 32))(v304, v188, v265);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v282 + 56))(v304, 0, 1, v265);
        }
        v233 = (void *)(((unint64_t)v184 + v105 + v263) & v302);
        v234 = (const void *)(((unint64_t)v185 + v105 + v263) & v302);
        if (((unsigned int (*)(const void *, uint64_t, uint64_t))v309)(v234, 1, v265))
        {
          memcpy(v233, v234, v104);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v282 + 32))(v233, v234, v265);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v282 + 56))(v233, 0, 1, v265);
        }
        v247 = 7;
        if (!v261)
          v247 = 8;
        *(_QWORD *)(((unint64_t)v233 + v262 + v247) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v234
                                                                                              + v262
                                                                                              + v247) & 0xFFFFFFFFFFFFF8);
        v248 = ((v104 + 7 + ((v258 + v263 + v299 + v104) & v302)) & 0xFFFFFFFFFFFFFFF8) + 8;
        v249 = ((unint64_t)v289 + v305 + v248) & v307;
        v250 = ((unint64_t)v292 + v305 + v248) & v307;
        v281(v249, v250, v297);
        v251 = (v107 + v249) & v302;
        v252 = (const void *)((v107 + v250) & v302);
        if (((unsigned int (*)(const void *, uint64_t, uint64_t))v309)(v252, 1, v265))
        {
          memcpy((void *)((v107 + v249) & v302), v252, v104);
        }
        else
        {
          (*(void (**)(unint64_t, const void *, uint64_t))(v282 + 32))(v251, v252, v265);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v282 + 56))(v251, 0, 1, v265);
        }
        v134 = 5;
        v110 = v296;
        goto LABEL_90;
      case 6:
        v189 = *(_OWORD *)v102;
        *(_QWORD *)(v101 + 16) = *(_QWORD *)(v102 + 16);
        *(_OWORD *)v101 = v189;
        v134 = 6;
        goto LABEL_90;
      case 7:
        *(_QWORD *)v101 = *(_QWORD *)v102;
        v134 = 7;
        goto LABEL_90;
      case 8:
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v190 = *(_OWORD *)(v102 + 16);
        v191 = *(_OWORD *)(v102 + 32);
        v192 = *(_OWORD *)(v102 + 48);
        *(_QWORD *)(v101 + 64) = *(_QWORD *)(v102 + 64);
        *(_OWORD *)(v101 + 32) = v191;
        *(_OWORD *)(v101 + 48) = v192;
        *(_OWORD *)(v101 + 16) = v190;
        v134 = 8;
        goto LABEL_90;
      case 9:
        v193 = *(_OWORD *)v102;
        v194 = *(_OWORD *)(v102 + 32);
        *(_OWORD *)(v101 + 16) = *(_OWORD *)(v102 + 16);
        *(_OWORD *)(v101 + 32) = v194;
        *(_OWORD *)v101 = v193;
        v195 = *(_OWORD *)(v102 + 48);
        v196 = *(_OWORD *)(v102 + 64);
        v197 = *(_OWORD *)(v102 + 80);
        *(_OWORD *)(v101 + 89) = *(_OWORD *)(v102 + 89);
        *(_OWORD *)(v101 + 64) = v196;
        *(_OWORD *)(v101 + 80) = v197;
        *(_OWORD *)(v101 + 48) = v195;
        v134 = 9;
        goto LABEL_90;
      case 0xA:
        v198 = *(_OWORD *)(v102 + 16);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *(_OWORD *)(v101 + 16) = v198;
        v199 = *(_OWORD *)(v102 + 32);
        v200 = *(_OWORD *)(v102 + 48);
        v201 = *(_OWORD *)(v102 + 64);
        *(_BYTE *)(v101 + 80) = *(_BYTE *)(v102 + 80);
        *(_OWORD *)(v101 + 48) = v200;
        *(_OWORD *)(v101 + 64) = v201;
        *(_OWORD *)(v101 + 32) = v199;
        v134 = 10;
        goto LABEL_90;
      case 0xB:
        v202 = v100 + 7;
        v116 = v110;
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v203 = (_OWORD *)((v101 + 23) & 0xFFFFFFFFFFFFFFF8);
        v204 = (_OWORD *)((v102 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v203 = *v204;
        v205 = (_OWORD *)(((unint64_t)v203 + 23) & 0xFFFFFFFFFFFFFFF8);
        v206 = (_OWORD *)(((unint64_t)v204 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v205 = *v206;
        v207 = (_OWORD *)(((unint64_t)v205 + v264 + 16) & v274);
        v208 = (_OWORD *)(((unint64_t)v206 + v264 + 16) & v274);
        *v207 = *v208;
        v209 = ((unint64_t)v207 + v266) & v112;
        v210 = ((unint64_t)v208 + v266) & v112;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v268 + 32))(v209, v210, v269);
        v211 = (_OWORD *)((v267 + v209) & 0xFFFFFFFFFFFFFFF8);
        v212 = (_OWORD *)((v267 + v210) & 0xFFFFFFFFFFFFFFF8);
        *v211 = *v212;
        v213 = (_OWORD *)(((unint64_t)v211 + 23) & 0xFFFFFFFFFFFFFFF8);
        v214 = (_OWORD *)(((unint64_t)v212 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v213 = *v214;
        v215 = (_OWORD *)(((unint64_t)v213 + 23) & 0xFFFFFFFFFFFFFFF8);
        v216 = (_OWORD *)(((unint64_t)v214 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v215 = *v216;
        v217 = (_OWORD *)(((unint64_t)v215 + 23) & 0xFFFFFFFFFFFFFFF8);
        v218 = (_OWORD *)(((unint64_t)v216 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v217 = *v218;
        v219 = (void *)(((unint64_t)v217 + v270) & v113);
        v220 = (const void *)(((unint64_t)v218 + v270) & v113);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v271 + 48))(v220, 1, v272))
        {
          memcpy(v219, v220, v100);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v271 + 32))(v219, v220, v272);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v219, 0, 1, v272);
        }
        v235 = (_QWORD *)(((unint64_t)v219 + v202) & 0xFFFFFFFFFFFFFFF8);
        v236 = (_QWORD *)(((unint64_t)v220 + v202) & 0xFFFFFFFFFFFFFFF8);
        *v235 = *v236;
        v237 = (_QWORD *)(((unint64_t)v235 + 15) & 0xFFFFFFFFFFFFF8);
        v238 = (_QWORD *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v237 = *v238;
        v239 = (_QWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8);
        v240 = (_QWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v239 = *v240;
        v241 = (_QWORD *)(((unint64_t)v239 + 15) & 0xFFFFFFFFFFFFF8);
        v242 = (_QWORD *)(((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v241 = *v242;
        v243 = (_QWORD *)(((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8);
        v244 = (_QWORD *)(((unint64_t)v242 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v243 = *v244;
        v245 = (_QWORD *)(((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFF8);
        v246 = (_QWORD *)(((unint64_t)v244 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v245 = *v246;
        *(_QWORD *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFF8);
        v134 = 11;
LABEL_82:
        v110 = v116;
LABEL_90:
        *(_BYTE *)(v101 + v110) = v134;
        v253 = (_OWORD *)(((v101 | 7) + v110 + 1) & 0xFFFFFFFFFFFFFFF8);
        v254 = (__n128 *)(((v102 | 7) + v110 + 1) & 0xFFFFFFFFFFFFFFF8);
        result = *v254;
        *v253 = *v254;
        *(_QWORD *)(((unint64_t)v253 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v254[1].n128_u64
                                                                                     + 7) & 0xFFFFFFFFFFFFF8);
        break;
      default:
        if (v110 <= 3)
          v111 = v110;
        else
          v111 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return result;
}

uint64_t sub_1BAA15C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  size_t v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void (*v59)(size_t, uint64_t);
  size_t v60;
  size_t v61;
  unint64_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  void *v67;
  const void *v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  unint64_t v73;
  size_t v74;
  void (*v75)(unint64_t, unint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  size_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  size_t v93;
  size_t v94;
  unint64_t v95;
  unint64_t v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  _OWORD *v106;
  __int128 *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void (*v111)(unint64_t, unint64_t, uint64_t);
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  unint64_t v116;
  unint64_t v117;
  size_t v118;
  unint64_t v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  __int128 v128;
  __int128 v129;
  _OWORD *v130;
  __int128 *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t *v139;
  _OWORD *v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  const void *v146;
  uint64_t v147;
  size_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  _OWORD *v158;
  _OWORD *v159;
  _OWORD *v160;
  _OWORD *v161;
  _OWORD *v162;
  _OWORD *v163;
  void *v164;
  const void *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _OWORD *v187;
  _OWORD *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _OWORD *v217;
  _OWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _OWORD *v221;
  __int128 *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD *v238;
  _OWORD *v239;
  _OWORD *v240;
  _OWORD *v241;
  _OWORD *v242;
  _OWORD *v243;
  unint64_t v244;
  unint64_t v245;
  _OWORD *v246;
  _OWORD *v247;
  _OWORD *v248;
  _OWORD *v249;
  _OWORD *v250;
  _OWORD *v251;
  _OWORD *v252;
  _OWORD *v253;
  void *v254;
  const void *v255;
  __int128 v256;
  _OWORD *v257;
  unint64_t v258;
  _OWORD *v259;
  unint64_t v260;
  __int128 v261;
  __int128 v262;
  unint64_t v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  _BOOL8 v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  size_t v280;
  unint64_t v281;
  size_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int (*v300)(uint64_t, uint64_t, uint64_t);
  unint64_t v301;
  unsigned int v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  _OWORD *v307;
  _OWORD *v308;
  _OWORD *v309;
  _OWORD *v310;
  _OWORD *v311;
  _OWORD *v312;
  _OWORD *v313;
  void *v314;
  const void *v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  char v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  _OWORD *v337;
  _OWORD *v338;
  unint64_t v339;
  unint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _OWORD *v367;
  _OWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _OWORD *v371;
  __int128 *v372;
  __int128 v373;
  __int128 v374;
  void *v375;
  const void *v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  unint64_t v390;
  size_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  _OWORD *v400;
  _OWORD *v401;
  _OWORD *v402;
  _OWORD *v403;
  _OWORD *v404;
  _OWORD *v405;
  unint64_t v406;
  unint64_t v407;
  _OWORD *v408;
  _OWORD *v409;
  _OWORD *v410;
  _OWORD *v411;
  _OWORD *v412;
  _OWORD *v413;
  _OWORD *v414;
  _OWORD *v415;
  void *v416;
  const void *v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _QWORD *v429;
  size_t v430;
  void *v431;
  const void *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  void *v449;
  unint64_t v450;
  _OWORD *v451;
  _OWORD *v452;
  uint64_t result;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  void *v466;
  const void *v467;
  _QWORD *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  void *v484;
  const void *v485;
  uint64_t v486;
  _OWORD *v487;
  int v488;
  size_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  void (*v506)(unint64_t, unint64_t, uint64_t);
  uint64_t v507;
  uint64_t (*v508)(void *, uint64_t, uint64_t);
  uint64_t v509;
  size_t __n;
  int v511;
  size_t v512;
  uint64_t v513;
  size_t v514;
  uint64_t v515;
  _QWORD *v516;
  size_t v517;
  unint64_t v518;
  unsigned int (*v519)(const void *, uint64_t, uint64_t);
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  size_t v523;
  size_t v524;
  const void *v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  size_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  _QWORD *v534;
  size_t v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  unsigned int (*v541)(void);
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  size_t v545;
  void *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  unsigned int (*v551)(void);
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void (*v555)(unint64_t, unint64_t, uint64_t);
  _BOOL8 v556;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BB86EB84();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v548 = a1;
  v549 = (v9 | 7) + v6;
  v554 = ~(v9 | 7);
  v10 = (_QWORD *)((v549 + a1) & v554);
  v532 = a2;
  v540 = v9 | 7;
  v11 = (_QWORD *)((v549 + a2) & v554);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRelease();
  v12 = v9 + 16;
  v553 = ~v9;
  v13 = ((unint64_t)v10 + v9 + 16) & ~v9;
  v14 = ((unint64_t)v11 + v9 + 16) & ~v9;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v15(v13, v14, v7);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = v16 + v9;
  v18 = (v16 + v9 + v13) & ~v9;
  v19 = (v16 + v9 + v14) & ~v9;
  v15(v18, v19, v7);
  v20 = (void *)((v16 + v9 + v18) & ~v9);
  v543 = v9;
  v21 = (void *)((v16 + v9 + v19) & ~v9);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v9) = v22(v20, 1, v7);
  v508 = v22;
  v23 = v22(v21, 1, v7);
  v527 = v7;
  v506 = (void (*)(unint64_t, unint64_t, uint64_t))v15;
  if ((_DWORD)v9)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v20, v21, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v23)
    {
      v15((uint64_t)v20, (uint64_t)v21, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v20, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v24 = v16;
  else
    v24 = v16 + 1;
  memcpy(v20, v21, v24);
LABEL_10:
  v509 = v8;
  v544 = *(_DWORD *)(v8 + 84);
  if (v544)
    v25 = v16;
  else
    v25 = v16 + 1;
  v26 = (_QWORD *)(((unint64_t)v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  swift_bridgeObjectRelease();
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
  *v30 = *v31;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v32 = (((((((v25 + ((v17 + (((v12 | v543) + v16) & v553)) & v553) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v499 = sub_1BB86C8B0();
  v33 = v16;
  v34 = *(_QWORD *)(v499 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v503 = sub_1BB871E24();
  v36 = *(_QWORD *)(v503 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v37 | v35;
  v504 = sub_1BB86E710();
  v39 = *(_QWORD *)(v504 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = v40 | 7;
  v42 = v37 | v35 | v543 | v40 | 7;
  v43 = (v549 & v554) + v42 + v32 + 8;
  v550 = (_QWORD *)((v43 + v548) & ~v42);
  v44 = v532;
  v533 = v42;
  v536 = ~v42;
  v45 = (_OWORD *)((v43 + v44) & ~v42);
  if (v544 <= 0x7FFFFFFF)
    v46 = 0x7FFFFFFF;
  else
    v46 = v544;
  if (v46 - 1 >= v46)
    --v46;
  v496 = ~v35;
  v495 = v35 + 16;
  v497 = *(_QWORD *)(v34 + 64) + 7;
  v498 = v34;
  v501 = ~v37;
  v500 = v37 + 16;
  v521 = (v37
        + 16
        + ((((((((v497 + ((v35 + 16) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v37;
  v502 = v36;
  v523 = *(_QWORD *)(v36 + 64);
  v493 = ~v41;
  v492 = v40 + 16;
  v531 = ~v40;
  v526 = *(unsigned __int8 *)(v39 + 80);
  v530 = (v40 + 48) & ~v40;
  v528 = *(_DWORD *)(v39 + 84);
  v507 = *(_QWORD *)(v504 - 8);
  v529 = *(_QWORD *)(v39 + 64);
  v491 = v37 | v35;
  v490 = v38 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v517 = v33;
  v520 = (v38 + 48) & v490;
  v47 = v543 + 48;
  v48 = v543;
  v49 = v33 + ((v543 + 128) & v553);
  v50 = v33 + 7;
  v51 = ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v494 = v40 + 48;
  v513 = (v40 + 16) & ~v41;
  v515 = (v40 + 176) & ~v41;
  v511 = *(_DWORD *)(v36 + 84);
  __n = v49;
  if ((v46 & 0x80000000) != 0)
  {
    v60 = v49 + v540;
    v488 = v508((void *)((v49 + v540 + (((unint64_t)v550 + v47) & v554)) & v554), v544, v7);
    v48 = v543;
    v53 = v508((void *)((v60 + (((unint64_t)v45 + v47) & v554)) & v554), v544, v7);
    if (!v488)
      goto LABEL_22;
  }
  else
  {
    v52 = *((_QWORD *)v45 + 1);
    if (v52 >= 0xFFFFFFFF)
      LODWORD(v52) = -1;
    v53 = v52 + 1;
    if (v550[1] > 0xFFFFFFFEuLL)
    {
LABEL_22:
      v505 = ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      v489 = v33 + 7;
      if (v53)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v54 = ((unint64_t)v550 + v47) & v554;
        if ((v544 & 0x80000000) != 0)
        {
          v58 = v553;
          v56 = v527;
          v57 = v511;
          v486 = (v543 + 48) & v554;
          v487 = v45;
          if (((unsigned int (*)(unint64_t))v508)((v48 + ((v54 + 71) & 0xFFFFFFFFFFFFFFF8) + 64) & v553))
          {
LABEL_27:
            v59 = *(void (**)(size_t, uint64_t))(v509 + 8);
LABEL_63:
            v545 = __n + v540;
            v93 = (__n + v540 + v54) & v554;
            v59(v93, v56);
            swift_bridgeObjectRelease();
            v94 = v523;
            if (!v57)
              v94 = v523 + 1;
            v95 = (v533 + v51 + v93) & v536;
            v96 = ((((((((((((((v94 + 7 + v521) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 8;
            if (v528)
              v97 = v529;
            else
              v97 = v529 + 1;
            v98 = v513 + v526;
            v99 = v48 + 8;
            v100 = ((v517
                   + v526
                   + ((v48 + 8 + v515 + ((v97 + 7 + ((v513 + v526 + v97 + v530) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v58)) & v531)
                 + v97;
            if (v96 > v100)
              v100 = v96;
            v101 = v96 + v520;
            if (v100 > v101)
              v101 = v100;
            if (v101 <= 0x90)
              v102 = 144;
            else
              v102 = v101;
            switch(*(_BYTE *)(v95 + v102))
            {
              case 0:
                swift_bridgeObjectRelease();
                v145 = v495 + v95;
                goto LABEL_134;
              case 1:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v147 = v486;
                v146 = v487;
                v148 = __n + v540;
                if (*(unsigned __int8 *)(v95 + 106) != 255)
                {
                  v149 = *(unsigned __int16 *)(v95 + 104) | (*(unsigned __int8 *)(v95 + 106) << 16);
                  sub_1BA77A170(*(_QWORD *)(v95 + 96), v149, SBYTE2(v149), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
                }
                goto LABEL_139;
              case 2:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v95 + 72) >= 3uLL)
                  swift_bridgeObjectRelease();
                goto LABEL_136;
              case 3:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v95 + 56) >= 0xFuLL)
                  swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_137;
              case 4:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_137;
              case 5:
                v524 = v97 + 7;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(((((((((((((((((((((((((((((((((v95 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                           + 25) & 0xFFFFFFFFFFFFF8)
                                                         + 15) & 0xFFFFFFFFFFFFF8)
                                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                                     + 15) & 0xFFFFFFFFFFFFF8)
                                                   + 15) & 0xFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8)
                                               + 15) & 0xFFFFFFFFFFFFF8)
                                             + 15) & 0xFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 8) >= 0xFFFFFFFFuLL)
                  swift_bridgeObjectRelease();
                v522 = (v492
                      + ((((((((((((((((((((((((((((((((v95 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                  + 25) & 0xFFFFFFFFFFFFF8)
                                                + 15) & 0xFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)) & v493;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v150 = (v526 + ((v522 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v493;
                LODWORD(v151) = -1;
                if (*(_QWORD *)(v150 + 8) < 0xFFFFFFFFuLL)
                  v151 = *(_QWORD *)(((v526 + ((v522 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v493) + 8);
                if ((int)v151 - 1 < 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                v541 = *(unsigned int (**)(void))(v507 + 48);
                if (!v541())
                  (*(void (**)(unint64_t, uint64_t))(v507 + 8))((v494 + v150) & v531, v504);
                v152 = (v97 + v530 + v526 + v150) & v531;
                if (!((unsigned int (*)(unint64_t, uint64_t, uint64_t))v541)(v152, 1, v504))
                  (*(void (**)(unint64_t, uint64_t))(v507 + 8))(v152, v504);
                swift_bridgeObjectRelease();
                v59((v99 + v522 + ((v524 + ((v98 + v530 + v97) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v58, v527);
                v153 = (v517
                      + v526
                      + ((v99 + v522 + ((v524 + ((v98 + v530 + v97) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v58)) & v531;
                v147 = v486;
                v146 = v487;
                v148 = v545;
                if (!((unsigned int (*)(unint64_t, uint64_t, uint64_t))v541)(v153, 1, v504))
                  (*(void (**)(unint64_t, uint64_t))(v507 + 8))(v153, v504);
                goto LABEL_139;
              case 6:
                swift_bridgeObjectRelease();
                goto LABEL_137;
              case 7:
                swift_release();
                goto LABEL_138;
              case 8:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_137;
              case 9:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_137;
              case 0xA:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1BA6C0C20(*(_QWORD *)(v95 + 32), *(_QWORD *)(v95 + 40), *(_QWORD *)(v95 + 48), *(_QWORD *)(v95 + 56), *(_QWORD *)(v95 + 64), *(_QWORD *)(v95 + 72), *(_BYTE *)(v95 + 80));
                goto LABEL_138;
              case 0xB:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v145 = v495 + ((v491 + ((((v95 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v490);
LABEL_134:
                v154 = v145 & v496;
                (*(void (**)(uint64_t, uint64_t))(v498 + 8))(v145 & v496, v499);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v155 = (v500
                      + ((((((((v497 + v154) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)) & v501;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v502 + 48))(v155, 1, v503))
                  (*(void (**)(unint64_t, uint64_t))(v502 + 8))(v155, v503);
LABEL_136:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_137:
                swift_bridgeObjectRelease();
LABEL_138:
                v147 = v486;
                v146 = v487;
                v148 = __n + v540;
LABEL_139:
                sub_1BA69D314(*(_QWORD *)((v95 + v102 + 8) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v95 + v102 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
                swift_bridgeObjectRelease();
                v66 = ((((v148 + v147) & v554) + v51 + v533) & v536)
                    + (((v102 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 8;
                v67 = v550;
                v68 = v146;
                break;
              default:
                if (v102 <= 3)
                  v103 = v102;
                else
                  v103 = 4;
                __asm { BR              X12 }
                return result;
            }
LABEL_140:
            memcpy(v67, v68, v66);
            return v548;
          }
        }
        else
        {
          v55 = *(_QWORD *)(v54 + 56);
          if (v55 >= 0xFFFFFFFF)
            LODWORD(v55) = -1;
          v56 = v7;
          v57 = v511;
          v58 = v553;
          v486 = (v543 + 48) & v554;
          v487 = v45;
          if ((_DWORD)v55 != -1)
            goto LABEL_27;
        }
        sub_1BA986FA0(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 16));
        v90 = *(unsigned __int8 *)(v54 + 40);
        if ((((v90 >> 6) & 0xFFFFFF83 | (4 * ((v90 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
          sub_1BA895B84(*(_QWORD *)(v54 + 24), *(_QWORD *)(v54 + 32), v90);
        swift_bridgeObjectRelease();
        v91 = (v54 + 71) & 0xFFFFFFFFFFFFFFF8;
        if (*(unsigned __int16 *)(v91 + 44) >> 9 <= 0x7EuLL)
          sub_1BA8EBC78(*(_QWORD *)v91, *(_QWORD *)(v91 + 8), *(_QWORD *)(v91 + 16), *(_QWORD *)(v91 + 24), *(_QWORD *)(v91 + 32), *(unsigned int *)(v91 + 40) | ((unint64_t)*(unsigned __int16 *)(v91 + 44) << 32));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v92 = (v48 + v91 + 64) & v58;
        v59 = *(void (**)(size_t, uint64_t))(v509 + 8);
        v59(v92, v56);
        goto LABEL_63;
      }
      *v550 = *(_QWORD *)v45;
      v550[1] = *((_QWORD *)v45 + 1);
      swift_bridgeObjectRelease();
      v550[2] = *((_QWORD *)v45 + 2);
      *((_BYTE *)v550 + 24) = *((_BYTE *)v45 + 24);
      v550[4] = *((_QWORD *)v45 + 4);
      v550[5] = *((_QWORD *)v45 + 5);
      swift_bridgeObjectRelease();
      v77 = v554;
      v78 = ((unint64_t)v550 + v47) & v554;
      v79 = (_OWORD *)(((unint64_t)v45 + v47) & v554);
      if ((v544 & 0x80000000) != 0)
      {
        v127 = ((uint64_t (*)(unint64_t))v508)((v48 + 64 + ((v78 + 71) & 0xFFFFFFFFFFFFFFF8)) & v553);
        v83 = v7;
        v77 = v554;
        v85 = v543;
        v82 = v508((void *)((v48 + 64 + (((unint64_t)v79 + 71) & 0xFFFFFFFFFFFFFFF8)) & v553), v544, v7);
        v84 = v509;
        if (!v127)
          goto LABEL_50;
      }
      else
      {
        v80 = *(_QWORD *)((((unint64_t)v550 + v47) & v554) + 0x38);
        v81 = *(_QWORD *)((((unint64_t)v45 + v47) & v554) + 0x38);
        if (v81 >= 0xFFFFFFFF)
          LODWORD(v81) = -1;
        v82 = v81 + 1;
        v83 = v7;
        v84 = v509;
        v85 = v48;
        if (v80 > 0xFFFFFFFE)
        {
LABEL_50:
          if (v82)
          {
            sub_1BA986FA0(*(_QWORD *)v78, *(_QWORD *)(v78 + 8), *(_BYTE *)(v78 + 16));
            v86 = *(unsigned __int8 *)(v78 + 40);
            v87 = v511;
            if ((((v86 >> 6) & 0xFFFFFF83 | (4 * ((v86 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
              sub_1BA895B84(*(_QWORD *)(v78 + 24), *(_QWORD *)(v78 + 32), v86);
            swift_bridgeObjectRelease();
            v88 = (v78 + 71) & 0xFFFFFFFFFFFFFFF8;
            v89 = __n;
            if (*(unsigned __int16 *)(v88 + 44) >> 9 <= 0x7EuLL)
              sub_1BA8EBC78(*(_QWORD *)v88, *(_QWORD *)(v88 + 8), *(_QWORD *)(v88 + 16), *(_QWORD *)(v88 + 24), *(_QWORD *)(v88 + 32), *(unsigned int *)(v88 + 40) | ((unint64_t)*(unsigned __int16 *)(v88 + 44) << 32));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v84 + 8))((v85 + v88 + 64) & v553, v83);
            memcpy((void *)v78, v79, __n);
            goto LABEL_165;
          }
          v135 = *((_BYTE *)v79 + 16);
          v136 = *(_QWORD *)v78;
          v137 = *(_QWORD *)(v78 + 8);
          *(_OWORD *)v78 = *v79;
          v138 = *(_BYTE *)(v78 + 16);
          *(_BYTE *)(v78 + 16) = v135;
          sub_1BA986FA0(v136, v137, v138);
          v139 = (uint64_t *)(v78 + 24);
          v140 = (_OWORD *)((char *)v79 + 24);
          v141 = *(unsigned __int8 *)(v78 + 40);
          if ((((v141 >> 6) & 0xFFFFFF83 | (4 * ((v141 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
          {
            v142 = *((unsigned __int8 *)v79 + 40);
            v143 = *v139;
            v144 = *(_QWORD *)(v78 + 32);
            if ((((v142 >> 6) & 0xFFFFFF83 | (4 * ((v142 >> 1) & 0x1F))) ^ 0x7F) >= 0x7D)
            {
              *(_OWORD *)v139 = *v140;
              *(_BYTE *)(v78 + 40) = v142;
              sub_1BA895B84(v143, v144, v141);
LABEL_159:
              v87 = v511;
              v89 = __n;
              *(_QWORD *)(v78 + 48) = *((_QWORD *)v79 + 6);
              *(_QWORD *)(v78 + 56) = *((_QWORD *)v79 + 7);
              swift_bridgeObjectRelease();
              v257 = v79;
              v258 = (v78 + 71) & 0xFFFFFFFFFFFFFFF8;
              v259 = v257;
              v260 = ((unint64_t)v257 + 71) & 0xFFFFFFFFFFFFFFF8;
              if (*(unsigned __int16 *)(v258 + 44) >> 9 <= 0x7EuLL)
              {
                v263 = *(unsigned int *)(v260 + 40) | ((unint64_t)*(unsigned __int16 *)(v260 + 44) << 32);
                if (((v263 >> 41) & 0x7F) == 0x7F)
                {
                  sub_1BAA14AE0((v78 + 71) & 0xFFFFFFFFFFFFFFF8);
                  v264 = *(_OWORD *)(v260 + 30);
                  v265 = *(_OWORD *)(v260 + 16);
                  *(_OWORD *)v258 = *(_OWORD *)v260;
                  *(_OWORD *)(v258 + 16) = v265;
                  *(_OWORD *)(v258 + 30) = v264;
                }
                else
                {
                  v266 = *(unsigned int *)(v258 + 40) | ((unint64_t)*(unsigned __int16 *)(v258 + 44) << 32);
                  v267 = *(_QWORD *)(v260 + 32);
                  v268 = *(_QWORD *)v258;
                  v269 = *(_QWORD *)(v258 + 8);
                  v270 = *(_QWORD *)(v258 + 16);
                  v271 = *(_QWORD *)(v258 + 24);
                  v272 = *(_QWORD *)(v258 + 32);
                  v273 = *(_OWORD *)(v260 + 16);
                  *(_OWORD *)v258 = *(_OWORD *)v260;
                  *(_OWORD *)(v258 + 16) = v273;
                  *(_QWORD *)(v258 + 32) = v267;
                  *(_DWORD *)(v258 + 40) = v263;
                  *(_WORD *)(v258 + 44) = WORD2(v263);
                  sub_1BA8EBC78(v268, v269, v270, v271, v272, v266);
                }
              }
              else
              {
                v261 = *(_OWORD *)v260;
                v262 = *(_OWORD *)(v260 + 16);
                *(_OWORD *)(v258 + 30) = *(_OWORD *)(v260 + 30);
                *(_OWORD *)v258 = v261;
                *(_OWORD *)(v258 + 16) = v262;
              }
              *(_QWORD *)(v258 + 48) = *(_QWORD *)(v260 + 48);
              swift_bridgeObjectRelease();
              *(_QWORD *)(v258 + 56) = *(_QWORD *)(v260 + 56);
              swift_bridgeObjectRelease();
              v83 = v527;
              v506((v85 + 64 + v258) & v553, (v85 + 64 + v260) & v553, v527);
              v79 = v259;
              goto LABEL_165;
            }
            sub_1BA895B84(v143, v144, v141);
          }
          v256 = *v140;
          *(_BYTE *)(v78 + 40) = *((_BYTE *)v79 + 40);
          *(_OWORD *)v139 = v256;
          goto LABEL_159;
        }
      }
      if (v82)
      {
        v89 = __n;
        memcpy((void *)v78, v79, __n);
        v87 = v511;
      }
      else
      {
        v128 = *v79;
        *(_BYTE *)(v78 + 16) = *((_BYTE *)v79 + 16);
        *(_OWORD *)v78 = v128;
        v129 = *(_OWORD *)((char *)v79 + 24);
        *(_BYTE *)(v78 + 40) = *((_BYTE *)v79 + 40);
        *(_OWORD *)(v78 + 24) = v129;
        *(_OWORD *)(v78 + 48) = v79[3];
        v130 = (_OWORD *)((v78 + 71) & 0xFFFFFFFFFFFFFFF8);
        v131 = (__int128 *)(((unint64_t)v79 + 71) & 0xFFFFFFFFFFFFFFF8);
        v132 = *v131;
        v133 = v131[1];
        v134 = v131[3];
        v130[2] = v131[2];
        v130[3] = v134;
        *v130 = v132;
        v130[1] = v133;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v84 + 32))(((unint64_t)v130 + v85 + 64) & v553, ((unint64_t)v131 + v85 + 64) & v553, v83);
        v87 = v511;
        v89 = __n;
      }
LABEL_165:
      v274 = v87 == 0;
      v275 = (v89 + v540 + v78) & v77;
      v276 = ((unint64_t)v79 + v89 + v540) & v77;
      v506(v275, v276, v83);
      *(_QWORD *)((v489 + v275) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v489 + v276) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      v277 = (v533 + v505 + v275) & v536;
      v278 = (v533 + v505 + v276) & v536;
      if (v277 == v278)
      {
        v289 = v513 + v526;
        v290 = v85 + v515 + 8;
        v285 = v520;
        v291 = v517 + v526;
        v292 = v553;
        v293 = v531;
        v279 = v521;
      }
      else
      {
        v279 = v521;
        v556 = v87 == 0;
        v280 = v523 + v274;
        v538 = v523 + v274 + 7;
        v281 = ((((((((((((((v538 + v521) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 8;
        if (v528)
          v282 = v529;
        else
          v282 = v529 + 1;
        v552 = v513 + v526;
        v514 = v282 + v530;
        v535 = v282 + 7;
        v283 = v85 + 8;
        v542 = v85 + 8 + v515;
        v547 = v517 + v526;
        v284 = ((v517 + v526 + ((v542 + ((v282 + 7 + ((v552 + v282 + v530) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v553)) & v531)
             + v282;
        if (v281 > v284)
          v284 = ((((((((((((((v538 + v521) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 8;
        v285 = v520;
        v286 = v281 + v520;
        if (v284 > v286)
          v286 = v284;
        if (v286 <= 0x90)
          v287 = 144;
        else
          v287 = v286;
        v294 = v507;
        v512 = v280;
        switch(*(_BYTE *)(v277 + v287))
        {
          case 0:
            swift_bridgeObjectRelease();
            v295 = v495 + v277;
            goto LABEL_211;
          case 1:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v274 = v87 == 0;
            if (*(unsigned __int8 *)(v277 + 106) != 255)
            {
              v296 = *(unsigned __int16 *)(v277 + 104) | (*(unsigned __int8 *)(v277 + 106) << 16);
              sub_1BA77A170(*(_QWORD *)(v277 + 96), v296, SBYTE2(v296), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
            }
            goto LABEL_216;
          case 2:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v277 + 72) >= 3uLL)
              swift_bridgeObjectRelease();
            goto LABEL_213;
          case 3:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v277 + 56) >= 0xFuLL)
              swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_214;
          case 4:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_214;
          case 5:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(((((((((((((((((((((((((((((((((v277 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                       + 25) & 0xFFFFFFFFFFFFF8)
                                                     + 15) & 0xFFFFFFFFFFFFF8)
                                                   + 15) & 0xFFFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8)
                                               + 15) & 0xFFFFFFFFFFFFF8)
                                             + 15) & 0xFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 8) >= 0xFFFFFFFFuLL)
              swift_bridgeObjectRelease();
            v518 = (v492
                  + ((((((((((((((((((((((((((((((((v277 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)) & v493;
            swift_bridgeObjectRelease();
            v297 = (v518 + 15) & 0xFFFFFFFFFFFFFFF8;
            swift_bridgeObjectRelease();
            v298 = (v526 + v297 + 8) & v493;
            LODWORD(v299) = -1;
            if (*(_QWORD *)(v298 + 8) < 0xFFFFFFFFuLL)
              v299 = *(_QWORD *)(((v526 + v297 + 8) & v493) + 8);
            if ((int)v299 - 1 < 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v300 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v507 + 48);
            if (!v300((v494 + v298) & v531, 1, v504))
              (*(void (**)(uint64_t, uint64_t))(v507 + 8))((v494 + v298) & v531, v504);
            if (!v300((v514 + v526 + v298) & v531, 1, v504))
              (*(void (**)(size_t, uint64_t))(v507 + 8))((v514 + v526 + v298) & v531, v504);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v509 + 8))((v283 + v518 + ((v535 + ((v552 + v530 + v282) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v553, v527);
            v301 = (v547 + ((v283 + v518 + ((v535 + ((v552 + v530 + v282) & v531)) & 0xFFFFFFFFFFFFFFF8)) & v553)) & v531;
            v302 = v300(v301, 1, v504);
            v294 = v507;
            v285 = v520;
            v279 = v521;
            v274 = v87 == 0;
            if (!v302)
              (*(void (**)(unint64_t, uint64_t))(v507 + 8))(v301, v504);
            goto LABEL_216;
          case 6:
            swift_bridgeObjectRelease();
            goto LABEL_214;
          case 7:
            swift_release();
            goto LABEL_215;
          case 8:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_214;
          case 9:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_214;
          case 0xA:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BA6C0C20(*(_QWORD *)(v277 + 32), *(_QWORD *)(v277 + 40), *(_QWORD *)(v277 + 48), *(_QWORD *)(v277 + 56), *(_QWORD *)(v277 + 64), *(_QWORD *)(v277 + 72), *(_BYTE *)(v277 + 80));
            goto LABEL_215;
          case 0xB:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v295 = v495 + ((v491 + ((((v277 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v490);
LABEL_211:
            v303 = v295 & v496;
            (*(void (**)(uint64_t, uint64_t))(v498 + 8))(v295 & v496, v499);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v304 = (v500
                  + ((((((((v497 + v303) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)) & v501;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v502 + 48))(v304, 1, v503))
              (*(void (**)(unint64_t, uint64_t))(v502 + 8))(v304, v503);
LABEL_213:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_214:
            swift_bridgeObjectRelease();
LABEL_215:
            v274 = v87 == 0;
LABEL_216:
            v293 = v531;
            switch(*(_BYTE *)(v278 + v287))
            {
              case 0:
                *(_OWORD *)v277 = *(_OWORD *)v278;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v498 + 32))((v495 + v277) & v496, (v495 + v278) & v496, v499);
                v306 = (_OWORD *)((v497 + ((v495 + v277) & v496)) & 0xFFFFFFFFFFFFFFF8);
                v307 = (_OWORD *)((v497 + ((v495 + v278) & v496)) & 0xFFFFFFFFFFFFFFF8);
                *v306 = *v307;
                v308 = (_OWORD *)(((unint64_t)v306 + 23) & 0xFFFFFFFFFFFFFFF8);
                v309 = (_OWORD *)(((unint64_t)v307 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v308 = *v309;
                v310 = (_OWORD *)(((unint64_t)v308 + 23) & 0xFFFFFFFFFFFFFFF8);
                v311 = (_OWORD *)(((unint64_t)v309 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v310 = *v311;
                v312 = (_OWORD *)(((unint64_t)v310 + 23) & 0xFFFFFFFFFFFFFFF8);
                v313 = (_OWORD *)(((unint64_t)v311 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v312 = *v313;
                v314 = (void *)(((unint64_t)v312 + v500) & v501);
                v315 = (const void *)(((unint64_t)v313 + v500) & v501);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v502 + 48))(v315, 1, v503))
                {
                  memcpy(v314, v315, v512);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v502 + 32))(v314, v315, v503);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v502 + 56))(v314, 0, 1, v503);
                }
                v292 = v553;
                v274 = v556;
                v454 = (_QWORD *)(((unint64_t)v314 + v538) & 0xFFFFFFFFFFFFFFF8);
                v455 = (_QWORD *)(((unint64_t)v315 + v538) & 0xFFFFFFFFFFFFFFF8);
                *v454 = *v455;
                v456 = (_QWORD *)(((unint64_t)v454 + 15) & 0xFFFFFFFFFFFFF8);
                v457 = (_QWORD *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v456 = *v457;
                v458 = (_QWORD *)(((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFFFF8);
                v459 = (_QWORD *)(((unint64_t)v457 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v458 = *v459;
                v460 = (_QWORD *)(((unint64_t)v458 + 15) & 0xFFFFFFFFFFFFF8);
                v461 = (_QWORD *)(((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v460 = *v461;
                v462 = (_QWORD *)(((unint64_t)v460 + 15) & 0xFFFFFFFFFFFFFFF8);
                v463 = (_QWORD *)(((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v462 = *v463;
                v464 = (_QWORD *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFF8);
                v465 = (_QWORD *)(((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v464 = *v465;
                *(_QWORD *)(((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v465
                                                                                             + 15) & 0xFFFFFFFFFFFFF8);
                *(_BYTE *)(v277 + v287) = 0;
                goto LABEL_271;
              case 1:
                v316 = *(_OWORD *)v278;
                v317 = *(_OWORD *)(v278 + 32);
                *(_OWORD *)(v277 + 16) = *(_OWORD *)(v278 + 16);
                *(_OWORD *)(v277 + 32) = v317;
                *(_OWORD *)v277 = v316;
                v318 = *(_OWORD *)(v278 + 48);
                v319 = *(_OWORD *)(v278 + 64);
                v320 = *(_OWORD *)(v278 + 80);
                *(_OWORD *)(v277 + 91) = *(_OWORD *)(v278 + 91);
                *(_OWORD *)(v277 + 64) = v319;
                *(_OWORD *)(v277 + 80) = v320;
                *(_OWORD *)(v277 + 48) = v318;
                v321 = 1;
                goto LABEL_235;
              case 2:
                *(_OWORD *)v277 = *(_OWORD *)v278;
                v322 = *(_OWORD *)(v278 + 16);
                v323 = *(_OWORD *)(v278 + 32);
                v324 = *(_OWORD *)(v278 + 64);
                *(_OWORD *)(v277 + 48) = *(_OWORD *)(v278 + 48);
                *(_OWORD *)(v277 + 64) = v324;
                *(_OWORD *)(v277 + 16) = v322;
                *(_OWORD *)(v277 + 32) = v323;
                v325 = *(_OWORD *)(v278 + 80);
                v326 = *(_OWORD *)(v278 + 96);
                v327 = *(_OWORD *)(v278 + 128);
                *(_OWORD *)(v277 + 112) = *(_OWORD *)(v278 + 112);
                *(_OWORD *)(v277 + 128) = v327;
                *(_OWORD *)(v277 + 80) = v325;
                *(_OWORD *)(v277 + 96) = v326;
                v321 = 2;
                goto LABEL_235;
              case 3:
                v328 = *(_OWORD *)v278;
                v329 = *(_OWORD *)(v278 + 16);
                v330 = *(_OWORD *)(v278 + 48);
                *(_OWORD *)(v277 + 32) = *(_OWORD *)(v278 + 32);
                *(_OWORD *)(v277 + 48) = v330;
                *(_OWORD *)v277 = v328;
                *(_OWORD *)(v277 + 16) = v329;
                v331 = *(_OWORD *)(v278 + 64);
                v332 = *(_OWORD *)(v278 + 80);
                v333 = *(_OWORD *)(v278 + 96);
                *(_OWORD *)(v277 + 105) = *(_OWORD *)(v278 + 105);
                *(_OWORD *)(v277 + 80) = v332;
                *(_OWORD *)(v277 + 96) = v333;
                *(_OWORD *)(v277 + 64) = v331;
                v321 = 3;
                goto LABEL_235;
              case 4:
                v334 = *(_OWORD *)v278;
                v335 = *(_OWORD *)(v278 + 16);
                v336 = *(_OWORD *)(v278 + 32);
                *(_QWORD *)(v277 + 48) = *(_QWORD *)(v278 + 48);
                *(_OWORD *)(v277 + 16) = v335;
                *(_OWORD *)(v277 + 32) = v336;
                *(_OWORD *)v277 = v334;
                v321 = 4;
                goto LABEL_235;
              case 5:
                *(_OWORD *)v277 = *(_OWORD *)v278;
                v337 = (_OWORD *)((v277 + 23) & 0xFFFFFFFFFFFFFFF8);
                v338 = (_OWORD *)((v278 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v337 = *v338;
                v339 = ((unint64_t)v337 + 23) & 0xFFFFFFFFFFFFFFF8;
                v340 = ((unint64_t)v338 + 23) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)v339 = *(_OWORD *)v340;
                *(_BYTE *)(v339 + 16) = *(_BYTE *)(v340 + 16);
                *(_BYTE *)(v339 + 17) = *(_BYTE *)(v340 + 17);
                v341 = (_QWORD *)((v339 + 25) & 0xFFFFFFFFFFFFF8);
                v342 = (_QWORD *)((v340 + 25) & 0xFFFFFFFFFFFFF8);
                *v341 = *v342;
                v343 = (_QWORD *)(((unint64_t)v341 + 15) & 0xFFFFFFFFFFFFFFF8);
                v344 = (_QWORD *)(((unint64_t)v342 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v343 = *v344;
                v345 = (_QWORD *)(((unint64_t)v343 + 15) & 0xFFFFFFFFFFFFF8);
                v346 = (_QWORD *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFF8);
                *v345 = *v346;
                v347 = (_QWORD *)(((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFF8);
                v348 = (_QWORD *)(((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFF8);
                *v347 = *v348;
                v349 = (_QWORD *)(((unint64_t)v347 + 15) & 0xFFFFFFFFFFFFFFF8);
                v350 = (_QWORD *)(((unint64_t)v348 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v349 = *v350;
                v351 = (_QWORD *)(((unint64_t)v349 + 15) & 0xFFFFFFFFFFFFF8);
                v352 = (_QWORD *)(((unint64_t)v350 + 15) & 0xFFFFFFFFFFFFF8);
                *v351 = *v352;
                v353 = (_QWORD *)(((unint64_t)v351 + 15) & 0xFFFFFFFFFFFFF8);
                v354 = (_QWORD *)(((unint64_t)v352 + 15) & 0xFFFFFFFFFFFFF8);
                *v353 = *v354;
                v355 = (_QWORD *)(((unint64_t)v353 + 15) & 0xFFFFFFFFFFFFFFF8);
                v356 = (_QWORD *)(((unint64_t)v354 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v355 = *v356;
                v357 = (_QWORD *)(((unint64_t)v355 + 15) & 0xFFFFFFFFFFFFF8);
                v358 = (_QWORD *)(((unint64_t)v356 + 15) & 0xFFFFFFFFFFFFF8);
                *v357 = *v358;
                v359 = (_QWORD *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFF8);
                v360 = (_QWORD *)(((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFF8);
                *v359 = *v360;
                v361 = (_QWORD *)(((unint64_t)v359 + 15) & 0xFFFFFFFFFFFFFFF8);
                v362 = (_QWORD *)(((unint64_t)v360 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v361 = *v362;
                v363 = (_QWORD *)(((unint64_t)v361 + 15) & 0xFFFFFFFFFFFFF8);
                v364 = (_QWORD *)(((unint64_t)v362 + 15) & 0xFFFFFFFFFFFFF8);
                *v363 = *v364;
                v365 = (_QWORD *)(((unint64_t)v363 + 15) & 0xFFFFFFFFFFFFF8);
                v366 = (_QWORD *)(((unint64_t)v364 + 15) & 0xFFFFFFFFFFFFF8);
                *v365 = *v366;
                v367 = (_OWORD *)(((unint64_t)v365 + 15) & 0xFFFFFFFFFFFFFFF8);
                v368 = (_OWORD *)(((unint64_t)v366 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v367 = *v368;
                v539 = (_QWORD *)(((unint64_t)v368 + v492) & v493);
                v516 = (_QWORD *)(((unint64_t)v367 + v492) & v493);
                *v516 = *v539;
                v369 = (_QWORD *)(((unint64_t)v516 + 15) & 0xFFFFFFFFFFFFFFF8);
                v370 = (_QWORD *)(((unint64_t)v539 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v369 = *v370;
                v371 = (_OWORD *)(((unint64_t)v369 + v526 + 8) & v493);
                v372 = (__int128 *)(((unint64_t)v370 + v526 + 8) & v493);
                v373 = *v372;
                v374 = v372[2];
                v371[1] = v372[1];
                v371[2] = v374;
                *v371 = v373;
                v375 = (void *)(((unint64_t)v371 + v494) & v531);
                v376 = (const void *)(((unint64_t)v372 + v494) & v531);
                v519 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v294 + 48);
                if (v519(v376, 1, v504))
                {
                  memcpy(v375, v376, v282);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v294 + 32))(v375, v376, v504);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v375, 0, 1, v504);
                }
                v466 = (void *)(((unint64_t)v371 + v514 + v526) & v531);
                v467 = (const void *)(((unint64_t)v372 + v514 + v526) & v531);
                if (v519(v467, 1, v504))
                {
                  memcpy(v466, v467, v282);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v507 + 32))(v466, v467, v504);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v507 + 56))(v466, 0, 1, v504);
                }
                v480 = 7;
                if (!v528)
                  v480 = 8;
                *(_QWORD *)(((unint64_t)v466 + v529 + v480) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v467 + v529 + v480) & 0xFFFFFFFFFFFFF8);
                v481 = ((v535 + ((v552 + v530 + v282) & v531)) & 0xFFFFFFFFFFFFFFF8) + 8;
                v482 = ((unint64_t)v516 + v543 + v481) & v553;
                v483 = ((unint64_t)v539 + v543 + v481) & v553;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v509 + 32))(v482, v483, v527);
                v484 = (void *)((v547 + v482) & v531);
                v485 = (const void *)((v547 + v483) & v531);
                if (v519(v485, 1, v504))
                {
                  memcpy(v484, v485, v282);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v507 + 32))(v484, v485, v504);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v507 + 56))(v484, 0, 1, v504);
                }
                v279 = v521;
                *(_BYTE *)(v277 + v287) = 5;
                v292 = v553;
                v274 = v556;
                v293 = v531;
                v285 = v520;
                break;
              case 6:
                v377 = *(_OWORD *)v278;
                *(_QWORD *)(v277 + 16) = *(_QWORD *)(v278 + 16);
                *(_OWORD *)v277 = v377;
                v321 = 6;
                goto LABEL_235;
              case 7:
                *(_QWORD *)v277 = *(_QWORD *)v278;
                v321 = 7;
                goto LABEL_235;
              case 8:
                *(_OWORD *)v277 = *(_OWORD *)v278;
                v378 = *(_OWORD *)(v278 + 16);
                v379 = *(_OWORD *)(v278 + 32);
                v380 = *(_OWORD *)(v278 + 48);
                *(_QWORD *)(v277 + 64) = *(_QWORD *)(v278 + 64);
                *(_OWORD *)(v277 + 32) = v379;
                *(_OWORD *)(v277 + 48) = v380;
                *(_OWORD *)(v277 + 16) = v378;
                v321 = 8;
                goto LABEL_235;
              case 9:
                v381 = *(_OWORD *)v278;
                v382 = *(_OWORD *)(v278 + 32);
                *(_OWORD *)(v277 + 16) = *(_OWORD *)(v278 + 16);
                *(_OWORD *)(v277 + 32) = v382;
                *(_OWORD *)v277 = v381;
                v383 = *(_OWORD *)(v278 + 48);
                v384 = *(_OWORD *)(v278 + 64);
                v385 = *(_OWORD *)(v278 + 80);
                *(_OWORD *)(v277 + 89) = *(_OWORD *)(v278 + 89);
                *(_OWORD *)(v277 + 64) = v384;
                *(_OWORD *)(v277 + 80) = v385;
                *(_OWORD *)(v277 + 48) = v383;
                v321 = 9;
                goto LABEL_235;
              case 0xA:
                v386 = *(_OWORD *)(v278 + 16);
                *(_OWORD *)v277 = *(_OWORD *)v278;
                *(_OWORD *)(v277 + 16) = v386;
                v387 = *(_OWORD *)(v278 + 32);
                v388 = *(_OWORD *)(v278 + 48);
                v389 = *(_OWORD *)(v278 + 64);
                *(_BYTE *)(v277 + 80) = *(_BYTE *)(v278 + 80);
                *(_OWORD *)(v277 + 48) = v388;
                *(_OWORD *)(v277 + 64) = v389;
                *(_OWORD *)(v277 + 32) = v387;
                v321 = 10;
LABEL_235:
                *(_BYTE *)(v277 + v287) = v321;
                v292 = v553;
                break;
              case 0xB:
                *(_OWORD *)v277 = *(_OWORD *)v278;
                v400 = (_OWORD *)((v277 + 23) & 0xFFFFFFFFFFFFFFF8);
                v401 = (_OWORD *)((v278 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v400 = *v401;
                v402 = (_OWORD *)(((unint64_t)v400 + 23) & 0xFFFFFFFFFFFFFFF8);
                v403 = (_OWORD *)(((unint64_t)v401 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v402 = *v403;
                v404 = (_OWORD *)(((unint64_t)v402 + v491 + 16) & v490);
                v405 = (_OWORD *)(((unint64_t)v403 + v491 + 16) & v490);
                *v404 = *v405;
                v406 = ((unint64_t)v404 + v495) & v496;
                v407 = ((unint64_t)v405 + v495) & v496;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v498 + 32))(v406, v407, v499);
                v408 = (_OWORD *)((v497 + v406) & 0xFFFFFFFFFFFFFFF8);
                v409 = (_OWORD *)((v497 + v407) & 0xFFFFFFFFFFFFFFF8);
                *v408 = *v409;
                v410 = (_OWORD *)(((unint64_t)v408 + 23) & 0xFFFFFFFFFFFFFFF8);
                v411 = (_OWORD *)(((unint64_t)v409 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v410 = *v411;
                v412 = (_OWORD *)(((unint64_t)v410 + 23) & 0xFFFFFFFFFFFFFFF8);
                v413 = (_OWORD *)(((unint64_t)v411 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v412 = *v413;
                v414 = (_OWORD *)(((unint64_t)v412 + 23) & 0xFFFFFFFFFFFFFFF8);
                v415 = (_OWORD *)(((unint64_t)v413 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v414 = *v415;
                v416 = (void *)(((unint64_t)v414 + v500) & v501);
                v417 = (const void *)(((unint64_t)v415 + v500) & v501);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v502 + 48))(v417, 1, v503))
                {
                  memcpy(v416, v417, v512);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v502 + 32))(v416, v417, v503);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v502 + 56))(v416, 0, 1, v503);
                }
                v292 = v553;
                v274 = v556;
                v468 = (_QWORD *)(((unint64_t)v416 + v538) & 0xFFFFFFFFFFFFFFF8);
                v469 = (_QWORD *)(((unint64_t)v417 + v538) & 0xFFFFFFFFFFFFFFF8);
                *v468 = *v469;
                v470 = (_QWORD *)(((unint64_t)v468 + 15) & 0xFFFFFFFFFFFFF8);
                v471 = (_QWORD *)(((unint64_t)v469 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v470 = *v471;
                v472 = (_QWORD *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8);
                v473 = (_QWORD *)(((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v472 = *v473;
                v474 = (_QWORD *)(((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFF8);
                v475 = (_QWORD *)(((unint64_t)v473 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v474 = *v475;
                v476 = (_QWORD *)(((unint64_t)v474 + 15) & 0xFFFFFFFFFFFFFFF8);
                v477 = (_QWORD *)(((unint64_t)v475 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v476 = *v477;
                v478 = (_QWORD *)(((unint64_t)v476 + 15) & 0xFFFFFFFFFFFFF8);
                v479 = (_QWORD *)(((unint64_t)v477 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v478 = *v479;
                *(_QWORD *)(((unint64_t)v478 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v479
                                                                                             + 15) & 0xFFFFFFFFFFFFF8);
                *(_BYTE *)(v277 + v287) = 11;
LABEL_271:
                v293 = v531;
                v279 = v521;
                break;
              default:
                if (v287 <= 3)
                  v305 = v287;
                else
                  v305 = 4;
                __asm { BR              X12 }
                return result;
            }
            v289 = v552;
            v290 = v542;
            v291 = v547;
            break;
          default:
            if (v287 <= 3)
              v288 = v287;
            else
              v288 = 4;
            __asm { BR              X12 }
            return result;
        }
      }
      v390 = ((((((((((((((v523 + v274 + v279 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      v391 = v529;
      if (!v528)
        v391 = v529 + 1;
      v392 = ((v291 + ((v290 + ((v391 + ((v289 + v530 + v391) & v293) + 7) & 0xFFFFFFFFFFFFFFF8)) & v292)) & v293)
           + v391;
      if (v390 > v392)
        v392 = ((((((((((((((v523 + v274 + v279 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 8;
      v393 = v390 + v285;
      if (v392 > v393)
        v393 = v392;
      if (v393 <= 0x90)
        v393 = 144;
      v394 = v393 + 1;
      v395 = (uint64_t *)(((v277 | 7) + v394) & 0xFFFFFFFFFFFFFFF8);
      v396 = (v278 | 7) + v394;
      v397 = *v395;
      v398 = v395[1];
      v399 = (v396 & 0xFFFFFFFFFFFFFFF8) + 23;
      *(_OWORD *)v395 = *(_OWORD *)(v396 & 0xFFFFFFFFFFFFFFF8);
      sub_1BA69D314(v397, v398);
      *(_QWORD *)(((unint64_t)v395 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v399 & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      return v548;
    }
  }
  if (v53)
  {
    v61 = v523;
    if (!v511)
      v61 = v523 + 1;
    v62 = ((((((((((((((v61 + v521 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v63 = v529;
    if (!v528)
      v63 = v529 + 1;
    v64 = ((v33
          + v526
          + ((v48 + v515 + ((v63 + ((v513 + v526 + v530 + v63) & v531) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & v553)) & v531)
        + v63;
    if (v62 > v64)
      v64 = v62;
    v65 = v62 + v520;
    if (v64 > v65)
      v65 = v64;
    if (v65 <= 0x90)
      v65 = 144;
    v66 = ((((__n + v540 + ((v543 + 48) & v554)) & v554) + v51 + v533) & v536)
        + (((v65 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v67 = v550;
    v68 = v45;
    goto LABEL_140;
  }
  v69 = *v45;
  *(_OWORD *)((char *)v550 + 9) = *(_OWORD *)((char *)v45 + 9);
  *(_OWORD *)v550 = v69;
  *((_OWORD *)v550 + 2) = v45[2];
  v70 = v554;
  v71 = (_OWORD *)(((unint64_t)v550 + v47) & v554);
  v72 = (char *)(((unint64_t)v45 + v47) & v554);
  if ((v544 & 0x80000000) == 0)
  {
    v73 = *(_QWORD *)((((unint64_t)v45 + v47) & v554) + 0x38);
    if (v73 >= 0xFFFFFFFF)
      LODWORD(v73) = -1;
    v74 = __n;
    if ((_DWORD)v73 != -1)
      goto LABEL_45;
LABEL_80:
    v104 = *(_OWORD *)v72;
    *(_BYTE *)((((unint64_t)v550 + v47) & v554) + 0x10) = v72[16];
    *v71 = v104;
    v105 = *(_OWORD *)(v72 + 24);
    *(_BYTE *)((((unint64_t)v550 + v47) & v554) + 0x28) = v72[40];
    *(_OWORD *)((((unint64_t)v550 + v47) & v554) + 0x18) = v105;
    *(_OWORD *)((((unint64_t)v550 + v47) & v554) + 0x30) = *((_OWORD *)v72 + 3);
    v106 = (_OWORD *)(((unint64_t)v71 + 71) & 0xFFFFFFFFFFFFFFF8);
    v107 = (__int128 *)((unint64_t)(v72 + 71) & 0xFFFFFFFFFFFFFFF8);
    v108 = *v107;
    v109 = v107[1];
    v110 = v107[3];
    v106[2] = v107[2];
    v106[3] = v110;
    *v106 = v108;
    v106[1] = v109;
    v76 = v553;
    v111 = *(void (**)(unint64_t, unint64_t, uint64_t))(v509 + 32);
    v111(((unint64_t)v106 + v48 + 64) & v553, ((unint64_t)v107 + v48 + 64) & v553, v7);
    v75 = v111;
    goto LABEL_81;
  }
  v74 = __n;
  if (!((unsigned int (*)(unint64_t))v508)((v48
                                                             + ((unint64_t)(v72 + 71) & 0xFFFFFFFFFFFFFFF8)
                                                             + 64) & v553))
    goto LABEL_80;
LABEL_45:
  memcpy(v71, v72, v74);
  v75 = *(void (**)(unint64_t, unint64_t, uint64_t))(v509 + 32);
  v76 = v553;
LABEL_81:
  v112 = v7;
  v113 = ((unint64_t)v71 + v74 + v540) & v554;
  v114 = (unint64_t)&v72[v74 + v540] & v554;
  v555 = v75;
  v75(((unint64_t)v71 + v74 + v540) & v70, (unint64_t)&v72[v74 + v540] & v70, v112);
  if (v511)
    v115 = v523;
  else
    v115 = v523 + 1;
  *(_QWORD *)((v50 + v113) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v50 + v114) & 0xFFFFFFFFFFFFF8);
  v116 = (v533 + v51 + v113) & v536;
  v117 = (v533 + v51 + v114) & v536;
  v118 = v115 + 7;
  v119 = ((((((((((((((v115 + 7 + v521) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  if (v528)
    v120 = v529;
  else
    v120 = v529 + 1;
  v121 = v120 + v530;
  v122 = v517 + v526;
  v123 = ((v517
         + v526
         + ((v48 + v515 + ((v120 + 7 + ((v513 + v526 + v120 + v530) & v531)) & 0xFFFFFFFFFFFFFFF8) + 8) & v76)) & v531)
       + v120;
  if (v119 > v123)
    v123 = ((((((((((((((v115 + 7 + v521) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
  v124 = v119 + v520;
  if (v123 > v124)
    v124 = v123;
  if (v124 <= 0x90)
    v125 = 144;
  else
    v125 = v124;
  switch(*(_BYTE *)(v117 + v125))
  {
    case 0:
      *(_OWORD *)v116 = *(_OWORD *)v117;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v498 + 32))((v495 + v116) & v496, (v495 + v117) & v496, v499);
      v156 = (_OWORD *)((v497 + ((v495 + v116) & v496)) & 0xFFFFFFFFFFFFFFF8);
      v157 = (_OWORD *)((v497 + ((v495 + v117) & v496)) & 0xFFFFFFFFFFFFFFF8);
      *v156 = *v157;
      v158 = (_OWORD *)(((unint64_t)v156 + 23) & 0xFFFFFFFFFFFFFFF8);
      v159 = (_OWORD *)(((unint64_t)v157 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v158 = *v159;
      v160 = (_OWORD *)(((unint64_t)v158 + 23) & 0xFFFFFFFFFFFFFFF8);
      v161 = (_OWORD *)(((unint64_t)v159 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v160 = *v161;
      v162 = (_OWORD *)(((unint64_t)v160 + 23) & 0xFFFFFFFFFFFFFFF8);
      v163 = (_OWORD *)(((unint64_t)v161 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v162 = *v163;
      v164 = (void *)(((unint64_t)v162 + v500) & v501);
      v165 = (const void *)(((unint64_t)v163 + v500) & v501);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v502 + 48))(v165, 1, v503))
      {
        memcpy(v164, v165, v115);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v502 + 32))(v164, v165, v503);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v502 + 56))(v164, 0, 1, v503);
      }
      v171 = 0;
      v418 = (_QWORD *)(((unint64_t)v164 + v118) & 0xFFFFFFFFFFFFFFF8);
      v419 = (_QWORD *)(((unint64_t)v165 + v118) & 0xFFFFFFFFFFFFFFF8);
      *v418 = *v419;
      v420 = (_QWORD *)(((unint64_t)v418 + 15) & 0xFFFFFFFFFFFFF8);
      v421 = (_QWORD *)(((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v420 = *v421;
      v422 = (_QWORD *)(((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8);
      v423 = (_QWORD *)(((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v422 = *v423;
      v424 = (_QWORD *)(((unint64_t)v422 + 15) & 0xFFFFFFFFFFFFF8);
      v425 = (_QWORD *)(((unint64_t)v423 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v424 = *v425;
      v426 = (_QWORD *)(((unint64_t)v424 + 15) & 0xFFFFFFFFFFFFFFF8);
      v427 = (_QWORD *)(((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v426 = *v427;
      v428 = (_QWORD *)(((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFF8);
      v429 = (_QWORD *)(((unint64_t)v427 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v428 = *v429;
      *(_QWORD *)(((unint64_t)v428 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v429 + 15) & 0xFFFFFFFFFFFFF8);
      break;
    case 1:
      v166 = *(_OWORD *)v117;
      v167 = *(_OWORD *)(v117 + 32);
      *(_OWORD *)(v116 + 16) = *(_OWORD *)(v117 + 16);
      *(_OWORD *)(v116 + 32) = v167;
      *(_OWORD *)v116 = v166;
      v168 = *(_OWORD *)(v117 + 48);
      v169 = *(_OWORD *)(v117 + 64);
      v170 = *(_OWORD *)(v117 + 80);
      *(_OWORD *)(v116 + 91) = *(_OWORD *)(v117 + 91);
      *(_OWORD *)(v116 + 64) = v169;
      *(_OWORD *)(v116 + 80) = v170;
      *(_OWORD *)(v116 + 48) = v168;
      v171 = 1;
      break;
    case 2:
      *(_OWORD *)v116 = *(_OWORD *)v117;
      v172 = *(_OWORD *)(v117 + 16);
      v173 = *(_OWORD *)(v117 + 32);
      v174 = *(_OWORD *)(v117 + 64);
      *(_OWORD *)(v116 + 48) = *(_OWORD *)(v117 + 48);
      *(_OWORD *)(v116 + 64) = v174;
      *(_OWORD *)(v116 + 16) = v172;
      *(_OWORD *)(v116 + 32) = v173;
      v175 = *(_OWORD *)(v117 + 80);
      v176 = *(_OWORD *)(v117 + 96);
      v177 = *(_OWORD *)(v117 + 128);
      *(_OWORD *)(v116 + 112) = *(_OWORD *)(v117 + 112);
      *(_OWORD *)(v116 + 128) = v177;
      *(_OWORD *)(v116 + 80) = v175;
      *(_OWORD *)(v116 + 96) = v176;
      v171 = 2;
      break;
    case 3:
      v178 = *(_OWORD *)v117;
      v179 = *(_OWORD *)(v117 + 16);
      v180 = *(_OWORD *)(v117 + 48);
      *(_OWORD *)(v116 + 32) = *(_OWORD *)(v117 + 32);
      *(_OWORD *)(v116 + 48) = v180;
      *(_OWORD *)v116 = v178;
      *(_OWORD *)(v116 + 16) = v179;
      v181 = *(_OWORD *)(v117 + 64);
      v182 = *(_OWORD *)(v117 + 80);
      v183 = *(_OWORD *)(v117 + 96);
      *(_OWORD *)(v116 + 105) = *(_OWORD *)(v117 + 105);
      *(_OWORD *)(v116 + 80) = v182;
      *(_OWORD *)(v116 + 96) = v183;
      *(_OWORD *)(v116 + 64) = v181;
      v171 = 3;
      break;
    case 4:
      v184 = *(_OWORD *)v117;
      v185 = *(_OWORD *)(v117 + 16);
      v186 = *(_OWORD *)(v117 + 32);
      *(_QWORD *)(v116 + 48) = *(_QWORD *)(v117 + 48);
      *(_OWORD *)(v116 + 16) = v185;
      *(_OWORD *)(v116 + 32) = v186;
      *(_OWORD *)v116 = v184;
      v171 = 4;
      break;
    case 5:
      *(_OWORD *)v116 = *(_OWORD *)v117;
      v187 = (_OWORD *)((v116 + 23) & 0xFFFFFFFFFFFFFFF8);
      v188 = (_OWORD *)((v117 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v187 = *v188;
      v189 = ((unint64_t)v187 + 23) & 0xFFFFFFFFFFFFFFF8;
      v190 = ((unint64_t)v188 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)v189 = *(_OWORD *)v190;
      *(_BYTE *)(v189 + 16) = *(_BYTE *)(v190 + 16);
      *(_BYTE *)(v189 + 17) = *(_BYTE *)(v190 + 17);
      v191 = (_QWORD *)((v189 + 25) & 0xFFFFFFFFFFFFF8);
      v192 = (_QWORD *)((v190 + 25) & 0xFFFFFFFFFFFFF8);
      *v191 = *v192;
      v193 = (_QWORD *)(((unint64_t)v191 + 15) & 0xFFFFFFFFFFFFFFF8);
      v194 = (_QWORD *)(((unint64_t)v192 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v193 = *v194;
      v195 = (_QWORD *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFF8);
      v196 = (_QWORD *)(((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFF8);
      *v195 = *v196;
      v197 = (_QWORD *)(((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFF8);
      v198 = (_QWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFF8);
      *v197 = *v198;
      v199 = (_QWORD *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFFFF8);
      v200 = (_QWORD *)(((unint64_t)v198 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v199 = *v200;
      v201 = (_QWORD *)(((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFF8);
      v202 = (_QWORD *)(((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFF8);
      *v201 = *v202;
      v203 = (_QWORD *)(((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFF8);
      v204 = (_QWORD *)(((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFF8);
      *v203 = *v204;
      v205 = (_QWORD *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8);
      v206 = (_QWORD *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v205 = *v206;
      v207 = (_QWORD *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFF8);
      v208 = (_QWORD *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFF8);
      *v207 = *v208;
      v209 = (_QWORD *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFF8);
      v210 = (_QWORD *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFF8);
      *v209 = *v210;
      v211 = (_QWORD *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFFFF8);
      v212 = (_QWORD *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v211 = *v212;
      v213 = (_QWORD *)(((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFF8);
      v214 = (_QWORD *)(((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFF8);
      *v213 = *v214;
      v215 = (_QWORD *)(((unint64_t)v213 + 15) & 0xFFFFFFFFFFFFF8);
      v216 = (_QWORD *)(((unint64_t)v214 + 15) & 0xFFFFFFFFFFFFF8);
      *v215 = *v216;
      v217 = (_OWORD *)(((unint64_t)v215 + 15) & 0xFFFFFFFFFFFFFFF8);
      v218 = (_OWORD *)(((unint64_t)v216 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v217 = *v218;
      v537 = (_QWORD *)(((unint64_t)v218 + v492) & v493);
      v534 = (_QWORD *)(((unint64_t)v217 + v492) & v493);
      *v534 = *v537;
      v219 = (_QWORD *)(((unint64_t)v534 + 15) & 0xFFFFFFFFFFFFFFF8);
      v220 = (_QWORD *)(((unint64_t)v537 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v219 = *v220;
      v221 = (_OWORD *)(((unint64_t)v219 + v526 + 8) & v493);
      v222 = (__int128 *)(((unint64_t)v220 + v526 + 8) & v493);
      v223 = *v222;
      v224 = v222[2];
      v221[1] = v222[1];
      v221[2] = v224;
      *v221 = v223;
      v546 = (void *)(((unint64_t)v221 + v494) & v531);
      v525 = (const void *)(((unint64_t)v222 + v494) & v531);
      v551 = *(unsigned int (**)(void))(v507 + 48);
      if (v551())
      {
        memcpy(v546, v525, v120);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v507 + 32))(v546, v525, v504);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v507 + 56))(v546, 0, 1, v504);
      }
      v430 = v121 + v526;
      v431 = (void *)(((unint64_t)v221 + v121 + v526) & v531);
      v432 = (const void *)(((unint64_t)v222 + v121 + v526) & v531);
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v551)(((unint64_t)v222 + v430) & v531, 1, v504))
      {
        memcpy(v431, v432, v120);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v507 + 32))(v431, v432, v504);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v507 + 56))(v431, 0, 1, v504);
      }
      v445 = 7;
      if (!v528)
        v445 = 8;
      *(_QWORD *)(((unint64_t)v431 + v529 + v445) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v432
                                                                                            + v529
                                                                                            + v445) & 0xFFFFFFFFFFFFF8);
      v446 = ((v120 + 7 + ((v513 + v526 + v530 + v120) & v531)) & 0xFFFFFFFFFFFFFFF8) + 8;
      v447 = ((unint64_t)v534 + v543 + v446) & v553;
      v448 = ((unint64_t)v537 + v543 + v446) & v553;
      v555(v447, v448, v527);
      v449 = (void *)((v122 + v447) & v531);
      v450 = (v122 + v448) & v531;
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v551)(v450, 1, v504))
      {
        memcpy(v449, (const void *)((v122 + v448) & v531), v120);
      }
      else
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v507 + 32))(v449, v450, v504);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v507 + 56))(v449, 0, 1, v504);
      }
      v171 = 5;
      break;
    case 6:
      v225 = *(_OWORD *)v117;
      *(_QWORD *)(v116 + 16) = *(_QWORD *)(v117 + 16);
      *(_OWORD *)v116 = v225;
      v171 = 6;
      break;
    case 7:
      *(_QWORD *)v116 = *(_QWORD *)v117;
      v171 = 7;
      break;
    case 8:
      *(_OWORD *)v116 = *(_OWORD *)v117;
      v226 = *(_OWORD *)(v117 + 16);
      v227 = *(_OWORD *)(v117 + 32);
      v228 = *(_OWORD *)(v117 + 48);
      *(_QWORD *)(v116 + 64) = *(_QWORD *)(v117 + 64);
      *(_OWORD *)(v116 + 32) = v227;
      *(_OWORD *)(v116 + 48) = v228;
      *(_OWORD *)(v116 + 16) = v226;
      v171 = 8;
      break;
    case 9:
      v229 = *(_OWORD *)v117;
      v230 = *(_OWORD *)(v117 + 32);
      *(_OWORD *)(v116 + 16) = *(_OWORD *)(v117 + 16);
      *(_OWORD *)(v116 + 32) = v230;
      *(_OWORD *)v116 = v229;
      v231 = *(_OWORD *)(v117 + 48);
      v232 = *(_OWORD *)(v117 + 64);
      v233 = *(_OWORD *)(v117 + 80);
      *(_OWORD *)(v116 + 89) = *(_OWORD *)(v117 + 89);
      *(_OWORD *)(v116 + 64) = v232;
      *(_OWORD *)(v116 + 80) = v233;
      *(_OWORD *)(v116 + 48) = v231;
      v171 = 9;
      break;
    case 0xA:
      v234 = *(_OWORD *)(v117 + 16);
      *(_OWORD *)v116 = *(_OWORD *)v117;
      *(_OWORD *)(v116 + 16) = v234;
      v235 = *(_OWORD *)(v117 + 32);
      v236 = *(_OWORD *)(v117 + 48);
      v237 = *(_OWORD *)(v117 + 64);
      *(_BYTE *)(v116 + 80) = *(_BYTE *)(v117 + 80);
      *(_OWORD *)(v116 + 48) = v236;
      *(_OWORD *)(v116 + 64) = v237;
      *(_OWORD *)(v116 + 32) = v235;
      v171 = 10;
      break;
    case 0xB:
      *(_OWORD *)v116 = *(_OWORD *)v117;
      v238 = (_OWORD *)((v116 + 23) & 0xFFFFFFFFFFFFFFF8);
      v239 = (_OWORD *)((v117 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v238 = *v239;
      v240 = (_OWORD *)(((unint64_t)v238 + 23) & 0xFFFFFFFFFFFFFFF8);
      v241 = (_OWORD *)(((unint64_t)v239 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v240 = *v241;
      v242 = (_OWORD *)(((unint64_t)v240 + v491 + 16) & v490);
      v243 = (_OWORD *)(((unint64_t)v241 + v491 + 16) & v490);
      *v242 = *v243;
      v244 = ((unint64_t)v242 + v495) & v496;
      v245 = ((unint64_t)v243 + v495) & v496;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v498 + 32))(v244, v245, v499);
      v246 = (_OWORD *)((v497 + v244) & 0xFFFFFFFFFFFFFFF8);
      v247 = (_OWORD *)((v497 + v245) & 0xFFFFFFFFFFFFFFF8);
      *v246 = *v247;
      v248 = (_OWORD *)(((unint64_t)v246 + 23) & 0xFFFFFFFFFFFFFFF8);
      v249 = (_OWORD *)(((unint64_t)v247 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v248 = *v249;
      v250 = (_OWORD *)(((unint64_t)v248 + 23) & 0xFFFFFFFFFFFFFFF8);
      v251 = (_OWORD *)(((unint64_t)v249 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v250 = *v251;
      v252 = (_OWORD *)(((unint64_t)v250 + 23) & 0xFFFFFFFFFFFFFFF8);
      v253 = (_OWORD *)(((unint64_t)v251 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v252 = *v253;
      v254 = (void *)(((unint64_t)v252 + v500) & v501);
      v255 = (const void *)(((unint64_t)v253 + v500) & v501);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v502 + 48))(v255, 1, v503))
      {
        memcpy(v254, v255, v115);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v502 + 32))(v254, v255, v503);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v502 + 56))(v254, 0, 1, v503);
      }
      v433 = (_QWORD *)(((unint64_t)v254 + v118) & 0xFFFFFFFFFFFFFFF8);
      v434 = (_QWORD *)(((unint64_t)v255 + v118) & 0xFFFFFFFFFFFFFFF8);
      *v433 = *v434;
      v435 = (_QWORD *)(((unint64_t)v433 + 15) & 0xFFFFFFFFFFFFF8);
      v436 = (_QWORD *)(((unint64_t)v434 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v435 = *v436;
      v437 = (_QWORD *)(((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFFFF8);
      v438 = (_QWORD *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v437 = *v438;
      v439 = (_QWORD *)(((unint64_t)v437 + 15) & 0xFFFFFFFFFFFFF8);
      v440 = (_QWORD *)(((unint64_t)v438 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v439 = *v440;
      v441 = (_QWORD *)(((unint64_t)v439 + 15) & 0xFFFFFFFFFFFFFFF8);
      v442 = (_QWORD *)(((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v441 = *v442;
      v443 = (_QWORD *)(((unint64_t)v441 + 15) & 0xFFFFFFFFFFFFF8);
      v444 = (_QWORD *)(((unint64_t)v442 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v443 = *v444;
      *(_QWORD *)(((unint64_t)v443 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v444 + 15) & 0xFFFFFFFFFFFFF8);
      v171 = 11;
      break;
    default:
      if (v125 <= 3)
        v126 = v125;
      else
        v126 = 4;
      __asm { BR              X12 }
      return result;
  }
  *(_BYTE *)(v116 + v125) = v171;
  v451 = (_OWORD *)(((v116 | 7) + v125 + 1) & 0xFFFFFFFFFFFFFFF8);
  v452 = (_OWORD *)(((v117 | 7) + v125 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v451 = *v452;
  *(_QWORD *)(((unint64_t)v451 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v452 + 23) & 0xFFFFFFFFFFFFF8);
  return v548;
}

uint64_t sub_1BAA18C20(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;

  v54 = *(_QWORD *)(a3 + 16);
  v57 = *(_QWORD *)(v54 - 8);
  v3 = *(_DWORD *)(v57 + 84);
  v55 = sub_1BB86EB84();
  v4 = *(_QWORD *)(v55 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = v5 - 1;
  if (!(_DWORD)v5)
    v6 = 0;
  v53 = v6;
  if (v5 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v4 + 84);
  v56 = v3;
  if (v7 <= v3)
    v8 = v3;
  else
    v8 = v7;
  if (v7 - 1 < v7)
    v9 = v7;
  else
    v9 = v7 - 1;
  v10 = *(_QWORD *)(sub_1BB86C8B0() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(sub_1BB871E24() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 84);
  v16 = *(_QWORD *)(v13 + 64);
  v17 = sub_1BB86E710();
  if (v9 - 1 <= v8)
    v18 = v8;
  else
    v18 = v9 - 1;
  v19 = *(_QWORD *)(v4 + 64);
  if ((_DWORD)v5)
    v20 = v19 + 7;
  else
    v20 = v19 + 8;
  v21 = *(_QWORD *)(v17 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = v22 | 7;
  v24 = *(_QWORD *)(v21 + 64);
  if (v15)
    v25 = v16;
  else
    v25 = v16 + 1;
  v26 = *(_DWORD *)(v21 + 84) == 0;
  v27 = *(unsigned __int8 *)(v4 + 80);
  v28 = ((((((((((((((v25
                    + ((v14
                      + ((((((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & ~v14)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v26)
    ++v24;
  v29 = ((v19
        + v22
        + ((((v22 + 176) & ~(v22 | 7))
          + v27
          + ((v24 + ((v24 + v22 + ((v22 + 48) & ~v22) + ((v22 + 16) & ~(v22 | 7))) & ~v22) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v27)) & ~v22)
      + v24;
  if (v28 > v29)
    v29 = ((((((((((((((v25
                      + ((v14
                        + ((((((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                            + 23) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 16) & ~v14)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v30 = v28
      + (((v14 | v11) & 0xF8 ^ 0x1F8) & ((v14 | v11) + 48));
  if (v29 > v30)
    v30 = v29;
  if (v30 <= 0x90)
    v31 = 144;
  else
    v31 = v30;
  if (!a2)
    return 0;
  v32 = v27 | 7;
  v33 = (v27 | 7) + *(_QWORD *)(v57 + 64);
  v34 = (((((((v20 + ((v19 + v27 + ((v19 + v27 + ((v27 + 16) & ~v27)) & ~v27)) & ~v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = v23 | v14 | v11 | v27;
  v36 = (v33 & ~(v27 | 7)) + v35 + v34 + 8;
  v37 = ((v27 + 128) & ~v27) + v19 + (v27 | 7);
  v38 = a1;
  if (a2 <= v18)
    goto LABEL_50;
  v39 = ((((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + v35 + ((v37 + ((v27 + 48) & ~v32)) & ~v32) + 8) & ~v35)
      + (v36 & ~v35)
      + (((v31 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v31 = (8 * v39);
  if (v39 > 3)
    goto LABEL_33;
  v42 = ((a2 - v18 + ~(-1 << (8 * v39))) >> (8 * v39)) + 1;
  if (HIWORD(v42))
  {
    v40 = *(_DWORD *)(a1 + v39);
    if (v40)
      goto LABEL_41;
  }
  else
  {
    if (v42 <= 0xFF)
    {
      if (v42 < 2)
        goto LABEL_50;
LABEL_33:
      v40 = *(unsigned __int8 *)(a1 + v39);
      if (!*(_BYTE *)(a1 + v39))
        goto LABEL_50;
LABEL_41:
      v43 = (v40 - 1) << (8 * v39);
      if (v39 > 3)
        v43 = 0;
      if ((_DWORD)v39)
      {
        if (v39 <= 3)
          v44 = v39;
        else
          v44 = 4;
        __asm { BR              X12 }
      }
      return v18 + v43 + 1;
    }
    v40 = *(unsigned __int16 *)(a1 + v39);
    if (*(_WORD *)(a1 + v39))
      goto LABEL_41;
  }
LABEL_50:
  v45 = ~v32;
  if (v8 < v9 - 1)
  {
    if ((v9 & 0x80000000) == 0)
    {
      v46 = *(_QWORD *)(((v36 + a1) & ~v35) + 8);
      if (v46 >= 0xFFFFFFFF)
        LODWORD(v46) = -1;
      v47 = v46 + 1;
      goto LABEL_63;
    }
    v51 = (v37 + ((v32 + ((v36 + a1) & ~v35) + 48) & v45)) & v45;
LABEL_62:
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48))(v51, v5, v55, v31);
LABEL_63:
    if (v47 >= 2)
      return v47 - 1;
    else
      return 0;
  }
  v48 = v56;
  if (v56 >= v7)
  {
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
    v50 = v54;
    return v49(v38, v48, v50);
  }
  v38 = (v27 + 16 + ((v33 + a1) & v45)) & ~v27;
  if (v5 >= 0x7FFFFFFF)
  {
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    v48 = v5;
    v50 = v55;
    return v49(v38, v48, v50);
  }
  v51 = (v19 + v27 + ((v19 + v27 + v38) & ~v27)) & ~v27;
  if (v53 == v7)
    goto LABEL_62;
  v52 = *(_QWORD *)((v51 + v19 + ((_DWORD)v5 == 0) + 7) & 0xFFFFFFFFFFFFF8);
  if (v52 >= 0xFFFFFFFF)
    LODWORD(v52) = -1;
  return (v52 + 1);
}

void sub_1BAA190F4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v47;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(sub_1BB86EB84() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= v5)
    v9 = v5;
  else
    v9 = v8;
  if (v8 - 1 < v8)
    v10 = v8;
  else
    v10 = v8 - 1;
  v11 = *(_QWORD *)(sub_1BB86C8B0() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_1BB871E24() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(v14 + 64);
  v18 = sub_1BB86E710();
  v47 = 0;
  if (v10 - 1 <= v9)
    v19 = v9;
  else
    v19 = v10 - 1;
  v20 = (v15
       + ((((((((v13 + ((v12 + 16) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v15;
  v21 = *(_QWORD *)(v6 + 64);
  if (v7)
    v22 = *(_QWORD *)(v6 + 64);
  else
    v22 = v21 + 1;
  v23 = *(_QWORD *)(v18 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = *(_DWORD *)(v23 + 84);
  if (v16)
    v26 = v17;
  else
    v26 = v17 + 1;
  v27 = *(unsigned __int8 *)(v6 + 80);
  v28 = v15 | v12;
  v29 = ((v15 | v12) & 0xF8 ^ 0x1F8) & ((v15 | v12) + 48);
  v30 = v24 | 7 | v28 | v27;
  v31 = (((v27 | 7) + *(_QWORD *)(v4 + 64)) & ~(v27 | 7))
      + 8
      + v30
      + ((((((((v22 + ((v21 + v27 + ((v21 + v27 + ((v27 + 16) & ~v27)) & ~v27)) & ~v27) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = v30
      + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8
      + ((((v27 + 128) & ~v27) + v21 + (v27 | 7) + ((v27 + 48) & ~(v27 | 7))) & ~(v27 | 7));
  v33 = v26 + v20;
  v34 = *(_QWORD *)(v23 + 64);
  if (!v25)
    ++v34;
  v35 = ((v21
        + v24
        + ((((v24 + 176) & ~(v24 | 7))
          + v27
          + ((v34 + ((v34 + v24 + ((v24 + 48) & ~v24) + ((v24 + 16) & ~(v24 | 7))) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v27)) & ~v24)
      + v34;
  v36 = ((((((((((((((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v36 > v35)
    v35 = v36;
  v37 = v36 + v29;
  if (v35 > v37)
    v37 = v35;
  if (v37 <= 0x90)
    v38 = 144;
  else
    v38 = v37;
  v39 = (v32 & ~v30) + 8 + (v31 & ~v30) + (((v38 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  if (a3 > v19)
  {
    if (v39 <= 3)
    {
      v41 = ((a3 - v19 + ~(-1 << (8 * v39))) >> (8 * v39)) + 1;
      if (HIWORD(v41))
      {
        v40 = 4;
      }
      else if (v41 >= 0x100)
      {
        v40 = 2;
      }
      else
      {
        v40 = v41 > 1;
      }
    }
    else
    {
      v40 = 1;
    }
    v47 = v40;
  }
  if (v19 < a2)
  {
    v42 = ~v19 + a2;
    if (v39 < 4)
    {
      if ((_DWORD)v39)
      {
        v43 = v42 & ~(-1 << (8 * v39));
        bzero(a1, v39);
        if ((_DWORD)v39 == 3)
        {
          *(_WORD *)a1 = v43;
          a1[2] = BYTE2(v43);
        }
        else if ((_DWORD)v39 == 2)
        {
          *(_WORD *)a1 = v43;
        }
        else
        {
          *a1 = v43;
        }
      }
    }
    else
    {
      bzero(a1, v39);
      *(_DWORD *)a1 = v42;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X19 }
}

void sub_1BAA1966C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_1BAA19674()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_1BAA196F0()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_1BAA19700()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_1BAA19708()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t type metadata accessor for DebugFormatObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DebugFormatObject);
}

void sub_1BAA197E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A9CE0)
  {
    type metadata accessor for DebugFormatCacheFile();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A9CE0);
  }
}

uint64_t sub_1BAA1983C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C69466568636163 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BAA19930(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C69466568636163;
  else
    return 0x7463656A626FLL;
}

uint64_t sub_1BAA19968(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v16 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for DebugFormatObject.CodingKeys(255, v5, v6, a4);
  MEMORY[0x1BCCE5B24](&unk_1BB890920, v7);
  v8 = sub_1BB8741D0();
  v17 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB8746C8();
  v20 = 0;
  v12 = type metadata accessor for FormatObject(0, v5, v6, v11);
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatObject<A>, v12);
  v13 = v18;
  sub_1BB8741AC();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v10, v8);
  v15 = v17;
  v19 = 1;
  type metadata accessor for DebugFormatCacheFile();
  sub_1BAA19F5C(qword_1EF2AD578, (uint64_t)&unk_1BB8EB7D0);
  sub_1BB87414C();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v10, v8);
}

uint64_t sub_1BAA19B20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v31 = a4;
  sub_1BAA197E8();
  MEMORY[0x1E0C80A78](v7);
  v34 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for FormatObject(0, a2, a3, v9);
  v33 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v35 = (char *)&v31 - v10;
  v12 = type metadata accessor for DebugFormatObject.CodingKeys(255, a2, a3, v11);
  MEMORY[0x1BCCE5B24](&unk_1BB890920, v12);
  v39 = sub_1BB874104();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v14 = (char *)&v31 - v13;
  v32 = type metadata accessor for DebugFormatObject(0, a2, a3, v15);
  v16 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v18 = (char *)&v31 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v36 = v14;
  v19 = v40;
  sub_1BB87468C();
  v20 = a1;
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v40 = v16;
  v21 = v32;
  v22 = v33;
  v23 = (uint64_t)v20;
  v24 = v18;
  v25 = (uint64_t)v34;
  v42 = 0;
  v26 = v38;
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatObject<A>, v38);
  v28 = v35;
  v27 = v36;
  sub_1BB8740D4();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v28, v26);
  type metadata accessor for DebugFormatCacheFile();
  v41 = 1;
  sub_1BAA19F5C(&qword_1EF2AD570, (uint64_t)&unk_1BB8EB7F8);
  sub_1BB874068();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v39);
  sub_1BAA19F18(v25, (uint64_t)&v24[*(int *)(v21 + 36)]);
  v29 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v31, v24, v21);
  __swift_destroy_boxed_opaque_existential_1(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v24, v21);
}

uint64_t sub_1BAA19E38()
{
  char *v0;

  return sub_1BAA19930(*v0);
}

uint64_t sub_1BAA19E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA1983C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BAA19E74(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB890920, a1);
  return sub_1BB874710();
}

uint64_t sub_1BAA19EA8(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB890920, a1);
  return sub_1BB87471C();
}

uint64_t sub_1BAA19EDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1BAA19B20(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BAA19EF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BAA19968(a1, a2, a3, a4);
}

uint64_t type metadata accessor for DebugFormatObject.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DebugFormatObject.CodingKeys);
}

uint64_t sub_1BAA19F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BAA197E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BAA19F5C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DebugFormatCacheFile();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BAA19F9C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BAA19FE8 + 4 * byte_1BB8907BF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BAA1A01C + 4 * byte_1BB8907BA[v4]))();
}

uint64_t sub_1BAA1A01C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1A024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA1A02CLL);
  return result;
}

uint64_t sub_1BAA1A038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA1A040);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BAA1A044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1A04C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BAA1A058()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BAA1A068()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BAA1A078()
{
  JUMPOUT(0x1BCCE5B24);
}

ValueMetadata *type metadata accessor for FormatInspectionIdentifier()
{
  return &type metadata for FormatInspectionIdentifier;
}

id FeedLayoutFailure.error.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t FeedLayoutFailure.explanation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t dispatch thunk of FeedLayoutTrackerType.trackFeedDidFailSubgroupLayout(subgroup:failure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for FeedLayoutFailure(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s8NewsFeed17FeedLayoutFailureVwCP_0(_QWORD *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(id *)a2;
  v5 = *(id *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *a1 = v4;
  a1[1] = v7;
  a1[2] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FeedLayoutFailure(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;

  v4 = *(id *)a2;
  v5 = *(id *)a2;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FeedLayoutFailure(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FeedLayoutFailure()
{
  return &type metadata for FeedLayoutFailure;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatJsonKeyValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = type metadata accessor for FormatJson();
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 8u:
      case 0xAu:
        *v7 = *v8;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v12 = v8[1];
        *v7 = *v8;
        v7[1] = v12;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v13 = sub_1BB86C67C();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        *v7 = *v8;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        v14 = (void *)*v8;
        *v7 = *v8;
        v15 = v14;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return v3;
}

void destroy for FormatJsonKeyValue(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = (id *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for FormatJson();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 5u:
    case 8u:
    case 0xAu:
      swift_bridgeObjectRelease();
      break;
    case 6u:
      v5 = sub_1BB86C67C();
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      break;
    case 7u:
      swift_release();
      break;
    case 9u:

      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for FormatJsonKeyValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for FormatJson();
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 8u:
    case 0xAu:
      *v6 = *v7;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      v9 = v7[1];
      *v6 = *v7;
      v6[1] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 6u:
      v10 = sub_1BB86C67C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, v7, v10);
      goto LABEL_8;
    case 7u:
      *v6 = *v7;
      swift_retain();
      goto LABEL_8;
    case 9u:
      v11 = (void *)*v7;
      *v6 = *v7;
      v12 = v11;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for FormatJsonKeyValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_1BAA1A824((uint64_t)a1 + v6);
    v9 = type metadata accessor for FormatJson();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 8u:
      case 0xAu:
        *v7 = *v8;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        *v7 = *v8;
        v7[1] = v8[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        v10 = sub_1BB86C67C();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
        goto LABEL_9;
      case 7u:
        *v7 = *v8;
        swift_retain();
        goto LABEL_9;
      case 9u:
        v11 = (void *)*v8;
        *v7 = *v8;
        v12 = v11;
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1BAA1A824(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatJson();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FormatJsonKeyValue(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for FormatJson();
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v8 = sub_1BB86C67C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for FormatJsonKeyValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1BAA1A824((uint64_t)a1 + v7);
    v10 = type metadata accessor for FormatJson();
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      v11 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatJsonKeyValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA1A9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FormatJson();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FormatJsonKeyValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA1AA5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FormatJson();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FormatJsonKeyValue()
{
  uint64_t result;

  result = qword_1ED3AF780;
  if (!qword_1ED3AF780)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BAA1AB0C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatJson();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void static FormatDateTime.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BAA1ABC0()
{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  __int128 v7;
  uint64_t v8;
  char v9;

  if (v0 >> 62)
  {
    sub_1BA739250(v0);
    sub_1BA739250(v1);
    sub_1BA6F5D74(v1);
    sub_1BA6F5D74(v0);
    v5 = 0;
  }
  else
  {
    v2 = *(_BYTE *)(v1 + 40);
    v3 = *(_QWORD *)(v1 + 32);
    v7 = *(_OWORD *)(v1 + 16);
    v8 = v3;
    v9 = v2;
    sub_1BA739250(v0);
    sub_1BA739250(v1);
    _s8NewsFeed21FormatDateTimeBindingO2eeoiySbAC_ACtFZ_0((uint64_t)&v7);
    v5 = v4;
    sub_1BA6F5D74(v1);
    sub_1BA6F5D74(v0);
  }
  return v5 & 1;
}

void sub_1BAA1AE24(_QWORD *a1)
{
  FormatDateTime.encode(to:)(a1);
}

void sub_1BAA1AE3C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1BB86C8B0();
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
  MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  __asm { BR              X11 }
}

uint64_t sub_1BAA1AFD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = type metadata accessor for FormatVersionRequirement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v1, 1, 1, v9);
  v10 = *(_QWORD *)(v4 - 72);
  sub_1BB615AEC(v3, v5, v6, v7, v8, v2);
  if (v10)
    return sub_1BA502AD0(v1, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
  sub_1BA712634(0);
  v13 = v12;
  v14 = swift_allocBox();
  v16 = v15;
  v18 = *(_QWORD *)(v4 - 96);
  v17 = *(_QWORD *)(v4 - 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v2, v17);
  *(_QWORD *)(v16 + *(int *)(v13 + 36)) = MEMORY[0x1E0DEE9D8];
  v19 = v14 | 0x2000000000000000;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v17);
  v20 = *(uint64_t **)(v4 - 104);
  *v20 = v19;
  v20[1] = 0;
  v21 = type metadata accessor for FormatOptionsNodeStatementResult();
  sub_1BA8D81BC(v1, (uint64_t)v20 + *(int *)(v21 + 24));
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
}

uint64_t sub_1BAA1B5D8(_QWORD *a1)
{
  return FormatDateTimeOffset.encode(to:)(a1);
}

uint64_t _s8NewsFeed20FormatDateTimeOffsetV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1BA881EAC(v2, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v8 = v3;
    static FormatDateTime.== infix(_:_:)((uint64_t)&v8);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

unint64_t sub_1BAA1B678(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA1B69C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA1B69C()
{
  unint64_t result;

  result = qword_1EF2AD600;
  if (!qword_1EF2AD600)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTime, &type metadata for FormatDateTime);
    atomic_store(result, (unint64_t *)&qword_1EF2AD600);
  }
  return result;
}

uint64_t sub_1BAA1B6E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA509E14, (uint64_t (*)(void))sub_1BAA1B6FC, (uint64_t (*)(void))sub_1BAA1B740);
}

unint64_t sub_1BAA1B6FC()
{
  unint64_t result;

  result = qword_1ED3A5838;
  if (!qword_1ED3A5838)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTime, &type metadata for FormatDateTime);
    atomic_store(result, (unint64_t *)&qword_1ED3A5838);
  }
  return result;
}

unint64_t sub_1BAA1B740()
{
  unint64_t result;

  result = qword_1EF2AD608;
  if (!qword_1EF2AD608)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTime, &type metadata for FormatDateTime);
    atomic_store(result, (unint64_t *)&qword_1EF2AD608);
  }
  return result;
}

unint64_t sub_1BAA1B784(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA1B7A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA1B7A8()
{
  unint64_t result;

  result = qword_1EF2AD610;
  if (!qword_1EF2AD610)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTimeOffset, &type metadata for FormatDateTimeOffset);
    atomic_store(result, (unint64_t *)&qword_1EF2AD610);
  }
  return result;
}

uint64_t sub_1BAA1B7EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA5478BC, (uint64_t (*)(void))sub_1BAA1B808, (uint64_t (*)(void))sub_1BAA1B84C);
}

unint64_t sub_1BAA1B808()
{
  unint64_t result;

  result = qword_1ED3A67F0;
  if (!qword_1ED3A67F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTimeOffset, &type metadata for FormatDateTimeOffset);
    atomic_store(result, (unint64_t *)&qword_1ED3A67F0);
  }
  return result;
}

unint64_t sub_1BAA1B84C()
{
  unint64_t result;

  result = qword_1EF2AD618;
  if (!qword_1EF2AD618)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDateTimeOffset, &type metadata for FormatDateTimeOffset);
    atomic_store(result, (unint64_t *)&qword_1EF2AD618);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatDateTime()
{
  return &type metadata for FormatDateTime;
}

unint64_t destroy for FormatDateTimeOffset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1BA6F5D74(*(_QWORD *)(a1 + 8));
}

_QWORD *_s8NewsFeed20FormatDateTimeOffsetVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  sub_1BA739250(v3);
  a1[1] = v3;
  return a1;
}

_QWORD *assignWithCopy for FormatDateTimeOffset(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[1];
  sub_1BA739250(v4);
  v5 = a1[1];
  a1[1] = v4;
  sub_1BA6F5D74(v5);
  return a1;
}

_QWORD *assignWithTake for FormatDateTimeOffset(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  a1[1] = a2[1];
  sub_1BA6F5D74(v4);
  return a1;
}

ValueMetadata *type metadata accessor for FormatDateTimeOffset()
{
  return &type metadata for FormatDateTimeOffset;
}

ValueMetadata *type metadata accessor for SportsStandingRecordEmbed()
{
  return &type metadata for SportsStandingRecordEmbed;
}

uint64_t sub_1BAA1B9C4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  sub_1BAA1BF30(0, &qword_1EF2AD650, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA1BEA4();
  sub_1BB8746C8();
  v10[1] = v8;
  sub_1BAA1BF8C();
  sub_1BAA1BFE4();
  sub_1BAA1C038();
  sub_1BB874464();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BAA1BADC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v16;
  char *v17;
  uint64_t v18;

  v16 = a2;
  sub_1BAA1BDB8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v17 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA1BF30(0, &qword_1EF2AD638, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v18 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v16 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA1BEA4();
  sub_1BB87468C();
  if (!v2)
  {
    v12 = v16;
    sub_1BAA1BEE8();
    v13 = v17;
    sub_1BB8740D4();
    v14 = sub_1BB86DD08();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
    *v12 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BAA1BC74()
{
  return 0x74697465706D6F63;
}

uint64_t sub_1BAA1BC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74697465706D6F63 && a2 == 0xEB0000000073726FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BAA1BD40()
{
  sub_1BAA1BEA4();
  return sub_1BB874710();
}

uint64_t sub_1BAA1BD68()
{
  sub_1BAA1BEA4();
  return sub_1BB87471C();
}

uint64_t sub_1BAA1BD90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BAA1BADC(a1, a2);
}

uint64_t sub_1BAA1BDA4(_QWORD *a1)
{
  return sub_1BAA1B9C4(a1);
}

void sub_1BAA1BDB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2AD620)
  {
    sub_1BAA1BE1C();
    sub_1BAA1BE60();
    v0 = sub_1BB86DF60();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2AD620);
  }
}

unint64_t sub_1BAA1BE1C()
{
  unint64_t result;

  result = qword_1EF2AD628;
  if (!qword_1EF2AD628)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F73C8, &type metadata for SportsStandingRecordCompetitor);
    atomic_store(result, (unint64_t *)&qword_1EF2AD628);
  }
  return result;
}

unint64_t sub_1BAA1BE60()
{
  unint64_t result;

  result = qword_1EF2AD630;
  if (!qword_1EF2AD630)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F73A0, &type metadata for SportsStandingRecordCompetitor);
    atomic_store(result, (unint64_t *)&qword_1EF2AD630);
  }
  return result;
}

unint64_t sub_1BAA1BEA4()
{
  unint64_t result;

  result = qword_1EF2AD640;
  if (!qword_1EF2AD640)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890DD0, &type metadata for SportsStandingRecordEmbed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD640);
  }
  return result;
}

unint64_t sub_1BAA1BEE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD648;
  if (!qword_1EF2AD648)
  {
    sub_1BAA1BDB8();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB3610], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD648);
  }
  return result;
}

void sub_1BAA1BF30(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BAA1BEA4();
    v7 = a3(a1, &type metadata for SportsStandingRecordEmbed.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BAA1BF8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2AD658;
  if (!qword_1EF2AD658)
  {
    sub_1BAA1BF30(255, &qword_1EF2AD650, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2AD658);
  }
  return result;
}

void sub_1BAA1BFE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2AD660)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2AD660);
  }
}

unint64_t sub_1BAA1C038()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF2AD668;
  if (!qword_1EF2AD668)
  {
    sub_1BAA1BFE4();
    v2 = v1;
    v3 = sub_1BAA1BE60();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF2AD668);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SportsStandingRecordEmbed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BAA1C0D8 + 4 * asc_1BB890C90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BAA1C0F8 + 4 * byte_1BB890C95[v4]))();
}

_BYTE *sub_1BAA1C0D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BAA1C0F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA1C100(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA1C108(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BAA1C110(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BAA1C118(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SportsStandingRecordEmbed.CodingKeys()
{
  return &type metadata for SportsStandingRecordEmbed.CodingKeys;
}

unint64_t sub_1BAA1C138()
{
  unint64_t result;

  result = qword_1EF2AD670;
  if (!qword_1EF2AD670)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890DA8, &type metadata for SportsStandingRecordEmbed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD670);
  }
  return result;
}

unint64_t sub_1BAA1C180()
{
  unint64_t result;

  result = qword_1EF2AD678;
  if (!qword_1EF2AD678)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890D18, &type metadata for SportsStandingRecordEmbed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD678);
  }
  return result;
}

unint64_t sub_1BAA1C1C8()
{
  unint64_t result;

  result = qword_1EF2AD680;
  if (!qword_1EF2AD680)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890D40, &type metadata for SportsStandingRecordEmbed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD680);
  }
  return result;
}

BOOL static FollowingPosition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FollowingPosition.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FollowingPosition.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t FollowingManager.toggleFollowing(for:autoEnableNotifications:)(void *a1, char a2)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(v2 + 24), sel_hasSubscriptionToTag_, a1))
    return FollowingManager.unfollow(tag:)(a1);
  else
    return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2 & 1);
}

uint64_t FollowingManager.unfollow(tag:)(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 24), sel_removeSubscriptionToTag_, a1);
  objc_msgSend(a1, sel_isSports);
  sub_1BAA1CF0C(0, &qword_1EF2AD690);
  swift_allocObject();
  sub_1BB86E9E0();
  swift_release();
  sub_1BAA1CF0C(0, &qword_1EF2AD690);
  swift_allocObject();
  return sub_1BB86E9E0();
}

uint64_t FollowingManager.follow(tag:autoEnableNotifications:source:)(void *a1, char a2)
{
  _QWORD *v2;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v13[6];

  v13[5] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)v2[3];
  v13[0] = 0;
  objc_msgSend(v5, sel_addSubscriptionToTag_notificationsEnabled_error_, a1, 0, v13);
  if (!v13[0])
    return sub_1BAA1C60C(a1, a2 & 1);
  v6 = v13[0];
  if (objc_msgSend(v6, sel_code) == (id)1)
  {
    __swift_project_boxed_opaque_existential_1(v2 + 4, v2[7]);
    v7 = (void *)sub_1BB86FFC4();
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, sel_rootViewController);

      if (v9)
      {
        v10 = (void *)sub_1BB8733CC();

        v13[3] = &type metadata for AlertSubscriptionLimitReached;
        v13[4] = (id)sub_1BAA1C81C();
        sub_1BB871314();
        swift_allocObject();
        sub_1BB8712E4();
        sub_1BB8712F0();

        swift_release();
      }
    }
  }
  sub_1BAA1CF0C(0, &qword_1EF2AD690);
  swift_allocObject();
  v11 = sub_1BB86E9C8();

  return v11;
}

uint64_t FollowingManager.toggleFollowing(for:autoEnableNotifications:source:)(void *a1, char a2)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(v2 + 24), sel_hasSubscriptionToTag_, a1))
    return FollowingManager.unfollow(tag:)(a1);
  else
    return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2 & 1);
}

uint64_t FollowingManager.follow(tag:autoEnableNotifications:)(void *a1, char a2)
{
  return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2);
}

uint64_t sub_1BAA1C60C(void *a1, char a2)
{
  id v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = objc_msgSend(a1, sel_tagType);
  if (v4 == (id)1)
  {
    objc_msgSend(a1, sel_isSports);
LABEL_5:
    sub_1BAA1CF0C(0, &qword_1EF2AD690);
    swift_allocObject();
    return sub_1BB86E9E0();
  }
  if (v4 != (id)2)
    goto LABEL_5;
  MEMORY[0x1E0C80A78](2);
  v5 = a2 & 1;
  sub_1BB86EC14();
  v6 = (void *)sub_1BB86DE94();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = v5;
  swift_unknownObjectRetain();
  sub_1BB86E980();
  swift_release();

  swift_release();
  v8 = (void *)sub_1BB86E854();
  v9 = sub_1BB86E9A4();
  swift_release();

  return v9;
}

unint64_t sub_1BAA1C81C()
{
  unint64_t result;

  result = qword_1EF2AD698;
  if (!qword_1EF2AD698)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for AlertSubscriptionLimitReached, &type metadata for AlertSubscriptionLimitReached);
    atomic_store(result, (unint64_t *)&qword_1EF2AD698);
  }
  return result;
}

uint64_t sub_1BAA1C860(_QWORD *a1, void *a2, char a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v10;

  if (a1[2])
  {
    __swift_project_boxed_opaque_existential_1(a1 + 4, a1[7]);
    swift_unknownObjectRetain();
    v5 = (void *)sub_1BB86FFC4();
    if (v5
      && (v6 = v5,
          v7 = objc_msgSend(v5, sel_rootViewController),
          v6,
          v7))
    {
      v8 = (void *)sub_1BB8733CC();

    }
    else
    {
      v8 = 0;
    }
    swift_getObjectType();
    v10 = sub_1BB6B57D8(a2, (uint64_t)v8, a3 & 1);
    swift_unknownObjectRelease();

    return v10;
  }
  else
  {
    sub_1BAA1CF0C(0, (unint64_t *)&qword_1EF2CA680);
    swift_allocObject();
    swift_retain();
    return sub_1BB86E9E0();
  }
}

uint64_t sub_1BAA1C9A0(_BYTE *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5;
  void *v6;
  id v7;
  id v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = a1[1];
  if (*a1 == 1)
  {
    v6 = *(void **)(a2 + 24);
    v10[0] = 0;
    if (!objc_msgSend(v6, sel_setNotificationsEnabled_forTag_error_, 1, a3, v10))
    {
      v9 = v10[0];
      sub_1BB86C484();

      return swift_willThrow();
    }
    v7 = v10[0];
  }
  if ((a4 & 1) != 0)
    LOBYTE(v10[0]) = 0;
  else
    LOBYTE(v10[0]) = 0x2040103u >> (8 * v5);
  sub_1BAA1CF0C(0, &qword_1EF2AD690);
  swift_allocObject();
  return sub_1BB86E9E0();
}

uint64_t sub_1BAA1CAB0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_1ED3BA7F8 != -1)
    swift_once();
  v0 = (id)qword_1ED476860;
  v1 = sub_1BB8732F4();
  sub_1BA7AA598();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BB87CE70;
  sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
  sub_1BB873E34();
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v2 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0xE000000000000000;
  sub_1BB86EF44("Failed to enable notifications, error=%{public}@", 48, 2, &dword_1BA493000, v0, v1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t FollowingManager.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t FollowingManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocClassInstance();
}

unint64_t sub_1BAA1CC40()
{
  unint64_t result;

  result = qword_1EF2AD6A0;
  if (!qword_1EF2AD6A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FollowingPosition, &type metadata for FollowingPosition);
    atomic_store(result, (unint64_t *)&qword_1EF2AD6A0);
  }
  return result;
}

uint64_t sub_1BAA1CC84(void *a1, char a2)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(*(_QWORD *)v2 + 24), sel_hasSubscriptionToTag_, a1))
    return FollowingManager.unfollow(tag:)(a1);
  else
    return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2 & 1);
}

uint64_t sub_1BAA1CCE4(void *a1, char a2)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(*(_QWORD *)v2 + 24), sel_hasSubscriptionToTag_, a1))
    return FollowingManager.unfollow(tag:)(a1);
  else
    return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2 & 1);
}

uint64_t sub_1BAA1CD48(void *a1, char a2)
{
  return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2);
}

uint64_t sub_1BAA1CD6C(void *a1, char a2)
{
  return FollowingManager.follow(tag:autoEnableNotifications:source:)(a1, a2);
}

uint64_t sub_1BAA1CD8C(void *a1)
{
  return FollowingManager.unfollow(tag:)(a1);
}

uint64_t dispatch thunk of FollowingManagerType.toggleFollowing(for:autoEnableNotifications:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of FollowingManagerType.toggleFollowing(for:autoEnableNotifications:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of FollowingManagerType.follow(tag:autoEnableNotifications:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of FollowingManagerType.follow(tag:autoEnableNotifications:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of FollowingManagerType.unfollow(tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t storeEnumTagSinglePayload for FollowingPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BAA1CE20 + 4 * byte_1BB890E25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BAA1CE54 + 4 * byte_1BB890E20[v4]))();
}

uint64_t sub_1BAA1CE54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1CE5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA1CE64);
  return result;
}

uint64_t sub_1BAA1CE70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA1CE78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BAA1CE7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1CE84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FollowingPosition()
{
  return &type metadata for FollowingPosition;
}

uint64_t method lookup function for FollowingManager()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BAA1CEAC()
{
  uint64_t v0;

  return sub_1BAA1C860(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1BAA1CECC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BAA1CEF0(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BAA1C9A0(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

void sub_1BAA1CF0C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BB86EAAC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1BAA1CF50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x1E0DEE9D8];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_23;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_23;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_23;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v10 - 1) & v10;
LABEL_5:
    v8 = swift_bridgeObjectRetain();
    result = sub_1BA67FB48(v8);
  }
  v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return v12;
  }
  v10 = *(_QWORD *)(v1 + 8 * v11);
  if (v10)
  {
    v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v7);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

NewsFeed::PuzzleStatisticType_optional __swiftcall PuzzleStatisticType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  NewsFeed::PuzzleStatisticType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BB873FE4();
  result.value = swift_bridgeObjectRelease();
  v5 = 9;
  if (v3 < 9)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t PuzzleStatisticType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BAA1D150 + 4 * byte_1BB890F40[*v0]))(0x53747365676E6F6CLL, 0xED00006B61657274);
}

uint64_t sub_1BAA1D150()
{
  return 0x53746E6572727563;
}

uint64_t sub_1BAA1D164()
{
  return 0x5373656C7A7A7570;
}

uint64_t sub_1BAA1D188()
{
  return 0x74615265766C6F73;
}

unint64_t sub_1BAA1D1A4()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_1BAA1D1CC()
{
  return 0xD00000000000001DLL;
}

void sub_1BAA1D224(char *a1)
{
  sub_1BB7FBF28(*a1);
}

uint64_t sub_1BAA1D230()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA9D33F8((uint64_t)v3, v1);
  return sub_1BB874608();
}

void sub_1BAA1D274(uint64_t a1)
{
  char *v1;

  sub_1BA9D33F8(a1, *v1);
}

uint64_t sub_1BAA1D27C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA9D33F8((uint64_t)v3, v1);
  return sub_1BB874608();
}

NewsFeed::PuzzleStatisticType_optional sub_1BAA1D2BC(Swift::String *a1)
{
  return PuzzleStatisticType.init(rawValue:)(*a1);
}

uint64_t sub_1BAA1D2C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PuzzleStatisticType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BAA1D2EC()
{
  sub_1BAA29A24();
  return sub_1BB872D60();
}

uint64_t sub_1BAA1D348()
{
  sub_1BAA29A24();
  return sub_1BB872D0C();
}

uint64_t sub_1BAA1D394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA28E4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BAA1D3B8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1BAA1D3C4()
{
  sub_1BA557208();
  return sub_1BB874710();
}

uint64_t sub_1BAA1D3EC()
{
  sub_1BA557208();
  return sub_1BB87471C();
}

unint64_t sub_1BAA1D418()
{
  unint64_t result;

  result = qword_1EF2AD6B0;
  if (!qword_1EF2AD6B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleStatisticType, &type metadata for PuzzleStatisticType);
    atomic_store(result, (unint64_t *)&qword_1EF2AD6B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PuzzleStatisticType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BAA1D4A8 + 4 * byte_1BB890F54[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BAA1D4DC + 4 * byte_1BB890F4F[v4]))();
}

uint64_t sub_1BAA1D4DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1D4E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA1D4ECLL);
  return result;
}

uint64_t sub_1BAA1D4F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA1D500);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BAA1D504(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA1D50C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatisticType()
{
  return &type metadata for PuzzleStatisticType;
}

uint64_t dispatch thunk of PuzzleStatsServiceType.puzzleStatistic(for:puzzleType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1BA8195A4;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of PuzzleStatsServiceType.puzzleStatistics(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1BAA2A710;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PuzzleStatsServiceType.hasSolvedPuzzles(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1BA9822B8;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PuzzleStatsServiceType.resetAccumulatedStats()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BA8195A4;
  return v7(a1, a2);
}

uint64_t dispatch thunk of PuzzleStatsServiceType.debugStats(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 48) + *(_QWORD *)(a4 + 48));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1BA4B0D38;
  return v11(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for PuzzleTypeStats()
{
  return &type metadata for PuzzleTypeStats;
}

uint64_t sub_1BAA1D7C0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2AD880, (uint64_t (*)(void))sub_1BAA2A528, (uint64_t)&type metadata for PuzzleTypeDebugStats.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BAA2A528();
  sub_1BB8746C8();
  v13 = *v3;
  v12 = 0;
  sub_1BA557368();
  sub_1BA55744C();
  sub_1BB8741AC();
  if (!v2)
  {
    v13 = v3[1];
    v12 = 1;
    sub_1BB8741AC();
    v13 = v3[2];
    v12 = 2;
    sub_1BA5571BC(0, &qword_1ED3A2E90);
    sub_1BA5572E8(&qword_1ED3A2E98, MEMORY[0x1E0DEDC68], MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
    sub_1BB8741AC();
    v13 = v3[3];
    v12 = 3;
    sub_1BA5571BC(0, &qword_1ED3A2E40);
    sub_1BA5573CC((unint64_t *)&unk_1ED3A2E48, MEMORY[0x1E0DEDC68], MEMORY[0x1E0DEB080], MEMORY[0x1E0DEA0B8]);
    sub_1BB8741AC();
    v13 = v3[4];
    v12 = 4;
    sub_1BB8741AC();
    v13 = v3[5];
    v12 = 5;
    sub_1BA6D249C();
    sub_1BA637DF8((unint64_t *)&qword_1ED39DA10, (uint64_t (*)(uint64_t))sub_1BA6D249C, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BAA1DADC()
{
  sub_1BAA2A528();
  return sub_1BB874710();
}

uint64_t sub_1BAA1DB04()
{
  sub_1BAA2A528();
  return sub_1BB87471C();
}

double sub_1BAA1DB2C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1BAA29100(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1BAA1DB6C(_QWORD *a1)
{
  return sub_1BAA1D7C0(a1);
}

uint64_t sub_1BAA1DB80()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BAA1DBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a4;
  sub_1BA76D78C();
  v4[14] = swift_task_alloc();
  v4[15] = type metadata accessor for PuzzleStatsService.StatsResult();
  v4[16] = swift_task_alloc();
  sub_1BAA28A34(0);
  v4[17] = swift_task_alloc();
  v5 = type metadata accessor for PuzzleStatsState();
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v6 = sub_1BB86C8B0();
  v4[22] = v6;
  v4[23] = *(_QWORD *)(v6 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA1DCE8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = sub_1BB86EFEC();
  v0[26] = __swift_project_value_buffer(v1, (uint64_t)qword_1ED476918);
  v2 = sub_1BB86EFC8();
  v3 = sub_1BB87330C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BA493000, v2, v3, "PuzzleStatsService: updating stats...", v4, 2u);
    MEMORY[0x1BCCE5C38](v4, -1, -1);
  }
  v5 = (_QWORD *)v0[13];

  v6 = v5 + 14;
  v7 = v5[17];
  v8 = v5[18];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v7, v8) & 1) != 0)
  {
    v9 = sub_1BB86EFC8();
    v10 = sub_1BB87330C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1BA493000, v9, v10, "PuzzleStatsService: empty puzzle history, exiting.", v11, 2u);
      MEMORY[0x1BCCE5C38](v11, -1, -1);
    }

  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[27] = v12;
  *v12 = v0;
  v12[1] = sub_1BAA1DE90;
  return sub_1BAA1ECB0(v0[25]);
}

uint64_t sub_1BAA1DE90()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BAA1DEE8()
{
  uint64_t v0;
  uint64_t ObjectType;
  _QWORD *v2;

  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = sub_1BAA1DF4C;
  return FCNewsAppConfigurationManager.fetchConfiguration(cachedOnly:)(0, ObjectType);
}

uint64_t sub_1BAA1DF4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 240) = a1;
  return swift_task_switch();
}

uint64_t sub_1BAA1DFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD **)(v0 + 104);
  v6 = objc_msgSend(*(id *)(v0 + 240), sel_puzzlesConfig);
  swift_unknownObjectRelease();
  v7 = objc_msgSend(v6, sel_puzzleTypes);

  v8 = sub_1BB872DB4();
  *(_QWORD *)(v0 + 248) = v8;

  sub_1BAA1F370(v1);
  v9 = v5[35];
  v10 = v5[36];
  __swift_project_boxed_opaque_existential_1(v5 + 32, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1BA5D3510(&v38);
    __asm { BR              X10 }
  }
  sub_1BA5193C4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD **)(v0 + 160);
  v13 = *(uint64_t **)(v0 + 168);
  v16 = *v13;
  v15 = v13[1];
  v17 = v13[2];
  v18 = v13[3];
  v19 = (char *)v14 + *(int *)(*(_QWORD *)(v0 + 144) + 28);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 16);
  *(_QWORD *)(v0 + 256) = v20;
  v20(v19, v11, v12);
  *v14 = v16;
  v14[1] = v15;
  v14[2] = v17;
  v14[3] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA4A2E80((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  sub_1BA5193C4((uint64_t)v14, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  v21 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v0 + 264) = v21;
  if (v21)
  {
    *(_QWORD *)(v0 + 272) = 0;
    v22 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v22 + 32);
    *(_QWORD *)(v0 + 280) = v23;
    v24 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v0 + 288) = v24;
    swift_bridgeObjectRetain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v25;
    *v25 = v0;
    v25[1] = sub_1BAA1E628;
    return sub_1BAA1FB0C(*(_QWORD *)(v0 + 128), v23, v24, *(_QWORD *)(v0 + 200));
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v28 + 280);
    v30 = *(_QWORD *)(v28 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v28 + 256), v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(v27, v29, v30);
    *(_BYTE *)(v28 + 312) = 0;
    v31 = sub_1BB86EFC8();
    v32 = sub_1BB87330C();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1BA493000, v31, v32, "PuzzleStatsService: completed updating stats", v33, 2u);
      MEMORY[0x1BCCE5C38](v33, -1, -1);
    }
    v34 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 176);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 168);

    sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1BAA1E42C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
  v1 = *(void **)(v0 + 232);
  v2 = v1;
  v3 = v1;
  v4 = sub_1BB86EFC8();
  v5 = sub_1BB8732F4();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue();
    v8 = sub_1BB87456C();
    *(_QWORD *)(v0 + 96) = sub_1BA5D2E14(v8, v9, &v11);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BA493000, v4, v5, "PuzzleStatsService: error updating stats: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v7, -1, -1);
    MEMORY[0x1BCCE5C38](v6, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA1E628()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_1BAA1E6A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(char **)(v0 + 160);
  v4 = *(char **)(v0 + 168);
  v42 = *(_QWORD *)(v0 + 144);
  v43 = *(void (**)(char *, char *, uint64_t))(v0 + 256);
  v6 = *(_OWORD **)(v0 + 128);
  v44 = *(_QWORD *)(v0 + 120);
  v45 = *(_QWORD *)(v0 + 112);
  v46 = *(_QWORD *)(v0 + 184);
  v8 = v6[1];
  v7 = v6[2];
  *(_OWORD *)(v0 + 16) = *v6;
  *(_OWORD *)(v0 + 32) = v8;
  *(_OWORD *)(v0 + 48) = v7;
  v9 = *((_QWORD *)v4 + 2);
  sub_1BA5D5440(v0 + 16);
  swift_bridgeObjectRetain();
  sub_1BA5D5440(v0 + 16);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BA5D2B70((__int128 *)(v0 + 16), v2, v1, isUniquelyReferenced_nonNull_native);
  v11 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)v4;
  v12 = *((_QWORD *)v4 + 1);
  v14 = *((_QWORD *)v4 + 3);
  v43(&v5[*(int *)(v42 + 28)], &v4[*(int *)(v42 + 28)], v3);
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v12;
  *((_QWORD *)v5 + 2) = v11;
  *((_QWORD *)v5 + 3) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA5D53D8(v0 + 16);
  sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  sub_1BA5193C4((uint64_t)v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  sub_1BA4C2DD8((uint64_t)v6 + *(int *)(v44 + 20), v45, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v3);
  v16 = *(_QWORD *)(v0 + 288);
  if (v15 == 1)
  {
    v17 = *(_QWORD *)(v0 + 112);
    sub_1BA4A2E80(*(_QWORD *)(v0 + 128), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsService.StatsResult);
    swift_bridgeObjectRelease();
    sub_1BA4A2E80(v17, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 280);
    v20 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD **)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 32))(v19, *(_QWORD *)(v0 + 112), v21);
    sub_1BAA02AE0(v19, v18, v16, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_1BA4A2E80(v24, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsService.StatsResult);
    sub_1BA4A2E80(v22, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    sub_1BA5193C4((uint64_t)v23, v22, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  }
  v25 = *(_QWORD *)(v0 + 272) + 1;
  if (v25 == *(_QWORD *)(v0 + 264))
  {
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v27 + 280);
    v29 = *(_QWORD *)(v27 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v27 + 256), v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 24))(v26, v28, v29);
    *(_BYTE *)(v27 + 312) = 0;
    v30 = sub_1BB86EFC8();
    v31 = sub_1BB87330C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1BA493000, v30, v31, "PuzzleStatsService: completed updating stats", v32, 2u);
      MEMORY[0x1BCCE5C38](v32, -1, -1);
    }
    v33 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 168);

    sub_1BA4A2E80(v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 272) = v25;
    v38 = *(_QWORD *)(v0 + 248) + 16 * v25;
    v39 = *(_QWORD *)(v38 + 32);
    *(_QWORD *)(v0 + 280) = v39;
    v40 = *(_QWORD *)(v38 + 40);
    *(_QWORD *)(v0 + 288) = v40;
    swift_bridgeObjectRetain();
    v41 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v41;
    *v41 = v0;
    v41[1] = sub_1BAA1E628;
    return sub_1BAA1FB0C(*(_QWORD *)(v0 + 128), v39, v40, *(_QWORD *)(v0 + 200));
  }
}

uint64_t sub_1BAA1EA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  sub_1BA4A2E80(*(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(void **)(v0 + 304);
  v5 = v4;
  v6 = v4;
  v7 = sub_1BB86EFC8();
  v8 = sub_1BB8732F4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v11 = sub_1BB87456C();
    *(_QWORD *)(v0 + 96) = sub_1BA5D2E14(v11, v12, &v14);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BA493000, v7, v8, "PuzzleStatsService: error updating stats: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v10, -1, -1);
    MEMORY[0x1BCCE5C38](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA1ECB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = swift_getObjectType();
  sub_1BA76D78C();
  v2[6] = swift_task_alloc();
  v3 = sub_1BB86C8B0();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA1ED64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  if (qword_1ED3A0D30 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1ED3A2A90, a2, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStatsService, (uint64_t)&unk_1BB891294);
  sub_1BB86D210();
  if (*(_BYTE *)(v2 + 128) == 1)
  {
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v3 = sub_1BB86EFEC();
    __swift_project_value_buffer(v3, (uint64_t)qword_1ED476918);
    v4 = sub_1BB86EFC8();
    v5 = sub_1BB87330C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1BA493000, v4, v5, "PuzzleStatsService: ignoring stored stats starting date.", v6, 2u);
      MEMORY[0x1BCCE5C38](v6, -1, -1);
    }

    sub_1BB86C7D8();
    goto LABEL_12;
  }
  v7 = *(void **)(*(_QWORD *)(v2 + 32) + 296);
  *(_QWORD *)(v2 + 104) = v7;
  v8 = objc_msgSend(v7, sel_puzzleStatsStartDate);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)(v2 + 88);
    v11 = *(_QWORD *)(v2 + 56);
    v12 = *(_QWORD *)(v2 + 64);
    v13 = *(_QWORD *)(v2 + 48);
    sub_1BB86C874();

    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v14(v13, v10, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) != 1)
    {
      v14(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
      v14(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 56));
LABEL_12:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 64) + 56))(*(_QWORD *)(v2 + 48), 1, 1, *(_QWORD *)(v2 + 56));
  }
  sub_1BA4A2E80(*(_QWORD *)(v2 + 48), (uint64_t (*)(_QWORD))sub_1BA76D78C);
  sub_1BB86C880();
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v16 = *(_QWORD *)(v2 + 72);
  v17 = *(_QWORD *)(v2 + 80);
  v18 = *(_QWORD *)(v2 + 56);
  v19 = *(_QWORD *)(v2 + 64);
  v20 = sub_1BB86EFEC();
  __swift_project_value_buffer(v20, (uint64_t)qword_1ED476918);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v21(v16, v17, v18);
  v22 = sub_1BB86EFC8();
  v23 = sub_1BB87330C();
  v24 = os_log_type_enabled(v22, v23);
  v26 = *(_QWORD *)(v2 + 64);
  v25 = *(_QWORD *)(v2 + 72);
  v27 = *(_QWORD *)(v2 + 56);
  if (v24)
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v34 = v21;
    v35 = swift_slowAlloc();
    v29 = v35;
    *(_DWORD *)v28 = 136315138;
    sub_1BA50AD30((unint64_t *)&qword_1ED3B0530, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v30 = sub_1BB87420C();
    *(_QWORD *)(v2 + 16) = sub_1BA5D2E14(v30, v31, &v35);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v32(v25, v27);
    _os_log_impl(&dword_1BA493000, v22, v23, "PuzzleStatsService: setting stats starting date to %s.", v28, 0xCu);
    swift_arrayDestroy();
    v33 = v29;
    v21 = v34;
    MEMORY[0x1BCCE5C38](v33, -1, -1);
    MEMORY[0x1BCCE5C38](v28, -1, -1);
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v32(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 56));
  }

  *(_QWORD *)(v2 + 112) = v32;
  v21(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 56));
  return swift_task_switch();
}

uint64_t sub_1BAA1F1D4()
{
  uint64_t v0;

  sub_1BB872F7C();
  *(_QWORD *)(v0 + 120) = sub_1BB872F70();
  sub_1BB872F28();
  return swift_task_switch();
}

uint64_t sub_1BAA1F23C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 104);
  swift_release();
  v2 = (void *)sub_1BB86C808();
  objc_msgSend(v1, sel_setPuzzleStatsStartDate_, v2);

  return swift_task_switch();
}

uint64_t sub_1BAA1F2AC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD **)(v0 + 32);
  v6 = v5[35];
  v7 = v5[36];
  __swift_project_boxed_opaque_existential_1(v5 + 32, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  v1(v2, v3);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1BAA1F370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[9];
  char v17;

  v16[2] = a1;
  v1 = sub_1BB86C8B0();
  MEMORY[0x1E0C80A78](v1);
  v16[0] = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA5266EC();
  v16[3] = v3;
  MEMORY[0x1E0C80A78](v3);
  v16[5] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v16 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v16 - v12;
  sub_1BAA28A34(0);
  MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  sub_1BA5D3510(&v17);
  v16[4] = v10;
  v16[6] = v13;
  v16[1] = v7;
  __asm { BR              X10 }
}

uint64_t sub_1BAA1F510()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = v1[35];
  v7 = v1[36];
  *(_QWORD *)(v5 - 104) = v1 + 32;
  *(_QWORD *)(v5 - 96) = v1;
  __swift_project_boxed_opaque_existential_1(v1 + 32, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v8 = type metadata accessor for PuzzleStatsState();
  v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  if (v9(v4, 1, v8) == 1)
  {
    sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BAA28A34);
    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v14 = sub_1BB86EFEC();
    __swift_project_value_buffer(v14, (uint64_t)qword_1ED476918);
    v15 = sub_1BB86EFC8();
    v16 = sub_1BB87330C();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v5 - 96);
    if (!v17)
      goto LABEL_33;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    v20 = "PuzzleStatsService: resetting stats triggered by a change of environment";
    goto LABEL_32;
  }
  v11 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  if (v11 == 0x676E6967617473 && v10 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      goto LABEL_8;
  }
  v21 = v3;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v23 = *(_QWORD *)(v5 - 112);
  v22(v23, *(_QWORD *)(v5 - 144), v0);
  *(_QWORD *)(v5 - 144) = v21;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v25 = 1;
  v24(v23, 0, 1, v0);
  v26 = *(_QWORD *)(v5 - 96);
  v27 = *(_QWORD *)(v26 + 280);
  v28 = *(_QWORD *)(v26 + 288);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v5 - 104), v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  if (v9((uint64_t *)v2, 1, v8) == 1)
  {
    v29 = (uint64_t (*)(_QWORD))sub_1BAA28A34;
    v30 = v0;
    v31 = *(_QWORD *)(v5 - 128);
  }
  else
  {
    v32 = v2 + *(int *)(v8 + 28);
    v31 = *(_QWORD *)(v5 - 128);
    v22(v31, v32, v0);
    v25 = 0;
    v29 = (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState;
    v30 = v0;
  }
  sub_1BA4A2E80(v2, v29);
  v24(v31, v25, 1, v30);
  v33 = *(_QWORD *)(v5 - 120);
  v34 = *(_QWORD *)(v5 - 112);
  v35 = v33 + *(int *)(*(_QWORD *)(v5 - 136) + 48);
  sub_1BA4C2DD8(v34, v33, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  sub_1BA4C2DD8(v31, v35, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 48);
  v37 = v36(v33, 1, v30);
  v18 = *(_QWORD *)(v5 - 96);
  if (v37 == 1)
  {
    sub_1BA4A2E80(v31, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    sub_1BA4A2E80(v34, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    if (v36(v35, 1, v30) == 1)
    {
      result = sub_1BA4A2E80(v33, (uint64_t (*)(_QWORD))sub_1BA76D78C);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v39 = *(_QWORD *)(v5 - 152);
  sub_1BA4C2DD8(v33, v39, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  if (v36(v35, 1, v30) == 1)
  {
    sub_1BA4A2E80(v31, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    sub_1BA4A2E80(v34, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v39, v30);
LABEL_21:
    sub_1BA4A2E80(v33, (uint64_t (*)(_QWORD))sub_1BA5266EC);
LABEL_28:
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v45 = sub_1BB86EFEC();
    __swift_project_value_buffer(v45, (uint64_t)qword_1ED476918);
    v15 = sub_1BB86EFC8();
    v16 = sub_1BB87330C();
    if (!os_log_type_enabled(v15, v16))
      goto LABEL_33;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    v20 = "PuzzleStatsService: resetting stats triggered by a change for stats start date";
    goto LABEL_32;
  }
  v40 = *(_QWORD *)(v5 - 144);
  v41 = *(_QWORD *)(v5 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v41, v35, v30);
  sub_1BA50AD30((unint64_t *)&qword_1ED3B0520, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v42 = sub_1BB872958();
  v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v43(v41, v30);
  sub_1BA4A2E80(v31, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  sub_1BA4A2E80(v34, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v43(v39, v30);
  result = sub_1BA4A2E80(v33, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  if ((v42 & 1) == 0)
    goto LABEL_28;
LABEL_23:
  if (*(_BYTE *)(v18 + 312) != 1)
    return result;
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v44 = sub_1BB86EFEC();
  __swift_project_value_buffer(v44, (uint64_t)qword_1ED476918);
  v15 = sub_1BB86EFC8();
  v16 = sub_1BB87330C();
  if (os_log_type_enabled(v15, v16))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    v20 = "PuzzleStatsService: resetting stats triggered by request to discard accumulated stats";
LABEL_32:
    _os_log_impl(&dword_1BA493000, v15, v16, v20, v19, 2u);
    MEMORY[0x1BCCE5C38](v19, -1, -1);
  }
LABEL_33:

  v47 = *(_QWORD *)(v18 + 280);
  v46 = *(_QWORD *)(v18 + 288);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v5 - 104), v47);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 16))(v47, v46);
}

uint64_t sub_1BAA1FB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  type metadata accessor for PuzzleStatsProcessorContext();
  v5[16] = swift_task_alloc();
  v6 = sub_1BB86C79C();
  v5[17] = v6;
  v5[18] = *(_QWORD *)(v6 - 8);
  v5[19] = swift_task_alloc();
  v7 = sub_1BB86C7B4();
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  sub_1BA76D78C();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v8 = sub_1BB86C8B0();
  v5[26] = v8;
  v5[27] = *(_QWORD *)(v8 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  sub_1BAA28A34(0);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA1FC9C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  _BOOL4 v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t type;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = sub_1BB86EFEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_1ED476918);
  swift_bridgeObjectRetain_n();
  v2 = sub_1BB86EFC8();
  v3 = sub_1BB87330C();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v124 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[10] = sub_1BA5D2E14(v6, v5, &v124);
    sub_1BB873A8C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BA493000, v2, v3, "PuzzleStatsService: updating stats for puzzleType: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v8, -1, -1);
    MEMORY[0x1BCCE5C38](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = v0[36];
  v10 = (_QWORD *)v0[15];
  v0[5] = MEMORY[0x1E0DEE9D8];
  v11 = v10 + 32;
  v12 = v10[35];
  v13 = v10[36];
  __swift_project_boxed_opaque_existential_1(v10 + 32, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v14 = type metadata accessor for PuzzleStatsState();
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  v16 = v15(v9, 1, v14);
  v17 = v0[36];
  if (v16 == 1)
  {
    sub_1BA4A2E80(v0[36], (uint64_t (*)(_QWORD))sub_1BAA28A34);
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v17, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    if (*(_QWORD *)(v18 + 16))
    {
      v20 = v0[12];
      v19 = v0[13];
      swift_bridgeObjectRetain();
      v21 = sub_1BA6E35A8(v20, v19);
      if ((v22 & 1) != 0)
      {
        v23 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 48 * v21);
        v24 = v23[1];
        v25 = v23[2];
        v26 = v23[3];
        v27 = v23[4];
        v123 = v23[5];
        v121 = *v23;
        swift_bridgeObjectRetain();
        v120 = v24;
        swift_bridgeObjectRetain();
        v119 = v25;
        swift_bridgeObjectRetain();
        v118 = v26;
        swift_bridgeObjectRetain();
        v117 = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v120 = 0;
  v121 = 0;
  v118 = 0;
  v119 = 0;
  v117 = 0;
  v123 = 0;
LABEL_15:
  v28 = v0[35];
  v29 = v10[35];
  v30 = v10[36];
  __swift_project_boxed_opaque_existential_1(v11, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  v31 = v15(v28, 1, v14);
  v32 = v0[35];
  if (v31 == 1)
  {
    v33 = v0[26];
    v34 = v0[27];
    v35 = v0[25];
    sub_1BA4A2E80(v0[35], (uint64_t (*)(_QWORD))sub_1BAA28A34);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v36(v35, 1, 1, v33);
  }
  else
  {
    v37 = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v32, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    if (*(_QWORD *)(v37 + 16))
    {
      v39 = v0[12];
      v38 = v0[13];
      swift_bridgeObjectRetain();
      v40 = sub_1BA6E35A8(v39, v38);
      v41 = v0[26];
      v42 = v0[27];
      v43 = v0[25];
      if ((v44 & 1) != 0)
      {
        (*(void (**)(_QWORD, unint64_t, _QWORD))(v42 + 16))(v0[25], *(_QWORD *)(v37 + 56) + *(_QWORD *)(v42 + 72) * v40, v0[26]);
        v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
        v36(v43, 0, 1, v41);
      }
      else
      {
        v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
        v36(v0[25], 1, 1, v41);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[27] + 56);
      v36(v0[25], 1, 1, v0[26]);
    }
    swift_bridgeObjectRelease();
  }
  v0[37] = v36;
  v45 = v0[26];
  v46 = v0[27];
  v47 = v0[25];
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v48(v0[33], v0[14], v45);
  v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  v0[38] = v49;
  v50 = v49(v47, 1, v45);
  v51 = v0[33];
  v52 = v0[34];
  v53 = v0[26];
  v54 = v0[27];
  v55 = v0[25];
  v122 = v36;
  if (v50 == 1)
  {
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
    v56(v52, v51, v53);
    sub_1BA4A2E80(v55, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v51, v53);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
    v56(v52, v55, v53);
  }
  v0[39] = v56;
  v58 = v0[31];
  v57 = v0[32];
  v59 = v0[30];
  v60 = v0[26];
  v61 = v0[27];
  v62 = v0[14];
  v56(v58, v0[34], v60);
  sub_1BA50AD30((unint64_t *)&qword_1ED3AFBB0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  if ((sub_1BB872928() & 1) != 0)
    v63 = v58;
  else
    v63 = v62;
  v48(v57, v63, v60);
  v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v0[40] = v64;
  v64(v58, v60);
  v48(v59, v57, v60);
  swift_bridgeObjectRetain_n();
  v65 = sub_1BB86EFC8();
  v66 = sub_1BB87330C();
  v67 = os_log_type_enabled(v65, v66);
  v68 = v0[30];
  v69 = v0[26];
  if (v67)
  {
    type = v66;
    v70 = v0[22];
    v71 = v0[19];
    v112 = v0[21];
    v113 = v0[20];
    v110 = v0[18];
    v111 = v0[17];
    v115 = v0[26];
    v72 = v0[12];
    v73 = v0[13];
    v74 = swift_slowAlloc();
    v114 = swift_slowAlloc();
    v124 = v114;
    *(_DWORD *)v74 = 136315394;
    swift_bridgeObjectRetain();
    v0[8] = sub_1BA5D2E14(v72, v73, &v124);
    sub_1BB873A8C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v74 + 12) = 2080;
    sub_1BB86C7A8();
    sub_1BB86C790();
    v75 = sub_1BB86C898();
    v77 = v76;
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v71, v111);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v70, v113);
    v0[9] = sub_1BA5D2E14(v75, v77, &v124);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    v64(v68, v115);
    _os_log_impl(&dword_1BA493000, v65, type, "PuzzleStatsService: Processing stats for puzzleType %s starting: [%s]", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v114, -1, -1);
    MEMORY[0x1BCCE5C38](v74, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v64(v68, v69);
  }

  v78 = v0[32];
  v80 = v0[14];
  v79 = (_QWORD *)v0[15];
  v82 = v0[12];
  v81 = v0[13];
  v83 = v79 + 14;
  v84 = v79[17];
  v85 = v79[18];
  __swift_project_boxed_opaque_existential_1(v79 + 14, v84);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v82, v81, v78, v84, v85);
  v87 = sub_1BAA23D10(v82, v81, v86, v80);
  v88 = v0[12];
  v89 = v0[13];
  if ((v87 & 1) != 0)
  {
    v90 = v0[14];
    swift_bridgeObjectRelease();
    sub_1BA5D54AC(v121);
    v92 = v79[17];
    v91 = v79[18];
    __swift_project_boxed_opaque_existential_1(v83, v92);
    v93 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v88, v89, v90, v92, v91);
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
  }
  else
  {
    v93 = sub_1BA5D312C(v0[12], v0[13], v86);
    swift_bridgeObjectRelease();
    v95 = v120;
    v94 = v121;
    v97 = v118;
    v96 = v119;
    v98 = v117;
    v99 = v123;
  }
  v0[45] = v98;
  v0[46] = v99;
  v0[43] = v96;
  v0[44] = v97;
  v0[41] = v94;
  v0[42] = v95;
  v0[5] = v93;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v100 = sub_1BB86EFC8();
  v101 = sub_1BB87330C();
  v102 = os_log_type_enabled(v100, v101);
  v103 = v0[13];
  if (v102)
  {
    v104 = v0[12];
    v105 = swift_slowAlloc();
    v106 = swift_slowAlloc();
    v124 = v106;
    *(_DWORD *)v105 = 134218242;
    v0[6] = v93[2];
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v105 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_1BA5D2E14(v104, v103, &v124);
    sub_1BB873A8C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BA493000, v100, v101, "PuzzleStatsService: processing %ld entries for puzzleType %s", (uint8_t *)v105, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v106, -1, -1);
    MEMORY[0x1BCCE5C38](v105, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }

  v122(v0[24], 1, 1, v0[26]);
  swift_beginAccess();
  v107 = v0[5];
  v0[47] = v107;
  swift_bridgeObjectRetain();
  v108 = (_QWORD *)swift_task_alloc();
  v0[48] = v108;
  *v108 = v0;
  v108[1] = sub_1BAA206F8;
  return sub_1BAA24428(v107);
}

uint64_t sub_1BAA206F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 392) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1BA5D54AC(*(_QWORD *)(v4 + 328));
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v4 + 400) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1BAA20798()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  unint64_t v48[7];

  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 120) + 200), *(_QWORD *)(*(_QWORD *)(v0 + 120) + 224));
  v48[0] = v7;
  v48[1] = v6;
  v48[2] = v5;
  v48[3] = v4;
  v48[4] = v3;
  v48[5] = v2;
  sub_1BB86CA90();
  sub_1BB5DFCD8(v1, v48, v8, (uint64_t *)v47);
  sub_1BA4A2E80(v8, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessorContext);
  swift_bridgeObjectRelease();
  sub_1BA5D54AC(v7);
  v9 = *(_QWORD **)(v0 + 40);
  v45 = v47[1];
  v46 = v47[0];
  v44 = v47[2];
  if (!v9[2])
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    v33 = *(_QWORD *)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 208);
    swift_bridgeObjectRelease();
    v32(v33, v34);
    goto LABEL_10;
  }
  v10 = *(_QWORD **)(v0 + 120);
  v11 = v10 + 14;
  v12 = v9[4];
  v13 = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v10[17];
  v15 = v10[18];
  __swift_project_boxed_opaque_existential_1(v11, v14);
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 8) + 48))(v12, v13, v14);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 208));
    goto LABEL_10;
  }
  v17 = objc_msgSend(v16, sel_lastPlayedDate);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  if (!v17)
  {
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 296);
    v36 = *(_QWORD *)(v0 + 256);
    v37 = *(_QWORD *)(v0 + 208);
    v38 = *(_QWORD *)(v0 + 184);

    v18(v36, v37);
    v35(v38, 1, 1, v37);
    goto LABEL_9;
  }
  v19 = v17;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 296);
  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 184);
  sub_1BB86C874();

  v18(v22, v24);
  v20(v25, v23, v24);
  v21(v25, 0, 1, v24);
  if (v43(v25, 1, v24) == 1)
  {
LABEL_9:
    sub_1BA4A2E80(*(_QWORD *)(v0 + 184), (uint64_t (*)(_QWORD))sub_1BA76D78C);
    goto LABEL_10;
  }
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 296);
  v28 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 192);
  sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v26(v28, v31, v29);
  v26(v30, v28, v29);
  v27(v30, 0, 1, v29);
LABEL_10:
  v39 = *(_QWORD *)(v0 + 192);
  v40 = *(_OWORD **)(v0 + 88);
  v41 = type metadata accessor for PuzzleStatsService.StatsResult();
  sub_1BA5193C4(v39, (uint64_t)v40 + *(int *)(v41 + 20), (uint64_t (*)(_QWORD))sub_1BA76D78C);
  *v40 = v46;
  v40[1] = v45;
  v40[2] = v44;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA20B38()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 208);
  sub_1BA4A2E80(*(_QWORD *)(v0 + 192), (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA20C58(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 40) = type metadata accessor for PuzzleStatisticCategory(0);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  sub_1BAA28D4C(0);
  *(_QWORD *)(v4 + 64) = swift_task_alloc();
  *(_QWORD *)(v4 + 72) = swift_task_alloc();
  *(_BYTE *)(v4 + 88) = *a2;
  return swift_task_switch();
}

void sub_1BAA20D0C()
{
  __asm { BR              X10 }
}

uint64_t sub_1BAA20D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1BAA25A30(*(void **)(v0 + 24), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for PuzzleStatistic();
  sub_1BA5193C4(v1, (uint64_t)v3 + *(int *)(v4 + 20), (uint64_t (*)(_QWORD))sub_1BAA28D4C);
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v3 = v2;
  swift_unknownObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA21188()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_1BAA211D4;
  return sub_1BAA21244(v0[2], v0[3]);
}

uint64_t sub_1BAA211D4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1BAA21244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  sub_1BAA28D68(0);
  v3[8] = swift_task_alloc();
  v5 = type metadata accessor for PuzzleLeaderboardEntry();
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  sub_1BAA28D84(0);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v6 = type metadata accessor for PuzzleLeaderboardResult();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

void sub_1BAA21380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v1 + 240);
  v2 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v0 + 176) = v2;
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 184) = ObjectType;
  if (((*(uint64_t (**)(void))(v2 + 16))() & 1) != 0)
  {
    v4 = objc_msgSend(*(id *)(v0 + 24), sel_identifier);
    v5 = sub_1BB8729A0();
    v7 = v6;

    *(_QWORD *)(v0 + 192) = v7;
    *(_BYTE *)(v0 + 252) = 1;
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v8;
    *v8 = v0;
    v8[1] = sub_1BAA2156C;
    PuzzleGameCenterServiceType.leaderboard(for:scope:range:)(*(_QWORD *)(v0 + 128), v5, v7, (_BYTE *)(v0 + 252), 1, 10, ObjectType, v2);
  }
  else
  {
    v9 = *(char **)(v0 + 16);
    v10 = type metadata accessor for PuzzleStatistic();
    v11 = *(_QWORD *)(v0 + 24);
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 56))(&v9[*(int *)(v10 + 20)], 1, 1, *(_QWORD *)(v0 + 40));
    type metadata accessor for PuzzleStatisticCategory(0);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)v9 = v11;
    swift_unknownObjectRetain();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1BAA2156C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void sub_1BAA215E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 48);
  *(_QWORD *)(v0 + 216) = v3;
  if (v3(v2, 1, v1) == 1)
  {
    v4 = (uint64_t (*)(_QWORD))sub_1BAA28D84;
LABEL_9:
    v12 = v2;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 64);
  sub_1BA5193C4(v2, v5, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
  sub_1BA4C2DD8(v5, v8, (uint64_t (*)(_QWORD))sub_1BAA28D68);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  v10 = *(_QWORD *)(v0 + 160);
  if (v9 == 1)
  {
    v11 = *(_QWORD *)(v0 + 64);
    sub_1BA4A2E80(*(_QWORD *)(v0 + 160), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
    v4 = (uint64_t (*)(_QWORD))sub_1BAA28D68;
    v12 = v11;
LABEL_10:
    sub_1BA4A2E80(v12, v4);
    v17 = *(_QWORD **)(v0 + 16);
    v18 = (uint64_t)v17 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
    v19 = 1;
LABEL_11:
    v20 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 56))(v18, v19, 1, *(_QWORD *)(v0 + 40));
    type metadata accessor for PuzzleStatisticCategory(0);
    swift_storeEnumTagMultiPayload();
    *v17 = v20;
    swift_unknownObjectRetain();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v0 + 136);
  sub_1BA5193C4(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
  v14 = *(int *)(v13 + 24);
  *(_DWORD *)(v0 + 248) = v14;
  v15 = *(_QWORD *)(v10 + v14);
  if (v15 < 2)
  {
    v2 = *(_QWORD *)(v0 + 160);
    sub_1BA4A2E80(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    v4 = (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult;
    goto LABEL_9;
  }
  v16 = *(_QWORD *)(v0 + 208);
  v56 = *(_QWORD **)(*(_QWORD *)(v0 + 160) + *(int *)(*(_QWORD *)(v0 + 136) + 20));
  swift_bridgeObjectRetain_n();
  sub_1BAA2759C(&v56, (uint64_t (*)(_QWORD *))sub_1BAA27628);
  if (v16)
  {
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v0 + 112);
  v22 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease();
  v23 = v56;
  v24 = *(_QWORD *)(v21 + *(int *)(v22 + 28));
  if (v24 == 1)
  {
    v25 = (uint64_t *)(v0 + 104);
    sub_1BA4C2DD8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    if (v23[2] >= 2uLL)
      v26 = 2;
    else
      v26 = v23[2];
    sub_1BB874434();
    swift_unknownObjectRetain_n();
    v27 = swift_dynamicCastClass();
    if (!v27)
    {
      swift_release();
      v27 = MEMORY[0x1E0DEE9D8];
    }
    v28 = *(_QWORD *)(v27 + 16);
    swift_release();
    if (v28 == v26)
    {
      v29 = swift_dynamicCastClass();
      if (v29)
      {
LABEL_20:
        v30 = v29;
LABEL_30:
        swift_release();
        v35 = *v25;
        v36 = *(int *)(v0 + 248);
        v37 = *(_QWORD *)(v0 + 160);
        v38 = *(_QWORD *)(v0 + 56);
        v39 = *(_QWORD *)(v0 + 40);
        v40 = *(_QWORD *)(v0 + 16);
        sub_1BA4A2E80(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        v41 = *(_QWORD *)(v37 + v36);
        sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
        sub_1BA5193C4(v35, v38, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        *(_QWORD *)(v38 + *(int *)(v39 + 20)) = v30;
        *(_QWORD *)(v38 + *(int *)(v39 + 24)) = v41;
        v18 = v40 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
        sub_1BA5193C4(v38, v18, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
        v19 = 0;
        v17 = *(_QWORD **)(v0 + 16);
        goto LABEL_11;
      }
LABEL_29:
      swift_release();
      v30 = MEMORY[0x1E0DEE9D8];
      goto LABEL_30;
    }
    v48 = (2 * v26) | 1;
    v49 = *(_QWORD *)(v0 + 80);
    swift_release();
    v50 = (uint64_t)v23 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v51 = (uint64_t)v23;
    v52 = 0;
    v53 = v48;
    goto LABEL_35;
  }
  if (v24 == v15)
  {
    v25 = (uint64_t *)(v0 + 96);
    sub_1BA4C2DD8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    v31 = v23[2];
    if (v31 >= 2)
      v32 = v31 - 2;
    else
      v32 = 0;
    sub_1BB874434();
    swift_unknownObjectRetain_n();
    v33 = swift_dynamicCastClass();
    if (!v33)
    {
      swift_release();
      v33 = MEMORY[0x1E0DEE9D8];
    }
    v34 = *(_QWORD *)(v33 + 16);
    swift_release();
    if (v34 == v31 - v32)
    {
      v29 = swift_dynamicCastClass();
      if (v29)
        goto LABEL_20;
      goto LABEL_29;
    }
    v54 = (2 * v31) | 1;
    v55 = *(_QWORD *)(v0 + 80);
    swift_release();
    v50 = (uint64_t)v23 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    v51 = (uint64_t)v23;
    v52 = v32;
    v53 = v54;
LABEL_35:
    v30 = sub_1BA85CA14(v51, v50, v52, v53);
    goto LABEL_30;
  }
  v42 = *(void **)(v0 + 24);
  swift_release();
  v43 = objc_msgSend(v42, sel_identifier);
  v44 = sub_1BB8729A0();
  v46 = v45;

  *(_QWORD *)(v0 + 224) = v46;
  *(_BYTE *)(v0 + 253) = 1;
  if (__OFSUB__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v47;
    *v47 = v0;
    v47[1] = sub_1BAA21B4C;
    PuzzleGameCenterServiceType.leaderboard(for:scope:range:)(*(_QWORD *)(v0 + 120), v44, v46, (_BYTE *)(v0 + 253), v24 - 1, 3, *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 176));
  }
}

uint64_t sub_1BAA21B4C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BAA21BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 216))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 16);
    sub_1BA4A2E80(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    sub_1BA4A2E80(v3, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
    sub_1BA4A2E80(v2, (uint64_t (*)(_QWORD))sub_1BAA28D84);
    v5 = v4 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    sub_1BA5193C4(v2, v8, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
    sub_1BA4C2DD8(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    v23 = *(_QWORD **)(v8 + *(int *)(v1 + 20));
    swift_bridgeObjectRetain_n();
    sub_1BAA2759C(&v23, (uint64_t (*)(_QWORD *))sub_1BAA27628);
    if (v7)
      return swift_release();
    v12 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    v13 = v23;
    sub_1BA4A2E80(v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
    v14 = *(_QWORD *)(v0 + 88);
    v15 = *(int *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 40);
    v19 = *(_QWORD *)(v0 + 16);
    sub_1BA4A2E80(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    v20 = *(_QWORD *)(v16 + v15);
    sub_1BA4A2E80(v16, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
    sub_1BA5193C4(v14, v17, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    *(_QWORD *)(v17 + *(int *)(v18 + 20)) = v13;
    *(_QWORD *)(v17 + *(int *)(v18 + 24)) = v20;
    v5 = v19 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
    sub_1BA5193C4(v17, v5, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
    v6 = 0;
  }
  v22 = *(_QWORD **)(v0 + 16);
  v21 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 56))(v5, v6, 1, *(_QWORD *)(v0 + 40));
  type metadata accessor for PuzzleStatisticCategory(0);
  swift_storeEnumTagMultiPayload();
  *v22 = v21;
  swift_unknownObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA21E68()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA21F1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  sub_1BA4A2E80(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
  sub_1BA4A2E80(v1, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA21FF4@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;

  sub_1BAA28D4C(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v23[-v9];
  v11 = (int *)type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = sub_1BAA254DC(a1);
  if (!v2)
  {
    v15 = result;
    v16 = sub_1BAA256DC(a1);
    v42 = v17;
    v61 = v16;
    sub_1BAA25A30(a1, (uint64_t)v10);
    sub_1BAA25E20(a1, (uint64_t)v7);
    sub_1BAA266F8(a1, (uint64_t)&v55);
    v41 = v55;
    v40 = v56;
    v39 = v57;
    v38 = v58;
    v37 = v59;
    v36 = v60;
    sub_1BAA26898(a1, (uint64_t)&v49);
    v35 = v49;
    v34 = v50;
    v33 = v51;
    v32 = v52;
    v31 = v53;
    v30 = v54;
    sub_1BAA26A38(a1, (uint64_t)&v43);
    v29 = v43;
    v28 = v44;
    v27 = v45;
    v26 = v46;
    v25 = v47;
    v24 = v48;
    v18 = v61;
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v18;
    v13[16] = v42 & 1;
    sub_1BA5193C4((uint64_t)v10, (uint64_t)&v13[v11[6]], (uint64_t (*)(_QWORD))sub_1BAA28D4C);
    sub_1BA5193C4((uint64_t)v7, (uint64_t)&v13[v11[7]], (uint64_t (*)(_QWORD))sub_1BAA28D4C);
    v19 = &v13[v11[8]];
    *(_QWORD *)v19 = v41;
    v19[8] = v40;
    *((_QWORD *)v19 + 2) = v39;
    v19[24] = v38;
    *((_QWORD *)v19 + 4) = v37;
    v19[40] = v36;
    v20 = &v13[v11[9]];
    *(_QWORD *)v20 = v35;
    v20[8] = v34;
    *((_QWORD *)v20 + 2) = v33;
    v20[24] = v32;
    *((_QWORD *)v20 + 4) = v31;
    v20[40] = v30;
    v21 = &v13[v11[10]];
    *(_QWORD *)v21 = v29;
    v21[8] = v28;
    *((_QWORD *)v21 + 2) = v27;
    v21[24] = v26;
    *((_QWORD *)v21 + 4) = v25;
    v21[40] = v24;
    v22 = type metadata accessor for PuzzleStatistic();
    sub_1BA5193C4((uint64_t)v13, (uint64_t)a2 + *(int *)(v22 + 20), type metadata accessor for PuzzleStatisticsGroupedValue);
    type metadata accessor for PuzzleStatisticCategory(0);
    swift_storeEnumTagMultiPayload();
    *a2 = a1;
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1BAA223F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for PuzzleStatistic();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for PuzzleStatisticCategory(0);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  sub_1BAA28D4C(0);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  sub_1BA8CAA04(0);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA22550()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  sub_1BAA25E20(*(void **)(v0 + 16), *(_QWORD *)(v0 + 96));
  v1 = *(_QWORD **)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  sub_1BA5193C4(*(_QWORD *)(v0 + 96), (uint64_t)v1 + *(int *)(v2 + 20), (uint64_t (*)(_QWORD))sub_1BAA28D4C);
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v1 = v4;
  v5 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v3 + 56);
  v5(v1, 0, 1, v2);
  swift_unknownObjectRetain();
  *(_QWORD *)(v0 + 192) = v5;
  sub_1BAA25A30(*(void **)(v0 + 16), *(_QWORD *)(v0 + 88));
  v6 = *(_QWORD **)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  sub_1BA5193C4(*(_QWORD *)(v0 + 88), (uint64_t)v6 + *(int *)(v7 + 20), (uint64_t (*)(_QWORD))sub_1BAA28D4C);
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v6 = v8;
  v5(v6, 0, 1, v7);
  swift_unknownObjectRetain();
  v9 = sub_1BAA254DC(*(void **)(v0 + 16));
  v10 = *(_QWORD **)(v0 + 168);
  v11 = *(uint64_t **)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 32);
  v13 = *(_QWORD *)(v0 + 16);
  *v11 = v9;
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v10 = v13;
  sub_1BA5193C4((uint64_t)v11, (uint64_t)v10 + *(int *)(v12 + 20), type metadata accessor for PuzzleStatisticCategory);
  v5(v10, 0, 1, v12);
  swift_unknownObjectRetain();
  v14 = sub_1BAA256DC(*(void **)(v0 + 16));
  v15 = *(_QWORD **)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v16 = v14;
  *(_BYTE *)(v16 + 8) = v19 & 1;
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v15 = v18;
  sub_1BA5193C4(v16, (uint64_t)v15 + *(int *)(v17 + 20), type metadata accessor for PuzzleStatisticCategory);
  v5(v15, 0, 1, v17);
  swift_unknownObjectRetain();
  sub_1BAA266F8(*(void **)(v0 + 16), (uint64_t)&v44);
  v20 = *(_QWORD **)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = v45;
  v24 = v46;
  LOBYTE(v17) = v47;
  v42 = v48;
  v40 = v49;
  v25 = (char *)v20 + *(int *)(v21 + 20);
  *(_QWORD *)v25 = v44;
  v25[8] = v23;
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  v26 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  v27 = &v25[*(int *)(v26 + 20)];
  *(_QWORD *)v27 = v24;
  v27[8] = v17;
  swift_storeEnumTagMultiPayload();
  v28 = &v25[*(int *)(v26 + 24)];
  *(_QWORD *)v28 = v42;
  v28[8] = v40;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v20 = v22;
  v5(v20, 0, 1, v21);
  swift_unknownObjectRetain();
  sub_1BAA26898(*(void **)(v0 + 16), (uint64_t)&v44);
  v29 = *(_QWORD **)(v0 + 144);
  v30 = *(_QWORD *)(v0 + 32);
  v31 = *(_QWORD *)(v0 + 16);
  v32 = v45;
  v33 = v46;
  LOBYTE(v17) = v47;
  v43 = v48;
  v41 = v49;
  v34 = (char *)v29 + *(int *)(v30 + 20);
  *(_QWORD *)v34 = v44;
  v34[8] = v32;
  type metadata accessor for PuzzleStatisticValue(0);
  swift_storeEnumTagMultiPayload();
  v35 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  v36 = &v34[*(int *)(v35 + 20)];
  *(_QWORD *)v36 = v33;
  v36[8] = v17;
  swift_storeEnumTagMultiPayload();
  v37 = &v34[*(int *)(v35 + 24)];
  *(_QWORD *)v37 = v43;
  v37[8] = v41;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v29 = v31;
  v5(v29, 0, 1, v30);
  swift_unknownObjectRetain();
  v38 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v38;
  *v38 = v0;
  v38[1] = sub_1BAA22AA0;
  return sub_1BAA21244(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1BAA22AA0()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_1BAA22B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 160);
  v32 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v0 + 192))(v4, 0, 1, *(_QWORD *)(v0 + 32));
  sub_1BA4B07F0(0, &qword_1EF2AD7C8, (uint64_t (*)(uint64_t))sub_1BA8CAA04, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = *(_QWORD *)(v5 + 72);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BB8832C0;
  v10 = v9 + v8;
  sub_1BA4C2DD8(v4, v9 + v8, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v1, v10 + v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v2, v10 + 2 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v3, v10 + 3 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v31, v10 + 4 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v32, v10 + 5 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v33, v10 + 6 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = 7;
  do
  {
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 32);
    sub_1BA4C2DD8(v10, v13, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    sub_1BA5193C4(v13, v14, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v14, 1, v15);
    v17 = *(_QWORD *)(v0 + 120);
    if (v16 == 1)
    {
      sub_1BA4A2E80(v17, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 48);
      v18 = *(_QWORD *)(v0 + 56);
      sub_1BA5193C4(v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
      sub_1BA5193C4(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1BB38D310(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
        v11 = sub_1BB38D310(v20 > 1, v21 + 1, 1, v11);
      v22 = *(_QWORD *)(v0 + 48);
      *(_QWORD *)(v11 + 16) = v21 + 1;
      sub_1BA5193C4(v22, v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
    }
    v10 += v7;
    --v12;
  }
  while (v12);
  v24 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 160);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BA4A2E80(v28, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v26, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v27, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v25, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v24, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v23, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
}

uint64_t sub_1BAA22EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 160);
  v32 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 192))(v4, 1, 1, *(_QWORD *)(v0 + 32));
  sub_1BA4B07F0(0, &qword_1EF2AD7C8, (uint64_t (*)(uint64_t))sub_1BA8CAA04, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = *(_QWORD *)(v5 + 72);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BB8832C0;
  v10 = v9 + v8;
  sub_1BA4C2DD8(v4, v9 + v8, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v1, v10 + v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v2, v10 + 2 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v3, v10 + 3 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v31, v10 + 4 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v32, v10 + 5 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4C2DD8(v33, v10 + 6 * v7, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = 7;
  do
  {
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 32);
    sub_1BA4C2DD8(v10, v13, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    sub_1BA5193C4(v13, v14, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v14, 1, v15);
    v17 = *(_QWORD *)(v0 + 120);
    if (v16 == 1)
    {
      sub_1BA4A2E80(v17, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 48);
      v18 = *(_QWORD *)(v0 + 56);
      sub_1BA5193C4(v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
      sub_1BA5193C4(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1BB38D310(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
        v11 = sub_1BB38D310(v20 > 1, v21 + 1, 1, v11);
      v22 = *(_QWORD *)(v0 + 48);
      *(_QWORD *)(v11 + 16) = v21 + 1;
      sub_1BA5193C4(v22, v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
    }
    v10 += v7;
    --v12;
  }
  while (v12);
  v24 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 160);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BA4A2E80(v28, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v26, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v27, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v25, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v24, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  sub_1BA4A2E80(v23, (uint64_t (*)(_QWORD))sub_1BA8CAA04);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
}

uint64_t sub_1BAA232AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  v2[4] = swift_task_alloc();
  v2[5] = type metadata accessor for PuzzleStatisticValue(0);
  v2[6] = swift_task_alloc();
  v2[7] = type metadata accessor for PuzzleStatisticCategory(0);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for PuzzleStatistic();
  v2[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA23380()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  double v14;
  uint64_t result;

  v1 = sub_1BAA254DC(*(void **)(v0 + 16));
  v2 = *(_QWORD **)(v0 + 88);
  v3 = *(uint64_t **)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 16);
  *v3 = v1;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *v2 = v6;
  v7 = (uint64_t)v2 + *(int *)(v4 + 20);
  sub_1BA5193C4((uint64_t)v3, v7, type metadata accessor for PuzzleStatisticCategory);
  sub_1BA4C2DD8(v7, v5, type metadata accessor for PuzzleStatisticCategory);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      v11 = *(_QWORD *)(v0 + 64);
      v12 = *(_QWORD *)(v0 + 32);
      v13 = type metadata accessor for PuzzleStatisticDifficultyLevelValue;
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 64);
      v12 = *(_QWORD *)(v0 + 48);
      v13 = type metadata accessor for PuzzleStatisticValue;
    }
    sub_1BA5193C4(v11, v12, v13);
    swift_unknownObjectRetain();
    PuzzleStatisticValue.primaryValue.getter();
    v10 = v14;
    sub_1BA4A2E80(v12, v13);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 64);
    swift_unknownObjectRetain();
    sub_1BA4A2E80(v9, type metadata accessor for PuzzleStatisticCategory);
    v10 = -1.0;
  }
  result = sub_1BA4A2E80(*(_QWORD *)(v0 + 88), (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 < 9.22337204e18)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(BOOL))(v0 + 8))((uint64_t)v10 > 0);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1BAA235A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1BAA235C0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = sub_1BB86EFEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_1ED476918);
  v2 = sub_1BB86EFC8();
  v3 = sub_1BB87330C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BA493000, v2, v3, "PuzzleStatsService: Will discard accumulated stats in next calculation", v4, 2u);
    MEMORY[0x1BCCE5C38](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 16);

  *(_BYTE *)(v5 + 312) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BAA236A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_1BAA28A34(0);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

int64_t sub_1BAA23704()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  int64_t result;
  char v32;
  char v33;
  uint64_t *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)(void);
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51[7];

  v1 = *(_QWORD *)(v0[9] + 16);
  if (v1)
  {
    v50 = v0 + 2;
    v47 = (_QWORD *)v0[10];
    v46 = v0[11];
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v45 = v0;
    while (1)
    {
      v7 = v0[11];
      v9 = *(v2 - 1);
      v8 = *v2;
      v49 = v2;
      v10 = v47[35];
      v11 = v47[36];
      __swift_project_boxed_opaque_existential_1(v47 + 32, v10);
      v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      swift_bridgeObjectRetain();
      v12(v10, v11);
      v13 = type metadata accessor for PuzzleStatsState();
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v7, 1, v13);
      v15 = v0[11];
      if (v14 == 1)
      {
        sub_1BA4A2E80(v0[11], (uint64_t (*)(_QWORD))sub_1BAA28A34);
        goto LABEL_24;
      }
      v16 = *(_QWORD *)(v46 + 16);
      swift_bridgeObjectRetain();
      sub_1BA4A2E80(v15, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
      if (!*(_QWORD *)(v16 + 16))
        goto LABEL_23;
      swift_bridgeObjectRetain();
      v17 = sub_1BA6E35A8(v9, v8);
      if ((v18 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
LABEL_24:
        sub_1BA8CAB08();
        swift_allocError();
        *v41 = 0;
        v41[1] = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        v42 = (uint64_t (*)(void))v0[1];
        return v42();
      }
      v48 = v1;
      v19 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 48 * v17);
      v20 = *v19;
      v21 = v19[1];
      v23 = v19[2];
      v22 = v19[3];
      v24 = v19[4];
      v25 = v19[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v51[0] = v20;
      v51[1] = v21;
      v51[2] = v23;
      v51[3] = v22;
      v51[4] = v24;
      v51[5] = v25;
      sub_1BAA28A50(v51, v50);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51[0] = (uint64_t)v3;
      v28 = sub_1BA6E35A8(v9, v8);
      v29 = v3[2];
      v30 = (v27 & 1) == 0;
      result = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      v32 = v27;
      if (v3[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v27 & 1) == 0)
            goto LABEL_15;
        }
        else
        {
          result = (int64_t)sub_1BB4C4CB8();
          v3 = (_QWORD *)v51[0];
          if ((v32 & 1) == 0)
            goto LABEL_15;
        }
      }
      else
      {
        sub_1BB4B26EC(result, isUniquelyReferenced_nonNull_native);
        v3 = (_QWORD *)v51[0];
        result = sub_1BA6E35A8(v9, v8);
        if ((v32 & 1) != (v33 & 1))
          return sub_1BB874560();
        v28 = result;
        if ((v32 & 1) == 0)
        {
LABEL_15:
          v3[(v28 >> 6) + 8] |= 1 << v28;
          v34 = (uint64_t *)(v3[6] + 16 * v28);
          *v34 = v9;
          v34[1] = v8;
          v35 = (_OWORD *)(v3[7] + 48 * v28);
          v36 = *(_OWORD *)v50;
          v37 = *((_OWORD *)v50 + 2);
          v35[1] = *((_OWORD *)v50 + 1);
          v35[2] = v37;
          *v35 = v36;
          v38 = v3[2];
          v39 = __OFADD__(v38, 1);
          v40 = v38 + 1;
          if (v39)
            goto LABEL_30;
          v3[2] = v40;
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
      }
      v4 = (_OWORD *)(v3[7] + 48 * v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = *(_OWORD *)v50;
      v6 = *((_OWORD *)v50 + 2);
      v4[1] = *((_OWORD *)v50 + 1);
      v4[2] = v6;
      *v4 = v5;
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v49 + 2;
      v1 = v48 - 1;
      v0 = v45;
      if (v48 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_26:
  v43 = (_QWORD *)v0[8];
  sub_1BA5571BC(0, &qword_1EF2AD790);
  v43[3] = v44;
  v43[4] = sub_1BAA28C80();
  *v43 = v3;
  swift_task_dealloc();
  v42 = (uint64_t (*)(void))v0[1];
  return v42();
}

uint64_t sub_1BAA23B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  sub_1BAA28A34(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3[35];
  v11 = v3[36];
  __swift_project_boxed_opaque_existential_1(v3 + 32, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  v12 = type metadata accessor for PuzzleStatsState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v9, 1, v12) == 1)
  {
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BAA28A34);
  }
  else
  {
    v13 = *((_QWORD *)v9 + 2);
    swift_bridgeObjectRetain();
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
    if (*(_QWORD *)(v13 + 16))
    {
      swift_bridgeObjectRetain();
      v14 = sub_1BA6E35A8(a1, a2);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 48 * v14);
        v17 = v16[1];
        v25 = *v16;
        v18 = v16[2];
        v19 = v16[3];
        v21 = v16[4];
        v20 = v16[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *a3 = v25;
        a3[1] = v17;
        a3[2] = v18;
        a3[3] = v19;
        a3[4] = v21;
        a3[5] = v20;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  sub_1BA8CAB08();
  swift_allocError();
  *v23 = 0;
  v23[1] = 0;
  return swift_willThrow();
}

uint64_t sub_1BAA23D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74[11];

  v5 = v4;
  sub_1BAA28A34(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v4[35];
  v14 = v4[36];
  __swift_project_boxed_opaque_existential_1(v4 + 32, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  v15 = type metadata accessor for PuzzleStatsState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v12, 1, v15) == 1)
  {
    sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BAA28A34);
    return 0;
  }
  v16 = *((_QWORD *)v12 + 2);
  swift_bridgeObjectRetain();
  sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsState);
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v17 = sub_1BA6E35A8(a1, a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v65 = a4;
  v68 = a1;
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 48 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69 = a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v67 = v19;
  v20 = sub_1BAA1CF50(v19);
  v64[1] = 0;
  v21 = sub_1BA6E43EC(v20);
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(a3 + 16);
  v66 = a3;
  if (v70)
  {
    v71 = a3 + 32;
    v72 = v5 + 14;
    v22 = v21 + 56;
    swift_bridgeObjectRetain();
    v23 = 0;
    while (1)
    {
      v24 = (uint64_t *)(v71 + 16 * v23);
      v26 = *v24;
      v25 = v24[1];
      v28 = v5[17];
      v27 = v5[18];
      __swift_project_boxed_opaque_existential_1(v72, v28);
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v21;
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16);
      swift_bridgeObjectRetain();
      v32 = v31(v26, v25, v28, v29);
      v21 = v30;
      if ((v32 & 1) == 0)
      {
        if (*(_QWORD *)(v30 + 16))
        {
          sub_1BB8745CC();
          sub_1BB872A90();
          v33 = sub_1BB874608();
          v34 = -1 << *(_BYTE *)(v30 + 32);
          v35 = v33 & ~v34;
          if (((*(_QWORD *)(v22 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          {
            v36 = *(_QWORD *)(v30 + 48);
            v37 = (_QWORD *)(v36 + 16 * v35);
            v38 = *v37 == v26 && v37[1] == v25;
            if (v38 || (sub_1BB874398() & 1) != 0)
            {
LABEL_23:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v43 = v68;
              v42 = v69;
              if (qword_1ED3C0B50 != -1)
                swift_once();
              v44 = sub_1BB86EFEC();
              __swift_project_value_buffer(v44, (uint64_t)qword_1ED476918);
              swift_bridgeObjectRetain_n();
              v45 = sub_1BB86EFC8();
              v46 = sub_1BB87330C();
              if (os_log_type_enabled(v45, v46))
              {
                v47 = (uint8_t *)swift_slowAlloc();
                v48 = swift_slowAlloc();
                v74[0] = v48;
                *(_DWORD *)v47 = 136315138;
                swift_bridgeObjectRetain();
                v73 = sub_1BA5D2E14(v43, v42, v74);
                sub_1BB873A8C();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_1BA493000, v45, v46, "PuzzleStatsService: resetting stats for puzzleType %s triggered by a cleared puzzle previously completed", v47, 0xCu);
                v49 = 1;
                swift_arrayDestroy();
                MEMORY[0x1BCCE5C38](v48, -1, -1);
                MEMORY[0x1BCCE5C38](v47, -1, -1);

                swift_bridgeObjectRelease();
              }
              else
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                return 1;
              }
              return v49;
            }
            v39 = ~v34;
            while (1)
            {
              v35 = (v35 + 1) & v39;
              if (((*(_QWORD *)(v22 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
                break;
              v40 = (_QWORD *)(v36 + 16 * v35);
              v41 = *v40 == v26 && v40[1] == v25;
              if (v41 || (sub_1BB874398() & 1) != 0)
                goto LABEL_23;
            }
          }
        }
      }
      ++v23;
      swift_bridgeObjectRelease();
      if (v23 == v70)
        goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
LABEL_32:
  v51 = sub_1BA6E43EC(v66);
  swift_bridgeObjectRelease();
  v52 = v5[17];
  v53 = v5[18];
  __swift_project_boxed_opaque_existential_1(v5 + 14, v52);
  v55 = v68;
  v54 = v69;
  v56 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v68, v69, v65, v52, v53);
  swift_retain();
  v57 = sub_1BAA28798(v56, v51, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v58 = sub_1BA6E43EC(v57);
  swift_bridgeObjectRelease();
  LOBYTE(v56) = sub_1BA6EB330(v21, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
    goto LABEL_28;
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v59 = sub_1BB86EFEC();
  __swift_project_value_buffer(v59, (uint64_t)qword_1ED476918);
  swift_bridgeObjectRetain_n();
  v60 = sub_1BB86EFC8();
  v61 = sub_1BB87330C();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v74[0] = v63;
    *(_DWORD *)v62 = 136315138;
    swift_bridgeObjectRetain();
    v73 = sub_1BA5D2E14(v55, v54, v74);
    sub_1BB873A8C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BA493000, v60, v61, "PuzzleStatsService: resetting stats for puzzleType %s triggered by a difference between the cached and history list of completed puzzles", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v63, -1, -1);
    MEMORY[0x1BCCE5C38](v62, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1BAA24428(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  sub_1BA76D78C();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v3 = type metadata accessor for PuzzleStatsProcessingData();
  v2[13] = v3;
  v2[14] = *(_QWORD *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA244F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t (*v51)(_QWORD *, uint64_t, uint64_t);

  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 40) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = v1;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 16);
  if (!v2)
    goto LABEL_22;
  v46 = *(_QWORD *)(v0 + 112);
  v47 = *(_QWORD *)(v0 + 144);
  v45 = *(_QWORD *)(v0 + 104);
  v50 = *(_QWORD **)(v0 + 80);
  v3 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  do
  {
    v6 = *(v3 - 1);
    v5 = *v3;
    v8 = v50[17];
    v7 = v50[18];
    __swift_project_boxed_opaque_existential_1(v50 + 14, v8);
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    v11 = (void *)v10(v6, v5, v8, v9);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v12, sel_difficulty);
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, sel_longLongValue);

        v16 = objc_msgSend(v12, sel_behaviorFlags);
        if (v16)
        {
          v17 = v16;
          v49 = v1;
          v18 = *(uint64_t **)(v0 + 144);
          v48 = objc_msgSend(v16, sel_unsignedIntegerValue);

          v19 = objc_msgSend(v12, sel_puzzleID);
          v20 = sub_1BB8729A0();
          v22 = v21;

          *v18 = v20;
          *(_QWORD *)(v47 + 8) = v22;
          *(_QWORD *)(v47 + 16) = v15;
          v23 = objc_msgSend(v12, sel_publishDate);
          v24 = *(_QWORD *)(v0 + 96);
          if (v23)
          {
            v25 = v23;
            sub_1BB86C874();

            v26 = sub_1BB86C8B0();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 0, 1, v26);
          }
          else
          {

            v29 = sub_1BB86C8B0();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v24, 1, 1, v29);
          }
          v31 = *(_QWORD *)(v0 + 152);
          v30 = *(_QWORD *)(v0 + 160);
          v33 = *(_QWORD *)(v0 + 136);
          v32 = *(_QWORD *)(v0 + 144);
          sub_1BA5193C4(*(_QWORD *)(v0 + 96), v32 + *(int *)(v45 + 24), (uint64_t (*)(_QWORD))sub_1BA76D78C);
          *(_BYTE *)(v32 + *(int *)(v45 + 28)) = (v48 & 2) != 0;
          sub_1BA5193C4(v32, v31, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
          sub_1BA5193C4(v31, v30, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
          sub_1BA4C2DD8(v30, v33, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
          v34 = *(_QWORD *)(v0 + 48);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v34 = sub_1BB3905D8(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
          v36 = *(_QWORD *)(v34 + 16);
          v35 = *(_QWORD *)(v34 + 24);
          if (v36 >= v35 >> 1)
            v34 = sub_1BB3905D8(v35 > 1, v36 + 1, 1, v34);
          v37 = *(_QWORD *)(v0 + 160);
          v38 = *(_QWORD *)(v0 + 136);
          *(_QWORD *)(v34 + 16) = v36 + 1;
          sub_1BA5193C4(v38, v34+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);

          *(_QWORD *)(v0 + 48) = v34;
          sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
          swift_bridgeObjectRelease();
          v1 = v49;
          goto LABEL_4;
        }
      }

    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1BA6EA0D0(0, v1[2] + 1, 1, v1);
    v28 = v1[2];
    v27 = v1[3];
    if (v28 >= v27 >> 1)
      v1 = sub_1BA6EA0D0((_QWORD *)(v27 > 1), v28 + 1, 1, v1);
    v1[2] = v28 + 1;
    v4 = &v1[2 * v28];
    v4[4] = v6;
    v4[5] = v5;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 40) = v1;
LABEL_4:
    v3 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
LABEL_22:
  *(_QWORD *)(v0 + 168) = v1;
  if (v1[2])
  {
    v39 = *(_QWORD **)(v0 + 80);
    v40 = v39[23];
    v41 = v39[24];
    __swift_project_boxed_opaque_existential_1(v39 + 20, v40);
    v51 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))(**(int **)(v41 + 48) + *(_QWORD *)(v41 + 48));
    swift_bridgeObjectRetain();
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v42;
    *v42 = v0;
    v42[1] = sub_1BAA249B4;
    return v51(v1, v40, v41);
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v44);
  }
}

uint64_t sub_1BAA249B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)*v2;
  v4[23] = a1;
  v4[24] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    v5 = (_QWORD *)swift_task_alloc();
    v4[25] = v5;
    *v5 = v4;
    v5[1] = sub_1BAA24A58;
    v6 = v4[10];
    v5[7] = a1;
    v5[8] = v6;
  }
  return swift_task_switch();
}

uint64_t sub_1BAA24A58()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BAA24AB0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 184);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    sub_1BB38479C(v7);
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
  }
  swift_bridgeObjectRetain();
  v2 = sub_1BB873F30();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_16;
LABEL_3:
  v30 = MEMORY[0x1E0DEE9D8];
  result = sub_1BAC7A7B8(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = v30;
    v27 = v1 & 0xC000000000000001;
    v28 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 184) + 32;
    v29 = v2;
    do
    {
      if (v27)
      {
        v8 = (void *)MEMORY[0x1BCCE4630](v4, *(_QWORD *)(v0 + 184));
      }
      else
      {
        v8 = *(void **)(v26 + 8 * v4);
        swift_unknownObjectRetain();
      }
      v9 = *(uint64_t **)(v0 + 120);
      v10 = objc_msgSend(v8, sel_identifier, v26);
      v11 = sub_1BB8729A0();
      v13 = v12;

      *v9 = v11;
      *(_QWORD *)(v28 + 8) = v13;
      *(_QWORD *)(v28 + 16) = objc_msgSend(v8, sel_difficulty);
      v14 = objc_msgSend(v8, sel_publishDate);
      v15 = *(_QWORD *)(v0 + 88);
      if (v14)
      {
        v16 = v14;
        sub_1BB86C874();

        v17 = sub_1BB86C8B0();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
      }
      else
      {
        v18 = sub_1BB86C8B0();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
      }
      v20 = *(_QWORD *)(v0 + 120);
      v19 = *(_QWORD *)(v0 + 128);
      sub_1BA5193C4(*(_QWORD *)(v0 + 88), v20 + *(int *)(v6 + 24), (uint64_t (*)(_QWORD))sub_1BA76D78C);
      v21 = objc_msgSend(v8, sel_ignoreFromStatsAndStreaks);
      swift_unknownObjectRelease();
      *(_BYTE *)(v20 + *(int *)(v6 + 28)) = v21;
      sub_1BA5193C4(v20, v19, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
      v23 = *(_QWORD *)(v30 + 16);
      v22 = *(_QWORD *)(v30 + 24);
      if (v23 >= v22 >> 1)
        sub_1BAC7A7B8(v22 > 1, v23 + 1, 1);
      v24 = *(_QWORD *)(v0 + 128);
      ++v4;
      *(_QWORD *)(v30 + 16) = v23 + 1;
      sub_1BA5193C4(v24, v30+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v23, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
    }
    while (v29 != v4);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BAA24DC8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1;
  sub_1BA8EBDF8();
  if (swift_dynamicCast() && *(_BYTE *)(v0 + 208) == 5)
  {

    if (qword_1ED3C0B50 != -1)
      swift_once();
    v3 = sub_1BB86EFEC();
    __swift_project_value_buffer(v3, (uint64_t)qword_1ED476918);
    v4 = sub_1BB86EFC8();
    v5 = sub_1BB87330C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v14 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_beginAccess();
      v8 = swift_bridgeObjectRetain();
      v9 = MEMORY[0x1BCCE36DC](v8, MEMORY[0x1E0DEA968]);
      v11 = v10;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 64) = sub_1BA5D2E14(v9, v11, &v14);
      sub_1BB873A8C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BA493000, v4, v5, "PuzzleStatsService: Skipped deprecated puzzles [%s]", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCE5C38](v7, -1, -1);
      MEMORY[0x1BCCE5C38](v6, -1, -1);
    }

    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1BAA250DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1BAA250F4()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  unint64_t v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v2 = sub_1BB86EFEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED476918);
  swift_bridgeObjectRetain_n();
  v3 = sub_1BB86EFC8();
  v4 = sub_1BB87330C();
  v5 = os_log_type_enabled((os_log_t)v3, v4);
  v6 = *(_QWORD *)(v0 + 56);
  if (!v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v1 = 134217984;
  if ((unint64_t)v6 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v7;
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BA493000, (os_log_t)v3, v4, "PuzzleStatsService: adding puzzle info to %ld history items", v1, 0xCu);
    MEMORY[0x1BCCE5C38](v1, -1, -1);
LABEL_8:

    *(_QWORD *)(v0 + 72) = v6;
    v3 = *(_QWORD *)(v0 + 56);
    sub_1BA4C010C(*(_QWORD *)(v0 + 64) + 112, v0 + 16);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1BB873F30();
      *(_QWORD *)(v0 + 80) = v6;
      if (!v6)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
    else
    {
      v6 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 80) = v6;
      if (!v6)
        goto LABEL_16;
    }
    *(_QWORD *)(v0 + 88) = sub_1BB872F7C();
    if (v6 >= 1)
      break;
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  v8 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 96) = 0;
  if ((*(_QWORD *)(v0 + 72) & 0xC000000000000001) != 0)
    v9 = MEMORY[0x1BCCE4630](0, v8);
  else
    v9 = swift_unknownObjectRetain();
  *(_QWORD *)(v0 + 104) = v9;
  return swift_task_switch();
}

uint64_t sub_1BAA25358()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = sub_1BB872F70();
  sub_1BB872F28();
  return swift_task_switch();
}

uint64_t sub_1BAA253B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[13];
  swift_release();
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 96))(v1, v2, v3);
  return swift_task_switch();
}

uint64_t sub_1BAA25434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  swift_unknownObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    ++*(_QWORD *)(v0 + 96);
    if ((*(_QWORD *)(v0 + 72) & 0xC000000000000001) != 0)
      v4 = MEMORY[0x1BCCE4630]();
    else
      v4 = swift_unknownObjectRetain();
    *(_QWORD *)(v0 + 104) = v4;
    return swift_task_switch();
  }
}

uint64_t sub_1BAA254DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v3 = objc_msgSend(a1, sel_identifier);
  v4 = sub_1BB8729A0();
  v6 = v5;

  sub_1BAA23B44(v4, v6, &v21);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = 0;
    v1 = 0;
    result = v21;
    v9 = v21 + 64;
    v10 = 1 << *(_BYTE *)(v21 + 32);
    v11 = -1;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    v12 = v11 & *(_QWORD *)(v21 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      if (v12)
      {
        v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v18 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_30;
        if (v18 >= v13)
        {
LABEL_27:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v1;
        }
        v19 = *(_QWORD *)(v9 + 8 * v18);
        ++v7;
        if (!v19)
        {
          v7 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_27;
          v19 = *(_QWORD *)(v9 + 8 * v7);
          if (!v19)
          {
            v7 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_27;
            v19 = *(_QWORD *)(v9 + 8 * v7);
            if (!v19)
            {
              v7 = v18 + 3;
              if (v18 + 3 >= v13)
                goto LABEL_27;
              v19 = *(_QWORD *)(v9 + 8 * v7);
              if (!v19)
              {
                v7 = v18 + 4;
                if (v18 + 4 >= v13)
                  goto LABEL_27;
                v19 = *(_QWORD *)(v9 + 8 * v7);
                if (!v19)
                {
                  v20 = v18 + 5;
                  if (v20 >= v13)
                    goto LABEL_27;
                  v19 = *(_QWORD *)(v9 + 8 * v20);
                  if (!v19)
                  {
                    while (1)
                    {
                      v7 = v20 + 1;
                      if (__OFADD__(v20, 1))
                        goto LABEL_31;
                      if (v7 >= v13)
                        goto LABEL_27;
                      v19 = *(_QWORD *)(v9 + 8 * v7);
                      ++v20;
                      if (v19)
                        goto LABEL_26;
                    }
                  }
                  v7 = v20;
                }
              }
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v15 = __clz(__rbit64(v19)) + (v7 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v15) + 16);
      v17 = __OFADD__(v1, v16);
      v1 += v16;
    }
    while (!v17);
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  return result;
}

uint64_t sub_1BAA256DC(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = objc_msgSend(a1, sel_identifier);
  v3 = sub_1BB8729A0();
  v5 = v4;

  sub_1BAA23B44(v3, v5, &v34);
  if (v1)
  {
    *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    return result;
  }
  swift_bridgeObjectRelease();
  v7 = 0;
  v8 = 0;
  result = v35;
  v9 = v34 + 64;
  v10 = 1 << *(_BYTE *)(v34 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v34 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    if (v18 >= v13)
      break;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v13)
        break;
      v19 = *(_QWORD *)(v9 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v13)
          break;
        v19 = *(_QWORD *)(v9 + 8 * v7);
        if (!v19)
        {
          v7 = v18 + 3;
          if (v18 + 3 >= v13)
            break;
          v19 = *(_QWORD *)(v9 + 8 * v7);
          if (!v19)
          {
            v7 = v18 + 4;
            if (v18 + 4 >= v13)
              break;
            v19 = *(_QWORD *)(v9 + 8 * v7);
            if (!v19)
            {
              v20 = v18 + 5;
              if (v20 >= v13)
                break;
              v19 = *(_QWORD *)(v9 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  v7 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_59;
                  if (v7 >= v13)
                    goto LABEL_27;
                  v19 = *(_QWORD *)(v9 + 8 * v7);
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v7 = v20;
            }
          }
        }
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_7:
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v15) + 16);
    v17 = __OFADD__(v8, v16);
    v8 += v16;
    if (v17)
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
  }
LABEL_27:
  v21 = 0;
  v22 = 0;
  v23 = v35 + 64;
  v24 = 1 << *(_BYTE *)(v35 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v35 + 64);
  v27 = (unint64_t)(v24 + 63) >> 6;
  while (v26)
  {
    v28 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v29 = v28 | (v21 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v29) + 16);
    v17 = __OFADD__(v22, v30);
    v22 += v30;
    if (v17)
      goto LABEL_56;
  }
  v31 = v21 + 1;
  if (__OFADD__(v21, 1))
    goto LABEL_58;
  if (v31 >= v27)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v22 < 1)
      *(double *)&result = 0.0;
    else
      *(double *)&result = (double)v8 / (double)v22;
    return result;
  }
  v32 = *(_QWORD *)(v23 + 8 * v31);
  ++v21;
  if (v32)
    goto LABEL_50;
  v21 = v31 + 1;
  if (v31 + 1 >= v27)
    goto LABEL_51;
  v32 = *(_QWORD *)(v23 + 8 * v21);
  if (v32)
    goto LABEL_50;
  v21 = v31 + 2;
  if (v31 + 2 >= v27)
    goto LABEL_51;
  v32 = *(_QWORD *)(v23 + 8 * v21);
  if (v32)
    goto LABEL_50;
  v21 = v31 + 3;
  if (v31 + 3 >= v27)
    goto LABEL_51;
  v32 = *(_QWORD *)(v23 + 8 * v21);
  if (v32)
    goto LABEL_50;
  v21 = v31 + 4;
  if (v31 + 4 >= v27)
    goto LABEL_51;
  v32 = *(_QWORD *)(v23 + 8 * v21);
  if (v32)
  {
LABEL_50:
    v26 = (v32 - 1) & v32;
    v29 = __clz(__rbit64(v32)) + (v21 << 6);
    goto LABEL_31;
  }
  v33 = v31 + 5;
  if (v33 >= v27)
    goto LABEL_51;
  v32 = *(_QWORD *)(v23 + 8 * v33);
  if (v32)
  {
    v21 = v33;
    goto LABEL_50;
  }
  while (1)
  {
    v21 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v21 >= v27)
      goto LABEL_51;
    v32 = *(_QWORD *)(v23 + 8 * v21);
    ++v33;
    if (v32)
      goto LABEL_50;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t sub_1BAA25A30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[5];
  uint64_t v55;

  v50 = a2;
  sub_1BAA28D4C(0);
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v41 - v6;
  v8 = type metadata accessor for PuzzleStreak();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v41 - v14;
  v16 = objc_msgSend(a1, sel_identifier, v13);
  v17 = sub_1BB8729A0();
  v19 = v18;

  v20 = v53;
  sub_1BAA23B44(v17, v19, v54);
  if (v20)
    return swift_bridgeObjectRelease();
  v42 = v11;
  v21 = (uint64_t)v7;
  v51 = v15;
  v52 = v9;
  v53 = v8;
  swift_bridgeObjectRelease();
  v45 = v54[2];
  v46 = v54[1];
  v22 = v55;
  v43 = v54[4];
  v44 = v54[3];
  v23 = *(_QWORD *)(v55 + 16);
  if (!v23)
  {
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
    v25 = v21;
    v31 = v21;
    v28 = v53;
    v26(v31, 1, 1, v53);
    v30 = v50;
    goto LABEL_6;
  }
  v41[1] = v54[0];
  v24 = (_QWORD *)v52;
  v48 = v55 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
  v25 = v21;
  sub_1BA4C2DD8(v48, v21, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  v26 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24[7];
  v27 = v21;
  v28 = v53;
  v26(v27, 0, 1, v53);
  v29 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24[6];
  if (v29(v25, 1, v28) == 1)
  {
    v30 = v50;
LABEL_6:
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v25, (uint64_t (*)(_QWORD))sub_1BAA28D4C);
    v26(v30, 1, 1, v28);
LABEL_10:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v49 = v26;
  v41[0] = 0;
  sub_1BA5193C4(v25, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  result = swift_bridgeObjectRetain();
  v33 = (uint64_t)v42;
  v34 = (uint64_t)v47;
  if (v23 == 1)
  {
LABEL_8:
    v49(v34, 1, 1, v28);
LABEL_9:
    sub_1BA4A2E80(v34, (uint64_t (*)(_QWORD))sub_1BAA28D4C);
    v35 = v50;
    sub_1BA5193C4((uint64_t)v51, v50, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    v49(v35, 0, 1, v28);
    goto LABEL_10;
  }
  v36 = 1;
  while (v36 < *(_QWORD *)(v22 + 16))
  {
    sub_1BA4C2DD8(v48 + v24[9] * v36, v34, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    v49(v34, 0, 1, v28);
    if (v29(v34, 1, v28) == 1)
      goto LABEL_9;
    sub_1BA5193C4(v34, v33, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    v37 = (uint64_t)v51;
    sub_1BB86BEB4();
    v39 = v38;
    sub_1BB86BEB4();
    if (v39 >= v40)
    {
      result = sub_1BA4A2E80(v33, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    }
    else
    {
      sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      result = sub_1BA5193C4(v33, v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    }
    ++v36;
    v24 = (_QWORD *)v52;
    v28 = v53;
    if (v23 == v36)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BAA25E20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void *v56;
  uint64_t (*v57)(_QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  unsigned int v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD v93[5];
  uint64_t v94;
  uint64_t v95;

  v73 = a2;
  v95 = sub_1BB86C8B0();
  v89 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v92 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v88 = (char *)&v61 - v6;
  MEMORY[0x1E0C80A78](v7);
  v91 = (char *)&v61 - v8;
  MEMORY[0x1E0C80A78](v9);
  v87 = (char *)&v61 - v10;
  v11 = sub_1BB86CAD8();
  v85 = *(_QWORD *)(v11 - 8);
  v86 = v11;
  MEMORY[0x1E0C80A78](v11);
  v84 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BB86C0E8();
  v82 = *(_QWORD *)(v13 - 8);
  v83 = v13;
  MEMORY[0x1E0C80A78](v13);
  v81 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA28D4C(0);
  MEMORY[0x1E0C80A78](v15);
  v90 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v61 - v18;
  v20 = type metadata accessor for PuzzleStreak();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v61 - v26;
  v72 = a1;
  v28 = objc_msgSend(a1, sel_identifier, v25);
  v29 = sub_1BB8729A0();
  v31 = v30;

  v32 = v80;
  sub_1BAA23B44(v29, v31, v93);
  if (v32)
    return swift_bridgeObjectRelease();
  v79 = v23;
  v80 = v21;
  v62 = v27;
  v66 = v19;
  v67 = 0;
  v63 = v2;
  swift_bridgeObjectRelease();
  v65 = v93[0];
  v64 = v93[1];
  v71 = v93[2];
  v70 = v93[3];
  v69 = v93[4];
  v34 = *(_QWORD *)(v94 + 16);
  v68 = v94;
  if (v34)
  {
    v35 = v80;
    v36 = v94 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v74 = *(_QWORD *)(v80 + 72);
    v76 = *MEMORY[0x1E0CB1140];
    swift_bridgeObjectRetain();
    v75 = xmmword_1BB87CE70;
    v37 = (uint64_t)v90;
    v38 = (uint64_t)v79;
    v77 = v20;
    while (1)
    {
      sub_1BA4C2DD8(v36, v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
      v78(v37, 0, 1, v20);
      v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      if (v39(v37, 1, v20) == 1)
        break;
      sub_1BA5193C4(v37, v38, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v40 = v84;
      sub_1BB86CA90();
      sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9C60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v41 = sub_1BB86CAC0();
      v42 = *(_QWORD *)(v41 - 8);
      v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = v75;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v42 + 104))(v44 + v43, v76, v41);
      sub_1BA861CB8(v44);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v45 = v87;
      sub_1BB86BE78();
      sub_1BB86C88C();
      v46 = *(void (**)(char *, uint64_t))(v89 + 8);
      v46(v45, v95);
      v47 = v88;
      sub_1BB86C880();
      sub_1BB86C88C();
      v46(v47, v95);
      v48 = v81;
      sub_1BB86CA30();
      v49 = v95;
      swift_bridgeObjectRelease();
      v46(v92, v49);
      v46(v91, v49);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v40, v86);
      v50 = sub_1BB86C094();
      if ((v51 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v83);
        v20 = v77;
      }
      else
      {
        v52 = v50;
        (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v83);
        v20 = v77;
        if (v52 <= 24)
        {
          v53 = (uint64_t)v66;
          sub_1BA5193C4((uint64_t)v79, (uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v54 = v78;
          v78(v53, 0, 1, v20);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v55 = v73;
          v56 = v72;
          goto LABEL_15;
        }
      }
      v38 = (uint64_t)v79;
      sub_1BA4A2E80((uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v36 += v74;
      --v34;
      v35 = v80;
      v37 = (uint64_t)v90;
      if (!v34)
        goto LABEL_12;
    }
    v55 = v73;
    v56 = v72;
    v53 = (uint64_t)v66;
    v54 = v78;
  }
  else
  {
    v35 = v80;
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
    swift_bridgeObjectRetain();
    v37 = (uint64_t)v90;
LABEL_12:
    v54 = v78;
    v78(v37, 1, 1, v20);
    v55 = v73;
    v56 = v72;
    v53 = (uint64_t)v66;
  }
  v54(v53, 1, 1, v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
LABEL_15:
  if (v39(v53, 1, v20) == 1)
  {
    v57 = (uint64_t (*)(_QWORD))sub_1BAA28D4C;
    v58 = v53;
  }
  else
  {
    v59 = (uint64_t)v62;
    sub_1BA5193C4(v53, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    if ((sub_1BAA265B4(v56) & 1) == 0)
    {
      sub_1BA5193C4(v59, v55, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v60 = 0;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54)(v55, v60, 1, v20);
    }
    v57 = (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak;
    v58 = v59;
  }
  sub_1BA4A2E80(v58, v57);
  v60 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54)(v55, v60, 1, v20);
}

id sub_1BAA265B4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id result;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  result = objc_msgSend(a1, sel_latestPuzzleIDs);
  if (result)
  {
    v4 = result;
    v5 = (_QWORD *)sub_1BB872DB4();

    if (v5[2])
    {
      v7 = v5[4];
      v6 = v5[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = v2 + 14;
      v9 = v2[17];
      v10 = v2[18];
      __swift_project_boxed_opaque_existential_1(v2 + 14, v9);
      v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 48))(v7, v6, v9);
      v12 = v11;
      if (v11 && (v13 = objc_msgSend(v11, sel_usedReveal)) != 0)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, sel_BOOLValue);

      }
      else
      {
        v15 = 0;
      }
      v17 = v2[17];
      v16 = v2[18];
      __swift_project_boxed_opaque_existential_1(v8, v17);
      LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8) + 32))(v7, v6, v17);
      swift_bridgeObjectRelease();

      return (id)(v15 & ~(_DWORD)v16);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BAA266F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = objc_msgSend(a1, sel_identifier);
  v5 = sub_1BB8729A0();
  v7 = v6;

  sub_1BAA23B44(v5, v7, &v25);
  if (v2)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v26;
  v10 = *(_QWORD *)(v26 + 16);
  v27 = v25;
  if (v10)
  {
    v11 = sub_1BB4CF560(10);
    if ((v12 & 1) != 0)
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
    else
      v13 = 0;
    v24 = v13;
    v19 = v12 ^ 1;
    v20 = sub_1BB4CF560(20);
    if ((v21 & 1) != 0)
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    else
      v15 = 0;
    v18 = v21 ^ 1;
    v22 = sub_1BB4CF560(30);
    if ((v23 & 1) != 0)
    {
      v17 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v22);
    }
    else
    {
      v14 = 0;
      v17 = 1;
    }
    v16 = v24;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v18 = 1;
    v19 = 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v19 & 1;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v18 & 1;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v17;
  return result;
}

uint64_t sub_1BAA26898@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = objc_msgSend(a1, sel_identifier);
  v5 = sub_1BB8729A0();
  v7 = v6;

  sub_1BAA23B44(v5, v7, &v25);
  if (v2)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v26;
  v10 = *(_QWORD *)(v26 + 16);
  v27 = v25;
  if (v10)
  {
    v11 = sub_1BB4CF560(10);
    if ((v12 & 1) != 0)
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
    else
      v13 = 0;
    v24 = v13;
    v19 = v12 ^ 1;
    v20 = sub_1BB4CF560(20);
    if ((v21 & 1) != 0)
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    else
      v15 = 0;
    v18 = v21 ^ 1;
    v22 = sub_1BB4CF560(30);
    if ((v23 & 1) != 0)
    {
      v17 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v22);
    }
    else
    {
      v14 = 0;
      v17 = 1;
    }
    v16 = v24;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v18 = 1;
    v19 = 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v19 & 1;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v18 & 1;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v17;
  return result;
}

uint64_t sub_1BAA26A38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = objc_msgSend(a1, sel_identifier);
  v5 = sub_1BB8729A0();
  v7 = v6;

  sub_1BAA23B44(v5, v7, &v25);
  if (v2)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v26;
  v10 = *(_QWORD *)(v26 + 16);
  v27 = v25;
  if (v10)
  {
    v11 = sub_1BB4CF560(10);
    if ((v12 & 1) != 0)
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
    else
      v13 = 0;
    v24 = v13;
    v19 = v12 ^ 1;
    v20 = sub_1BB4CF560(20);
    if ((v21 & 1) != 0)
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    else
      v15 = 0;
    v18 = v21 ^ 1;
    v22 = sub_1BB4CF560(30);
    if ((v23 & 1) != 0)
    {
      v17 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v22);
    }
    else
    {
      v14 = 0;
      v17 = 1;
    }
    v16 = v24;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v18 = 1;
    v19 = 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v19 & 1;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v18 & 1;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v17;
  return result;
}

uint64_t sub_1BAA26C08()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1BAA26C64()
{
  sub_1BAA26C08();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1BAA26C7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BAA26C88(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1BA8195A4;
  return sub_1BAA20C58(a1, a2, a3);
}

uint64_t sub_1BAA26CF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BAA26D44;
  return sub_1BAA223F0(a1);
}

uint64_t sub_1BAA26D44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1BAA26D94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BAA26DE4;
  return sub_1BAA232AC(a1);
}

uint64_t sub_1BAA26DE4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    v5 = 0;
  else
    v5 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_1BAA26E40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BA8195A4;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1BAA26EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BA4B0D38;
  return sub_1BAA236A8(a1, a2);
}

uint64_t sub_1BAA26F04()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BA8195A4;
  return sub_1BA4B8F90();
}

void sub_1BAA26F50(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1BA81D6FC(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BB86C8B0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v26 - v17;
  if ((a2 & 1) != 0)
  {
    v19 = objc_msgSend(a1, sel_puzzleStatsStartDate, v16);
    if (v19)
    {
      v20 = v19;
      sub_1BB86C874();

      v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v21(v10, v14, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
      {
        v21(v18, v10, v11);
        v22 = sub_1BB872F94();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
        v23 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        v24 = (v13 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        v25 = swift_allocObject();
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        v21((char *)(v25 + v23), v14, v11);
        *(_QWORD *)(v25 + v24) = v2;
        swift_retain();
        sub_1BB1B6AEC((uint64_t)v7, (uint64_t)&unk_1EF2AD870, v25);
        swift_release();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    }
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  }
}

uint64_t sub_1BAA271B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v6 = sub_1BB86C8B0();
  v5[5] = v6;
  v5[6] = *(_QWORD *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BAA27214()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = v0[3];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[5];
  v5 = sub_1BB86EFEC();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED476918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = sub_1BB86EFC8();
  v7 = sub_1BB87330C();
  v8 = os_log_type_enabled(v6, v7);
  v10 = v0[6];
  v9 = v0[7];
  v11 = v0[5];
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v12 = 136315138;
    sub_1BA50AD30((unint64_t *)&qword_1ED3B0530, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v13 = sub_1BB87420C();
    v0[2] = sub_1BA5D2E14(v13, v14, &v18);
    sub_1BB873A8C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1BA493000, v6, v7, "PuzzleStatsService: Received new starting date [%s]. Updating stats...", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v17, -1, -1);
    MEMORY[0x1BCCE5C38](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(v0[7], v0[5]);
  }

  v15 = (_QWORD *)swift_task_alloc();
  v0[8] = v15;
  *v15 = v0;
  v15[1] = sub_1BAA27430;
  return sub_1BA4B8F90();
}

uint64_t sub_1BAA27430()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *assignWithCopy for PuzzleStatsService.UpdatingState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for PuzzleStatsService.UpdatingState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PuzzleStatsService.UpdatingState()
{
  return &type metadata for PuzzleStatsService.UpdatingState;
}

ValueMetadata *type metadata accessor for PuzzleTypeStats.CodingKeys()
{
  return &type metadata for PuzzleTypeStats.CodingKeys;
}

unint64_t sub_1BAA27558()
{
  unint64_t result;

  result = qword_1EF2AD750;
  if (!qword_1EF2AD750)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89125C, &type metadata for PuzzleTypeStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD750);
  }
  return result;
}

uint64_t sub_1BAA2759C(_QWORD **a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for PuzzleLeaderboardEntry() - 8);
  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (_QWORD *)sub_1BACAB7F8(v5);
  v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = a2(v8);
  *a1 = v5;
  return result;
}

void sub_1BAA27628(uint64_t *a1)
{
  sub_1BAA2763C(a1);
}

void sub_1BAA2763C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v2 = v1;
  v141 = type metadata accessor for PuzzleLeaderboardEntry();
  v4 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v132 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v142 = (uint64_t)&v126 - v7;
  MEMORY[0x1E0C80A78](v8);
  v138 = (uint64_t)&v126 - v9;
  MEMORY[0x1E0C80A78](v10);
  v137 = (uint64_t)&v126 - v11;
  v12 = a1[1];
  v13 = sub_1BB8741F4();
  if (v13 >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      sub_1BAA28058(0, v12, 1, a1);
    return;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v128 = v13;
  if (v12 < 2)
  {
    v19 = (char *)MEMORY[0x1E0DEE9D8];
    v134 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v127 = MEMORY[0x1E0DEE9D8];
    if (v12 != 1)
    {
      v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_104:
      v119 = v19;
      if (v21 >= 2)
      {
        v120 = *a1;
        do
        {
          v121 = v21 - 2;
          if (v21 < 2)
            goto LABEL_133;
          if (!v120)
            goto LABEL_145;
          v122 = *(_QWORD *)&v119[16 * v121 + 32];
          v123 = *(_QWORD *)&v119[16 * v21 + 24];
          sub_1BAA282A0(v120 + *(_QWORD *)(v4 + 72) * v122, v120 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v119[16 * v21 + 16], v120 + *(_QWORD *)(v4 + 72) * v123, v134);
          if (v2)
            break;
          if (v123 < v122)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v119 = sub_1BACAB464((uint64_t)v119);
          if (v121 >= *((_QWORD *)v119 + 2))
            goto LABEL_135;
          v124 = &v119[16 * v121 + 32];
          *(_QWORD *)v124 = v122;
          *((_QWORD *)v124 + 1) = v123;
          v125 = *((_QWORD *)v119 + 2);
          if (v21 > v125)
            goto LABEL_136;
          memmove(&v119[16 * v21 + 16], &v119[16 * v21 + 32], 16 * (v125 - v21));
          *((_QWORD *)v119 + 2) = v125 - 1;
          v21 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v127 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v15 = v12;
    v16 = v14 >> 1;
    v17 = sub_1BB872E74();
    *(_QWORD *)(v17 + 16) = v16;
    v12 = v15;
    v18 = *(unsigned __int8 *)(v4 + 80);
    v127 = v17;
    v134 = v17 + ((v18 + 32) & ~v18);
  }
  v20 = 0;
  v19 = (char *)MEMORY[0x1E0DEE9D8];
  v140 = a1;
  v135 = v4;
  while (1)
  {
    v22 = v4;
    v23 = v20;
    v24 = v20 + 1;
    v133 = v20;
    v144 = v12;
    if (v20 + 1 >= v12)
    {
      v31 = v20 + 1;
      v40 = v20;
    }
    else
    {
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *a1;
      v27 = v137;
      sub_1BA4C2DD8(*a1 + v25 * v24, v137, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      v28 = v138;
      sub_1BA4C2DD8(v26 + v25 * v23, v138, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      v29 = *(int *)(v141 + 28);
      v139 = *(_QWORD *)(v27 + v29);
      v136 = *(_QWORD *)(v28 + v29);
      sub_1BA4A2E80(v28, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      sub_1BA4A2E80(v27, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      v30 = v26;
      v31 = v23 + 2;
      v131 = v30;
      v143 = v25;
      if (v23 + 2 >= v144)
      {
        v22 = v135;
      }
      else
      {
        v129 = v19;
        v130 = v2;
        v32 = v25 * v24;
        v33 = v30;
        v34 = v25 * v31;
        while (1)
        {
          v35 = v31;
          v36 = v137;
          v37 = v139 < v136;
          sub_1BA4C2DD8(v33 + v34, v137, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v38 = v138;
          sub_1BA4C2DD8(v33 + v32, v138, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v39 = *(_QWORD *)(v36 + *(int *)(v141 + 28)) >= *(_QWORD *)(v38 + *(int *)(v141 + 28));
          sub_1BA4A2E80(v38, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          sub_1BA4A2E80(v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          if (v37 == v39)
            break;
          v31 = v35 + 1;
          v33 += v143;
          if (v144 == v35 + 1)
          {
            v31 = v144;
            v22 = v135;
            a1 = v140;
            v19 = v129;
            goto LABEL_24;
          }
        }
        v22 = v135;
        a1 = v140;
        v19 = v129;
        v31 = v35;
LABEL_24:
        v2 = v130;
      }
      v40 = v133;
      if (v139 < v136)
      {
        if (v31 < v133)
          goto LABEL_139;
        if (v133 < v31)
        {
          v129 = v19;
          v130 = v2;
          v41 = 0;
          v42 = v143;
          v43 = v143 * (v31 - 1);
          v44 = v31 * v143;
          v45 = v133;
          v46 = v133 * v143;
          do
          {
            if (v45 != v31 + v41 - 1)
            {
              v47 = v131;
              if (!v131)
                goto LABEL_144;
              v48 = v131 + v46;
              v49 = v131 + v43;
              sub_1BA5193C4(v131 + v46, v132, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
              if (v46 < v43 || v48 >= v47 + v44)
              {
                swift_arrayInitWithTakeFrontToBack();
                v42 = v143;
              }
              else
              {
                v42 = v143;
                if (v46 != v43)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_1BA5193C4(v132, v49, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
            }
            ++v45;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v46 += v42;
          }
          while (v45 < v31 + v41);
          v19 = v129;
          v2 = v130;
          a1 = v140;
          v22 = v135;
          v40 = v133;
        }
      }
    }
    if (v31 < v144)
    {
      if (__OFSUB__(v31, v40))
        goto LABEL_137;
      if (v31 - v40 < v128)
        break;
    }
LABEL_56:
    if (v31 < v40)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_1BACAA368(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v68 = *((_QWORD *)v19 + 2);
    v67 = *((_QWORD *)v19 + 3);
    v21 = v68 + 1;
    if (v68 >= v67 >> 1)
      v19 = sub_1BACAA368((char *)(v67 > 1), v68 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v21;
    v69 = v19 + 32;
    v70 = &v19[16 * v68 + 32];
    v71 = v139;
    *(_QWORD *)v70 = v40;
    *((_QWORD *)v70 + 1) = v71;
    if (v68)
    {
      while (1)
      {
        v72 = v21 - 1;
        if (v21 >= 4)
        {
          v77 = &v69[16 * v21];
          v78 = *((_QWORD *)v77 - 8);
          v79 = *((_QWORD *)v77 - 7);
          v83 = __OFSUB__(v79, v78);
          v80 = v79 - v78;
          if (v83)
            goto LABEL_121;
          v82 = *((_QWORD *)v77 - 6);
          v81 = *((_QWORD *)v77 - 5);
          v83 = __OFSUB__(v81, v82);
          v75 = v81 - v82;
          v76 = v83;
          if (v83)
            goto LABEL_122;
          v84 = v21 - 2;
          v85 = &v69[16 * v21 - 32];
          v87 = *(_QWORD *)v85;
          v86 = *((_QWORD *)v85 + 1);
          v83 = __OFSUB__(v86, v87);
          v88 = v86 - v87;
          if (v83)
            goto LABEL_124;
          v83 = __OFADD__(v75, v88);
          v89 = v75 + v88;
          if (v83)
            goto LABEL_127;
          if (v89 >= v80)
          {
            v107 = &v69[16 * v72];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v83 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            if (v83)
              goto LABEL_131;
            v100 = v75 < v110;
            goto LABEL_93;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v101 = *((_QWORD *)v19 + 4);
            v102 = *((_QWORD *)v19 + 5);
            v83 = __OFSUB__(v102, v101);
            v94 = v102 - v101;
            v95 = v83;
            goto LABEL_87;
          }
          v74 = *((_QWORD *)v19 + 4);
          v73 = *((_QWORD *)v19 + 5);
          v83 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          v76 = v83;
        }
        if ((v76 & 1) != 0)
          goto LABEL_123;
        v84 = v21 - 2;
        v90 = &v69[16 * v21 - 32];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v93 = __OFSUB__(v91, v92);
        v94 = v91 - v92;
        v95 = v93;
        if (v93)
          goto LABEL_126;
        v96 = &v69[16 * v72];
        v98 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        v83 = __OFSUB__(v97, v98);
        v99 = v97 - v98;
        if (v83)
          goto LABEL_129;
        if (__OFADD__(v94, v99))
          goto LABEL_130;
        if (v94 + v99 >= v75)
        {
          v100 = v75 < v99;
LABEL_93:
          if (v100)
            v72 = v84;
          goto LABEL_95;
        }
LABEL_87:
        if ((v95 & 1) != 0)
          goto LABEL_125;
        v103 = &v69[16 * v72];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v83 = __OFSUB__(v104, v105);
        v106 = v104 - v105;
        if (v83)
          goto LABEL_128;
        if (v106 < v94)
          goto LABEL_14;
LABEL_95:
        v111 = v72 - 1;
        if (v72 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v112 = *a1;
        if (!*a1)
          goto LABEL_143;
        v113 = v19;
        v114 = &v69[16 * v111];
        v115 = *(_QWORD *)v114;
        v116 = &v69[16 * v72];
        v117 = *((_QWORD *)v116 + 1);
        sub_1BAA282A0(v112 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v114, v112 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v116, v112 + *(_QWORD *)(v135 + 72) * v117, v134);
        if (v2)
          goto LABEL_115;
        if (v117 < v115)
          goto LABEL_118;
        if (v72 > *((_QWORD *)v113 + 2))
          goto LABEL_119;
        *(_QWORD *)v114 = v115;
        *(_QWORD *)&v69[16 * v111 + 8] = v117;
        v118 = *((_QWORD *)v113 + 2);
        if (v72 >= v118)
          goto LABEL_120;
        v19 = v113;
        v21 = v118 - 1;
        memmove(&v69[16 * v72], v116 + 16, 16 * (v118 - 1 - v72));
        *((_QWORD *)v113 + 2) = v118 - 1;
        a1 = v140;
        if (v118 <= 2)
          goto LABEL_14;
      }
    }
    v21 = 1;
LABEL_14:
    v12 = a1[1];
    v20 = v139;
    v4 = v135;
    if (v139 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v40, v128))
    goto LABEL_140;
  v50 = v144;
  if (v40 + v128 < v144)
    v50 = v40 + v128;
  if (v50 >= v40)
  {
    if (v31 != v50)
    {
      v129 = v19;
      v130 = v2;
      v51 = *(_QWORD *)(v22 + 72);
      v144 = v51 * (v31 - 1);
      v136 = v51;
      v52 = v31 * v51;
      v131 = v50;
      do
      {
        v54 = 0;
        v55 = v40;
        v139 = v31;
        while (1)
        {
          v56 = v140;
          v57 = *v140;
          v58 = v52;
          v59 = v52 + v54 + *v140;
          v60 = v137;
          sub_1BA4C2DD8(v59, v137, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v61 = v138;
          sub_1BA4C2DD8(v144 + v54 + v57, v138, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v62 = *(int *)(v141 + 28);
          v143 = *(_QWORD *)(v60 + v62);
          v63 = *(_QWORD *)(v61 + v62);
          sub_1BA4A2E80(v61, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          sub_1BA4A2E80(v60, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          if (v143 >= v63)
            break;
          v64 = *v56;
          if (!*v56)
            goto LABEL_142;
          v52 = v58;
          v65 = v64 + v144 + v54;
          sub_1BA5193C4(v64 + v58 + v54, v142, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          swift_arrayInitWithTakeFrontToBack();
          sub_1BA5193C4(v142, v65, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v54 -= v136;
          ++v55;
          v53 = v139;
          if (v139 == v55)
            goto LABEL_49;
        }
        v53 = v139;
        v52 = v58;
LABEL_49:
        v31 = v53 + 1;
        v144 += v136;
        v52 += v136;
        v40 = v133;
      }
      while (v31 != v131);
      v31 = v131;
      v19 = v129;
      v2 = v130;
      a1 = v140;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  sub_1BB873EA0();
  __break(1u);
}

void sub_1BAA28058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  v36 = a1;
  v42 = type metadata accessor for PuzzleLeaderboardEntry();
  MEMORY[0x1E0C80A78](v42);
  v43 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v38 = (uint64_t)&v34 - v9;
  MEMORY[0x1E0C80A78](v10);
  v37 = (uint64_t)&v34 - v12;
  v41 = a3;
  v35 = a2;
  if (a3 != a2)
  {
    v13 = *(_QWORD *)(v11 + 72);
    v14 = v13 * (v41 - 1);
    v39 = v13;
    v15 = v13 * v41;
    v16 = type metadata accessor for PuzzleLeaderboardEntry;
    v45 = a4;
LABEL_5:
    v17 = 0;
    v18 = v36;
    v40 = v15;
    while (1)
    {
      v20 = *v45;
      v21 = v15 + v17 + *v45;
      v22 = v37;
      sub_1BA4C2DD8(v21, v37, (uint64_t (*)(_QWORD))v16);
      v23 = v14 + v17 + v20;
      v24 = v14;
      v25 = v38;
      sub_1BA4C2DD8(v23, v38, (uint64_t (*)(_QWORD))v16);
      v26 = *(int *)(v42 + 28);
      v44 = *(_QWORD *)(v22 + v26);
      v27 = v16;
      v28 = *(_QWORD *)(v25 + v26);
      v29 = v25;
      v14 = v24;
      sub_1BA4A2E80(v29, (uint64_t (*)(_QWORD))v27);
      v30 = v22;
      v15 = v40;
      sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))v27);
      v31 = v44 < v28;
      v16 = v27;
      if (!v31)
      {
LABEL_4:
        v14 = v24 + v39;
        v15 += v39;
        if (++v41 == v35)
          return;
        goto LABEL_5;
      }
      v32 = *v45;
      if (!*v45)
        break;
      v33 = v32 + v24 + v17;
      sub_1BA5193C4(v32 + v15 + v17, v43, (uint64_t (*)(_QWORD))v27);
      swift_arrayInitWithTakeFrontToBack();
      v19 = v33;
      v16 = v27;
      sub_1BA5193C4(v43, v19, (uint64_t (*)(_QWORD))v27);
      v17 -= v39;
      if (v41 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1BAA282A0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = type metadata accessor for PuzzleLeaderboardEntry();
  MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - v11;
  v51 = *(_QWORD *)(v13 + 72);
  if (!v51)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1)
    goto LABEL_70;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1)
    goto LABEL_71;
  v15 = (uint64_t)(a2 - a1) / v51;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v51;
  if (v15 >= v14 / v51)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v51;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v32 = -v51;
        v48 = a4;
        v49 = a1;
        v47 = v8;
        do
        {
          v51 = a3 + v32;
          sub_1BA4C2DD8(v30 + v32, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v33 = a2 + v32;
          v34 = (uint64_t)v12;
          v35 = v50;
          sub_1BA4C2DD8(a2 + v32, v50, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          v36 = *(int *)(v8 + 28);
          v37 = v32;
          v38 = *(_QWORD *)(v34 + v36);
          v39 = *(_QWORD *)(v35 + v36);
          v40 = v35;
          v12 = (char *)v34;
          sub_1BA4A2E80(v40, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          sub_1BA4A2E80(v34, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
          if (v38 >= v39)
          {
            v43 = v52;
            v52 += v37;
            v44 = a3 < v43 || v51 >= v43;
            v32 = v37;
            if (v44)
            {
              v41 = v51;
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v33 = a2;
              v42 = v48;
            }
            else
            {
              v41 = v51;
              v8 = v47;
              v42 = v48;
              if (a3 != v43)
                swift_arrayInitWithTakeBackToFront();
              v33 = a2;
            }
          }
          else
          {
            v32 = v37;
            v41 = v51;
            if (a3 < a2 || v51 >= a2)
            {
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v42 = v48;
            }
            else
            {
              v8 = v47;
              v42 = v48;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v54 += v32;
          }
          v30 = v52;
          if (v52 <= v42)
            break;
          a2 = v33;
          a3 = v41;
        }
        while (v33 > v49);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v51;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v49 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        v20 = a3;
        sub_1BA4C2DD8(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        v21 = v50;
        sub_1BA4C2DD8(a4, v50, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        v22 = *(int *)(v8 + 28);
        v23 = *(_QWORD *)&v12[v22];
        v24 = *(_QWORD *)(v21 + v22);
        sub_1BA4A2E80(v21, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
        v25 = v54;
        if (v23 >= v24)
        {
          v28 = v53 + v51;
          if (v54 < v53 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 != v53)
              swift_arrayInitWithTakeBackToFront();
          }
          v53 = v28;
          v26 = a2;
        }
        else
        {
          v26 = a2 + v51;
          if (v54 < a2 || v54 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v54 = v25 + v51;
        a4 = v53;
        if (v53 >= v49)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_68:
    sub_1BACAA8E4(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_72:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BAA28798(uint64_t result, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v33 = *(_QWORD *)(result + 16);
  if (v33)
  {
    v5 = 0;
    v30 = a3 + 14;
    v31 = result + 32;
    v34 = a2 + 56;
    v6 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v29 = v6;
      v7 = v33;
      if (v5 > v33)
        v7 = v5;
      v32 = v7;
      while (1)
      {
        if (v5 == v32)
        {
          __break(1u);
          return result;
        }
        v8 = (uint64_t *)(v31 + 16 * v5);
        v10 = *v8;
        v9 = v8[1];
        ++v5;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_1BB8745CC();
          swift_bridgeObjectRetain();
          sub_1BB872A90();
          v11 = sub_1BB874608();
          v12 = -1 << *(_BYTE *)(a2 + 32);
          v13 = v11 & ~v12;
          if (((*(_QWORD *)(v34 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
          {
            v14 = *(_QWORD *)(a2 + 48);
            v15 = (_QWORD *)(v14 + 16 * v13);
            v16 = *v15 == v10 && v15[1] == v9;
            if (v16 || (sub_1BB874398() & 1) != 0)
              goto LABEL_6;
            v17 = ~v12;
            for (i = v13 + 1; ; i = v19 + 1)
            {
              v19 = i & v17;
              if (((*(_QWORD *)(v34 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0)
                break;
              v20 = (_QWORD *)(v14 + 16 * v19);
              v21 = *v20 == v10 && v20[1] == v9;
              if (v21 || (sub_1BB874398() & 1) != 0)
                goto LABEL_6;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v23 = a3[17];
        v22 = a3[18];
        __swift_project_boxed_opaque_existential_1(v30, v23);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8) + 32))(v10, v9, v23) & 1) != 0)
        {
          v25 = a3[17];
          v24 = a3[18];
          __swift_project_boxed_opaque_existential_1(v30, v25);
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 + 8) + 40))(v10, v9, v25) & 1) == 0)
            break;
        }
LABEL_6:
        result = swift_bridgeObjectRelease();
        if (v5 == v33)
          return v29;
      }
      v6 = v29;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1BA7447E8(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v6 = v29;
      }
      v27 = *(_QWORD *)(v6 + 16);
      v26 = *(_QWORD *)(v6 + 24);
      if (v27 >= v26 >> 1)
      {
        result = sub_1BA7447E8(v26 > 1, v27 + 1, 1);
        v6 = v29;
      }
      *(_QWORD *)(v6 + 16) = v27 + 1;
      v28 = v6 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v10;
      *(_QWORD *)(v28 + 40) = v9;
      if (v5 == v33)
        return v6;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

void sub_1BAA28A34(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3A0E90, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStatsState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BAA28A50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for PuzzleStreak();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v13 = a1[4];
  v12 = a1[5];
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    v32 = a2;
    v15 = v12;
    v34 = MEMORY[0x1E0DEE9D8];
    v31 = v8;
    swift_bridgeObjectRetain();
    v30 = v9;
    swift_bridgeObjectRetain();
    v29 = v10;
    swift_bridgeObjectRetain();
    v28 = v11;
    swift_bridgeObjectRetain();
    v27 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA7447E8(0, v14, 0);
    v16 = *(unsigned __int8 *)(v5 + 80);
    v26[1] = v15;
    v17 = v15 + ((v16 + 32) & ~v16);
    v33 = *(_QWORD *)(v5 + 72);
    v18 = v34;
    do
    {
      sub_1BA4C2DD8(v17, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v19 = PuzzleStreak.debugDescription.getter();
      v21 = v20;
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BA7447E8(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v34;
      }
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1BA7447E8(v22 > 1, v23 + 1, 1);
        v18 = v34;
      }
      *(_QWORD *)(v18 + 16) = v23 + 1;
      v24 = v18 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v19;
      *(_QWORD *)(v24 + 40) = v21;
      v17 += v33;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n();
    v13 = v27;
    swift_bridgeObjectRelease();
    v11 = v28;
    swift_bridgeObjectRelease();
    v10 = v29;
    swift_bridgeObjectRelease();
    v9 = v30;
    swift_bridgeObjectRelease();
    v8 = v31;
    result = swift_bridgeObjectRelease();
    a2 = v32;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
  }
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  a2[4] = v13;
  a2[5] = v18;
  return result;
}

unint64_t sub_1BAA28C80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EF2AD798;
  if (!qword_1EF2AD798)
  {
    sub_1BA5571BC(255, &qword_1EF2AD790);
    v2 = v1;
    v3 = sub_1BAA28D08();
    v4[0] = MEMORY[0x1E0DEA970];
    v4[1] = v3;
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEA0B8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EF2AD798);
  }
  return result;
}

unint64_t sub_1BAA28D08()
{
  unint64_t result;

  result = qword_1EF2AD7A0;
  if (!qword_1EF2AD7A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8913E0, &type metadata for PuzzleTypeDebugStats);
    atomic_store(result, &qword_1EF2AD7A0);
  }
  return result;
}

void sub_1BAA28D4C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BAA28D68(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2AD7D0, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BAA28D84(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1EF2AD7D8, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BAA28DA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1BA8195A4;
  return sub_1BAA1DBD8(a1, v4, v5, v6);
}

uint64_t type metadata accessor for PuzzleStatsService.StatsResult()
{
  uint64_t result;

  result = qword_1ED3AD5E8;
  if (!qword_1ED3AD5E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BAA28E4C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001BB967170 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4264657472617473 && a2 == 0xEE006C6576654C79 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BB967190 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001BB9671B0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5374736568676968 && a2 == 0xED00007365726F63 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736B6165727473 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1BAA29100@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  sub_1BA4CDF6C(0, (unint64_t *)&unk_1EF2AD890, (uint64_t (*)(void))sub_1BAA2A528, (uint64_t)&type metadata for PuzzleTypeDebugStats.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v23 - v8;
  v10 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BAA2A528();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  v11 = v7;
  v26 = a2;
  sub_1BA557368();
  v28 = 0;
  sub_1BA5574D4();
  v12 = v6;
  sub_1BB8740D4();
  v13 = v29;
  v28 = 1;
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  v14 = v29;
  sub_1BA5571BC(0, &qword_1ED3A2E90);
  v28 = 2;
  v15 = sub_1BA5572E8((unint64_t *)&unk_1ED3A2EA0, MEMORY[0x1E0DEDC90], MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  v25 = v15;
  v16 = v29;
  sub_1BA5571BC(0, &qword_1ED3A2E40);
  v28 = 3;
  sub_1BA5573CC(&qword_1ED3A2E58, MEMORY[0x1E0DEDC90], MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  v24 = v16;
  v17 = v29;
  v28 = 4;
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  v18 = v29;
  sub_1BA6D249C();
  v28 = 5;
  sub_1BA637DF8((unint64_t *)&qword_1ED3B95F0, (uint64_t (*)(uint64_t))sub_1BA6D249C, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
  v19 = v29;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v22 = v26;
  *v26 = v13;
  v22[1] = v14;
  v22[2] = v20;
  v22[3] = v17;
  v22[4] = v18;
  v22[5] = v19;
  return result;
}

uint64_t sub_1BAA29620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = v0;
  sub_1BA81D6FC(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BB872F94();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BA81D6FC);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    sub_1BB872F88();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = sub_1BB872F28();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &unk_1EF2AD858;
  *(_QWORD *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1BAA297F4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BA8195A4;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1BA8195A4;
  return sub_1BA4B8F90();
}

uint64_t sub_1BAA2985C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BAA29880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BA8195A4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF2BD208 + dword_1EF2BD208))(a1, v4);
}

uint64_t sub_1BAA298F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BB86C8B0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BAA29980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_1BB86C8B0() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1BA4B0D38;
  return sub_1BAA271B4(a1, v6, v7, v8, v9);
}

unint64_t sub_1BAA29A24()
{
  unint64_t result;

  result = qword_1EF2AD878;
  if (!qword_1EF2AD878)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleStatisticType, &type metadata for PuzzleStatisticType);
    atomic_store(result, (unint64_t *)&qword_1EF2AD878);
  }
  return result;
}

uint64_t *sub_1BAA29A68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = *(int *)(a3 + 20);
    __dst = (char *)a1 + v8;
    v9 = (char *)a2 + v8;
    a1[5] = a2[5];
    v10 = sub_1BB86C8B0();
    v11 = *(_QWORD *)(v10 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v9, 1, v10))
    {
      sub_1BA76D78C();
      memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t sub_1BAA29BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1BB86C8B0();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_1BAA29C60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 20);
  __dst = (char *)a1 + v7;
  v8 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v9 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v9 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v8, 1, v9))
  {
    sub_1BA76D78C();
    memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_1BAA29D84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1BA76D78C();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_1BAA29F18(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1BB86C8B0();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_1BA76D78C();
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_1BAA29FD8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1BA76D78C();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1BAA2A13C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA2A148(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BA76D78C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1BAA2A1C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BAA2A1D0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1BA76D78C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1BAA2A244()
{
  unint64_t v0;

  sub_1BA76D78C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for FormatBezierPathCurveComponent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FormatBezierPathCurveComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FormatBezierPathCurveComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for FormatBezierPathCurveComponent(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for FormatBezierPathCurveComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PuzzleTypeDebugStats()
{
  return &type metadata for PuzzleTypeDebugStats;
}

_QWORD *sub_1BAA2A4F8(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatsServiceError()
{
  return &type metadata for PuzzleStatsServiceError;
}

unint64_t sub_1BAA2A528()
{
  unint64_t result;

  result = qword_1EF2AD888;
  if (!qword_1EF2AD888)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB891500, &type metadata for PuzzleTypeDebugStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD888);
  }
  return result;
}

uint64_t _s8NewsFeed15PuzzleTypeStatsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BAA2A5B8 + 4 * byte_1BB890F79[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BAA2A5EC + 4 * byte_1BB890F74[v4]))();
}

uint64_t sub_1BAA2A5EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA2A5F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA2A5FCLL);
  return result;
}

uint64_t sub_1BAA2A608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA2A610);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BAA2A614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA2A61C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleTypeDebugStats.CodingKeys()
{
  return &type metadata for PuzzleTypeDebugStats.CodingKeys;
}

unint64_t sub_1BAA2A63C()
{
  unint64_t result;

  result = qword_1EF2AD8A0;
  if (!qword_1EF2AD8A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8914D8, &type metadata for PuzzleTypeDebugStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD8A0);
  }
  return result;
}

unint64_t sub_1BAA2A684()
{
  unint64_t result;

  result = qword_1EF2AD8A8;
  if (!qword_1EF2AD8A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB891448, &type metadata for PuzzleTypeDebugStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD8A8);
  }
  return result;
}

unint64_t sub_1BAA2A6CC()
{
  unint64_t result;

  result = qword_1EF2AD8B0;
  if (!qword_1EF2AD8B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB891470, &type metadata for PuzzleTypeDebugStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2AD8B0);
  }
  return result;
}

id VideoDurationView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

char *VideoDurationView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  objc_super v32;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = OBJC_IVAR____TtC8NewsFeed17VideoDurationView_label;
  v11 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v12 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  v32.receiver = v12;
  v32.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v32, sel_initWithFrame_, a1, a2, a3, a4);
  v14 = objc_msgSend(v13, sel_layer);
  objc_msgSend(v14, sel_setCornerRadius_, 10.0);

  v15 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v16 = (char *)v13;
  v17 = objc_msgSend(v15, sel_initWithRed_green_blue_alpha_, 0.282352941, 0.282352941, 0.290196078, 1.0);
  objc_msgSend(v16, sel_setBackgroundColor_, v17);

  v18 = OBJC_IVAR____TtC8NewsFeed17VideoDurationView_label;
  v19 = *(void **)&v16[OBJC_IVAR____TtC8NewsFeed17VideoDurationView_label];
  objc_msgSend(v16, sel_addSubview_, v19);
  v20 = (void *)objc_opt_self();
  v21 = v19;
  v22 = objc_msgSend(v20, sel_whiteColor);
  objc_msgSend(v21, sel_setTextColor_, v22);

  v23 = *(void **)&v16[v18];
  objc_msgSend(v23, sel_setTextAlignment_, 1);
  v24 = (void *)objc_opt_self();
  v25 = *MEMORY[0x1E0DC1448];
  v26 = v23;
  v27 = objc_msgSend(v24, sel_systemFontOfSize_weight_, 12.0, v25);
  v28 = objc_msgSend(v27, sel_fontDescriptor);
  v29 = objc_msgSend(v28, sel_fontDescriptorWithDesign_, *MEMORY[0x1E0DC13A8]);

  if (v29)
  {
    v30 = objc_msgSend(v24, sel_fontWithDescriptor_size_, v29, 12.0);

    v27 = v30;
  }
  objc_msgSend(v26, sel_setFont_, v27);

  return v16;
}

Swift::Void __swiftcall VideoDurationView.layoutSubviews()()
{
  char *v0;
  void *v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v2, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed17VideoDurationView_label];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
}

id VideoDurationView.intrinsicContentSize.getter()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8NewsFeed17VideoDurationView_label);
  result = objc_msgSend(v1, sel_font);
  if (result)
  {
    v3 = result;
    objc_msgSend(result, sel_capHeight);

    return objc_msgSend(v1, sel_intrinsicContentSize);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id VideoDurationView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for VideoDurationView()
{
  return objc_opt_self();
}

uint64_t FormatAccessibilityNode.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatAccessibilityNode.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatAccessibilityNode.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t FormatAccessibilityNode.property.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  char v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BA72F4F8(v3, v4);
}

unint64_t FormatAccessibilityNode.property.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return sub_1BA72E4D0(v4, v5);
}

uint64_t (*FormatAccessibilityNode.property.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatAccessibilityNode.invalidation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_WORD *)(v1 + 72);
  *(_WORD *)(a1 + 24) = v6;
  return sub_1BA72FFC4(v3, v4, v5, v6);
}

uint64_t FormatAccessibilityNode.invalidation.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int128 v9;

  v9 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_WORD *)a1 + 12);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  *(_OWORD *)(v1 + 48) = v9;
  *(_QWORD *)(v1 + 64) = v2;
  v7 = *(_WORD *)(v1 + 72);
  *(_WORD *)(v1 + 72) = v3;
  return sub_1BA72E4BC(v4, v5, v6, v7);
}

uint64_t sub_1BAA2AFD8(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, char a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  int v7;

  if ((a5 & 1) != 0)
    v7 = 4;
  else
    v7 = 0;
  switch(v7 & 0xFFFFFFFC | (a4 >> 2) & 3)
  {
    case 0u:
      result = sub_1BA856ECC(result, a2, a3, a4, a6);
      break;
    case 3u:
      result = a6();
      break;
    case 6u:
      result = sub_1BA856F00(result, a2, a3, a4 & 0xF3, a6);
      break;
    case 7u:
      result = a7(result, a2, a3, a4 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t (*FormatAccessibilityNode.invalidation.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatAccessibilityNode.__allocating_init(identifier:property:invalidation:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int128 v17;

  v8 = swift_allocObject();
  v9 = *a3;
  LOBYTE(a3) = *((_BYTE *)a3 + 8);
  v17 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  v11 = *((_WORD *)a4 + 12);
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_WORD *)(v8 + 72) = -512;
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 40) = (_BYTE)a3;
  swift_beginAccess();
  v12 = *(_QWORD *)(v8 + 48);
  v13 = *(_QWORD *)(v8 + 56);
  v14 = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 48) = v17;
  *(_QWORD *)(v8 + 64) = v10;
  v15 = *(_WORD *)(v8 + 72);
  *(_WORD *)(v8 + 72) = v11;
  sub_1BA72E4BC(v12, v13, v14, v15);
  return v8;
}

uint64_t FormatAccessibilityNode.init(identifier:property:invalidation:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v16;

  v7 = *a3;
  v8 = *((_BYTE *)a3 + 8);
  v16 = *a4;
  v9 = *((_QWORD *)a4 + 2);
  v10 = *((_WORD *)a4 + 12);
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_WORD *)(v4 + 72) = -512;
  *(_QWORD *)(v4 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 40) = v8;
  swift_beginAccess();
  v11 = *(_QWORD *)(v4 + 48);
  v12 = *(_QWORD *)(v4 + 56);
  v13 = *(_QWORD *)(v4 + 64);
  *(_OWORD *)(v4 + 48) = v16;
  *(_QWORD *)(v4 + 64) = v9;
  v14 = *(_WORD *)(v4 + 72);
  *(_WORD *)(v4 + 72) = v10;
  sub_1BA72E4BC(v11, v12, v13, v14);
  return v4;
}

uint64_t FormatAccessibilityNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1BA72E4D0(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_1BA72E4BC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_WORD *)(v0 + 72));
  return v0;
}

uint64_t FormatAccessibilityNode.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1BA72E4D0(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_1BA72E4BC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_WORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t sub_1BAA2B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1EF2AD8F0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatAccessibilityNode, (uint64_t)&protocol conformance descriptor for FormatAccessibilityNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BAA2B2DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  a1[1] = sub_1BA50AD30(&qword_1ED3BEDD0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatAccessibilityNode, (uint64_t)&protocol conformance descriptor for FormatAccessibilityNode);
  a1[2] = sub_1BA50AD30(&qword_1ED3A0220, v3, (uint64_t (*)(uint64_t))type metadata accessor for FormatAccessibilityNode, (uint64_t)&protocol conformance descriptor for FormatAccessibilityNode);
  result = sub_1BA50AD30(&qword_1EF2AD8F8, v4, (uint64_t (*)(uint64_t))type metadata accessor for FormatAccessibilityNode, (uint64_t)&protocol conformance descriptor for FormatAccessibilityNode);
  a1[3] = result;
  return result;
}

uint64_t sub_1BAA2B354(_QWORD *a1, _QWORD *a2)
{
  return static FormatAccessibilityNode.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_1BAA2B360(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1EF2AD900, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatAccessibilityNode, (uint64_t)&protocol conformance descriptor for FormatAccessibilityNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BAA2B39C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for FormatAccessibilityNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatAccessibilityNode.__allocating_init(identifier:property:invalidation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t FormatAnimationNodeGroupAnimation.animations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatAnimationNodeGroupAnimation.mediaTiming.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[144];

  sub_1BA5193C4(v1 + 24, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA5193C4((uint64_t)v4, a1, (uint64_t (*)(_QWORD))sub_1BA89631C);
  return sub_1BA8966F8((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
}

uint64_t FormatAnimationNodeGroupAnimation.__allocating_init(animations:mediaTiming:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[144];

  v4 = swift_allocObject();
  sub_1BA5193C4(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA89631C);
  *(_QWORD *)(v4 + 16) = a1;
  sub_1BA5193C4((uint64_t)v6, v4 + 24, (uint64_t (*)(_QWORD))sub_1BA89631C);
  return v4;
}

uint64_t FormatAnimationNodeGroupAnimation.init(animations:mediaTiming:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[144];

  sub_1BA5193C4(a2, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BA89631C);
  *(_QWORD *)(v2 + 16) = a1;
  sub_1BA5193C4((uint64_t)v5, v2 + 24, (uint64_t (*)(_QWORD))sub_1BA89631C);
  return v2;
}

uint64_t FormatAnimationNodeGroupAnimation.deinit()
{
  uint64_t v0;
  _BYTE v2[144];

  swift_bridgeObjectRelease();
  sub_1BA5193C4(v0 + 24, (uint64_t)v2, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA8966F8((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B6260);
  return v0;
}

uint64_t FormatAnimationNodeGroupAnimation.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[144];

  swift_bridgeObjectRelease();
  sub_1BA5193C4(v0 + 24, (uint64_t)v2, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA8966F8((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B6260);
  return swift_deallocClassInstance();
}

uint64_t sub_1BAA2B5D0(uint64_t a1)
{
  uint64_t result;

  result = sub_1BAA2B688(&qword_1EF2AD908, (uint64_t)&protocol conformance descriptor for FormatAnimationNodeGroupAnimation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FormatAnimationNodeGroupAnimation()
{
  return objc_opt_self();
}

uint64_t sub_1BAA2B624(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BAA2B688(&qword_1EF2AD910, (uint64_t)&protocol conformance descriptor for FormatAnimationNodeGroupAnimation);
  a1[2] = sub_1BAA2B688(&qword_1EF2AD918, (uint64_t)&protocol conformance descriptor for FormatAnimationNodeGroupAnimation);
  result = sub_1BAA2B688(&qword_1EF2AD920, (uint64_t)&protocol conformance descriptor for FormatAnimationNodeGroupAnimation);
  a1[3] = result;
  return result;
}

uint64_t sub_1BAA2B688(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatAnimationNodeGroupAnimation();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1BAA2B6C4@<X0>(_QWORD *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;

  result = sub_1BAE76D2C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BAA2B6EC(_QWORD *a1)
{
  return FormatAnimationNodeGroupAnimation.encode(to:)(a1);
}

BOOL sub_1BAA2B70C(uint64_t *a1, uint64_t *a2)
{
  return _s8NewsFeed024FormatAnimationNodeGroupD0C2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t method lookup function for FormatAnimationNodeGroupAnimation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatAnimationNodeGroupAnimation.__allocating_init(animations:mediaTiming:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1BAA2B72C@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  _QWORD *v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v5 = *a2;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1BB87420C();
    sub_1BB872AFC(v7);
    swift_bridgeObjectRelease();
    sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2A9CD0, (uint64_t (*)(uint64_t))sub_1BA89EA20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
    if (v5 >> 62)
    {
      if (v5 >> 62 == 1)
      {
        swift_retain();
        v9 = swift_retain();
        v10 = sub_1BB125164(v9);
      }
      else
      {
        v12 = *(_QWORD *)(v5 + 16);
        swift_retain();
        swift_retain();
        v10 = (_QWORD *)sub_1BAA2BAA4(a3, v12);
      }
    }
    else
    {
      swift_retain();
      v11 = swift_retain();
      v10 = sub_1BB23F4E8(v11);
    }
    v13 = v10;
    swift_release();
    swift_release();
    *(_QWORD *)(inited + 56) = &type metadata for FormatInspection;
    *(_QWORD *)(inited + 64) = &off_1E7335C38;
    *(_QWORD *)(inited + 32) = v13;
    v14 = sub_1BA9747FC(inited);
    swift_setDeallocating();
    sub_1BA89EA20();
    swift_arrayDestroy();
    v15 = sub_1BB6DF010(v14);
    swift_bridgeObjectRelease();
    sub_1BAAF3C48(0x6F6974616D696E41, 0xEA0000000000206ELL, (uint64_t)v15, 0, 0, a4);
    v16 = type metadata accessor for FormatInspectionItem(0);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a4, 0, 1, v16);
  }
  return result;
}

uint64_t sub_1BAA2B924(uint64_t a1, void (*a2)(uint64_t, uint64_t *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = a2;
  v18 = a3;
  sub_1BA8C88C8(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1BAC79E1C(0, 0, 0);
  v8 = v21;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v16 = v9;
  v15[1] = a1;
  if (v9)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 32 + 8 * v10);
      v19 = v10;
      v20 = v11;
      swift_retain();
      v17(v10, &v20);
      swift_release();
      v21 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1BAC79E1C(v12 > 1, v13 + 1, 1);
        v8 = v21;
      }
      ++v10;
      *(_QWORD *)(v8 + 16) = v13 + 1;
      sub_1BA5193C4((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, (uint64_t (*)(_QWORD))sub_1BA8C88C8);
    }
    while (v16 != v10);
  }
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_1BAA2BAA4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD v23[4];
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  _BYTE v27[144];

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2A9CF0, (uint64_t (*)(uint64_t))sub_1BA89EA04, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v24 = xmmword_1BB87CE70;
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  sub_1BA4B07F0(0, &qword_1EF2AC0A0, (uint64_t (*)(uint64_t))sub_1BA8C88C8, v4);
  sub_1BA8C88C8(0);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v24;
  v10 = (_QWORD *)(v9 + v8);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2A9CD0, (uint64_t (*)(uint64_t))sub_1BA89EA20, v4);
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = v24;
  if (a2)
  {
    sub_1BA5193C4(a2 + 24, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA89631C);
    sub_1BA8966F8((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
  }
  else
  {
    sub_1BAA2BE10((uint64_t)v25);
  }
  sub_1BA5193C4((uint64_t)v25, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA5193C4((uint64_t)v27, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA89631C);
  v12 = sub_1BB004468((uint64_t)v25);
  sub_1BA8966F8((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B6260);
  *(_QWORD *)(v11 + 56) = &type metadata for FormatInspection;
  *(_QWORD *)(v11 + 64) = &off_1E7335C38;
  *(_QWORD *)(v11 + 32) = v12;
  v13 = sub_1BA9747FC(v11);
  swift_setDeallocating();
  sub_1BA89EA20();
  swift_arrayDestroy();
  v14 = sub_1BB6DF010(v13);
  swift_bridgeObjectRelease();
  sub_1BAAF3C48(1701869908, 0xE400000000000000, (uint64_t)v14, 0x70756F7247, 0xE500000000000000, v10);
  v15 = type metadata accessor for FormatInspectionItem(0);
  v16 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  if (a2)
  {
    v17 = *(_QWORD *)(a2 + 16);
    v16 = swift_bridgeObjectRetain();
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v16);
  v23[2] = a1;
  v18 = sub_1BAA2B924(v17, (void (*)(uint64_t, uint64_t *))sub_1BAA2BE44, (uint64_t)v23);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25[0] = v9;
  sub_1BB3847C4(v18);
  sub_1BAF89090(0x6F6974616D696E41, 0xE90000000000006ELL, 0, 0, *(uint64_t *)&v25[0], v25);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for FormatInspectionGroup;
  *(_QWORD *)(inited + 64) = &off_1E72D2F60;
  v19 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v19;
  *(_QWORD *)(v19 + 48) = v26;
  v20 = v25[1];
  *(_OWORD *)(v19 + 16) = v25[0];
  *(_OWORD *)(v19 + 32) = v20;
  v21 = sub_1BB6DF010(inited);
  swift_setDeallocating();
  sub_1BA89EA04(0);
  swift_arrayDestroy();
  return v21;
}

double sub_1BAA2BE10(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_1BAA2BE44@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1BAA2B72C(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_1BAA2BE4C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BAA2BE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1BAA30EFC(a1, (uint64_t)sub_1BAA31414, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

id sub_1BAA2BEFC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_defaultSessionConfiguration);
    v4 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v3);

    v5 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v4;
    v2 = v4;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

uint64_t sub_1BAA2BF9C()
{
  void (*v0)(char *, uint64_t);
  void (*v1)(char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  char *v48;
  void *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;

  v1 = (void (*)(char *, uint64_t))v0;
  v2 = sub_1BB86C8B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v60 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v52 - v7;
  v8 = sub_1BB86BFF8();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  MEMORY[0x1E0C80A78](v8);
  v61 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3B04A0, v10, v5);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v52 - v12;
  v14 = sub_1BB86C67C();
  v66 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v52 - v17;
  MEMORY[0x1E0C80A78](v19);
  v65 = (char *)&v52 - v21;
  if (qword_1EF2A6E80 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1EF2ADAC0, v20, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
  sub_1BB86D210();
  v23 = v68;
  v22 = v69;
  swift_bridgeObjectRelease();
  v24 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v24 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v24)
    goto LABEL_15;
  if (qword_1EF2A6E88 != -1)
    swift_once();
  sub_1BB86D210();
  v26 = v68;
  v25 = v69;
  swift_bridgeObjectRelease();
  v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v27 = v26 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    v55 = v3;
    v56 = v2;
    if (qword_1EF2A6E78 != -1)
      swift_once();
    sub_1BB86D210();
    v67 = v68;
    sub_1BA89A9E8((uint64_t)v18);
    v28 = v65;
    sub_1BB86C5BC();
    v29 = *(void (**)(char *, uint64_t))(v66 + 8);
    v29(v18, v14);
    v30 = v64;
    v31 = swift_allocBox();
    v57 = v32;
    sub_1BB86BF74();
    v58 = v1;
    v33 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v13, 1, v30) == 1)
    {
      sub_1BA5C699C((uint64_t)v13, (unint64_t *)&unk_1ED3B04A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE890]);
      swift_deallocBox();
      type metadata accessor for DebugNewsroomServiceError();
      sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v34, v28, v14);
      swift_storeEnumTagMultiPayload();
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0900, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
      swift_allocObject();
      v35 = sub_1BB86E9C8();
      v29(v28, v14);
    }
    else
    {
      v52 = v29;
      v53 = (void (*)(char *, uint64_t))v31;
      v37 = v57;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v57, v13, v30);
      sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3B9C50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE690], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      sub_1BB86BF20();
      v54 = v14;
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87A390;
      sub_1BB86D210();
      sub_1BB86BEFC();
      swift_bridgeObjectRelease();
      v38 = v54;
      sub_1BB86D210();
      v39 = v64;
      sub_1BB86BEFC();
      swift_bridgeObjectRelease();
      sub_1BB86BF44();
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      v41 = v61;
      v40(v61, v37, v39);
      v42 = (uint64_t)v62;
      sub_1BB86BF80();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v39);
      v43 = v66;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v42, 1, v38) == 1)
      {
        sub_1BA5C699C(v42, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        type metadata accessor for DebugNewsroomServiceError();
        sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
        swift_allocError();
        v40(v44, v57, v39);
        swift_storeEnumTagMultiPayload();
        sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0900, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
        swift_allocObject();
        v35 = sub_1BB86E9C8();
        v52(v65, v38);
      }
      else
      {
        v45 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v59, v42, v38);
        sub_1BB86BC8C();
        v46 = swift_allocBox();
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v18, v45, v38);
        sub_1BB86BC5C();
        sub_1BB86BC20();
        v47 = objc_msgSend((id)objc_opt_self(), sel_sharedHTTPCookieStorage);
        v48 = v60;
        sub_1BB86C7D8();
        v49 = (void *)sub_1BB86C808();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
        objc_msgSend(v47, sel_removeCookiesSinceDate_, v49);

        MEMORY[0x1E0C80A78](v50);
        *(&v52 - 4) = v58;
        *(&v52 - 3) = (void (*)(char *, uint64_t))v46;
        *(&v52 - 2) = v53;
        sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0900, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
        swift_allocObject();
        v35 = sub_1BB86EA58();
        v51 = v52;
        v52(v45, v38);
        v51(v65, v38);
        swift_release();
      }
      swift_release();
    }
  }
  else
  {
LABEL_15:
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0900, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9C8();
  }
  return v35;
}

void sub_1BAA2C8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v23 = a3;
  v12 = sub_1BB86BC8C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&aBlock[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = swift_projectBox();
  swift_retain();
  v18 = sub_1BAA2BEFC();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
  v19 = (void *)sub_1BB86BC38();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v23;
  v20[3] = a4;
  v20[4] = a6;
  v20[5] = a7;
  v20[6] = sub_1BA4D7948;
  v20[7] = v16;
  aBlock[4] = sub_1BAA313E8;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BAF35F80;
  aBlock[3] = &block_descriptor_22;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v22 = objc_msgSend(v18, sel_dataTaskWithRequest_completionHandler_, v19, v21);
  _Block_release(v21);

  objc_msgSend(v22, sel_resume);
}

void sub_1BAA2CAD4(uint64_t a1, unint64_t a2, void *a3, void *a4, void (*a5)(void *), uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t), uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(void *);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  void (*v70)(uint64_t);

  v68 = a1;
  v69 = a3;
  v66 = a10;
  v67 = a2;
  v70 = a9;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v62 - v14;
  v16 = sub_1BB86BFF8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1BB86BC8C();
  v21 = swift_projectBox();
  v22 = swift_projectBox();
  if (a4)
  {
    v23 = a4;
    a5(a4);

    return;
  }
  v62 = v19;
  v63 = v20;
  v25 = v68;
  v24 = v69;
  v64 = a6;
  v65 = a5;
  if (!v69 || (v26 = v22, objc_opt_self(), (v27 = swift_dynamicCastObjCClass()) == 0))
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v48 = (void *)swift_allocError();
    v50 = v49;
    sub_1BAA30C9C();
    v52 = (char *)v50 + *(int *)(v51 + 64);
    *v50 = v24;
    v50[1] = v25;
    v53 = v67;
    v50[2] = v67;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v52, v21);
    swift_storeEnumTagMultiPayload();
    v54 = v24;
    sub_1BA86B484(v25, v53);
    v65(v48);

    return;
  }
  v28 = (void *)v27;
  v69 = v24;
  v29 = objc_msgSend(v28, sel_allHeaderFields);
  v30 = sub_1BB87276C();

  v31 = sub_1BB7E7858(v30);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v55 = (void *)swift_allocError();
    v56 = v28;
    v58 = v57;
    v59 = objc_msgSend(v56, sel_allHeaderFields);
    v60 = sub_1BB87276C();

    *v58 = v60;
    swift_storeEnumTagMultiPayload();
    v65(v55);

    return;
  }
  v32 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v33 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v62, v26, v16);
  sub_1BB86BF80();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v33, v16);
  v34 = sub_1BB86C67C();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v15, 1, v34) == 1)
    goto LABEL_22;
  v36 = (void *)objc_opt_self();
  v37 = (void *)sub_1BB86C58C();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v34);
  v38 = objc_msgSend(v36, sel_cookiesWithResponseHeaderFields_forURL_, v32, v37);

  sub_1BA49A224(0, &qword_1EF2ADA88);
  v39 = sub_1BB872DB4();

  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    v40 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    v41 = v70;
    if (v40)
      goto LABEL_10;
  }
  else
  {
    v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    v41 = v70;
    if (v40)
    {
LABEL_10:
      v42 = objc_opt_self();
      if (v40 >= 1)
      {
        v43 = (void *)v42;
        v44 = 0;
        do
        {
          if ((v39 & 0xC000000000000001) != 0)
            v45 = (id)MEMORY[0x1BCCE4630](v44, v39);
          else
            v45 = *(id *)(v39 + 8 * v44 + 32);
          v46 = v45;
          ++v44;
          v47 = objc_msgSend(v43, sel_sharedHTTPCookieStorage, v62);
          objc_msgSend(v47, sel_setCookie_, v46);

          v41 = v70;
        }
        while (v40 != v44);
        goto LABEL_19;
      }
      __break(1u);
LABEL_22:
      __break(1u);
      return;
    }
  }
LABEL_19:
  v61 = swift_bridgeObjectRelease();
  v41(v61);

}

uint64_t sub_1BAA2D058(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void (**v3)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;

  v46 = *v3;
  v7 = sub_1BB86BC8C();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  MEMORY[0x1E0C80A78](v7);
  v48 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v8;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v45 - v10;
  v49 = sub_1BB86C67C();
  v45 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v52 = (char *)&v45 - v15;
  v16 = sub_1BB86C8E0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4AD288(0, &qword_1EF2ADAF8, (uint64_t)&type metadata for MIMEPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  swift_bridgeObjectRetain();
  v21 = sub_1BA9F1950(a1, a2);
  *(_QWORD *)(v20 + 32) = 0x7461642D6D726F66;
  *(_QWORD *)(v20 + 40) = 0xE900000000000061;
  *(_OWORD *)(v20 + 48) = xmmword_1BB891870;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_QWORD *)(v20 + 96) = v21;
  *(_QWORD *)(v20 + 104) = v22;
  v24 = *a3;
  v23 = a3[1];
  v25 = a3[4];
  v26 = a3[5];
  v28 = a3[2];
  v27 = a3[3];
  *(_QWORD *)(v20 + 112) = 0x7461642D6D726F66;
  *(_QWORD *)(v20 + 120) = 0xE900000000000061;
  *(_OWORD *)(v20 + 128) = xmmword_1BB891880;
  *(_QWORD *)(v20 + 144) = v24;
  *(_QWORD *)(v20 + 152) = v23;
  *(_QWORD *)(v20 + 160) = v25;
  *(_QWORD *)(v20 + 168) = v26;
  *(_QWORD *)(v20 + 176) = v28;
  *(_QWORD *)(v20 + 184) = v27;
  v54 = 0x646565467377654ELL;
  v55 = 0xE90000000000002DLL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA69D44C(v28, v27);
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_1BB872AFC(v29);
  swift_bridgeObjectRelease();
  v32 = v54;
  v31 = v55;
  if (qword_1EF2A6E78 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1EF2ADAC0, v30, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
  sub_1BB86D210();
  v53 = v54;
  sub_1BA89A9E8((uint64_t)v13);
  v33 = v52;
  sub_1BB86C5BC();
  v34 = v45;
  v46 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35 = v49;
  v46(v13, v49);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v13, v33, v35);
  sub_1BB86BC5C();
  sub_1BB86BC20();
  v54 = 0;
  v55 = 0xE000000000000000;
  sub_1BB873CB4();
  swift_bridgeObjectRelease();
  v54 = 0xD00000000000001ELL;
  v55 = 0x80000001BB967410;
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v36);
  swift_bridgeObjectRelease();
  sub_1BB86BC80();
  swift_bridgeObjectRelease();
  sub_1BAA2D544(v32, v31, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BB86BC74();
  sub_1BAA2FC98((uint64_t)v11);
  v38 = v50;
  v37 = v51;
  v39 = v48;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v48, v11, v51);
  v40 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v41 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v41 + v40, v39, v37);
  v42 = (void *)sub_1BB86E854();
  v43 = sub_1BB86E974();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v37);
  v46(v52, v35);
  return v43;
}

uint64_t sub_1BAA2D544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  __int128 v43;

  swift_bridgeObjectRetain();
  sub_1BB872AFC(v4);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v5);
  v6 = sub_1BA9F1950(11565, 0xE200000000000000);
  v39 = v7;
  v40 = v6;
  v43 = xmmword_1BB88EA60;
  v8 = *(_QWORD *)(a3 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v9 = (uint64_t *)(a3 + 56);
    do
    {
      v10 = *v9;
      v11 = v9[2];
      v12 = v9[4];
      v41 = v8;
      v13 = v9[5];
      v14 = v9[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = v14;
      sub_1BA69D44C(v13, v14);
      sub_1BB86C700();
      sub_1BB873CB4();
      swift_bridgeObjectRelease();
      v42[0] = 0xD000000000000015;
      v42[1] = 0x80000001BB967430;
      swift_bridgeObjectRetain();
      sub_1BB872AFC(v16);
      swift_bridgeObjectRelease();
      v17 = sub_1BA9F1950(0xD000000000000015, 0x80000001BB967430);
      v19 = v18;
      sub_1BB86C700();
      sub_1BA69D314(v17, v19);
      if (v10)
      {
        strcpy((char *)v42, "; name=\"");
        BYTE1(v42[1]) = 0;
        WORD1(v42[1]) = 0;
        HIDWORD(v42[1]) = -402653184;
        swift_bridgeObjectRetain();
        sub_1BB872AFC(v20);
        swift_bridgeObjectRelease();
        sub_1BB872AFC(v21);
        v22 = sub_1BA9F1950(v42[0], v42[1]);
        v24 = v23;
        sub_1BB86C700();
        sub_1BA69D314(v22, v24);
      }
      if (v11)
      {
        strcpy((char *)v42, "; filename=\"");
        BYTE5(v42[1]) = 0;
        HIWORD(v42[1]) = -5120;
        swift_bridgeObjectRetain();
        sub_1BB872AFC(v25);
        swift_bridgeObjectRelease();
        sub_1BB872AFC(v26);
        v27 = sub_1BA9F1950(v42[0], v42[1]);
        v29 = v28;
        sub_1BB86C700();
        sub_1BA69D314(v27, v29);
      }
      if (qword_1EF2A7330 != -1)
        swift_once();
      sub_1BB86C700();
      if (v12)
      {
        swift_bridgeObjectRetain();
        sub_1BB873CB4();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Content-Type: ");
        HIBYTE(v42[1]) = -18;
        sub_1BB872AFC((_QWORD *)0xEE00203A65707954);
        swift_bridgeObjectRelease();
        v30 = sub_1BA9F1950(v42[0], v42[1]);
        v32 = v31;
        sub_1BB86C700();
        sub_1BA69D314(v30, v32);
        sub_1BB86C700();
      }
      sub_1BB86C700();
      sub_1BB86C700();
      sub_1BB86C700();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA69D314(v13, v15);
      v9 += 10;
      v8 = v41 - 1;
    }
    while (v41 != 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v33);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v34);
  v35 = sub_1BA9F1950(11565, 0xE200000000000000);
  v37 = v36;
  sub_1BB86C700();
  sub_1BA69D314(v40, v39);
  sub_1BA69D314(v35, v37);
  return v43;
}

uint64_t sub_1BAA2D9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  v1 = sub_1BB86C67C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1BB86BC8C();
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF2A6E78 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1EF2ADAC0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
  sub_1BB86D210();
  v10 = v20;
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_1BB873CB4();
  swift_bridgeObjectRelease();
  v18 = 0xD00000000000001ALL;
  v19 = 0x80000001BB967390;
  sub_1BB872AFC((_QWORD *)0xD00000000000001ALL);
  LOBYTE(v18) = v10;
  sub_1BA89A9E8((uint64_t)v4);
  sub_1BB86C5BC();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  sub_1BB86BC5C();
  v11 = sub_1BB86BC20();
  MEMORY[0x1E0C80A78](v11);
  *(&v15 - 2) = v0;
  *(&v15 - 1) = (uint64_t)v9;
  sub_1BB86EC14();
  v12 = (void *)sub_1BB86E854();
  sub_1BAA30BA8(0);
  v13 = sub_1BB86E974();
  swift_release();

  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  return v13;
}

uint64_t sub_1BAA2DC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  v1 = sub_1BB86C67C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1BB86BC8C();
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF2A6E78 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1EF2ADAC0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
  sub_1BB86D210();
  v10 = v20;
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_1BB873CB4();
  swift_bridgeObjectRelease();
  v18 = 0xD000000000000019;
  v19 = 0x80000001BB9673B0;
  sub_1BB872AFC((_QWORD *)0xD000000000000019);
  LOBYTE(v18) = v10;
  sub_1BA89A9E8((uint64_t)v4);
  sub_1BB86C5BC();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  sub_1BB86BC5C();
  v11 = sub_1BB86BC20();
  MEMORY[0x1E0C80A78](v11);
  *(&v15 - 2) = v0;
  *(&v15 - 1) = (uint64_t)v9;
  sub_1BB86EC14();
  v12 = (void *)sub_1BB86E854();
  sub_1BAA312C0(0);
  v13 = sub_1BB86E974();
  swift_release();

  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  return v13;
}

uint64_t sub_1BAA2DEA0(uint64_t a1, uint64_t a2)
{
  void (**v2)(uint64_t, uint64_t);
  void (**v3)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (**v19)(uint64_t, uint64_t);
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;

  v41 = a2;
  v3 = v2;
  v40 = *v3;
  v5 = sub_1BB86BC8C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BB86C67C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v32 - v14;
  v16 = v42;
  v17 = sub_1BAA2E20C();
  if (!v16)
  {
    v32[0] = a1;
    v32[1] = 0;
    v33 = v12;
    v34 = v10;
    v35 = v18;
    v36 = v17;
    v37 = v8;
    v38 = v15;
    v39 = v9;
    v41 = v6;
    v42 = v5;
    if (qword_1EF2A6E78 != -1)
      swift_once();
    sub_1BA50AD30(&qword_1EF2ADAC0, v18, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
    v19 = v3;
    sub_1BB86D210();
    v20 = v45;
    v43 = 0;
    v44 = 0xE000000000000000;
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    v43 = 0xD00000000000001ALL;
    v44 = 0x80000001BB967390;
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v21);
    swift_bridgeObjectRelease();
    LOBYTE(v43) = v20;
    v22 = (uint64_t)v33;
    sub_1BA89A9E8((uint64_t)v33);
    v23 = v38;
    sub_1BB86C5BC();
    v24 = v34;
    v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v25 = v39;
    v40(v22, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v22, v23, v25);
    v26 = v37;
    sub_1BB86BC5C();
    sub_1BB86BC20();
    sub_1BB86BC80();
    v27 = v35;
    v28 = (uint64_t)v36;
    sub_1BA69D44C((uint64_t)v36, v35);
    v29 = sub_1BB86BC74();
    MEMORY[0x1E0C80A78](v29);
    v32[-2] = v19;
    v32[-1] = v26;
    sub_1BB86EC14();
    v30 = (void *)sub_1BB86E854();
    sub_1BAA30BA8(0);
    v10 = sub_1BB86E974();
    swift_release();

    sub_1BA69D314(v28, v27);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v42);
    v40((uint64_t)v23, v25);
  }
  return v10;
}

char *sub_1BAA2E20C()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v23;
  id v24[5];

  v2 = v0;
  v24[4] = *(id *)MEMORY[0x1E0C80C00];
  sub_1BB86BD4C();
  swift_allocObject();
  sub_1BB86BD40();
  type metadata accessor for DebugNewsroomLayoutData();
  sub_1BA50AD30(&qword_1EF2ADAF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomLayoutData, (uint64_t)&unk_1BB8A45E0);
  v3 = sub_1BB86BD28();
  v5 = v4;
  swift_release();
  if (!v1)
  {
    v6 = (void *)objc_opt_self();
    v7 = (void *)sub_1BB86C6DC();
    v24[0] = 0;
    v8 = objc_msgSend(v6, sel_JSONObjectWithData_options_error_, v7, 0, v24);

    if (v8)
    {
      v9 = v24[0];
      sub_1BB873B64();
      swift_unknownObjectRelease();
      sub_1BAA31240();
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1BAA30BA8(0);
        v11 = *(int *)(v10 + 40);
        v12 = *(_QWORD *)&v2[v11];
        if (*(_QWORD *)(v12 + 16))
        {
          v13 = sub_1BA6E35A8(0xD000000000000017, 0x80000001BB9673D0);
          if ((v14 & 1) != 0)
          {
            v24[0] = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v13);
            swift_unknownObjectRetain();
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_1BAA2BE80(v23, v23);
              v15 = *(void **)&v2[v11];
              swift_bridgeObjectRetain();
              v16 = sub_1BB872760();
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v24[0] = v15;
              sub_1BB4BF038(v16, 0xD000000000000017, 0x80000001BB9673D0, isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease();
              v18 = (void *)sub_1BB872760();
              swift_bridgeObjectRelease();
              v24[0] = 0;
              v19 = objc_msgSend(v6, sel_dataWithJSONObject_options_error_, v18, 0, v24);

              v20 = (char *)v24[0];
              if (v19)
              {
                v2 = (char *)sub_1BB86C6E8();
                sub_1BA69D314(v3, v5);

                return v2;
              }
              v2 = v20;
              sub_1BB86C484();

LABEL_12:
              swift_willThrow();
              sub_1BA69D314(v3, v5);
              return v2;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
      type metadata accessor for DebugNewsroomServiceError();
      sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    v21 = v24[0];
    sub_1BB86C484();

    goto LABEL_12;
  }
  return v2;
}

char *sub_1BAA2E5D0()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v23;
  id v24[5];

  v2 = v0;
  v24[4] = *(id *)MEMORY[0x1E0C80C00];
  sub_1BB86BD4C();
  swift_allocObject();
  sub_1BB86BD40();
  type metadata accessor for DebugNewsroomThemeData();
  sub_1BA50AD30(&qword_1EF2ADB00, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomThemeData, (uint64_t)&unk_1BB89B698);
  v3 = sub_1BB86BD28();
  v5 = v4;
  swift_release();
  if (!v1)
  {
    v6 = (void *)objc_opt_self();
    v7 = (void *)sub_1BB86C6DC();
    v24[0] = 0;
    v8 = objc_msgSend(v6, sel_JSONObjectWithData_options_error_, v7, 0, v24);

    if (v8)
    {
      v9 = v24[0];
      sub_1BB873B64();
      swift_unknownObjectRelease();
      sub_1BAA31240();
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1BAA312C0(0);
        v11 = *(int *)(v10 + 40);
        v12 = *(_QWORD *)&v2[v11];
        if (*(_QWORD *)(v12 + 16))
        {
          v13 = sub_1BA6E35A8(0xD000000000000016, 0x80000001BB967450);
          if ((v14 & 1) != 0)
          {
            v24[0] = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v13);
            swift_unknownObjectRetain();
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_1BAA2BE80(v23, v23);
              v15 = *(void **)&v2[v11];
              swift_bridgeObjectRetain();
              v16 = sub_1BB872760();
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v24[0] = v15;
              sub_1BB4BF038(v16, 0xD000000000000016, 0x80000001BB967450, isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease();
              v18 = (void *)sub_1BB872760();
              swift_bridgeObjectRelease();
              v24[0] = 0;
              v19 = objc_msgSend(v6, sel_dataWithJSONObject_options_error_, v18, 0, v24);

              v20 = (char *)v24[0];
              if (v19)
              {
                v2 = (char *)sub_1BB86C6E8();
                sub_1BA69D314(v3, v5);

                return v2;
              }
              v2 = v20;
              sub_1BB86C484();

LABEL_12:
              swift_willThrow();
              sub_1BA69D314(v3, v5);
              return v2;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
      type metadata accessor for DebugNewsroomServiceError();
      sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    v21 = v24[0];
    sub_1BB86C484();

    goto LABEL_12;
  }
  return v2;
}

uint64_t sub_1BAA2E994(uint64_t a1, uint64_t a2)
{
  void (**v2)(uint64_t, uint64_t);
  void (**v3)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (**v19)(uint64_t, uint64_t);
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;

  v41 = a2;
  v3 = v2;
  v40 = *v3;
  v5 = sub_1BB86BC8C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BB86C67C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v32 - v14;
  v16 = v42;
  v17 = sub_1BAA2E5D0();
  if (!v16)
  {
    v32[0] = a1;
    v32[1] = 0;
    v33 = v12;
    v34 = v10;
    v35 = v18;
    v36 = v17;
    v37 = v8;
    v38 = v15;
    v39 = v9;
    v41 = v6;
    v42 = v5;
    if (qword_1EF2A6E78 != -1)
      swift_once();
    sub_1BA50AD30(&qword_1EF2ADAC0, v18, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomService, (uint64_t)&unk_1BB8918B8);
    v19 = v3;
    sub_1BB86D210();
    v20 = v45;
    v43 = 0;
    v44 = 0xE000000000000000;
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    v43 = 0xD000000000000019;
    v44 = 0x80000001BB9673B0;
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v21);
    swift_bridgeObjectRelease();
    LOBYTE(v43) = v20;
    v22 = (uint64_t)v33;
    sub_1BA89A9E8((uint64_t)v33);
    v23 = v38;
    sub_1BB86C5BC();
    v24 = v34;
    v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v25 = v39;
    v40(v22, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v22, v23, v25);
    v26 = v37;
    sub_1BB86BC5C();
    sub_1BB86BC20();
    sub_1BB86BC80();
    v27 = v35;
    v28 = (uint64_t)v36;
    sub_1BA69D44C((uint64_t)v36, v35);
    v29 = sub_1BB86BC74();
    MEMORY[0x1E0C80A78](v29);
    v32[-2] = v19;
    v32[-1] = v26;
    sub_1BB86EC14();
    v30 = (void *)sub_1BB86E854();
    sub_1BAA312C0(0);
    v10 = sub_1BB86E974();
    swift_release();

    sub_1BA69D314(v28, v27);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v42);
    v40((uint64_t)v23, v25);
  }
  return v10;
}

uint64_t sub_1BAA2ED00(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v68 = a2;
  v3 = sub_1BB86BC8C();
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  MEMORY[0x1E0C80A78](v3);
  v61 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v65 = (char *)&v58 - v6;
  v7 = sub_1BB86C67C();
  v8 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  v67 = v8;
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v58 - v11;
  v12 = sub_1BB86EB84();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6C1CE8();
  v17 = v16;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6BF9E8(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v58 - v24;
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v58 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v64 = a1;
  v30((char *)&v58 - v28, a1, v12, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
  v31 = type metadata accessor for DebugNewsroomLayoutData();
  sub_1BA4C2DD8((uint64_t)v68 + *(int *)(v31 + 52), (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v32 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_1BA4C2DD8((uint64_t)v29, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  sub_1BA4C2DD8((uint64_t)v25, v32, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v33((uint64_t)v19, 1, v12) == 1)
  {
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    if (v33(v32, 1, v12) == 1)
    {
      sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
      v34 = v68;
      goto LABEL_8;
    }
LABEL_6:
    sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6C1CE8);
    v34 = v68;
    goto LABEL_10;
  }
  sub_1BA4C2DD8((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  if (v33(v32, 1, v12) == 1)
  {
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, v32, v12);
  sub_1BA50AD30(&qword_1ED39C378, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE8]);
  v35 = sub_1BB872958();
  v36 = *(void (**)(char *, uint64_t))(v13 + 8);
  v36(v15, v12);
  sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v36(v22, v12);
  sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v34 = v68;
  if ((v35 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v37 = v34[8];
  if (!v37)
  {
LABEL_10:
    v42 = v34[13];
    if (v42)
    {
      v43 = sub_1BB86EB24();
      v45 = (uint64_t)v65;
      v46 = v66;
      if (*(_QWORD *)(v42 + 16) && (v47 = sub_1BA6E35A8(v43, v44), (v48 & 1) != 0))
      {
        v49 = *(_QWORD *)(v42 + 56);
        v50 = v67;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16))(v45, v49 + *(_QWORD *)(v67 + 72) * v47, v46);
        v51 = 0;
      }
      else
      {
        v51 = 1;
        v50 = v67;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v45, v51, 1, v46);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v45, 1, v46) != 1)
      {
        v52 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v60, v45, v46);
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v59, v52, v46);
        v53 = (uint64_t)v61;
        sub_1BB86BC5C();
        sub_1BB86BC20();
        sub_1BAA2FC98(v53);
        v54 = (void *)sub_1BB86E854();
        sub_1BAA30BEC(0);
        sub_1BB86E974();
        swift_release();

        v55 = (void *)sub_1BB86E854();
        v41 = sub_1BB86EA1C();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v53, v63);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v46);
        return v41;
      }
    }
    else
    {
      v45 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v65, 1, 1, v66);
    }
    sub_1BA5C699C(v45, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    swift_allocError();
    sub_1BA4C2DD8((uint64_t)v34, v56, (uint64_t (*)(_QWORD))sub_1BAA30BA8);
    swift_storeEnumTagMultiPayload();
    sub_1BA4B07F0(0, &qword_1EF2ADA78, (uint64_t (*)(uint64_t))sub_1BAA30BEC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9C8();
  }
  v38 = v34[7];
  sub_1BA4B07F0(0, &qword_1EF2ADA78, (uint64_t (*)(uint64_t))sub_1BAA30BEC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v39 + 24) = v37;
  swift_bridgeObjectRetain();
  sub_1BB86E998();
  v40 = (void *)sub_1BB86E854();
  v41 = sub_1BB86EA1C();
  swift_release();

  return v41;
}

id sub_1BAA2F410@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BAA2FC44(a1, a2);
}

uint64_t sub_1BAA2F424(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v68 = a2;
  v3 = sub_1BB86BC8C();
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  MEMORY[0x1E0C80A78](v3);
  v61 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v65 = (char *)&v58 - v6;
  v7 = sub_1BB86C67C();
  v8 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  v67 = v8;
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v58 - v11;
  v12 = sub_1BB86EB84();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6C1CE8();
  v17 = v16;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6BF9E8(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v58 - v24;
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v58 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v64 = a1;
  v30((char *)&v58 - v28, a1, v12, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
  v31 = type metadata accessor for DebugNewsroomThemeData();
  sub_1BA4C2DD8((uint64_t)v68 + *(int *)(v31 + 48), (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v32 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_1BA4C2DD8((uint64_t)v29, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  sub_1BA4C2DD8((uint64_t)v25, v32, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v33((uint64_t)v19, 1, v12) == 1)
  {
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    if (v33(v32, 1, v12) == 1)
    {
      sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
      v34 = v68;
      goto LABEL_8;
    }
LABEL_6:
    sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6C1CE8);
    v34 = v68;
    goto LABEL_10;
  }
  sub_1BA4C2DD8((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  if (v33(v32, 1, v12) == 1)
  {
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, v32, v12);
  sub_1BA50AD30(&qword_1ED39C378, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE8]);
  v35 = sub_1BB872958();
  v36 = *(void (**)(char *, uint64_t))(v13 + 8);
  v36(v15, v12);
  sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  sub_1BA4A2E80((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v36(v22, v12);
  sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BA6BF9E8);
  v34 = v68;
  if ((v35 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v37 = v34[6];
  if (!v37)
  {
LABEL_10:
    v42 = v34[12];
    if (v42)
    {
      v43 = sub_1BB86EB24();
      v45 = (uint64_t)v65;
      v46 = v66;
      if (*(_QWORD *)(v42 + 16) && (v47 = sub_1BA6E35A8(v43, v44), (v48 & 1) != 0))
      {
        v49 = *(_QWORD *)(v42 + 56);
        v50 = v67;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16))(v45, v49 + *(_QWORD *)(v67 + 72) * v47, v46);
        v51 = 0;
      }
      else
      {
        v51 = 1;
        v50 = v67;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v45, v51, 1, v46);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v45, 1, v46) != 1)
      {
        v52 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v60, v45, v46);
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v59, v52, v46);
        v53 = (uint64_t)v61;
        sub_1BB86BC5C();
        sub_1BB86BC20();
        sub_1BAA2FC98(v53);
        v54 = (void *)sub_1BB86E854();
        sub_1BAA30BEC(0);
        sub_1BB86E974();
        swift_release();

        v55 = (void *)sub_1BB86E854();
        v41 = sub_1BB86EA1C();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v53, v63);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v46);
        return v41;
      }
    }
    else
    {
      v45 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v65, 1, 1, v66);
    }
    sub_1BA5C699C(v45, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    swift_allocError();
    sub_1BA4C2DD8((uint64_t)v34, v56, (uint64_t (*)(_QWORD))sub_1BAA312C0);
    swift_storeEnumTagMultiPayload();
    sub_1BA4B07F0(0, &qword_1EF2ADA78, (uint64_t (*)(uint64_t))sub_1BAA30BEC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9C8();
  }
  v38 = v34[5];
  sub_1BA4B07F0(0, &qword_1EF2ADA78, (uint64_t (*)(uint64_t))sub_1BAA30BEC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v39 + 24) = v37;
  swift_bridgeObjectRetain();
  sub_1BB86E998();
  v40 = (void *)sub_1BB86E854();
  v41 = sub_1BB86EA1C();
  swift_release();

  return v41;
}

uint64_t sub_1BAA2FB34(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  type metadata accessor for FormatJSONDecoder();
  swift_allocObject();
  sub_1BACC8234(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for FormatFile();
  swift_bridgeObjectRetain();
  v5 = sub_1BA9F1950(a1, a2);
  v7 = v6;
  sub_1BA50AD30(&qword_1ED3B3030, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatFile, (uint64_t)&protocol conformance descriptor for FormatFile);
  sub_1BB86DC78();
  sub_1BA69D314(v5, v7);
  result = swift_release();
  if (!v2)
  {
    sub_1BAA30BEC(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

id sub_1BAA2FC44@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  sub_1BAA30BEC(0);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1BAA2FC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1BB86BC8C();
  swift_allocBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, a1, v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedHTTPCookieStorage);
  v5 = objc_msgSend(v4, sel_cookies);

  if (v5)
  {
    sub_1BA49A224(0, &qword_1EF2ADA88);
    sub_1BB872DB4();

  }
  v6 = (void *)objc_opt_self();
  sub_1BA49A224(0, &qword_1EF2ADA88);
  v7 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_requestHeaderFieldsWithCookies_, v7);

  sub_1BB87276C();
  v9 = sub_1BB86BC50();
  MEMORY[0x1E0C80A78](v9);
  sub_1BA4AD288(0, (unint64_t *)&qword_1EF2ADA90, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  v10 = sub_1BB86EA58();
  swift_release();
  return v10;
}

uint64_t sub_1BAA2FE7C()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for FormatJSONDecoder();
  swift_allocObject();
  sub_1BACC8234(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for FormatFile();
  sub_1BA50AD30(&qword_1ED3B3030, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatFile, (uint64_t)&protocol conformance descriptor for FormatFile);
  sub_1BB86DC78();
  result = swift_release();
  if (!v0)
  {
    sub_1BAA30BEC(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1BAA2FF54@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1BB8729E8();
  MEMORY[0x1E0C80A78](v4);
  sub_1BB8729DC();
  result = sub_1BB8729B8();
  if (v6)
  {
    *a2 = result;
    a2[1] = v6;
  }
  else
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    swift_allocError();
    v8 = v7;
    v9 = sub_1BB86BC8C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BAA30070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1BB86BC8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  sub_1BAA2FC98(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v8 = (void *)sub_1BB86E854();
  v9 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v9;
}

uint64_t sub_1BAA30180@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t (*a6)(_QWORD)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  id v32[5];

  v29 = a7;
  v30 = a6;
  v28 = a5;
  v32[4] = *(id *)MEMORY[0x1E0C80C00];
  v12 = a3(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - v13;
  swift_bridgeObjectRetain();
  v15 = sub_1BA9F1950(a1, a2);
  v17 = v16;
  v18 = (void *)objc_opt_self();
  v19 = (void *)sub_1BB86C6DC();
  v32[0] = 0;
  v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, v19, 0, v32);

  if (!v20)
  {
    v23 = v32[0];
    sub_1BB86C484();

LABEL_7:
    swift_willThrow();
    return sub_1BA69D314(v15, v17);
  }
  v21 = v32[0];
  sub_1BB873B64();
  swift_unknownObjectRelease();
  sub_1BAA31240();
  if ((swift_dynamicCast() & 1) == 0)
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  v27 = v31;
  sub_1BB86DC9C();
  swift_allocObject();
  sub_1BB86DC90();
  sub_1BA50AD30(a4, 255, a3, (uint64_t)&unk_1BB89F460);
  sub_1BB86DC78();
  sub_1BA69D314(v15, v17);
  swift_release();
  if (v7)
    return swift_bridgeObjectRelease();
  v24 = v28(0);
  v25 = v29;
  v26 = v29 + *(int *)(v24 + 36);
  sub_1BA4C2DD8((uint64_t)v14, v26, a3);
  sub_1BA4C2DD8(v26, v25, v30);
  *(_QWORD *)(v25 + *(int *)(v24 + 40)) = v27;
  return sub_1BA4A2E80((uint64_t)v14, a3);
}

void sub_1BAA30460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD aBlock[6];

  v11 = sub_1BB86BC8C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  v16 = swift_projectBox();
  swift_retain();
  v17 = sub_1BAA2BEFC();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16, v11);
  v18 = (void *)sub_1BB86BC38();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a6;
  v19[5] = sub_1BAA30C34;
  v19[6] = v15;
  aBlock[4] = sub_1BAA30C70;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BAF35F80;
  aBlock[3] = &block_descriptor_13;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  v21 = objc_msgSend(v17, sel_dataTaskWithRequest_completionHandler_, v18, v20);
  _Block_release(v20);

  objc_msgSend(v21, sel_resume);
}

void sub_1BAA3063C(uint64_t a1, unint64_t a2, void *a3, void *a4, void (*a5)(void *), uint64_t a6, uint64_t a7, void (*a8)(uint64_t, unint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  v13 = sub_1BB8729E8();
  MEMORY[0x1E0C80A78](v13);
  v14 = sub_1BB86BC8C();
  v15 = swift_projectBox();
  if (a4)
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v16 = (void *)swift_allocError();
    v18 = v17;
    sub_1BAA30E74();
    v20 = (char *)v18 + *(int *)(v19 + 48);
    *v18 = a4;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v20, v15, v14);
    swift_storeEnumTagMultiPayload();
    v21 = a4;
    a5(v16);

    return;
  }
  v48 = v14;
  if (!a3 || (objc_opt_self(), (v22 = swift_dynamicCastObjCClass()) == 0))
  {
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v27 = (void *)swift_allocError();
    v29 = v28;
    sub_1BAA30C9C();
    v31 = (char *)v29 + *(int *)(v30 + 64);
    *v29 = a3;
    v29[1] = a1;
    v29[2] = a2;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v31, v15);
    swift_storeEnumTagMultiPayload();
    v32 = a3;
    sub_1BA86B484(a1, a2);
    a5(v27);

    return;
  }
  v23 = (void *)v22;
  v47 = a3;
  if (objc_msgSend(v23, sel_statusCode) == (id)200)
  {
    if (a2 >> 60 != 15)
    {
      sub_1BA69D44C(a1, a2);
      a8(a1, a2);
      sub_1BA69D490(a1, a2);

      return;
    }
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v24 = (void *)swift_allocError();
    v26 = v25;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v26, v15, v14);
    goto LABEL_15;
  }
  if (a2 >> 60 == 15)
  {
LABEL_14:
    type metadata accessor for DebugNewsroomServiceError();
    sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
    v24 = (void *)swift_allocError();
    v42 = v41;
    sub_1BAA30DA0();
    v44 = (char *)v42 + *(int *)(v43 + 64);
    v45 = objc_msgSend(v23, sel_statusCode);
    v42[1] = 0;
    v42[2] = 0;
    *v42 = v45;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v44, v15, v14);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    a5(v24);

    goto LABEL_16;
  }
  sub_1BA69D44C(a1, a2);
  sub_1BB8729DC();
  sub_1BAA30E30();
  v33 = sub_1BB8729C4();
  if (!v34)
  {
    sub_1BA69D490(a1, a2);
    goto LABEL_14;
  }
  v35 = v34;
  v46 = v33;
  type metadata accessor for DebugNewsroomServiceError();
  sub_1BA50AD30(&qword_1EF2ADA70, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomServiceError, (uint64_t)&unk_1BB900000);
  v36 = (void *)swift_allocError();
  v38 = v37;
  sub_1BAA30DA0();
  v40 = (char *)v38 + *(int *)(v39 + 64);
  *v38 = objc_msgSend(v23, sel_statusCode);
  v38[1] = v46;
  v38[2] = v35;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v40, v15, v48);
  swift_storeEnumTagMultiPayload();
  a5(v36);

  sub_1BA69D490(a1, a2);
LABEL_16:

}

uint64_t type metadata accessor for DebugNewsroomService()
{
  return objc_opt_self();
}

void sub_1BAA30BA8(uint64_t a1)
{
  sub_1BA5AA2AC(a1, &qword_1EF2AAC78, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomLayoutData, sub_1BAA30BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DebugNewsroomContainer);
}

uint64_t sub_1BAA30BCC()
{
  return sub_1BA50AD30(&qword_1EF2AAC80, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomLayoutData, (uint64_t)&unk_1BB8A4630);
}

void sub_1BAA30BEC(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2ADA80, (uint64_t (*)(uint64_t))type metadata accessor for FormatFile, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4B70]);
}

uint64_t sub_1BAA30C08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BAA30C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BAA30460(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1BAA30C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB577E80(a1, a2, *(uint64_t (**)(_QWORD *))(v2 + 16));
}

uint64_t sub_1BAA30C3C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1BAA30C70(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  sub_1BAA3063C(a1, a2, a3, a4, *(void (**)(void *))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(void (**)(uint64_t, unint64_t))(v4 + 40));
}

void sub_1BAA30C9C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EF2ADA98)
  {
    sub_1BAA30D3C();
    sub_1BA4AD288(255, &qword_1ED3A3268, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BB86BC8C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EF2ADA98);
  }
}

void sub_1BAA30D3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2ADAA0)
  {
    sub_1BA49A224(255, &qword_1EF2ABA50);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2ADAA0);
  }
}

void sub_1BAA30DA0()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EF2ADAA8)
  {
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BB86BC8C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EF2ADAA8);
  }
}

unint64_t sub_1BAA30E30()
{
  unint64_t result;

  result = qword_1EF2ADAB0;
  if (!qword_1EF2ADAB0)
  {
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0CB0368], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF2ADAB0);
  }
  return result;
}

void sub_1BAA30E74()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2ADAB8)
  {
    sub_1BA8EBDF8();
    sub_1BB86BC8C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2ADAB8);
  }
}

uint64_t sub_1BAA30EE4()
{
  uint64_t v0;

  return sub_1BAA30070(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BAA30EFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_1BB29F324();
  if (!v8)
    goto LABEL_24;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = sub_1BA6E35A8(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1BB4C4EDC();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = (uint64_t *)(v22[6] + 16 * v15);
    *v24 = v10;
    v24[1] = v11;
    *(_QWORD *)(v22[7] + 8 * v15) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    v28 = sub_1BB29F324();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v37 = (_QWORD *)*a5;
        v39 = sub_1BA6E35A8(v31, v32);
        v40 = v37[2];
        v41 = (v38 & 1) == 0;
        v42 = v40 + v41;
        if (__OFADD__(v40, v41))
          goto LABEL_25;
        v43 = v38;
        if (v37[3] < v42)
        {
          sub_1BB4B2A70(v42, 1);
          v44 = sub_1BA6E35A8(v31, v32);
          if ((v43 & 1) != (v45 & 1))
            goto LABEL_27;
          v39 = v44;
        }
        v46 = (_QWORD *)*a5;
        if ((v43 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v34 = v46[7];
          swift_unknownObjectRelease();
          *(_QWORD *)(v34 + 8 * v39) = v33;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          v47 = (uint64_t *)(v46[6] + 16 * v39);
          *v47 = v31;
          v47[1] = v32;
          *(_QWORD *)(v46[7] + 8 * v39) = v33;
          v48 = v46[2];
          v26 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v26)
            goto LABEL_26;
          v46[2] = v49;
        }
        v31 = sub_1BB29F324();
        v32 = v35;
        v33 = v36;
      }
      while (v35);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BA6EBD18();
    return swift_release();
  }
  sub_1BB4B2A70(v18, a4 & 1);
  v20 = sub_1BA6E35A8(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v23 = v22[7];
    swift_unknownObjectRelease();
    *(_QWORD *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

uint64_t sub_1BAA311E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BAA30180(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t (*)(uint64_t))sub_1BAA3121C, &qword_1EF2ADAD8, (uint64_t (*)(_QWORD))sub_1BAA30BA8, (uint64_t (*)(_QWORD))type metadata accessor for DebugNewsroomLayoutData, a2);
}

void sub_1BAA3121C(uint64_t a1)
{
  sub_1BA5AA2AC(a1, &qword_1EF2ADAC8, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomLayoutData, sub_1BAA30BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DebugNewsroomWrapper);
}

void sub_1BAA31240()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2ADAD0)
  {
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2ADAD0);
  }
}

uint64_t sub_1BAA312AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BAA314AC(a1);
}

void sub_1BAA312C0(uint64_t a1)
{
  sub_1BA5AA2AC(a1, &qword_1EF2AAC88, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomThemeData, sub_1BAA312E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DebugNewsroomContainer);
}

uint64_t sub_1BAA312E4()
{
  return sub_1BA50AD30(&qword_1EF2AAC90, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomThemeData, (uint64_t)&unk_1BB89B6E8);
}

uint64_t sub_1BAA31304()
{
  uint64_t v0;

  return sub_1BAA2FB34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BAA3131C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BAA30180(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t (*)(uint64_t))sub_1BAA31358, &qword_1EF2ADAE8, (uint64_t (*)(_QWORD))sub_1BAA312C0, (uint64_t (*)(_QWORD))type metadata accessor for DebugNewsroomThemeData, a2);
}

void sub_1BAA31358(uint64_t a1)
{
  sub_1BA5AA2AC(a1, &qword_1EF2ADAE0, (uint64_t (*)(uint64_t))type metadata accessor for DebugNewsroomThemeData, sub_1BAA312E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DebugNewsroomWrapper);
}

void sub_1BAA3137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BAA2C8E8(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_1BAA31388()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BAA313AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1BAA313E8(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  sub_1BAA2CAD4(a1, a2, a3, a4, *(void (**)(void *))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void (**)(uint64_t))(v4 + 48), *(_QWORD *)(v4 + 56));
}

uint64_t sub_1BAA31414@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t objectdestroy_8Tm_1()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BB86BC8C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BAA314AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BB86BC8C() - 8) + 80);
  return sub_1BAA2FF54(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t destroy for MIMEPart(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1BA69D314(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

_QWORD *initializeWithCopy for MIMEPart(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[8];
  v8 = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA69D44C(v7, v8);
  a1[8] = v7;
  a1[9] = v8;
  return a1;
}

_QWORD *assignWithCopy for MIMEPart(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[8];
  v4 = a2[9];
  sub_1BA69D44C(v5, v4);
  v6 = a1[8];
  v7 = a1[9];
  a1[8] = v5;
  a1[9] = v4;
  sub_1BA69D314(v6, v7);
  return a1;
}

_QWORD *assignWithTake for MIMEPart(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a1[8];
  v9 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_1BA69D314(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for MIMEPart()
{
  return &type metadata for MIMEPart;
}

uint64_t sub_1BAA31720()
{
  return sub_1BAA31304();
}

uint64_t sub_1BAA31734()
{
  return sub_1BAA30EE4();
}

uint64_t sub_1BAA31748()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormatNodeDebugData()
{
  return objc_opt_self();
}

char *sub_1BAA3179C(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = OBJC_IVAR____TtC8NewsFeed14GapOfflineView_offlineLabel;
  v11 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v12 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  v18.receiver = v12;
  v18.super_class = ObjectType;
  v13 = (char *)objc_msgSendSuper2(&v18, sel_initWithFrame_, a1, a2, a3, a4);
  v14 = *(void **)&v13[OBJC_IVAR____TtC8NewsFeed14GapOfflineView_offlineLabel];
  v15 = v13;
  objc_msgSend(v15, sel_addSubview_, v14);
  objc_msgSend(v14, sel_setTextAlignment_, 1);
  v16 = v14;
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  return v15;
}

id GapOfflineView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void GapOfflineView.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8NewsFeed14GapOfflineView_offlineLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  sub_1BB873EAC();
  __break(1u);
}

id GapOfflineView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BAA31AAC()
{
  sub_1BA83483C(qword_1ED3B4268, (uint64_t)&protocol conformance descriptor for GapOfflineView);
  JUMPOUT(0x1BCCE1E7CLL);
}

uint64_t FormatPostPurchaseData.postPurchaseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for FormatPostPurchaseData();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAA31BA8(v1, (uint64_t)v5);
  v6 = sub_1BB86C67C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 2, v6))
  {
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v5, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, v8, 1, v6);
}

uint64_t sub_1BAA31BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatPostPurchaseData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatPostPurchaseData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86C67C();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for FormatPostPurchaseData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1BB86C67C();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for FormatPostPurchaseData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BB86C67C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for FormatPostPurchaseData(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_1BB86C67C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for FormatPostPurchaseData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BB86C67C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for FormatPostPurchaseData(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_1BB86C67C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatPostPurchaseData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA32050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1BB86C67C();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FormatPostPurchaseData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BAA320A8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1BAA320FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_1BAA32134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_1BAA32174@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v2 = *a1;
  v55 = *(_QWORD *)(v2 + 16);
  if (!v55)
  {
    result = swift_bridgeObjectRelease();
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_43;
  }
  v3 = 0;
  v54 = v2 + 32;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v53 = v2;
  while (2)
  {
    if (v3 >= *(_QWORD *)(v2 + 16))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      result = sub_1BB874560();
      __break(1u);
      return result;
    }
    v5 = (uint64_t *)(v54 + 104 * v3);
    v6 = *v5;
    v7 = v5[2];
    v8 = v5[3];
    v9 = v5[4];
    v10 = v5[5];
    v11 = v5[6];
    v12 = v5[8];
    v13 = v5[9];
    v71 = v5[10];
    v56 = v3;
    v58 = v5[11];
    v62 = v5[7];
    v63 = v5[12];
    v84 = v5[1];
    v85 = v7;
    v65 = v9;
    v86 = v8;
    v87 = v9;
    v88 = v10;
    v89 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BAA3501C(v8, v9);
    sub_1BAA3504C(v62, v12, v13, v71);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BAA3501C(v8, v9);
    v61 = v12;
    sub_1BAA3504C(v62, v12, v13, v71);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BAA3501C(v8, v9);
    sub_1BAA34270(&v84, &v90);
    v14 = v92;
    v80 = v91;
    v81 = v90;
    v15 = v93;
    v16 = v94;
    v82 = v95;
    v83 = v96;
    if (v62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BAA3501C(v13, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA6CABAC(v8, v9);
      sub_1BAA350AC(v62, v61, v13, v71);
      v84 = v62;
      v85 = v61;
      v86 = v13;
      v87 = v71;
      v88 = v58;
      v89 = v63;
      sub_1BAA34270(&v84, &v90);
      v78 = v91;
      v79 = (uint64_t)v90;
      v76 = v93;
      v77 = v92;
      v74 = v95;
      v75 = v94;
      v73 = v96;
      v17 = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA6CABAC(v8, v9);
      sub_1BAA350AC(0, v61, v13, v71);
      v78 = 0;
      v79 = 0;
      v76 = 0;
      v77 = 0;
      v74 = 0;
      v75 = 0;
      v73 = 0;
      v17 = 0;
    }
    v18 = *(_QWORD *)(v6 + 56);
    v57 = v56 + 1;
    v59 = v6 + 56;
    v19 = 1 << *(_BYTE *)(v6 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA6CABAC(v8, v65);
    sub_1BAA350AC(v17, v61, v13, v71);
    v20 = 0;
    if (v19 < 64)
      v21 = ~(-1 << v19);
    else
      v21 = -1;
    v22 = v21 & v18;
    v60 = (unint64_t)(v19 + 63) >> 6;
    v68 = v6;
    v69 = v16;
    while (1)
    {
      if (v22)
      {
        v70 = (v22 - 1) & v22;
        v72 = v20;
        v27 = __clz(__rbit64(v22)) | (v20 << 6);
        goto LABEL_30;
      }
      v28 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_46;
      if (v28 >= v60)
        break;
      v29 = *(_QWORD *)(v59 + 8 * v28);
      v30 = v20 + 1;
      if (!v29)
      {
        v30 = v20 + 2;
        if (v20 + 2 >= v60)
          break;
        v29 = *(_QWORD *)(v59 + 8 * v30);
        if (!v29)
        {
          v30 = v20 + 3;
          if (v20 + 3 >= v60)
            break;
          v29 = *(_QWORD *)(v59 + 8 * v30);
          if (!v29)
          {
            v31 = v20 + 4;
            if (v20 + 4 >= v60)
              break;
            v29 = *(_QWORD *)(v59 + 8 * v31);
            if (!v29)
            {
              while (1)
              {
                v30 = v31 + 1;
                if (__OFADD__(v31, 1))
                  goto LABEL_47;
                if (v30 >= v60)
                  goto LABEL_3;
                v29 = *(_QWORD *)(v59 + 8 * v30);
                ++v31;
                if (v29)
                  goto LABEL_29;
              }
            }
            v30 = v20 + 4;
          }
        }
      }
LABEL_29:
      v70 = (v29 - 1) & v29;
      v72 = v30;
      v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_30:
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v27);
      v33 = *v32;
      v34 = v32[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = v14;
      v36 = v15;
      sub_1BAA3501C(v14, v15);
      swift_bridgeObjectRetain();
      sub_1BAA3510C(v79, v78, v77, v76);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v90 = v4;
      v39 = sub_1BA6E35A8(v33, v34);
      v40 = v4[2];
      v41 = (v38 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v43 = v38;
      if (v4[3] >= v42)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v4 = v90;
          if ((v38 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          sub_1BB4C50D4();
          v4 = v90;
          if ((v43 & 1) != 0)
            goto LABEL_12;
        }
      }
      else
      {
        sub_1BB4B2DBC(v42, isUniquelyReferenced_nonNull_native);
        v44 = sub_1BA6E35A8(v33, v34);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_49;
        v39 = v44;
        v4 = v90;
        if ((v43 & 1) != 0)
        {
LABEL_12:
          v23 = (_QWORD *)(v4[7] + 112 * v39);
          v24 = v23[2];
          v25 = v23[3];
          v26 = v23[7];
          v67 = v23[8];
          v64 = v23[10];
          v66 = v23[9];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BA6CABAC(v24, v25);
          swift_bridgeObjectRelease();
          sub_1BAA35178(v26, v67, v66, v64);
          *v23 = v81;
          v23[1] = v80;
          v14 = v35;
          v23[2] = v35;
          v23[3] = v36;
          v15 = v36;
          v23[4] = v69;
          v23[5] = v82;
          v23[6] = v83;
          v23[7] = v79;
          v23[8] = v78;
          v23[9] = v77;
          v23[10] = v76;
          v23[11] = v75;
          v23[12] = v74;
          v23[13] = v73;
          goto LABEL_13;
        }
      }
      v4[(v39 >> 6) + 8] |= 1 << v39;
      v46 = (uint64_t *)(v4[6] + 16 * v39);
      *v46 = v33;
      v46[1] = v34;
      v47 = (_QWORD *)(v4[7] + 112 * v39);
      *v47 = v81;
      v47[1] = v80;
      v47[2] = v35;
      v47[3] = v36;
      v47[4] = v69;
      v47[5] = v82;
      v47[6] = v83;
      v47[7] = v79;
      v47[8] = v78;
      v47[9] = v77;
      v47[10] = v76;
      v47[11] = v75;
      v47[12] = v74;
      v47[13] = v73;
      v48 = v4[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_45;
      v14 = v35;
      v15 = v36;
      v4[2] = v50;
      swift_bridgeObjectRetain();
LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v68;
      v22 = v70;
      v20 = v72;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1BA6CABAC(v14, v15);
    swift_bridgeObjectRelease();
    sub_1BAA35178(v79, v78, v77, v76);
    v3 = v57;
    v2 = v53;
    if (v57 != v55)
      continue;
    break;
  }
  result = swift_bridgeObjectRelease();
LABEL_43:
  *a2 = v4;
  return result;
}

uint64_t SportsEmbedConfiguration.embedConfigs(tagId:embedConfigKind:groupType:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;

  v37 = *v5;
  if (sub_1BAA33178(a1, a2, a4, a5))
  {
    if (qword_1ED3AAC10 != -1)
      swift_once();
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87FC80;
    __asm { BR              X10 }
  }
  v36 = a3 >> 61;
  if (a3 >> 61 != 1
    || (sub_1BA89C564(),
        swift_retain(),
        sub_1BB86EC68(),
        v11 = *(void **)(v37 + 64),
        swift_unknownObjectRetain(),
        swift_release(),
        swift_release(),
        !v11))
  {
LABEL_12:
    SportsEmbedConfigurationKind.leagueTag.getter(a3);
    if (v28)
    {
      v29 = objc_msgSend(v28, sel_identifier);
      v30 = sub_1BB8729A0();
      v32 = v31;

      v33 = sub_1BAA33350(v30, v32, a4, a5);
      swift_bridgeObjectRelease();
      if (v33)
      {
        if (qword_1ED3AAC10 != -1)
          swift_once();
        sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87D7A0;
        __asm { BR              X10 }
      }
      swift_unknownObjectRelease();
    }
    if (qword_1ED3AAC10 != -1)
      swift_once();
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87A390;
    __asm { BR              X10 }
  }
  v12 = objc_msgSend(v11, sel_identifier);
  v13 = sub_1BB8729A0();
  v15 = v14;

  v16 = sub_1BAA33350(v13, v15, a4, a5);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  if (qword_1ED3AAC10 != -1)
    swift_once();
  v17 = (void *)qword_1ED476750;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1BB87D7A0;
  v19 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEA968];
  v20 = sub_1BA6A2D8C();
  *(_QWORD *)(v18 + 64) = v20;
  *(_QWORD *)(v18 + 32) = 0x74656B63617242;
  *(_QWORD *)(v18 + 40) = 0xE700000000000000;
  v21 = *(_QWORD *)(v16 + 16);
  v22 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v18 + 96) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v18 + 104) = v22;
  *(_QWORD *)(v18 + 72) = v21;
  *(_QWORD *)(v18 + 136) = v19;
  *(_QWORD *)(v18 + 144) = v20;
  *(_QWORD *)(v18 + 112) = a1;
  *(_QWORD *)(v18 + 120) = a2;
  swift_bridgeObjectRetain();
  v23 = v17;
  v24 = objc_msgSend(v11, sel_identifier);
  v25 = sub_1BB8729A0();
  v27 = v26;

  *(_QWORD *)(v18 + 176) = v19;
  *(_QWORD *)(v18 + 184) = v20;
  *(_QWORD *)(v18 + 152) = v25;
  *(_QWORD *)(v18 + 160) = v27;
  v34 = sub_1BB87330C();
  sub_1BB86EF44("Sports %{public}@ config found %ld embed configs for %{public}@ for children of %{public}@", 90, 2, &dword_1BA493000, v23, v34, v18);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1BAA33178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *v4;
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v10 = sub_1BA6E35A8(a1, a2);
  if ((v11 & 1) != 0)
  {
    v23 = a3;
    v12 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 112 * v10);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v25 = v12[3];
    v16 = v12[7];
    v17 = v12[8];
    v18 = v12[9];
    v24 = v12[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BAA3501C(v15, v25);
    swift_bridgeObjectRetain();
    sub_1BAA3510C(v16, v17, v18, v24);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      v19 = sub_1BA6E35A8(v23, a4);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v21;
LABEL_10:
        sub_1BA6CABAC(v15, v25);
        swift_bridgeObjectRelease();
        sub_1BAA35178(v16, v17, v18, v24);
        return v13;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BAA33350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *v4;
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v10 = sub_1BA6E35A8(a1, a2);
  if ((v11 & 1) != 0)
  {
    v29 = a3;
    v30 = a4;
    v12 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 112 * v10);
    v13 = v12[1];
    v14 = v12[3];
    v38 = v12[2];
    v15 = v12[8];
    v16 = v12[9];
    v17 = v12[10];
    v35 = v12[7];
    v36 = *v12;
    swift_bridgeObjectRetain();
    v37 = v13;
    swift_bridgeObjectRetain();
    v32 = v14;
    v18 = v15;
    sub_1BAA3501C(v38, v14);
    swift_bridgeObjectRetain();
    v31 = v17;
    sub_1BAA3510C(v35, v15, v16, v17);
    swift_bridgeObjectRelease();
    if (v35)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = v17;
      sub_1BAA3501C(v16, v17);
      v20 = v35;
      v21 = v38;
      v22 = v32;
      v23 = v18;
      v33 = v31;
      v34 = v16;
      v24 = v18;
    }
    else
    {
      v20 = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v38;
      v22 = v32;
      sub_1BAA3501C(v38, v32);
      v23 = v18;
      v19 = v31;
      v33 = v32;
      v34 = v38;
      v24 = v37;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA6CABAC(v21, v22);
    swift_bridgeObjectRelease();
    sub_1BAA35178(v35, v23, v16, v19);
    if (*(_QWORD *)(v24 + 16))
    {
      swift_bridgeObjectRetain();
      v25 = sub_1BA6E35A8(v29, v30);
      if ((v26 & 1) != 0)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = v27;
LABEL_13:
        sub_1BA6CABAC(v34, v33);
        swift_bridgeObjectRelease();
        return v20;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  return 0;
}

void SportsEmbedConfiguration.recordConfig(tagId:embedConfigKind:groupType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1BAA33CE4(a1, a2, a4, a5, (uint64_t)&v16);
  if (v17)
  {
    if (qword_1ED3AAC10 != -1)
      swift_once();
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87A390;
    __asm { BR              X10 }
  }
  SportsEmbedConfigurationKind.leagueTag.getter(a3);
  if (v10)
  {
    v11 = objc_msgSend(v10, sel_identifier);
    v12 = sub_1BB8729A0();
    v14 = v13;

    sub_1BAA33F40(v12, v14, a4, a5, &v16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (qword_1ED3AAC10 != -1)
        swift_once();
      sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1BB87FC80;
      *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v15 + 64) = sub_1BA6A2D8C();
      *(_QWORD *)(v15 + 32) = a1;
      *(_QWORD *)(v15 + 40) = a2;
      __asm { BR              X12 }
    }
    swift_unknownObjectRelease();
  }
  if (qword_1ED3AAC10 != -1)
    swift_once();
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BB87A390;
  __asm { BR              X10 }
}

uint64_t sub_1BAA33CE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v7 = *v5;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_7;
  v11 = result;
  swift_bridgeObjectRetain();
  v12 = sub_1BA6E35A8(v11, a2);
  if ((v13 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return result;
  }
  v26 = a3;
  v28 = a4;
  v14 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 112 * v12);
  v15 = v14[2];
  v29 = v14[4];
  v30 = v14[3];
  v16 = v14[6];
  v33 = v14[5];
  v17 = v14[7];
  v31 = v14[8];
  v19 = v14[9];
  v18 = v14[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BAA3501C(v15, v30);
  swift_bridgeObjectRetain();
  v32 = v19;
  sub_1BAA3510C(v17, v31, v19, v18);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_9:
    v25 = v33;
    sub_1BAA3501C(v15, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA6CABAC(v15, v30);
    swift_bridgeObjectRelease();
    result = sub_1BAA35178(v17, v31, v19, v18);
    *(_QWORD *)a5 = v15;
    *(_QWORD *)(a5 + 8) = v30;
    *(_QWORD *)(a5 + 16) = v29;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v20 = sub_1BA6E35A8(v26, v28);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v22 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 32 * v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v22[3];
  v27 = v22[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6CABAC(v15, v30);
  swift_bridgeObjectRelease();
  result = sub_1BAA35178(v17, v31, v32, v18);
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(a5 + 8) = v23;
  *(_QWORD *)(a5 + 16) = v27;
LABEL_10:
  *(_QWORD *)(a5 + 24) = v25;
  return result;
}

uint64_t sub_1BAA33F40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = *v5;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  v11 = result;
  swift_bridgeObjectRetain();
  v12 = sub_1BA6E35A8(v11, a2);
  if ((v13 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_6:
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    return result;
  }
  v35 = a5;
  v34 = a3;
  v14 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 112 * v12);
  v15 = v14[2];
  v16 = v14[3];
  v17 = v14[4];
  v18 = v14[6];
  v41 = v14[7];
  v42 = v14[5];
  v19 = v14[9];
  v44 = v14[8];
  v20 = v14[10];
  v43 = v14[11];
  v22 = v14[12];
  v21 = v14[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v16;
  v23 = v16;
  v24 = v44;
  v45 = v17;
  sub_1BAA3501C(v15, v23);
  swift_bridgeObjectRetain();
  sub_1BAA3510C(v41, v44, v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v41)
  {
    sub_1BAA3501C(v19, v20);
    v25 = v21;
    v39 = v20;
    v40 = v19;
    v37 = v22;
    v38 = v43;
    v26 = v15;
  }
  else
  {
    sub_1BAA3501C(v15, v36);
    v25 = v18;
    v39 = v36;
    v40 = v15;
    v37 = v42;
    v38 = v45;
    v26 = v15;
    v24 = v44;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6CABAC(v26, v36);
  swift_bridgeObjectRelease();
  sub_1BAA35178(v41, v24, v19, v20);
  if (*(_QWORD *)(v25 + 16))
  {
    swift_bridgeObjectRetain();
    v27 = sub_1BA6E35A8(v34, a4);
    if ((v28 & 1) != 0)
    {
      v29 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 32 * v27);
      v31 = *v29;
      v30 = v29[1];
      v33 = v29[2];
      v32 = v29[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA6CABAC(v40, v39);
      result = swift_bridgeObjectRelease();
      *v35 = v31;
      v35[1] = v30;
      v35[2] = v33;
      v35[3] = v32;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  sub_1BAA3501C(v40, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6CABAC(v40, v39);
  result = swift_bridgeObjectRelease();
  *v35 = v40;
  v35[1] = v39;
  v35[2] = v38;
  v35[3] = v37;
  return result;
}

uint64_t sub_1BAA34270@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRetain();
  sub_1BAA3501C(v4, v5);
  v50 = v2;
  swift_bridgeObjectRelease();
  v53 = v5;
  v54 = v4;
  v51 = v7;
  v52 = v6;
  sub_1BA6CABAC(v4, v5);
  v8 = *(_QWORD *)(v3 + 16);
  if (!v8)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v56 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_29:
    result = swift_bridgeObjectRelease();
    *a2 = v50;
    a2[1] = v10;
    a2[2] = v54;
    a2[3] = v53;
    a2[4] = v52;
    a2[5] = v51;
    a2[6] = v56;
    return result;
  }
  v9 = (uint64_t *)(v3 + 40);
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v56 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v57 = v8;
    v13 = *(v9 - 1);
    v14 = *v9;
    v15 = v9[1];
    v16 = v9[2];
    v18 = v9[3];
    v17 = v9[4];
    v19 = v9[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58 = v16;
    v59 = v17;
    v60 = v19;
    sub_1BAA3501C(v16, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = sub_1BA6E35A8(v13, v14);
    v23 = v10[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v10[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        sub_1BB4C50B8();
        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    else
    {
      sub_1BB4B2DA0(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_1BA6E35A8(v13, v14);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_34;
      v22 = v27;
      if ((v26 & 1) != 0)
      {
LABEL_12:
        v29 = v10[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v29 + 8 * v22) = v15;
        goto LABEL_16;
      }
    }
    v10[(v22 >> 6) + 8] |= 1 << v22;
    v30 = (uint64_t *)(v10[6] + 16 * v22);
    *v30 = v13;
    v30[1] = v14;
    *(_QWORD *)(v10[7] + 8 * v22) = v15;
    v31 = v10[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_32;
    v10[2] = v33;
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18)
    {
      swift_bridgeObjectRetain();
      sub_1BAA3501C(v58, v18);
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v36 = sub_1BA6E35A8(v13, v14);
      v37 = v56[2];
      v38 = (v35 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_31;
      v40 = v35;
      if (v56[3] >= v39)
      {
        if ((v34 & 1) == 0)
          sub_1BB4C4EE8();
      }
      else
      {
        sub_1BB4B2A7C(v39, v34);
        v41 = sub_1BA6E35A8(v13, v14);
        if ((v40 & 1) != (v42 & 1))
          goto LABEL_34;
        v36 = v41;
      }
      if ((v40 & 1) != 0)
      {
        v43 = (uint64_t *)(v56[7] + 32 * v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v58;
        *v43 = v58;
        v43[1] = v18;
        v43[2] = v59;
        v43[3] = v60;
      }
      else
      {
        v56[(v36 >> 6) + 8] |= 1 << v36;
        v45 = (uint64_t *)(v56[6] + 16 * v36);
        *v45 = v13;
        v45[1] = v14;
        v46 = (uint64_t *)(v56[7] + 32 * v36);
        v44 = v58;
        *v46 = v58;
        v46[1] = v18;
        v46[2] = v59;
        v46[3] = v60;
        v47 = v56[2];
        v32 = __OFADD__(v47, 1);
        v48 = v47 + 1;
        if (v32)
          goto LABEL_33;
        v56[2] = v48;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v11 = v44;
      v12 = v18;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v58;
      v12 = 0;
    }
    sub_1BA6CABAC(v11, v12);
    v9 += 7;
    v8 = v57 - 1;
    if (v57 == 1)
      goto LABEL_29;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SportsEmbedConfiguration()
{
  return &type metadata for SportsEmbedConfiguration;
}

uint64_t destroy for SportsEmbedTagConfiguration(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[10])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SportsEmbedTagConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v7;
  }
  v8 = a2[7];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = a2[8];
    a1[7] = v8;
    a1[8] = v9;
    v10 = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10)
    {
      a1[9] = a2[9];
      a1[10] = v10;
      v11 = a2[12];
      a1[11] = a2[11];
      a1[12] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v13;
    }
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v12;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    a1[13] = a2[13];
  }
  return a1;
}

_QWORD *assignWithCopy for SportsEmbedTagConfiguration(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 2;
  v5 = a2 + 2;
  v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BAA34B14((uint64_t)(a1 + 2));
      v7 = *((_OWORD *)a2 + 2);
      *v4 = *v5;
      *((_OWORD *)a1 + 2) = v7;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 2);
    *v4 = *v5;
    *((_OWORD *)a1 + 2) = v8;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a1 + 7;
  v11 = (__int128 *)(a2 + 7);
  v10 = a2[7];
  if (a1[7])
  {
    if (v10)
    {
      a1[7] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1 + 9;
      v13 = a2 + 9;
      v14 = a2[10];
      if (a1[10])
      {
        if (v14)
        {
          a1[9] = a2[9];
          a1[10] = a2[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          a1[11] = a2[11];
          a1[12] = a2[12];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1BAA34B14((uint64_t)(a1 + 9));
          v22 = *(_OWORD *)(a2 + 11);
          *v12 = *v13;
          *(_OWORD *)(a1 + 11) = v22;
        }
      }
      else if (v14)
      {
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = *(_OWORD *)(a2 + 11);
        *v12 = *v13;
        *(_OWORD *)(a1 + 11) = v24;
      }
      a1[13] = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BAA34B48((uint64_t)(a1 + 7));
      v17 = *(_OWORD *)(a2 + 9);
      v16 = *(_OWORD *)(a2 + 11);
      v18 = *v11;
      a1[13] = a2[13];
      *(_OWORD *)(a1 + 9) = v17;
      *(_OWORD *)(a1 + 11) = v16;
      *v9 = v18;
    }
  }
  else if (v10)
  {
    a1[7] = v10;
    a1[8] = a2[8];
    v15 = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15)
    {
      a1[9] = a2[9];
      a1[10] = a2[10];
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v23;
    }
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v11;
    v20 = *(_OWORD *)(a2 + 9);
    v21 = *(_OWORD *)(a2 + 11);
    a1[13] = a2[13];
    *(_OWORD *)(a1 + 9) = v20;
    *(_OWORD *)(a1 + 11) = v21;
    *v9 = v19;
  }
  return a1;
}

uint64_t sub_1BAA34B14(uint64_t a1)
{
  destroy for SportsConfigResourceParameter();
  return a1;
}

uint64_t sub_1BAA34B48(uint64_t a1)
{
  destroy for SportsEmbedGroupConfiguration(a1);
  return a1;
}

_QWORD *assignWithTake for SportsEmbedTagConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  if (a1[3])
  {
    v4 = a2[3];
    if (v4)
    {
      a1[2] = a2[2];
      a1[3] = v4;
      swift_bridgeObjectRelease();
      v5 = a2[5];
      a1[4] = a2[4];
      a1[5] = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1BAA34B14((uint64_t)(a1 + 2));
  }
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v6;
LABEL_6:
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v7 = a2[7];
  if (a1[7])
  {
    if (v7)
    {
      a1[7] = v7;
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      swift_bridgeObjectRelease();
      if (a1[10])
      {
        v8 = a2[10];
        if (v8)
        {
          a1[9] = a2[9];
          a1[10] = v8;
          swift_bridgeObjectRelease();
          v9 = a2[12];
          a1[11] = a2[11];
          a1[12] = v9;
          swift_bridgeObjectRelease();
LABEL_15:
          a1[13] = a2[13];
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_1BAA34B14((uint64_t)(a1 + 9));
      }
      v11 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v11;
      goto LABEL_15;
    }
    sub_1BAA34B48((uint64_t)(a1 + 7));
  }
  v10 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 9) = v10;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  a1[13] = a2[13];
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatLayoutContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatLayoutContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsEmbedTagConfiguration()
{
  return &type metadata for SportsEmbedTagConfiguration;
}

uint64_t destroy for SportsEmbedGroupConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SportsEmbedGroupConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v7;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SportsEmbedGroupConfiguration(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 2;
  v5 = a2 + 2;
  v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BAA34B14((uint64_t)(a1 + 2));
      v7 = *((_OWORD *)a2 + 2);
      *v4 = *v5;
      *((_OWORD *)a1 + 2) = v7;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 2);
    *v4 = *v5;
    *((_OWORD *)a1 + 2) = v8;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SportsEmbedGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    sub_1BAA34B14(a1 + 16);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SportsEmbedGroupConfiguration()
{
  return &type metadata for SportsEmbedGroupConfiguration;
}

uint64_t sub_1BAA3501C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BAA3504C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_1BAA3501C(a3, a4);
  }
  return result;
}

uint64_t sub_1BAA350AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1BA6CABAC(a3, a4);
  }
  return result;
}

uint64_t sub_1BAA3510C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BAA3501C(a3, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BAA35178(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA6CABAC(a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FormatOptionExpression.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BAA35210()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_1BB873CB4();
  sub_1BB872AFC("ecord config for %{public}@");
  sub_1BB872AFC(v0);
  sub_1BB872AFC(v1);
  return 0;
}

uint64_t sub_1BAA35290()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_1BB873CB4();
  sub_1BB872AFC("FormatOptionExpression.compare(");
  sub_1BB872AFC(v0);
  sub_1BB872AFC(v1);
  return 0;
}

void FormatOptionExpression.Compare.operator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

void FormatOperator.evaluate<A>(lhs:rhs:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1BAA35354()
{
  return sub_1BB872958() & 1;
}

BOOL sub_1BAA353B8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _BYTE v5[40];

  sub_1BA711488(a3, (uint64_t)v5);
  return sub_1BA70FA90(a1);
}

uint64_t FormatOptionExpression.Compare.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatOptionExpression.Compare.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1BA7114EC(v2, v3, v4);
}

_BYTE *FormatOptionExpression.Compare.operator.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = *result;
  return result;
}

uint64_t (*FormatOptionExpression.Compare.operator.modify())(_QWORD)
{
  return nullsub_1;
}

void sub_1BAA35454(char *a1)
{
  sub_1BB7F7954(*a1);
}

void sub_1BAA35460()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BAA354B0()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BAA35518()
{
  __asm { BR              X10 }
}

uint64_t sub_1BAA35558()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BAA355AC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BAA355F8()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BAA35660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BAA3700C();
  *a1 = result;
  return result;
}

uint64_t sub_1BAA3568C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BAA356C0 + 4 * byte_1BB891AA0[*v0]))();
}

void sub_1BAA356C0(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

void sub_1BAA356D8(_QWORD *a1@<X8>)
{
  *a1 = 0x726F74617265706FLL;
  a1[1] = 0xE800000000000000;
}

void sub_1BAA356F4(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F6974706FLL;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1BAA3570C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BAA3700C();
  *a1 = result;
  return result;
}

uint64_t sub_1BAA35730()
{
  sub_1BA63BB38();
  return sub_1BB874710();
}

uint64_t sub_1BAA35758()
{
  sub_1BA63BB38();
  return sub_1BB87471C();
}

uint64_t sub_1BAA35784@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatOptionExpression.Compare.init(from:)(a1, a2);
}

uint64_t sub_1BAA35798(_QWORD *a1)
{
  return FormatOptionExpression.Compare.encode(to:)(a1);
}

uint64_t FormatOptionExpression.Exists.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void FormatOptionExpression.Exists.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void FormatOptionExpression.Exists.operator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

uint64_t FormatOptionExpression.Exists.Operator.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7473697845746F6ELL;
  else
    return 0x737473697865;
}

uint64_t sub_1BAA35830(char *a1, char *a2)
{
  return sub_1BB7F7AA8(*a1, *a2);
}

uint64_t sub_1BAA3583C()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BAA358BC()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BAA35918()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BAA35994(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x737473697865;
  if (*v1)
    v2 = 0x7473697845746F6ELL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE900000000000073;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BAA359D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatOptionExpression.Exists.init(from:)(a1, a2);
}

uint64_t sub_1BAA359EC(_QWORD *a1)
{
  return FormatOptionExpression.Exists.encode(to:)(a1);
}

void sub_1BAA35A0C(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v4 = type metadata accessor for FormatDerivedDataOption();
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = *(__int16 *)(v1 + 32);
  if (v12 < 0)
  {
    v16 = &v7[*(int *)(v5 + 28)];
    v17 = type metadata accessor for FormatVersionRequirement(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    *(_QWORD *)v7 = v9;
    *((_QWORD *)v7 + 1) = v8;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 2) = v10;
    v7[40] = 0;
    *((_QWORD *)v7 + 6) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BB3D7D48((uint64_t)v7);
    if (v2)
    {
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatDerivedDataOption);
      return;
    }
    sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatDerivedDataOption);
    sub_1BA738818();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
    *(_BYTE *)(inited + 32) = v10;
    v20 = sub_1BA862600(inited);
    swift_setDeallocating();
    swift_bridgeObjectRetain();
    sub_1BB3D7F90(v9, v8, v20, 0);
    sub_1BA636D30(v9, v8, v10, v11, v12);
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v12 & 1) != 0)
  {
    sub_1BA711500(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_WORD *)(v1 + 32));
    sub_1BA7114EC(v10, v11, 1);
    v18 = sub_1BAA35D8C(a1, v10, v11);
    sub_1BA636D1C(v10, v11, 1);
    if (v2)
      goto LABEL_9;
    swift_bridgeObjectRetain();
    sub_1BB3D7F90(v9, v8, (uint64_t)v18, 0);
    sub_1BA636D30(v9, v8, v10, v11, v12);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(v1 + 16);
  sub_1BA711500(v9, v8, v10, v11, v12);
  sub_1BA7114EC(v10, v11, 0);
  FormatOptionValue.type.getter();
  v13 = v23;
  sub_1BA738818();
  v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BB87CE70;
  *(_BYTE *)(v14 + 32) = v13;
  v15 = sub_1BA862600(v14);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  sub_1BB3D7F90(v9, v8, v15, 0);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA636D1C(v10, v11, 0);
LABEL_9:
    sub_1BA636D30(v9, v8, v10, v11, v12);
    return;
  }
  sub_1BA636D30(v9, v8, v10, v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA636D1C(v10, v11, 0);
  v22 = v10;
  sub_1BAC49F9C();
}

_OWORD *sub_1BAA35D8C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  char v9;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13[3];
  unsigned __int8 v14;
  _OWORD v15[4];

  v6 = a1[1];
  v15[0] = *a1;
  v15[1] = v6;
  v7 = a1[3];
  v15[2] = a1[2];
  v15[3] = v7;
  v12 = MEMORY[0x1E0DEE9E8];
  sub_1BA8EBB84((uint64_t)v15);
  v8 = v15;
  sub_1BB3D93C0(a2, a3, &v12, (uint64_t)v13);
  swift_bridgeObjectRelease();
  sub_1BA8EBC0C((uint64_t)v15);
  if (!v3)
  {
    if (v14 <= 1u)
    {
      v9 = v13[0];
      if (!v14)
      {
        sub_1BA738818();
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
        *(_BYTE *)(inited + 32) = v9;
        v8 = (_OWORD *)sub_1BA862600(inited);
        swift_setDeallocating();
        return v8;
      }
      sub_1BAA37054(v13[0], v13[1], v13[2], 1);
    }
    if (qword_1ED3BB4A8 != -1)
      swift_once();
    v8 = (_OWORD *)qword_1ED3B9688;
    swift_bridgeObjectRetain();
  }
  return v8;
}

void sub_1BAA35EB8(_OWORD *a1)
{
  sub_1BAA35A0C(a1);
}

uint64_t sub_1BAA35ECC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BB7ED6CC(*a1, *a2);
}

uint64_t sub_1BAA35ED8()
{
  sub_1BB8745CC();
  FormatOperator.rawValue.getter();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BAA35F3C()
{
  FormatOperator.rawValue.getter();
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BAA35F8C()
{
  sub_1BB8745CC();
  FormatOperator.rawValue.getter();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BAA35FEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FormatOperator.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BAA36010()
{
  return sub_1BAA35290();
}

uint64_t sub_1BAA36030()
{
  return sub_1BAA35210();
}

uint64_t _s8NewsFeed22FormatOptionExpressionO6ExistsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = *(unsigned __int8 *)(a1 + 17);
  v3 = *(unsigned __int8 *)(a2 + 17);
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = 0, (sub_1BB874398() & 1) != 0))
  {
    v6 = FormatOptionType.rawValue.getter();
    v8 = v7;
    if (v6 == FormatOptionType.rawValue.getter() && v8 == v9)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v10 = sub_1BB874398();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = 0;
      if ((v10 & 1) == 0)
        return v5 & 1;
    }
    if (v2)
      v11 = 0x7473697845746F6ELL;
    else
      v11 = 0x737473697865;
    if (v2)
      v12 = 0xE900000000000073;
    else
      v12 = 0xE600000000000000;
    if (v3)
      v13 = 0x7473697845746F6ELL;
    else
      v13 = 0x737473697865;
    if (v3)
      v14 = 0xE900000000000073;
    else
      v14 = 0xE600000000000000;
    if (v11 == v13 && v12 == v14)
      v5 = 1;
    else
      v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t _s8NewsFeed22FormatOptionExpressionO7CompareV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 33);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v10 = 0;
    if ((sub_1BB874398() & 1) == 0)
      return v10 & 1;
  }
  if (v4)
  {
    if ((v8 & 1) != 0)
    {
      if (v2 != v6 || v3 != v7)
      {
        v10 = 0;
        if ((sub_1BB874398() & 1) == 0)
          return v10 & 1;
      }
      goto LABEL_12;
    }
LABEL_15:
    v10 = 0;
    return v10 & 1;
  }
  if ((v8 & 1) != 0)
    goto LABEL_15;
  v16 = v6;
  v17 = v2;
  if ((static FormatOptionValue.== infix(_:_:)(&v17, &v16) & 1) == 0)
    goto LABEL_15;
LABEL_12:
  LOBYTE(v17) = v5;
  LOBYTE(v16) = v9;
  v11 = FormatOperator.rawValue.getter();
  v13 = v12;
  if (v11 == FormatOperator.rawValue.getter() && v13 == v14)
    v10 = 1;
  else
    v10 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t _s8NewsFeed22FormatOptionExpressionO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char exists;
  char v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(__int16 *)(a1 + 32);
  v8 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(__int16 *)(a2 + 32);
  if (v6 < 0)
  {
    if (v11 < 0)
    {
      v21 = *(_QWORD *)a1;
      v22 = v2;
      LOWORD(v23) = v5 & 0x1FF;
      v16 = v8;
      v17 = v7;
      LOWORD(v18) = v10 & 0x1FF;
      sub_1BA711500(v8, v7, v10, v9, v11);
      sub_1BA711500(v3, v2, v5, v4, v6);
      sub_1BA711500(v3, v2, v5, v4, v6);
      sub_1BA711500(v8, v7, v10, v9, v11);
      exists = _s8NewsFeed22FormatOptionExpressionO6ExistsV2eeoiySbAE_AEtFZ_0((uint64_t)&v21, (uint64_t)&v16);
      goto LABEL_7;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)a1;
    v22 = v2;
    v23 = v5;
    v24 = v4;
    v25 = v6 & 0xFF01;
    v16 = v8;
    v17 = v7;
    v18 = v10;
    v19 = v9;
    v20 = v11 & 0xFF01;
    sub_1BA711500(v8, v7, v10, v9, v11);
    sub_1BA711500(v3, v2, v5, v4, v6);
    sub_1BA711500(v3, v2, v5, v4, v6);
    sub_1BA711500(v8, v7, v10, v9, v11);
    exists = _s8NewsFeed22FormatOptionExpressionO7CompareV2eeoiySbAE_AEtFZ_0((uint64_t)&v21, (uint64_t)&v16);
LABEL_7:
    v15 = exists;
    sub_1BA636D30(v3, v2, v5, v4, v6);
    sub_1BA636D30(v8, v7, v10, v9, v11);
    sub_1BA636D30(v8, v7, v10, v9, v11);
    sub_1BA636D30(v3, v2, v5, v4, v6);
    v13 = v15;
    return v13 & 1;
  }
  sub_1BA711500(*(_QWORD *)a1, v2, v5, v4, v6);
  sub_1BA711500(v8, v7, v10, v9, v11);
  sub_1BA636D30(v3, v2, v5, v4, v6);
  sub_1BA636D30(v8, v7, v10, v9, v11);
  v13 = 0;
  return v13 & 1;
}

uint64_t sub_1BAA36560(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BAA3657C, (uint64_t (*)(void))sub_1BAA365C0, (uint64_t (*)(void))sub_1BAA36604);
}

unint64_t sub_1BAA3657C()
{
  unint64_t result;

  result = qword_1EF2ADBC0;
  if (!qword_1EF2ADBC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Compare, &type metadata for FormatOptionExpression.Compare);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBC0);
  }
  return result;
}

unint64_t sub_1BAA365C0()
{
  unint64_t result;

  result = qword_1EF2ADBC8;
  if (!qword_1EF2ADBC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Compare, &type metadata for FormatOptionExpression.Compare);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBC8);
  }
  return result;
}

unint64_t sub_1BAA36604()
{
  unint64_t result;

  result = qword_1EF2ADBD0;
  if (!qword_1EF2ADBD0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Compare, &type metadata for FormatOptionExpression.Compare);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBD0);
  }
  return result;
}

unint64_t sub_1BAA3664C()
{
  unint64_t result;

  result = qword_1EF2ADBD8;
  if (!qword_1EF2ADBD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists.Operator, &type metadata for FormatOptionExpression.Exists.Operator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBD8);
  }
  return result;
}

uint64_t sub_1BAA36690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA81722C(a1, a2, a3, (uint64_t (*)(void))sub_1BAA366A4, (uint64_t (*)(void))sub_1BA500C9C);
}

unint64_t sub_1BAA366A4()
{
  unint64_t result;

  result = qword_1EF2ADBE0;
  if (!qword_1EF2ADBE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists.Operator, &type metadata for FormatOptionExpression.Exists.Operator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBE0);
  }
  return result;
}

unint64_t sub_1BAA366E8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA3670C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA3670C()
{
  unint64_t result;

  result = qword_1EF2ADBE8;
  if (!qword_1EF2ADBE8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists.Operator, &type metadata for FormatOptionExpression.Exists.Operator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBE8);
  }
  return result;
}

uint64_t sub_1BAA36750(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA63C274, (uint64_t (*)(void))sub_1BA6F6128, (uint64_t (*)(void))sub_1BAA3664C);
}

unint64_t sub_1BAA3676C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA36790();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA36790()
{
  unint64_t result;

  result = qword_1EF2ADBF0;
  if (!qword_1EF2ADBF0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists, &type metadata for FormatOptionExpression.Exists);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBF0);
  }
  return result;
}

uint64_t sub_1BAA367D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BAA367F0, (uint64_t (*)(void))sub_1BAA36834, (uint64_t (*)(void))sub_1BAA36878);
}

unint64_t sub_1BAA367F0()
{
  unint64_t result;

  result = qword_1EF2ADBF8;
  if (!qword_1EF2ADBF8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists, &type metadata for FormatOptionExpression.Exists);
    atomic_store(result, (unint64_t *)&qword_1EF2ADBF8);
  }
  return result;
}

unint64_t sub_1BAA36834()
{
  unint64_t result;

  result = qword_1EF2ADC00;
  if (!qword_1EF2ADC00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists, &type metadata for FormatOptionExpression.Exists);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC00);
  }
  return result;
}

unint64_t sub_1BAA36878()
{
  unint64_t result;

  result = qword_1EF2ADC08;
  if (!qword_1EF2ADC08)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression.Exists, &type metadata for FormatOptionExpression.Exists);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC08);
  }
  return result;
}

uint64_t sub_1BAA368BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA675118, (uint64_t (*)(void))sub_1BA652334, (uint64_t (*)(void))sub_1BAA368D8);
}

unint64_t sub_1BAA368D8()
{
  unint64_t result;

  result = qword_1EF2ADC10;
  if (!qword_1EF2ADC10)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionExpression, &type metadata for FormatOptionExpression);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC10);
  }
  return result;
}

unint64_t sub_1BAA36920()
{
  unint64_t result;

  result = qword_1EF2ADC18;
  if (!qword_1EF2ADC18)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOperator, &type metadata for FormatOperator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC18);
  }
  return result;
}

uint64_t sub_1BAA36964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA81722C(a1, a2, a3, (uint64_t (*)(void))sub_1BAA36978, (uint64_t (*)(void))sub_1BA4EE9B0);
}

unint64_t sub_1BAA36978()
{
  unint64_t result;

  result = qword_1EF2ADC20;
  if (!qword_1EF2ADC20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOperator, &type metadata for FormatOperator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC20);
  }
  return result;
}

unint64_t sub_1BAA369BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA369E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA369E0()
{
  unint64_t result;

  result = qword_1EF2ADC28;
  if (!qword_1EF2ADC28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOperator, &type metadata for FormatOperator);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC28);
  }
  return result;
}

uint64_t sub_1BAA36A24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA63BE34, (uint64_t (*)(void))sub_1BA5C0F38, (uint64_t (*)(void))sub_1BAA36920);
}

uint64_t sub_1BAA36A40@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 33);
  return result;
}

_BYTE *sub_1BAA36A4C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 33) = *result;
  return result;
}

uint64_t destroy for FormatOptionExpression(uint64_t a1)
{
  return sub_1BA636D30(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
}

uint64_t initializeWithCopy for FormatOptionExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_WORD *)(a2 + 32);
  sub_1BA711500(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FormatOptionExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_WORD *)(a2 + 32);
  sub_1BA711500(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v7;
  sub_1BA636D30(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FormatOptionExpression(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;

  v3 = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v3;
  sub_1BA636D30(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_1BAA36B98(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32) >> 15;
}

uint64_t sub_1BAA36BA4(uint64_t result)
{
  *(_WORD *)(result + 32) &= ~0x8000u;
  return result;
}

uint64_t sub_1BAA36BB4(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0xF01 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for FormatOptionExpression()
{
  return &type metadata for FormatOptionExpression;
}

uint64_t destroy for FormatOptionExpression.Compare(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1BA636D1C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for FormatOptionExpression.Compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_1BA7114EC(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for FormatOptionExpression.Compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_1BA7114EC(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1BA636D1C(v7, v8, v9);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for FormatOptionExpression.Compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v5;
  sub_1BA636D1C(v6, v7, v8);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

ValueMetadata *type metadata accessor for FormatOptionExpression.Compare()
{
  return &type metadata for FormatOptionExpression.Compare;
}

uint64_t sub_1BAA36D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatOptionExpression.Exists(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for FormatOptionExpression.Exists(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatOptionExpression.Exists(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatOptionExpression.Exists(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatOptionExpression.Exists()
{
  return &type metadata for FormatOptionExpression.Exists;
}

ValueMetadata *type metadata accessor for FormatOptionExpression.Exists.Operator()
{
  return &type metadata for FormatOptionExpression.Exists.Operator;
}

ValueMetadata *type metadata accessor for FormatOperator()
{
  return &type metadata for FormatOperator;
}

uint64_t storeEnumTagSinglePayload for FormatOptionExpression.Compare.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BAA36F44 + 4 * byte_1BB891ACD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BAA36F78 + 4 * byte_1BB891AC8[v4]))();
}

uint64_t sub_1BAA36F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA36F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA36F88);
  return result;
}

uint64_t sub_1BAA36F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA36F9CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BAA36FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA36FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatOptionExpression.Compare.CodingKeys()
{
  return &type metadata for FormatOptionExpression.Compare.CodingKeys;
}

unint64_t sub_1BAA36FC8()
{
  unint64_t result;

  result = qword_1EF2ADC30;
  if (!qword_1EF2ADC30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB892144, &type metadata for FormatOptionExpression.Compare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC30);
  }
  return result;
}

uint64_t sub_1BAA3700C()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1BAA37054(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return sub_1BAA37068(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1BAA37068(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BAA370A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatFrameExpressionLogic.init(from:)(a1, a2);
}

uint64_t sub_1BAA370B8(_QWORD *a1)
{
  return FormatFrameExpressionLogic.encode(to:)(a1);
}

uint64_t _s8NewsFeed26FormatFrameExpressionLogicO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (!(v5 >> 6))
  {
    if (v9 < 0x40)
    {
      sub_1BAA37668(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8, v9);
      sub_1BAA37668(v3, v2, v4, v5);
      sub_1BAA37668(v3, v2, v4, v5);
      sub_1BAA37668(v7, v6, v8, v9);
      if ((sub_1BA881EAC(v3, v7) & 1) != 0)
      {
        LOBYTE(v29) = v2;
        LOBYTE(v25) = v6;
        v23 = FormatOperator.rawValue.getter();
        v14 = v13;
        if (v23 != FormatOperator.rawValue.getter() || v14 != v15)
        {
LABEL_20:
          v24 = sub_1BB874398();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BAA376C0(v3, v2, v4, v5);
          sub_1BAA376C0(v7, v6, v8, v9);
          sub_1BAA376C0(v7, v6, v8, v9);
          sub_1BAA376C0(v3, v2, v4, v5);
          if ((v24 & 1) != 0)
          {
            v16 = 1;
            return v16 & 1;
          }
          goto LABEL_18;
        }
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v5 >> 6 != 1)
  {
    if ((v9 & 0xC0) == 0x80)
    {
      v29 = *(_QWORD *)a1;
      v30 = v2;
      v31 = v4;
      v32 = v5 & 1;
      v25 = v7;
      v26 = v6;
      v27 = v8;
      v28 = v9 & 1;
      sub_1BAA37668(v7, v6, v8, v9);
      sub_1BAA37668(v3, v2, v4, v5);
      sub_1BAA37668(v3, v2, v4, v5);
      sub_1BAA37668(v7, v6, v8, v9);
      v16 = _s8NewsFeed35FormatFrameExpressionLogicTextLinesV2eeoiySbAC_ACtFZ_0((uint64_t)&v29, (uint64_t)&v25);
      sub_1BAA376C0(v3, v2, v4, v5);
      sub_1BAA376C0(v7, v6, v8, v9);
      sub_1BAA376C0(v7, v6, v8, v9);
      sub_1BAA376C0(v3, v2, v4, v5);
      return v16 & 1;
    }
    goto LABEL_15;
  }
  if ((v9 & 0xC0) != 0x40)
  {
LABEL_15:
    sub_1BAA37668(*(_QWORD *)a1, v2, v4, v5);
    sub_1BAA37668(v7, v6, v8, v9);
    sub_1BAA376C0(v3, v2, v4, v5);
    v17 = v7;
    v18 = v6;
    v19 = v8;
    v20 = v9;
LABEL_17:
    sub_1BAA376C0(v17, v18, v19, v20);
LABEL_18:
    v16 = 0;
    return v16 & 1;
  }
  sub_1BAA37668(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8, v9);
  sub_1BAA37668(v3, v2, v4, v5);
  sub_1BAA37668(v3, v2, v4, v5);
  sub_1BAA37668(v7, v6, v8, v9);
  if ((sub_1BA881EAC(v3, v7) & 1) == 0)
  {
LABEL_16:
    sub_1BAA376C0(v3, v2, v4, v5);
    sub_1BAA376C0(v7, v6, v8, v9);
    sub_1BAA376C0(v7, v6, v8, v9);
    v17 = v3;
    v18 = v2;
    v19 = v4;
    v20 = v5;
    goto LABEL_17;
  }
  LOBYTE(v29) = v2;
  LOBYTE(v25) = v6;
  v22 = FormatOperator.rawValue.getter();
  v11 = v10;
  if (v22 != FormatOperator.rawValue.getter() || v11 != v12)
    goto LABEL_20;
LABEL_12:
  swift_bridgeObjectRelease_n();
  sub_1BAA376C0(v3, v2, v4, v5);
  sub_1BAA376C0(v7, v6, v8, v9);
  sub_1BAA376C0(v7, v6, v8, v9);
  sub_1BAA376C0(v3, v2, v4, v5);
  v16 = 1;
  return v16 & 1;
}

unint64_t sub_1BAA37500(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAA37524();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BAA37524()
{
  unint64_t result;

  result = qword_1EF2ADC38;
  if (!qword_1EF2ADC38)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFrameExpressionLogic, &type metadata for FormatFrameExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC38);
  }
  return result;
}

unint64_t sub_1BAA37568(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAA3759C();
  a1[2] = sub_1BAA375E0();
  result = sub_1BAA37624();
  a1[3] = result;
  return result;
}

unint64_t sub_1BAA3759C()
{
  unint64_t result;

  result = qword_1ED39EB60;
  if (!qword_1ED39EB60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFrameExpressionLogic, &type metadata for FormatFrameExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1ED39EB60);
  }
  return result;
}

unint64_t sub_1BAA375E0()
{
  unint64_t result;

  result = qword_1ED39E810;
  if (!qword_1ED39E810)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFrameExpressionLogic, &type metadata for FormatFrameExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1ED39E810);
  }
  return result;
}

unint64_t sub_1BAA37624()
{
  unint64_t result;

  result = qword_1EF2ADC40;
  if (!qword_1EF2ADC40)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFrameExpressionLogic, &type metadata for FormatFrameExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC40);
  }
  return result;
}

uint64_t sub_1BAA37668(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  uint64_t result;

  v4 = a4 >> 6;
  if (v4 == 2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else if (v4 <= 1)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FormatFrameExpressionLogic(uint64_t a1)
{
  return sub_1BAA376C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1BAA376C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  uint64_t result;

  v4 = a4 >> 6;
  if (v4 == 2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else if (v4 <= 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FormatFrameExpressionLogic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BAA37668(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FormatFrameExpressionLogic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BAA37668(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1BAA376C0(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FormatFrameExpressionLogic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1BAA376C0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatFrameExpressionLogic(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 4;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatFrameExpressionLogic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 16 * -a2;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BAA378CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 6;
}

uint64_t sub_1BAA378D8(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0x3Fu;
  return result;
}

int8x16_t sub_1BAA378E8(uint64_t a1, char a2)
{
  char v2;
  int8x16_t result;

  v2 = *(_BYTE *)(a1 + 24) & 1 | (a2 << 6);
  result = vandq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)xmmword_1BB8921C0);
  *(int8x16_t *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = v2;
  return result;
}

ValueMetadata *type metadata accessor for FormatFrameExpressionLogic()
{
  return &type metadata for FormatFrameExpressionLogic;
}

double sub_1BAA37920@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v11 = a1[8];
  v10 = a1[9];
  if (!*a1)
  {
    v18 = 0;
LABEL_10:
    sub_1BA86E338(v18);
    goto LABEL_11;
  }
  if (v4 != 1)
  {
    if (v3)
    {
      if (v6)
      {
        if (v5)
        {
          if (v8)
          {
            v19 = a1[7];
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1BAA37D84(v4, v3, v6, v5, v8, v7, v9, v19, v20, v11, v10);
            sub_1BA86E338(v4);
            v12 = v21;
            v13 = v22;
            result = *(double *)v20;
            v15 = v20[1];
            v16 = v23;
            v17 = v24;
            *(_OWORD *)a2 = v20[0];
            *(_OWORD *)(a2 + 16) = v15;
            *(_QWORD *)(a2 + 32) = v12;
            *(_QWORD *)(a2 + 40) = v13;
            *(_OWORD *)(a2 + 48) = v16;
            *(_OWORD *)(a2 + 64) = v17;
            return result;
          }
          v18 = *a1;
        }
        else
        {
          v18 = *a1;
        }
      }
      else
      {
        v18 = *a1;
      }
    }
    else
    {
      v18 = *a1;
    }
    goto LABEL_10;
  }
LABEL_11:
  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t FeedGroupGroupingRules.merge(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[1];
  v5 = a1[3];
  v28 = a1[2];
  v6 = a1[5];
  v26 = a1[4];
  v8 = a1[6];
  v7 = a1[7];
  v10 = a1[8];
  v9 = a1[9];
  v25 = v2[1];
  v24 = v2[2];
  v23 = v2[3];
  v22 = v2[4];
  v21 = v2[6];
  v20 = v2[7];
  v11 = v2[9];
  v19 = v2[8];
  v12 = v7;
  v13 = v8;
  v27 = v5;
  if (*a1)
  {
    v18 = *a1;
  }
  else
  {
    v18 = *v2;
    swift_retain();
    v5 = v27;
    v8 = v13;
    v7 = v12;
  }
  v14 = v28;
  if (v4)
  {
    v25 = v4;
    if (v28)
      goto LABEL_6;
  }
  else
  {
    swift_retain();
    v5 = v27;
    v14 = v28;
    v8 = v13;
    v7 = v12;
    if (v28)
    {
LABEL_6:
      v24 = v14;
      if (v5)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  swift_retain();
  v5 = v27;
  v8 = v13;
  v7 = v12;
  if (v27)
  {
LABEL_7:
    v23 = v5;
    if (v26)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  swift_retain();
  v8 = v13;
  v7 = v12;
  if (v26)
  {
LABEL_8:
    v22 = v26;
    v15 = v6;
    if (v6)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  swift_retain();
  v8 = v13;
  v7 = v12;
  v15 = v6;
  if (v6)
  {
LABEL_9:
    if (v8)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v16 = swift_retain();
  v8 = v13;
  v7 = v12;
  v15 = v16;
  if (v13)
  {
LABEL_10:
    v21 = v8;
    if (v7)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  swift_retain();
  v7 = v12;
  if (v12)
  {
LABEL_11:
    v20 = v7;
    if (v10)
      goto LABEL_12;
LABEL_21:
    swift_retain();
    if (v9)
      goto LABEL_13;
LABEL_22:
    swift_retain();
    goto LABEL_23;
  }
LABEL_20:
  swift_retain();
  if (!v10)
    goto LABEL_21;
LABEL_12:
  v19 = v10;
  if (!v9)
    goto LABEL_22;
LABEL_13:
  v11 = v9;
LABEL_23:
  *a2 = v18;
  a2[1] = v25;
  a2[2] = v24;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v15;
  a2[6] = v21;
  a2[7] = v20;
  a2[8] = v19;
  a2[9] = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxInaccessibleHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxEvergreenHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxPublisherOccurrences.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxAIGCHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.topicDiversity.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.minTagCTRRelativeToBaseline.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxInaccessibleHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxEvergreenHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxPublisherOccurrencesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRules.maxAIGCHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t sub_1BAA37D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a8;
  v54 = a3;
  v18 = sub_1BB86D078();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a5;
  v57 = a6;
  v55 = a1;
  v53 = a4;
  v58 = v19;
  if (a7)
  {
    v22 = v18;
    swift_retain();
    swift_retain();
    v23 = a2;
    swift_retain();
    v24 = v54;
    swift_retain();
    swift_retain();
    swift_retain();
    v51 = a7;
    v25 = v21;
  }
  else
  {
    swift_retain();
    swift_retain();
    v23 = a2;
    swift_retain();
    v26 = v54;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BB86D06C();
    sub_1BA521E1C();
    v27 = swift_allocObject();
    v28 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    v22 = v18;
    v28(v27 + *(_QWORD *)(*(_QWORD *)v27 + 112), v21, v18);
    v29 = *(_QWORD *)(*(_QWORD *)v27 + 120);
    v51 = v27;
    *(_QWORD *)(v27 + v29) = MEMORY[0x1E0DEE9D8];
    v25 = v21;
    v24 = v26;
  }
  v30 = v52;
  if (v52)
  {
    swift_retain();
    v50 = v30;
    v31 = v22;
  }
  else
  {
    swift_retain();
    sub_1BB86D06C();
    sub_1BA521E1C();
    v32 = swift_allocObject();
    v31 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v32 + *(_QWORD *)(*(_QWORD *)v32 + 112), v25, v22);
    v33 = *(_QWORD *)(*(_QWORD *)v32 + 120);
    v50 = v32;
    *(_QWORD *)(v32 + v33) = MEMORY[0x1E0DEE9D8];
  }
  v54 = a7;
  v34 = a11;
  if (!a10)
  {
    swift_retain();
    sub_1BB86D06C();
    sub_1BA521E1C();
    v43 = swift_allocObject();
    v44 = v25;
    v36 = v43;
    v37 = v58;
    v35 = v44;
    (*(void (**)(uint64_t))(v58 + 32))(v43 + *(_QWORD *)(*(_QWORD *)v43 + 112));
    *(_QWORD *)(v36 + *(_QWORD *)(*(_QWORD *)v36 + 120)) = MEMORY[0x1E0DEE9D8];
    if (a11)
      goto LABEL_9;
LABEL_11:
    swift_retain();
    v49 = v35;
    sub_1BB86D06C();
    v48 = v31;
    v38 = v55;
    swift_release();
    swift_release();
    swift_release();
    v39 = v53;
    swift_release();
    v45 = v56;
    swift_release();
    v40 = v45;
    swift_release();
    swift_release();
    swift_release();
    v41 = v57;
    swift_release();
    sub_1BA521E1C();
    v34 = swift_allocObject();
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v34 + *(_QWORD *)(*(_QWORD *)v34 + 112), v49, v48);
    *(_QWORD *)(v34 + *(_QWORD *)(*(_QWORD *)v34 + 120)) = MEMORY[0x1E0DEE9D8];
    goto LABEL_12;
  }
  v35 = v25;
  swift_retain();
  v36 = a10;
  v37 = v58;
  if (!a11)
    goto LABEL_11;
LABEL_9:
  v38 = v55;
  swift_release();
  swift_release();
  swift_release();
  v39 = v53;
  swift_release();
  v40 = v56;
  swift_release();
  swift_release();
  swift_release();
  v41 = v57;
  result = swift_release();
LABEL_12:
  *a9 = v38;
  a9[1] = v23;
  a9[2] = v24;
  a9[3] = v39;
  a9[4] = v40;
  a9[5] = v41;
  v46 = v50;
  a9[6] = v51;
  a9[7] = v46;
  a9[8] = v36;
  a9[9] = v34;
  return result;
}

uint64_t sub_1BAA3814C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BAA38BB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BAA38170()
{
  sub_1BA521EEC();
  return sub_1BB874710();
}

uint64_t sub_1BAA38198()
{
  sub_1BA521EEC();
  return sub_1BB87471C();
}

uint64_t FeedGroupGroupingRules.encode(to:)(_QWORD *a1)
{
  char **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;

  sub_1BA521DC0(0, &qword_1ED3AB5F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  v10 = *v1;
  v9 = v1[1];
  v24 = v1[2];
  v25 = v9;
  v11 = v1[3];
  v22 = v1[4];
  v23 = v11;
  v12 = v1[5];
  v20 = v1[6];
  v21 = v12;
  v13 = v1[7];
  v18 = v1[8];
  v19 = v13;
  v17 = v1[9];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA521EEC();
  sub_1BB8746C8();
  v27 = v10;
  v26 = 0;
  sub_1BA5ECC44();
  sub_1BA4A2870(qword_1ED3A5078, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB8741AC();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v23;
  v14 = v24;
  v27 = v25;
  v26 = 1;
  sub_1BB8741AC();
  v27 = v14;
  v26 = 2;
  v25 = v8;
  sub_1BB8741AC();
  v27 = v15;
  v26 = 3;
  sub_1BB8741AC();
  v27 = v22;
  v26 = 4;
  sub_1BA839ECC();
  sub_1BA4A2870(&qword_1ED3A5038, (uint64_t (*)(uint64_t))sub_1BA839ECC, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB8741AC();
  v27 = v21;
  v26 = 5;
  sub_1BA5ECCB8();
  sub_1BA4A2870(&qword_1ED3A5070, (uint64_t (*)(uint64_t))sub_1BA5ECCB8, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB87414C();
  v27 = v20;
  v26 = 6;
  sub_1BA521E1C();
  sub_1BA4A2870(&qword_1ED3A28C8, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB8741AC();
  v27 = v19;
  v26 = 7;
  sub_1BB8741AC();
  v27 = v18;
  v26 = 8;
  sub_1BB8741AC();
  v27 = v17;
  v26 = 9;
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v25, v5);
}

uint64_t sub_1BAA385A8(_QWORD *a1)
{
  return FeedGroupGroupingRules.encode(to:)(a1);
}

BOOL _s8NewsFeed0B18GroupGroupingRulesV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v2 = a1[1];
  v3 = a1[2];
  v5 = a1[3];
  v4 = a1[4];
  v23 = a1[6];
  v24 = a1[5];
  v20 = a1[8];
  v18 = a1[9];
  v6 = a2[1];
  v7 = a2[2];
  v9 = a2[3];
  v8 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v21 = a2[7];
  v22 = a1[7];
  v19 = a2[8];
  v17 = a2[9];
  if ((sub_1BA893E60(*(_QWORD *)(*a1 + 24), *(_QWORD *)(*a2 + 24)) & 1) == 0
    || *(_QWORD *)(v2 + 16) != *(_QWORD *)(v6 + 16)
    || (sub_1BA893E60(*(_QWORD *)(v2 + 24), *(_QWORD *)(v6 + 24)) & 1) == 0
    || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v7 + 16)
    || (sub_1BA893E60(*(_QWORD *)(v3 + 24), *(_QWORD *)(v7 + 24)) & 1) == 0
    || *(_QWORD *)(v5 + 16) != *(_QWORD *)(v9 + 16)
    || (sub_1BA893E60(*(_QWORD *)(v5 + 24), *(_QWORD *)(v9 + 24)) & 1) == 0
    || (sub_1BB55C8C8(v4, v8) & 1) == 0)
  {
    return 0;
  }
  if (v24)
  {
    v12 = v23;
    if (!v10)
      return 0;
    v13 = v11;
    if (*(double *)(v24 + 16) != *(double *)(v10 + 16))
      return 0;
    v14 = *(_QWORD *)(v24 + 24);
    v15 = *(_QWORD *)(v10 + 24);
    swift_retain();
    swift_retain();
    LOBYTE(v14) = sub_1BA894130(v14, v15);
    swift_release();
    swift_release();
    if ((v14 & 1) == 0)
      return 0;
  }
  else
  {
    v12 = v23;
    v13 = v11;
    if (v10)
      return 0;
  }
  sub_1BB86D078();
  sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
  return (sub_1BB872958() & 1) != 0
      && (sub_1BA892EC0(*(_QWORD *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 120)), *(_QWORD *)(v13 + *(_QWORD *)(*(_QWORD *)v13 + 120))) & 1) != 0&& (sub_1BB872958() & 1) != 0&& (sub_1BA892EC0(*(_QWORD *)(v22 + *(_QWORD *)(*(_QWORD *)v22 + 120)), *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 120))) & 1) != 0&& (sub_1BB872958() & 1) != 0&& (sub_1BA892EC0(*(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 120)), *(_QWORD *)(v19 + *(_QWORD *)(*(_QWORD *)v19 + 120))) & 1) != 0&& (sub_1BB872958() & 1) != 0&& (sub_1BA892EC0(*(_QWORD *)(v18 + *(_QWORD *)(*(_QWORD *)v18 + 120)), *(_QWORD *)(v17 + *(_QWORD *)(*(_QWORD *)v17 + 120))) & 1) != 0;
}

_QWORD *assignWithCopy for FeedGroupGroupingRules(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for FeedGroupGroupingRules(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  swift_release();
  a1[4] = a2[4];
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for FeedGroupGroupingRules.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BAA38AE8 + 4 * byte_1BB8922BF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BAA38B1C + 4 * byte_1BB8922BA[v4]))();
}

uint64_t sub_1BAA38B1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA38B24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BAA38B2CLL);
  return result;
}

uint64_t sub_1BAA38B38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BAA38B40);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BAA38B44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BAA38B4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupGroupingRules.CodingKeys()
{
  return &type metadata for FeedGroupGroupingRules.CodingKeys;
}

unint64_t sub_1BAA38B6C()
{
  unint64_t result;

  result = qword_1EF2ADC48;
  if (!qword_1EF2ADC48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB892424, &type metadata for FeedGroupGroupingRules.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2ADC48);
  }
  return result;
}

uint64_t sub_1BAA38BB0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000018 && a2 == 0x80000001BB967720 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BB967740 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BB967760 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB967780 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7669446369706F74 && a2 == 0xEE00797469737265 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001BB9677A0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001BB9677C0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x80000001BB9677F0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001BB967820 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001BB967850)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

BOOL static FeedManagerLoadSource.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t FeedManagerLoadSource.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FeedManagerLoadSource.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

BOOL sub_1BAA38FFC(char *a1, char *a2)
{
  return sub_1BA86BD80(*a1, *a2);
}

uint64_t sub_1BAA39008()
{
  return _s8NewsFeed0B12RefreshStateO9hashValueSivg_0();
}

uint64_t sub_1BAA39010()
{
  return sub_1BA86BD90();
}

uint64_t sub_1BAA39018()
{
  sub_1BB8745CC();
  sub_1BA86BD90();
  return sub_1BB874608();
}

uint64_t FeedManager.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 112) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 88));
}

uint64_t FeedManager.loadingGate.getter()
{
  sub_1BA819FBC();
  return swift_retain();
}

uint64_t FeedManager.loadingSource.getter()
{
  sub_1BA838810();
  return swift_retain();
}

_QWORD *FeedManager.__allocating_init(feed:database:offlineDatabase:service:serviceConfigFetcher:loadingGate:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  v7 = v6;
  swift_allocObject();
  v14 = sub_1BAA3C628(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 80) - 8) + 8))(a5);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 8))(a4);
  v15 = sub_1BB873A2C();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(a3, v15);
  v16(a2, v15);
  return v14;
}

uint64_t sub_1BAA39190()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedServiceFetchResult(255, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  sub_1BB86EAAC();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = sub_1BB873A2C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))((char *)&v10 - v7, 1, 1, TupleTypeMetadata2, v6);
  sub_1BA59B108((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1BAA392D4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedServiceFetchResult(255, v3, AssociatedConformanceWitness, v5);
  sub_1BB86EAAC();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)v16 - v8;
  v11 = *(int *)(v10 + 48);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v16 - v8, a1, AssociatedTypeWitness, v7);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)&v9[v11] = v13;
  v14 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v14(v9, AssociatedTypeWitness);
  return v13;
}

uint64_t sub_1BAA3941C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v20 = a2;
  v21 = sub_1BB86C8B0();
  v4 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1BA546D3C(v7);
  FeedCursorContainer.createdDate.getter(v10, (uint64_t)v6);
  v11 = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedConformanceWitness();
  v13 = v11;
  v14 = v22;
  v15 = FeedServiceContextType.shouldRefreshRootCursor(createdDate:)((uint64_t)v6, v13, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
  if (v15)
  {
    v17 = *(_QWORD *)(v20 + 48);
    v18 = sub_1BB87330C();
    sub_1BB86EF44("Abandoning prewarmed read and fetch because it's too stale", 58, 2, &dword_1BA493000, v17, v18, MEMORY[0x1E0DEE9D8]);
    return sub_1BA4E7EB4(v14);
  }
  else
  {
    type metadata accessor for FeedServiceFetchResult(255, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
    sub_1BB86EAAC();
    v23 = v7;
    swift_retain();
    return sub_1BB86E9D4();
  }
}

uint64_t FeedManager.atomicRebuild<A>(context:policy:preCommit:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  _QWORD *v52;
  id v53;
  void *v54;
  uint64_t v55;
  _QWORD v57[2];
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t AssociatedTypeWitness;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v70 = a3;
  v71 = a4;
  v68 = a1;
  v8 = *(_QWORD **)v5;
  v9 = v5;
  v76 = *(_QWORD *)(*(_QWORD *)v5 + 104);
  v77 = a5;
  v75 = v8[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v66 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v72 = (char *)v57 - v11;
  v12 = sub_1BB86C8E0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = *a2;
  sub_1BB86C8D4();
  v16 = sub_1BB86C8C8();
  v59 = v16;
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v58 = *(id *)(v9 + 48);
  v19 = v58;
  sub_1BA7AA598();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v20 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v20 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v18;
  v74 = v18;
  swift_bridgeObjectRetain();
  v21 = sub_1BB87330C();
  sub_1BB86EF44("Feed manager atomic rebuild will begin, id=%{public}@", 53, 2, &dword_1BA493000, v19, v21, v20);
  swift_bridgeObjectRelease();
  v57[0] = sub_1BB86E6F8();
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22 = v72;
  v23 = a1;
  v24 = AssociatedTypeWitness;
  v67(v72, v23, AssociatedTypeWitness);
  v25 = *(unsigned __int8 *)(v10 + 80);
  v65 = v25 | 7;
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = v75;
  v27 = v8;
  v63 = v8[11];
  *((_QWORD *)v26 + 3) = v63;
  v62 = v8[12];
  v28 = v76;
  v29 = v77;
  *((_QWORD *)v26 + 4) = v62;
  *((_QWORD *)v26 + 5) = v29;
  *((_QWORD *)v26 + 6) = v28;
  v61 = v27[14];
  *((_QWORD *)v26 + 7) = v61;
  v60 = v27[15];
  *((_QWORD *)v26 + 8) = v60;
  v64 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v64(&v26[(v25 + 72) & ~v25], v22, v24);
  v30 = swift_getAssociatedTypeWitness();
  v31 = (void *)v57[0];
  v57[1] = sub_1BB86EC08();

  swift_release();
  v32 = (_QWORD *)swift_allocObject();
  v33 = v58;
  v34 = v59;
  v32[2] = v29;
  v32[3] = v33;
  v32[4] = v34;
  v35 = v69;
  v32[5] = v74;
  v32[6] = v35;
  swift_bridgeObjectRetain();
  v58 = v33;
  swift_retain();
  v36 = (void *)sub_1BB86E854();
  v37 = v76;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedServiceFetchResult(0, v30, AssociatedConformanceWitness, v39);
  v69 = sub_1BB86E980();
  swift_release();
  swift_release();

  v40 = v72;
  v41 = AssociatedTypeWitness;
  v67(v72, v68, AssociatedTypeWitness);
  v42 = (char *)swift_allocObject();
  v43 = v63;
  *((_QWORD *)v42 + 2) = v75;
  *((_QWORD *)v42 + 3) = v43;
  v44 = v77;
  *((_QWORD *)v42 + 4) = v62;
  *((_QWORD *)v42 + 5) = v44;
  v45 = v61;
  *((_QWORD *)v42 + 6) = v37;
  *((_QWORD *)v42 + 7) = v45;
  v46 = v58;
  *((_QWORD *)v42 + 8) = v60;
  *((_QWORD *)v42 + 9) = v46;
  v47 = v74;
  *((_QWORD *)v42 + 10) = v34;
  *((_QWORD *)v42 + 11) = v47;
  v48 = v71;
  *((_QWORD *)v42 + 12) = v70;
  *((_QWORD *)v42 + 13) = v48;
  v64(&v42[(v25 + 112) & ~v25], v40, v41);
  v49 = v47;
  swift_bridgeObjectRetain();
  v50 = v46;
  swift_retain();
  v51 = (void *)sub_1BB86E854();
  sub_1BB86E980();
  swift_release();
  swift_release();

  v52 = (_QWORD *)swift_allocObject();
  v52[2] = v44;
  v52[3] = v50;
  v52[4] = v34;
  v52[5] = v49;
  v53 = v50;
  v54 = (void *)sub_1BB86E854();
  v55 = sub_1BB86E9B0();
  swift_release();
  swift_release();

  return v55;
}

