uint64_t rf::data_flow::provider::AnchorDataProvider::AnchorDataProvider(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  rf::AnchorDefinitionComponent *v4;
  uint64_t v5;
  _QWORD *v6;
  rf::AnchorDefinitionComponent *v7;
  uint64_t v8;
  _QWORD *v9;
  rf::AnchorDefinitionComponent *v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  void *__p[2];
  char v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  char v23;
  void **v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24EFD7160;
  *(_BYTE *)(a1 + 24) = *a2;
  v3 = rf::AnchorDefinitionComponent::instance((rf::AnchorDefinitionComponent *)a1);
  v21 = &off_24EFD7230;
  v22 = a1;
  v24 = &v21;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v21, v3 + 1);
  v4 = (rf::AnchorDefinitionComponent *)v24;
  if (v24 == &v21)
  {
    v5 = 4;
    v4 = (rf::AnchorDefinitionComponent *)&v21;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v5 = 5;
  }
  v4 = (rf::AnchorDefinitionComponent *)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = rf::AnchorDefinitionComponent::instance(v4);
  v21 = &off_24EFD72C0;
  v22 = a1;
  v24 = &v21;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v21, v6 + 5);
  v7 = (rf::AnchorDefinitionComponent *)v24;
  if (v24 == &v21)
  {
    v8 = 4;
    v7 = (rf::AnchorDefinitionComponent *)&v21;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v8 = 5;
  }
  v7 = (rf::AnchorDefinitionComponent *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_11:
  v9 = rf::AnchorDefinitionComponent::instance(v7);
  v21 = &off_24EFD7340;
  v22 = a1;
  v24 = &v21;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v21, v9 + 9);
  v10 = (rf::AnchorDefinitionComponent *)v24;
  if (v24 == &v21)
  {
    v11 = 4;
    v10 = (rf::AnchorDefinitionComponent *)&v21;
  }
  else
  {
    if (!v24)
      goto LABEL_16;
    v11 = 5;
  }
  v10 = (rf::AnchorDefinitionComponent *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_16:
  v12 = rf::AnchorDefinitionComponent::instance(v10);
  v21 = &off_24EFD73C0;
  v22 = a1;
  v24 = &v21;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v21, v12 + 13);
  v13 = v24;
  if (v24 == &v21)
  {
    v14 = 4;
    v13 = &v21;
  }
  else
  {
    if (!v24)
      goto LABEL_21;
    v14 = 5;
  }
  (*((void (**)(void))*v13 + v14))();
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v20, (const UInt8 *)&v21);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.printAddedAnchorDefinitionComponent");
  v15 = rf::UserDefaults::BOOLValue((CFStringRef *)&v20, (const UInt8 *)__p);
  if (v15 > 0xFFu)
    v16 = v15;
  else
    v16 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v16 != 0;
  if (v19 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v20);
  if (v23 < 0)
    operator delete(v21);
  return a1;
}

void sub_227778A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  rf::UserDefaults::~UserDefaults(&a16);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

_QWORD *rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(rf::data_flow::provider::AnchorDataProvider *this)
{
  char *v1;
  rf::AnchorDefinitionComponent *v2;
  rf::AnchorDefinitionComponent *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;

  v1 = (char *)rf::AnchorDefinitionComponent::instance(this);
  v2 = (rf::AnchorDefinitionComponent *)(v1 + 8);
  v3 = (rf::AnchorDefinitionComponent *)*((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = 0;
  if (v3 == (rf::AnchorDefinitionComponent *)(v1 + 8))
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  v3 = (rf::AnchorDefinitionComponent *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = rf::AnchorDefinitionComponent::instance(v3);
  v6 = v5 + 5;
  result = (_QWORD *)v5[8];
  v5[8] = 0;
  if (result == v5 + 5)
  {
    v8 = 4;
    result = v6;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void rf::data_flow::provider::AnchorDataProvider::~AnchorDataProvider(rf::data_flow::provider::AnchorDataProvider *this)
{
  rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(this);
}

{
  rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(this);
  JUMPOUT(0x22E29DD50);
}

_QWORD *rf::data_flow::provider::AnchorDataProvider::addAnchor(uint64_t a1, uint64_t a2)
{
  rf *RFUUIDFromAnchor;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  const unsigned __int8 *v9;
  _QWORD *AnchorPtrWithIdentifier;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  __int16 v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint8_t buf[4];
  void **v73;
  _QWORD v74[2];
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  rf::data_flow::validateAnchor(a2);
  RFUUIDFromAnchor = (rf *)rf::helpers::getRFUUIDFromAnchor(a2, (uint64_t)v74);
  rf::realityFusionLogObject(RFUUIDFromAnchor);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v74, __p);
    v6 = (SBYTE7(v13) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v73 = v6;
    _os_log_impl(&dword_227777000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Adding local anchor %s", buf, 0xCu);
    if (SBYTE7(v13) < 0)
      operator delete(__p[0]);
  }

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v47 = 0;
  v49 = 0;
  v48 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  *(_QWORD *)&v17 = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)&v16 + 1, a2);
  LOBYTE(v64) = 1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 && (rf::Session::consumeInputFromProvider(v7, (uint64_t)__p), (v8 = *(_QWORD *)(a1 + 8)) != 0))
  {
    if (v75)
      v9 = (const unsigned __int8 *)v74[0];
    else
      v9 = (const unsigned __int8 *)v74;
    AnchorPtrWithIdentifier = rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(v8 + 160), v9);
  }
  else
  {
    AnchorPtrWithIdentifier = 0;
  }
  rf::data_flow::provider::InputData::~InputData(__p);
  return AnchorPtrWithIdentifier;
}

void sub_227778D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

_QWORD *rf::data_flow::RFUUID::string@<X0>(rf::data_flow::RFUUID *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[37];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 16))
    this = *(rf::data_flow::RFUUID **)this;
  snprintf(__str, 0x25uLL, "%02hhX%02hhX%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX%02hhX%02hhX%02hhX%02hhX", *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((unsigned __int8 *)this + 2), *((unsigned __int8 *)this + 3), *((unsigned __int8 *)this + 4), *((unsigned __int8 *)this + 5), *((unsigned __int8 *)this + 6), *((unsigned __int8 *)this + 7), *((unsigned __int8 *)this + 8), *((unsigned __int8 *)this + 9), *((unsigned __int8 *)this + 10), *((unsigned __int8 *)this + 11), *((unsigned __int8 *)this + 12), *((unsigned __int8 *)this + 13), *((unsigned __int8 *)this + 14), *((unsigned __int8 *)this + 15));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void rf::data_flow::provider::AnchorDataProvider::updateAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD v5[6];
  _OWORD v6[4];
  uint64_t v7;
  char v8;
  char v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  rf::data_flow::validateAnchor(a2);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v32 = 0;
  v34 = 0;
  v33 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  *((_QWORD *)&v6[0] + 1) = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)v6, a2);
  LOBYTE(v49) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    rf::Session::consumeInputFromProvider(v4, (uint64_t)v5);
  rf::data_flow::provider::InputData::~InputData((void **)v5);
}

void sub_227778FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchor(uint64_t a1, uint64_t a2)
{
  rf *v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _OWORD v10[7];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  __int16 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint8_t buf[4];
  void **v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = (rf *)rf::data_flow::validateAnchor(a2);
  rf::realityFusionLogObject(v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    rf::helpers::getRFUUIDFromAnchor(a2, (uint64_t)v10);
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
    v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v65 = v6;
    _os_log_impl(&dword_227777000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing local anchor %s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v39 = 0;
  v41 = 0;
  v40 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  memset(v10, 0, sizeof(v10));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  *(_QWORD *)&v12 = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)&v11 + 1, a2);
  LOBYTE(v56) = 1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
    rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
  rf::data_flow::provider::InputData::~InputData((void **)v10);
}

void sub_2277791D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchor(rf::data_flow::provider::AnchorDataProvider *this, const rf::data_flow::RFUUID *a2)
{
  NSObject *v4;
  void **v5;
  const unsigned __int8 *v6;
  _QWORD *AnchorPtrWithIdentifier;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  rf::realityFusionLogObject(this);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v11 = v5;
    _os_log_impl(&dword_227777000, v4, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing local anchor %s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }

  if (*((_BYTE *)a2 + 16))
    v6 = *(const unsigned __int8 **)a2;
  else
    v6 = (const unsigned __int8 *)a2;
  AnchorPtrWithIdentifier = rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(*((_QWORD *)this + 1) + 160), v6);
  rf::data_flow::validateAnchor((uint64_t)AnchorPtrWithIdentifier);
  rf::data_flow::provider::AnchorDataProvider::removeAnchor((uint64_t)this, (uint64_t)AnchorPtrWithIdentifier);
}

void sub_227779304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::addAnchors(rf *a1, uint64_t *a2)
{
  rf *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD v9[10];
  uint64_t v10;
  char v11;
  char v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;

  v3 = a1;
  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    a1 = (rf *)rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  rf::realityFusionLogObject(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
    LODWORD(v9[0]) = 134217984;
    *(_QWORD *)((char *)v9 + 4) = v7;
    _os_log_impl(&dword_227777000, v6, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Adding %lu local anchors.", (uint8_t *)v9, 0xCu);
  }

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v35 = 0;
  v37 = 0;
  v36 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v9[4] + 1);
  *(_OWORD *)((char *)&v9[4] + 8) = *(_OWORD *)a2;
  *((_QWORD *)&v9[5] + 1) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v52) = 1;
  v8 = *((_QWORD *)v3 + 1);
  if (v8)
    rf::Session::consumeInputFromProvider(v8, (uint64_t)v9);
  rf::data_flow::provider::InputData::~InputData((void **)v9);
}

void sub_2277794FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::updateAnchors(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[6];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v37 = 0;
  v39 = 0;
  v38 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  memset(v7, 0, sizeof(v7));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v8);
  v8 = *(_OWORD *)a2;
  *(_QWORD *)&v9 = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v54) = 1;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    rf::Session::consumeInputFromProvider(v6, (uint64_t)v7);
  rf::data_flow::provider::InputData::~InputData((void **)v7);
}

void sub_227779690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchors(rf *a1, uint64_t *a2)
{
  rf *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD v9[10];
  uint64_t v10;
  char v11;
  char v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;

  v3 = a1;
  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    a1 = (rf *)rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  rf::realityFusionLogObject(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
    LODWORD(v9[0]) = 134217984;
    *(_QWORD *)((char *)v9 + 4) = v7;
    _os_log_impl(&dword_227777000, v6, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing %lu local anchors.", (uint8_t *)v9, 0xCu);
  }

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v35 = 0;
  v37 = 0;
  v36 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v9[7] + 1);
  *(_OWORD *)((char *)&v9[7] + 8) = *(_OWORD *)a2;
  *((_QWORD *)&v9[8] + 1) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v52) = 1;
  v8 = *((_QWORD *)v3 + 1);
  if (v8)
    rf::Session::consumeInputFromProvider(v8, (uint64_t)v9);
  rf::data_flow::provider::InputData::~InputData((void **)v9);
}

void sub_227779884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(uint64_t a1)
{
  unsigned __int8 *Object;
  uint64_t result;
  rf *v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _OWORD v10[10];
  uint64_t v11;
  char v12;
  char v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint8_t buf[4];
  void **v62;
  _BYTE v63[280];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  Object = (unsigned __int8 *)RECustomComponentGetObject();
  REComponentGetEntity();
  if ((result & 1) != 0 || !Object[21] && !Object[20])
  {
    if (uuid_is_null(Object))
      uuid_generate_random(Object);
    rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)v63);
    if (*(_BYTE *)(a1 + 24))
      rf::helpers::printAnchorDefinitionComponentInfo();
    v4 = (rf *)rf::data_flow::validateAnchor((uint64_t)v63);
    rf::realityFusionLogObject(v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      rf::helpers::getRFUUIDFromAnchor((uint64_t)v63, (uint64_t)v10);
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
      v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v62 = v6;
      _os_log_impl(&dword_227777000, v5, OS_LOG_TYPE_DEFAULT, "Anchor Data Provider: Adding AnchorDefinition anchor %s", buf, 0xCu);
      if (v9 < 0)
        operator delete(__p[0]);
    }

    v12 = 0;
    v13 = 0;
    v14 = 0;
    v36 = 0;
    v38 = 0;
    v37 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v10[4] + 1, (uint64_t)v63);
    LOBYTE(v53) = 1;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
    rf::data_flow::provider::InputData::~InputData((void **)v10);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v63);
  }
  return result;
}

void sub_227779AE8(_Unwind_Exception *a1)
{
  void *v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isRemotelyOwned()
{
  uint64_t result;

  RENetworkComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    return RENetworkComponentIsAuthoritative() ^ 1;
  return result;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0xF0F0F0F0F0F0F0)
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x78787878787878)
      v13 = 0xF0F0F0F0F0F0F0;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[272 * v10];
    v18 = &v14[272 * v13];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v16, a2);
    v17 = v16 + 272;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v9;
  return result;
}

void sub_227779C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(uint64_t a1)
{
  uint64_t Object;
  uint64_t result;
  rf *v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _OWORD v10[10];
  uint64_t v11;
  char v12;
  char v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint8_t buf[4];
  void **v62;
  _BYTE v63[280];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  Object = RECustomComponentGetObject();
  REComponentGetEntity();
  if ((result & 1) != 0 || !*(_BYTE *)(Object + 21) && !*(_BYTE *)(Object + 20))
  {
    rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)v63);
    v4 = (rf *)rf::data_flow::validateAnchor((uint64_t)v63);
    rf::realityFusionLogObject(v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      rf::helpers::getRFUUIDFromAnchor((uint64_t)v63, (uint64_t)v10);
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
      v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v62 = v6;
      _os_log_impl(&dword_227777000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing AnchorDefinition anchor %s", buf, 0xCu);
      if (v9 < 0)
        operator delete(__p[0]);
    }

    v12 = 0;
    v13 = 0;
    v14 = 0;
    v36 = 0;
    v38 = 0;
    v37 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v53 = 1;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v10[7] + 1, (uint64_t)v63);
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
    rf::data_flow::provider::InputData::~InputData((void **)v10);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v63);
  }
  return result;
}

void sub_227779E9C(_Unwind_Exception *a1)
{
  void *v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EFD6D38, MEMORY[0x24BEDAAF0]);
}

void sub_227779FD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void rf::UserDefaults::~UserDefaults(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0)
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x78787878787878)
    v9 = 0xF0F0F0F0F0F0F0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[272 * v4];
  v16 = &v10[272 * v9];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v14, a2);
  v15 = v14 + 272;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_22777A154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_22777A198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 256);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 256) = -1;
  v5 = *(unsigned int *)(a2 + 256);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 256) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 216);
  if (v3)
  {
    *(_QWORD *)(a2 + 224) = v3;
    operator delete(v3);
  }

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 183) < 0)
    operator delete(*(void **)(a2 + 160));
  if (*(char *)(a2 + 159) < 0)
    operator delete(*(void **)(a2 + 136));

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 175) < 0)
    operator delete(*(void **)(a2 + 152));
  if (*(char *)(a2 + 151) < 0)
    operator delete(*(void **)(a2 + 128));

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{

}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id result;

  v4 = *a3;
  v5 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  v6 = a3[3];
  v7 = a3[4];
  v8 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 48) = v6;
  result = *((id *)a3 + 14);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *a3;
  v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  v7 = a3[3];
  v8 = a3[4];
  v9 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 112) = *((id *)a3 + 14);
  v10 = a3[11];
  v12 = a3[8];
  v11 = a3[9];
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 128) = v12;
  *(_OWORD *)(a2 + 144) = v11;
  result = (__n128)a3[14];
  v14 = a3[15];
  v16 = a3[12];
  v15 = a3[13];
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v14;
  *(_OWORD *)(a2 + 192) = v16;
  *(_OWORD *)(a2 + 208) = v15;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float result;

  v5 = *a3;
  v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  v7 = a3[3];
  v8 = a3[4];
  v9 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 112) = *((id *)a3 + 14);
  result = *((float *)a3 + 32);
  *(float *)(a2 + 128) = result;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  v9 = a2[10];
  v10 = a2[11];
  v11 = a2[12];
  v12 = *((_QWORD *)a2 + 26);
  v13 = a2[8];
  v14 = a2[9];
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((_QWORD *)(a1 + 216), *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 4);
  return a1;
}

void sub_22777A4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22777A550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v9;
  }
  v10 = (std::string *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v11 = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  return a1;
}

void sub_22777A6C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v2);

  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v9 = a2[8];
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v9;
  }
  v10 = (std::string *)(a1 + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 152);
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = a2[11];
  v13 = a2[12];
  v14 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_22777A844(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v2);

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v2])(&v4, a1);
  *(_DWORD *)(a1 + 256) = -1;
  return a1;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 272;
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(result - 272, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(272 * a2);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 256);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 256) = -1;
  v5 = *(unsigned int *)(a2 + 256);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24EFD71F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 256) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  result = (__n128)a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __n128 result;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  v9 = a3[9];
  *(_OWORD *)(a2 + 128) = a3[8];
  *(_OWORD *)(a2 + 144) = v9;
  v10 = a3[10];
  v11 = a3[12];
  v12 = *((_QWORD *)a3 + 26);
  *(_OWORD *)(a2 + 176) = a3[11];
  *(_OWORD *)(a2 + 192) = v11;
  *(_OWORD *)(a2 + 160) = v10;
  *(_QWORD *)(a2 + 208) = v12;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  result = *(__n128 *)((char *)a3 + 216);
  *(__n128 *)(a2 + 216) = result;
  *(_QWORD *)(a2 + 232) = *((_QWORD *)a3 + 29);
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  *((_QWORD *)a3 + 29) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __n128 result;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  *(_BYTE *)(a2 + 128) = *((_BYTE *)a3 + 128);
  v9 = *(__int128 *)((char *)a3 + 136);
  *(_QWORD *)(a2 + 152) = *((_QWORD *)a3 + 19);
  *(_OWORD *)(a2 + 136) = v9;
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 17) = 0;
  v10 = *((_QWORD *)a3 + 22);
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_QWORD *)(a2 + 176) = v10;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *((_QWORD *)a3 + 20) = 0;
  result = (__n128)a3[12];
  *(__n128 *)(a2 + 192) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  v9 = *((_QWORD *)a3 + 18);
  *(_OWORD *)(a2 + 128) = a3[8];
  *(_QWORD *)(a2 + 144) = v9;
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 16) = 0;
  v10 = *(__int128 *)((char *)a3 + 152);
  *(_QWORD *)(a2 + 168) = *((_QWORD *)a3 + 21);
  *(_OWORD *)(a2 + 152) = v10;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 19) = 0;
  result = (__n128)a3[11];
  v12 = a3[12];
  v13 = a3[14];
  *(_OWORD *)(a2 + 208) = a3[13];
  *(_OWORD *)(a2 + 224) = v13;
  *(__n128 *)(a2 + 176) = result;
  *(_OWORD *)(a2 + 192) = v12;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  v9 = a3[8];
  v10 = a3[9];
  v11 = a3[11];
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 144) = v10;
  result = (__n128)a3[12];
  v13 = a3[13];
  v14 = a3[15];
  *(_OWORD *)(a2 + 224) = a3[14];
  *(_OWORD *)(a2 + 240) = v14;
  *(__n128 *)(a2 + 192) = result;
  *(_OWORD *)(a2 + 208) = v13;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  float result;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  v8 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  result = *((float *)a3 + 32);
  *(float *)(a2 + 128) = result;
  return result;
}

uint64_t std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(i - 272);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void rf::data_flow::provider::InputData::~InputData(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  if (*((char *)this + 839) < 0)
    operator delete(this[102]);
  if (*((char *)this + 807) < 0)
    operator delete(this[98]);
  if (*((char *)this + 783) < 0)
    operator delete(this[95]);
  v2 = this[92];
  if (v2)
  {
    this[93] = v2;
    operator delete(v2);
  }
  v9 = this + 89;
  std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 86;
  std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](&v9);
  v3 = this[83];
  if (v3)
  {
    this[84] = v3;
    operator delete(v3);
  }
  v9 = this + 80;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 77;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  v4 = this[74];
  if (v4)
  {
    this[75] = v4;
    operator delete(v4);
  }
  v5 = this[71];
  if (v5)
  {
    this[72] = v5;
    operator delete(v5);
  }
  v6 = this[68];
  if (v6)
  {
    this[69] = v6;
    operator delete(v6);
  }
  v7 = this[65];
  if (v7)
  {
    this[66] = v7;
    operator delete(v7);
  }
  v9 = this + 62;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 59;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((_BYTE *)this + 448))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(this + 22));
  v9 = this + 18;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 15;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 12;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v8 = this[6];
  if (v8)
  {
    this[7] = v8;
    operator delete(v8);
  }
  v9 = this + 3;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 1200;
        std::__destroy_at[abi:ne180100]<rf::data_flow::provider::InputRoomBoundary,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<rf::data_flow::provider::InputRoomBoundary,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1184))
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 848));
  if (*(_BYTE *)(a1 + 832))
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 496));
  if (*(_BYTE *)(a1 + 480))
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 144));
}

void rf::data_flow::provider::InputMesh::~InputMesh(id *this)
{
  if (*((_BYTE *)this + 328))

  if (*((_BYTE *)this + 296))
  if (*((_BYTE *)this + 264))

  if (*((_BYTE *)this + 232))
  if (*((_BYTE *)this + 200))

  if (*((_BYTE *)this + 168))
  if (*((_BYTE *)this + 136))

}

void std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        rf::data_flow::provider::InputMesh::~InputMesh(v4 - 42);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 144)
  {
    if (*(_BYTE *)(i - 24))

  }
  a1[1] = v2;
}

void std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 272);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v3 - 272);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD7230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD7230;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22777B410(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD72C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD72C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD7340;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD7340;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD73C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD73C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::target_type()
{
}

void rf::data_flow::PlaneAnchor::~PlaneAnchor(rf::data_flow::PlaneAnchor *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }

}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EFD6D40, MEMORY[0x24BEDAB00]);
}

void sub_22777B860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void rf::getMessage(rf *this@<X0>, _QWORD *a2@<X8>, ...)
{
  size_t v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  v6 = (char *)malloc_type_malloc(v5 + 1, 0x7A27C40EuLL);
  vsnprintf(v6, v5 + 1, (const char *)this, va);
  std::string::basic_string[abi:ne180100](a2, v6, v5);
  free(v6);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t *RFARKitDataProviderCreate(void *a1)
{
  id v1;
  uint64_t *Instance;
  _QWORD *v3;
  id v5;

  v5 = a1;
  v1 = v5;
  if (qword_253DC9980 != -1)
    dispatch_once(&qword_253DC9980, &__block_literal_global);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v3 = (_QWORD *)operator new();
  *v3 = Instance;
  rf::data_flow::provider::ARKitDataProvider::ARKitDataProvider(v3 + 1, &v5);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v3);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }

  return Instance;
}

void sub_22777BB04(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E29DD50](v2, 0xA0C403368BFA0);

  _Unwind_Resume(a1);
}

void RFARKitDataProviderSetARSession(uint64_t a1, ARSession *a2)
{
  rf::data_flow::provider::ARKitDataProvider::setARSession((rf::data_flow::provider::ARKitDataProvider *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

id RFARKitDataProviderGetARSession(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 16) + 48);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider17ARKitDataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::provider::ARKitDataProvider]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9988 = 0u;
  xmmword_253DC9998 = 0u;
  xmmword_253DC99A8 = 0u;
  unk_253DC99B8 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC99C8 = 0uLL;
  unk_253DC99D8 = 0uLL;
  *((_QWORD *)&xmmword_253DC9988 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9998 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::initCallback;
  *(_QWORD *)&xmmword_253DC99A8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::finalizeCallback;
  qword_253DC99C0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC99C8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_22777BCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider((rf::data_flow::provider::ARKitDataProvider *)(v2 + 8));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22777BDB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

BOOL rf::data_flow::RFUUID::Equality::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const unsigned __int8 *v3;
  const unsigned __int8 *v4;

  if (*(_BYTE *)(a2 + 16))
    v3 = *(const unsigned __int8 **)a2;
  else
    v3 = (const unsigned __int8 *)a2;
  if (*(_BYTE *)(a3 + 16))
    v4 = *(const unsigned __int8 **)a3;
  else
    v4 = (const unsigned __int8 *)a3;
  return uuid_compare(v3, v4) == 0;
}

__n128 _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void rf::detail::insertProbeInto(rf *a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v7;
  NSObject *v8;
  void **v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  void **v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = (__int128 *)a2[1];
  if (*a2 != (uint64_t *)v5)
  {
    do
    {
      v7 = *((_OWORD *)v4 + 1);
      v36 = *(_OWORD *)v4;
      v37 = v7;
      rf::realityFusionLogObject(a1);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v36, __p);
        v9 = __p;
        if (v33 < 0)
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v35 = v9;
        _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Adding probe %s", buf, 0xCu);
        if (v33 < 0)
          operator delete(__p[0]);
      }

      v11 = a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v14 = *a3;
        v15 = (v11 - *a3) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v10 - (_QWORD)v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v18);
          v14 = *a3;
          v11 = a3[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = v37;
        v21 = &v19[32 * v15];
        *(_OWORD *)v21 = v36;
        *((_OWORD *)v21 + 1) = v20;
        if (v11 == v14)
        {
          v24 = &v19[32 * v15];
        }
        else
        {
          v22 = &v19[32 * v15];
          do
          {
            v23 = *((_OWORD *)v11 - 1);
            v24 = v22 - 32;
            *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v11 -= 32;
            v22 -= 32;
          }
          while (v11 != v14);
        }
        v13 = v21 + 32;
        *a3 = v24;
        a3[1] = v21 + 32;
        a3[2] = &v19[32 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v12 = v37;
        *(_OWORD *)v11 = v36;
        *((_OWORD *)v11 + 1) = v12;
        v13 = v11 + 32;
      }
      a3[1] = v13;
      v25 = *(_QWORD *)a1 + 288;
      __p[0] = &v36;
      v26 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v25, (uint64_t)&v36, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v27 = *(_OWORD *)v4;
      v28 = *((_OWORD *)v4 + 2);
      *((_OWORD *)v26 + 4) = *((_OWORD *)v4 + 1);
      *((_OWORD *)v26 + 5) = v28;
      *((_OWORD *)v26 + 3) = v27;
      v29 = *((_OWORD *)v4 + 3);
      v30 = *((_OWORD *)v4 + 4);
      v31 = *((_OWORD *)v4 + 6);
      *((_OWORD *)v26 + 8) = *((_OWORD *)v4 + 5);
      *((_OWORD *)v26 + 9) = v31;
      *((_OWORD *)v26 + 6) = v29;
      *((_OWORD *)v26 + 7) = v30;
      std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)(v26 + 20), v4 + 14);
      v26[22] = v4[16];
      v4 += 18;
    }
    while (v4 != (uint64_t *)v5);
  }
}

void sub_22777C140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void rf::detail::updateProbeAt(uint64_t a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = (__int128 *)a2[1];
  if (*a2 != (uint64_t *)v5)
  {
    do
    {
      v7 = *((_OWORD *)v4 + 1);
      v31 = *(_OWORD *)v4;
      v32 = v7;
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 288), (uint64_t)&v31))
      {
        v9 = a3[1];
        v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          v12 = *a3;
          v13 = (v9 - *a3) >> 5;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v8 - (_QWORD)v12;
          if (v15 >> 4 > v14)
            v14 = v15 >> 4;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
            v16 = 0x7FFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v16);
            v12 = *a3;
            v9 = a3[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = v32;
          v19 = &v17[32 * v13];
          *(_OWORD *)v19 = v31;
          *((_OWORD *)v19 + 1) = v18;
          if (v9 == v12)
          {
            v22 = &v17[32 * v13];
          }
          else
          {
            v20 = &v17[32 * v13];
            do
            {
              v21 = *((_OWORD *)v9 - 1);
              v22 = v20 - 32;
              *((_OWORD *)v20 - 2) = *((_OWORD *)v9 - 2);
              *((_OWORD *)v20 - 1) = v21;
              v9 -= 32;
              v20 -= 32;
            }
            while (v9 != v12);
          }
          v11 = v19 + 32;
          *a3 = v22;
          a3[1] = v19 + 32;
          a3[2] = &v17[32 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          v10 = v32;
          *(_OWORD *)v9 = v31;
          *((_OWORD *)v9 + 1) = v10;
          v11 = v9 + 32;
        }
        a3[1] = v11;
        v23 = *(_QWORD *)a1 + 288;
        v30 = &v31;
        v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v23, (uint64_t)&v31, (uint64_t)&std::piecewise_construct, &v30);
        v25 = *(_OWORD *)v4;
        v26 = *((_OWORD *)v4 + 2);
        *((_OWORD *)v24 + 4) = *((_OWORD *)v4 + 1);
        *((_OWORD *)v24 + 5) = v26;
        *((_OWORD *)v24 + 3) = v25;
        v27 = *((_OWORD *)v4 + 3);
        v28 = *((_OWORD *)v4 + 4);
        v29 = *((_OWORD *)v4 + 6);
        *((_OWORD *)v24 + 8) = *((_OWORD *)v4 + 5);
        *((_OWORD *)v24 + 9) = v29;
        *((_OWORD *)v24 + 6) = v27;
        *((_OWORD *)v24 + 7) = v28;
        std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)(v24 + 20), v4 + 14);
        v24[22] = v4[16];
      }
      v4 += 18;
    }
    while (v4 != (uint64_t *)v5);
  }
}

void sub_22777C374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *rf::detail::removeProbeFrom@<X0>(uint64_t *result@<X0>, rf::data_flow::RFUUID **a2@<X1>, char **a3@<X8>)
{
  rf::data_flow::RFUUID *v4;
  rf::data_flow::RFUUID *v5;
  uint64_t *v6;
  NSObject *v7;
  void **v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = result;
    do
    {
      rf::realityFusionLogObject((rf *)result);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string(v4, __p);
        v8 = __p;
        if (v25 < 0)
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v27 = v8;
        _os_log_impl(&dword_227777000, v7, OS_LOG_TYPE_DEFAULT, "ARState: Removing probe %s", buf, 0xCu);
        if (v25 < 0)
          operator delete(__p[0]);
      }

      v10 = a3[1];
      v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v13 = *a3;
        v14 = (v10 - *a3) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v9 - (_QWORD)v13;
        if (v16 >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v17);
          v13 = *a3;
          v10 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = *((_OWORD *)v4 + 1);
        v20 = &v18[32 * v14];
        *(_OWORD *)v20 = *(_OWORD *)v4;
        *((_OWORD *)v20 + 1) = v19;
        if (v10 == v13)
        {
          v23 = &v18[32 * v14];
        }
        else
        {
          v21 = &v18[32 * v14];
          do
          {
            v22 = *((_OWORD *)v10 - 1);
            v23 = v21 - 32;
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v10 -= 32;
            v21 -= 32;
          }
          while (v10 != v13);
        }
        v12 = v20 + 32;
        *a3 = v23;
        a3[1] = v20 + 32;
        a3[2] = &v18[32 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        v11 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v10 = *(_OWORD *)v4;
        *((_OWORD *)v10 + 1) = v11;
        v12 = v10 + 32;
      }
      a3[1] = v12;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*v6 + 1240), (uint64_t)v4);
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*v6 + 1280), (uint64_t)v4);
      result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*v6 + 288), (uint64_t)v4);
      v4 = (rf::data_flow::RFUUID *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
  return result;
}

void sub_22777C5D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(id *)a1;
      *(_QWORD *)a1 = v3;

    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {

    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v23;
  _OWORD **v24;
  _QWORD *v25;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v23 = *(_QWORD **)a2;
    else
      v23 = (_QWORD *)a2;
    v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_21;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v4 = v7;
    if (v7 >= v8)
      v4 = v7 % v8;
  }
  else
  {
    v4 = (v8 - 1) & v7;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v11)
    goto LABEL_21;
  v12 = (_QWORD *)*v11;
  if (!*v11)
    goto LABEL_21;
  v24 = a4;
  do
  {
    v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
        return v12;
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8)
        v13 %= v8;
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4)
      break;
LABEL_19:
    v12 = (_QWORD *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)&v25);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v25 = *v20;
    *v20 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v21 = *(_QWORD *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v25;
    }
  }
  v12 = v25;
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_22777C93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  __int128 v9;
  double result;

  v7 = a1 + 16;
  v8 = operator new(0xC0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  *((_BYTE *)v8 + 168) = 0;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_BYTE *)v8 + 160) = 0;
  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)v8 + 22) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22777CA0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  id *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 168))

  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
    if (*(_BYTE *)(a2 + 16))
      v13 = *(_QWORD **)a2;
    else
      v13 = (_QWORD *)a2;
    v3 = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
    *(_QWORD *)(a2 + 24) = v3;
  }
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v7 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    v10 = (uint64_t)(a1 + 4);
    do
    {
      v11 = v9[1];
      if (v11 == v3)
      {
        if (rf::data_flow::RFUUID::Equality::operator()(v10, (uint64_t)(v9 + 2), a2))
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (v11 >= *(_QWORD *)&v4)
            v11 %= *(_QWORD *)&v4;
        }
        else
        {
          v11 &= *(_QWORD *)&v4 - 1;
        }
        if (v11 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_DWORD *rf::data_flow::consumer::SceneGraphVisualizer::drawSceneObject(_DWORD *result, float32x4_t *a2)
{
  _DWORD *v3;
  int v4;

  v3 = result;
  v4 = *result;
  if ((*result & 1) != 0)
  {
    result = (_DWORD *)rf::helpers::drawAxis();
    v4 = *v3;
  }
  if ((v4 & 2) != 0)
  {
    __asm { FMOV            V0.4S, #1.0 }
    return (_DWORD *)rf::helpers::drawBoundingBox(*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 1), a2 + 2, a2[6].f32);
  }
  return result;
}

rf::data_flow::provider::SyntheticARDataProvider *rf::data_flow::provider::SyntheticARDataProvider::SyntheticARDataProvider(rf::data_flow::provider::SyntheticARDataProvider *this, id *a2)
{
  char *v4;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_24EFD7490;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)(a2 + 1);
  *((_QWORD *)this + 3) = *a2;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)this + 32, (uint64_t)v4);
  *((_QWORD *)this + 8) = a2[5];
  rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(this, (uint64_t)this + 72);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  return this;
}

void sub_22777D0E4(_Unwind_Exception *a1)
{
  rf::data_flow::provider::SyntheticARDataProviderConfig *v1;

  rf::data_flow::provider::SyntheticARDataProviderConfig::~SyntheticARDataProviderConfig(v1);
  _Unwind_Resume(a1);
}

double rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState@<D0>(rf::data_flow::provider::SyntheticARDataProvider *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  double v6;
  size_t v7;
  int v8;
  char i;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  void **v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  double result;
  std::string __p;
  char v29;
  std::string v30;
  char v31;
  double v32[3];
  unint64_t v33;
  std::string v34;
  void *__dst[2];
  unint64_t v36;
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = operator new();
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 48) = 1065353216;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_DWORD *)(v5 + 120) = 1065353216;
  std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(v32, (_QWORD *)v5);
  v6 = v32[0];
  std::string::basic_string[abi:ne180100]<0>(&v34, "Input Frame Provider");
  v7 = 0;
  v8 = 1;
  for (i = 114; i != 91; i = aStdStringViewR_0[v7++ + 51])
  {
    if (i == 93)
    {
      v10 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      v7 = 0;
      HIBYTE(v36) = 0;
      v11 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v10 = 1;
LABEL_8:
  v8 += v10;
  if (v8)
    goto LABEL_9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v36 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v36) = v7;
  v11 = __dst;
  if (v7)
LABEL_17:
    memcpy(v11, "rf::data_flow::provider::InputFrame]", v7);
LABEL_18:
  *((_BYTE *)v11 + v7) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    __p = v34;
  v29 = 1;
  v14 = rf::data_flow::details::NodeStore::createNode(*(_QWORD *)&v6 + 16, (unint64_t)__dst, &__p);
  if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v15 = v32[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v29 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v30, "Receive InputFrame and Update Proxy");
  v31 = 1;
  rf::getTypeName<void>(__dst);
  v16 = rf::data_flow::details::NodeStore::createNode(*(_QWORD *)&v15 + 16, (unint64_t)__dst, &__p);
  v33 = v16;
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  v17 = (void **)operator new(0x20uLL);
  *v17 = &off_24EFD74D0;
  v17[1] = (void *)v14;
  v17[2] = (void *)v16;
  v17[3] = this;
  v37 = v17;
  v18 = operator new(8uLL);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  *v18 = v14;
  v34.__r_.__value_.__l.__size_ = (std::string::size_type)(v18 + 1);
  v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v18 + 1);
  rf::data_flow::details::FunctionStore::addFunctionImpl((uint64_t *)(*(_QWORD *)&v15 + 64), (uint64_t)__dst, &v30, (uint64_t)&v34, (uint64_t *)&v33);
  if (v34.__r_.__value_.__r.__words[0])
  {
    v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  v19 = v37;
  if (v37 == __dst)
  {
    v20 = 4;
    v19 = __dst;
LABEL_36:
    (*((void (**)(void))*v19 + v20))();
  }
  else if (v37)
  {
    v20 = 5;
    goto LABEL_36;
  }
  if (v31 && SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(&__p, *(_QWORD **)&v32[0]);
  v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  result = v32[0];
  *(_OWORD *)a2 = *(_OWORD *)v32;
  *(_OWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

void sub_22777D4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::SyntheticARDataProviderConfig::~SyntheticARDataProviderConfig(rf::data_flow::provider::SyntheticARDataProviderConfig *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }

}

void rf::data_flow::provider::SyntheticARDataProvider::reset(rf::data_flow::provider::SyntheticARDataProvider *this)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD v4[10];
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  __int16 v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v30 = 0;
  v32 = 0;
  v31 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v2 = (_QWORD *)((char *)this + 144);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    rf::data_flow::provider::SyntheticARData::appendRemovedData((uint64_t)(v2 + 4), (uint64_t)v4);
  }
  LOBYTE(v47) = 1;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    rf::Session::consumeInputFromProvider(v3, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::clear((uint64_t)this + 128);
  rf::data_flow::provider::InputData::~InputData((void **)v4);
}

void sub_22777D788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::DataGraph::FunctionProperties::~FunctionProperties(void **this)
{
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

void rf::data_flow::provider::SyntheticARDataProvider::addData(uint64_t a1, unint64_t a2, __int128 *a3)
{
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  void *v46;
  _BYTE v47[40];
  void *__p;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  char v68;
  __int16 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  std::string v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  __int16 v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  uuid_t uu;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  LOBYTE(v115) = 0;
  *((_QWORD *)&v115 + 1) = 0;
  uuid_clear(uu);
  v5 = (void **)(a1 + 128);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)(a1 + 128), &v50);
  if (v6)
  {
    v7 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)(a1 + 128), &v50);
    if (!v7)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v8 = *((_OWORD *)v7 + 10);
    *(_OWORD *)uu = *((_OWORD *)v7 + 9);
    v115 = v8;
    rf::data_flow::provider::SyntheticARDataProvider::removeData((rf::data_flow::provider::SyntheticARDataProvider *)a1, v50);
  }
  v9 = operator new(0x1B0uLL);
  v10 = (_QWORD *)(a1 + 144);
  *(_QWORD *)&v56 = v9;
  *((_QWORD *)&v56 + 1) = a1 + 144;
  LOBYTE(v57) = 0;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v50;
  rf::data_flow::provider::SyntheticARData::SyntheticARData((uint64_t)(v9 + 4), *(void **)(a1 + 24), *(_QWORD *)(a1 + 64), a3);
  LOBYTE(v57) = 1;
  v9[1] = v9[2];
  v11 = (_QWORD *)v56;
  v12 = *(_QWORD *)(v56 + 16);
  *(_QWORD *)(v56 + 8) = v12;
  v13 = *(_QWORD *)(a1 + 136);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v12;
      if (v13 <= v12)
        v15 = v12 % v13;
    }
    else
    {
      v15 = (v13 - 1) & v12;
    }
    v16 = (_QWORD *)*((_QWORD *)*v5 + v15);
    if (v16)
    {
      for (i = (_QWORD *)*v16; i; i = (_QWORD *)*i)
      {
        v18 = i[1];
        if (v18 == v12)
        {
          if (i[2] == v12)
            goto LABEL_75;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v15)
            break;
        }
      }
    }
  }
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
  v20 = *(float *)(a1 + 160);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v13 = *(_QWORD *)(a1 + 136);
    }
    if (*(_QWORD *)&prime > v13)
      goto LABEL_104;
    if (*(_QWORD *)&prime >= v13)
      goto LABEL_61;
    v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
    if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
    {
      v31 = std::__next_prime(v31);
    }
    else
    {
      v33 = 1 << -(char)__clz(v31 - 1);
      if (v31 >= 2)
        v31 = v33;
    }
    if (*(_QWORD *)&prime <= v31)
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime >= v13)
    {
      v13 = *(_QWORD *)(a1 + 136);
      goto LABEL_61;
    }
    if (prime)
    {
LABEL_104:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * *(_QWORD *)&prime);
      v26 = *v5;
      *v5 = v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      *(int8x8_t *)(a1 + 136) = prime;
      do
        *((_QWORD *)*v5 + v27++) = 0;
      while (*(_QWORD *)&prime != v27);
      v28 = (_QWORD *)*v10;
      if (*v10)
      {
        v29 = v28[1];
        v30 = (uint8x8_t)vcnt_s8(prime);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        *((_QWORD *)*v5 + v29) = v10;
        v34 = (_QWORD *)*v28;
        if (*v28)
        {
          do
          {
            v35 = v34[1];
            if (v30.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&prime)
                v35 %= *(_QWORD *)&prime;
            }
            else
            {
              v35 &= *(_QWORD *)&prime - 1;
            }
            if (v35 != v29)
            {
              if (!*((_QWORD *)*v5 + v35))
              {
                *((_QWORD *)*v5 + v35) = v28;
                goto LABEL_57;
              }
              *v28 = *v34;
              *v34 = **((_QWORD **)*v5 + v35);
              **((_QWORD **)*v5 + v35) = v34;
              v34 = v28;
            }
            v35 = v29;
LABEL_57:
            v28 = v34;
            v34 = (_QWORD *)*v34;
            v29 = v35;
          }
          while (v34);
        }
      }
      v13 = (unint64_t)prime;
    }
    else
    {
      v46 = *v5;
      *v5 = 0;
      if (v46)
        operator delete(v46);
      v13 = 0;
      *(_QWORD *)(a1 + 136) = 0;
    }
  }
LABEL_61:
  v36 = v11[1];
  v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.u32[0] > 1uLL)
  {
    if (v36 >= v13)
      v36 %= v13;
  }
  else
  {
    v36 &= v13 - 1;
  }
  v38 = (_QWORD *)*((_QWORD *)*v5 + v36);
  if (v38)
  {
    *v11 = *v38;
LABEL_73:
    *v38 = v11;
    goto LABEL_74;
  }
  *v11 = *v10;
  *v10 = v11;
  *((_QWORD *)*v5 + v36) = v10;
  if (*v11)
  {
    v39 = *(_QWORD *)(*v11 + 8);
    if (v37.u32[0] > 1uLL)
    {
      if (v39 >= v13)
        v39 %= v13;
    }
    else
    {
      v39 &= v13 - 1;
    }
    v38 = (char *)*v5 + 8 * v39;
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 152);
  *(_QWORD *)&v56 = 0;
LABEL_75:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v56, 0);
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v89 = 0;
  v91 = 0;
  v90 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v66 = 0;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  memset(v88, 0, sizeof(v88));
  v96 = 0;
  v95 = 0u;
  v94 = 0u;
  v92 = 0u;
  v93 = 0u;
  std::string::operator=(v88, (const std::string *)a3);
  LOBYTE(v106) = 1;
  v40 = *(_QWORD *)(a1 + 8);
  if (v40)
    rf::Session::consumeInputFromProvider(v40, (uint64_t)&v56);
  if (*(_QWORD *)(a1 + 112))
  {
    if (!v6)
      goto LABEL_89;
    goto LABEL_83;
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v41 = *(_QWORD *)(a1 + 88);
  v51 = *(_QWORD *)(a1 + 104);
  rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>(v41, (uint64_t)&v51, (uint64_t)v47);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v47);
  if (v6)
  {
LABEL_83:
    v42 = (float32x4_t *)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)(a1 + 128), &v50);
    if (!v42)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v43 = v42 + 2;
    if ((_BYTE)v115)
      v44 = *(unsigned __int8 **)uu;
    else
      v44 = uu;
    rf::data_flow::provider::SyntheticARData::appendUpdateProbe(v43, (rf::data_flow::provider::InputData *)&v56, v44);
    LOBYTE(v106) = 1;
    v45 = *(_QWORD *)(a1 + 8);
    if (v45)
      rf::Session::consumeInputFromProvider(v45, (uint64_t)&v56);
  }
LABEL_89:
  rf::data_flow::provider::InputData::~InputData((void **)&v56);
}

void sub_22777DE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  rf::data_flow::provider::InputData::~InputData(&a29);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::SyntheticARDataProvider::removeData(rf::data_flow::provider::SyntheticARDataProvider *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD v7[10];
  uint64_t v8;
  char v9;
  char v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  __int16 v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v3 = (_QWORD *)((char *)this + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)this + 16, &v6))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v33 = 0;
    v35 = 0;
    v34 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v4 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v3, &v6);
    if (!v4)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    rf::data_flow::provider::SyntheticARData::appendRemovedData((uint64_t)(v4 + 4), (uint64_t)v7);
    LOBYTE(v50) = 1;
    v5 = *((_QWORD *)this + 1);
    if (v5)
      rf::Session::consumeInputFromProvider(v5, (uint64_t)v7);
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__erase_unique<unsigned long>(v3, &v6);
    rf::data_flow::provider::InputData::~InputData((void **)v7);
  }
}

void sub_22777E004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void rf::data_flow::provider::SyntheticARDataProvider::setDataTransform(uint64_t a1, unint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD v13[10];
  uint64_t v14;
  char v15;
  char v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  __int16 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  v5 = (_QWORD *)(a1 + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)(a1 + 128), &v12))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v39 = 0;
    v41 = 0;
    v40 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v12);
    if (!v6)
      goto LABEL_8;
    v7 = *a3;
    v8 = a3[1];
    v9 = a3[3];
    v6[7] = a3[2];
    v6[8] = v9;
    v6[5] = v7;
    v6[6] = v8;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v12);
    if (!v10)
LABEL_8:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    rf::data_flow::provider::SyntheticARData::appendUpdatedData((rf::data_flow::provider::SyntheticARData *)(v10 + 4), (rf::data_flow::provider::InputData *)v13);
    LOBYTE(v56) = 1;
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
      rf::Session::consumeInputFromProvider(v11, (uint64_t)v13);
    rf::data_flow::provider::InputData::~InputData((void **)v13);
  }
}

void sub_22777E1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void rf::data_flow::provider::SyntheticARDataProvider::provideEnvironmentProbesOnRequest(rf::data_flow::provider::SyntheticARDataProvider *this, unint64_t a2, const unsigned __int8 *a3)
{
  _QWORD *v5;
  float32x4_t *v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD v9[10];
  uint64_t v10;
  char v11;
  char v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v5 = (_QWORD *)((char *)this + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((_QWORD *)this + 16, &v8))
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v35 = 0;
    v37 = 0;
    v36 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v6 = (float32x4_t *)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v8);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    rf::data_flow::provider::SyntheticARData::appendUpdateProbe(v6 + 2, (rf::data_flow::provider::InputData *)v9, a3);
    v7 = *((_QWORD *)this + 1);
    if (v7)
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v9);
    rf::data_flow::provider::InputData::~InputData((void **)v9);
  }
}

void sub_22777E350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void rf::data_flow::provider::SyntheticARDataProvider::~SyntheticARDataProvider(rf::data_flow::provider::SyntheticARDataProvider *this)
{
  rf::data_flow::provider::SyntheticARDataProvider::~SyntheticARDataProvider(this);
  JUMPOUT(0x22E29DD50);
}

{
  rf::data_flow::provider::SyntheticARDataProvider *v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::~__hash_table((uint64_t)this + 128);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v2 = (rf::data_flow::provider::SyntheticARDataProvider *)*((_QWORD *)this + 7);
  if (v2 == (rf::data_flow::provider::SyntheticARDataProvider *)((char *)this + 32))
  {
    v3 = 4;
    v2 = (rf::data_flow::provider::SyntheticARDataProvider *)((char *)this + 32);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }

}

uint64_t std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24EFD7560;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  std::shared_ptr<rf::data_flow::DataGraph>::__enable_weak_this[abi:ne180100]<rf::data_flow::DataGraph,rf::data_flow::DataGraph,void>((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void sub_22777E4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<rf::data_flow::DataGraph>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<rf::data_flow::DataGraph>::__enable_weak_this[abi:ne180100]<rf::data_flow::DataGraph,rf::data_flow::DataGraph,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<rf::data_flow::DataGraph>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<rf::data_flow::DataGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;
  std::__shared_weak_count *v4;
  void **v5;

  if (a2)
  {
    v3 = (void **)(a2 + 64);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a2 + 88);
    v5 = v3;
    std::vector<rf::data_flow::details::FunctionStore::Function>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::~__hash_table(a2 + 16);
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x22E29DD50](a2, 0x10A0C401735900DLL);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<rf::data_flow::details::FunctionStore::Function>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 == a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  }
}

void rf::data_flow::details::FunctionStore::Function::~Function(rf::data_flow::details::FunctionStore::Function *this)
{
  void *v2;
  rf::data_flow::details::FunctionStore::Function *v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v3 = (rf::data_flow::details::FunctionStore::Function *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void rf::data_flow::details::Context::~Context(rf::data_flow::details::Context *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

uint64_t std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      rf::data_flow::provider::SyntheticARData::~SyntheticARData((rf::data_flow::provider::SyntheticARData *)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void rf::data_flow::provider::SyntheticARData::~SyntheticARData(rf::data_flow::provider::SyntheticARData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
  {
    *((_QWORD *)this + 46) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 39);
  if (v4)
  {
    *((_QWORD *)this + 40) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 36);
  if (v5)
  {
    *((_QWORD *)this + 37) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 33);
  if (v6)
  {
    *((_QWORD *)this + 34) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 216);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));

}

void std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void rf::getTypeName<void>(_BYTE *a1@<X8>)
{
  size_t v2;
  int v3;
  char i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v2 = 0;
  v3 = 1;
  for (i = 118; i != 91; i = aStdStringViewR_1[v2++ + 51])
  {
    if (i == 93)
    {
      v5 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      v2 = 0;
      a1[23] = 0;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v5 = 1;
LABEL_8:
  v3 += v5;
  if (v3)
    goto LABEL_9;
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    *((_QWORD *)a1 + 1) = v2;
    *((_QWORD *)a1 + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    a1 = v8;
  }
  else
  {
    a1[23] = v2;
    if (!v2)
      goto LABEL_18;
  }
  memcpy(a1, "void]", v2);
LABEL_18:
  a1[v2] = 0;
}

void rf::data_flow::details::FunctionStore::addFunctionImpl(uint64_t *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  __int128 *v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  std::string::size_type v29;
  void *__p[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v11 = *(_QWORD **)a4;
  v12 = *(_QWORD **)(a4 + 8);
  if (*(_QWORD **)a4 != v12)
  {
    do
    {
      *(_QWORD *)&v26 = *v11;
      *((_QWORD *)&v26 + 1) = v10;
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_multi<std::pair<unsigned long const,unsigned long>>(a1 + 3, &v26);
      ++v11;
    }
    while (v11 != v12);
  }
  std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100]((uint64_t)&v26, a2);
  std::to_string(&v24, v10);
  v13 = std::string::insert(&v24, 0, "Function ", 9uLL);
  v25 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v14 = &v25;
  if (a3[1].__r_.__value_.__s.__data_[0])
    v14 = a3;
  v29 = v14->__r_.__value_.__r.__words[2];
  v28 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v15 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v16 = *a5;
  v31 = v15;
  v32 = v16;
  v17 = a1[1];
  if (v17 >= a1[2])
  {
    v20 = std::vector<rf::data_flow::details::FunctionStore::Function>::__push_back_slow_path<rf::data_flow::details::FunctionStore::Function>(a1, (uint64_t)&v26);
    v21 = __p[0];
    a1[1] = v20;
    if (v21)
    {
      __p[1] = v21;
      operator delete(v21);
    }
  }
  else
  {
    v18 = std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](v17, (uint64_t)&v26);
    v19 = v28;
    *(_QWORD *)(v18 + 48) = v29;
    *(_QWORD *)(v18 + 56) = 0;
    *(_OWORD *)(v18 + 32) = v19;
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = 0;
    *(_OWORD *)(v18 + 56) = *(_OWORD *)__p;
    *(_QWORD *)(v18 + 72) = v31;
    __p[0] = 0;
    __p[1] = 0;
    v31 = 0;
    *(_QWORD *)(v18 + 80) = v32;
    a1[1] = v18 + 88;
  }
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  v22 = v27;
  if (v27 == &v26)
  {
    v23 = 4;
    v22 = &v26;
  }
  else
  {
    if (!v27)
      goto LABEL_16;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_16:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_22777EF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  rf::data_flow::details::FunctionStore::Function::~Function((rf::data_flow::details::FunctionStore::Function *)&a23);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_multi<std::pair<unsigned long const,unsigned long>>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[2];
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_22777F01C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::vector<rf::data_flow::details::FunctionStore::Function>::__push_back_slow_path<rf::data_flow::details::FunctionStore::Function>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>>(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t)&v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[88 * v9];
  std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](v11, a2);
  v12 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a2 + 80);
  v15[2] = v11 + 88;
  std::vector<rf::data_flow::details::FunctionStore::Function>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_22777F5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<rf::data_flow::details::FunctionStore::Function>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = a3 + v11;
      std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](a7 + v11 - 88, a3 + v11 - 88);
      v14 = *(_OWORD *)(a3 + v11 - 56);
      *(_QWORD *)(v12 - 40) = *(_QWORD *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v13 - 48) = 0;
      *(_QWORD *)(v13 - 40) = 0;
      *(_QWORD *)(v12 - 32) = 0;
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 16) = 0;
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v11 - 32);
      v15 = *(_QWORD *)(a3 + v11 - 8);
      *(_QWORD *)(v12 - 16) = *(_QWORD *)(a3 + v11 - 16);
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v12 - 8) = v15;
      v11 -= 88;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EFD74D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EFD74D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(unint64_t *a1, rf::data_flow::details::Context *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD *, _QWORD, void *, void *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[10];
  uint64_t v12;
  char v13;
  char v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, a1 + 1);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v37 = 0;
  v39 = 0;
  v38 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v7 = (_QWORD *)(a1[3] + 144);
  v40 = 0u;
  v41 = 0u;
  while (1)
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    v8 = *(_QWORD *)(a1[3] + 56);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)v8 + 48))(v8, v6, v7 + 4, v11);
  }
  LOBYTE(v54) = 1;
  v9 = *(_QWORD *)(a1[3] + 8);
  if (v9)
    rf::Session::consumeInputFromProvider(v9, (uint64_t)v11);
  rf::data_flow::provider::InputData::~InputData((void **)v11);
  return rf::data_flow::details::Context::markOutputReady(a2, a1 + 2);
}

void sub_22777FA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E29DD50);
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  std::bad_any_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB728], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      rf::data_flow::provider::SyntheticARData::~SyntheticARData((rf::data_flow::provider::SyntheticARData *)(v2 + 32));
    operator delete((void *)v2);
  }
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  rf::data_flow::details::Context::Context((uint64_t)v8, (_QWORD *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::data_flow::provider::InputFrame>((uint64_t)v8, (_QWORD *)a2, (_OWORD *)(a2 + 16));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  v5 = v10;
  v6 = v11;
  v10 = 0;
  v9 = 0uLL;
  *(_QWORD *)(a3 + 56) = v5;
  *(_QWORD *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_22777FE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::data_flow::provider::InputFrame>(uint64_t a1, _QWORD *a2, _OWORD *a3))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  void (*v6)(uint64_t);
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v11;
  void (*v12[5])(uint64_t);

  v12[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v6 = (void (*)(uint64_t))operator new(0x40uLL);
  v7 = a3[1];
  *(_OWORD *)v6 = *a3;
  *((_OWORD *)v6 + 1) = v7;
  v8 = a3[3];
  *((_OWORD *)v6 + 2) = a3[2];
  *((_OWORD *)v6 + 3) = v8;
  v12[0] = (void (*)(uint64_t))std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100];
  v12[1] = v6;
  v11 = a2;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v11);
  std::any::operator=[abi:ne180100](v9 + 3, v12);
  return std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12);
}

void sub_22777FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

unint64_t *std::any::operator=[abi:ne180100](unint64_t *a1, void (**a2)(uint64_t))
{
  unint64_t v3;
  BOOL v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t (*v8[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v9[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v9[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  std::any::any[abi:ne180100](v8, a2);
  if (v8 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1)
  {
    v3 = *a1;
    if (v8[0])
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4)
    {
      if ((unint64_t)v8[0] | v3)
      {
        if (v8[0])
        {
          v3 = (unint64_t)v8[0];
          v5 = a1;
        }
        else
        {
          v5 = (unint64_t *)v8;
        }
        if (v8[0])
          v6 = (unint64_t *)v8;
        else
          v6 = a1;
        ((void (*)(uint64_t, unint64_t *, unint64_t *, _QWORD, _QWORD))v3)(2, v6, v5, 0, 0);
      }
    }
    else
    {
      v9[0] = 0;
      v9[1] = 0;
      ((void (*)(uint64_t, unint64_t *, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))v3)(2, a1, v9, 0, 0);
      ((uint64_t (**)(uint64_t, _QWORD, unint64_t *, _QWORD, _QWORD))v8)[0](2, v8, a1, 0, 0);
      v9[0](2, v9, v8, 0, 0);
      std::any::reset[abi:ne180100](v9);
    }
  }
  std::any::reset[abi:ne180100](v8);
  return a1;
}

void sub_227780048(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x38uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_227780298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v2 = *(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::any::reset[abi:ne180100](v2 + 3);
    operator delete(v2);
  }
}

_QWORD *std::any::any[abi:ne180100](_QWORD *a1, void (**a2)(uint64_t))
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2)
    (*a2)(2);
  return a1;
}

void std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_227780370()
{
  uint64_t v0;
  uint64_t result;

  operator delete(*(void **)(v0 + 8));
  result = 0;
  *(_QWORD *)v0 = 0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__erase_unique<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4[3];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

__n128 rf::detail::insertObjectsInto@<Q0>(__n128 *a1@<X0>, __n128 **a2@<X1>, char **a3@<X8>)
{
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 v7;
  NSObject *v8;
  void **v9;
  unint64_t v10;
  char *v11;
  __n128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __n128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 result;
  __n128 v30;
  __n128 v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  void **v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a1;
    do
    {
      v7 = v4[1];
      v36 = *v4;
      v37 = v7;
      rf::realityFusionLogObject((rf *)a1);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v36, __p);
        v9 = __p;
        if (v33 < 0)
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v35 = v9;
        _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Adding object %s", buf, 0xCu);
        if (v33 < 0)
          operator delete(__p[0]);
      }

      v11 = a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v14 = *a3;
        v15 = (v11 - *a3) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v10 - (_QWORD)v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v18);
          v14 = *a3;
          v11 = a3[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = v37;
        v21 = &v19[32 * v15];
        *(__n128 *)v21 = v36;
        *((__n128 *)v21 + 1) = v20;
        if (v11 == v14)
        {
          v24 = &v19[32 * v15];
        }
        else
        {
          v22 = &v19[32 * v15];
          do
          {
            v23 = *((_OWORD *)v11 - 1);
            v24 = v22 - 32;
            *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v11 -= 32;
            v22 -= 32;
          }
          while (v11 != v14);
        }
        v13 = v21 + 32;
        *a3 = v24;
        a3[1] = v21 + 32;
        a3[2] = &v19[32 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v12 = v37;
        *(__n128 *)v11 = v36;
        *((__n128 *)v11 + 1) = v12;
        v13 = v11 + 32;
      }
      a3[1] = v13;
      v25 = v6->n128_u64[0] + 328;
      __p[0] = &v36;
      a1 = (__n128 *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v25, (uint64_t)&v36, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v26 = *v4;
      v27 = v4[1];
      v28 = v4[3];
      a1[5] = v4[2];
      a1[6] = v28;
      a1[3] = v26;
      a1[4] = v27;
      result = v4[4];
      v30 = v4[5];
      v31 = v4[6];
      a1[10].n128_u64[0] = v4[7].n128_u64[0];
      a1[8] = v30;
      a1[9] = v31;
      a1[7] = result;
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_227780768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *rf::detail::updateObjectsAt@<X0>(_QWORD *result@<X0>, __int128 **a2@<X1>, char **a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  _QWORD *v6;
  __int128 v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = result;
    do
    {
      v7 = v4[1];
      v31 = *v4;
      v32 = v7;
      result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*v6 + 328), (uint64_t)&v31);
      if (result)
      {
        v9 = a3[1];
        v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          v12 = *a3;
          v13 = (v9 - *a3) >> 5;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v8 - (_QWORD)v12;
          if (v15 >> 4 > v14)
            v14 = v15 >> 4;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
            v16 = 0x7FFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v16);
            v12 = *a3;
            v9 = a3[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = v32;
          v19 = &v17[32 * v13];
          *(_OWORD *)v19 = v31;
          *((_OWORD *)v19 + 1) = v18;
          if (v9 == v12)
          {
            v22 = &v17[32 * v13];
          }
          else
          {
            v20 = &v17[32 * v13];
            do
            {
              v21 = *((_OWORD *)v9 - 1);
              v22 = v20 - 32;
              *((_OWORD *)v20 - 2) = *((_OWORD *)v9 - 2);
              *((_OWORD *)v20 - 1) = v21;
              v9 -= 32;
              v20 -= 32;
            }
            while (v9 != v12);
          }
          v11 = v19 + 32;
          *a3 = v22;
          a3[1] = v19 + 32;
          a3[2] = &v17[32 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          v10 = v32;
          *(_OWORD *)v9 = v31;
          *((_OWORD *)v9 + 1) = v10;
          v11 = v9 + 32;
        }
        a3[1] = v11;
        v23 = *v6 + 328;
        v30 = &v31;
        result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v23, (uint64_t)&v31, (uint64_t)&std::piecewise_construct, &v30);
        v24 = *v4;
        v25 = v4[1];
        v26 = v4[3];
        *((_OWORD *)result + 5) = v4[2];
        *((_OWORD *)result + 6) = v26;
        *((_OWORD *)result + 3) = v24;
        *((_OWORD *)result + 4) = v25;
        v27 = v4[4];
        v28 = v4[5];
        v29 = v4[6];
        result[20] = *((_QWORD *)v4 + 14);
        *((_OWORD *)result + 8) = v28;
        *((_OWORD *)result + 9) = v29;
        *((_OWORD *)result + 7) = v27;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_22778097C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void rf::detail::removeObjectsFrom(rf *a1@<X0>, rf::data_flow::RFUUID **a2@<X1>, char **a3@<X8>)
{
  rf::data_flow::RFUUID *v4;
  rf::data_flow::RFUUID *v5;
  rf *v6;
  NSObject *v7;
  void **v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  int8x8_t *v24;
  _QWORD *v25;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  int8x8_t v29;
  rf *v30;
  int8x8_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *__p[2];
  char v36;
  uint8_t buf[4];
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a1;
    do
    {
      rf::realityFusionLogObject(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string(v4, __p);
        v8 = __p;
        if (v36 < 0)
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v38 = v8;
        _os_log_impl(&dword_227777000, v7, OS_LOG_TYPE_DEFAULT, "ARState: Removing object %s", buf, 0xCu);
        if (v36 < 0)
          operator delete(__p[0]);
      }

      v10 = a3[1];
      v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v13 = *a3;
        v14 = (v10 - *a3) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v9 - (_QWORD)v13;
        if (v16 >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v17);
          v13 = *a3;
          v10 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = *((_OWORD *)v4 + 1);
        v20 = &v18[32 * v14];
        *(_OWORD *)v20 = *(_OWORD *)v4;
        *((_OWORD *)v20 + 1) = v19;
        if (v10 == v13)
        {
          v23 = &v18[32 * v14];
        }
        else
        {
          v21 = &v18[32 * v14];
          do
          {
            v22 = *((_OWORD *)v10 - 1);
            v23 = v21 - 32;
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v10 -= 32;
            v21 -= 32;
          }
          while (v10 != v13);
        }
        v12 = v20 + 32;
        *a3 = v23;
        a3[1] = v20 + 32;
        a3[2] = &v18[32 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        v11 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v10 = *(_OWORD *)v4;
        *((_OWORD *)v10 + 1) = v11;
        v12 = v10 + 32;
      }
      a3[1] = v12;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v6 + 1360), (uint64_t)v4);
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v6 + 1400), (uint64_t)v4);
      v24 = *(int8x8_t **)v6;
      v25 = (_QWORD *)(*(_QWORD *)v6 + 328);
      a1 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v25, (uint64_t)v4);
      if (!a1)
        goto LABEL_55;
      v26 = v24[42];
      v27 = *((_QWORD *)a1 + 1);
      v28 = (uint8x8_t)vcnt_s8(v26);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        if (v27 >= *(_QWORD *)&v26)
          v27 %= *(_QWORD *)&v26;
      }
      else
      {
        v27 &= *(_QWORD *)&v26 - 1;
      }
      v29 = *(int8x8_t *)a1;
      v30 = *(rf **)(*v25 + 8 * v27);
      do
      {
        v31 = (int8x8_t *)v30;
        v30 = *(rf **)v30;
      }
      while (v30 != a1);
      if (v31 == &v24[43])
        goto LABEL_44;
      v32 = (unint64_t)v31[1];
      if (v28.u32[0] > 1uLL)
      {
        if (v32 >= *(_QWORD *)&v26)
          v32 %= *(_QWORD *)&v26;
      }
      else
      {
        v32 &= *(_QWORD *)&v26 - 1;
      }
      if (v32 != v27)
      {
LABEL_44:
        if (v29)
        {
          v33 = *(_QWORD *)(*(_QWORD *)&v29 + 8);
          if (v28.u32[0] > 1uLL)
          {
            v34 = *(_QWORD *)(*(_QWORD *)&v29 + 8);
            if (v33 >= *(_QWORD *)&v26)
              v34 = v33 % *(_QWORD *)&v26;
          }
          else
          {
            v34 = v33 & (*(_QWORD *)&v26 - 1);
          }
          if (v34 == v27)
            goto LABEL_48;
        }
        *(_QWORD *)(*v25 + 8 * v27) = 0;
        v29 = *(int8x8_t *)a1;
      }
      if (v29)
      {
        v33 = *(_QWORD *)(*(_QWORD *)&v29 + 8);
LABEL_48:
        if (v28.u32[0] > 1uLL)
        {
          if (v33 >= *(_QWORD *)&v26)
            v33 %= *(_QWORD *)&v26;
        }
        else
        {
          v33 &= *(_QWORD *)&v26 - 1;
        }
        if (v33 != v27)
        {
          *(_QWORD *)(*v25 + 8 * v33) = v31;
          v29 = *(int8x8_t *)a1;
        }
      }
      *v31 = v29;
      *(_QWORD *)a1 = 0;
      --*(_QWORD *)&v24[44];
      operator delete(a1);
LABEL_55:
      v4 = (rf::data_flow::RFUUID *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
}

void sub_227780D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v23;
  _OWORD **v24;
  _QWORD *v25;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v23 = *(_QWORD **)a2;
    else
      v23 = (_QWORD *)a2;
    v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_21;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v4 = v7;
    if (v7 >= v8)
      v4 = v7 % v8;
  }
  else
  {
    v4 = (v8 - 1) & v7;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v11)
    goto LABEL_21;
  v12 = (_QWORD *)*v11;
  if (!*v11)
    goto LABEL_21;
  v24 = a4;
  do
  {
    v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
        return v12;
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8)
        v13 %= v8;
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4)
      break;
LABEL_19:
    v12 = (_QWORD *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)&v25);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v25 = *v20;
    *v20 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v21 = *(_QWORD *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v25;
    }
  }
  v12 = v25;
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_227780FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  __int128 v9;
  double result;

  v7 = a1 + 16;
  v8 = operator new(0xB0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  result = 0.0;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_227781068(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  _OWORD v8[2];
  id v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(a2 + 89);
  v4 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v4;
  v5 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v5;
  v9 = *(id *)(a2 + 112);
  v10 = 0;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v7);
}

{
  __int128 v4;
  float32x4_t v5;
  float32x4_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  _OWORD v37[2];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a2 + 80);
  v36 = *(_OWORD *)(a2 + 64);
  v37[0] = v4;
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(a2 + 89);
  v5 = *(float32x4_t *)(a2 + 16);
  v32 = *(float32x4_t *)a2;
  v33 = v5;
  v6 = *(float32x4_t *)(a2 + 48);
  v34 = *(float32x4_t *)(a2 + 32);
  v35 = v6;
  v38 = *(id *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 208);
  v43 = *(_OWORD *)(a2 + 192);
  v44 = v7;
  v8 = *(_OWORD *)(a2 + 240);
  v45 = *(_OWORD *)(a2 + 224);
  v46 = v8;
  v9 = *(_OWORD *)(a2 + 144);
  v39 = *(_OWORD *)(a2 + 128);
  v40 = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v41 = *(_OWORD *)(a2 + 160);
  v42 = v10;
  v47 = 4;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v32);
  if ((*(_BYTE *)(a1 + 84) & 0x40) != 0)
  {
    v12 = 0;
    v13 = *(float32x4_t *)(a1 + 16);
    v14 = *(float32x4_t *)(a1 + 32);
    v15 = *(float32x4_t *)(a1 + 48);
    v16 = *(float32x4_t *)(a1 + 64);
    v17 = *(_OWORD *)(a2 + 144);
    v18 = *(_OWORD *)(a2 + 160);
    v19 = *(_OWORD *)(a2 + 176);
    v28 = *(_OWORD *)(a2 + 128);
    v29 = v17;
    v30 = v18;
    v31 = v19;
    do
    {
      *(float32x4_t *)((char *)&v32 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(__int128 *)((char *)&v28 + v12))), v14, *(float32x2_t *)((char *)&v28 + v12), 1), v15, *(float32x4_t *)((char *)&v28 + v12), 2), v16, *(float32x4_t *)((char *)&v28 + v12), 3);
      v12 += 16;
    }
    while (v12 != 64);
    v20 = 0;
    v27[0] = v32;
    v27[1] = v33;
    v27[2] = v34;
    v27[3] = v35;
    v21 = *(_OWORD *)(a2 + 208);
    v22 = *(_OWORD *)(a2 + 224);
    v23 = *(_OWORD *)(a2 + 240);
    v28 = *(_OWORD *)(a2 + 192);
    v29 = v21;
    v30 = v22;
    v31 = v23;
    do
    {
      *(float32x4_t *)((char *)&v32 + v20) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(__int128 *)((char *)&v28 + v20))), v14, *(float32x2_t *)((char *)&v28 + v20), 1), v15, *(float32x4_t *)((char *)&v28 + v20), 2), v16, *(float32x4_t *)((char *)&v28 + v20), 3);
      v20 += 16;
    }
    while (v20 != 64);
    v26 = a1 + 88;
    v24 = *(_QWORD *)(a1 + 88);
    v25 = *(_QWORD *)(v26 + 8);
    v28 = xmmword_2277EE940;
    rf::helpers::drawSphere(v25, v24, v27);
    return rf::helpers::drawSphere(v25, v24, &v32);
  }
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[2];
  id v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a2 + 80);
  v8[4] = *(_OWORD *)(a2 + 64);
  v9[0] = v4;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(a2 + 89);
  v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v6;
  v10 = *(id *)(a2 + 112);
  v11 = *(_DWORD *)(a2 + 128);
  v12 = 5;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
}

void sub_227781110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(uint64_t result)
{
  float32x4_t *v1;
  __int32 v2;

  v1 = (float32x4_t *)result;
  v2 = *(_DWORD *)(result + 84);
  if ((v2 & 1) != 0)
  {
    result = rf::helpers::drawAxis();
    v2 = v1[5].i32[1];
  }
  if ((v2 & 6) != 0)
    return rf::helpers::drawAnchorCube(v1[6].i64[0], v1[5].i64[1], v1 + 1);
  return result;
}

void rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  __int128 v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  std::string v69;
  std::string __p;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>((uint64_t)&v75, (__int128 *)a2);
  v79 = 1;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v75);
  if (*(_BYTE *)(a1 + 80))
  {
    v4 = 0;
    v6 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 96);
    v7 = *(float32x4_t *)(a1 + 16);
    v8 = *(float32x4_t *)(a1 + 32);
    v9 = *(float32x4_t *)(a1 + 48);
    v10 = *(float32x4_t *)(a1 + 64);
    v11 = *(_OWORD *)(a2 + 144);
    v12 = *(_OWORD *)(a2 + 160);
    v13 = *(_OWORD *)(a2 + 176);
    v71 = *(_OWORD *)(a2 + 128);
    v72 = v11;
    v73 = v12;
    v74 = v13;
    do
    {
      *(float32x4_t *)((char *)&v75 + v4) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(__int128 *)((char *)&v71 + v4))), v8, *(float32x2_t *)((char *)&v71 + v4), 1), v9, *(float32x4_t *)((char *)&v71 + v4), 2), v10, *(float32x4_t *)((char *)&v71 + v4), 3);
      v4 += 16;
    }
    while (v4 != 64);
    rf::helpers::drawPlaneRect(v5, v6, &v75, (float *)(a2 + 192));
  }
  else if ((*(_BYTE *)(a1 + 84) & 8) != 0)
  {
    v14 = 0;
    v16 = *(_QWORD *)(a1 + 88);
    v15 = *(_QWORD *)(a1 + 96);
    v17 = *(float32x4_t *)(a1 + 16);
    v18 = *(float32x4_t *)(a1 + 32);
    v19 = *(float32x4_t *)(a1 + 48);
    v20 = *(float32x4_t *)(a1 + 64);
    v21 = *(_OWORD *)(a2 + 144);
    v22 = *(_OWORD *)(a2 + 160);
    v23 = *(_OWORD *)(a2 + 176);
    v71 = *(_OWORD *)(a2 + 128);
    v72 = v21;
    v73 = v22;
    v74 = v23;
    do
    {
      *(float32x4_t *)((char *)&v75 + v14) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(__int128 *)((char *)&v71 + v14))), v18, *(float32x2_t *)((char *)&v71 + v14), 1), v19, *(float32x4_t *)((char *)&v71 + v14), 2), v20, *(float32x4_t *)((char *)&v71 + v14), 3);
      v14 += 16;
    }
    while (v14 != 64);
    __asm { FMOV            V0.4S, #1.0 }
    rf::helpers::drawPlaneRect(v15, v16, &v75, (float *)(a2 + 192));
  }
  if ((*(_BYTE *)(a1 + 85) & 2) != 0)
  {
    rf::helpers::getDebugDescriptionForClassification((int *)(a2 + 212), &__p);
    v29 = 0;
    v30 = *(float32x4_t *)(a2 + 48);
    v31 = vmulq_f32(*(float32x4_t *)(a2 + 32), (float32x4_t)0);
    v32 = *(float32x4_t *)(a2 + 64);
    v46 = *(float32x4_t *)(a2 + 80);
    v33 = vmlaq_f32(vmlaq_f32(*(float32x4_t *)(a2 + 32), (float32x4_t)0, v30), (float32x4_t)0, v32);
    v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v43 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    v37 = vmlaq_f32(vaddq_f32(v31, v30), (float32x4_t)0, v32);
    v38 = (int32x4_t)vmulq_f32(v37, v37);
    v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
    v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
    v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
    v44 = vmulq_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
    v41 = vaddq_f32(vmlaq_f32(v31, (float32x4_t)0, v30), v32);
    v42 = (int32x4_t)vmulq_f32(v41, v41);
    v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
    *(float32x2_t *)v31.f32 = vrsqrte_f32((float32x2_t)v42.u32[0]);
    *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32)));
    v45 = vmulq_n_f32(v41, vmul_f32(*(float32x2_t *)v31.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32))).f32[0]);
    v43.i32[3] = 0;
    v44.i32[3] = 0;
    v45.i32[3] = 0;
    v46.i32[3] = 1.0;
    v71 = xmmword_2277EE440;
    v72 = xmmword_2277EE450;
    v73 = xmmword_2277EE460;
    v74 = xmmword_2277EE8F0;
    do
    {
      *(float32x4_t *)((char *)&v75 + v29) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v71 + v29))), v44, *(float32x2_t *)((char *)&v71 + v29), 1), v45, *(float32x4_t *)((char *)&v71 + v29), 2), v46, *(float32x4_t *)((char *)&v71 + v29), 3);
      v29 += 16;
    }
    while (v29 != 64);
    v47 = 0;
    v48 = v75;
    v49 = v76;
    v50 = v77;
    v51 = v78;
    v52 = vrsqrte_f32((float32x2_t)1065353216);
    *(float32x2_t *)&v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v52, v52)));
    v54 = vmulq_n_f32((float32x4_t)xmmword_2277EE440, vmul_f32(*(float32x2_t *)&v53, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)&v53, *(float32x2_t *)&v53))).f32[0]);
    v55 = vmulq_f32(v54, v54).f32[0];
    v56 = vmuls_lane_f32(v54.f32[1], *(float32x2_t *)v54.f32, 1);
    v57 = vmuls_lane_f32(v54.f32[2], v54, 2);
    v58 = vmuls_lane_f32(v54.f32[0], *(float32x2_t *)v54.f32, 1);
    v59 = vmuls_lane_f32(v54.f32[0], v54, 2);
    v60 = vmuls_lane_f32(v54.f32[1], v54, 2);
    v61 = v59 - v54.f32[1];
    *(float *)&v53 = v54.f32[1] + v59;
    *(float *)&v62 = v55 + (float)((float)(1.0 - v55) * -0.000000043711);
    *((float *)&v62 + 1) = v58 - v54.f32[2];
    HIDWORD(v63) = 0;
    *((_QWORD *)&v62 + 1) = v53;
    HIDWORD(v53) = 0;
    *(float *)&v53 = v54.f32[2] + v58;
    *((float *)&v53 + 1) = v56 + (float)((float)(1.0 - v56) * -0.000000043711);
    *((float *)&v53 + 2) = v60 - v54.f32[0];
    *(float *)&v63 = v61;
    *((float *)&v63 + 1) = v54.f32[0] + v60;
    *((float *)&v63 + 2) = v57 + (float)((float)(1.0 - v57) * -0.000000043711);
    v71 = v62;
    v72 = v53;
    v73 = v63;
    v74 = xmmword_2277EE900;
    do
    {
      *(float32x4_t *)((char *)&v75 + v47) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, COERCE_FLOAT(*(__int128 *)((char *)&v71 + v47))), v49, *(float32x2_t *)((char *)&v71 + v47), 1), v50, *(float32x4_t *)((char *)&v71 + v47), 2), v51, *(float32x4_t *)((char *)&v71 + v47), 3);
      v47 += 16;
    }
    while (v47 != 64);
    v64 = 0;
    v65 = v75;
    v66 = v76;
    v67 = v77;
    v68 = v78;
    v71 = xmmword_2277EE910;
    v72 = xmmword_2277EE920;
    v73 = xmmword_2277EE930;
    v74 = xmmword_2277EE900;
    do
    {
      *(float32x4_t *)((char *)&v75 + v64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, COERCE_FLOAT(*(__int128 *)((char *)&v71 + v64))), v66, *(float32x2_t *)((char *)&v71 + v64), 1), v67, *(float32x4_t *)((char *)&v71 + v64), 2), v68, *(float32x4_t *)((char *)&v71 + v64), 3);
      v64 += 16;
    }
    while (v64 != 64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v69 = __p;
    REDebugRendererDrawTextAtWorldTransform();
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_227781628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(float32x4_t *a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v10[70];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>((uint64_t)v10, (__int128 *)a2);
  v10[64] = 2;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties((uint64_t)a1);
  result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v10);
  if ((a1[5].i8[4] & 0x10) != 0)
  {
    __asm { FMOV            V0.4S, #1.0 }
    return rf::helpers::drawPlaneRect(a1[6].i64[0], a1[5].i64[1], a1 + 1, (float *)(a2 + 192));
  }
  return result;
}

void sub_22778170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  _OWORD v11[4];
  float32x4_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>((uint64_t)&v12, a2);
  v13 = 3;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v12);
  if ((*(_BYTE *)(a1 + 84) & 0x20) != 0)
  {
    v5 = 0;
    v6 = a2[13];
    HIDWORD(v6) = 1.0;
    v7 = *(float32x4_t *)(a1 + 16);
    v8 = *(float32x4_t *)(a1 + 32);
    v9 = *(float32x4_t *)(a1 + 48);
    v10 = *(float32x4_t *)(a1 + 64);
    v11[0] = xmmword_2277EE440;
    v11[1] = xmmword_2277EE450;
    v11[2] = xmmword_2277EE460;
    v11[3] = v6;
    do
    {
      *(float32x4_t *)((char *)&v12 + v5 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v11[v5])), v8, *(float32x2_t *)&v11[v5], 1), v9, (float32x4_t)v11[v5], 2), v10, (float32x4_t)v11[v5], 3);
      ++v5;
    }
    while (v5 != 4);
    return rf::helpers::drawBox(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 88), &v12);
  }
  return result;
}

void sub_227781830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227781A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void sub_227781AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

rf::data_flow::consumer::EnvironmentProbeConsumer *rf::data_flow::consumer::EnvironmentProbeConsumer::EnvironmentProbeConsumer(rf::data_flow::consumer::EnvironmentProbeConsumer *this, const rf::data_flow::consumer::EnvironmentProbeConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  const void *v16;

  *(_QWORD *)this = &off_24EFD7628;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 12);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)this + 72, (uint64_t)a2 + 56);
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)this + 104, (uint64_t)a2 + 88);
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 19) = 0x3DCCCCCD3F800000;
  *((_DWORD *)this + 40) = 1092616192;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 1065353216;
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 544) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 1065353216;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 158) = 1065353216;
  *((_QWORD *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_DWORD *)this + 174) = 1065353216;
  *((_QWORD *)this + 90) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((int32x4_t *)this + 46) = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v7 = 0x7F0000007FLL;
  *((_QWORD *)&v7 + 1) = 0x7F0000007FLL;
  *((_OWORD *)this + 47) = v7;
  *((_BYTE *)this + 137) = *((_BYTE *)a2 + 3);
  *((_BYTE *)this + 136) = *(_BYTE *)a2;
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 32);
  std::string::basic_string[abi:ne180100]<0>(v14, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v16, (const UInt8 *)v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeUserDefaultsUpdatePeriod");
  v8 = rf::UserDefaults::intValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v9)
    v10 = v8;
  else
    v10 = 0;
  *((_QWORD *)this + 21) = v10;
  if (v13 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v16);
  if (v15 < 0)
    operator delete(v14[0]);
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults(this);
  return this;
}

void sub_227781E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(v23 + 60));
  std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(v23 + 52));
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table(v24);
  if (*(_BYTE *)(v22 + 544) && *(_BYTE *)(v22 + 520))

  if (*(_BYTE *)(v22 + 384))
  {
    if (*(_BYTE *)(v22 + 360))

  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table((uint64_t)(v23 + 1));
  RESharedPtr<REEntity>::~RESharedPtr(v23);
  rf::data_flow::consumer::EnvironmentProbeConfig::~EnvironmentProbeConfig((rf::data_flow::consumer::EnvironmentProbeConfig *)(v22 + 16));
  _Unwind_Resume(a1);
}

void sub_227781F44()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 96);
  if (v2 == v1)
  {
    v3 = 4;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
    v1 = *(_QWORD **)(v0 + 96);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v3))(v1);
LABEL_6:
  JUMPOUT(0x227781F3CLL);
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults(rf::data_flow::consumer::EnvironmentProbeConsumer *this)
{
  unsigned __int16 v2;
  int v3;
  unsigned __int16 v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  const void *v16;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceGlobalProbe");
  v2 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v2 > 0xFFu)
    v3 = v2;
  else
    v3 = *((unsigned __int8 *)this + 16);
  *((_BYTE *)this + 136) = v3 != 0;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceProbeExposureAdjustment");
  v4 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v4 > 0xFFu)
    v5 = v4;
  else
    v5 = *((unsigned __int8 *)this + 19);
  *((_BYTE *)this + 137) = v5 != 0;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceOneLocal");
  v6 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v6 <= 0x100)
    LOBYTE(v6) = 0;
  if ((_BYTE)v6)
    v7 = 1;
  else
    v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 35) = v7;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.CameraBasedProbePlacement");
  v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v8 > 0xFFu)
    v9 = v8;
  else
    v9 = *((unsigned __int8 *)this + 48);
  *((_BYTE *)this + 144) = v9 != 0;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.CameraBasedProbePlacementRadius");
  v10 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v10 & 0xFF00000000) == 0)
    LODWORD(v10) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 37) = v10;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeIntensityExpSmoothFactor");
  v11 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v11 & 0xFF00000000) == 0)
    LODWORD(v11) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 38) = v11;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeClampFloor");
  v12 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v12 & 0xFF00000000) == 0)
    LODWORD(v12) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 39) = v12;
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeClampCeil");
  v13 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v13 & 0xFF00000000) == 0)
    LODWORD(v13) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 40) = v13;
  if (v15 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v16);
}

void sub_227782208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  rf::UserDefaults::~UserDefaults(&a15);
  _Unwind_Resume(a1);
}

void sub_22778226C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x227782264);
}

void rf::data_flow::consumer::EnvironmentProbeConfig::~EnvironmentProbeConfig(rf::data_flow::consumer::EnvironmentProbeConfig *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  rf::data_flow::consumer::EnvironmentProbeConfig *v5;
  uint64_t v6;

  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (rf::data_flow::consumer::EnvironmentProbeConfig *)*((_QWORD *)this + 10);
  if (v5 == (rf::data_flow::consumer::EnvironmentProbeConfig *)((char *)this + 56))
  {
    v6 = 4;
    v5 = (rf::data_flow::consumer::EnvironmentProbeConfig *)((char *)this + 56);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t ProbeManager;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  const unsigned __int8 *v19;
  const unsigned __int8 *v20;
  unint64_t v21;
  const unsigned __int8 *v22;
  const unsigned __int8 *v23;
  rf *v24;
  const unsigned __int8 *v25;
  const unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  _BYTE *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float32x4_t *v36;
  uint64_t *v37;
  float32x4_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  float32x4_t v44;
  float32x4_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint8x8_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  float32x4_t v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  uint8x8_t v69;
  uint8x8_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  _BYTE *v74;
  NSObject *v75;
  _BYTE *v76;
  _QWORD *v77;
  size_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int64x2_t v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  void **v101;
  unint64_t v102;
  uint8x8_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  __int128 v108;
  float v109;
  float v110;
  _BOOL8 v111;
  unint64_t v112;
  unint64_t v113;
  int8x8_t prime;
  void *v115;
  void *v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint8x8_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  rf *v129;
  rf::data_flow::RFUUID *v130;
  __int128 v131;
  NSObject *v132;
  uint8_t *v133;
  unint64_t *v134;
  int8x8_t v135;
  unint64_t v136;
  uint8x8_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  int8x8_t v147;
  unint64_t v148;
  uint8x8_t v149;
  NSObject *v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  _BYTE *v161;
  _QWORD *v162;
  _QWORD *v163;
  float v164;
  id *v165;
  _BOOL4 v166;
  _BOOL4 v167;
  float v168;
  float32x4_t *MutableCameraAnchor;
  id v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t *v176;
  float32x4_t v177;
  float32x4_t v178;
  uint32x4_t v179;
  uint32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  float32x4_t v198;
  float32x4_t v199;
  uint32x4_t v200;
  uint32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  uint32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint32x4_t v213;
  uint32x4_t v214;
  uint64_t v215;
  uint64_t v216;
  uint8_t *v217;
  uint64_t v218;
  uint8_t *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  float v236;
  float32x4_t *v237;
  uint64_t v238;
  float32x4_t *v239;
  float v240;
  float32x4_t *v241;
  float32x4_t *v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float v250;
  uint32x4_t v251;
  float32x4_t v252;
  float32_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  float32x4_t *v262;
  unint64_t v263;
  float32x4_t v264;
  unint64_t v265;
  uint64_t v266;
  float32x4_t *v267;
  float32x4_t *v268;
  unint64_t v269;
  size_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t *v273;
  float32x4_t v274;
  uint32x4_t v275;
  float32x4_t v276;
  uint32x4_t v277;
  size_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  float32x4_t *v286;
  unint64_t v287;
  float32x4_t v288;
  float32x4_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  float32x4_t *v293;
  _QWORD *v294;
  float32x4_t *v295;
  float32x4_t *v296;
  uint64_t *v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  char v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  id *i;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  uint64_t v317;
  float32x4_t *v318;
  float32x4_t v319;
  int32x4_t v320;
  unsigned int v321;
  uint32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int v326;
  rf *v327;
  NSObject *v328;
  _BYTE *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  id *location;
  uint64_t *v336;
  uint64_t *v337;
  id v338;
  id *v339;
  rf::data_flow::RFUUID *v340;
  _QWORD *v341;
  int v342;
  id v343;
  float32x4_t v344;
  uint64_t v345;
  int v346;
  float32x4_t v347;
  _BOOL4 v348;
  std::mutex *v349;
  float32x4_t *v350;
  _BOOL4 v351;
  float32x4_t v352;
  unint64_t *v353;
  float32x4_t v354;
  _QWORD *v355;
  float32x4_t v356;
  _QWORD *v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  _QWORD *v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  _QWORD *v365;
  float32x4_t v366;
  float v367;
  float32x4_t v368;
  float32x4_t v369;
  _BYTE v370[24];
  _BYTE *v371;
  _BYTE v372[24];
  _BYTE *v373;
  _QWORD v374[3];
  _QWORD *v375;
  _QWORD v376[3];
  _QWORD *v377;
  _QWORD v378[3];
  _QWORD *v379;
  _QWORD v380[3];
  _QWORD *v381;
  _BYTE __p[32];
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  __int128 v386;
  __int128 v387;
  float32x4_t v388;
  float32x4_t v389;
  id v390;
  char v391;
  uint64_t v392;
  uint8_t v393[16];
  uint8_t buf[16];
  float32x4_t v395;
  float32x4_t v396;
  __int128 v397;
  __int128 v398;
  float32x4_t v399;
  float32x4_t v400;
  id v401;
  unsigned __int8 v402;
  uint64_t v403;
  uint8_t v404[16];
  __int128 v405;
  __int128 v406;
  uint32x4_t v407;
  uint8_t v408[16];
  __int128 v409;
  int v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
  if (*(float *)a2 <= 10.0 && *(float *)a2 >= 0.0)
  {
    v3 = a2;
    if (*(_BYTE *)(a2 + 32))
    {
      if (*(_BYTE *)(a2 + 16))
      {
        v349 = *(std::mutex **)(a1 + 8);
        std::mutex::lock(v349);
        v5 = *(_QWORD *)(a1 + 168);
        if (v5)
        {
          v6 = *(_QWORD *)(a1 + 176);
          if (v6 >= 2)
            v5 = v6 - 1;
          *(_QWORD *)(a1 + 176) = v5;
          if (v6 <= 1)
            rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults((rf::data_flow::consumer::EnvironmentProbeConsumer *)a1);
        }
        if (!*(_BYTE *)(v3 + 16))
          std::__throw_bad_optional_access[abi:ne180100]();
        MEMORY[0x22E29DA08](*(_QWORD *)(v3 + 8));
        if (!*(_BYTE *)(v3 + 16))
          std::__throw_bad_optional_access[abi:ne180100]();
        v7 = MEMORY[0x22E29DA38](*(_QWORD *)(v3 + 8));
        if (v7)
        {
          if (*(unsigned __int8 *)(a1 + 18) != RERenderManagerGetEnableProbeLightingLegacyBlur())
            RERenderManagerSetEnableProbeLightingLegacyBlur();
          RERenderManagerSetEnableProbeExposureAdjustment();
          v8 = *(_BYTE *)(a1 + 137) != 0;
        }
        else
        {
          v8 = 0;
        }
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        if (v7)
        {
          ProbeManager = RERenderManagerGetProbeManager();
          v10 = !v8;
          if (!ProbeManager)
            v10 = 1;
          if ((v10 & 1) == 0)
          {
            RERenderManagerSetProbeIntensityScale();
            RERenderManagerSetProbeIntensityExpSmoothFactor();
            RERenderManagerSetProbeClampFloor();
            RERenderManagerSetProbeClampCeil();
          }
        }
        v11 = *(uint64_t **)&v349[39].__m_.__opaque[32];
        if (v11)
        {
          v12 = 0;
LABEL_30:
          v339 = (id *)(a1 + 400);
          v340 = (rf::data_flow::RFUUID *)(a1 + 240);
          location = (id *)(a1 + 352);
          v336 = (uint64_t *)(a1 + 184);
          v341 = (_QWORD *)(a1 + 664);
          v355 = (_QWORD *)(a1 + 560);
          v361 = (_QWORD *)(a1 + 600);
          v353 = (unint64_t *)(a1 + 616);
          v365 = (_QWORD *)(a1 + 192);
          v357 = (_QWORD *)(a1 + 208);
          v334 = v3;
          while (1)
          {
            v13 = v11[6];
            if (*(_BYTE *)(v13 + 120))
              v14 = *(_BYTE *)(v3 + 16) == 0;
            else
              v14 = 1;
            if (v14)
              goto LABEL_36;
            v15 = MEMORY[0x22E29DA08](*(_QWORD *)(v3 + 8));
            if (!*(_BYTE *)(v3 + 16))
              goto LABEL_700;
            v16 = v15;
            v17 = MEMORY[0x22E29DA14](*(_QWORD *)(v3 + 8));
            if (!v16 || !v17)
              goto LABEL_36;
            REColorManagerSetAverageAREnvLightIntensity();
            v18 = v11 + 2;
            if (*(_BYTE *)(a1 + 544))
            {
              v19 = *((_BYTE *)v11 + 32) ? (const unsigned __int8 *)v11[2] : (const unsigned __int8 *)(v11 + 2);
              v20 = *(_BYTE *)(a1 + 416) ? *(const unsigned __int8 **)(a1 + 400) : (const unsigned __int8 *)(a1 + 400);
              v21 = uuid_compare(v19, v20);
              v2 = v21;
              if (*(_BYTE *)(a1 + 384))
              {
                if (*((_BYTE *)v11 + 32))
                  v22 = (const unsigned __int8 *)v11[2];
                else
                  v22 = (const unsigned __int8 *)(v11 + 2);
                if (*(_BYTE *)(a1 + 256))
                  v23 = *(const unsigned __int8 **)(a1 + 240);
                else
                  v23 = (const unsigned __int8 *)(a1 + 240);
                v24 = (rf *)uuid_compare(v22, v23);
                v351 = *(_BYTE *)(a1 + 137) != 0;
                if (!(_DWORD)v2)
                {
                  v29 = *(unsigned __int8 *)(a1 + 384);
                  if (*(_BYTE *)(a1 + 384))
                  {
                    rf::realityFusionLogObject(v24);
                    v30 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                    {
                      rf::data_flow::RFUUID::string(v340, __p);
                      v31 = __p;
                      if (__p[23] < 0)
                        v31 = *(_BYTE **)__p;
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v31;
                      _os_log_impl(&dword_227777000, v30, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Removing background anchor %s", buf, 0xCu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }

                    v32 = *(_QWORD *)(a1 + 128);
                    v29 = *(unsigned __int8 *)(a1 + 384);
                    if (v32)
                    {
                      if (*(_BYTE *)(a1 + 384))
                      {
                        (*(void (**)(uint64_t, rf::data_flow::RFUUID *))(*(_QWORD *)v32 + 48))(v32, v340);
                        v29 = *(unsigned __int8 *)(a1 + 384);
                        goto LABEL_84;
                      }
LABEL_700:
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                  }
LABEL_84:
                  if (v29 == *(unsigned __int8 *)(a1 + 544))
                  {
                    if (v29)
                    {
                      v33 = *(_OWORD *)(a1 + 480);
                      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 464);
                      *(_OWORD *)(a1 + 320) = v33;
                      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 496);
                      v34 = *(_OWORD *)(a1 + 416);
                      *(_OWORD *)v340 = *(_OWORD *)v339;
                      *(_OWORD *)(a1 + 256) = v34;
                      v35 = *(_OWORD *)(a1 + 448);
                      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 432);
                      *(_OWORD *)(a1 + 288) = v35;
                      std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(location, *(void **)(a1 + 512), *(_BYTE *)(a1 + 520));
                      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 528);
                      goto LABEL_156;
                    }
                  }
                  else
                  {
                    if (v29)
                    {
                      if (*(_BYTE *)(a1 + 360))

                      *(_BYTE *)(a1 + 384) = 0;
                    }
                    else
                    {
                      std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>((uint64_t)v340, v339);
                      *(_BYTE *)(a1 + 384) = 1;
                    }
LABEL_156:
                    if (*(_BYTE *)(a1 + 544))
                    {
                      if (*(_BYTE *)(a1 + 520))

                      *(_BYTE *)(a1 + 544) = 0;
                    }
                  }
                  v28 = *v336;
                  if (!*v336)
                  {
                    rf::realityFusionLogObject(0);
                    v75 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                    {
                      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
                      v76 = __p;
                      if (__p[23] < 0)
                        v76 = *(_BYTE **)__p;
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v76;
                      _os_log_impl(&dword_227777000, v75, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the background probe entity %s.", buf, 0xCu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }

                    if (!*(_BYTE *)(v3 + 32))
                      std::__throw_bad_optional_access[abi:ne180100]();
                    goto LABEL_167;
                  }
LABEL_72:
LABEL_168:
                  if (*(_BYTE *)(a1 + 384))
                  {
                    std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(location, *(void **)(v13 + 112), *(_BYTE *)(v13 + 120));
                    goto LABEL_36;
                  }
                  goto LABEL_700;
                }
                if (!(_DWORD)v24)
                  goto LABEL_71;
              }
              else
              {
                v351 = *(_BYTE *)(a1 + 137) != 0;
                if (!(_DWORD)v21)
                {
                  v29 = 0;
                  goto LABEL_84;
                }
              }
            }
            else if (*(_BYTE *)(a1 + 384))
            {
              if (*((_BYTE *)v11 + 32))
                v25 = (const unsigned __int8 *)v11[2];
              else
                v25 = (const unsigned __int8 *)(v11 + 2);
              if (*(_BYTE *)(a1 + 256))
                v26 = *(const unsigned __int8 **)(a1 + 240);
              else
                v26 = (const unsigned __int8 *)(a1 + 240);
              v27 = uuid_compare(v25, v26);
              v351 = *(_BYTE *)(a1 + 137) != 0;
              if (!v27)
              {
LABEL_71:
                v28 = *v336;
                if (*v336)
                  goto LABEL_72;
                rf::realityFusionLogObject(0);
                v73 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                {
                  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
                  v74 = __p;
                  if (__p[23] < 0)
                    v74 = *(_BYTE **)__p;
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v74;
                  _os_log_impl(&dword_227777000, v73, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the background probe entity %s.", buf, 0xCu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }

                if (!*(_BYTE *)(v3 + 32))
                  std::__throw_bad_optional_access[abi:ne180100]();
LABEL_167:
                RESceneAddEntity();
                RESharedPtr<REEntity>::operator=(v336, *(uint64_t *)__p);
                RESharedPtr<REEntity>::~RESharedPtr(__p);
                goto LABEL_168;
              }
            }
            else
            {
              v351 = *(_BYTE *)(a1 + 137) != 0;
            }
            v36 = (float32x4_t *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v341, (uint64_t)(v11 + 2));
            v37 = (uint64_t *)v36;
            if (!v36)
            {
              v41 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v365, (uint64_t)(v11 + 2));
              if (v41)
              {
              }
              else
              {
                rf::realityFusionLogObject(0);
                v72 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                {
                  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
                  v161 = __p;
                  if (__p[23] < 0)
                    v161 = *(_BYTE **)__p;
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v161;
                  _os_log_error_impl(&dword_227777000, v72, OS_LOG_TYPE_ERROR, "EnvironmentProbeConsumer: The probe %s was not expected", buf, 0xCu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }

              }
              goto LABEL_36;
            }
            v38 = v36[4];
            v39 = (__int128)v36[6];
            v40 = (__int128)v36[7];
            v396 = v36[5];
            v397 = v39;
            v398 = v40;
            *(float32x4_t *)buf = v36[3];
            v395 = v38;
            v344 = v36[9];
            v347 = v36[8];
            v342 = v36[10].u8[8];
            if (v36[10].i8[8])
              v338 = (id)v36[10].i64[0];
            else
              v338 = 0;
            v337 = v37;
            v42 = v37[22];
            v43 = *((_OWORD *)v11 + 2);
            *(_OWORD *)__p = *v18;
            *(_OWORD *)&__p[16] = v43;
            v385 = v396;
            v386 = v397;
            v387 = v398;
            v383 = *(float32x4_t *)buf;
            v384 = v395;
            v388 = v347;
            v389 = v344;
            LOBYTE(v390) = 0;
            v391 = 0;
            if (v342)
            {
              v390 = v338;
              v391 = 1;
            }
            v392 = v42;
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>((uint64_t)v355, (uint64_t)__p, (uint64_t)__p);
            if (v391)

            v44.i64[0] = 0x3F0000003F000000;
            v44.i64[1] = 0x3F0000003F000000;
            v45 = vmulq_f32(v344, v44);
            v46 = *((_OWORD *)v11 + 2);
            *(_OWORD *)__p = *v18;
            *(_OWORD *)&__p[16] = v46;
            v383 = vsubq_f32(v347, v45);
            v384 = vaddq_f32(v347, v45);
            v47 = *((_QWORD *)&v46 + 1);
            if (!*((_QWORD *)&v46 + 1))
            {
              v162 = __p;
              if (__p[16])
                v162 = *(_QWORD **)__p;
              v47 = ((*v162 >> 2) + (*v162 << 6) + v162[1] + 2654435769) ^ *v162;
              *(_QWORD *)&__p[24] = v47;
            }
            v48 = *(_QWORD *)(a1 + 608);
            v345 = v12;
            v49 = (unint64_t *)(a1 + 600);
            if (v48)
            {
              v50 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
              v50.i16[0] = vaddlv_u8(v50);
              v51 = v50.u32[0];
              if (v50.u32[0] > 1uLL)
              {
                v2 = v47;
                if (v47 >= v48)
                  v2 = v47 % v48;
              }
              else
              {
                v2 = (v48 - 1) & v47;
              }
              v52 = *(_QWORD **)(*v361 + 8 * v2);
              if (v52)
              {
                v53 = (_QWORD *)*v52;
                if (*v52)
                {
                  do
                  {
                    v54 = v53[1];
                    if (v54 == v47)
                    {
                      v55 = rf::data_flow::RFUUID::Equality::operator()(a1 + 632, (uint64_t)(v53 + 2), (uint64_t)__p);
                      if ((v55 & 1) != 0)
                        goto LABEL_200;
                    }
                    else
                    {
                      if (v51 > 1)
                      {
                        if (v54 >= v48)
                          v54 %= v48;
                      }
                      else
                      {
                        v54 &= v48 - 1;
                      }
                      if (v54 != v2)
                        break;
                    }
                    v53 = (_QWORD *)*v53;
                  }
                  while (v53);
                }
                v49 = (unint64_t *)(a1 + 600);
              }
            }
            v55 = (unint64_t)operator new(0x50uLL);
            v56 = v55;
            *(_QWORD *)v55 = 0;
            *(_QWORD *)(v55 + 8) = v47;
            v57 = *(_OWORD *)&__p[16];
            *(_OWORD *)(v55 + 16) = *(_OWORD *)__p;
            *(_OWORD *)(v55 + 32) = v57;
            v58 = v384;
            *(float32x4_t *)(v55 + 48) = v383;
            *(float32x4_t *)(v55 + 64) = v58;
            v59 = (float)(unint64_t)(*(_QWORD *)(a1 + 624) + 1);
            v60 = *(float *)(a1 + 632);
            if (!v48 || (float)(v60 * (float)v48) < v59)
              break;
LABEL_190:
            v79 = *v49;
            v80 = *(unint64_t **)(*v49 + 8 * v2);
            if (v80)
            {
              *(_QWORD *)v56 = *v80;
LABEL_198:
              *v80 = v56;
              goto LABEL_199;
            }
            *(_QWORD *)v56 = *v353;
            *v353 = v56;
            *(_QWORD *)(v79 + 8 * v2) = v353;
            if (*(_QWORD *)v56)
            {
              v81 = *(_QWORD *)(*(_QWORD *)v56 + 8);
              if ((v48 & (v48 - 1)) != 0)
              {
                if (v81 >= v48)
                  v81 %= v48;
              }
              else
              {
                v81 &= v48 - 1;
              }
              v80 = (unint64_t *)(*v49 + 8 * v81);
              goto LABEL_198;
            }
LABEL_199:
            ++*(_QWORD *)(a1 + 624);
LABEL_200:
            rf::realityFusionLogObject((rf *)v55);
            v2 = objc_claimAutoreleasedReturnValue();
            v82 = (unint64_t)(v11 + 2);
            if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
            {
              rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
              v83 = __p;
              if (__p[23] < 0)
                v83 = *(_BYTE **)__p;
              *(_DWORD *)v404 = 136315138;
              *(_QWORD *)&v404[4] = v83;
              _os_log_impl(&dword_227777000, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the local probe entity %s.", v404, 0xCu);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }

            v84 = *(_QWORD *)v393;
            v85 = *(_QWORD **)(a1 + 648);
            v86 = *(_QWORD *)(a1 + 656);
            if ((unint64_t)v85 >= v86)
            {
              v2 = *(_QWORD *)(a1 + 640);
              v88 = (uint64_t)((uint64_t)v85 - v2) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v90 = v86 - v2;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              v383.i64[0] = a1 + 656;
              if (v91)
              {
                if (v91 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v92 = (char *)operator new(8 * v91);
              }
              else
              {
                v92 = 0;
              }
              v93 = &v92[8 * v88];
              *(_QWORD *)__p = v92;
              *(_QWORD *)&__p[8] = v93;
              *(_QWORD *)&__p[16] = v93;
              *(_QWORD *)&__p[24] = &v92[8 * v91];
              *(_QWORD *)v93 = v84;
              if (v84)
              {
                RERetain();
                v82 = (unint64_t)(v11 + 2);
                v85 = *(_QWORD **)(a1 + 648);
                v2 = *(_QWORD *)(a1 + 640);
                v93 = *(char **)&__p[8];
                v94 = *(char **)&__p[16];
              }
              else
              {
                v94 = &v92[8 * v88];
                v82 = (unint64_t)(v11 + 2);
              }
              v87 = v94 + 8;
              *(_QWORD *)&__p[16] = v94 + 8;
              if (v85 == (_QWORD *)v2)
              {
                v97 = vdupq_n_s64(v2);
              }
              else
              {
                v95 = 0;
                do
                {
                  v96 = v85[v95 - 1];
                  *(_QWORD *)&v93[v95 * 8 - 8] = v96;
                  if (v96)
                    RERetain();
                  --v95;
                }
                while (&v85[v95] != (_QWORD *)v2);
                v97 = *(int64x2_t *)(a1 + 640);
                v87 = *(_QWORD **)&__p[16];
                v93 += v95 * 8;
              }
              *(_QWORD *)(a1 + 640) = v93;
              *(_QWORD *)(a1 + 648) = v87;
              *(int64x2_t *)&__p[8] = v97;
              v98 = *(_QWORD *)(a1 + 656);
              *(_QWORD *)(a1 + 656) = *(_QWORD *)&__p[24];
              *(_QWORD *)&__p[24] = v98;
              *(_QWORD *)__p = v97.i64[0];
              std::__split_buffer<RESharedPtr<REEntity>>::~__split_buffer((uint64_t)__p);
            }
            else
            {
              *v85 = *(_QWORD *)v393;
              if (v84)
                RERetain();
              v87 = v85 + 1;
              *(_QWORD *)(a1 + 648) = v85 + 1;
            }
            *(_QWORD *)(a1 + 648) = v87;
            v99 = *(_OWORD *)(v82 + 16);
            *(_OWORD *)__p = *(_OWORD *)v82;
            *(_OWORD *)&__p[16] = v99;
            v383.i64[0] = *(_QWORD *)v393;
            if (*(_QWORD *)v393)
              RERetain();
            v100 = *(_QWORD *)&__p[24];
            v101 = (void **)(a1 + 192);
            if (!*(_QWORD *)&__p[24])
            {
              v163 = __p;
              if (__p[16])
                v163 = *(_QWORD **)__p;
              v100 = ((*v163 >> 2) + (*v163 << 6) + v163[1] + 2654435769) ^ *v163;
              *(_QWORD *)&__p[24] = v100;
            }
            v102 = *(_QWORD *)(a1 + 200);
            if (v102)
            {
              v103 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
              v103.i16[0] = vaddlv_u8(v103);
              v2 = v103.u32[0];
              if (v103.u32[0] > 1uLL)
              {
                v82 = v100;
                if (v100 >= v102)
                  v82 = v100 % v102;
              }
              else
              {
                v82 = (v102 - 1) & v100;
              }
              v104 = *(_QWORD **)(*v365 + 8 * v82);
              if (v104)
              {
                v105 = (_QWORD *)*v104;
                if (*v104)
                {
                  do
                  {
                    v106 = v105[1];
                    if (v106 == v100)
                    {
                      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 224, (uint64_t)(v105 + 2), (uint64_t)__p))
                        goto LABEL_306;
                    }
                    else
                    {
                      if (v2 > 1)
                      {
                        if (v106 >= v102)
                          v106 %= v102;
                      }
                      else
                      {
                        v106 &= v102 - 1;
                      }
                      if (v106 != v82)
                        break;
                    }
                    v105 = (_QWORD *)*v105;
                  }
                  while (v105);
                }
                v101 = (void **)(a1 + 192);
              }
            }
            v107 = operator new(0x38uLL);
            *(_QWORD *)v404 = v107;
            *(_QWORD *)&v404[8] = a1 + 208;
            *v107 = 0;
            v107[1] = v100;
            v108 = *(_OWORD *)&__p[16];
            *((_OWORD *)v107 + 1) = *(_OWORD *)__p;
            *((_OWORD *)v107 + 2) = v108;
            v107[6] = v383.i64[0];
            v383.i64[0] = 0;
            LOBYTE(v405) = 1;
            v109 = (float)(unint64_t)(*(_QWORD *)(a1 + 216) + 1);
            v110 = *(float *)(a1 + 224);
            if (!v102 || (float)(v110 * (float)v102) < v109)
            {
              v111 = (v102 & (v102 - 1)) != 0;
              if (v102 < 3)
                v111 = 1;
              v112 = v111 | (2 * v102);
              v113 = vcvtps_u32_f32(v109 / v110);
              if (v112 <= v113)
                prime = (int8x8_t)v113;
              else
                prime = (int8x8_t)v112;
              if (*(_QWORD *)&prime == 1)
              {
                prime = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
              {
                prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              }
              v102 = *(_QWORD *)(a1 + 200);
              if (*(_QWORD *)&prime <= v102)
              {
                if (*(_QWORD *)&prime < v102)
                {
                  v121 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 216) / *(float *)(a1 + 224));
                  if (v102 < 3
                    || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v102), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
                  {
                    v121 = std::__next_prime(v121);
                  }
                  else
                  {
                    v123 = 1 << -(char)__clz(v121 - 1);
                    if (v121 >= 2)
                      v121 = v123;
                  }
                  if (*(_QWORD *)&prime <= v121)
                    prime = (int8x8_t)v121;
                  if (*(_QWORD *)&prime >= v102)
                  {
                    v102 = *(_QWORD *)(a1 + 200);
                  }
                  else
                  {
                    if (prime)
                      goto LABEL_262;
                    v160 = *v101;
                    *v101 = 0;
                    if (v160)
                      operator delete(v160);
                    v102 = 0;
                    *(_QWORD *)(a1 + 200) = 0;
                  }
                }
              }
              else
              {
LABEL_262:
                if (*(_QWORD *)&prime >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v115 = operator new(8 * *(_QWORD *)&prime);
                v116 = *v101;
                *v101 = v115;
                if (v116)
                  operator delete(v116);
                v117 = 0;
                *(int8x8_t *)(a1 + 200) = prime;
                do
                  *((_QWORD *)*v101 + v117++) = 0;
                while (*(_QWORD *)&prime != v117);
                v118 = (_QWORD *)*v357;
                if (*v357)
                {
                  v119 = v118[1];
                  v120 = (uint8x8_t)vcnt_s8(prime);
                  v120.i16[0] = vaddlv_u8(v120);
                  if (v120.u32[0] > 1uLL)
                  {
                    if (v119 >= *(_QWORD *)&prime)
                      v119 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v119 &= *(_QWORD *)&prime - 1;
                  }
                  *((_QWORD *)*v101 + v119) = v357;
                  v124 = (_QWORD *)*v118;
                  if (*v118)
                  {
                    do
                    {
                      v125 = v124[1];
                      if (v120.u32[0] > 1uLL)
                      {
                        if (v125 >= *(_QWORD *)&prime)
                          v125 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v125 &= *(_QWORD *)&prime - 1;
                      }
                      if (v125 != v119)
                      {
                        if (!*((_QWORD *)*v101 + v125))
                        {
                          *((_QWORD *)*v101 + v125) = v118;
                          goto LABEL_287;
                        }
                        *v118 = *v124;
                        *v124 = **((_QWORD **)*v101 + v125);
                        **((_QWORD **)*v101 + v125) = v124;
                        v124 = v118;
                      }
                      v125 = v119;
LABEL_287:
                      v118 = v124;
                      v124 = (_QWORD *)*v124;
                      v119 = v125;
                    }
                    while (v124);
                  }
                }
                v102 = (unint64_t)prime;
              }
              if ((v102 & (v102 - 1)) != 0)
              {
                if (v100 >= v102)
                  v82 = v100 % v102;
                else
                  v82 = v100;
              }
              else
              {
                v82 = (v102 - 1) & v100;
              }
            }
            v126 = (_QWORD *)*((_QWORD *)*v101 + v82);
            v127 = *(_QWORD *)v404;
            if (v126)
            {
              **(_QWORD **)v404 = *v126;
            }
            else
            {
              **(_QWORD **)v404 = *v357;
              *v357 = v127;
              *((_QWORD *)*v101 + v82) = v357;
              if (!*(_QWORD *)v127)
                goto LABEL_305;
              v128 = *(_QWORD *)(*(_QWORD *)v127 + 8);
              if ((v102 & (v102 - 1)) != 0)
              {
                if (v128 >= v102)
                  v128 %= v102;
              }
              else
              {
                v128 &= v102 - 1;
              }
              v126 = (char *)*v101 + 8 * v128;
            }
            *v126 = v127;
LABEL_305:
            *(_QWORD *)v404 = 0;
            ++*(_QWORD *)(a1 + 216);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v404);
LABEL_306:
            RESharedPtr<REEntity>::~RESharedPtr(&v383);
            v129 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(v341, v337);
            v3 = v334;
            v12 = v345;
            if (*(_QWORD *)(a1 + 688))
              goto LABEL_385;
            v130 = *(rf::data_flow::RFUUID **)(a1 + 704);
            v2 = *(_QWORD *)(a1 + 712);
            while (v130 != (rf::data_flow::RFUUID *)v2)
            {
              v131 = *((_OWORD *)v130 + 1);
              *(_OWORD *)__p = *(_OWORD *)v130;
              *(_OWORD *)&__p[16] = v131;
              rf::realityFusionLogObject(v129);
              v132 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
              {
                rf::data_flow::RFUUID::string(v130, v404);
                v133 = v404;
                if (SBYTE7(v405) < 0)
                  v133 = *(uint8_t **)v404;
                *(_DWORD *)v408 = 136315138;
                *(_QWORD *)&v408[4] = v133;
                _os_log_impl(&dword_227777000, v132, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Removing localized anchor %s", v408, 0xCu);
                if (SBYTE7(v405) < 0)
                  operator delete(*(void **)v404);
              }

              v134 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v361, (uint64_t)__p);
              if (v134)
              {
                v135 = *(int8x8_t *)(a1 + 608);
                v136 = v134[1];
                v137 = (uint8x8_t)vcnt_s8(v135);
                v137.i16[0] = vaddlv_u8(v137);
                if (v137.u32[0] > 1uLL)
                {
                  if (v136 >= *(_QWORD *)&v135)
                    v136 %= *(_QWORD *)&v135;
                }
                else
                {
                  v136 &= *(_QWORD *)&v135 - 1;
                }
                v138 = *v134;
                v139 = *(unint64_t **)(*v361 + 8 * v136);
                do
                {
                  v140 = v139;
                  v139 = (unint64_t *)*v139;
                }
                while (v139 != v134);
                if (v140 == v353)
                  goto LABEL_332;
                v141 = v140[1];
                if (v137.u32[0] > 1uLL)
                {
                  if (v141 >= *(_QWORD *)&v135)
                    v141 %= *(_QWORD *)&v135;
                }
                else
                {
                  v141 &= *(_QWORD *)&v135 - 1;
                }
                if (v141 == v136)
                {
LABEL_334:
                  if (v138)
                  {
                    v142 = *(_QWORD *)(v138 + 8);
                    goto LABEL_336;
                  }
                }
                else
                {
LABEL_332:
                  if (!v138)
                    goto LABEL_333;
                  v142 = *(_QWORD *)(v138 + 8);
                  if (v137.u32[0] > 1uLL)
                  {
                    v143 = *(_QWORD *)(v138 + 8);
                    if (v142 >= *(_QWORD *)&v135)
                      v143 = v142 % *(_QWORD *)&v135;
                  }
                  else
                  {
                    v143 = v142 & (*(_QWORD *)&v135 - 1);
                  }
                  if (v143 != v136)
                  {
LABEL_333:
                    *(_QWORD *)(*v361 + 8 * v136) = 0;
                    v138 = *v134;
                    goto LABEL_334;
                  }
LABEL_336:
                  if (v137.u32[0] > 1uLL)
                  {
                    if (v142 >= *(_QWORD *)&v135)
                      v142 %= *(_QWORD *)&v135;
                  }
                  else
                  {
                    v142 &= *(_QWORD *)&v135 - 1;
                  }
                  if (v142 != v136)
                  {
                    *(_QWORD *)(*v361 + 8 * v142) = v140;
                    v138 = *v134;
                  }
                }
                *v140 = v138;
                *v134 = 0;
                --*(_QWORD *)(a1 + 624);
                operator delete(v134);
              }
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>(v355, (uint64_t)__p);
              v144 = *(_QWORD *)(a1 + 128);
              if (v144)
                (*(void (**)(uint64_t, rf::data_flow::RFUUID *))(*(_QWORD *)v144 + 48))(v144, v130);
              v145 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v365, (uint64_t)__p);
              if (v145)
              {
                if (!*(_BYTE *)(v334 + 32))
                  std::__throw_bad_optional_access[abi:ne180100]();
                v146 = v145;
                RESceneRemoveEntity();
                v147 = *(int8x8_t *)(a1 + 200);
                v148 = v146[1];
                v149 = (uint8x8_t)vcnt_s8(v147);
                v149.i16[0] = vaddlv_u8(v149);
                if (v149.u32[0] > 1uLL)
                {
                  if (v148 >= *(_QWORD *)&v147)
                    v148 %= *(_QWORD *)&v147;
                }
                else
                {
                  v148 &= *(_QWORD *)&v147 - 1;
                }
                v151 = *(_QWORD **)(*v365 + 8 * v148);
                do
                {
                  v152 = v151;
                  v151 = (_QWORD *)*v151;
                }
                while (v151 != v146);
                if (v152 == v357)
                  goto LABEL_367;
                v153 = v152[1];
                if (v149.u32[0] > 1uLL)
                {
                  if (v153 >= *(_QWORD *)&v147)
                    v153 %= *(_QWORD *)&v147;
                }
                else
                {
                  v153 &= *(_QWORD *)&v147 - 1;
                }
                if (v153 != v148)
                {
LABEL_367:
                  if (!*v146)
                    goto LABEL_368;
                  v154 = *(_QWORD *)(*v146 + 8);
                  if (v149.u32[0] > 1uLL)
                  {
                    if (v154 >= *(_QWORD *)&v147)
                      v154 %= *(_QWORD *)&v147;
                  }
                  else
                  {
                    v154 &= *(_QWORD *)&v147 - 1;
                  }
                  if (v154 != v148)
LABEL_368:
                    *(_QWORD *)(*v365 + 8 * v148) = 0;
                }
                v155 = *v146;
                if (*v146)
                {
                  v156 = *(_QWORD *)(v155 + 8);
                  if (v149.u32[0] > 1uLL)
                  {
                    if (v156 >= *(_QWORD *)&v147)
                      v156 %= *(_QWORD *)&v147;
                  }
                  else
                  {
                    v156 &= *(_QWORD *)&v147 - 1;
                  }
                  if (v156 != v148)
                  {
                    *(_QWORD *)(*v365 + 8 * v156) = v152;
                    v155 = *v146;
                  }
                }
                *v152 = v155;
                *v146 = 0;
                --*(_QWORD *)(a1 + 216);
                *(_QWORD *)v404 = v146;
                *(_QWORD *)&v404[8] = a1 + 208;
                LOBYTE(v405) = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v404);
              }
              else
              {
                rf::realityFusionLogObject(0);
                v150 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v404 = 0;
                  _os_log_error_impl(&dword_227777000, v150, OS_LOG_TYPE_ERROR, "EnvironmentProbeConsumer: The removed probe was not stored in the probe entity dictionary", v404, 2u);
                }

              }
              v130 = (rf::data_flow::RFUUID *)((char *)v130 + 144);
            }
            std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)(a1 + 704));
            v157 = *(_QWORD **)(a1 + 640);
            v158 = *(_QWORD **)(a1 + 648);
            if (v157 != v158)
            {
              do
              {
                if (!*(_BYTE *)(v334 + 32))
                  std::__throw_bad_optional_access[abi:ne180100]();
                RESceneAddEntity();
                ++v157;
              }
              while (v157 != v158);
              v157 = *(_QWORD **)(a1 + 648);
              v159 = *(_QWORD **)(a1 + 640);
              if (v157 != v159)
              {
                do
                  RESharedPtr<REEntity>::~RESharedPtr(--v157);
                while (v157 != v159);
                v157 = v159;
              }
            }
            *(_QWORD *)(a1 + 648) = v157;
LABEL_385:
            RESharedPtr<REEntity>::~RESharedPtr(v393);
            if (v342)

LABEL_36:
            v11 = (uint64_t *)*v11;
            if (v12)
            {
              v12 = 1;
              goto LABEL_61;
            }
            if (v11)
            {
              v12 = 0;
            }
            else
            {
              v11 = *(uint64_t **)&v349[40].__m_.__opaque[8];
              v12 = 1;
LABEL_61:
              if (!v11)
                goto LABEL_415;
            }
          }
          v61 = (v48 & (v48 - 1)) != 0;
          if (v48 < 3)
            v61 = 1;
          v62 = v61 | (2 * v48);
          v63 = vcvtps_u32_f32(v59 / v60);
          if (v62 <= v63)
            v64 = v63;
          else
            v64 = v62;
          if (v64 == 1)
          {
            v64 = 2;
          }
          else if ((v64 & (v64 - 1)) != 0)
          {
            v55 = std::__next_prime(v64);
            v64 = v55;
          }
          v48 = *(_QWORD *)(a1 + 608);
          if (v64 > v48)
            goto LABEL_132;
          if (v64 < v48)
          {
            v55 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 624) / *(float *)(a1 + 632));
            if (v48 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
            {
              v55 = std::__next_prime(v55);
            }
            else
            {
              v71 = 1 << -(char)__clz(v55 - 1);
              if (v55 >= 2)
                v55 = v71;
            }
            if (v64 <= v55)
              v64 = v55;
            if (v64 >= v48)
            {
              v48 = *(_QWORD *)(a1 + 608);
            }
            else
            {
              if (v64)
              {
LABEL_132:
                if (v64 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v65 = operator new(8 * v64);
                v55 = *v49;
                *v49 = (unint64_t)v65;
                if (v55)
                  operator delete((void *)v55);
                v66 = 0;
                *(_QWORD *)(a1 + 608) = v64;
                do
                  *(_QWORD *)(*v49 + 8 * v66++) = 0;
                while (v64 != v66);
                v67 = (_QWORD *)*v353;
                if (*v353)
                {
                  v68 = v67[1];
                  v69 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
                  v69.i16[0] = vaddlv_u8(v69);
                  if (v69.u32[0] > 1uLL)
                  {
                    if (v68 >= v64)
                      v68 %= v64;
                  }
                  else
                  {
                    v68 &= v64 - 1;
                  }
                  *(_QWORD *)(*v49 + 8 * v68) = v353;
                  v77 = (_QWORD *)*v67;
                  if (*v67)
                  {
                    do
                    {
                      v78 = v77[1];
                      if (v69.u32[0] > 1uLL)
                      {
                        if (v78 >= v64)
                          v78 %= v64;
                      }
                      else
                      {
                        v78 &= v64 - 1;
                      }
                      if (v78 != v68)
                      {
                        if (!*(_QWORD *)(*v49 + 8 * v78))
                        {
                          *(_QWORD *)(*v49 + 8 * v78) = v67;
                          goto LABEL_181;
                        }
                        *v67 = *v77;
                        *v77 = **(_QWORD **)(*v49 + 8 * v78);
                        **(_QWORD **)(*v49 + 8 * v78) = v77;
                        v77 = v67;
                      }
                      v78 = v68;
LABEL_181:
                      v67 = v77;
                      v77 = (_QWORD *)*v77;
                      v68 = v78;
                    }
                    while (v77);
                  }
                }
                v48 = v64;
                goto LABEL_185;
              }
              v55 = *v49;
              *v49 = 0;
              if (v55)
                operator delete((void *)v55);
              v48 = 0;
              *(_QWORD *)(a1 + 608) = 0;
            }
          }
LABEL_185:
          if ((v48 & (v48 - 1)) != 0)
          {
            if (v47 >= v48)
              v2 = v47 % v48;
            else
              v2 = v47;
          }
          else
          {
            v2 = (v48 - 1) & v47;
          }
          goto LABEL_190;
        }
        v11 = *(uint64_t **)&v349[40].__m_.__opaque[8];
        if (v11)
        {
          v12 = 1;
          goto LABEL_30;
        }
LABEL_415:
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        v164 = *(float *)v3 + *(float *)(a1 + 232);
        *(float *)(a1 + 232) = v164;
        if (!*(_QWORD *)(a1 + 96) && !*(_QWORD *)(a1 + 128))
          goto LABEL_697;
        if (*(_BYTE *)(a1 + 544))
        {
          if (*(_BYTE *)(a1 + 520))
          {
            v165 = (id *)(a1 + 512);
LABEL_425:
            v343 = *v165;
            v167 = 0;
            v164 = *(float *)(a1 + 232);
            v166 = 1;
            v168 = *(float *)(a1 + 24);
            if (*(_BYTE *)(a1 + 544))
              v168 = v168 + v168;
            v346 = 0;
LABEL_431:
            v348 = v167;
            if (v166 && v164 <= v168)
            {
LABEL_691:
              if (re::internal::enableSignposts(0, 0))
                kdebug_trace();
              if (re::internal::enableSignposts(0, 0))
                kdebug_trace();
              if (((v346 | v348) & 1) == 0)

LABEL_697:
              std::mutex::unlock(v349);
              return;
            }
            if (*(_BYTE *)(a1 + 144))
            {
              MutableCameraAnchor = (float32x4_t *)rf::helpers::getMutableCameraAnchor((rf::helpers *)&v349[2].__m_.__opaque[8]);
              v366 = MutableCameraAnchor[5];
              v170 = (id)MutableCameraAnchor[7].i64[0];
              if (*(_BYTE *)(a1 + 384))
              {
                if (*(_BYTE *)(a1 + 360))
                {
                  v171 = vsubq_f32(*(float32x4_t *)(a1 + 320), v366);
                  v172 = vmulq_f32(v171, v171);
                  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v172, 2), vaddq_f32(v172, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v172.f32, 1))).f32[0]) <= *(float *)(a1 + 148))
                  {
                    v350 = 0;
                    v173 = 0;
LABEL_515:

                    goto LABEL_544;
                  }
                }
              }
              if (re::internal::enableSignposts(0, 0))
                kdebug_trace();
              if (!*(_BYTE *)(v3 + 32))
                std::__throw_bad_optional_access[abi:ne180100]();
              v173 = *(float32x4_t **)&__p[8];
              v350 = *(float32x4_t **)__p;
              if (re::internal::enableSignposts(0, 0))
                kdebug_trace();
              if (re::internal::enableSignposts(0, 0))
                kdebug_trace();
              if (!*(_BYTE *)(v3 + 32))
                std::__throw_bad_optional_access[abi:ne180100]();
              std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v380, a1 + 72);
              std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v378, a1 + 104);
              v174 = (float32x4_t)vdupq_n_s32(0x7F800000u);
              v175.i64[0] = 0x7F0000007FLL;
              v175.i64[1] = 0x7F0000007FLL;
              if (v350 != v173)
              {
                v176 = v350;
                do
                {
                  v178 = *v176;
                  v177 = v176[1];
                  v179 = (uint32x4_t)vcgtq_f32(*v176, v177);
                  v179.i32[3] = v179.i32[2];
                  if ((vmaxvq_u32(v179) & 0x80000000) == 0)
                  {
                    v174.i32[3] = 0;
                    v178.i32[3] = 0;
                    v174 = vminnmq_f32(v174, v178);
                    v175.i32[3] = 0;
                    v177.i32[3] = 0;
                    v175 = vmaxnmq_f32(v175, v177);
                  }
                  v176 += 2;
                }
                while (v176 != v173);
              }
              if (*(_BYTE *)(a1 + 144))
              {
                v180 = (uint32x4_t)vcgtq_f32(v174, v175);
                v180.i32[3] = v180.i32[2];
                v181 = 0uLL;
                if ((vmaxvq_u32(v180) & 0x80000000) == 0)
                {
                  v182.i64[0] = 0x3F0000003F000000;
                  v182.i64[1] = 0x3F0000003F000000;
                  v181 = vmulq_f32(vaddq_f32(v174, v175), v182);
                }
                v183 = vaddq_f32(v366, vsubq_f32(v366, v181));
                v184 = vsubq_f32(v175, v174);
                v184.i32[3] = 0;
                v185 = vmaxnmq_f32(v184, (float32x4_t)0);
                v184.i64[0] = 0x3F0000003F000000;
                v184.i64[1] = 0x3F0000003F000000;
                v186 = vmulq_f32(v185, v184);
                v187 = vsubq_f32(v183, v186);
                v188 = vaddq_f32(v183, v186);
                v174.i32[3] = 0;
                v187.i32[3] = 0;
                v174 = vminnmq_f32(v174, v187);
                v175.i32[3] = 0;
                v188.i32[3] = 0;
                v175 = vmaxnmq_f32(v175, v188);
              }
              v189 = (uint32x4_t)vcgtq_f32(v174, v175);
              v189.i32[3] = v189.i32[2];
              if ((vmaxvq_u32(v189) & 0x80000000) != 0)
              {
                v194.i64[0] = 0x4000000040000000;
                v194.i32[2] = 0x40000000;
                v192.i64[0] = 0xC0000000C0000000;
                v192.i32[2] = -1073741824;
              }
              else
              {
                v190.i64[0] = 0x3F0000003F000000;
                v190.i64[1] = 0x3F0000003F000000;
                v191 = vmulq_f32(vaddq_f32(v174, v175), v190);
                v190.i64[0] = 0xC0000000C0000000;
                v190.i64[1] = 0xC0000000C0000000;
                v192 = vaddq_f32(v191, v190);
                v193.i64[0] = 0x4000000040000000;
                v193.i64[1] = 0x4000000040000000;
                v194 = vaddq_f32(v191, v193);
              }
              v174.i32[3] = 0;
              v192.i32[3] = 0;
              v175.i32[3] = 0;
              v194.i32[3] = 0;
              *(float32x4_t *)__p = vminnmq_f32(v174, v192);
              *(float32x4_t *)&__p[16] = vmaxnmq_f32(v175, v194);
              v207 = (uint64_t)v381;
              if (v381)
              {
                if (v381 == v380)
                {
                  v395.i64[1] = (uint64_t)buf;
                  (*(void (**)(_QWORD *, uint8_t *))(v380[0] + 24))(v380, buf);
LABEL_488:
                  v216 = (uint64_t)v379;
                  if (v379)
                  {
                    if (v379 == v378)
                    {
                      *((_QWORD *)&v405 + 1) = v404;
                      (*(void (**)(_QWORD *, uint8_t *))(v378[0] + 24))(v378, v404);
LABEL_493:
                      rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement((float32x4_t *)a1, (float32x4_t *)__p, (uint64_t)buf, (uint64_t)v404);
                      v217 = (uint8_t *)*((_QWORD *)&v405 + 1);
                      if (*((uint8_t **)&v405 + 1) == v404)
                      {
                        v218 = 4;
                        v217 = v404;
                      }
                      else
                      {
                        if (!*((_QWORD *)&v405 + 1))
                          goto LABEL_498;
                        v218 = 5;
                      }
                      (*(void (**)(void))(*(_QWORD *)v217 + 8 * v218))();
LABEL_498:
                      v219 = (uint8_t *)v395.i64[1];
                      if ((uint8_t *)v395.i64[1] == buf)
                      {
                        v220 = 4;
                        v219 = buf;
                      }
                      else
                      {
                        if (!v395.i64[1])
                          goto LABEL_503;
                        v220 = 5;
                      }
                      (*(void (**)(void))(*(_QWORD *)v219 + 8 * v220))();
LABEL_503:
                      v221 = v379;
                      if (v379 == v378)
                      {
                        v222 = 4;
                        v221 = v378;
                      }
                      else
                      {
                        if (!v379)
                          goto LABEL_508;
                        v222 = 5;
                      }
                      (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_508:
                      v223 = v381;
                      if (v381 == v380)
                      {
                        v224 = 4;
                        v223 = v380;
                      }
                      else
                      {
                        if (!v381)
                          goto LABEL_513;
                        v224 = 5;
                      }
                      (*(void (**)(void))(*v223 + 8 * v224))();
LABEL_513:
                      if (re::internal::enableSignposts(0, 0))
                        kdebug_trace();
                      goto LABEL_515;
                    }
                    v216 = (*(uint64_t (**)(void))(*v379 + 16))();
                  }
                  *((_QWORD *)&v405 + 1) = v216;
                  goto LABEL_493;
                }
                v207 = (*(uint64_t (**)(void))(*v381 + 16))();
              }
              v395.i64[1] = v207;
              goto LABEL_488;
            }
            if (re::internal::enableSignposts(0, 0))
              kdebug_trace();
            if (!*(_BYTE *)(v3 + 32))
              std::__throw_bad_optional_access[abi:ne180100]();
            v173 = *(float32x4_t **)&__p[8];
            v350 = *(float32x4_t **)__p;
            if (re::internal::enableSignposts(0, 0))
              kdebug_trace();
            if (re::internal::enableSignposts(0, 0))
              kdebug_trace();
            if (!*(_BYTE *)(v3 + 32))
              std::__throw_bad_optional_access[abi:ne180100]();
            std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v376, a1 + 72);
            std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v374, a1 + 104);
            v195 = (float32x4_t)vdupq_n_s32(0x7F800000u);
            v196.i64[0] = 0x7F0000007FLL;
            v196.i64[1] = 0x7F0000007FLL;
            if (v350 != v173)
            {
              v197 = v350;
              do
              {
                v199 = *v197;
                v198 = v197[1];
                v200 = (uint32x4_t)vcgtq_f32(*v197, v198);
                v200.i32[3] = v200.i32[2];
                if ((vmaxvq_u32(v200) & 0x80000000) == 0)
                {
                  v195.i32[3] = 0;
                  v199.i32[3] = 0;
                  v195 = vminnmq_f32(v195, v199);
                  v196.i32[3] = 0;
                  v198.i32[3] = 0;
                  v196 = vmaxnmq_f32(v196, v198);
                }
                v197 += 2;
              }
              while (v197 != v173);
            }
            v201 = (uint32x4_t)vcgtq_f32(v195, v196);
            v201.i32[3] = v201.i32[2];
            if ((vmaxvq_u32(v201) & 0x80000000) != 0)
            {
              v206.i64[0] = 0x4000000040000000;
              v206.i32[2] = 0x40000000;
              v204.i64[0] = 0xC0000000C0000000;
              v204.i32[2] = -1073741824;
            }
            else
            {
              v202.i64[0] = 0x3F0000003F000000;
              v202.i64[1] = 0x3F0000003F000000;
              v203 = vmulq_f32(vaddq_f32(v195, v196), v202);
              v202.i64[0] = 0xC0000000C0000000;
              v202.i64[1] = 0xC0000000C0000000;
              v204 = vaddq_f32(v203, v202);
              v205.i64[0] = 0x4000000040000000;
              v205.i64[1] = 0x4000000040000000;
              v206 = vaddq_f32(v203, v205);
            }
            v195.i32[3] = 0;
            v204.i32[3] = 0;
            v208 = vminnmq_f32(v195, v204);
            v196.i32[3] = 0;
            v206.i32[3] = 0;
            v209 = vmaxnmq_f32(v196, v206);
            v210 = (uint32x4_t)vcgtq_f32(v208, v209);
            v210.i32[3] = v210.i32[2];
            if ((vmaxvq_u32(v210) & 0x80000000) != 0)
            {
              v212 = 0uLL;
            }
            else
            {
              v211.i64[0] = 0x3F0000003F000000;
              v211.i64[1] = 0x3F0000003F000000;
              v212 = vmulq_f32(vaddq_f32(v208, v209), v211);
            }
            v213 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(a1 + 736), v212);
            v213.i32[3] = v213.i32[2];
            if ((vmaxvq_u32(v213) & 0x80000000) == 0)
            {
              v214 = (uint32x4_t)vcgtq_f32(v212, *(float32x4_t *)(a1 + 752));
              v214.i32[3] = v214.i32[2];
              if ((vmaxvq_u32(v214) & 0x80000000) == 0)
                goto LABEL_532;
            }
            *(float32x4_t *)__p = v208;
            *(float32x4_t *)&__p[16] = v209;
            v215 = (uint64_t)v377;
            if (v377)
            {
              if (v377 == v376)
              {
                v395.i64[1] = (uint64_t)buf;
                (*(void (**)(_QWORD *, uint8_t *))(v376[0] + 24))(v376, buf);
LABEL_517:
                v225 = (uint64_t)v375;
                if (v375)
                {
                  if (v375 == v374)
                  {
                    *((_QWORD *)&v405 + 1) = v404;
                    (*(void (**)(_QWORD *, uint8_t *))(v374[0] + 24))(v374, v404);
LABEL_522:
                    rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement((float32x4_t *)a1, (float32x4_t *)__p, (uint64_t)buf, (uint64_t)v404);
                    v226 = (uint8_t *)*((_QWORD *)&v405 + 1);
                    if (*((uint8_t **)&v405 + 1) == v404)
                    {
                      v227 = 4;
                      v226 = v404;
                    }
                    else
                    {
                      if (!*((_QWORD *)&v405 + 1))
                      {
LABEL_527:
                        v228 = (uint8_t *)v395.i64[1];
                        if ((uint8_t *)v395.i64[1] == buf)
                        {
                          v229 = 4;
                          v228 = buf;
                        }
                        else
                        {
                          if (!v395.i64[1])
                            goto LABEL_532;
                          v229 = 5;
                        }
                        (*(void (**)(void))(*(_QWORD *)v228 + 8 * v229))();
LABEL_532:
                        v230 = v375;
                        if (v375 == v374)
                        {
                          v231 = 4;
                          v230 = v374;
                        }
                        else
                        {
                          if (!v375)
                            goto LABEL_537;
                          v231 = 5;
                        }
                        (*(void (**)(void))(*v230 + 8 * v231))();
LABEL_537:
                        v232 = v377;
                        if (v377 == v376)
                        {
                          v233 = 4;
                          v232 = v376;
                        }
                        else
                        {
                          if (!v377)
                            goto LABEL_542;
                          v233 = 5;
                        }
                        (*(void (**)(void))(*v232 + 8 * v233))();
LABEL_542:
                        if (re::internal::enableSignposts(0, 0))
                          kdebug_trace();
LABEL_544:
                        if (!*(_BYTE *)(a1 + 136))
                        {
LABEL_689:
                          *(_DWORD *)(a1 + 232) = 0;
                          if (v350)
                            operator delete(v350);
                          goto LABEL_691;
                        }
                        if (re::internal::enableSignposts(0, 0))
                          kdebug_trace();
                        if (!*(_BYTE *)(v3 + 32))
                          std::__throw_bad_optional_access[abi:ne180100]();
                        std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v372, a1 + 72);
                        std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v370, a1 + 104);
                        v234 = *(int *)(a1 + 140);
                        v235 = (char *)v173 - (char *)v350;
                        if (v173 == v350)
                        {
                          v257 = 0;
                          v241 = 0;
                        }
                        else
                        {
                          if (v235 < 0)
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          v236 = *(float *)(a1 + 36);
                          v367 = *(float *)(a1 + 32);
                          v237 = (float32x4_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v235 >> 5);
                          v239 = &v237[2 * v238];
                          v240 = v367;
                          v241 = v237;
                          v242 = v350;
                          do
                          {
                            v244 = *v242;
                            v243 = v242[1];
                            v245 = vsubq_f32(v243, *v242);
                            v245.i32[3] = 0;
                            v246.i64[0] = 0x3F0000003F000000;
                            v246.i64[1] = 0x3F0000003F000000;
                            v247 = 0uLL;
                            v248 = vmaxnmq_f32(v245, (float32x4_t)0);
                            v249 = vmulq_n_f32(v248, v240);
                            v250 = v249.f32[1];
                            if (v249.f32[0] >= v249.f32[1])
                              v250 = v249.f32[0];
                            if (v250 < v249.f32[2])
                              v250 = v249.f32[2];
                            v251 = (uint32x4_t)vcgtq_f32(v244, v243);
                            v251.i32[3] = v251.i32[2];
                            if ((vmaxvq_u32(v251) & 0x80000000) == 0)
                              v247 = vmulq_f32(vaddq_f32(v243, v244), v246);
                            v243.f32[0] = v250 / v236;
                            v249.i32[3] = 0;
                            v252 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v243.f32, 0);
                            v252.i32[3] = 0;
                            v253 = v247.f32[1] + (v367 + -1.0) * v248.f32[1] * 0.5;
                            v247.f32[1] = v253;
                            v254 = vmulq_f32(vmaxnmq_f32(v249, v252), v246);
                            v255 = vsubq_f32(v247, v254);
                            v256 = vaddq_f32(v254, v247);
                            if (v237 >= v239)
                            {
                              v358 = v255;
                              v362 = v256;
                              v258 = ((char *)v237 - (char *)v241) >> 5;
                              v259 = v258 + 1;
                              if ((unint64_t)(v258 + 1) >> 59)
                                std::vector<int>::__throw_length_error[abi:ne180100]();
                              if (v239 - v241 > v259)
                                v259 = v239 - v241;
                              if ((unint64_t)((char *)v239 - (char *)v241) >= 0x7FFFFFFFFFFFFFE0)
                                v260 = 0x7FFFFFFFFFFFFFFLL;
                              else
                                v260 = v259;
                              if (v260)
                                v260 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v260);
                              else
                                v261 = 0;
                              v262 = (float32x4_t *)(v260 + 32 * v258);
                              *v262 = v358;
                              v262[1] = v362;
                              if (v237 == v241)
                              {
                                v241 = (float32x4_t *)(v260 + 32 * v258);
                              }
                              else
                              {
                                v263 = v260 + 32 * v258;
                                do
                                {
                                  v264 = v237[-1];
                                  *(float32x4_t *)(v263 - 32) = v237[-2];
                                  *(float32x4_t *)(v263 - 16) = v264;
                                  v263 -= 32;
                                  v237 -= 2;
                                }
                                while (v237 != v241);
                                v237 = v241;
                                v241 = (float32x4_t *)v263;
                              }
                              v239 = (float32x4_t *)(v260 + 32 * v261);
                              v257 = v262 + 2;
                              if (v237)
                                operator delete(v237);
                            }
                            else
                            {
                              *v237 = v255;
                              v237[1] = v256;
                              v257 = v237 + 2;
                            }
                            v240 = v367;
                            v242 += 2;
                            v237 = v257;
                          }
                          while (v242 != v173);
                        }
                        v265 = 126 - 2 * __clz(((char *)v257 - (char *)v241) >> 5);
                        if (v257 == v241)
                          v266 = 0;
                        else
                          v266 = v265;
                        if (v257 == v241)
                        {
                          v267 = 0;
                          v268 = 0;
                        }
                        else
                        {
                          v267 = 0;
                          v268 = 0;
                          v269 = 0;
                          do
                          {
                            v270 = (char *)v257 - (char *)&v241[2];
                            if (v270)
                            {
                              v352 = v241[1];
                              v354 = *v241;
                              memmove(v241, &v241[2], v270);
                              v272 = v352;
                              v271 = v354;
                              v257 = (float32x4_t *)((char *)v241 + v270);
                              v363 = v352;
                              v368 = v354;
                              v273 = v241;
                              do
                              {
                                v274 = v273[1];
                                v275 = (uint32x4_t)vcgtq_f32(v271, v274);
                                v275.i32[3] = v275.i32[2];
                                if ((vmaxvq_u32(v275) & 0x80000000) != 0
                                  || (v276 = *v273,
                                      v277 = (uint32x4_t)vcgtq_f32(*v273, v272),
                                      v277.i32[3] = v277.i32[2],
                                      (vmaxvq_u32(v277) & 0x80000000) != 0))
                                {
                                  v273 += 2;
                                }
                                else
                                {
                                  v278 = (char *)v257 - (char *)&v273[2];
                                  if (v278)
                                  {
                                    v356 = *v273;
                                    v359 = v273[1];
                                    memmove(v273, &v273[2], v278);
                                    v276 = v356;
                                    v274 = v359;
                                    v272 = v352;
                                    v271 = v354;
                                  }
                                  v279 = v368;
                                  v279.i32[3] = 0;
                                  v276.i32[3] = 0;
                                  v280 = vminnmq_f32(v279, v276);
                                  v281 = v363;
                                  v281.i32[3] = 0;
                                  v274.i32[3] = 0;
                                  v363 = vmaxnmq_f32(v281, v274);
                                  v368 = v280;
                                  v257 = (float32x4_t *)((char *)v273 + v278);
                                }
                              }
                              while (v273 != v257);
                            }
                            else
                            {
                              v257 = v241;
                              v363 = v241[1];
                              v368 = *v241;
                            }
                            if ((unint64_t)v268 >= v269)
                            {
                              v282 = ((char *)v268 - (char *)v267) >> 5;
                              v283 = v282 + 1;
                              if ((unint64_t)(v282 + 1) >> 59)
                                std::vector<int>::__throw_length_error[abi:ne180100]();
                              if ((uint64_t)(v269 - (_QWORD)v267) >> 4 > v283)
                                v283 = (uint64_t)(v269 - (_QWORD)v267) >> 4;
                              if (v269 - (unint64_t)v267 >= 0x7FFFFFFFFFFFFFE0)
                                v284 = 0x7FFFFFFFFFFFFFFLL;
                              else
                                v284 = v283;
                              if (v284)
                                v284 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v284);
                              else
                                v285 = 0;
                              v286 = (float32x4_t *)(v284 + 32 * v282);
                              *v286 = v368;
                              v286[1] = v363;
                              if (v268 == v267)
                              {
                                v289 = (float32x4_t *)(v284 + 32 * v282);
                              }
                              else
                              {
                                v287 = v284 + 32 * v282;
                                do
                                {
                                  v288 = v268[-1];
                                  v289 = (float32x4_t *)(v287 - 32);
                                  *(float32x4_t *)(v287 - 32) = v268[-2];
                                  *(float32x4_t *)(v287 - 16) = v288;
                                  v268 -= 2;
                                  v287 -= 32;
                                }
                                while (v268 != v267);
                              }
                              v269 = v284 + 32 * v285;
                              v268 = v286 + 2;
                              if (v267)
                                operator delete(v267);
                              v267 = v289;
                            }
                            else
                            {
                              *v268 = v368;
                              v268[1] = v363;
                              v268 += 2;
                            }
                          }
                          while (v241 != v257);
                        }
                        v290 = ((char *)v268 - (char *)v267) >> 5;
                        v291 = 126 - 2 * __clz(v290);
                        if (v268 == v267)
                          v292 = 0;
                        else
                          v292 = v291;
                        if (v290 <= v234)
                          v293 = v268;
                        else
                          v293 = &v267[2 * v234];
                        if (v241)
                          operator delete(v241);
                        *(_OWORD *)v408 = 0u;
                        v409 = 0u;
                        v410 = 1065353216;
                        v294 = (_QWORD *)(a1 + 704);
                        std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)(a1 + 704));
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear(a1 + 664);
                        v295 = v267;
                        if (v267 != v293)
                        {
                          v295 = v293;
                          v296 = v267;
                          do
                          {
                            v297 = *(uint64_t **)(a1 + 576);
                            if (v297)
                            {
                              v299 = *v296;
                              v298 = v296[1];
                              v300 = vsubq_f32(v298, *v296);
                              v298.i32[3] = 0;
                              v299.i32[3] = 0;
                              v364 = v299;
                              v369 = v298;
                              v300.i32[3] = 0;
                              v360 = v300;
                              v301 = 1;
                              do
                              {
                                while (1)
                                {
                                  v302 = (float32x4_t *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(a1 + 600), (uint64_t)(v297 + 2));
                                  if (!v302)
                                    break;
                                  v303 = v302[3];
                                  v304 = v302[4];
                                  v303.i32[3] = 0;
                                  v304.i32[3] = 0;
                                  v305 = vsubq_f32(vminnmq_f32(v304, v369), vmaxnmq_f32(v303, v364));
                                  v305.i32[3] = 0;
                                  v306 = vmaxnmq_f32(v305, (float32x4_t)0);
                                  v307 = vmaxnmq_f32(v360, (float32x4_t)0);
                                  if (vdivq_f32(vmulq_laneq_f32(vmulq_lane_f32(v306, *(float32x2_t *)v306.f32, 1), v306, 2), vmulq_laneq_f32(vmulq_lane_f32(v307, *(float32x2_t *)v307.f32, 1), v307, 2)).f32[0] <= *(float *)(a1 + 40))break;
                                  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)v408, (uint64_t)(v297 + 2), (_OWORD *)v297 + 1);
                                  v301 = 0;
                                  v297 = (uint64_t *)*v297;
                                  if (!v297)
                                    goto LABEL_636;
                                }
                                v297 = (uint64_t *)*v297;
                              }
                              while (v297);
                              if ((v301 & 1) != 0)
                                goto LABEL_635;
LABEL_636:
                              if (v295 != &v296[2])
                                memmove(v296, &v296[2], (char *)v295 - (char *)&v296[2]);
                              v295 -= 2;
                            }
                            else
                            {
LABEL_635:
                              v296 += 2;
                            }
                          }
                          while (v296 != v295);
                        }
                        for (i = *(id **)(a1 + 576); i; i = (id *)*i)
                        {
                          if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v408, (uint64_t)(i + 2)))
                          {
                            v309 = *(_QWORD *)(a1 + 712);
                            v310 = *(_QWORD *)(a1 + 720);
                            if (v309 >= v310)
                            {
                              v312 = 0x8E38E38E38E38E39 * ((uint64_t)(v309 - *v294) >> 4);
                              v313 = v312 + 1;
                              if (v312 + 1 > 0x1C71C71C71C71C7)
                                std::vector<int>::__throw_length_error[abi:ne180100]();
                              v314 = 0x8E38E38E38E38E39 * ((uint64_t)(v310 - *v294) >> 4);
                              if (2 * v314 > v313)
                                v313 = 2 * v314;
                              if (v314 >= 0xE38E38E38E38E3)
                                v315 = 0x1C71C71C71C71C7;
                              else
                                v315 = v313;
                              v383.i64[0] = a1 + 720;
                              if (v315)
                                v316 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(a1 + 720, v315);
                              else
                                v316 = 0;
                              v317 = (uint64_t)&v316[144 * v312];
                              *(_QWORD *)__p = v316;
                              *(_QWORD *)&__p[8] = v317;
                              *(_QWORD *)&__p[24] = &v316[144 * v315];
                              std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(v317, i + 6);
                              *(_QWORD *)&__p[16] = v317 + 144;
                              std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer((uint64_t *)(a1 + 704), __p);
                              v311 = *(_QWORD *)(a1 + 712);
                              std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)__p);
                            }
                            else
                            {
                              v311 = std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(v309, i + 6)+ 144;
                              *(_QWORD *)(a1 + 712) = v311;
                            }
                            *(_QWORD *)(a1 + 712) = v311;
                          }
                        }
                        if (v267 != v295)
                        {
                          v318 = v267;
                          do
                          {
                            v319 = v318[1];
                            v320 = vcgtq_f32(*v318, v319);
                            v322.i32[3] = v320.i32[2];
                            v321 = vmaxvq_u32(v322);
                            v322.i64[0] = 0;
                            v322.i32[2] = 0;
                            if ((v321 & 0x80000000) == 0)
                            {
                              v323.i64[0] = 0x3F0000003F000000;
                              v323.i64[1] = 0x3F0000003F000000;
                              v322 = (uint32x4_t)vmulq_f32(vaddq_f32(*v318, v319), v323);
                            }
                            *(_OWORD *)v404 = xmmword_2277EE440;
                            v405 = xmmword_2277EE450;
                            v322.i32[3] = 1.0;
                            v406 = xmmword_2277EE460;
                            v407 = v322;
                            v395.i8[0] = 0;
                            v395.i64[1] = 0;
                            uuid_clear(buf);
                            uuid_generate_random(buf);
                            v396 = *(float32x4_t *)v404;
                            v397 = v405;
                            v398 = v406;
                            v399 = (float32x4_t)v407;
                            v324 = vsubq_f32(v318[1], *v318);
                            v324.i32[3] = 0;
                            v400 = vmaxnmq_f32(v324, (float32x4_t)0);
                            LOBYTE(v401) = 0;
                            v402 = 0;
                            v403 = 1065353216;
                            if (v373)
                            {
                              v325 = vsubq_f32(v318[1], *v318);
                              v325.i32[3] = 0;
                              *(float32x4_t *)v393 = vmaxnmq_f32(v325, (float32x4_t)0);
                              (*(void (**)(_BYTE *__return_ptr, _BYTE *, uint8_t *, uint8_t *))(*(_QWORD *)v373 + 48))(__p, v373, v404, v393);
                              *(_OWORD *)buf = *(_OWORD *)__p;
                              v395 = *(float32x4_t *)&__p[16];
                              v326 = v402;
                            }
                            else
                            {
                              v326 = 0;
                            }
                            *(_OWORD *)__p = *(_OWORD *)buf;
                            *(float32x4_t *)&__p[16] = v395;
                            v387 = v398;
                            v388 = v399;
                            v389 = v400;
                            v383 = *(float32x4_t *)buf;
                            v384 = v395;
                            v385 = v396;
                            v386 = v397;
                            LOBYTE(v390) = 0;
                            v391 = 0;
                            if (v326)
                            {
                              v390 = v401;
                              v391 = 1;
                            }
                            v392 = v403;
                            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>(a1 + 664, (uint64_t)__p, (uint64_t)__p);
                            if (v391)

                            rf::realityFusionLogObject(v327);
                            v328 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                            {
                              rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)buf, __p);
                              v329 = __p;
                              if (__p[23] < 0)
                                v329 = *(_BYTE **)__p;
                              *(_DWORD *)v393 = 136315138;
                              *(_QWORD *)&v393[4] = v329;
                              _os_log_impl(&dword_227777000, v328, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Adding new localized anchor %s", v393, 0xCu);
                              if ((__p[23] & 0x80000000) != 0)
                                operator delete(*(void **)__p);
                            }

                            if (v402)
                            v318 += 2;
                          }
                          while (v318 != v295);
                        }
                        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v408);
                        if (v267)
                          operator delete(v267);
                        v330 = v371;
                        if (v371 == v370)
                        {
                          v331 = 4;
                          v330 = v370;
                        }
                        else
                        {
                          if (!v371)
                            goto LABEL_682;
                          v331 = 5;
                        }
                        (*(void (**)(void))(*v330 + 8 * v331))();
LABEL_682:
                        v332 = v373;
                        if (v373 == v372)
                        {
                          v333 = 4;
                          v332 = v372;
                        }
                        else
                        {
                          if (!v373)
                            goto LABEL_687;
                          v333 = 5;
                        }
                        (*(void (**)(void))(*v332 + 8 * v333))();
LABEL_687:
                        if (re::internal::enableSignposts(0, 0))
                          kdebug_trace();
                        goto LABEL_689;
                      }
                      v227 = 5;
                    }
                    (*(void (**)(void))(*(_QWORD *)v226 + 8 * v227))();
                    goto LABEL_527;
                  }
                  v225 = (*(uint64_t (**)(void))(*v375 + 16))();
                }
                *((_QWORD *)&v405 + 1) = v225;
                goto LABEL_522;
              }
              v215 = (*(uint64_t (**)(void))(*v377 + 16))();
            }
            v395.i64[1] = v215;
            goto LABEL_517;
          }
          v167 = 0;
          v343 = 0;
          v168 = *(float *)(a1 + 24) + *(float *)(a1 + 24);
          v166 = 1;
        }
        else
        {
          v166 = *(_BYTE *)(a1 + 384) != 0;
          if (*(_BYTE *)(a1 + 384) && *(_BYTE *)(a1 + 360))
          {
            v165 = (id *)(a1 + 352);
            goto LABEL_425;
          }
          v343 = 0;
          v167 = *(unsigned __int8 *)(a1 + 384) == 0;
          v168 = *(float *)(a1 + 24);
        }
        v346 = 1;
        goto LABEL_431;
      }
    }
  }
}

void sub_227784D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,std::mutex *a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  unint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v59 = (unint64_t *)STACK[0x2A8];
  if ((unint64_t *)STACK[0x2A8] == &STACK[0x290])
  {
    v60 = 4;
    v59 = &STACK[0x290];
  }
  else
  {
    if (!v59)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_6:
  v61 = (_QWORD *)a54;
  if ((char *)a54 == &a51)
  {
    v62 = 4;
    v61 = &a51;
  }
  else
  {
    if (!a54)
      goto LABEL_11;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_11:
  v63 = (_QWORD *)a58;
  if ((char *)a58 == &a55)
  {
    v64 = 4;
    v63 = &a55;
  }
  else
  {
    if (!a58)
      goto LABEL_16;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_16:
  if (__p)
    operator delete(__p);
  if (((a23 | a25) & 1) == 0)

  std::mutex::unlock(a28);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::collectAABBsInScene(_QWORD *a1)
{
  uint64_t ComponentsOfClass;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  REMeshComponentGetComponentType();
  ComponentsOfClass = RESceneGetComponentsOfClass();
  v4 = v3;
  v17[1] = ComponentsOfClass;
  v17[2] = v3;
  v15 = ComponentsOfClass;
  v5 = v15;
  v17[3] = v15;
  v18 = 1;
  v6 = ComponentsOfClass + 8 * v4;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v16 = v17;
  if (v6 != v5)
  {
    v7 = -1;
    v8 = v5;
    do
    {
      v15 = v8 + 8;
      v8 = v15;
      ++v7;
    }
    while (v15 != v6);
    if (v7 >= 0x7FFFFFFFFFFFFFFLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v7 + 1);
    v10 = 0;
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[32 * v11];
    v16 = v17;
    do
    {
      REComponentGetEntity();
      RETransformComponentGetComponentType();
      REEntityGetComponentByClass();
      RETransformComponentGetWorldMatrix4x4F();
      REEntityComputeMeshBounds();
      v12 = &v9[v10];
      *(_OWORD *)v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      v15 = v5 + 8;
      v5 = v15;
      v10 += 32;
    }
    while (v15 != v6);
    a1[1] = &v9[v10];
  }
}

void sub_22778533C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v8;
  float32x4_t v9;
  uint32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  BOOL v17;
  unsigned int v18;
  int8x8_t v19;
  float v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  rf *v24;
  NSObject *v25;
  void **v26;
  float32x4_t *v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  float32x4_t v32;
  int32x4_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float32x4_t v37;
  uint8_t buf[4];
  void **v39;
  void *__p[2];
  float32x4_t v41;
  uuid_t uu;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  float32x4_t v47;
  int32x4_t v48;
  void *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = a2[1];
  v10 = (uint32x4_t)vcgtq_f32(*a2, v9);
  v10.i32[3] = v10.i32[2];
  if ((vmaxvq_u32(v10) & 0x80000000) != 0)
  {
    v12.i64[0] = 0;
    v12.i32[2] = 0;
  }
  else
  {
    v11.i64[0] = 0x3F0000003F000000;
    v11.i64[1] = 0x3F0000003F000000;
    v12 = vmulq_f32(vaddq_f32(v8, v9), v11);
  }
  v34 = xmmword_2277EE440;
  v35 = xmmword_2277EE450;
  v12.i32[3] = 1.0;
  v36 = xmmword_2277EE460;
  v37 = v12;
  if (a1[1].i8[1])
  {
    v13 = a1[1].f32[3];
    v14 = vsubq_f32(v9, v8);
    v14.i32[3] = 0;
    v15 = vmaxnmq_f32(v14, (float32x4_t)0);
    v16 = v15.f32[1];
    if (v15.f32[1] <= v15.f32[0])
      v16 = v15.f32[0];
    if (v16 < v15.f32[2])
      v16 = v15.f32[2];
    v17 = v16 <= v13;
    v18 = v16 > v13;
    v19 = (int8x8_t)vdup_n_s32(0x7F800000u);
    v20 = INFINITY;
    v21 = vdup_n_s32(v18);
    if (v17)
      v20 = v15.f32[2];
    *(int8x8_t *)v33.i8 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v21, 0x1FuLL)), v19, *(int8x8_t *)v15.f32);
    *(float *)&v33.i32[2] = v20;
  }
  else
  {
    v33 = vdupq_n_s32(0x7F800000u);
  }
  v43.i8[0] = 0;
  v43.i64[1] = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v44 = v34;
  v45 = v35;
  v46 = v36;
  v47 = v37;
  v48 = v33;
  LOBYTE(v49) = 0;
  v50 = 0;
  v51 = 1065353216;
  v22 = *(_QWORD *)(a3 + 24);
  if (v22)
  {
    if (a1[34].i8[0])
    {
      v23 = *(_QWORD *)(a4 + 24);
      if (v23)
      {
        (*(void (**)(_QWORD, float32x4_t *))(*(_QWORD *)v23 + 48))(*(_QWORD *)(a4 + 24), a1 + 25);
        v22 = *(_QWORD *)(a3 + 24);
        if (!v22)
          std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    v24 = (rf *)(*(_QWORD *(**)(void **__return_ptr, uint64_t, __int128 *, int32x4_t *))(*(_QWORD *)v22 + 48))(__p, v22, &v34, &v33);
    *(_OWORD *)uu = *(_OWORD *)__p;
    v43 = v41;
    rf::realityFusionLogObject(v24);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)uu, __p);
      v26 = v41.i8[7] >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v39 = v26;
      _os_log_impl(&dword_227777000, v25, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Adding new background anchor %s", buf, 0xCu);
      if (v41.i8[7] < 0)
        operator delete(__p[0]);
    }

  }
  if (a1[24].i8[0])
    v27 = a1 + 25;
  else
    v27 = a1 + 15;
  v28 = v27[9].u8[0];
  v29 = v47;
  v27[4] = (float32x4_t)v46;
  v27[5] = v29;
  v27[6] = (float32x4_t)v48;
  v30 = v43;
  *v27 = *(float32x4_t *)uu;
  v27[1] = v30;
  v31 = v45;
  v27[2] = (float32x4_t)v44;
  v27[3] = (float32x4_t)v31;
  if (v28)
  {
    std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>((id *)&v27[7], v49, v50);
    v27[8].i64[0] = v51;
  }
  else
  {
    v27[7].i8[0] = 0;
    v27[7].i8[8] = 0;
    if (v50)
    {
      v27[7].i64[0] = (uint64_t)v49;
      v27[7].i8[8] = 1;
    }
    v27[8].i64[0] = v51;
    v27[9].i8[0] = 1;
  }
  v32 = a2[1];
  a1[46] = *a2;
  a1[47] = v32;
  if (v50)

}

void sub_227785658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,char a40)
{
  if (a40)

  _Unwind_Resume(exception_object);
}

_QWORD *`anonymous namespace'::updateEntityFromEnvironmentProbe(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  rf::internal *v7;
  void *__p[2];
  char v9;

  REAREnvironmentProbeComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    rf::getMessage((rf *)"The probe entity doesn't have probe component.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v7);
  }
  REComponentGetEntity();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentSetWorldMatrix4x4F();
  REAREnvironmentProbeComponentSetExtents();
  if (!*(_BYTE *)(a2 + 120))
    return (_QWORD *)REAREnvironmentProbeComponentSetTexture();
  __p[0] = (void *)REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
  REAREnvironmentProbeComponentSetTexture();
  if (a4)
    REAREnvironmentProbeComponentSetClippingPointLux();
  return RESharedPtr<REAsset>::~RESharedPtr(__p);
}

void sub_227785794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::createEntityFromEnvironmentProbe(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  void *v15[2];
  std::string::size_type v16;

  *a1 = REEntityCreate();
  std::string::basic_string[abi:ne180100]<0>(&v14, "RFAREnvironmentProbeEntity");
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)a2, __p);
  if ((v13 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  REEntitySetName();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentSetWorldMatrix4x4F();
  REAREnvironmentProbeComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (!*(_QWORD *)(a2 + 24))
  {
    if (*(_BYTE *)(a2 + 16))
      v11 = *(_QWORD **)a2;
    else
      v11 = (_QWORD *)a2;
    *(_QWORD *)(a2 + 24) = ((*v11 >> 2) + (*v11 << 6) + v11[1] + 2654435769) ^ *v11;
  }
  REAREnvironmentProbeComponentSetIdentifier();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();
  if (*(_BYTE *)(a2 + 120))
  {
    v14.__r_.__value_.__r.__words[0] = REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
    REAREnvironmentProbeComponentSetTexture();
    if (a5)
      REAREnvironmentProbeComponentSetClippingPointLux();
    RESharedPtr<REAsset>::~RESharedPtr(&v14);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_227785988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  RESharedPtr<REEntity>::~RESharedPtr(v26);
  _Unwind_Resume(a1);
}

uint64_t *RESharedPtr<REEntity>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a2)
    RERetain();
  v4 = *a1;
  *a1 = a2;
  if (v4)
    RERelease();
  return a1;
}

_QWORD *std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer(id *this)
{
  rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer(this);
  JUMPOUT(0x22E29DD50);
}

{
  rf::data_flow::consumer::EnvironmentProbeConsumer *v2;
  uint64_t v3;
  rf::data_flow::consumer::EnvironmentProbeConsumer *v4;
  uint64_t v5;
  void **v6;

  *this = &off_24EFD7628;
  v6 = this + 88;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(this + 83));
  v6 = this + 80;
  std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 75));
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(this + 70));
  if (*((_BYTE *)this + 544) && *((_BYTE *)this + 520))

  if (*((_BYTE *)this + 384))
  {
    if (*((_BYTE *)this + 360))

  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table((uint64_t)(this + 24));
  RESharedPtr<REEntity>::~RESharedPtr(this + 23);
  v2 = (rf::data_flow::consumer::EnvironmentProbeConsumer *)this[16];
  if (v2 == (rf::data_flow::consumer::EnvironmentProbeConsumer *)(this + 13))
  {
    v3 = 4;
    v2 = (rf::data_flow::consumer::EnvironmentProbeConsumer *)(this + 13);
  }
  else
  {
    if (!v2)
      goto LABEL_12;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_12:
  v4 = (rf::data_flow::consumer::EnvironmentProbeConsumer *)this[12];
  if (v4 == (rf::data_flow::consumer::EnvironmentProbeConsumer *)(this + 9))
  {
    v5 = 4;
    v4 = (rf::data_flow::consumer::EnvironmentProbeConsumer *)(this + 9);
  }
  else
  {
    if (!v4)
      return;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
}

uint64_t rf::data_flow::consumer::Consumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = RESharedPtr<REEntity>::~RESharedPtr(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ranges::remove_if_view<ranges::transform_view<std::span<REComponent *,18446744073709551615ul>,`anonymous namespace'::collectAABBsInScene(REScene *,BOOL)::$_0>,ranges::logical_negate<`anonymous namespace'::collectAABBsInScene(REScene *,BOOL)::$_1>>::satisfy_forward(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  unint64_t v7;
  void **v8;
  _BOOL4 v9;
  const char *Name;
  _BOOL4 v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;

  v3 = a1 + 8 * a2;
  if (*a3 != v3)
  {
    do
    {
      REComponentGetEntity();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RESceneUnderstandingComponentGetComponentType();
        if (!REEntityGetComponentByClass() || RESceneUnderstandingComponentGetSourceType() != 1)
        {
          REProbeClusterExclusionComponentGetComponentType();
          if (!REEntityGetComponentByClass())
          {
            MainBundle = CFBundleGetMainBundle();
            Identifier = CFBundleGetIdentifier(MainBundle);
            applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
            v7 = v14;
            if ((v14 & 0x80u) != 0)
              v7 = (unint64_t)__p[1];
            if (v7 == 36)
            {
              v8 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
              v9 = memcmp(v8, "com.apple.AssetViewer.ASVAssetViewer", 0x24uLL) == 0;
            }
            else
            {
              v9 = 0;
            }
            Name = (const char *)REEntityGetName();
            v11 = v9 && strncmp("ARQL_", Name, 5uLL) == 0;
            if ((char)v14 < 0)
              operator delete(__p[0]);
            if (!v11)
              break;
          }
        }
      }
      v12 = *a3 + 8;
      *a3 = v12;
    }
    while (v12 != v3);
  }
}

void sub_227785D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*,false>(float32x4_t *a1, float32x4_t *a2, uint64_t a3, char a4)
{
  float32x4_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  BOOL v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  BOOL v102;
  uint64_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  float32x4_t *v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  float v145;
  float32x4_t *v146;
  float32x4_t v147;
  uint64_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  float32x4_t *v161;
  float32x4_t *v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  uint64_t v173;
  unint64_t v174;
  float32x4_t *v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float v183;
  float32x4_t v184;
  float32x4_t v185;
  float v186;
  float32x4_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v91 = a2[-2];
        v92 = a2[-1];
        v90 = a2 - 2;
        v93 = vsubq_f32(v92, v91);
        v93.i32[3] = 0;
        v94 = vmaxnmq_f32(v93, (float32x4_t)0);
        v95 = vmulq_f32(v94, v94);
        v96 = vsubq_f32(v8[1], *v8);
        v96.i32[3] = 0;
        v97 = vmaxnmq_f32(v96, (float32x4_t)0);
        v98 = vmulq_f32(v97, v97);
        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2), vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).f32[0])* 0.5))
        {
          v212 = *v8;
          v217 = v8[1];
          v99 = v90[1];
          *v8 = *v90;
          v8[1] = v99;
          *v90 = v212;
          v90[1] = v217;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v9 <= 767)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[1];
                v105 = v104[2];
                v107 = *v104;
                v104 = v100;
                v108 = v100[1];
                v109 = vsubq_f32(v108, v105);
                v109.i32[3] = 0;
                v110 = vmaxnmq_f32(v109, (float32x4_t)0);
                v111 = vmulq_f32(v110, v110);
                v112 = vsubq_f32(v106, v107);
                v112.i32[3] = 0;
                v113 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1))).f32[0])* 0.5;
                v114 = vmaxnmq_f32(v112, (float32x4_t)0);
                v115 = vmulq_f32(v114, v114);
                if (v113 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1))).f32[0])* 0.5))
                {
                  v116 = v103;
                  while (1)
                  {
                    v117 = (float32x4_t *)((char *)v8 + v116);
                    v118 = *(float32x4_t *)((char *)v8 + v116 + 16);
                    v117[2] = *(float32x4_t *)((char *)v8 + v116);
                    v117[3] = v118;
                    if (!v116)
                      break;
                    v119 = vsubq_f32(v117[-1], v117[-2]);
                    v119.i32[3] = 0;
                    v120 = vmaxnmq_f32(v119, (float32x4_t)0);
                    v121 = vmulq_f32(v120, v120);
                    v116 -= 32;
                    if (v113 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2), vaddq_f32(v121, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1))).f32[0])* 0.5))
                    {
                      v122 = (float32x4_t *)((char *)v8 + v116 + 32);
                      goto LABEL_74;
                    }
                  }
                  v122 = v8;
LABEL_74:
                  *v122 = v105;
                  v122[1] = v108;
                }
                v100 = v104 + 2;
                v103 += 32;
              }
              while (&v104[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v194 = a1[1];
              v193 = a1[2];
              v195 = *a1;
              a1 = v100;
              v196 = v100[1];
              v197 = vsubq_f32(v196, v193);
              v197.i32[3] = 0;
              v198 = vmaxnmq_f32(v197, (float32x4_t)0);
              v199 = vmulq_f32(v198, v198);
              v200 = vsubq_f32(v194, v195);
              v200.i32[3] = 0;
              v201 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0])* 0.5;
              v202 = vmaxnmq_f32(v200, (float32x4_t)0);
              v203 = vmulq_f32(v202, v202);
              if (v201 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v203, 2), vaddq_f32(v203, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v203.f32, 1))).f32[0])* 0.5))
              {
                v204 = v100;
                do
                {
                  v205 = vsubq_f32(v204[-3], v204[-4]);
                  v205.i32[3] = 0;
                  v206 = vmaxnmq_f32(v205, (float32x4_t)0);
                  v207 = vmulq_f32(v206, v206);
                  v208 = v204[-1];
                  *v204 = v204[-2];
                  v204[1] = v208;
                  v204 -= 2;
                }
                while (v201 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v207, 2), vaddq_f32(v207, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.f32, 1))).f32[0])* 0.5));
                *v204 = v193;
                v204[1] = v196;
              }
              v100 += 2;
            }
            while (&a1[2] != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v123 = (v10 - 2) >> 1;
            v124 = v123;
            do
            {
              v125 = v124;
              if (v123 >= v124)
              {
                v126 = (2 * v124) | 1;
                v127 = &v8[2 * v126];
                if (2 * v125 + 2 < (uint64_t)v10)
                {
                  v128 = vsubq_f32(v127[1], *v127);
                  v128.i32[3] = 0;
                  v129 = vmaxnmq_f32(v128, (float32x4_t)0);
                  v130 = vmulq_f32(v129, v129);
                  v131 = vsubq_f32(v127[3], v127[2]);
                  v131.i32[3] = 0;
                  v132 = vmaxnmq_f32(v131, (float32x4_t)0);
                  v133 = vmulq_f32(v132, v132);
                  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1))).f32[0])* 0.5))
                  {
                    v127 += 2;
                    v126 = 2 * v125 + 2;
                  }
                }
                v134 = vsubq_f32(v127[1], *v127);
                v134.i32[3] = 0;
                v135 = vmaxnmq_f32(v134, (float32x4_t)0);
                v136 = vmulq_f32(v135, v135);
                v137 = &v8[2 * v125];
                v138 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0]);
                v139 = v137[1];
                v140 = *v137;
                v141 = vsubq_f32(v139, *v137);
                v141.i32[3] = 0;
                v142 = v138 * 0.5;
                v143 = vmaxnmq_f32(v141, (float32x4_t)0);
                v144 = vmulq_f32(v143, v143);
                v145 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0])* 0.5;
                if (v142 <= v145)
                {
                  do
                  {
                    v146 = v127;
                    v147 = v127[1];
                    *v137 = *v127;
                    v137[1] = v147;
                    if (v123 < v126)
                      break;
                    v148 = 2 * v126;
                    v126 = (2 * v126) | 1;
                    v127 = &v8[2 * v126];
                    v149 = v148 + 2;
                    if (v149 < (uint64_t)v10)
                    {
                      v150 = vsubq_f32(v127[1], *v127);
                      v150.i32[3] = 0;
                      v151 = vmaxnmq_f32(v150, (float32x4_t)0);
                      v152 = vmulq_f32(v151, v151);
                      v153 = vsubq_f32(v127[3], v127[2]);
                      v153.i32[3] = 0;
                      v154 = vmaxnmq_f32(v153, (float32x4_t)0);
                      v155 = vmulq_f32(v154, v154);
                      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2), vaddq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.f32, 1))).f32[0])* 0.5))
                      {
                        v127 += 2;
                        v126 = v149;
                      }
                    }
                    v156 = vsubq_f32(v127[1], *v127);
                    v156.i32[3] = 0;
                    v157 = vmaxnmq_f32(v156, (float32x4_t)0);
                    v158 = vmulq_f32(v157, v157);
                    v137 = v146;
                  }
                  while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 2), vaddq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1))).f32[0])* 0.5) <= v145);
                  *v146 = v140;
                  v146[1] = v139;
                }
              }
              v124 = v125 - 1;
            }
            while (v125);
            v159 = (unint64_t)v9 >> 5;
            do
            {
              v160 = 0;
              v213 = *v8;
              v218 = v8[1];
              v161 = v8;
              do
              {
                v162 = v161;
                v161 += 2 * v160 + 2;
                v163 = 2 * v160;
                v160 = (2 * v160) | 1;
                v164 = v163 + 2;
                if (v164 < v159)
                {
                  v165 = vsubq_f32(v161[1], *v161);
                  v165.i32[3] = 0;
                  v166 = vmaxnmq_f32(v165, (float32x4_t)0);
                  v167 = vmulq_f32(v166, v166);
                  v168 = vsubq_f32(v161[3], v161[2]);
                  v168.i32[3] = 0;
                  v169 = vmaxnmq_f32(v168, (float32x4_t)0);
                  v170 = vmulq_f32(v169, v169);
                  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v170, 2), vaddq_f32(v170, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v170.f32, 1))).f32[0])* 0.5))
                  {
                    v161 += 2;
                    v160 = v164;
                  }
                }
                v171 = v161[1];
                *v162 = *v161;
                v162[1] = v171;
              }
              while (v160 <= (uint64_t)((unint64_t)(v159 - 2) >> 1));
              a2 -= 2;
              if (v161 == a2)
              {
                *v161 = v213;
                v161[1] = v218;
              }
              else
              {
                v172 = a2[1];
                *v161 = *a2;
                v161[1] = v172;
                *a2 = v213;
                a2[1] = v218;
                v173 = (char *)v161 - (char *)v8 + 32;
                if (v173 >= 33)
                {
                  v174 = (((unint64_t)v173 >> 5) - 2) >> 1;
                  v175 = &v8[2 * v174];
                  v176 = vsubq_f32(v175[1], *v175);
                  v176.i32[3] = 0;
                  v177 = vmaxnmq_f32(v176, (float32x4_t)0);
                  v178 = vmulq_f32(v177, v177);
                  v179 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).f32[0]);
                  v181 = *v161;
                  v180 = v161[1];
                  v182 = vsubq_f32(v180, *v161);
                  v182.i32[3] = 0;
                  v183 = v179 * 0.5;
                  v184 = vmaxnmq_f32(v182, (float32x4_t)0);
                  v185 = vmulq_f32(v184, v184);
                  v186 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v185, 2), vaddq_f32(v185, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v185.f32, 1))).f32[0])* 0.5;
                  if (v183 > v186)
                  {
                    do
                    {
                      v187 = v175;
                      v188 = v175[1];
                      *v161 = *v175;
                      v161[1] = v188;
                      if (!v174)
                        break;
                      v174 = (v174 - 1) >> 1;
                      v175 = &v8[2 * v174];
                      v189 = vsubq_f32(v175[1], *v175);
                      v189.i32[3] = 0;
                      v190 = vmaxnmq_f32(v189, (float32x4_t)0);
                      v191 = vmulq_f32(v190, v190);
                      v161 = v187;
                    }
                    while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v191, 2), vaddq_f32(v191, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v191.f32, 1))).f32[0])* 0.5) > v186);
                    *v187 = v181;
                    v187[1] = v180;
                  }
                }
              }
            }
            while (v159-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
        }
        else
        {
          v209 = *a1;
          v214 = a1[1];
          v13 = v12[1];
          *a1 = *v12;
          a1[1] = v13;
          *v12 = v209;
          v12[1] = v214;
        }
        --a3;
        v14 = *a1;
        if ((a4 & 1) == 0)
        {
          v20 = vsubq_f32(a1[-1], a1[-2]);
          v20.i32[3] = 0;
          v21 = vmaxnmq_f32(v20, (float32x4_t)0);
          v22 = vmulq_f32(v21, v21);
          v23 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
          v15 = a1[1];
          v24 = vsubq_f32(v15, v14);
          v24.i32[3] = 0;
          v25 = v23 * 0.5;
          v26 = vmaxnmq_f32(v24, (float32x4_t)0);
          v27 = vmulq_f32(v26, v26);
          v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0])* 0.5;
          if (v25 > v19)
            goto LABEL_11;
          v60 = vsubq_f32(a2[-1], a2[-2]);
          v60.i32[3] = 0;
          v61 = vmaxnmq_f32(v60, (float32x4_t)0);
          v62 = vmulq_f32(v61, v61);
          if (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0])* 0.5))
          {
            v68 = a1 + 2;
            do
            {
              v8 = v68;
              if (v68 >= a2)
                break;
              v69 = vsubq_f32(v68[1], *v68);
              v69.i32[3] = 0;
              v70 = vmaxnmq_f32(v69, (float32x4_t)0);
              v71 = vmulq_f32(v70, v70);
              v68 += 2;
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0])* 0.5));
          }
          else
          {
            v8 = a1;
            do
            {
              v63 = v8[2];
              v64 = v8[3];
              v8 += 2;
              v65 = vsubq_f32(v64, v63);
              v65.i32[3] = 0;
              v66 = vmaxnmq_f32(v65, (float32x4_t)0);
              v67 = vmulq_f32(v66, v66);
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0])* 0.5));
          }
          v72 = a2;
          if (v8 < a2)
          {
            v72 = a2;
            do
            {
              v73 = v72[-2];
              v74 = v72[-1];
              v72 -= 2;
              v75 = vsubq_f32(v74, v73);
              v75.i32[3] = 0;
              v76 = vmaxnmq_f32(v75, (float32x4_t)0);
              v77 = vmulq_f32(v76, v76);
            }
            while (v19 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).f32[0])* 0.5));
          }
          while (v8 < v72)
          {
            v211 = *v8;
            v216 = v8[1];
            v78 = v72[1];
            *v8 = *v72;
            v8[1] = v78;
            *v72 = v211;
            v72[1] = v216;
            do
            {
              v79 = v8[2];
              v80 = v8[3];
              v8 += 2;
              v81 = vsubq_f32(v80, v79);
              v81.i32[3] = 0;
              v82 = vmaxnmq_f32(v81, (float32x4_t)0);
              v83 = vmulq_f32(v82, v82);
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0])* 0.5));
            do
            {
              v84 = v72[-2];
              v85 = v72[-1];
              v72 -= 2;
              v86 = vsubq_f32(v85, v84);
              v86.i32[3] = 0;
              v87 = vmaxnmq_f32(v86, (float32x4_t)0);
              v88 = vmulq_f32(v87, v87);
            }
            while (v19 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0])* 0.5));
          }
          if (&v8[-2] != a1)
          {
            v89 = v8[-1];
            *a1 = v8[-2];
            a1[1] = v89;
          }
          a4 = 0;
          v8[-2] = v14;
          v8[-1] = v15;
          continue;
        }
        v15 = a1[1];
        v16 = vsubq_f32(v15, v14);
        v16.i32[3] = 0;
        v17 = vmaxnmq_f32(v16, (float32x4_t)0);
        v18 = vmulq_f32(v17, v17);
        v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0])* 0.5;
LABEL_11:
        v28 = 0;
        do
        {
          v29 = vsubq_f32(a1[v28 + 3], a1[v28 + 2]);
          v29.i32[3] = 0;
          v30 = vmaxnmq_f32(v29, (float32x4_t)0);
          v31 = vmulq_f32(v30, v30);
          v28 += 2;
        }
        while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0])* 0.5) > v19);
        v32 = &a1[v28];
        v33 = a2;
        if (v28 == 2)
        {
          v33 = a2;
          do
          {
            if (v32 >= v33)
              break;
            v39 = v33[-2];
            v40 = v33[-1];
            v33 -= 2;
            v41 = vsubq_f32(v40, v39);
            v41.i32[3] = 0;
            v42 = vmaxnmq_f32(v41, (float32x4_t)0);
            v43 = vmulq_f32(v42, v42);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0])* 0.5) <= v19);
        }
        else
        {
          do
          {
            v34 = v33[-2];
            v35 = v33[-1];
            v33 -= 2;
            v36 = vsubq_f32(v35, v34);
            v36.i32[3] = 0;
            v37 = vmaxnmq_f32(v36, (float32x4_t)0);
            v38 = vmulq_f32(v37, v37);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0])* 0.5) <= v19);
        }
        if (v32 >= v33)
        {
          v57 = v32 - 2;
        }
        else
        {
          v44 = &a1[v28];
          v45 = v33;
          do
          {
            v210 = *v44;
            v215 = v44[1];
            v46 = v45[1];
            *v44 = *v45;
            v44[1] = v46;
            *v45 = v210;
            v45[1] = v215;
            do
            {
              v47 = v44[2];
              v48 = v44[3];
              v44 += 2;
              v49 = vsubq_f32(v48, v47);
              v49.i32[3] = 0;
              v50 = vmaxnmq_f32(v49, (float32x4_t)0);
              v51 = vmulq_f32(v50, v50);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0])* 0.5) > v19);
            do
            {
              v52 = v45[-2];
              v53 = v45[-1];
              v45 -= 2;
              v54 = vsubq_f32(v53, v52);
              v54.i32[3] = 0;
              v55 = vmaxnmq_f32(v54, (float32x4_t)0);
              v56 = vmulq_f32(v55, v55);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0])* 0.5) <= v19);
          }
          while (v44 < v45);
          v57 = v44 - 2;
        }
        if (v57 != a1)
        {
          v58 = v57[1];
          *a1 = *v57;
          a1[1] = v58;
        }
        *v57 = v14;
        v57[1] = v15;
        if (v32 < v33)
        {
LABEL_32:
          a4 = 0;
          v8 = v57 + 2;
          continue;
        }
        v8 = v57 + 2;
        {
          if (v59)
            continue;
          goto LABEL_32;
        }
        a2 = v57;
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v91 = a2[-2];
        v92 = a2[-1];
        v90 = a2 - 2;
        v93 = vsubq_f32(v92, v91);
        v93.i32[3] = 0;
        v94 = vmaxnmq_f32(v93, (float32x4_t)0);
        v95 = vmulq_f32(v94, v94);
        v96 = vsubq_f32(v8[1], *v8);
        v96.i32[3] = 0;
        v97 = vmaxnmq_f32(v96, (float32x4_t)0);
        v98 = vmulq_f32(v97, v97);
        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2), vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).f32[0])* 0.5))
        {
          v212 = *v8;
          v217 = v8[1];
          v99 = v90[1];
          *v8 = *v90;
          v8[1] = v99;
          *v90 = v212;
          v90[1] = v217;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v9 <= 767)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[1];
                v105 = v104[2];
                v107 = *v104;
                v104 = v100;
                v108 = v100[1];
                v109 = vsubq_f32(v108, v105);
                v109.i32[3] = 0;
                v110 = vmaxnmq_f32(v109, (float32x4_t)0);
                v111 = vmulq_f32(v110, v110);
                v112 = vsubq_f32(v106, v107);
                v112.i32[3] = 0;
                v113 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1))).f32[0])* 0.5;
                v114 = vmaxnmq_f32(v112, (float32x4_t)0);
                v115 = vmulq_f32(v114, v114);
                if (v113 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1))).f32[0])* 0.5))
                {
                  v116 = v103;
                  while (1)
                  {
                    v117 = (float32x4_t *)((char *)v8 + v116);
                    v118 = *(float32x4_t *)((char *)v8 + v116 + 16);
                    v117[2] = *(float32x4_t *)((char *)v8 + v116);
                    v117[3] = v118;
                    if (!v116)
                      break;
                    v119 = vsubq_f32(v117[-1], v117[-2]);
                    v119.i32[3] = 0;
                    v120 = vmaxnmq_f32(v119, (float32x4_t)0);
                    v121 = vmulq_f32(v120, v120);
                    v116 -= 32;
                    if (v113 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2), vaddq_f32(v121, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1))).f32[0])* 0.5))
                    {
                      v122 = (float32x4_t *)((char *)v8 + v116 + 32);
                      goto LABEL_74;
                    }
                  }
                  v122 = v8;
LABEL_74:
                  *v122 = v105;
                  v122[1] = v108;
                }
                v100 = v104 + 2;
                v103 += 32;
              }
              while (&v104[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v194 = a1[1];
              v193 = a1[2];
              v195 = *a1;
              a1 = v100;
              v196 = v100[1];
              v197 = vsubq_f32(v196, v193);
              v197.i32[3] = 0;
              v198 = vmaxnmq_f32(v197, (float32x4_t)0);
              v199 = vmulq_f32(v198, v198);
              v200 = vsubq_f32(v194, v195);
              v200.i32[3] = 0;
              v201 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0])* 0.5;
              v202 = vmaxnmq_f32(v200, (float32x4_t)0);
              v203 = vmulq_f32(v202, v202);
              if (v201 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v203, 2), vaddq_f32(v203, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v203.f32, 1))).f32[0])* 0.5))
              {
                v204 = v100;
                do
                {
                  v205 = vsubq_f32(v204[-3], v204[-4]);
                  v205.i32[3] = 0;
                  v206 = vmaxnmq_f32(v205, (float32x4_t)0);
                  v207 = vmulq_f32(v206, v206);
                  v208 = v204[-1];
                  *v204 = v204[-2];
                  v204[1] = v208;
                  v204 -= 2;
                }
                while (v201 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v207, 2), vaddq_f32(v207, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.f32, 1))).f32[0])* 0.5));
                *v204 = v193;
                v204[1] = v196;
              }
              v100 += 2;
            }
            while (&a1[2] != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v123 = (v10 - 2) >> 1;
            v124 = v123;
            do
            {
              v125 = v124;
              if (v123 >= v124)
              {
                v126 = (2 * v124) | 1;
                v127 = &v8[2 * v126];
                if (2 * v125 + 2 < (uint64_t)v10)
                {
                  v128 = vsubq_f32(v127[1], *v127);
                  v128.i32[3] = 0;
                  v129 = vmaxnmq_f32(v128, (float32x4_t)0);
                  v130 = vmulq_f32(v129, v129);
                  v131 = vsubq_f32(v127[3], v127[2]);
                  v131.i32[3] = 0;
                  v132 = vmaxnmq_f32(v131, (float32x4_t)0);
                  v133 = vmulq_f32(v132, v132);
                  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1))).f32[0])* 0.5))
                  {
                    v127 += 2;
                    v126 = 2 * v125 + 2;
                  }
                }
                v134 = vsubq_f32(v127[1], *v127);
                v134.i32[3] = 0;
                v135 = vmaxnmq_f32(v134, (float32x4_t)0);
                v136 = vmulq_f32(v135, v135);
                v137 = &v8[2 * v125];
                v138 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0]);
                v139 = v137[1];
                v140 = *v137;
                v141 = vsubq_f32(v139, *v137);
                v141.i32[3] = 0;
                v142 = v138 * 0.5;
                v143 = vmaxnmq_f32(v141, (float32x4_t)0);
                v144 = vmulq_f32(v143, v143);
                v145 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0])* 0.5;
                if (v142 <= v145)
                {
                  do
                  {
                    v146 = v127;
                    v147 = v127[1];
                    *v137 = *v127;
                    v137[1] = v147;
                    if (v123 < v126)
                      break;
                    v148 = 2 * v126;
                    v126 = (2 * v126) | 1;
                    v127 = &v8[2 * v126];
                    v149 = v148 + 2;
                    if (v149 < (uint64_t)v10)
                    {
                      v150 = vsubq_f32(v127[1], *v127);
                      v150.i32[3] = 0;
                      v151 = vmaxnmq_f32(v150, (float32x4_t)0);
                      v152 = vmulq_f32(v151, v151);
                      v153 = vsubq_f32(v127[3], v127[2]);
                      v153.i32[3] = 0;
                      v154 = vmaxnmq_f32(v153, (float32x4_t)0);
                      v155 = vmulq_f32(v154, v154);
                      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2), vaddq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.f32, 1))).f32[0])* 0.5))
                      {
                        v127 += 2;
                        v126 = v149;
                      }
                    }
                    v156 = vsubq_f32(v127[1], *v127);
                    v156.i32[3] = 0;
                    v157 = vmaxnmq_f32(v156, (float32x4_t)0);
                    v158 = vmulq_f32(v157, v157);
                    v137 = v146;
                  }
                  while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 2), vaddq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1))).f32[0])* 0.5) <= v145);
                  *v146 = v140;
                  v146[1] = v139;
                }
              }
              v124 = v125 - 1;
            }
            while (v125);
            v159 = (unint64_t)v9 >> 5;
            do
            {
              v160 = 0;
              v213 = *v8;
              v218 = v8[1];
              v161 = v8;
              do
              {
                v162 = v161;
                v161 += 2 * v160 + 2;
                v163 = 2 * v160;
                v160 = (2 * v160) | 1;
                v164 = v163 + 2;
                if (v164 < v159)
                {
                  v165 = vsubq_f32(v161[1], *v161);
                  v165.i32[3] = 0;
                  v166 = vmaxnmq_f32(v165, (float32x4_t)0);
                  v167 = vmulq_f32(v166, v166);
                  v168 = vsubq_f32(v161[3], v161[2]);
                  v168.i32[3] = 0;
                  v169 = vmaxnmq_f32(v168, (float32x4_t)0);
                  v170 = vmulq_f32(v169, v169);
                  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v170, 2), vaddq_f32(v170, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v170.f32, 1))).f32[0])* 0.5))
                  {
                    v161 += 2;
                    v160 = v164;
                  }
                }
                v171 = v161[1];
                *v162 = *v161;
                v162[1] = v171;
              }
              while (v160 <= (uint64_t)((unint64_t)(v159 - 2) >> 1));
              a2 -= 2;
              if (v161 == a2)
              {
                *v161 = v213;
                v161[1] = v218;
              }
              else
              {
                v172 = a2[1];
                *v161 = *a2;
                v161[1] = v172;
                *a2 = v213;
                a2[1] = v218;
                v173 = (char *)v161 - (char *)v8 + 32;
                if (v173 >= 33)
                {
                  v174 = (((unint64_t)v173 >> 5) - 2) >> 1;
                  v175 = &v8[2 * v174];
                  v176 = vsubq_f32(v175[1], *v175);
                  v176.i32[3] = 0;
                  v177 = vmaxnmq_f32(v176, (float32x4_t)0);
                  v178 = vmulq_f32(v177, v177);
                  v179 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).f32[0]);
                  v181 = *v161;
                  v180 = v161[1];
                  v182 = vsubq_f32(v180, *v161);
                  v182.i32[3] = 0;
                  v183 = v179 * 0.5;
                  v184 = vmaxnmq_f32(v182, (float32x4_t)0);
                  v185 = vmulq_f32(v184, v184);
                  v186 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v185, 2), vaddq_f32(v185, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v185.f32, 1))).f32[0])* 0.5;
                  if (v183 > v186)
                  {
                    do
                    {
                      v187 = v175;
                      v188 = v175[1];
                      *v161 = *v175;
                      v161[1] = v188;
                      if (!v174)
                        break;
                      v174 = (v174 - 1) >> 1;
                      v175 = &v8[2 * v174];
                      v189 = vsubq_f32(v175[1], *v175);
                      v189.i32[3] = 0;
                      v190 = vmaxnmq_f32(v189, (float32x4_t)0);
                      v191 = vmulq_f32(v190, v190);
                      v161 = v187;
                    }
                    while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v191, 2), vaddq_f32(v191, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v191.f32, 1))).f32[0])* 0.5) > v186);
                    *v187 = v181;
                    v187[1] = v180;
                  }
                }
              }
            }
            while (v159-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
        }
        else
        {
          v209 = *a1;
          v214 = a1[1];
          v13 = v12[1];
          *a1 = *v12;
          a1[1] = v13;
          *v12 = v209;
          v12[1] = v214;
        }
        --a3;
        v14 = *a1;
        if ((a4 & 1) == 0)
        {
          v20 = vsubq_f32(a1[-1], a1[-2]);
          v20.i32[3] = 0;
          v21 = vmaxnmq_f32(v20, (float32x4_t)0);
          v22 = vmulq_f32(v21, v21);
          v23 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
          v15 = a1[1];
          v24 = vsubq_f32(v15, v14);
          v24.i32[3] = 0;
          v25 = v23 * 0.5;
          v26 = vmaxnmq_f32(v24, (float32x4_t)0);
          v27 = vmulq_f32(v26, v26);
          v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0])* 0.5;
          if (v25 > v19)
            goto LABEL_11;
          v60 = vsubq_f32(a2[-1], a2[-2]);
          v60.i32[3] = 0;
          v61 = vmaxnmq_f32(v60, (float32x4_t)0);
          v62 = vmulq_f32(v61, v61);
          if (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0])* 0.5))
          {
            v68 = a1 + 2;
            do
            {
              v8 = v68;
              if (v68 >= a2)
                break;
              v69 = vsubq_f32(v68[1], *v68);
              v69.i32[3] = 0;
              v70 = vmaxnmq_f32(v69, (float32x4_t)0);
              v71 = vmulq_f32(v70, v70);
              v68 += 2;
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0])* 0.5));
          }
          else
          {
            v8 = a1;
            do
            {
              v63 = v8[2];
              v64 = v8[3];
              v8 += 2;
              v65 = vsubq_f32(v64, v63);
              v65.i32[3] = 0;
              v66 = vmaxnmq_f32(v65, (float32x4_t)0);
              v67 = vmulq_f32(v66, v66);
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0])* 0.5));
          }
          v72 = a2;
          if (v8 < a2)
          {
            v72 = a2;
            do
            {
              v73 = v72[-2];
              v74 = v72[-1];
              v72 -= 2;
              v75 = vsubq_f32(v74, v73);
              v75.i32[3] = 0;
              v76 = vmaxnmq_f32(v75, (float32x4_t)0);
              v77 = vmulq_f32(v76, v76);
            }
            while (v19 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).f32[0])* 0.5));
          }
          while (v8 < v72)
          {
            v211 = *v8;
            v216 = v8[1];
            v78 = v72[1];
            *v8 = *v72;
            v8[1] = v78;
            *v72 = v211;
            v72[1] = v216;
            do
            {
              v79 = v8[2];
              v80 = v8[3];
              v8 += 2;
              v81 = vsubq_f32(v80, v79);
              v81.i32[3] = 0;
              v82 = vmaxnmq_f32(v81, (float32x4_t)0);
              v83 = vmulq_f32(v82, v82);
            }
            while (v19 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0])* 0.5));
            do
            {
              v84 = v72[-2];
              v85 = v72[-1];
              v72 -= 2;
              v86 = vsubq_f32(v85, v84);
              v86.i32[3] = 0;
              v87 = vmaxnmq_f32(v86, (float32x4_t)0);
              v88 = vmulq_f32(v87, v87);
            }
            while (v19 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0])* 0.5));
          }
          if (&v8[-2] != a1)
          {
            v89 = v8[-1];
            *a1 = v8[-2];
            a1[1] = v89;
          }
          a4 = 0;
          v8[-2] = v14;
          v8[-1] = v15;
          continue;
        }
        v15 = a1[1];
        v16 = vsubq_f32(v15, v14);
        v16.i32[3] = 0;
        v17 = vmaxnmq_f32(v16, (float32x4_t)0);
        v18 = vmulq_f32(v17, v17);
        v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0])* 0.5;
LABEL_11:
        v28 = 0;
        do
        {
          v29 = vsubq_f32(a1[v28 + 3], a1[v28 + 2]);
          v29.i32[3] = 0;
          v30 = vmaxnmq_f32(v29, (float32x4_t)0);
          v31 = vmulq_f32(v30, v30);
          v28 += 2;
        }
        while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0])* 0.5) > v19);
        v32 = &a1[v28];
        v33 = a2;
        if (v28 == 2)
        {
          v33 = a2;
          do
          {
            if (v32 >= v33)
              break;
            v39 = v33[-2];
            v40 = v33[-1];
            v33 -= 2;
            v41 = vsubq_f32(v40, v39);
            v41.i32[3] = 0;
            v42 = vmaxnmq_f32(v41, (float32x4_t)0);
            v43 = vmulq_f32(v42, v42);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0])* 0.5) <= v19);
        }
        else
        {
          do
          {
            v34 = v33[-2];
            v35 = v33[-1];
            v33 -= 2;
            v36 = vsubq_f32(v35, v34);
            v36.i32[3] = 0;
            v37 = vmaxnmq_f32(v36, (float32x4_t)0);
            v38 = vmulq_f32(v37, v37);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0])* 0.5) <= v19);
        }
        if (v32 >= v33)
        {
          v57 = v32 - 2;
        }
        else
        {
          v44 = &a1[v28];
          v45 = v33;
          do
          {
            v210 = *v44;
            v215 = v44[1];
            v46 = v45[1];
            *v44 = *v45;
            v44[1] = v46;
            *v45 = v210;
            v45[1] = v215;
            do
            {
              v47 = v44[2];
              v48 = v44[3];
              v44 += 2;
              v49 = vsubq_f32(v48, v47);
              v49.i32[3] = 0;
              v50 = vmaxnmq_f32(v49, (float32x4_t)0);
              v51 = vmulq_f32(v50, v50);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0])* 0.5) > v19);
            do
            {
              v52 = v45[-2];
              v53 = v45[-1];
              v45 -= 2;
              v54 = vsubq_f32(v53, v52);
              v54.i32[3] = 0;
              v55 = vmaxnmq_f32(v54, (float32x4_t)0);
              v56 = vmulq_f32(v55, v55);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0])* 0.5) <= v19);
          }
          while (v44 < v45);
          v57 = v44 - 2;
        }
        if (v57 != a1)
        {
          v58 = v57[1];
          *a1 = *v57;
          a1[1] = v58;
        }
        *v57 = v14;
        v57[1] = v15;
        if (v32 < v33)
        {
LABEL_32:
          a4 = 0;
          v8 = v57 + 2;
          continue;
        }
        v8 = v57 + 2;
        {
          if (v59)
            continue;
          goto LABEL_32;
        }
        a2 = v57;
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

float32x4_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*,0>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v10;
  float32x4_t result;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;

  v10 = vsubq_f32(a5[1], *a5);
  v10.i32[3] = 0;
  result = 0uLL;
  v12 = vmaxnmq_f32(v10, (float32x4_t)0);
  v13 = vmulq_f32(v12, v12);
  v14 = vsubq_f32(a4[1], *a4);
  v14.i32[3] = 0;
  v15 = vmaxnmq_f32(v14, (float32x4_t)0);
  v16 = vmulq_f32(v15, v15);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0])* 0.5))
  {
    v18 = *a4;
    v17 = a4[1];
    v19 = a5[1];
    *a4 = *a5;
    a4[1] = v19;
    *a5 = v18;
    a5[1] = v17;
    v20 = vsubq_f32(a4[1], *a4);
    v20.i32[3] = 0;
    v21 = vmaxnmq_f32(v20, (float32x4_t)0);
    v22 = vmulq_f32(v21, v21);
    v23 = vsubq_f32(a3[1], *a3);
    v23.i32[3] = 0;
    v24 = vmaxnmq_f32(v23, (float32x4_t)0);
    result = vmulq_f32(v24, v24);
    result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
    result.f32[0] = sqrtf(result.f32[0]) * 0.5;
    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0])* 0.5) > result.f32[0])
    {
      v26 = *a3;
      v25 = a3[1];
      v27 = a4[1];
      *a3 = *a4;
      a3[1] = v27;
      *a4 = v26;
      a4[1] = v25;
      v28 = vsubq_f32(a3[1], *a3);
      v28.i32[3] = 0;
      result = 0uLL;
      v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      v30 = vmulq_f32(v29, v29);
      v31 = vsubq_f32(a2[1], *a2);
      v31.i32[3] = 0;
      v32 = vmaxnmq_f32(v31, (float32x4_t)0);
      v33 = vmulq_f32(v32, v32);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])* 0.5))
      {
        v35 = *a2;
        v34 = a2[1];
        v36 = a3[1];
        *a2 = *a3;
        a2[1] = v36;
        *a3 = v35;
        a3[1] = v34;
        v37 = vsubq_f32(a2[1], *a2);
        v37.i32[3] = 0;
        v38 = vmaxnmq_f32(v37, (float32x4_t)0);
        v39 = vmulq_f32(v38, v38);
        v40 = vsubq_f32(a1[1], *a1);
        v40.i32[3] = 0;
        v41 = vmaxnmq_f32(v40, (float32x4_t)0);
        result = vmulq_f32(v41, v41);
        result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
        result.f32[0] = sqrtf(result.f32[0]) * 0.5;
        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0])* 0.5) > result.f32[0])
        {
          v42 = *a1;
          result = a1[1];
          v43 = a2[1];
          *a1 = *a2;
          a1[1] = v43;
          *a2 = v42;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

float32x4_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;

  v3 = vsubq_f32(a2[1], *a2);
  v3.i32[3] = 0;
  v4 = vmaxnmq_f32(v3, (float32x4_t)0);
  v5 = vmulq_f32(v4, v4);
  v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])* 0.5;
  v7 = vsubq_f32(result[1], *result);
  v7.i32[3] = 0;
  v8 = vmaxnmq_f32(v7, (float32x4_t)0);
  v9 = vmulq_f32(v8, v8);
  v10 = vsubq_f32(a3[1], *a3);
  v10.i32[3] = 0;
  v11 = vmaxnmq_f32(v10, (float32x4_t)0);
  v12 = vmulq_f32(v11, v11);
  v13 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5;
  if (v6 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5))
  {
    if (v13 > v6)
    {
      v18 = *a2;
      v17 = a2[1];
      v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = v17;
      v20 = vsubq_f32(a2[1], *a2);
      v20.i32[3] = 0;
      v21 = vmaxnmq_f32(v20, (float32x4_t)0);
      v22 = vmulq_f32(v21, v21);
      v23 = vsubq_f32(result[1], *result);
      v23.i32[3] = 0;
      v24 = vmaxnmq_f32(v23, (float32x4_t)0);
      v25 = vmulq_f32(v24, v24);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0])* 0.5))
      {
        v27 = *result;
        v26 = result[1];
        v28 = a2[1];
        *result = *a2;
        result[1] = v28;
        *a2 = v27;
        a2[1] = v26;
      }
    }
  }
  else
  {
    if (v13 <= v6)
    {
      v30 = *result;
      v29 = result[1];
      v31 = a2[1];
      *result = *a2;
      result[1] = v31;
      *a2 = v30;
      a2[1] = v29;
      v32 = vsubq_f32(a3[1], *a3);
      v32.i32[3] = 0;
      v33 = vmaxnmq_f32(v32, (float32x4_t)0);
      v34 = vmulq_f32(v33, v33);
      v35 = vsubq_f32(a2[1], *a2);
      v35.i32[3] = 0;
      v36 = vmaxnmq_f32(v35, (float32x4_t)0);
      v37 = vmulq_f32(v36, v36);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5) <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0])* 0.5))return result;
      v15 = *a2;
      v14 = a2[1];
      v38 = a3[1];
      *a2 = *a3;
      a2[1] = v38;
    }
    else
    {
      v15 = *result;
      v14 = result[1];
      v16 = a3[1];
      *result = *a3;
      result[1] = v16;
    }
    *a3 = v15;
    a3[1] = v14;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      v7 = vsubq_f32(a2[-1], a2[-2]);
      v7.i32[3] = 0;
      v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      v9 = vmulq_f32(v8, v8);
      v10 = vsubq_f32(a1[1], *a1);
      v10.i32[3] = 0;
      v11 = vmaxnmq_f32(v10, (float32x4_t)0);
      v12 = vmulq_f32(v11, v11);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5))
      {
        v14 = *a1;
        v13 = a1[1];
        v15 = a2[-1];
        *a1 = *v6;
        a1[1] = v15;
        *v6 = v14;
        a2[-1] = v13;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v16 = a1 + 4;
      v17 = a1 + 6;
      if (&a1[6] == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v21 = *v17;
    v20 = v17[1];
    v22 = vsubq_f32(v20, *v17);
    v22.i32[3] = 0;
    v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    v24 = vmulq_f32(v23, v23);
    v25 = vsubq_f32(v16[1], *v16);
    v25.i32[3] = 0;
    v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0])* 0.5;
    v27 = vmaxnmq_f32(v25, (float32x4_t)0);
    v28 = vmulq_f32(v27, v27);
    if (v26 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0])* 0.5))
    {
      v29 = v18;
      while (1)
      {
        v30 = (float32x4_t *)((char *)a1 + v29);
        v31 = *(float32x4_t *)((char *)a1 + v29 + 80);
        v30[6] = *(float32x4_t *)((char *)a1 + v29 + 64);
        v30[7] = v31;
        if (v29 == -64)
          break;
        v32 = vsubq_f32(v30[3], v30[2]);
        v32.i32[3] = 0;
        v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        v34 = vmulq_f32(v33, v33);
        v29 -= 32;
        if (v26 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5))
        {
          v35 = (float32x4_t *)((char *)a1 + v29 + 96);
          goto LABEL_12;
        }
      }
      v35 = a1;
LABEL_12:
      *v35 = v21;
      v35[1] = v20;
      if (++v19 == 8)
        return &v17[2] == a2;
    }
    v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2)
      return 1;
  }
}

float32x4_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v8;
  float32x4_t result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  v8 = vsubq_f32(a4[1], *a4);
  v8.i32[3] = 0;
  result = 0uLL;
  v10 = vmaxnmq_f32(v8, (float32x4_t)0);
  v11 = vmulq_f32(v10, v10);
  v12 = vsubq_f32(a3[1], *a3);
  v12.i32[3] = 0;
  v13 = vmaxnmq_f32(v12, (float32x4_t)0);
  v14 = vmulq_f32(v13, v13);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0])* 0.5))
  {
    v16 = *a3;
    v15 = a3[1];
    v17 = a4[1];
    *a3 = *a4;
    a3[1] = v17;
    *a4 = v16;
    a4[1] = v15;
    v18 = vsubq_f32(a3[1], *a3);
    v18.i32[3] = 0;
    v19 = vmaxnmq_f32(v18, (float32x4_t)0);
    v20 = vmulq_f32(v19, v19);
    v21 = vsubq_f32(a2[1], *a2);
    v21.i32[3] = 0;
    v22 = vmaxnmq_f32(v21, (float32x4_t)0);
    result = vmulq_f32(v22, v22);
    result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
    result.f32[0] = sqrtf(result.f32[0]) * 0.5;
    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* 0.5) > result.f32[0])
    {
      v24 = *a2;
      v23 = a2[1];
      v25 = a3[1];
      *a2 = *a3;
      a2[1] = v25;
      *a3 = v24;
      a3[1] = v23;
      v26 = vsubq_f32(a2[1], *a2);
      v26.i32[3] = 0;
      v27 = vmaxnmq_f32(v26, (float32x4_t)0);
      result = vmulq_f32(v27, v27);
      result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
      v28 = vsubq_f32(a1[1], *a1);
      v28.i32[3] = 0;
      result.f32[0] = sqrtf(result.f32[0]) * 0.5;
      v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      v30 = vmulq_f32(v29, v29);
      if (result.f32[0] > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0])* 0.5))
      {
        v31 = *a1;
        result = a1[1];
        v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        *a2 = v31;
        a2[1] = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_1 &,rf::AABB*,false>(float32x4_t *a1, float32x4_t *a2, uint64_t a3, char a4)
{
  float32x4_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  BOOL v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  BOOL v102;
  uint64_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  float32x4_t *v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  float v145;
  float32x4_t *v146;
  float32x4_t v147;
  uint64_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  float32x4_t *v161;
  float32x4_t *v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  uint64_t v173;
  unint64_t v174;
  float32x4_t *v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float v183;
  float32x4_t v184;
  float32x4_t v185;
  float v186;
  float32x4_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_1 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      v7 = vsubq_f32(a2[-1], a2[-2]);
      v7.i32[3] = 0;
      v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      v9 = vmulq_f32(v8, v8);
      v10 = vsubq_f32(a1[1], *a1);
      v10.i32[3] = 0;
      v11 = vmaxnmq_f32(v10, (float32x4_t)0);
      v12 = vmulq_f32(v11, v11);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5))
      {
        v14 = *a1;
        v13 = a1[1];
        v15 = a2[-1];
        *a1 = *v6;
        a1[1] = v15;
        *v6 = v14;
        a2[-1] = v13;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v16 = a1 + 4;
      v17 = a1 + 6;
      if (&a1[6] == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v21 = *v17;
    v20 = v17[1];
    v22 = vsubq_f32(v20, *v17);
    v22.i32[3] = 0;
    v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    v24 = vmulq_f32(v23, v23);
    v25 = vsubq_f32(v16[1], *v16);
    v25.i32[3] = 0;
    v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0])* 0.5;
    v27 = vmaxnmq_f32(v25, (float32x4_t)0);
    v28 = vmulq_f32(v27, v27);
    if (v26 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0])* 0.5))
    {
      v29 = v18;
      while (1)
      {
        v30 = (float32x4_t *)((char *)a1 + v29);
        v31 = *(float32x4_t *)((char *)a1 + v29 + 80);
        v30[6] = *(float32x4_t *)((char *)a1 + v29 + 64);
        v30[7] = v31;
        if (v29 == -64)
          break;
        v32 = vsubq_f32(v30[3], v30[2]);
        v32.i32[3] = 0;
        v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        v34 = vmulq_f32(v33, v33);
        v29 -= 32;
        if (v26 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5))
        {
          v35 = (float32x4_t *)((char *)a1 + v29 + 96);
          goto LABEL_12;
        }
      }
      v35 = a1;
LABEL_12:
      *v35 = v21;
      v35[1] = v20;
      if (++v19 == 8)
        return &v17[2] == a2;
    }
    v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2)
      return 1;
  }
}

uint64_t std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(uint64_t a1, id *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)(a1 + 128) = a2[16];
  return a1;
}

uint64_t std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 144);
      v9 = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v7 - 128) = *(_OWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 112) = v9;
      *(_OWORD *)(v7 - 144) = v8;
      v10 = *(_OWORD *)(a3 - 96);
      v11 = *(_OWORD *)(a3 - 80);
      v12 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 48) = v12;
      *(_OWORD *)(v7 - 96) = v10;
      *(_OWORD *)(v7 - 80) = v11;
      *(_BYTE *)(v7 - 32) = 0;
      *(_BYTE *)(v7 - 24) = 0;
      if (*(_BYTE *)(a3 - 24))
      {
        v13 = *(_QWORD *)(a3 - 32);
        *(_QWORD *)(a3 - 32) = 0;
        *(_QWORD *)(v7 - 32) = v13;
        *(_BYTE *)(v7 - 24) = 1;
      }
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v19 + 1) - 144;
      *((_QWORD *)&v19 + 1) -= 144;
      a3 -= 144;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 120))

    v1 += 144;
  }
}

uint64_t std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<rf::data_flow::EnvironmentProbe>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<rf::data_flow::EnvironmentProbe>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 144;
    if (*(_BYTE *)(v2 - 24))
    {

      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
}

_QWORD *RESharedPtr<REAsset>::~RESharedPtr(_QWORD *a1)
{
  if (*a1)
    RERelease();
  return a1;
}

void std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(id *location, void *a2, unsigned __int8 a3)
{
  if (*((unsigned __int8 *)location + 8) == a3)
  {
    if (*((_BYTE *)location + 8))
      objc_storeStrong(location, a2);
  }
  else if (*((_BYTE *)location + 8))
  {

    *((_BYTE *)location + 8) = 0;
  }
  else
  {
    *location = a2;
    *((_BYTE *)location + 8) = 1;
  }
}

uint64_t std::__split_buffer<RESharedPtr<REEntity>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    RESharedPtr<REEntity>::~RESharedPtr((_QWORD *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *RESharedPtr<REEntity>::~RESharedPtr(_QWORD *a1)
{
  if (*a1)
    RERelease();
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      RESharedPtr<REEntity>::~RESharedPtr(v2 + 6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(int a1, id *__p)
{
  id *v2;
  id *v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (id *)*v2;
      if (*((_BYTE *)v2 + 168))

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v25 = *(_QWORD **)a2;
    else
      v25 = (_QWORD *)a2;
    v7 = ((*v25 >> 2) + (*v25 << 6) + v25[1] + 2654435769) ^ *v25;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v7;
  v14 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_39:
    *v22 = v12;
    goto LABEL_40;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_2277888E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v31 = *(_QWORD **)a2;
    else
      v31 = (_QWORD *)a2;
    v7 = ((*v31 >> 2) + (*v31 << 6) + v31[1] + 2654435769) ^ *v31;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0xC0uLL);
  v16 = v15;
  *v15 = 0;
  v15[1] = v7;
  v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v17;
  v18 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v15 + 7) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v15 + 8) = v18;
  *((_OWORD *)v15 + 9) = *(_OWORD *)(a3 + 128);
  v19 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v15 + 4) = v19;
  v20 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v15 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v15 + 6) = v20;
  *((_BYTE *)v15 + 160) = 0;
  *((_BYTE *)v15 + 168) = 0;
  if (*(_BYTE *)(a3 + 152))
  {
    v21 = *(_QWORD *)(a3 + 144);
    *(_QWORD *)(a3 + 144) = 0;
    v15[20] = v21;
    *((_BYTE *)v15 + 168) = 1;
  }
  v15[22] = *(_QWORD *)(a3 + 160);
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v8 || (float)(v23 * (float)v8) < v22)
  {
    v24 = 1;
    if (v8 >= 3)
      v24 = (v8 & (v8 - 1)) != 0;
    v25 = v24 | (2 * v8);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v27);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v29)
  {
    *v16 = *v29;
LABEL_41:
    *v29 = v16;
    goto LABEL_42;
  }
  *v16 = *v14;
  *v14 = v16;
  *(_QWORD *)(v28 + 8 * v3) = v14;
  if (*v16)
  {
    v30 = *(_QWORD *)(*v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v30 >= v8)
        v30 %= v8;
    }
    else
    {
      v30 &= v8 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_227788BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  id *v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      RESharedPtr<REEntity>::~RESharedPtr(v1 + 6);
    operator delete(v1);
  }
}

_QWORD *std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_227788D7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_227788EF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t isInputMesh(ARAnchor *a1)
{
  ARAnchor *v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_227788F40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EFD7680;
  return result;
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EFD7680;
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  id **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  rf::data_flow::RFUUID *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  rf::data_flow::RFUUID *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  rf *v24;
  NSObject *v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  id v36[2];
  char v37;
  uint64_t v38;
  id **v39;
  _QWORD *v40;
  void *__p[2];
  char v42;
  _BYTE v43[16];
  _QWORD v44[3];
  uint64_t v45;
  id *v46;
  char v47;
  uint64_t (*v48)(ARAnchor *);
  uint64_t v49;
  id **v50;
  char v51;
  __int128 v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  char v59;
  id v60;
  uint64_t v61;
  char v62;
  id v63;
  char v64;
  id v65;
  char v66;
  id v67;
  char v68;
  id v69;
  char v70;
  _BYTE buf[12];
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v36[0] = v3;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 816) = 0;
  *(_QWORD *)(a2 + 832) = 0;
  *(_QWORD *)(a2 + 824) = 0;
  *(_BYTE *)(a2 + 976) = 0;
  *(_BYTE *)(a2 + 992) = 0;
  *(_BYTE *)(a2 + 996) = 0;
  *(_BYTE *)(a2 + 1000) = 0;
  *(_BYTE *)(a2 + 1004) = 0;
  *(_BYTE *)(a2 + 1008) = 0;
  *(_BYTE *)(a2 + 1012) = 0;
  *(_BYTE *)(a2 + 1016) = 0;
  *(_BYTE *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(_BYTE *)(a2 + 1026) = 0;
  *(_BYTE *)(a2 + 1028) = 0;
  *(_BYTE *)(a2 + 1032) = 0;
  *(_BYTE *)(a2 + 1040) = 0;
  *(_BYTE *)(a2 + 1064) = 0;
  *(_BYTE *)(a2 + 1072) = 0;
  *(_BYTE *)(a2 + 1088) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_BYTE *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  v29 = a2;
  v44[2] = 0;
  v45 = objc_msgSend(v3, "count");
  v46 = v36;
  v47 = 1;
  v48 = isInputMesh;
  LOBYTE(v49) = 0;
  v51 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v44);
  v4 = v49;
  v5 = v50;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v44);
  v35 = 0;
  v34 = 0uLL;
  *((_QWORD *)&v52 + 1) = v5;
  v53 = v44;
  v31 = v45;
  if (v45 != v4)
  {
    v6 = v4;
    v7 = 0;
    v8 = v6;
    do
    {
      *(_QWORD *)&v52 = v6 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v53, (uint64_t)&v52);
      ++v7;
      v6 = v52;
    }
    while (v31 != (_QWORD)v52);
    v36[1] = &v34;
    v37 = 0;
    std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](&v34, v7);
    v32 = 0;
    v38 = v8;
    v39 = v5;
    v40 = v44;
    v30 = *((_QWORD *)&v34 + 1);
    do
    {
      objc_msgSend(**v39, "objectAtIndexedSubscript:", (int)v8);
      v33 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "identifier");
      v9 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
      rf::data_flow::RFUUID::copy(v9, (uint64_t)buf);
      v10 = v75;
      if (!v75)
      {
        v27 = buf;
        if (BYTE2(v73))
          v27 = *(_QWORD **)buf;
        v10 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
        v75 = v10;
      }
      objc_msgSend(v33, "geometry");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "vertices");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "count");
      objc_msgSend(v33, "geometry");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "faces");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "count");
      objc_msgSend(v33, "geometry");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "classification");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "count");
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v43, 7525, v10);

      if (re::internal::enableSignposts(0, 0))
      {
        objc_msgSend(v33, "identifier");
        v17 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
        rf::data_flow::RFUUID::copy(v17, (uint64_t)buf);
        if (!v75)
        {
          v28 = buf;
          if (BYTE2(v73))
            v28 = *(_QWORD **)buf;
          v75 = ((*v28 >> 2) + (*v28 << 6) + v28[1] + 2654435769) ^ *v28;
        }
        objc_msgSend(v33, "geometry");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "vertices");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "count");
        objc_msgSend(v33, "geometry");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "faces");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "count");
        objc_msgSend(v33, "geometry");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "classification");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "count");
        kdebug_trace();

      }
      rf::helpers::createInputMeshFromARMeshAnchor(v33, 0, (uint64_t)&v52);
      rf::realityFusionLogObject(v24);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v52, __p);
        v26 = __p;
        if (v42 < 0)
          v26 = (void **)__p[0];
        if (!v56 || !v59 || !v62)
          std::__throw_bad_optional_access[abi:ne180100]();
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v26;
        v72 = 2048;
        v73 = v55;
        v74 = 2048;
        v75 = v58;
        v76 = 2048;
        v77 = v61;
        _os_log_impl(&dword_227777000, v25, OS_LOG_TYPE_DEFAULT, "RFARMeshServiceDelegate: Adding mesh %s %ld %ld %ld", buf, 0x2Au);
        if (v42 < 0)
          operator delete(__p[0]);
      }

      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v43);
      std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v30 + v32, &v52);
      if (v70)

      if (v68)
      if (v66)

      if (v64)
      if (v62)

      if (v59)
      if (v56)

      v38 = v8 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v40, (uint64_t)&v38);
      v8 = v38;
      v32 += 336;
    }
    while (v31 != v38);
    *((_QWORD *)&v34 + 1) = v30 + v32;
  }
  std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate((void **)v29);
  *(_OWORD *)v29 = v34;
  *(_QWORD *)(v29 + 16) = v35;
  v35 = 0;
  v34 = 0uLL;
  *(_QWORD *)&v52 = &v34;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);

}

void sub_2277895D4(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  rf::data_flow::provider::InputData::~InputData(a3);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  double result;
  __int128 v3;

  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  void *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)a2; v2 != i; *(_QWORD *)a2 = i)
  {
    objc_msgSend(***(id ***)(a2 + 8), "objectAtIndexedSubscript:", (int)i);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if ((v7 & 1) != 0)
      break;
    i = *(_QWORD *)a2 + 1;
  }
}

void sub_2277898E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xC30C30C30C30C4)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[336 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(336 * a2);
}

__n128 std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v7 = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = 0;
    *(_QWORD *)(a1 + 112) = v7;
    result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 120) = result;
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    v8 = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 18) = 0;
    *(_QWORD *)(a1 + 144) = v8;
    result = *(__n128 *)((char *)a2 + 152);
    *(__n128 *)(a1 + 152) = result;
    *(_BYTE *)(a1 + 168) = 1;
  }
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    v9 = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = 0;
    *(_QWORD *)(a1 + 176) = v9;
    result = *(__n128 *)((char *)a2 + 184);
    *(__n128 *)(a1 + 184) = result;
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    v10 = *((_QWORD *)a2 + 26);
    *((_QWORD *)a2 + 26) = 0;
    *(_QWORD *)(a1 + 208) = v10;
    result = *(__n128 *)((char *)a2 + 216);
    *(__n128 *)(a1 + 216) = result;
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    v11 = *((_QWORD *)a2 + 30);
    *((_QWORD *)a2 + 30) = 0;
    *(_QWORD *)(a1 + 240) = v11;
    result = *(__n128 *)((char *)a2 + 248);
    *(__n128 *)(a1 + 248) = result;
    *(_BYTE *)(a1 + 264) = 1;
  }
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*((_BYTE *)a2 + 296))
  {
    v12 = *((_QWORD *)a2 + 34);
    *((_QWORD *)a2 + 34) = 0;
    *(_QWORD *)(a1 + 272) = v12;
    result = *(__n128 *)((char *)a2 + 280);
    *(__n128 *)(a1 + 280) = result;
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  if (*((_BYTE *)a2 + 328))
  {
    v13 = *((_QWORD *)a2 + 38);
    *((_QWORD *)a2 + 38) = 0;
    *(_QWORD *)(a1 + 304) = v13;
    result = *(__n128 *)((char *)a2 + 312);
    *(__n128 *)(a1 + 312) = result;
    *(_BYTE *)(a1 + 328) = 1;
  }
  return result;
}

void rf::data_flow::RFUUID::copy(rf::data_flow::RFUUID *this@<X0>, uint64_t a2@<X8>)
{
  rf::data_flow::RFUUID *v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  v5 = 0uLL;
  -[rf::data_flow::RFUUID getUUIDBytes:](v4, "getUUIDBytes:", &v5);
  *(_OWORD *)a2 = v5;

}

void sub_227789B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

re::internal::AriadneSignpostScopeGuard *re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard(re::internal::AriadneSignpostScopeGuard *this, int a2, uint64_t a3)
{
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  return this;
}

void re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard(re::internal::AriadneSignpostScopeGuard *this)
{
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
}

void std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate(void **a1)
{
  id *v1;
  id *v3;
  void *v4;

  v1 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        rf::data_flow::provider::InputMesh::~InputMesh(v3 - 42);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EFD7710;
  return result;
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EFD7710;
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  id **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  rf::data_flow::RFUUID *v28;
  rf::data_flow::RFUUID *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  id v34[2];
  char v35;
  uint64_t v36;
  id **v37;
  _QWORD *v38;
  _BYTE v39[16];
  _QWORD v40[3];
  uint64_t v41;
  id *v42;
  char v43;
  uint64_t (*v44)(ARAnchor *);
  uint64_t v45;
  id **v46;
  char v47;
  __int128 v48;
  _QWORD *v49;
  id v50;
  char v51;
  id v52;
  char v53;
  id v54;
  char v55;
  id v56;
  char v57;
  id v58;
  char v59;
  id v60;
  char v61;
  id v62;
  char v63;
  _QWORD v64[2];
  char v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v34[0] = v3;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 816) = 0;
  *(_QWORD *)(a2 + 832) = 0;
  *(_QWORD *)(a2 + 824) = 0;
  *(_BYTE *)(a2 + 976) = 0;
  *(_BYTE *)(a2 + 992) = 0;
  *(_BYTE *)(a2 + 996) = 0;
  *(_BYTE *)(a2 + 1000) = 0;
  *(_BYTE *)(a2 + 1004) = 0;
  *(_BYTE *)(a2 + 1008) = 0;
  *(_BYTE *)(a2 + 1012) = 0;
  *(_BYTE *)(a2 + 1016) = 0;
  *(_BYTE *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(_BYTE *)(a2 + 1026) = 0;
  *(_BYTE *)(a2 + 1028) = 0;
  *(_BYTE *)(a2 + 1032) = 0;
  *(_BYTE *)(a2 + 1040) = 0;
  *(_BYTE *)(a2 + 1064) = 0;
  *(_BYTE *)(a2 + 1072) = 0;
  *(_BYTE *)(a2 + 1088) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_BYTE *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  v25 = a2;
  v40[2] = 0;
  v41 = objc_msgSend(v3, "count");
  v42 = v34;
  v43 = 1;
  v44 = isInputMesh;
  LOBYTE(v45) = 0;
  v47 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v40);
  v4 = v45;
  v5 = v46;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v40);
  v33 = 0;
  v32 = 0uLL;
  *((_QWORD *)&v48 + 1) = v5;
  v49 = v40;
  v30 = v41;
  if (v41 != v4)
  {
    v6 = v4;
    v7 = 0;
    v8 = v6;
    do
    {
      *(_QWORD *)&v48 = v6 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v49, (uint64_t)&v48);
      ++v7;
      v6 = v48;
    }
    while (v30 != (_QWORD)v48);
    v34[1] = &v32;
    v35 = 0;
    std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](&v32, v7);
    v31 = 0;
    v36 = v8;
    v37 = v5;
    v38 = v40;
    v26 = *((_QWORD *)&v32 + 1);
    do
    {
      v27 = v8;
      objc_msgSend(**v37, "objectAtIndexedSubscript:", (int)v8);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v28 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
      rf::data_flow::RFUUID::copy(v28, (uint64_t)v64);
      v10 = v66;
      if (!v66)
      {
        v23 = v64;
        if (v65)
          v23 = (_QWORD *)v64[0];
        v10 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
        v66 = v10;
      }
      objc_msgSend(v9, "geometry");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "vertices");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "count");
      objc_msgSend(v9, "geometry");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "faces");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "count");
      objc_msgSend(v9, "geometry");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "classification");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "count");
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 7525, v10);

      if (re::internal::enableSignposts(0, 0))
      {
        objc_msgSend(v9, "identifier");
        v29 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
        rf::data_flow::RFUUID::copy(v29, (uint64_t)v64);
        if (!v66)
        {
          v24 = v64;
          if (v65)
            v24 = (_QWORD *)v64[0];
          v66 = ((*v24 >> 2) + (*v24 << 6) + v24[1] + 2654435769) ^ *v24;
        }
        objc_msgSend(v9, "geometry");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "vertices");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "count");
        objc_msgSend(v9, "geometry");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "faces");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "count");
        objc_msgSend(v9, "geometry");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "classification");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "count");
        kdebug_trace();

      }
      rf::helpers::createInputMeshFromARMeshAnchor(v9, 0, (uint64_t)&v48);
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);

      std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v26 + v31, &v48);
      if (v63)

      if (v61)
      if (v59)

      if (v57)
      if (v55)

      if (v53)
      if (v51)

      v36 = v27 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v38, (uint64_t)&v36);
      v8 = v36;
      v31 += 336;
    }
    while (v30 != v36);
    *((_QWORD *)&v32 + 1) = v26 + v31;
  }
  std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate((void **)(v25 + 24));
  *(_OWORD *)(v25 + 24) = v32;
  *(_QWORD *)(v25 + 40) = v33;
  v33 = 0;
  v32 = 0uLL;
  *(_QWORD *)&v48 = &v32;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);

}

void sub_22778A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&a19);
  rf::data_flow::provider::InputData::~InputData(a9);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  double result;
  __int128 v3;

  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  void *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)a2; v2 != i; *(_QWORD *)a2 = i)
  {
    objc_msgSend(***(id ***)(a2 + 8), "objectAtIndexedSubscript:", (int)i);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if ((v7 & 1) != 0)
      break;
    i = *(_QWORD *)a2 + 1;
  }
}

void sub_22778A4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EFD7790;
  return result;
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EFD7790;
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  rf::data_flow::RFUUID *v18;
  rf *v19;
  NSObject *v20;
  void **v21;
  _OWORD *v22;
  __int128 v23;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  rf::data_flow::RFUUID *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  id **v36;
  _QWORD *v37;
  _QWORD v38[3];
  uint64_t v39;
  id *v40;
  char v41;
  uint64_t (*v42)(ARAnchor *);
  char *v43;
  void *v44;
  char v45;
  _OWORD v46[2];
  uint8_t buf[4];
  void **v48;
  void *v49[2];
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v34 = v3;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 816) = 0;
  *(_QWORD *)(a2 + 832) = 0;
  *(_QWORD *)(a2 + 824) = 0;
  *(_BYTE *)(a2 + 976) = 0;
  *(_BYTE *)(a2 + 992) = 0;
  *(_BYTE *)(a2 + 996) = 0;
  *(_BYTE *)(a2 + 1000) = 0;
  *(_BYTE *)(a2 + 1004) = 0;
  *(_BYTE *)(a2 + 1008) = 0;
  *(_BYTE *)(a2 + 1012) = 0;
  *(_BYTE *)(a2 + 1016) = 0;
  *(_BYTE *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(_BYTE *)(a2 + 1026) = 0;
  *(_BYTE *)(a2 + 1028) = 0;
  *(_BYTE *)(a2 + 1032) = 0;
  *(_BYTE *)(a2 + 1040) = 0;
  *(_BYTE *)(a2 + 1064) = 0;
  *(_BYTE *)(a2 + 1072) = 0;
  *(_BYTE *)(a2 + 1088) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_BYTE *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  v38[2] = 0;
  v39 = objc_msgSend(v3, "count");
  v40 = &v34;
  v41 = 1;
  v42 = isInputMesh;
  LOBYTE(v43) = 0;
  v45 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v38);
  v5 = v43;
  v4 = v44;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v38);
  v6 = (char *)v39;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v49[1] = v4;
  v50 = v38;
  if ((char *)v39 == v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = 0;
    v11 = v5;
    do
    {
      v49[0] = v11 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v50, (uint64_t)v49);
      ++v10;
      v11 = (char *)v49[0];
    }
    while (v6 != v49[0]);
    v29 = v6;
    std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](&v31, v10);
    v12 = 0;
    v35 = v5;
    v36 = (id **)v4;
    v37 = v38;
    v30 = v32;
    do
    {
      objc_msgSend(**v36, "objectAtIndexedSubscript:", (int)v5);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      if (re::internal::enableSignposts(0, 0))
      {
        objc_msgSend(v13, "identifier");
        v28 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
        rf::data_flow::RFUUID::copy(v28, (uint64_t)v49);
        if (!v51)
        {
          v24 = v49;
          if ((_BYTE)v50)
            v24 = (void **)v49[0];
          v51 = ((unint64_t)v24[1] + 64 * (_QWORD)*v24 + ((unint64_t)*v24 >> 2) + 2654435769u) ^ (unint64_t)*v24;
        }
        objc_msgSend(v13, "geometry");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "vertices");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "count");
        objc_msgSend(v13, "geometry");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "faces");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "count");
        objc_msgSend(v13, "geometry");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "classification");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "count");
        kdebug_trace();

      }
      objc_msgSend(v13, "identifier");
      v18 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
      rf::data_flow::RFUUID::copy(v18, (uint64_t)v46);

      rf::realityFusionLogObject(v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v46, v49);
        v21 = v49;
        if (SHIBYTE(v50) < 0)
          v21 = (void **)v49[0];
        *(_DWORD *)buf = 136315138;
        v48 = v21;
        _os_log_impl(&dword_227777000, v20, OS_LOG_TYPE_DEFAULT, "RFARMeshServiceDelegate: Removing mesh %s", buf, 0xCu);
        if (SHIBYTE(v50) < 0)
          operator delete(v49[0]);
      }

      v22 = (_OWORD *)(v30 + v12);
      v23 = v46[1];
      *v22 = v46[0];
      v22[1] = v23;
      v35 = v5 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v37, (uint64_t)&v35);
      v5 = v35;
      v12 += 32;
    }
    while (v29 != v35);
    v7 = v31;
    v9 = v30 + v12;
    v8 = v33;
  }
  v25 = v34;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v8;

}

void sub_22778A998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p)
    operator delete(__p);
  rf::data_flow::provider::InputData::~InputData(a10);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  double result;
  __int128 v3;

  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  void *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)a2; v2 != i; *(_QWORD *)a2 = i)
  {
    objc_msgSend(***(id ***)(a2 + 8), "objectAtIndexedSubscript:", (int)i);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if ((v7 & 1) != 0)
      break;
    i = *(_QWORD *)a2 + 1;
  }
}

void sub_22778AB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void rf::synthetic::getMeshPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  unint64_t v1;
  void **v2;
  void *__p[2];
  unsigned __int8 v4;

  rf::data_flow::RFUUID::string(a1, __p);
  v1 = v4;
  if ((v4 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v4 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  for (; v1; --v1)
  {
    if (*(_BYTE *)v2 == 45)
      *(_BYTE *)v2 = 95;
    v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0)
    operator delete(__p[0]);
}

void sub_22778AC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::synthetic::getAnchorPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  unint64_t v1;
  void **v2;
  void *__p[2];
  unsigned __int8 v4;

  rf::data_flow::RFUUID::string(a1, __p);
  v1 = v4;
  if ((v4 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v4 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  for (; v1; --v1)
  {
    if (*(_BYTE *)v2 == 45)
      *(_BYTE *)v2 = 95;
    v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0)
    operator delete(__p[0]);
}

void sub_22778AD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::synthetic::getObjectPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  unint64_t v1;
  void **v2;
  void *__p[2];
  unsigned __int8 v4;

  rf::data_flow::RFUUID::string(a1, __p);
  v1 = v4;
  if ((v4 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v4 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  for (; v1; --v1)
  {
    if (*(_BYTE *)v2 == 45)
      *(_BYTE *)v2 = 95;
    v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0)
    operator delete(__p[0]);
}

void sub_22778ADC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::query::QueryDatabasePerScene::updateUsingScene(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *EntitiesArray;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t LocalId;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  float32x4_t **v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  int v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  float32x4_t *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  float32x4_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t **v46;
  unint64_t v47;
  unint64_t Parent;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  float32x4_t **v54;
  float32x4_t *v55;
  unint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int128 v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v74;
  float32x4_t v79;
  uint64_t ChildCount;
  uint64_t j;
  void *v82;
  unsigned __int8 *v83;
  float32x4_t *v84;
  _QWORD *v86;
  _QWORD *v87;
  float32x4_t **v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  _OWORD v95[2];
  int v96;
  _OWORD v97[2];
  __int128 v98;
  __int128 v99;
  float32x4_t v100;
  float32x4_t v101;
  uuid_t uu;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  __int128 v106;
  float32x4_t v107;
  int v108;
  float32x4_t v109;
  float32x4_t v110;
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v109.i64[0] = a2;
  v104.i64[0] = (uint64_t)&v109;
  v2 = std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(a1, &v109, (uint64_t)&std::piecewise_construct, &v104);
  memset(v95, 0, sizeof(v95));
  v96 = 1065353216;
  v104.i64[0] = 0;
  v3 = std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>((float *)v95, 0, &v104);
  v3[4] = 0x3F8000003F800000;
  v3[5] = 1065353216;
  v3[6] = 0;
  v3[7] = 0x3F80000000000000;
  v3[8] = 0;
  v3[9] = 0;
  EntitiesArray = (_QWORD *)RESceneGetEntitiesArray();
  if (v5)
  {
    v88 = (float32x4_t **)(v2 + 5);
    v86 = &EntitiesArray[v5];
    while (1)
    {
      v87 = EntitiesArray;
      v6 = *EntitiesArray;
      if ((REIsEntityHidden() & 1) == 0)
        break;
LABEL_150:
      EntitiesArray = v87 + 1;
      if (v87 + 1 == v86)
        return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v95);
    }
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    v104.i64[0] = v6;
    std::deque<REEntity *>::push_back(v97, &v104);
    while (1)
    {
      if (!*((_QWORD *)&v98 + 1))
      {
        std::deque<REEntity *>::~deque[abi:ne180100](v97);
        goto LABEL_150;
      }
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v97[0] + 1) + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v98 & 0x1FF));
      *(_QWORD *)&v98 = v98 + 1;
      --*((_QWORD *)&v98 + 1);
      if ((unint64_t)v98 >= 0x400)
      {
        operator delete(**((void ***)&v97[0] + 1));
        *((_QWORD *)&v97[0] + 1) += 8;
        *(_QWORD *)&v98 = v98 - 512;
      }
      LocalId = REEntityGetLocalId();
      v103.i8[0] = 0;
      v103.i64[1] = 0;
      uuid_clear(uu);
      *(_QWORD *)uu = LocalId;
      v9 = v103.u64[1];
      if (!v103.i64[1])
      {
        v83 = uu;
        if (v103.i8[0])
          v83 = (unsigned __int8 *)LocalId;
        v9 = ((*(_QWORD *)v83 >> 2) + (*(_QWORD *)v83 << 6) + *((_QWORD *)v83 + 1) + 2654435769) ^ *(_QWORD *)v83;
        v103.i64[1] = v9;
      }
      v10 = (int8x8_t)v2[4];
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          v13 = v9;
          if (v9 >= *(_QWORD *)&v10)
            v13 = v9 % *(_QWORD *)&v10;
        }
        else
        {
          v13 = (*(_QWORD *)&v10 - 1) & v9;
        }
        v14 = *(float32x4_t ***)(v2[3] + 8 * v13);
        if (v14)
        {
          for (i = *v14; i; i = (float32x4_t *)i->i64[0])
          {
            v16 = i->u64[1];
            if (v16 == v9)
            {
              if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v2 + 7), (uint64_t)&i[1], (uint64_t)uu))
                goto LABEL_107;
            }
            else
            {
              if (v12 > 1)
              {
                if (v16 >= *(_QWORD *)&v10)
                  v16 %= *(_QWORD *)&v10;
              }
              else
              {
                v16 &= *(_QWORD *)&v10 - 1;
              }
              if (v16 != v13)
                break;
            }
          }
        }
      }
      RESharedPtr<REEntity>::fromGet(v7, (uint64_t *)&v104);
      v17 = v104.i64[0];
      v104.i64[0] = 0;
      v100 = 0u;
      RESharedPtr<REEntity>::~RESharedPtr(&v104);
      v109.i64[0] = v17;
      *(_QWORD *)&v99 = 0;
      v110 = v100;
      v111 = 0;
      v104 = *(float32x4_t *)uu;
      v105 = v103;
      v108 = -1;
      *(_QWORD *)&v106 = v17;
      if (v17)
        RERetain();
      v107 = v110;
      v108 = 0;
      v18 = v105.u64[1];
      if (!v105.i64[1])
      {
        v84 = &v104;
        if (v105.i8[0])
          v84 = (float32x4_t *)v104.i64[0];
        v18 = (((unint64_t)v84->i64[0] >> 2) + (v84->i64[0] << 6) + v84->i64[1] + 2654435769) ^ v84->i64[0];
        v105.i64[1] = v18;
      }
      v19 = v2[4];
      if (v19)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v20.i16[0] = vaddlv_u8(v20);
        v21 = v20.u32[0];
        if (v20.u32[0] > 1uLL)
        {
          v10 = (int8x8_t)v18;
          if (v18 >= v19)
            v10 = (int8x8_t)(v18 % v19);
        }
        else
        {
          v10 = (int8x8_t)((v19 - 1) & v18);
        }
        v22 = *(float32x4_t ***)(v2[3] + 8 * *(_QWORD *)&v10);
        if (v22)
        {
          for (i = *v22; i; i = (float32x4_t *)i->i64[0])
          {
            v23 = i->u64[1];
            if (v23 == v18)
            {
              if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v2 + 7), (uint64_t)&i[1], (uint64_t)&v104))
                goto LABEL_102;
            }
            else
            {
              if (v21 > 1)
              {
                if (v23 >= v19)
                  v23 %= v19;
              }
              else
              {
                v23 &= v19 - 1;
              }
              if (v23 != *(_QWORD *)&v10)
                break;
            }
          }
        }
      }
      v24 = (float32x4_t *)operator new(0x60uLL);
      i = v24;
      v24->i64[0] = 0;
      v24->i64[1] = v18;
      v25 = v105;
      v24[1] = v104;
      v24[2] = v25;
      v24[3].i8[0] = 0;
      v24[5].i32[0] = -1;
      v26 = v108;
      if (v108 != -1)
      {
        v24[3].i64[0] = v106;
        *(_QWORD *)&v106 = 0;
        v24[4] = v107;
        v24[5].i32[0] = v26;
      }
      v27 = (float)(unint64_t)(v2[6] + 1);
      v28 = *((float *)v2 + 14);
      if (!v19 || (float)(v28 * (float)v19) < v27)
        break;
LABEL_92:
      v45 = v2[3];
      v46 = *(float32x4_t ***)(v45 + 8 * *(_QWORD *)&v10);
      if (v46)
      {
        i->i64[0] = (uint64_t)*v46;
LABEL_100:
        *v46 = i;
        goto LABEL_101;
      }
      i->i64[0] = (uint64_t)*v88;
      *v88 = i;
      *(_QWORD *)(v45 + 8 * *(_QWORD *)&v10) = v88;
      if (i->i64[0])
      {
        v47 = *(_QWORD *)(i->i64[0] + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v47 >= v19)
            v47 %= v19;
        }
        else
        {
          v47 &= v19 - 1;
        }
        v46 = (float32x4_t **)(v2[3] + 8 * v47);
        goto LABEL_100;
      }
LABEL_101:
      ++v2[6];
LABEL_102:
      if (v108 != -1)
        RESharedPtr<REEntity>::~RESharedPtr(&v106);
      if (v111 != -1)
        RESharedPtr<REEntity>::~RESharedPtr(&v109);
      RESharedPtr<REEntity>::~RESharedPtr(&v99);
LABEL_107:
      if (i[5].i32[0])
        std::__throw_bad_variant_access[abi:ne180100]();
      Parent = REEntityGetParent();
      if (!*((_QWORD *)&v95[0] + 1))
        goto LABEL_152;
      v49 = 0x9DDFEA08EB382D69 * (((8 * Parent) + 8) ^ HIDWORD(Parent));
      v50 = 0x9DDFEA08EB382D69 * (HIDWORD(Parent) ^ (v49 >> 47) ^ v49);
      v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      v52 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v95 + 8));
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        v53 = v51;
        if (v51 >= *((_QWORD *)&v95[0] + 1))
          v53 = v51 % *((_QWORD *)&v95[0] + 1);
      }
      else
      {
        v53 = (*((_QWORD *)&v95[0] + 1) - 1) & v51;
      }
      v54 = *(float32x4_t ***)(*(_QWORD *)&v95[0] + 8 * v53);
      if (!v54 || (v55 = *v54) == 0)
LABEL_152:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      while (1)
      {
        v56 = v55->u64[1];
        if (v56 == v51)
          break;
        if (v52.u32[0] > 1uLL)
        {
          if (v56 >= *((_QWORD *)&v95[0] + 1))
            v56 %= *((_QWORD *)&v95[0] + 1);
        }
        else
        {
          v56 &= *((_QWORD *)&v95[0] + 1) - 1;
        }
        if (v56 != v53)
          goto LABEL_152;
LABEL_123:
        v55 = (float32x4_t *)v55->i64[0];
        if (!v55)
          goto LABEL_152;
      }
      if (v55[1].i64[0] != Parent)
        goto LABEL_123;
      v92 = v55[3];
      v93 = v55[2];
      v94 = v55[4];
      if (REEntityGetComponent())
      {
        RETransformComponentGetLocalSRT();
        v90 = v58;
        v91 = v57;
        v89 = v59;
      }
      else if (REEntityGetComponent())
      {
        REAnchorComponentGetWorldTransform();
        v104 = v60;
        v105 = v61;
        v106 = v62;
        v107 = v63;
        v109 = 0u;
        v99 = xmmword_2277EE900;
        v101 = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v104, (int32x4_t *)&v109, &v99, &v101);
        v90 = (float32x4_t)v99;
        v91 = v109;
        v89 = v101;
      }
      else
      {
        v89 = 0u;
        v90 = (float32x4_t)xmmword_2277EE900;
        v91 = (float32x4_t)xmmword_2277EEC70;
      }
      v104.i64[0] = v7;
      v64 = (float32x4_t *)std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>((float *)v95, v7, &v104);
      _Q7 = (int32x4_t)v92;
      v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q7, _Q7), (int8x16_t)v92, 0xCuLL);
      v67 = vnegq_f32(v92);
      v68 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), v67), v89, v66);
      v69 = (int32x4_t)vaddq_f32(v68, v68);
      v70 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v69, v69), (int8x16_t)v69, 0xCuLL);
      v71 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), (int8x16_t)v70, 0xCuLL), v67), v70, v66);
      _S3 = v90.i32[3];
      _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL), v67), v90, v66);
      v74 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), v90, v92, 3), v92, v90, 3);
      __asm { FMLA            S2, S3, V7.S[3] }
      v74.i32[3] = _Q2.i32[0];
      v64[2] = vmulq_f32(v93, v91);
      v64[3] = v74;
      v79 = vaddq_f32(v94, vmulq_f32(v93, vaddq_f32(vaddq_f32(v89, vmulq_laneq_f32(v70, v92, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v71, v71), (int8x16_t)v71, 0xCuLL))));
      v64[4] = v79;
      i[4] = v79;
      ChildCount = REEntityGetChildCount();
      if (ChildCount)
      {
        for (j = 0; j != ChildCount; ++j)
        {
          v104.i64[0] = REEntityGetChild();
          std::deque<REEntity *>::push_back(v97, &v104);
        }
      }
    }
    v29 = (v19 & (v19 - 1)) != 0;
    if (v19 < 3)
      v29 = 1;
    v30 = v29 | (2 * v19);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v19 = v2[4];
    if (*(_QWORD *)&prime > v19)
      goto LABEL_58;
    if (*(_QWORD *)&prime < v19)
    {
      v39 = vcvtps_u32_f32((float)(unint64_t)v2[6] / *((float *)v2 + 14));
      if (v19 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = v2[4];
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = (void *)v2[3];
          v2[3] = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          v2[4] = prime;
          do
            *(_QWORD *)(v2[3] + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = *v88;
          if (*v88)
          {
            v37 = v36->u64[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v2[3] + 8 * v37) = v88;
            v42 = (float32x4_t *)v36->i64[0];
            if (v36->i64[0])
            {
              do
              {
                v43 = v42->u64[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  v44 = v2[3];
                  if (!*(_QWORD *)(v44 + 8 * v43))
                  {
                    *(_QWORD *)(v44 + 8 * v43) = v36;
                    goto LABEL_83;
                  }
                  v36->i64[0] = v42->i64[0];
                  v42->i64[0] = **(_QWORD **)(v2[3] + 8 * v43);
                  **(_QWORD **)(v2[3] + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_83:
                v36 = v42;
                v42 = (float32x4_t *)v42->i64[0];
                v37 = v43;
              }
              while (v42);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_87;
        }
        v82 = (void *)v2[3];
        v2[3] = 0;
        if (v82)
          operator delete(v82);
        v19 = 0;
        v2[4] = 0;
      }
    }
LABEL_87:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v10 = (int8x8_t)(v18 % v19);
      else
        v10 = (int8x8_t)v18;
    }
    else
    {
      v10 = (int8x8_t)((v19 - 1) & v18);
    }
    goto LABEL_92;
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v95);
}

void sub_22778B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_22778BB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      if (*((_DWORD *)v2 + 20) != -1)
        RESharedPtr<REEntity>::~RESharedPtr(v2 + 6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x50uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[4] = 0x3F8000003F800000;
  i[5] = 1065353216;
  i[6] = 0;
  i[7] = 0x3F80000000000000;
  i[8] = 0;
  i[9] = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_22778C058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<REEntity *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REEntity *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<REEntity *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<REEntity **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<REEntity **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<REEntity **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<REEntity **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22778C3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<REEntity **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<REEntity **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t RESharedPtr<REEntity>::fromGet@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = result;
  *a2 = 0;
  if (result)
    result = RERetain();
  *a2 = v2;
  return result;
}

void sub_22778C8C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  RESharedPtr<REEntity>::~RESharedPtr(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  if (a1)
  {
    if (*((_DWORD *)__p + 20) != -1)
      RESharedPtr<REEntity>::~RESharedPtr(__p + 6);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t re::decomposeScaleRotationTranslation<float>(uint64_t result, int32x4_t *a2, _QWORD *a3, _OWORD *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  unsigned __int32 v42;
  float v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float v67;
  float v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;

  *a4 = *(_OWORD *)(result + 48);
  v4 = *(float32x4_t *)(result + 16);
  v5 = *(float32x4_t *)(result + 32);
  v6 = vmulq_f32(*(float32x4_t *)result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL)));
  v7 = -1.0;
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0] > 0.0)v7 = 1.0;
  v8 = vmulq_f32(*(float32x4_t *)result, *(float32x4_t *)result);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  v10 = vmulq_f32(v4, v4);
  v9.f32[0] = sqrtf(v9.f32[0]);
  v11 = vmulq_f32(v5, v5);
  v9.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v9.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v12 = (int32x4_t)vmulq_n_f32(v9, v7);
  *a2 = v12;
  v13 = v12.i64[1];
  v14 = (float32x4_t)vdupq_laneq_s32(v12, 2);
  v15 = v12.i64[0];
  v16 = vdivq_f32(*(float32x4_t *)result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 0));
  v17 = vdivq_f32(*(float32x4_t *)(result + 16), (float32x4_t)vdupq_lane_s32((int32x2_t)((__int128)__PAIR128__(v13, v15) >> 32), 0));
  v18 = (int32x4_t)vmulq_f32(v16, v16);
  v19 = vdivq_f32(*(float32x4_t *)(result + 32), v14);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_n_f32(v16, vmul_f32(v21, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v21, v21))).f32[0]);
  v23 = vmulq_f32(v22, v17);
  v24 = vmulq_f32(v22, v22);
  v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
  v26 = vsubq_f32(v17, vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))), v25).f32[0]));
  v27 = (int32x4_t)vmulq_f32(v26, v26);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
  v28 = vmulq_n_f32(v26, vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
  v29 = vmulq_f32(v22, v19);
  v30 = vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))), v25).f32[0]);
  v31 = vmulq_f32(v19, v28);
  v32 = vsubq_f32(v19, v30);
  v33 = vmulq_f32(v28, v28);
  v34 = vsubq_f32(v32, vmulq_n_f32(v28, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)))).f32[0]));
  v35 = (int32x4_t)vmulq_f32(v34, v34);
  v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
  *(float32x2_t *)v33.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
  *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)));
  v36 = vmulq_n_f32(v34, vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32))).f32[0]);
  v37 = (float)(v22.f32[0] + v28.f32[1]) + v36.f32[2];
  if (v37 >= 0.0)
  {
    v47 = sqrtf(v37 + 1.0);
    v48 = v47 + v47;
    v49 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47));
    v50 = vmul_f32(v49, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v49));
    v51.i32[0] = vmul_f32(v50, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v50)).u32[0];
    v43 = vmuls_lane_f32(v51.f32[0], (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), v36), 1);
    v44 = vmuls_n_f32(vsubq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2)).f32[0], v51.f32[0]);
    v52.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v28.f32).u32[0];
    v52.f32[1] = v48;
    v51.i32[1] = 0.25;
    v53 = vmul_f32(v52, v51);
  }
  else
  {
    if (v22.f32[0] >= v28.f32[1] && v22.f32[0] >= v36.f32[2])
    {
      v38 = sqrtf(v22.f32[0] + (float)((float)(1.0 - v28.f32[1]) - v36.f32[2]));
      *(float *)&v39 = v38 + v38;
      v40 = vrecpe_f32((float32x2_t)v39);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      v42 = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      v43 = *(float *)&v39 * 0.25;
      v44 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      v45 = (float32x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v28).u64[0];
      v28.i32[0] = vadd_f32(v45, *(float32x2_t *)v36.f32).u32[0];
      v46 = vsub_f32(v45, *(float32x2_t *)v36.f32);
LABEL_11:
      v28.i32[1] = v46.i32[1];
      v53 = vmul_n_f32(*(float32x2_t *)v28.f32, *(float *)&v42);
      goto LABEL_12;
    }
    v54 = 1.0 - v22.f32[0];
    if (v28.f32[1] >= v36.f32[2])
    {
      v67 = sqrtf(v28.f32[1] + (float)(v54 - v36.f32[2]));
      v68 = v67 + v67;
      v69 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67));
      v70 = vmul_f32(v69, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v69));
      v42 = vmul_f32(v70, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v70)).u32[0];
      v43 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      v44 = v68 * 0.25;
      v71 = (float32x2_t)vrev64_s32(*(int32x2_t *)v36.f32);
      v72 = (float32x2_t)vzip2q_s32((int32x4_t)v28, (int32x4_t)v22).u64[0];
      v28.i32[0] = vadd_f32(v71, v72).u32[0];
      v46 = vsub_f32(v71, v72);
      goto LABEL_11;
    }
    v55 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2);
    v56 = (float32x2_t)__PAIR64__(v22.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v54 - v28.f32[1]) + v36.f32[2])));
    v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 0);
    LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v36).u32[0];
    v59 = vsub_f32(*(float32x2_t *)v22.f32, v57);
    v57.i32[0] = 2.0;
    v57.i32[0] = vmul_f32(v56, v57).u32[0];
    v57.i32[1] = v59.i32[1];
    v60 = vrecpe_f32((float32x2_t)v57.u32[0]);
    v61 = vmul_f32(v60, vrecps_f32((float32x2_t)v57.u32[0], v60));
    v59.i32[0] = vmul_f32(v61, vrecps_f32((float32x2_t)v57.u32[0], v61)).u32[0];
    v43 = vmuls_n_f32(v58, v59.f32[0]);
    v44 = vmuls_lane_f32(v59.f32[0], (float32x2_t)*(_OWORD *)&vaddq_f32(v55, v36), 1);
    __asm { FMOV            V3.2S, #0.25 }
    _D3.i32[1] = v59.i32[0];
    v53 = vmul_f32(v57, _D3);
  }
LABEL_12:
  *a3 = __PAIR64__(LODWORD(v44), LODWORD(v43));
  a3[1] = v53;
  return result;
}

uint64_t std::deque<REEntity *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<REEntity **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<REEntity **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::DebugOptionConsumer(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  float v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  const void *v30;

  *(_QWORD *)a1 = &off_24EFD7810;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 60) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 128));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 448));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 768));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 1088));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 1408));
  *(_DWORD *)(a1 + 1728) = 0;
  v7 = atomic_load((unsigned __int8 *)&qword_253DC99F0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_253DC99F0))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v30, (const UInt8 *)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.enableRoomDebugVisualization");
    v19 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v30, (const UInt8 *)__p);
    if (v19 <= 0x100)
      v20 = 0;
    else
      v20 = v19;
    if (v27 < 0)
      operator delete(__p[0]);
    rf::UserDefaults::~UserDefaults(&v30);
    if (v29 < 0)
      operator delete(v28[0]);
    _MergedGlobals_0 = v20 != 0;
    __cxa_guard_release(&qword_253DC99F0);
  }
  *(_BYTE *)(a1 + 64) |= _MergedGlobals_0;
  v8 = *(int *)(a1 + 68);
  v9 = atomic_load((unsigned __int8 *)&qword_253DC9A00);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9A00))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v30, (const UInt8 *)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.roomVisualizationMode");
    v21 = rf::UserDefaults::intValue((CFStringRef *)&v30, (const UInt8 *)__p);
    if (v22)
      v23 = v21;
    else
      v23 = v8;
    if (v27 < 0)
      operator delete(__p[0]);
    rf::UserDefaults::~UserDefaults(&v30);
    if (v29 < 0)
      operator delete(v28[0]);
    qword_253DC99F8 = v23;
    __cxa_guard_release(&qword_253DC9A00);
  }
  v10 = qword_253DC99F8;
  if (qword_253DC99F8 >= 2)
    v10 = v8;
  *(_DWORD *)(a1 + 68) = v10;
  v11 = atomic_load((unsigned __int8 *)&qword_253DC9A08);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9A08))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v30, (const UInt8 *)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.roomClassificationAlpha");
    v24 = rf::UserDefaults::floatValue((CFStringRef *)&v30, (const UInt8 *)__p);
    if ((v24 & 0xFF00000000) != 0)
      v25 = *(float *)&v24;
    else
      v25 = 0.1;
    if (v27 < 0)
      operator delete(__p[0]);
    rf::UserDefaults::~UserDefaults(&v30);
    if (v29 < 0)
      operator delete(v28[0]);
    dword_253DC99EC = LODWORD(v25);
    __cxa_guard_release(&qword_253DC9A08);
  }
  v12 = 1.0;
  if (*(float *)&dword_253DC99EC <= 1.0)
    v12 = *(float *)&dword_253DC99EC;
  LODWORD(v13) = 0;
  if (*(float *)&dword_253DC99EC < 0.0)
    v12 = 0.0;
  v14 = *(_QWORD *)(a1 + 992);
  if (*(_QWORD *)(a1 + 1000) != v14)
  {
    v15 = 0;
    v16 = 12;
    do
    {
      *(float *)(v14 + v16) = v12;
      *(float *)(a1 + 1036) = v12;
      ++v15;
      v14 = *(_QWORD *)(a1 + 992);
      v16 += 16;
    }
    while (v15 < (*(_QWORD *)(a1 + 1000) - v14) >> 4);
  }
  *(_QWORD *)&v17 = 1061997773;
  DWORD1(v13) = 1061997773;
  DWORD2(v17) = 0;
  *((float *)&v17 + 3) = v12;
  *(_OWORD *)(a1 + 1184) = v17;
  DWORD2(v13) = 0;
  *((float *)&v13 + 3) = v12;
  *(_OWORD *)(a1 + 1504) = v13;
  *(_BYTE *)(a1 + 1730) = 1;
  return a1;
}

void sub_22778D180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22)
{
  _QWORD *v22;
  _QWORD *v23;
  rf::data_flow::consumer::MeshVisualizer *v24;
  rf::data_flow::consumer::MeshVisualizer *v25;
  rf::data_flow::consumer::MeshVisualizer *v26;
  rf::data_flow::consumer::MeshVisualizer *v27;
  rf::data_flow::consumer::MeshVisualizer *v28;

  if (a15 < 0)
    operator delete(__p);
  rf::UserDefaults::~UserDefaults(&a22);
  if (a21 < 0)
    operator delete(a16);
  __cxa_guard_abort(&qword_253DC9A08);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v28);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v27);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v26);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v25);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v24);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 14);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 13);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 12);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 11);
  RESharedPtr<REAsset>::~RESharedPtr(v23);
  _Unwind_Resume(a1);
}

__n128 rf::data_flow::consumer::DebugOptionConsumer::setRoomVisualizationClassificationAlpha(__n128 *this, float a2)
{
  float v2;
  BOOL v3;
  __n128 result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  result.n128_u32[0] = 0;
  if (v3)
    v2 = 0.0;
  v5 = this[62].n128_u64[0];
  if (this[62].n128_u64[1] != v5)
  {
    v6 = 0;
    v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v2;
      this[64].n128_f32[3] = v2;
      ++v6;
      v5 = this[62].n128_u64[0];
      v7 += 16;
    }
    while (v6 < (uint64_t)(this[62].n128_u64[1] - v5) >> 4);
  }
  v8.n128_u64[0] = 1061997773;
  result.n128_u32[1] = 1061997773;
  v8.n128_u32[2] = 0;
  v8.n128_f32[3] = v2;
  result.n128_u32[2] = 0;
  this[74] = v8;
  result.n128_f32[3] = v2;
  this[94] = result;
  this[108].n128_u8[2] = 1;
  return result;
}

void rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(rf::data_flow::consumer::MeshVisualizer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 6);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 5);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::data_flow::consumer::DebugOptionConsumer::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  rf::data_flow::consumer::MeshVisualizer *v15;
  rf::data_flow::consumer::MeshVisualizer *v16;
  unsigned int v17;
  uint64_t ComponentsOfClass;
  uint64_t v19;
  uint64_t v20;
  uint64_t AnchorIdentifier;
  uint64_t ComponentByClass;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  __int128 v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD **v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *i;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  __int128 *v52;
  char v53;
  uint64_t *v54;
  const unsigned __int8 *v55;
  const unsigned __int8 *v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *j;
  uint64_t **v74;
  uint64_t **k;
  uint64_t **m;
  _QWORD *n;
  uint64_t v78;
  uint64_t **ii;
  uint64_t **v80;
  uint64_t **jj;
  uint64_t **kk;
  _QWORD *mm;
  uint64_t v84;
  uint64_t **nn;
  uint64_t v86;
  float32x4_t *i1;
  uint64_t *v88;
  _QWORD *i2;
  _BYTE *v90;
  _QWORD *i3;
  _BYTE *v92;
  uint64_t *i4;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  BOOL v98;
  int v99;
  const rf::data_flow::consumer::Mesh *v100;
  rf::data_flow::consumer::MeshVisualizer *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  rf::data_flow::consumer::MeshVisualizer *v109;
  rf::data_flow::consumer::MeshVisualizer *v110;
  rf::data_flow::consumer::MeshVisualizer *v111;
  rf::data_flow::consumer::MeshVisualizer *v112;
  rf::data_flow::consumer::MeshVisualizer *v113;
  void *__p[2];
  __int128 v115;
  float v116;
  __int128 *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  char v130;
  uuid_t uu;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 32) && *(_BYTE *)(a2 + 16))
  {
    v4 = a1;
    v5 = *(_QWORD *)(a1 + 8);
    std::mutex::lock((std::mutex *)v5);
    if (!*(_BYTE *)(a2 + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    v6 = MEMORY[0x22E29DA08](*(_QWORD *)(a2 + 8));
    if (!*(_BYTE *)(a2 + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    v7 = v6;
    v8 = MEMORY[0x22E29DA38](*(_QWORD *)(a2 + 8));
    if (!v7)
      goto LABEL_263;
    v9 = v8;
    if (!v8 || !RERenderManagerIsBeingUpdated())
      goto LABEL_263;
    if (!*(_QWORD *)(v4 + 88))
    {
      *(_QWORD *)&v118 = REAssetManagerCreateAssetHandle();
      v10 = *(_QWORD *)(v4 + 96);
      *(_QWORD *)(v4 + 96) = v118;
      if (v10)
        RERelease();
      *(_QWORD *)&v118 = 0;
      RESharedPtr<REAsset>::~RESharedPtr(&v118);
      REAssetHandleLoadAsync();
      *(_QWORD *)&v118 = REAssetManagerMaterialMemoryAssetCreate();
      v11 = *(_QWORD *)(v4 + 88);
      *(_QWORD *)(v4 + 88) = v118;
      if (v11)
        RERelease();
      *(_QWORD *)&v118 = 0;
      RESharedPtr<REAsset>::~RESharedPtr(&v118);
      REAssetHandleLoadAsync();
    }
    if (!*(_QWORD *)(v4 + 104))
    {
      *(_QWORD *)&v118 = REAssetManagerCreateAssetHandle();
      v12 = *(_QWORD *)(v4 + 112);
      *(_QWORD *)(v4 + 112) = v118;
      if (v12)
        RERelease();
      *(_QWORD *)&v118 = 0;
      RESharedPtr<REAsset>::~RESharedPtr(&v118);
      REAssetHandleLoadAsync();
      *(_QWORD *)&v118 = REAssetManagerMaterialMemoryAssetCreate();
      v13 = *(_QWORD *)(v4 + 104);
      *(_QWORD *)(v4 + 104) = v118;
      if (v13)
        RERelease();
      *(_QWORD *)&v118 = 0;
      RESharedPtr<REAsset>::~RESharedPtr(&v118);
      REAssetHandleLoadAsync();
    }
    if (!*(_QWORD *)(v4 + 80))
    {
      *(_QWORD *)&v118 = REAssetManagerCreateAssetHandle();
      v14 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)(v4 + 80) = v118;
      if (v14)
        RERelease();
      *(_QWORD *)&v118 = 0;
      RESharedPtr<REAsset>::~RESharedPtr(&v118);
      if ((REAssetHandleIsLoaded() & 1) == 0)
        REAssetHandleLoadAsync();
    }
    v15 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
    rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 128);
    v16 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
    rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 448);
    v113 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 768);
    rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 768);
    *(_QWORD *)(v4 + 824) = 9;
    v112 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 1088);
    rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 1088);
    *(_QWORD *)(v4 + 1144) = 8;
    v111 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 1408);
    rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 1408);
    *(_QWORD *)(v4 + 1464) = 8;
    if (!*(_BYTE *)(v4 + 1731))
    {
      if (!REAssetHandleIsLoaded()
        || !REAssetHandleIsLoaded()
        || !REAssetHandleIsLoaded()
        || !REAssetHandleIsLoaded()
        || !REAssetHandleIsLoaded()
        || *(_DWORD *)(v4 + 192) != 2)
      {
        *(_BYTE *)(v4 + 1731) = 0;
        goto LABEL_263;
      }
      v98 = *(_DWORD *)(v4 + 512) == 2;
      *(_BYTE *)(v4 + 1731) = v98;
      if (!v98)
      {
LABEL_263:
        std::mutex::unlock((std::mutex *)v5);
        return;
      }
    }
    if (!*(_BYTE *)(a2 + 32))
      std::__throw_bad_optional_access[abi:ne180100]();
    v17 = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 2888);
    if (v17 > 4 || ((1 << v17) & 0x15) == 0)
    {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(v4 + 128);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(v4 + 448);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v113);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v112);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v111);
      *(_WORD *)(v4 + 1728) = 257;
      *(_BYTE *)(v4 + 1730) = 1;
      goto LABEL_263;
    }
    v102 = v4;
    if (!*(_BYTE *)(v4 + 16))
      goto LABEL_181;
    v105 = REPrimitiveRenderAddContext();
    REPrimitiveRenderSetShapeMaterial();
    v106 = REPrimitiveRenderAddContext();
    REPrimitiveRenderSetShapeMaterial();
    REAnchorComponentGetComponentType();
    ComponentsOfClass = RESceneGetComponentsOfClass();
    *(_OWORD *)__p = 0u;
    v115 = 0u;
    v116 = 1.0;
    v109 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
    v110 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
    if (v19)
    {
      v20 = ComponentsOfClass;
      v107 = ComponentsOfClass + 8 * v19;
      while (1)
      {
        AnchorIdentifier = REAnchorComponentGetAnchorIdentifier();
        LOBYTE(v132) = 0;
        *((_QWORD *)&v132 + 1) = 0;
        uuid_clear(uu);
        *(_QWORD *)uu = AnchorIdentifier;
        LOBYTE(v132) = 1;
        REComponentGetEntity();
        REAnchoringComponentGetComponentType();
        ComponentByClass = REEntityGetComponentByClass();
        v118 = *(_OWORD *)uu;
        v119 = v132;
        *(_QWORD *)&v120 = ComponentByClass;
        v23 = *((_QWORD *)&v132 + 1);
        if (!*((_QWORD *)&v132 + 1))
        {
          v52 = &v118;
          if ((_BYTE)v119)
            v52 = (__int128 *)v118;
          v23 = ((*(_QWORD *)v52 >> 2) + (*(_QWORD *)v52 << 6) + *((_QWORD *)v52 + 1) + 2654435769) ^ *(_QWORD *)v52;
          *((_QWORD *)&v119 + 1) = v23;
        }
        v24 = (unint64_t)__p[1];
        if (__p[1])
        {
          v25 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v25.i16[0] = vaddlv_u8(v25);
          v26 = v25.u32[0];
          if (v25.u32[0] > 1uLL)
          {
            v2 = v23;
            if ((void *)v23 >= __p[1])
              v2 = v23 % (unint64_t)__p[1];
          }
          else
          {
            v2 = ((unint64_t)__p[1] - 1) & v23;
          }
          v27 = (_QWORD *)*((_QWORD *)__p[0] + v2);
          if (v27)
          {
            v28 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v29 = v28[1];
                if (v29 == v23)
                {
                  if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)&v116, (uint64_t)(v28 + 2), (uint64_t)&v118))
                    goto LABEL_105;
                }
                else
                {
                  if (v26 > 1)
                  {
                    if ((void *)v29 >= __p[1])
                      v29 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v29 &= (unint64_t)__p[1] - 1;
                  }
                  if (v29 != v2)
                    break;
                }
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
          }
        }
        v30 = operator new(0x38uLL);
        *v30 = 0;
        v30[1] = v23;
        v31 = v119;
        *((_OWORD *)v30 + 1) = v118;
        *((_OWORD *)v30 + 2) = v31;
        v30[6] = v120;
        v32 = (float)(unint64_t)(*((_QWORD *)&v115 + 1) + 1);
        if (!v24 || (float)(v116 * (float)v24) < v32)
          break;
LABEL_95:
        v48 = __p[0];
        v49 = (_QWORD *)*((_QWORD *)__p[0] + v2);
        if (v49)
        {
          *v30 = *v49;
        }
        else
        {
          *v30 = v115;
          *(_QWORD *)&v115 = v30;
          v48[v2] = &v115;
          if (!*v30)
            goto LABEL_104;
          v50 = *(_QWORD *)(*v30 + 8);
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v50 >= v24)
              v50 %= v24;
          }
          else
          {
            v50 &= v24 - 1;
          }
          v49 = (char *)__p[0] + 8 * v50;
        }
        *v49 = v30;
LABEL_104:
        ++*((_QWORD *)&v115 + 1);
LABEL_105:
        v20 += 8;
        v16 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
        v15 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
        if (v20 == v107)
          goto LABEL_129;
      }
      v33 = (v24 & (v24 - 1)) != 0;
      if (v24 < 3)
        v33 = 1;
      v34 = v33 | (2 * v24);
      v35 = vcvtps_u32_f32(v32 / v116);
      if (v34 <= v35)
        prime = (int8x8_t)v35;
      else
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v24 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_61;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v43 = vcvtps_u32_f32((float)*((unint64_t *)&v115 + 1) / v116);
        if (__p[1] < (void *)3
          || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
        {
          v43 = std::__next_prime(v43);
        }
        else
        {
          v45 = 1 << -(char)__clz(v43 - 1);
          if (v43 >= 2)
            v43 = v45;
        }
        if (*(_QWORD *)&prime <= v43)
          prime = (int8x8_t)v43;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v24 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_61:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v37 = operator new(8 * *(_QWORD *)&prime);
            v38 = __p[0];
            __p[0] = v37;
            if (v38)
              operator delete(v38);
            v39 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v39++) = 0;
            while (*(_QWORD *)&prime != v39);
            v40 = (_QWORD **)v115;
            if ((_QWORD)v115)
            {
              v41 = *(_QWORD *)(v115 + 8);
              v42 = (uint8x8_t)vcnt_s8(prime);
              v42.i16[0] = vaddlv_u8(v42);
              if (v42.u32[0] > 1uLL)
              {
                if (v41 >= *(_QWORD *)&prime)
                  v41 %= *(_QWORD *)&prime;
              }
              else
              {
                v41 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v41) = &v115;
              for (i = *v40; i; v41 = v47)
              {
                v47 = i[1];
                if (v42.u32[0] > 1uLL)
                {
                  if (v47 >= *(_QWORD *)&prime)
                    v47 %= *(_QWORD *)&prime;
                }
                else
                {
                  v47 &= *(_QWORD *)&prime - 1;
                }
                if (v47 != v41)
                {
                  if (!*((_QWORD *)__p[0] + v47))
                  {
                    *((_QWORD *)__p[0] + v47) = v40;
                    goto LABEL_86;
                  }
                  *v40 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v47);
                  **((_QWORD **)__p[0] + v47) = i;
                  i = v40;
                }
                v47 = v41;
LABEL_86:
                v40 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v24 = (unint64_t)prime;
            goto LABEL_90;
          }
          v51 = __p[0];
          __p[0] = 0;
          if (v51)
            operator delete(v51);
          v24 = 0;
          __p[1] = 0;
        }
      }
LABEL_90:
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v23 >= v24)
          v2 = v23 % v24;
        else
          v2 = v23;
      }
      else
      {
        v2 = (v24 - 1) & v23;
      }
      goto LABEL_95;
    }
LABEL_129:
    v53 = *(_BYTE *)(v5 + 768);
    v104 = v5 + 496;
    if (v53)
    {
      rf::helpers::getRFUUIDFromAnchor(v5 + 496, (uint64_t)&v118);
      v128 = v118;
      v129 = v119;
      v53 = 1;
    }
    else
    {
      LOBYTE(v128) = 0;
    }
    v130 = v53;
    v54 = *(uint64_t **)(v5 + 160);
    if (!v54)
      goto LABEL_177;
    v108 = v9;
    v103 = v5;
LABEL_135:
    if (v130)
    {
      v55 = (_BYTE)v129 ? (const unsigned __int8 *)v128 : (const unsigned __int8 *)&v128;
      v56 = *((_BYTE *)v54 + 32) ? (const unsigned __int8 *)v54[2] : (const unsigned __int8 *)(v54 + 2);
      if (!uuid_compare(v55, v56))
        goto LABEL_171;
    }
    rf::helpers::getTransformFromAnchor((uint64_t)(v54 + 6));
    v57 = v54[5];
    if (!v57)
    {
      if (*((_BYTE *)v54 + 32))
        v68 = (_QWORD *)v54[2];
      else
        v68 = v54 + 2;
      v57 = ((*v68 >> 2) + (*v68 << 6) + v68[1] + 2654435769) ^ *v68;
      v54[5] = v57;
    }
    if (!__p[1])
    {
      v61 = 0;
      goto LABEL_167;
    }
    v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v58.i16[0] = vaddlv_u8(v58);
    v59 = v58.u32[0];
    if (v58.u32[0] > 1uLL)
    {
      v60 = v57;
      if ((void *)v57 >= __p[1])
        v60 = v57 % (unint64_t)__p[1];
    }
    else
    {
      v60 = ((unint64_t)__p[1] - 1) & v57;
    }
    v62 = (_QWORD *)*((_QWORD *)__p[0] + v60);
    if (!v62)
    {
      v61 = 0;
LABEL_163:
      v5 = v103;
      goto LABEL_166;
    }
    v61 = (_QWORD *)*v62;
    if (!*v62)
      goto LABEL_163;
    while (1)
    {
      v63 = v61[1];
      if (v63 == v57)
      {
        if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)&v116, (uint64_t)(v61 + 2), (uint64_t)(v54 + 2)))
          goto LABEL_165;
      }
      else
      {
        if (v59 > 1)
        {
          if ((void *)v63 >= __p[1])
            v63 %= (unint64_t)__p[1];
        }
        else
        {
          v63 &= (unint64_t)__p[1] - 1;
        }
        if (v63 != v60)
        {
          v61 = 0;
LABEL_165:
          v4 = v102;
          v5 = v103;
LABEL_166:
          v16 = v109;
LABEL_167:
          v119 = *(_OWORD *)uu;
          v120 = v132;
          v121 = v133;
          v122 = v134;
          v64 = v106;
          if (v61)
            v64 = v105;
          v65 = *(_DWORD *)(v4 + 20);
          v66 = *(_QWORD *)(v4 + 80);
          LOBYTE(v118) = v61 != 0;
          v123 = 0;
          v124 = v65;
          v9 = v108;
          v125 = v64;
          v126 = v108;
          v127 = v66;
          v67 = *((unsigned int *)v54 + 76);
          v15 = v110;
          if ((_DWORD)v67 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          *(_QWORD *)uu = &v118;
          ((void (*)(unsigned __int8 *, uint64_t *))off_24EFD7848[v67])(uu, v54 + 6);
LABEL_171:
          v54 = (uint64_t *)*v54;
          if (!v54)
          {
LABEL_177:
            if (*(_BYTE *)(v5 + 768))
            {
              rf::helpers::getTransformFromAnchor(v104);
              v119 = *(_OWORD *)uu;
              v120 = v132;
              v121 = v133;
              v122 = v134;
              v69 = *(_DWORD *)(v4 + 20);
              v70 = *(_QWORD *)(v4 + 80);
              LOBYTE(v118) = 0;
              v123 = 1;
              v124 = v69;
              v125 = v106;
              v126 = v9;
              v127 = v70;
              v71 = *(unsigned int *)(v5 + 752);
              if ((_DWORD)v71 == -1)
                std::__throw_bad_variant_access[abi:ne180100]();
              v117 = &v118;
              ((void (*)(__int128 **, uint64_t))off_24EFD7848[v71])(&v117, v104);
            }
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
LABEL_181:
            if (*(_BYTE *)(v4 + 24))
            {
              v72 = REPrimitiveRenderAddContext();
              REPrimitiveRenderSetShapeMaterial();
              LODWORD(v118) = *(_DWORD *)(v4 + 28);
              *((_QWORD *)&v118 + 1) = v72;
              *(_QWORD *)&v119 = v9;
              for (j = *(float32x4_t **)(v5 + 408); j; j = (float32x4_t *)j->i64[0])
                rf::data_flow::consumer::SceneGraphVisualizer::drawSceneObject(&v118, j + 3);
            }
            if (*(_BYTE *)(v4 + 32))
            {
              v74 = *(uint64_t ***)(v5 + 80);
              ++*(_DWORD *)(v4 + 216);
              if (*(_BYTE *)(v4 + 1728))
              {
                for (; v74; v74 = (uint64_t **)*v74)
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)v74[6]);
                *(_BYTE *)(v4 + 1728) = 0;
              }
              for (k = *(uint64_t ***)(v5 + 1816); k; k = (uint64_t **)*k)
                rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)k[6]);
              for (m = *(uint64_t ***)(v5 + 1856); m; m = (uint64_t **)*m)
                rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)m[6]);
              for (n = *(_QWORD **)(v5 + 1896); n; n = (_QWORD *)*n)
                std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v15, n[6]);
              v78 = REPrimitiveRenderAddContext();
              rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v15, v9, v78, *(_DWORD *)(v4 + 36), *(_DWORD *)(v4 + 40));
              for (ii = *(uint64_t ***)(v5 + 80); ii; ii = (uint64_t **)*ii)
                rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)ii[6]);
            }
            if (*(_BYTE *)(v4 + 45))
            {
              v80 = *(uint64_t ***)(v5 + 120);
              ++*(_DWORD *)(v4 + 536);
              if (*(_BYTE *)(v4 + 1729))
              {
                for (; v80; v80 = (uint64_t **)*v80)
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)v80[6]);
                *(_BYTE *)(v4 + 1729) = 0;
              }
              for (jj = *(uint64_t ***)(v5 + 1936); jj; jj = (uint64_t **)*jj)
                rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)jj[6]);
              for (kk = *(uint64_t ***)(v5 + 1976); kk; kk = (uint64_t **)*kk)
                rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)kk[6]);
              for (mm = *(_QWORD **)(v5 + 2016); mm; mm = (_QWORD *)*mm)
                std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v16, mm[6]);
              v84 = REPrimitiveRenderAddContext();
              rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v16, v9, v84, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 52));
              for (nn = *(uint64_t ***)(v5 + 120); nn; nn = (uint64_t **)*nn)
                rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)nn[6]);
            }
            if (*(_BYTE *)(v4 + 56))
            {
              v86 = REPrimitiveRenderAddContext();
              REPrimitiveRenderSetShapeMaterial();
              LODWORD(v118) = *(_DWORD *)(v4 + 60);
              *((_QWORD *)&v118 + 1) = v86;
              *(_QWORD *)&v119 = v9;
              for (i1 = *(float32x4_t **)(v5 + 368); i1; i1 = (float32x4_t *)i1->i64[0])
                rf::data_flow::consumer::EnvironmentProbeVisualizer::drawEnvironmentProbe(&v118, i1 + 3);
            }
            if (*(_BYTE *)(v4 + 64))
            {
              v88 = *(uint64_t **)(v5 + 288);
              ++*(_DWORD *)(v4 + 856);
              ++*(_DWORD *)(v4 + 1176);
              ++*(_DWORD *)(v4 + 1496);
              if (*(_BYTE *)(v4 + 1730))
              {
                for (; v88; v88 = (uint64_t *)*v88)
                {
                  if (*((_BYTE *)v88 + 608))
                    rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v88 + 24));
                  if (*((_BYTE *)v88 + 1040))
                    rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v88 + 78));
                  if (*((_BYTE *)v88 + 1472))
                    rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v88 + 132));
                }
                *(_BYTE *)(v4 + 1730) = 0;
              }
              for (i2 = *(_QWORD **)(v5 + 2776); i2; i2 = (_QWORD *)*i2)
              {
                v90 = (_BYTE *)i2[6];
                if (v90[560])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v90 + 144));
                if (v90[992])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v90 + 576));
                if (v90[1424])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v90 + 1008));
              }
              for (i3 = *(_QWORD **)(v5 + 2816); i3; i3 = (_QWORD *)*i3)
              {
                v92 = (_BYTE *)i3[6];
                if (v92[560])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v92 + 144));
                if (v92[992])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v92 + 576));
                if (v92[1424])
                  rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v92 + 1008));
              }
              for (i4 = *(uint64_t **)(v5 + 2856); i4; i4 = (uint64_t *)*i4)
              {
                if (*((_BYTE *)i4 + 608))
                  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v113, (uint64_t)(i4 + 24));
                if (*((_BYTE *)i4 + 1040))
                  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v112, (uint64_t)(i4 + 78));
                if (*((_BYTE *)i4 + 1472))
                  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v111, (uint64_t)(i4 + 132));
              }
              v94 = REPrimitiveRenderAddContext();
              rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v113, v9, v94, 9, 0);
              v95 = REPrimitiveRenderAddContext();
              rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v112, v9, v95, 8, 0);
              v96 = REPrimitiveRenderAddContext();
              rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v111, v9, v96, 8, 0);
              v97 = *(uint64_t **)(v5 + 288);
              if (v97)
              {
                while (2)
                {
                  if (*(_BYTE *)(v102 + 72))
                    v98 = *((_BYTE *)v97 + 176) == 0;
                  else
                    v98 = 0;
                  if (!v98)
                  {
                    v99 = *(_DWORD *)(v102 + 68);
                    if (v99 == 1)
                    {
                      if (*((_BYTE *)v97 + 1040))
                        rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v97 + 78));
                      if (*((_BYTE *)v97 + 1472))
                      {
                        v100 = (const rf::data_flow::consumer::Mesh *)(v97 + 132);
                        v101 = v111;
LABEL_261:
                        rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v101, v100);
                      }
                    }
                    else if (!v99 && *((_BYTE *)v97 + 608))
                    {
                      v100 = (const rf::data_flow::consumer::Mesh *)(v97 + 24);
                      v101 = v113;
                      goto LABEL_261;
                    }
                  }
                  v97 = (uint64_t *)*v97;
                  if (!v97)
                    goto LABEL_263;
                  continue;
                }
              }
            }
            goto LABEL_263;
          }
          goto LABEL_135;
        }
      }
      v61 = (_QWORD *)*v61;
      if (!v61)
        goto LABEL_165;
    }
  }
}

void sub_22778E3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  std::mutex *v13;
  va_list va;

  va_start(va, a13);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationClassificationsAlpha(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  v5 = *(_QWORD *)(this + 352);
  if (*(_QWORD *)(this + 360) != v5)
  {
    v6 = 0;
    v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 396) = v4;
      ++v6;
      v5 = *(_QWORD *)(this + 352);
      v7 += 16;
    }
    while (v6 < (*(_QWORD *)(this + 360) - v5) >> 4);
  }
  *(_BYTE *)(this + 1728) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationMaterialsAlpha(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  v5 = *(_QWORD *)(this + 272);
  if (*(_QWORD *)(this + 280) != v5)
  {
    v6 = 0;
    v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 316) = v4;
      ++v6;
      v5 = *(_QWORD *)(this + 272);
      v7 += 16;
    }
    while (v6 < (*(_QWORD *)(this + 280) - v5) >> 4);
  }
  *(_BYTE *)(this + 1728) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationClassificationsAlpha(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  v5 = *(_QWORD *)(this + 672);
  if (*(_QWORD *)(this + 680) != v5)
  {
    v6 = 0;
    v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 716) = v4;
      ++v6;
      v5 = *(_QWORD *)(this + 672);
      v7 += 16;
    }
    while (v6 < (*(_QWORD *)(this + 680) - v5) >> 4);
  }
  *(_BYTE *)(this + 1729) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationMaterialsAlpha(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  v5 = *(_QWORD *)(this + 592);
  if (*(_QWORD *)(this + 600) != v5)
  {
    v6 = 0;
    v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 636) = v4;
      ++v6;
      v5 = *(_QWORD *)(this + 592);
      v7 += 16;
    }
    while (v6 < (*(_QWORD *)(this + 600) - v5) >> 4);
  }
  *(_BYTE *)(this + 1729) = 1;
  return this;
}

void rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer(rf::data_flow::consumer::DebugOptionConsumer *this)
{
  rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer(this);
  JUMPOUT(0x22E29DD50);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  *(_QWORD *)this = &off_24EFD7810;
  v2 = (void *)*((_QWORD *)this + 210);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 204);
  if (v3)
  {
    *((_QWORD *)this + 205) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 200);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 194);
  if (v5)
  {
    *((_QWORD *)this + 195) = v5;
    operator delete(v5);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 182);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 181);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 1408);
  v6 = (void *)*((_QWORD *)this + 170);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 164);
  if (v7)
  {
    *((_QWORD *)this + 165) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 160);
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 154);
  if (v9)
  {
    *((_QWORD *)this + 155) = v9;
    operator delete(v9);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 142);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 141);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 1088);
  v10 = (void *)*((_QWORD *)this + 130);
  if (v10)
    operator delete(v10);
  v11 = (void *)*((_QWORD *)this + 124);
  if (v11)
  {
    *((_QWORD *)this + 125) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 120);
  if (v12)
    operator delete(v12);
  v13 = (void *)*((_QWORD *)this + 114);
  if (v13)
  {
    *((_QWORD *)this + 115) = v13;
    operator delete(v13);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 102);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 101);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 768);
  v14 = (void *)*((_QWORD *)this + 90);
  if (v14)
    operator delete(v14);
  v15 = (void *)*((_QWORD *)this + 84);
  if (v15)
  {
    *((_QWORD *)this + 85) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 80);
  if (v16)
    operator delete(v16);
  v17 = (void *)*((_QWORD *)this + 74);
  if (v17)
  {
    *((_QWORD *)this + 75) = v17;
    operator delete(v17);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 62);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 61);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 448);
  v18 = (void *)*((_QWORD *)this + 50);
  if (v18)
    operator delete(v18);
  v19 = (void *)*((_QWORD *)this + 44);
  if (v19)
  {
    *((_QWORD *)this + 45) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 40);
  if (v20)
    operator delete(v20);
  v21 = (void *)*((_QWORD *)this + 34);
  if (v21)
  {
    *((_QWORD *)this + 35) = v21;
    operator delete(v21);
  }
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 22);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 21);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 14);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 13);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 12);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 11);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)this + 10);
}

rf::data_flow::consumer::MeshVisualizer *rf::data_flow::consumer::MeshVisualizer::MeshVisualizer(rf::data_flow::consumer::MeshVisualizer *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 6) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 6) = _Q0;
  *((_OWORD *)this + 7) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 16) = _Q0;
  rf::ColorPaletteMaterialARKit::ColorPaletteMaterialARKit((rf::data_flow::consumer::MeshVisualizer *)((char *)this + 144));
  rf::ColorPaletteClassificationARKit::ColorPaletteClassificationARKit((rf::data_flow::consumer::MeshVisualizer *)((char *)this + 224));
  *((_WORD *)this + 152) = 257;
  return this;
}

void sub_22778E690(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  rf::ColorPaletteMaterialARKit *v3;
  rf::ColorPaletteMaterialARKit *v4;

  v4 = v3;
  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v4);
  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)(v1 + 48));
  RESharedPtr<REAsset>::~RESharedPtr(v2);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(rf::ColorPaletteMaterialARKit *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    operator delete(v2);
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 6));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, __int128 *a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t *RFAnchorManagementServiceCreate()
{
  uint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _QWORD v12[2];
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 7) = 0;
  v16 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 7) = 0;
  if (qword_253DC9A18 != -1)
    dispatch_once(&qword_253DC9A18, &__block_literal_global_0);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::AnchorManagementConsumer::AnchorManagementConsumer((rf::data_flow::consumer::AnchorManagementConsumer *)(v1 + 1), (const rf::data_flow::consumer::AnchorManagementConfig *)v11);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  v2 = (_QWORD *)v18[0];
  if ((_BYTE *)v18[0] == v17)
  {
    v3 = 4;
    v2 = v17;
  }
  else
  {
    if (!v18[0])
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_10:
  v4 = v16;
  if (v16 == v15)
  {
    v5 = 4;
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_15:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_20;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_20:
  v8 = (_QWORD *)v12[0];
  if ((_BYTE *)v12[0] == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_24;
  }
  if (v12[0])
  {
    v9 = 5;
LABEL_24:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return Instance;
}

void sub_22778EB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::consumer::AnchorManagementConfig::~AnchorManagementConfig(rf::data_flow::consumer::AnchorManagementConfig *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  rf::data_flow::consumer::AnchorManagementConfig *v5;
  uint64_t v6;
  rf::data_flow::consumer::AnchorManagementConfig *v7;
  uint64_t v8;
  rf::data_flow::consumer::AnchorManagementConfig *v9;
  uint64_t v10;

  v2 = (char *)this + 104;
  v3 = (char *)*((_QWORD *)this + 16);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (rf::data_flow::consumer::AnchorManagementConfig *)*((_QWORD *)this + 12);
  if (v5 == (rf::data_flow::consumer::AnchorManagementConfig *)((char *)this + 72))
  {
    v6 = 4;
    v5 = (rf::data_flow::consumer::AnchorManagementConfig *)((char *)this + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (rf::data_flow::consumer::AnchorManagementConfig *)*((_QWORD *)this + 8);
  if (v7 == (rf::data_flow::consumer::AnchorManagementConfig *)((char *)this + 40))
  {
    v8 = 4;
    v7 = (rf::data_flow::consumer::AnchorManagementConfig *)((char *)this + 40);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (rf::data_flow::consumer::AnchorManagementConfig *)*((_QWORD *)this + 3);
  if (v9 == this)
  {
    v10 = 4;
    v9 = this;
  }
  else
  {
    if (!v9)
      return;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
}

uint64_t RFAnchorManagementServiceCleanupWithServiceLocator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 16);
    result = MEMORY[0x22E29DA50](a2);
    if (result)
    {
      result = REShadowManagerClearShadowClusterRootUpdateHandler();
      *(_BYTE *)(v2 + 200) = 0;
    }
  }
  return result;
}

uint64_t RFAnchorManagementUpdateAnchoringInScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ECSManagerNullable;
  char v5;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  v7 = 0;
  v8 = ECSManagerNullable;
  v9 = v5;
  v10 = a2;
  v11 = 1;
  v12 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(v3 + 8) + 16))(v3 + 8, &v7);
}

uint64_t RFAnchorManagementServiceUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return RFAnchorManagementServiceUpdateByDeltaTime(a1, a2, a3, 0.0);
}

uint64_t RFAnchorManagementServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  uint64_t v7;
  uint64_t ServiceLocator;
  char v9;
  float v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v7 = *(_QWORD *)(a1 + 16);
  if (RESceneGetECSManagerNullable())
  {
    ServiceLocator = REECSManagerGetServiceLocator();
    v9 = 1;
  }
  else
  {
    v9 = 0;
    ServiceLocator = 0;
  }
  v11 = a4;
  v12 = ServiceLocator;
  v13 = v9;
  v14 = a2;
  v15 = 1;
  if (a3)
    v16 = *a3;
  else
    v16 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v7 + 8) + 16))(v7 + 8, &v11);
}

uint64_t RFAnchorManagementSetDebugVisualizationEnabled(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 64) != a2)
    *(_BYTE *)(v2 + 64) = a2;
  return result;
}

uint64_t RFAnchorManagementIsDebugVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 64);
}

uint64_t RFAnchorManagementSetRequiresPlacement(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 65) != a2)
    *(_BYTE *)(v2 + 65) = a2;
  return result;
}

uint64_t RFAnchorManagementGetRequiresPlacement(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 65);
}

uint64_t RFAnchorManagementSetRestrictNestedAnchoring(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 66) != a2)
    *(_BYTE *)(v2 + 66) = a2;
  return result;
}

uint64_t RFAnchorManagementGetRestrictNestedAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 66);
}

uint64_t RFAnchorManagementSetRestrictAnchoring(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 67) != a2)
    *(_BYTE *)(v2 + 67) = a2;
  return result;
}

uint64_t RFAnchorManagementGetRestrictAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 67);
}

uint64_t RFAnchorManagementSetCheckEntitledAncestor(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 68) != a2)
    *(_BYTE *)(v2 + 68) = a2;
  return result;
}

uint64_t RFAnchorManagementGetCheckEntitledAncestor(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 68);
}

_QWORD *RFAnchorManagementAddNestedAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 208), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveNestedAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)(v2 + 208), &v4);
}

_QWORD *RFAnchorManagementAddAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 248), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)(v2 + 248), &v4);
}

_QWORD *RFAnchorManagementAddAnchoringEntitledAncestor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 288), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveAnchoringEntitledAncestor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)(v2 + 288), &v4);
}

uint64_t RFAnchorManagementSetStrictLocalAnchoring(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 69) != a2)
    *(_BYTE *)(v2 + 69) = a2;
  return result;
}

uint64_t RFAnchorManagementGetStrictLocalAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 69);
}

uint64_t RFAnchorManagerSetRestrictTransformSync(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 70) != a2)
    *(_BYTE *)(v2 + 70) = a2;
  return result;
}

uint64_t RFAnchorManagerGetRestrictTransformSync(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 70);
}

_QWORD *RFAnchorManagerAllowTransformSyncingForPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 328), &v4, &v4);
}

uint64_t *RFAnchorManagerRevokeTransformSyncingForPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)(v2 + 328), &v4);
}

_QWORD *RFAnchorManagementSetAnchoringStateChangeCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v5[0] = &off_24EFD78A8;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  std::function<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::operator=((_QWORD *)(v2 + 32), (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22778F110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *RFAnchorManagerAddReservedAnchorIdentifier(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v6 = 0;
  v7 = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *a2;
  return std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v3 + 368, (uint64_t)&v5, &v5);
}

uint64_t *RFAnchorManagerRemoveReservedAnchorIdentifier(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v6 = 0;
  v7 = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *a2;
  return std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v3 + 368), (uint64_t)&v5);
}

_QWORD *RFAnchorManagementSetOnAnchorCreatedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v5[0] = &off_24EFD7938;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  std::function<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::operator=((_QWORD *)(v2 + 72), (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22778F2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *RFAnchorManagementSetOnCustomAnchorCreateCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v5[0] = &off_24EFD7A48;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::operator=((_QWORD *)(v2 + 104), (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22778F3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *RFAnchorManagementSetOnImageAnchorChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v5[0] = &off_24EFD7AD8;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  std::function<void ()(NSSet<ARReferenceImage *> *)>::operator=((_QWORD *)(v2 + 136), (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22778F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorManagementSetInClientProcess(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 168) = a2;
  return result;
}

uint64_t RFAnchorManagementGetInClientProcess(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 168);
}

uint64_t RFAnchorManagementSetNeedClientAnchoring(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(v2 + 169) = a2;
  *(_BYTE *)(v2 + 24) = 1;
  return result;
}

BOOL RFAnchorManagementGetNeedClientAnchoring(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 169) | *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 24)) != 0;
}

uint64_t RFAnchorManagementSetClientNeedWorldAnchoring(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 170) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedWorldAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 170);
}

uint64_t RFAnchorManagementSetClientNeedPlaneAnchoring(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 171) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedPlaneAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 171);
}

uint64_t RFAnchorManagementSetClientNeedImageAnchoring(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 172) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedImageAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 172);
}

uint64_t RFAnchorManagementSetClientNeedObjectAnchoring(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 173) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedObjectAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 173);
}

uint64_t RFAnchorManagementSetClientNeedHandAnchoring(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 174) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedHandAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 174);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer24AnchorManagementConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_2[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::AnchorManagementConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9A20 = 0u;
  xmmword_253DC9A30 = 0u;
  xmmword_253DC9A40 = 0u;
  unk_253DC9A50 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9A60 = 0uLL;
  unk_253DC9A70 = 0uLL;
  *((_QWORD *)&xmmword_253DC9A20 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9A30 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9A40 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::finalizeCallback;
  qword_253DC9A58 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9A60 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_1 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_22778F71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::AnchorManagementConsumer::~AnchorManagementConsumer((id *)(v2 + 8));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

void rf::data_flow::consumer::AnchorManagementConsumer::~AnchorManagementConsumer(id *this)
{
  rf::data_flow::consumer::AnchorManagementConsumer *v2;
  uint64_t v3;
  rf::data_flow::consumer::AnchorManagementConsumer *v4;
  uint64_t v5;
  rf::data_flow::consumer::AnchorManagementConsumer *v6;
  uint64_t v7;
  rf::data_flow::consumer::AnchorManagementConsumer *v8;
  uint64_t v9;

  *this = &off_24EFDA2D0;
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::~__hash_table((uint64_t)(this + 59));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::~__hash_table((uint64_t)(this + 52));

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 45));
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 40));
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 35));
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 30));
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 25));
  RESharedPtr<REAsset>::~RESharedPtr(this + 23);
  v2 = (rf::data_flow::consumer::AnchorManagementConsumer *)this[19];
  if (v2 == (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 16))
  {
    v3 = 4;
    v2 = (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 16);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (rf::data_flow::consumer::AnchorManagementConsumer *)this[15];
  if (v4 == (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 12))
  {
    v5 = 4;
    v4 = (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 12);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = (rf::data_flow::consumer::AnchorManagementConsumer *)this[11];
  if (v6 == (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 8))
  {
    v7 = 4;
    v6 = (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 8);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  v8 = (rf::data_flow::consumer::AnchorManagementConsumer *)this[6];
  if (v8 == (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 3))
  {
    v9 = 4;
    v8 = (rf::data_flow::consumer::AnchorManagementConsumer *)(this + 3);
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

{
  rf::data_flow::consumer::AnchorManagementConsumer::~AnchorManagementConsumer(this);
  JUMPOUT(0x22E29DD50);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,0>(uint64_t a1)
{
  rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription((rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription(rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription *this)
{
  rf::internal::assert_impl<(rf::internal::AssertLevel)0,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda(void)#1}>(*(_QWORD *)this != 0);
  MEMORY[0x22E29D510](*(_QWORD *)this, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
}

uint64_t rf::internal::assert_impl<(rf::internal::AssertLevel)0,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda(void)#1}>(uint64_t result)
{
  rf::internal *v1;
  std::string *v2;
  std::string v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  int v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)result)
  {
    rf::getMessage((rf *)"Event bug should not be null", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v1);
    v4 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda()#1}::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = &v3;
    else
      v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    v7 = 136315138;
    v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_22778FB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda()#1}::operator()(_QWORD *a1@<X8>)
{
  rf::getMessage((rf *)"Event bug should not be null", a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ARReferenceImage * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ARReferenceImage * {__strong}>,0>(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD78A8;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD78A8;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::target_type()
{
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7938;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7938;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  _BYTE v8[256];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, a2);
  if (v9 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  p_cf = &cf;
  ((void (*)(CFTypeRef **, _BYTE *))off_24EFD79A8[v9])(&p_cf, v8);
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v8, &cf);
  v3 = *(_QWORD *)(a1 + 8);
  cf = 0;
  (*(void (**)(void))(v3 + 16))();
  if (v9 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  p_cf = (CFTypeRef *)&v5;
  ((void (*)(CFTypeRef **, _BYTE *))off_24EFD79F8[v9])(&p_cf, v8);
  if (cf)
    CFRelease(cf);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
}

void sub_227790024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::target_type()
{
}

void rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef cf;

  cf = (CFTypeRef)rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::createWithCFAllocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>(*MEMORY[0x24BDBD240], a1);
  rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::CFObjectRef(a2, &cf);
  if (cf)
    CFRelease(cf);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  uuid_t uu;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  *((_QWORD *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  result = *(double *)uu;
  v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

uint64_t rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::createWithCFAllocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>(uint64_t a1, uint64_t a2)
{
  uint64_t Instance;
  _QWORD *v4;

  if (rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag != -1)
    dispatch_once(&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag, &__block_literal_global_3);
  Instance = _CFRuntimeCreateInstance();
  v4 = (_QWORD *)operator new();
  *v4 = Instance;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v4 + 2), a2);
  std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(Instance + 16), (uint64_t)v4);
  return Instance;
}

void sub_227790468(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10F2C40557DAE71);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINSt3__17variantIJNS_9data_flow12CustomAnchorENS4_11PlaneAnchorENS4_11ImageAnchorENS4_12ObjectAnchorENS4_10FaceAnchorENS4_10BodyAnchorEEEEEEE13registerClassEv_block_invoke()
{
  void **v0;
  void *__p[2];
  char v2;

  rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(__p);
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass = 0u;
  xmmword_2558F9B00 = 0u;
  xmmword_2558F9B10 = 0u;
  unk_2558F9B20 = 0u;
  xmmword_2558F9B30 = 0u;
  unk_2558F9B40 = 0u;
  v0 = (void **)__p[0];
  if (v2 >= 0)
    v0 = __p;
  *((_QWORD *)&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass
  + 1) = v0;
  *(_QWORD *)&xmmword_2558F9B00 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback;
  *(_QWORD *)&xmmword_2558F9B10 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback;
  qword_2558F9B28 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_2558F9B30 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback;
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfTypeID = _CFRuntimeRegisterClass();
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_227790530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(_BYTE *a1@<X8>)
{
  size_t v2;
  int v3;
  char i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v2 = 0;
  v3 = 1;
  for (i = 115; i != 91; i = aStdStringViewR_3[v2++ + 51])
  {
    if (i == 93)
    {
      v5 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      v2 = 0;
      a1[23] = 0;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v5 = 1;
LABEL_8:
  v3 += v5;
  if (v3)
    goto LABEL_9;
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    *((_QWORD *)a1 + 1) = v2;
    *((_QWORD *)a1 + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    a1 = v8;
  }
  else
  {
    a1[23] = v2;
    if (!v2)
      goto LABEL_18;
  }
  memcpy(a1, "std::variant<rf::data_flow::CustomAnchor, rf::data_flow::PlaneAnchor, rf::data_flow::ImageAnchor, rf::data_flow::ObjectAnchor, rf::data_flow::FaceAnchor, rf::data_flow::BodyAnchor>]", v2);
LABEL_18:
  a1[v2] = 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

_QWORD *rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::CFObjectRef(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7A48;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7A48;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::target_type()
{
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7AD8;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7AD8;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::target_type()
{
}

uint64_t *RFEnvironmentProbePlacementServiceCreate()
{
  uint64_t *Instance;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v13[0] = 16777217;
  v13[1] = 3;
  v14 = xmmword_2277EF370;
  v15 = 0x3F8000003F4CCCCDLL;
  v16 = 0;
  v17 = xmmword_2277EF380;
  v19 = 0;
  v21 = 0;
  if (qword_253DC9A88 != -1)
    dispatch_once(&qword_253DC9A88, &__block_literal_global_1);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::EnvironmentProbeConsumer::EnvironmentProbeConsumer((rf::data_flow::consumer::EnvironmentProbeConsumer *)(v1 + 2), (const rf::data_flow::consumer::EnvironmentProbeConfig *)v13);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  v8 = v21;
  if (v21 == v20)
  {
    v9 = 4;
    v8 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v8 + 8 * v9))(v8, v2, v3, v4, v5, v6, v7);
LABEL_10:
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
    goto LABEL_14;
  }
  if (v19)
  {
    v11 = 5;
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v2, v3, v4, v5, v6, v7);
  }
  return Instance;
}

void sub_227790B84(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t RFEnvironmentProbePlacementServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t ECSManagerNullable;
  char v7;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
  v10 = ECSManagerNullable;
  v11 = v7;
  v12 = a2;
  v13 = 1;
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 16) + 16))(v5 + 16, &v9);
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(v2 + 32) = a2;
  *(_BYTE *)(v2 + 152) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetLocalizedProbeEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 152);
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 33) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetBackgroundParallaxEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 33);
}

uint64_t RFEnvironmentProbePlacementServiceSetMaxLocalizedProbeCount(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_DWORD *)(v2 + 36) = a2;
  *(_DWORD *)(v2 + 156) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetMaxLocalizedProbeCount(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 156);
}

uint64_t RFEnvironmentProbePlacementServiceSetProbeUpdateInterval(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 16) + 40) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetProbeUpdateInterval(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundProbeMaxExtent(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 16) + 44) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetBackgroundProbeMaxExtent(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 44);
}

uint64_t RFEnvironmentProbePlacementServiceSetIslandSearchExpansionFactor(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 16) + 48) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetIslandSearchExpansionFactor(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t RFEnvironmentProbePlacementServiceSetMaximumProbeSideRatio(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 16) + 52) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetMaximumProbeSideRatio(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 52);
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeCoverageThreshold(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 16) + 56) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetLocalizedProbeCoverageThreshold(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 56);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7B88;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7B88;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((_QWORD *)(v2 + 88), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_227790E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7C18;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7C18;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((_QWORD *)(v2 + 120), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_227790F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7CA8;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7CA8;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((_QWORD *)(v2 + 88), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2277910CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7D28;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7D28;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((_QWORD *)(v2 + 120), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_227791230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7DA8;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7DA8;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((_QWORD *)(v2 + 88), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_227791394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24EFD7E28;
  v9[1] = MEMORY[0x22E29E0BC](a2);
  v10 = v9;
  v8 = v7;
  v7[0] = &off_24EFD7E28;
  v7[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((_QWORD *)(v2 + 120), (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2277914F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t RFEnvironmentProbePlacementServiceSetLegacyBlurEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 34) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetLegacyBlurEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 34);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer24EnvironmentProbeConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_4[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::EnvironmentProbeConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9A90 = 0u;
  xmmword_253DC9AA0 = 0u;
  xmmword_253DC9AB0 = 0u;
  unk_253DC9AC0 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9AD0 = 0uLL;
  unk_253DC9AE0 = 0uLL;
  *((_QWORD *)&xmmword_253DC9A90 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9AA0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9AB0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::finalizeCallback;
  qword_253DC9AC8 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9AD0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_2 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277916F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer((id *)(v2 + 16));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7B88;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7B88;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

double std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()@<D0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uuid_t uu;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    (*(void (**)(uint64_t, unsigned __int8 *, __n128, __n128, __n128, __n128, __n128))(v8 + 16))(v8, uu, *a2, a2[1], a2[2], a2[3], *a3);
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  uuid_clear((unsigned __int8 *)a4);
  result = *(double *)uu;
  *(_OWORD *)a4 = *(_OWORD *)uu;
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7C18;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7C18;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uuid_t dst;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  memset(dst, 0, sizeof(dst));
  if (*((_BYTE *)a2 + 16))
    a2 = (uint64_t *)*a2;
  uuid_copy(dst, (const unsigned __int8 *)a2);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(result + 16))(result, dst);
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7CA8;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7CA8;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  void *v9;
  id v10;

  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  uuid_clear((unsigned __int8 *)a4);
  uuid_generate_random((unsigned __int8 *)a4);
  if (*(_QWORD *)(a1 + 8))
  {
    v8 = objc_alloc(MEMORY[0x24BDFD930]);
    rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (id)objc_msgSend(v8, "initWithIdentifier:transform:extent:", v9, *a2, a2[2], a2[4], a2[6], *a3);

    (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  }
}

void sub_227791D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

id rf::data_flow::RFUUID::asNSUUID(rf::data_flow::RFUUID *this)
{
  id v2;

  v2 = objc_alloc(MEMORY[0x24BDD1880]);
  if (*((_BYTE *)this + 16))
    this = *(rf::data_flow::RFUUID **)this;
  return (id)objc_msgSend(v2, "initWithUUIDBytes:", this);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7D28;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7D28;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, double *a2)
{
  id v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = objc_alloc(MEMORY[0x24BDFD930]);
    rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v4, "initWithIdentifier:transform:extent:", v5, a2[4], a2[6], a2[8], a2[10], a2[12]);

    (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  }
}

void sub_227791F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7DA8;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7DA8;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *((_BYTE *)a4 + 16) = 0;
  a4[3] = 0;
  uuid_clear((unsigned __int8 *)a4);
  uuid_generate_random((unsigned __int8 *)a4);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*((_BYTE *)a4 + 16))
      v9 = (uint64_t *)*a4;
    else
      v9 = a4;
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    v13 = a2[3];
    v14 = *a3;
    v15[0] = v9;
    v15[1] = 0;
    v16 = v10;
    v17 = v11;
    v18 = v12;
    v19 = v13;
    v20 = v14;
    return (*(uint64_t (**)(uint64_t, _QWORD *))(result + 16))(result, v15);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD7E28;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD7E28;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*((_BYTE *)a2 + 16))
      v3 = (uint64_t *)*a2;
    else
      v3 = a2;
    v4 = *((_OWORD *)a2 + 2);
    v5 = *((_OWORD *)a2 + 3);
    v6 = *((_OWORD *)a2 + 4);
    v7 = *((_OWORD *)a2 + 5);
    v8 = *((_OWORD *)a2 + 6);
    v9[0] = v3;
    v9[1] = 0;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    v13 = v7;
    v14 = v8;
    return (*(uint64_t (**)(uint64_t, _QWORD *))(result + 16))(result, v9);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

void rf::data_flow::provider::CameraMetadataProvider::setCameraMetadataExposure(rf::data_flow::provider::CameraMetadataProvider *this, float a2)
{
  uint64_t v2;
  _OWORD v3[10];
  uint64_t v4;
  char v5;
  char v6;
  __int16 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  float v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  memset(v3, 0, sizeof(v3));
  v4 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v40 = a2;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    rf::Session::consumeInputFromProvider(v2, (uint64_t)v3);
  rf::data_flow::provider::InputData::~InputData((void **)v3);
}

void sub_227792474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::CameraMetadataProvider::setClippingPointLux(rf::data_flow::provider::CameraMetadataProvider *this, float a2)
{
  uint64_t v2;
  _OWORD v3[10];
  uint64_t v4;
  char v5;
  char v6;
  __int16 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  float v42;
  char v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  memset(v3, 0, sizeof(v3));
  v4 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v42 = a2;
  v43 = 1;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    rf::Session::consumeInputFromProvider(v2, (uint64_t)v3);
  rf::data_flow::provider::InputData::~InputData((void **)v3);
}

void sub_2277925A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::CameraMetadataProvider::~CameraMetadataProvider(rf::data_flow::provider::CameraMetadataProvider *this)
{
  JUMPOUT(0x22E29DD50);
}

uint64_t *RFQueryCreateEntityQueryUsingPredicate(uint64_t a1)
{
  uint64_t *Instance;
  _QWORD *v3;
  uint64_t v5;

  if (qword_253DC9AF8 != -1)
    dispatch_once(&qword_253DC9AF8, &__block_literal_global_2);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v3 = (_QWORD *)operator new();
  *v3 = Instance;
  v3[1] = a1;
  v5 = 0;
  std::unique_ptr<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject,std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v3);
  std::unique_ptr<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject,std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>>::reset[abi:ne180100](&v5, 0);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

void sub_2277926A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectIN3csq5QueryINSt3__113unordered_mapINS_9data_flow6RFUUIDENS4_7variantIJNS2_19EntryWithPropertiesIJNS_5query16REEntityPropertyENSA_16PositionPropertyEEEEEEENS7_4HashENS7_8EqualityENS4_9allocatorINS4_4pairIKS7_SE_EEEEEEEEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 99; ; i = aStdStringViewR_5[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "csq::Query<std::unordered_map<rf::data_flow::RFUUID, std::variant<csq::EntryWithProperties<rf::query::REEntityProperty, rf::query::PositionProperty>>, rf::data_flow::RFUUID::Hash, rf::data_flow::RFUUID::Equality>>]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9B00 = 0u;
  xmmword_253DC9B10 = 0u;
  xmmword_253DC9B20 = 0u;
  unk_253DC9B30 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9B40 = 0uLL;
  unk_253DC9B50 = 0uLL;
  *((_QWORD *)&xmmword_253DC9B00 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9B10 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::initCallback;
  *(_QWORD *)&xmmword_253DC9B20 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::finalizeCallback;
  qword_253DC9B38 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9B40 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyDebugDescriptionCallback;
  _MergedGlobals_3 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_227792834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject,std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject,std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t rf::data_flow::consumer::LoggingConsumer::LoggingConsumer(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)a1 = &off_24EFD7F08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x24BDAC9C0], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 352) = dispatch_queue_create("RealityFusionLoggingConsumer", v3);

  *(_QWORD *)(a1 + 360) = dispatch_group_create();
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  return a1;
}

void rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer(rf::data_flow::consumer::LoggingConsumer *this)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_24EFD7F08;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    v3 = (void *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;

  v5 = (void **)((char *)this + 368);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v5);

  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32);
}

{
  rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer(this);
  JUMPOUT(0x22E29DD50);
}

void rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(uint64_t a1)
{
  rf *v2;
  std::string *v3;
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__split_buffer<std::string>::pointer *v32;
  std::__split_buffer<std::string>::pointer *v33;
  _QWORD *v34;
  id v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  std::string *v41;
  std::__split_buffer<std::string>::pointer v42;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v44;
  std::__split_buffer<std::string>::pointer end;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int64x2_t v49;
  std::string *v50;
  std::__split_buffer<std::string>::pointer v51;
  std::string *v52;
  unint64_t *p_size;
  unint64_t v54;
  std::string::size_type v55;
  unint64_t *v56;
  unint64_t v57;
  std::string *sig;
  std::string *v59;
  std::mutex *v60;
  uint64_t v61;
  int64x2_t v62;
  std::string v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[3];
  _QWORD *v69;
  int v70;
  __int16 v71;
  std::string v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[3];
  _QWORD *v78;
  int v79;
  __int16 v80;
  std::__split_buffer<std::string> v81;
  std::string __p;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[24];
  _BYTE *v88;
  int v89;
  __int16 v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v60 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v60);
  v3 = (std::string *)MEMORY[0x24BDAC760];
  if (!*(_BYTE *)(a1 + 176))
    goto LABEL_44;
  rf::realityFusionLogObject(v2);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    sig = (std::string *)v60[28].__m_.__sig;
    LODWORD(v81.__first_) = 134217984;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v81.__first_ + 4) = sig;
    _os_log_debug_impl(&dword_227777000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer saveSnapshotRequested for frame %lu", (uint8_t *)&v81, 0xCu);
  }

  if (*(char *)(a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    v72 = *(std::string *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 80);
  v73 = *(_OWORD *)(a1 + 64);
  v74 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v75 = *(_OWORD *)(a1 + 96);
  v76 = v6;
  v7 = v77;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 128);
  v79 = *(_DWORD *)(a1 + 160);
  v80 = *(_WORD *)(a1 + 164);
  v62.i64[0] = a1;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v63, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v63 = v72;
  v64 = v73;
  v65 = v74;
  v66 = v75;
  v67 = v76;
  v8 = v68;
  v9 = (uint64_t)v78;
  if (!v78)
    goto LABEL_13;
  if (v78 != v77)
  {
    v9 = (*(uint64_t (**)(void))(*v78 + 16))();
LABEL_13:
    v69 = (_QWORD *)v9;
    goto LABEL_15;
  }
  v69 = v68;
  (*(void (**)(_QWORD *, _QWORD *))(v77[0] + 24))(v77, v68);
LABEL_15:
  v70 = v79;
  v71 = v80;
  v11 = *(NSObject **)(a1 + 352);
  v10 = *(NSObject **)(a1 + 360);
  v81.__first_ = v3;
  v81.__begin_ = (std::__split_buffer<std::string>::pointer)3321888768;
  v81.__end_ = (std::__split_buffer<std::string>::pointer)___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__0cvU13block_pointerFvvEEv_block_invoke;
  v81.__end_cap_.__value_ = (std::string *)&__block_descriptor_192_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0_e5_v8__0l;
  v81.__end_cap_.__value_ = (std::allocator<std::string> *)v62.i64[0];
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    __p = v63;
  v83 = v64;
  v84 = v65;
  v85 = v66;
  v86 = v67;
  v12 = v87;
  v13 = (uint64_t)v69;
  if (!v69)
    goto LABEL_21;
  if (v69 != v68)
  {
    v13 = (*(uint64_t (**)(void))(*v69 + 16))();
LABEL_21:
    v88 = (_BYTE *)v13;
    goto LABEL_23;
  }
  v88 = v87;
  (*(void (**)(_QWORD *, _BYTE *))(v68[0] + 24))(v68, v87);
LABEL_23:
  v89 = v70;
  v90 = v71;
  v14 = (void *)MEMORY[0x22E29E0BC](&v81);
  if (v88 == v87)
  {
    v15 = 4;
  }
  else
  {
    if (!v88)
      goto LABEL_28;
    v15 = 5;
    v12 = v88;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  dispatch_group_async(v10, v11, v14);

  if (v69 == v68)
  {
    v16 = 4;
  }
  else
  {
    if (!v69)
      goto LABEL_35;
    v16 = 5;
    v8 = v69;
  }
  v2 = (rf *)(*(uint64_t (**)(_QWORD *))(*v8 + 8 * v16))(v8);
LABEL_35:
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v78 == v77)
  {
    v17 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_42;
    v17 = 5;
    v7 = v78;
  }
  v2 = (rf *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v17))(v7);
LABEL_42:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
LABEL_44:
  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_87;
  rf::realityFusionLogObject(v2);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v59 = (std::string *)v60[28].__m_.__sig;
    LODWORD(v81.__first_) = 134217984;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v81.__first_ + 4) = v59;
    _os_log_debug_impl(&dword_227777000, v18, OS_LOG_TYPE_DEBUG, "LoggingConsumer saveFullSnapshotRequested for frame %lu", (uint8_t *)&v81, 0xCu);
  }

  if (*(char *)(a1 + 215) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
  else
    v72 = *(std::string *)(a1 + 192);
  v19 = *(_OWORD *)(a1 + 240);
  v73 = *(_OWORD *)(a1 + 224);
  v74 = v19;
  v20 = *(_OWORD *)(a1 + 272);
  v75 = *(_OWORD *)(a1 + 256);
  v76 = v20;
  v21 = v77;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 288);
  v79 = *(_DWORD *)(a1 + 320);
  v80 = *(_WORD *)(a1 + 324);
  v62.i64[0] = a1;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v63, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v63 = v72;
  v64 = v73;
  v65 = v74;
  v66 = v75;
  v67 = v76;
  v22 = v68;
  v23 = (uint64_t)v78;
  if (!v78)
    goto LABEL_56;
  if (v78 != v77)
  {
    v23 = (*(uint64_t (**)(void))(*v78 + 16))();
LABEL_56:
    v69 = (_QWORD *)v23;
    goto LABEL_58;
  }
  v69 = v68;
  (*(void (**)(_QWORD *, _QWORD *))(v77[0] + 24))(v77, v68);
LABEL_58:
  v70 = v79;
  v71 = v80;
  v25 = *(NSObject **)(a1 + 352);
  v24 = *(NSObject **)(a1 + 360);
  v81.__first_ = v3;
  v81.__begin_ = (std::__split_buffer<std::string>::pointer)3321888768;
  v81.__end_ = (std::__split_buffer<std::string>::pointer)___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__1cvU13block_pointerFvvEEv_block_invoke;
  v81.__end_cap_.__value_ = (std::string *)&__block_descriptor_192_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1_e5_v8__0l;
  v81.__end_cap_.__value_ = (std::allocator<std::string> *)v62.i64[0];
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    __p = v63;
  v83 = v64;
  v84 = v65;
  v85 = v66;
  v86 = v67;
  v26 = v87;
  v27 = (uint64_t)v69;
  if (!v69)
    goto LABEL_64;
  if (v69 != v68)
  {
    v27 = (*(uint64_t (**)(void))(*v69 + 16))();
LABEL_64:
    v88 = (_BYTE *)v27;
    goto LABEL_66;
  }
  v88 = v87;
  (*(void (**)(_QWORD *, _BYTE *))(v68[0] + 24))(v68, v87);
LABEL_66:
  v89 = v70;
  v90 = v71;
  v28 = (void *)MEMORY[0x22E29E0BC](&v81);
  if (v88 == v87)
  {
    v29 = 4;
  }
  else
  {
    if (!v88)
      goto LABEL_71;
    v29 = 5;
    v26 = v88;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v29))(v26);
LABEL_71:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  dispatch_group_async(v24, v25, v28);

  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::reset[abi:ne180100](a1 + 192);
  if (v69 == v68)
  {
    v30 = 4;
  }
  else
  {
    if (!v69)
      goto LABEL_78;
    v30 = 5;
    v22 = v69;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v30))(v22);
LABEL_78:
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v78 == v77)
  {
    v31 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_85;
    v31 = 5;
    v21 = v78;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v31))(v21);
LABEL_85:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
LABEL_87:
  v32 = *(std::__split_buffer<std::string>::pointer **)(a1 + 368);
  v33 = *(std::__split_buffer<std::string>::pointer **)(a1 + 376);
  if (v33 != v32 && *(_QWORD *)&v60[32].__m_.__opaque[8])
  {
    v62 = 0uLL;
    v63.__r_.__value_.__r.__words[0] = 0;
    v34 = *(_QWORD **)v60[32].__m_.__opaque;
    if (v34)
    {
      do
      {
        if (!*(_BYTE *)(v34[6] + 376))
          std::__throw_bad_optional_access[abi:ne180100]();
        v35 = objc_retainAutorelease((id)REAssetHandleCopyAssetIdentifierString());
        std::string::basic_string[abi:ne180100]<0>(&v72, (char *)objc_msgSend(v35, "UTF8String"));
        CFRelease(v35);
        v36 = (_OWORD *)v62.i64[1];
        if (v62.i64[1] >= v63.__r_.__value_.__r.__words[0])
        {
          v38 = 0xAAAAAAAAAAAAAAABLL * ((v62.i64[1] - v62.i64[0]) >> 3);
          v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v63.__r_.__value_.__r.__words[0] - v62.i64[0]) >> 3) > v39)
            v39 = 0x5555555555555556 * ((uint64_t)(v63.__r_.__value_.__r.__words[0] - v62.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63.__r_.__value_.__r.__words[0] - v62.i64[0]) >> 3) >= 0x555555555555555)
            v40 = 0xAAAAAAAAAAAAAAALL;
          else
            v40 = v39;
          v81.__end_cap_.__value_ = (std::allocator<std::string> *)&v63;
          if (v40)
            v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v63, v40);
          else
            v41 = 0;
          begin = (std::string *)((char *)v41 + 8 * ((v62.i64[1] - v62.i64[0]) >> 3));
          v81.__first_ = v41;
          v81.__begin_ = begin;
          v81.__end_ = begin;
          v81.__end_cap_.__value_ = &v41[v40];
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(begin, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
            begin = v81.__begin_;
            end = v81.__end_;
          }
          else
          {
            v44 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
            begin->__r_.__value_.__r.__words[2] = v72.__r_.__value_.__r.__words[2];
            *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v44;
            end = v41 + v38;
          }
          v47 = v62.i64[1];
          v46 = v62.i64[0];
          if (v62.i64[1] == v62.i64[0])
          {
            v49 = vdupq_n_s64(v62.u64[1]);
          }
          else
          {
            do
            {
              v48 = *(_OWORD *)(v47 - 24);
              begin[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 8);
              *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v48;
              --begin;
              *(_QWORD *)(v47 - 16) = 0;
              *(_QWORD *)(v47 - 8) = 0;
              *(_QWORD *)(v47 - 24) = 0;
              v47 -= 24;
            }
            while (v47 != v46);
            v49 = v62;
          }
          v42 = end + 1;
          v62.i64[0] = (uint64_t)begin;
          v62.i64[1] = (uint64_t)&end[1];
          *(int64x2_t *)&v81.__begin_ = v49;
          v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v81.__end_cap_.__value_;
          v81.__end_cap_.__value_ = v50;
          v81.__first_ = (std::__split_buffer<std::string>::pointer)v49.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v81);
        }
        else
        {
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v62.i64[1], v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else
          {
            v37 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
            *(_QWORD *)(v62.i64[1] + 16) = *((_QWORD *)&v72.__r_.__value_.__l + 2);
            *v36 = v37;
          }
          v42 = (std::__split_buffer<std::string>::pointer)((char *)v36 + 24);
        }
        v62.i64[1] = (uint64_t)v42;
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);

        v34 = (_QWORD *)*v34;
      }
      while (v34);
      v32 = *(std::__split_buffer<std::string>::pointer **)(a1 + 368);
      v33 = *(std::__split_buffer<std::string>::pointer **)(a1 + 376);
    }
    for (; v32 != v33; v32 += 2)
    {
      v51 = *v32;
      v52 = v32[1];
      v81.__first_ = *v32;
      v81.__begin_ = v52;
      if (v52)
      {
        p_size = &v52->__r_.__value_.__l.__size_;
        do
          v54 = __ldxr(p_size);
        while (__stxr(v54 + 1, p_size));
      }
      v55 = v51[3].__r_.__value_.__r.__words[2];
      if (v55)
      {
        v61 = v60[28].__m_.__sig;
        (*(void (**)(std::string::size_type, uint64_t *, int64x2_t *))(*(_QWORD *)v55 + 48))(v55, &v61, &v62);
      }
      if (v52)
      {
        v56 = &v52->__r_.__value_.__l.__size_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          (*(void (**)(std::string *))(v52->__r_.__value_.__r.__words[0] + 16))(v52);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v52);
        }
      }
    }
    v81.__first_ = (std::__split_buffer<std::string>::pointer)&v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  }
  std::mutex::unlock(v60);
}

void sub_2277933DC(_Unwind_Exception *a1, uint64_t a2, std::mutex *a3, uint64_t a4, char a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__split_buffer<std::string> *a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(rf::ConsumerRequest const&)::$_0::~$_0((uint64_t)&a16);
  rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest((rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *)&a39);
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(rf::ConsumerRequest const&)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 112);
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest(rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 96;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

double std::__fs::filesystem::path::stem[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__stem(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::extension[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

std::string *rf::data_flow::consumer::LoggingConsumer::requestSaveFullSnapshot(std::string *this, std::string *a2)
{
  NSObject *v4;
  uint8_t v6[16];

  rf::realityFusionLogObject((rf *)this);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_debug_impl(&dword_227777000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer::requestSaveFullSnapshot", v6, 2u);
  }

  return std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>(this + 8, a2);
}

std::string *std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>(std::string *this, std::string *__str)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::pointer data;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v19[3];
  std::string::pointer v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  if (this[6].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    v4 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[1];
    v6 = *(_OWORD *)&__str[1].__r_.__value_.__r.__words[1];
    v5 = *(_OWORD *)&__str[2].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[2].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v4;
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v5;
    std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)&__str[4]);
    v7 = this + 4;
    if (v19 != (_QWORD *)&this[4])
    {
      v8 = (std::string::size_type)v20;
      data = this[5].__r_.__value_.__l.__data_;
      if (v20 == (std::string::pointer)v19)
      {
        if (data == (std::string::pointer)v7)
        {
          (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v21);
          (*(void (**)(std::string::pointer))(*(_QWORD *)v20 + 32))(v20);
          v20 = 0;
          (*(void (**)(std::string::size_type, _QWORD *))(*(_QWORD *)this[5].__r_.__value_.__l.__data_ + 24))(this[5].__r_.__value_.__r.__words[0], v19);
          (*(void (**)(std::string::size_type))(*(_QWORD *)this[5].__r_.__value_.__l.__data_ + 32))(this[5].__r_.__value_.__r.__words[0]);
          this[5].__r_.__value_.__r.__words[0] = 0;
          v20 = (std::string::pointer)v19;
          (*(void (**)(_QWORD *, std::string *))(v21[0] + 24))(v21, this + 4);
          (*(void (**)(_QWORD *))(v21[0] + 32))(v21);
        }
        else
        {
          (*(void (**)(_QWORD *, std::string *))(v19[0] + 24))(v19, this + 4);
          (*(void (**)(std::string::pointer))(*(_QWORD *)v20 + 32))(v20);
          v20 = this[5].__r_.__value_.__l.__data_;
        }
        this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      }
      else if (data == (std::string::pointer)v7)
      {
        (*(void (**)(std::string *, _QWORD *))(v7->__r_.__value_.__r.__words[0] + 24))(this + 4, v19);
        (*(void (**)(std::string::size_type))(*(_QWORD *)this[5].__r_.__value_.__l.__data_ + 32))(this[5].__r_.__value_.__r.__words[0]);
        this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
        v20 = (std::string::pointer)v19;
      }
      else
      {
        v20 = this[5].__r_.__value_.__l.__data_;
        this[5].__r_.__value_.__r.__words[0] = v8;
      }
    }
    v15 = v20;
    if (v20 == (std::string::pointer)v19)
    {
      v16 = 4;
      v15 = v19;
    }
    else
    {
      if (!v20)
      {
LABEL_20:
        v17 = __str[5].__r_.__value_.__r.__words[1];
        WORD2(this[5].__r_.__value_.__r.__words[1]) = WORD2(__str[5].__r_.__value_.__r.__words[1]);
        LODWORD(this[5].__r_.__value_.__r.__words[1]) = v17;
        return this;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_20;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v10 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *(_OWORD *)&__str[1].__r_.__value_.__r.__words[1];
  v12 = *(_OWORD *)&__str[2].__r_.__value_.__l.__data_;
  v13 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v13;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v11;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v12;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)&this[4], (uint64_t)&__str[4]);
  v14 = __str[5].__r_.__value_.__r.__words[1];
  WORD2(this[5].__r_.__value_.__r.__words[1]) = WORD2(__str[5].__r_.__value_.__r.__words[1]);
  LODWORD(this[5].__r_.__value_.__r.__words[1]) = v14;
  this[6].__r_.__value_.__s.__data_[0] = 1;
  return this;
}

void sub_227793A2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

std::string *rf::data_flow::consumer::LoggingConsumer::startSavingSnapshots(rf::data_flow::consumer::LoggingConsumer *this, std::string *a2)
{
  NSObject *v4;
  uint8_t v6[16];

  rf::realityFusionLogObject(this);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_debug_impl(&dword_227777000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer::startSavingSnapshots", v6, 2u);
  }

  return std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>((std::string *)((char *)this + 32), a2);
}

void std::vector<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    if (v5 == v10)
    {
      v9 = v16 + 16;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v9 = v16 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
      while ((_QWORD *)v22 != v10)
      {
        v22 -= 16;
        std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v5 = *(_QWORD *)a2;
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

uint64_t rf::data_flow::consumer::LoggingConsumer::removeCallbacks(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v4 = *(_QWORD *)(result + 368);
  v3 = *(_QWORD *)(result + 376);
  if (v4 != v3)
  {
    while (*(_QWORD *)v4 != *a2)
    {
      v4 += 16;
      if (v4 == v3)
      {
        v4 = *(_QWORD *)(result + 376);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    if (v4 + 16 == v3)
    {
      v5 = v4;
    }
    else
    {
      v5 = v4;
      do
      {
        result = std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>::operator=[abi:ne180100](v4, (__int128 *)(v4 + 16));
        v5 += 16;
        v6 = v4 + 32;
        v4 += 16;
      }
      while (v6 != v3);
      v3 = *(_QWORD *)(v2 + 376);
    }
    while (v3 != v5)
    {
      v3 -= 16;
      result = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v3);
    }
    *(_QWORD *)(v2 + 376) = v5;
  }
  return result;
}

uint64_t std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 144))
    return a1;
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__0cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  float32x4_t v3;
  float32x4_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *j;
  uint64_t *k;
  uint64_t *m;
  _QWORD *n;
  _QWORD *ii;
  uint64_t *jj;
  uint64_t *kk;
  _QWORD *mm;
  _QWORD *nn;
  int v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  rf *v30;
  NSObject *v31;
  rf *v32;
  NSObject *v33;
  std::string::size_type *v34;
  std::string::size_type *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *p_pn;
  std::string __p;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string pn;
  __int128 v52;
  std::string::size_type v53;
  std::__fs::filesystem::path v54;
  _QWORD v55[4];
  std::string v56;
  float32x4_t v57[4];
  _BYTE v58[24];
  _BYTE *v59;
  int v60;
  __int16 v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    v56 = *(std::string *)(a1 + 48);
  v3 = *(float32x4_t *)(a1 + 96);
  v57[0] = *(float32x4_t *)(a1 + 80);
  v57[1] = v3;
  v4 = *(float32x4_t *)(a1 + 128);
  v57[2] = *(float32x4_t *)(a1 + 112);
  v57[3] = v4;
  v5 = v58;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v58, a1 + 144);
  v60 = *(_DWORD *)(a1 + 176);
  v61 = *(_WORD *)(a1 + 180);
  v6 = v2[1];
  std::mutex::lock((std::mutex *)v6);
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v55, 0);
  rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale((rf::synthetic::SyntheticUsdKitParser *)v55, 1.0);
  LODWORD(v7) = v60;
  if ((_BYTE)v60)
  {
    if (*(_QWORD *)(v6 + 1824) || (v7 = *(_QWORD *)(v6 + 1864)) != 0)
    {
      for (i = *(uint64_t **)(v6 + 1816); i; i = (uint64_t *)*i)
      {
        v54.__pn_.__r_.__value_.__s.__data_[0] = 3;
        rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)i + 6, v57, (unsigned __int8 *)&v54);
      }
      for (j = *(uint64_t **)(v6 + 1856); j; j = (uint64_t *)*j)
      {
        v54.__pn_.__r_.__value_.__s.__data_[0] = 3;
        rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)j + 6, v57, (unsigned __int8 *)&v54);
      }
      LODWORD(v7) = 1;
    }
  }
  if (HIBYTE(v61) && (*(_QWORD *)(v6 + 1944) || *(_QWORD *)(v6 + 1984)))
  {
    for (k = *(uint64_t **)(v6 + 1936); k; k = (uint64_t *)*k)
    {
      v54.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)k + 6, v57, (unsigned __int8 *)&v54);
    }
    for (m = *(uint64_t **)(v6 + 1976); m; m = (uint64_t *)*m)
    {
      v54.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)m + 6, v57, (unsigned __int8 *)&v54);
    }
    LODWORD(v7) = 1;
  }
  if (BYTE1(v60) && (*(_QWORD *)(v6 + 2304) || *(_QWORD *)(v6 + 2344)))
  {
    for (n = (_QWORD *)(v6 + 2296);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v55, n[6], (__int128 *)v57))
    {
      n = (_QWORD *)*n;
      if (!n)
        break;
    }
    for (ii = (_QWORD *)(v6 + 2336);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v55, ii[6], (__int128 *)v57))
    {
      ii = (_QWORD *)*ii;
      if (!ii)
        break;
    }
    LODWORD(v7) = 1;
  }
  if (HIBYTE(v60) && *(_QWORD *)(v6 + 2064))
  {
    for (jj = *(uint64_t **)(v6 + 2056); jj; jj = (uint64_t *)*jj)
    {
      v54.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)jj + 6, v57, (unsigned __int8 *)&v54);
    }
    LODWORD(v7) = 1;
  }
  if ((_BYTE)v61 && *(_QWORD *)(v6 + 2104))
  {
    for (kk = *(uint64_t **)(v6 + 2096); kk; kk = (uint64_t *)*kk)
    {
      v54.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v55, (_OWORD **)kk + 6, v57, (unsigned __int8 *)&v54);
    }
    LODWORD(v7) = 1;
  }
  if (BYTE2(v60) && (*(_QWORD *)(v6 + 2424) || *(_QWORD *)(v6 + 2464)))
  {
    for (mm = (_QWORD *)(v6 + 2416);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v55, mm[6], v57))
    {
      mm = (_QWORD *)*mm;
      if (!mm)
        break;
    }
    for (nn = (_QWORD *)(v6 + 2456);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v55, nn[6], v57))
    {
      nn = (_QWORD *)*nn;
      if (!nn)
        break;
    }
  }
  else if (!(_DWORD)v7)
  {
    goto LABEL_112;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v54.__pn_, (std::string **)&v56);
  std::__fs::filesystem::path::stem[abi:ne180100]((uint64_t)&v49, &v54);
  v18 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v50 = v49;
  v19 = std::string::append(&v50, "_", 1uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v48, *(_QWORD *)(v6 + 1792));
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v48;
  else
    v21 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    size = v48.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v62, (const std::string::value_type *)v21, size);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  pn.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&__p, &v54);
  v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v47 = __p;
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v47;
  else
    v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v27 = v47.__r_.__value_.__l.__size_;
  v28 = std::string::append(&pn, (const std::string::value_type *)v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v53 = v28->__r_.__value_.__r.__words[2];
  v52 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_70;
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_70:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_83:
    operator delete(v49.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  if (v18 < 0)
    goto LABEL_83;
LABEL_78:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v62, (std::string **)&v52);
  std::__fs::filesystem::path::remove_filename[abi:ne180100](&v54);
  std::__fs::filesystem::path::operator/=[abi:ne180100](&v54, (std::__fs::filesystem::path *)&v62);
  if (SHIBYTE(v54.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v54.__pn_.__r_.__value_.__l.__data_, v54.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v54.__pn_;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v30 = (rf *)rf::synthetic::SyntheticUsdKitParser::save((uint64_t)v55, (uint64_t *)&pn);
  if ((_DWORD)v30)
  {
    rf::realityFusionLogObject(v30);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      v44 = *(_QWORD *)(v6 + 1792);
      LODWORD(v62.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = v44;
      _os_log_debug_impl(&dword_227777000, v31, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot for frame %lu", (uint8_t *)&v62, 0xCu);
    }

    rf::realityFusionLogObject(v32);
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      p_pn = &pn;
      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
      LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_pn;
      _os_log_debug_impl(&dword_227777000, v33, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot at path: %s", (uint8_t *)&v62, 0xCu);
    }

    if (v59)
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v59 + 48))(v59, &pn);
    v34 = (std::string::size_type *)v2[46];
    v35 = (std::string::size_type *)v2[47];
    while (v34 != v35)
    {
      v36 = *v34;
      v37 = (std::__shared_weak_count *)v34[1];
      v62.__r_.__value_.__r.__words[0] = *v34;
      v62.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
      }
      v40 = *(_QWORD *)(v36 + 24);
      if (v40)
      {
        v50.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 1792);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 48))(v40, &v50);
      }
      if (v37)
      {
        v41 = (unint64_t *)&v37->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v34 += 2;
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v54.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__pn_.__r_.__value_.__l.__data_);
LABEL_112:

  std::mutex::unlock((std::mutex *)v6);
  if (v59 == v58)
  {
    v43 = 4;
  }
  else
  {
    if (!v59)
      goto LABEL_117;
    v43 = 5;
    v5 = v59;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v43))(v5);
LABEL_117:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_22779446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,void *a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  _QWORD *v71;
  std::mutex *v72;
  void *v73;
  int v74;
  uint64_t v75;
  uint64_t v77;

  operator delete(v73);
  if (a38 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v75 - 89) < 0)
    operator delete(*(void **)(v75 - 112));
  if (a31 < 0)
    operator delete(a26);
  if (v74 < 0)
    operator delete(a23);
  if (a48 < 0)
    operator delete(a43);

  std::mutex::unlock(v72);
  if ((_QWORD *)a71 == v71)
  {
    v77 = 4;
  }
  else
  {
    if (!a71)
      goto LABEL_18;
    v77 = 5;
    v71 = (_QWORD *)a71;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v77))(v71);
LABEL_18:
  if (a58 < 0)
    operator delete(a53);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  int v9;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  v9 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 180) = *(_WORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return result;
}

void sub_2277946B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 168);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__1cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  float32x4_t v3;
  float32x4_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *j;
  _QWORD *k;
  _QWORD *m;
  int v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  rf *v23;
  NSObject *v24;
  rf *v25;
  NSObject *v26;
  std::string::size_type *v27;
  std::string::size_type *v28;
  std::string::size_type v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string *p_pn;
  std::string __p;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string pn;
  __int128 v45;
  std::string::size_type v46;
  std::__fs::filesystem::path v47;
  _QWORD v48[4];
  std::string v49;
  float32x4_t v50[4];
  _BYTE v51[24];
  _BYTE *v52;
  int v53;
  __int16 v54;
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    v49 = *(std::string *)(a1 + 48);
  v3 = *(float32x4_t *)(a1 + 96);
  v50[0] = *(float32x4_t *)(a1 + 80);
  v50[1] = v3;
  v4 = *(float32x4_t *)(a1 + 128);
  v50[2] = *(float32x4_t *)(a1 + 112);
  v50[3] = v4;
  v5 = v51;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v51, a1 + 144);
  v53 = *(_DWORD *)(a1 + 176);
  v54 = *(_WORD *)(a1 + 180);
  v6 = v2[1];
  std::mutex::lock((std::mutex *)v6);
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v48, 0);
  rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale((rf::synthetic::SyntheticUsdKitParser *)v48, 1.0);
  if ((_BYTE)v53)
  {
    for (i = *(uint64_t **)(v6 + 80); i; i = (uint64_t *)*i)
    {
      v47.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v48, (_OWORD **)i + 6, v50, (unsigned __int8 *)&v47);
    }
  }
  if (HIBYTE(v54))
  {
    for (j = *(uint64_t **)(v6 + 120); j; j = (uint64_t *)*j)
    {
      v47.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v48, (_OWORD **)j + 6, v50, (unsigned __int8 *)&v47);
    }
  }
  if (BYTE1(v53))
  {
    for (k = (_QWORD *)(v6 + 160);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v48, (uint64_t)(k + 6), (__int128 *)v50))
    {
      k = (_QWORD *)*k;
      if (!k)
        break;
    }
  }
  if (BYTE2(v53))
  {
    for (m = (_QWORD *)(v6 + 408);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v48, (uint64_t)(m + 6), v50))
    {
      m = (_QWORD *)*m;
      if (!m)
        break;
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v47.__pn_, (std::string **)&v49);
  std::__fs::filesystem::path::stem[abi:ne180100]((uint64_t)&v42, &v47);
  v11 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v43 = v42;
  v12 = std::string::append(&v43, "_", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v41, *(_QWORD *)(v6 + 1792));
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v41;
  else
    v14 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v55, (const std::string::value_type *)v14, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  pn.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&__p, &v47);
  v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v40 = __p;
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v40;
  else
    v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    v20 = v40.__r_.__value_.__l.__size_;
  v21 = std::string::append(&pn, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v46 = v21->__r_.__value_.__r.__words[2];
  v45 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_38:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v42.__r_.__value_.__l.__data_);
LABEL_46:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v55, (std::string **)&v45);
  std::__fs::filesystem::path::remove_filename[abi:ne180100](&v47);
  std::__fs::filesystem::path::operator/=[abi:ne180100](&v47, (std::__fs::filesystem::path *)&v55);
  if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v47.__pn_.__r_.__value_.__l.__data_, v47.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v47.__pn_;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v23 = (rf *)rf::synthetic::SyntheticUsdKitParser::save((uint64_t)v48, (uint64_t *)&pn);
  if ((_DWORD)v23)
  {
    rf::realityFusionLogObject(v23);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v37 = *(_QWORD *)(v6 + 1792);
      LODWORD(v55.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = v37;
      _os_log_debug_impl(&dword_227777000, v24, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved full snapshot for frame %lu", (uint8_t *)&v55, 0xCu);
    }

    rf::realityFusionLogObject(v25);
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      p_pn = &pn;
      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
      LODWORD(v55.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_pn;
      _os_log_debug_impl(&dword_227777000, v26, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot at path: %s", (uint8_t *)&v55, 0xCu);
    }

    if (v52)
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v52 + 48))(v52, &pn);
    v28 = (std::string::size_type *)v2[46];
    v27 = (std::string::size_type *)v2[47];
    while (v28 != v27)
    {
      v29 = *v28;
      v30 = (std::__shared_weak_count *)v28[1];
      v55.__r_.__value_.__r.__words[0] = *v28;
      v55.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      v33 = *(_QWORD *)(v29 + 56);
      if (v33)
      {
        v43.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 1792);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 48))(v33, &v43);
      }
      if (v30)
      {
        v34 = (unint64_t *)&v30->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v28 += 2;
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);

  std::mutex::unlock((std::mutex *)v6);
  if (v52 == v51)
  {
    v36 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_85;
    v36 = 5;
    v5 = v52;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v36))(v5);
LABEL_85:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_227794CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,void *a58)
{
  _QWORD *v58;
  std::mutex *v59;
  void *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  operator delete(v60);
  if (a41 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v62 - 73) < 0)
    operator delete(*(void **)(v62 - 96));
  if (a34 < 0)
    operator delete(a29);
  if (v61 < 0)
    operator delete(a26);
  if (a54 < 0)
    operator delete(a49);

  std::mutex::unlock(v59);
  v63 = *(_QWORD **)(v62 - 120);
  if (v63 == v58)
  {
    v64 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_18;
    v64 = 5;
    v58 = *(_QWORD **)(v62 - 120);
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v64))(v58);
LABEL_18:
  if (*(char *)(v62 - 217) < 0)
    operator delete(*(void **)(v62 - 240));
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  int v9;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  v9 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 180) = *(_WORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return result;
}

void sub_227794F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 168);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 144))
    return;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_BYTE *)(a1 + 144) = 0;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2;
  std::string::size_type v3;

  v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

uint64_t std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *this, std::string **a2)
{
  int v3;
  std::string *v4;
  size_t v5;
  std::string *v7;
  uint64_t i;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void **__dst;
  size_t v16;
  int64_t v17;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = (std::string *)a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v5)
  {
    if (v4 >= this && (std::string *)((char *)&this->__r_.__value_.__l.__data_ + 1) > v4)
    {
      if (v5 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v5 > 0x16)
      {
        v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v10 = v5 | 7;
        v11 = v10 + 1;
        p_dst = (void **)operator new(v10 + 1);
        v16 = v5;
        v17 = v11 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = v5;
        p_dst = (void **)&__dst;
      }
      memcpy(p_dst, v4, v5);
      *((_BYTE *)p_dst + v5) = 0;
      if (v17 >= 0)
        v12 = (const std::string::value_type *)&__dst;
      else
        v12 = (const std::string::value_type *)__dst;
      if (v17 >= 0)
        v13 = HIBYTE(v17);
      else
        v13 = v16;
      std::string::append(this, v12, v13);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst);
    }
    else
    {
      v7 = this;
      if (v5 >= 0x17)
      {
        std::string::__grow_by(this, 0x16uLL, v5 - 22, 0, 0, 0, 0);
        this->__r_.__value_.__l.__size_ = 0;
        v7 = this;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          v7 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      for (i = 0; i != v5; ++i)
        v7->__r_.__value_.__s.__data_[i] = v4->__r_.__value_.__s.__data_[i];
      v7->__r_.__value_.__s.__data_[i] = 0;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v5;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v5 & 0x7F;
    }
  }
  return this;
}

void sub_2277953E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorPtrGetIdentifierPtr(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD7FA0[v1])(&v4, a1);
}

uint64_t RFAnchorPtrGetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v4 = &v5;
  v5 = a2;
  v2 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24EFD7FD0[v2])(&v6, a1);
}

uint64_t RFAnchorPtrSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EFD8000[v2])(&v5, a1);
}

uint64_t RFAnchorPtrGetType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[256];
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, a1);
  if (v5 == 5)
    v1 = 5;
  else
    v1 = 0;
  if (v5 >= 5)
    v2 = v1;
  else
    v2 = v5;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2;
}

uint64_t RFAnchorPtrCopyDescription(uint64_t a1)
{
  uint64_t DebugDescriptionForAnchor;
  _QWORD v3[36];

  v3[35] = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, a1);
  DebugDescriptionForAnchor = rf::helpers::getDebugDescriptionForAnchor((uint64_t)v3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return DebugDescriptionForAnchor;
}

void sub_2277955EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorPtrGetTrackable()
{
  return 1;
}

uint64_t RFAnchorPtrGetTracked(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD8030[v1])(&v4, a1);
}

uint64_t RFAnchorPtrSetTracked(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  char *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD8060[v2])(&v5, a1);
}

__n128 RFAnchorPtrGetTransform(uint64_t a1)
{
  __int128 v1;
  __int128 v3;
  char v4;
  char *v5;
  _BYTE v6[256];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6, a1);
  if (v7 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  *(double *)&v1 = ((double (*)(char **, _BYTE *))off_24EFD8090[v7])(&v5, v6);
  v3 = v1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
  return (__n128)v3;
}

void sub_227795750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorPtrSetTransform(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  _OWORD v7[4];
  _OWORD *v8;

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  v5 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v8 = v7;
  return ((uint64_t (*)(_OWORD **, uint64_t))off_24EFD80C0[v5])(&v8, a1);
}

uint64_t RFAnchorPtrGetAlignment(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;

  if (*(_DWORD *)(a1 + 256) == 1)
  {
    v1 = *(_DWORD *)(a1 + 208);
    if (v1 == 1)
      v2 = 2;
    else
      v2 = -1;
    if (v1)
      return v2;
    else
      return 1;
  }
  else
  {
    return -1;
  }
}

void RFAnchorPtrSetAlignment(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  uint8_t v5[16];

  if (a1 && *(_DWORD *)(a1 + 256) == 1)
  {
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        v3 = 1;
        goto LABEL_10;
      }
      rf::realityFusionLogObject((rf *)a1);
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v5 = 0;
        _os_log_error_impl(&dword_227777000, v4, OS_LOG_TYPE_ERROR, "RFAnchorPtrSetAlignment: Setting kREAnchoringAlignmentAny to the anchor.", v5, 2u);
      }

    }
    v3 = 0;
LABEL_10:
    if (*(_DWORD *)(a1 + 208) != v3)
    {
      *(_DWORD *)(a1 + 208) = v3;
      *(_BYTE *)(a1 + 104) = 1;
    }
  }
}

uint64_t RFAnchorPtrGetClassification(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[212];
  int v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, a1);
  if (v5 == 1 && (v4 - 1) <= 4)
    v1 = qword_2277EFA48[v4 - 1];
  else
    v1 = -1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return v1;
}

void RFAnchorPtrSetClassification(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  __int16 v7[8];

  if (a1 && *(_DWORD *)(a1 + 256) == 1)
  {
    v3 = *(_DWORD *)(a1 + 212);
    v4 = 1;
    v5 = v3;
    switch(a2)
    {
      case 1:
        goto LABEL_13;
      case 2:
        v4 = 2;
        goto LABEL_12;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_7;
      case 4:
        v4 = 3;
        goto LABEL_12;
      case 8:
        v4 = 4;
        goto LABEL_12;
      default:
        if (a2 == 16)
        {
          v4 = 5;
LABEL_12:
          v5 = *(_DWORD *)(a1 + 212);
        }
        else
        {
LABEL_7:
          rf::realityFusionLogObject((rf *)a1);
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            v7[0] = 0;
            _os_log_error_impl(&dword_227777000, v6, OS_LOG_TYPE_ERROR, "RFAnchorPtrSetClassification: Cannot recognize the classification.", (uint8_t *)v7, 2u);
          }

          v5 = *(_DWORD *)(a1 + 212);
          v4 = v3;
        }
LABEL_13:
        if (v5 != v4)
        {
          *(_DWORD *)(a1 + 212) = v4;
          *(_BYTE *)(a1 + 104) = 1;
        }
        break;
    }
  }
}

__n128 RFAnchorPtrGetCenter(__n128 *a1)
{
  __n128 result;

  result.n128_u64[0] = 0;
  if (a1[16].n128_u32[0] == 1)
    return a1[11];
  return result;
}

float32x4_t *RFAnchorPtrSetCenter(float32x4_t *result, float32x4_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;

  if (result)
  {
    if (result[16].i32[0] == 1)
    {
      a2.i32[3] = 1.0;
      v2 = vaddq_f32(result[8], (float32x4_t)xmmword_2277EFA70);
      v3 = (int8x16_t)vmulq_f32(v2, v2);
      if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) >= 1.0e-10
        || (v4 = vaddq_f32(result[9], (float32x4_t)xmmword_2277EFA90),
            v5 = (int8x16_t)vmulq_f32(v4, v4),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) >= 1.0e-10)
        || (v6 = vaddq_f32(result[10], (float32x4_t)xmmword_2277EFA80),
            v7 = (int8x16_t)vmulq_f32(v6, v6),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10)
        || (v8 = vsubq_f32(result[11], a2),
            v9 = (int8x16_t)vmulq_f32(v8, v8),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10))
      {
        result[8] = (float32x4_t)xmmword_2277EE440;
        result[9] = (float32x4_t)xmmword_2277EE450;
        result[10] = (float32x4_t)xmmword_2277EE460;
        result[11] = a2;
        result[6].i8[8] = 1;
      }
    }
  }
  return result;
}

__n128 RFAnchorPtrGetExtent(__n128 *a1)
{
  __n128 result;

  result.n128_u64[0] = 0;
  if (a1[16].n128_u32[0] == 1)
    return a1[12];
  return result;
}

float32x4_t *RFAnchorPtrSetExtent(float32x4_t *result, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;

  if (result && result[16].i32[0] == 1)
  {
    v2 = vsubq_f32(a2, result[12]);
    v3 = vmulq_f32(v2, v2);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]) >= 1.0e-10)
    {
      result[12] = a2;
      result[6].i8[8] = 1;
    }
  }
  return result;
}

CFStringRef RFAnchorPtrCopyReferenceName(uint64_t a1)
{
  int v1;
  const __CFAllocator *v2;
  const char *v3;
  const __CFAllocator *v4;

  v1 = *(_DWORD *)(a1 + 256);
  if (v1 == 3)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v3 = (const char *)(a1 + 128);
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v1 != 2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v3 = "";
    return CFStringCreateWithCString(v4, v3, 0x8000100u);
  }
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
LABEL_4:
    v3 = *(const char **)v3;
LABEL_5:
  v4 = v2;
  return CFStringCreateWithCString(v4, v3, 0x8000100u);
}

void RFAnchorPtrSetReferenceName(uint64_t a1, const __CFString *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v13;
  std::string __str;

  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  if (!a1)
    goto LABEL_39;
  v3 = *(_DWORD *)(a1 + 256);
  if (v3 == 3)
  {
    v9 = *(unsigned __int8 *)(a1 + 151);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(a1 + 151);
    else
      v10 = *(_QWORD *)(a1 + 136);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v10 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 128), p_str, *(_QWORD *)(a1 + 136)))
          goto LABEL_39;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 151))
          goto LABEL_39;
        v13 = (unsigned __int8 *)(a1 + 128);
        while (*v13 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v13;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v9)
            goto LABEL_39;
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 128), &__str);
  }
  else
  {
    if (v3 != 2)
      goto LABEL_39;
    v4 = *(unsigned __int8 *)(a1 + 159);
    if ((v4 & 0x80u) == 0)
      v5 = *(unsigned __int8 *)(a1 + 159);
    else
      v5 = *(_QWORD *)(a1 + 144);
    v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = __str.__r_.__value_.__l.__size_;
    if (v5 == v6)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &__str;
      else
        v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v4 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 136), v7, *(_QWORD *)(a1 + 144)))
          goto LABEL_39;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 159))
          goto LABEL_39;
        v8 = (unsigned __int8 *)(a1 + 136);
        while (*v8 == v7->__r_.__value_.__s.__data_[0])
        {
          ++v8;
          v7 = (std::string *)((char *)v7 + 1);
          if (!--v4)
            goto LABEL_39;
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 136), &__str);
  }
  *(_BYTE *)(a1 + 104) = 1;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_227795D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef RFAnchorPtrCopyReferenceGroup(uint64_t a1)
{
  int v1;
  const __CFAllocator *v2;
  const char *v3;
  const __CFAllocator *v4;

  v1 = *(_DWORD *)(a1 + 256);
  if (v1 == 3)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v3 = (const char *)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v1 != 2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v3 = "";
    return CFStringCreateWithCString(v4, v3, 0x8000100u);
  }
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const char *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
LABEL_4:
    v3 = *(const char **)v3;
LABEL_5:
  v4 = v2;
  return CFStringCreateWithCString(v4, v3, 0x8000100u);
}

void RFAnchorPtrSetReferenceGroup(uint64_t a1, const __CFString *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v13;
  std::string __str;

  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  if (!a1)
    goto LABEL_39;
  v3 = *(_DWORD *)(a1 + 256);
  if (v3 == 3)
  {
    v9 = *(unsigned __int8 *)(a1 + 175);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(a1 + 175);
    else
      v10 = *(_QWORD *)(a1 + 160);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v10 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 152), p_str, *(_QWORD *)(a1 + 160)))
          goto LABEL_39;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 175))
          goto LABEL_39;
        v13 = (unsigned __int8 *)(a1 + 152);
        while (*v13 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v13;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v9)
            goto LABEL_39;
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 152), &__str);
  }
  else
  {
    if (v3 != 2)
      goto LABEL_39;
    v4 = *(unsigned __int8 *)(a1 + 183);
    if ((v4 & 0x80u) == 0)
      v5 = *(unsigned __int8 *)(a1 + 183);
    else
      v5 = *(_QWORD *)(a1 + 168);
    v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = __str.__r_.__value_.__l.__size_;
    if (v5 == v6)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &__str;
      else
        v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v4 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 160), v7, *(_QWORD *)(a1 + 168)))
          goto LABEL_39;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 183))
          goto LABEL_39;
        v8 = (unsigned __int8 *)(a1 + 160);
        while (*v8 == v7->__r_.__value_.__s.__data_[0])
        {
          ++v8;
          v7 = (std::string *)((char *)v7 + 1);
          if (!--v4)
            goto LABEL_39;
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 160), &__str);
  }
  *(_BYTE *)(a1 + 104) = 1;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_227795FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ***a1, uint64_t a2)
{
  __int128 *v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  v8 = *v3;
  if (*(_BYTE *)(a2 + 16))
    v4 = *(const unsigned __int8 **)a2;
  else
    v4 = (const unsigned __int8 *)a2;
  if ((_BYTE)v9)
    v5 = (const unsigned __int8 *)v8;
  else
    v5 = (const unsigned __int8 *)&v8;
  if (uuid_compare(v4, v5))
  {
    result = *(double *)&v8;
    v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2;

  v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(_BYTE *)(a2 + 99) = v2;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = **result;
  v3 = (*result)[1];
  v4 = (*result)[2];
  v5 = (*result)[3];
  v6 = vsubq_f32(a2[2], v2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (v8 = vsubq_f32(a2[3], v3),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (v10 = vsubq_f32(a2[4], v4),
        v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (v12 = vsubq_f32(a2[5], v5),
        v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

CFStringRef *rf::UserDefaults::UserDefaults(CFStringRef *a1, const UInt8 *a2)
{
  const UInt8 *v2;
  CFIndex v4;
  CFIndex v5;
  CFStringRef v6;
  uint64_t v7;
  const void *v8;
  CFStringRef v9;
  void *exception;
  const __CFString *v12;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v5 = v4;
  }
  v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
  *a1 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E29DC30](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = v2[23];
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)v2 + 1);
  if (!v7)
  {
    v8 = (const void *)*MEMORY[0x24BDBD580];
    if (*MEMORY[0x24BDBD580])
      CFRetain((CFTypeRef)*MEMORY[0x24BDBD580]);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v12, v8);
    v9 = *a1;
    *a1 = v12;
    v12 = v9;
    if (v9)
      CFRelease(v9);
  }
  return a1;
}

void sub_227796C00(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::StringRef::~StringRef(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void rf::UserDefaults::getValue(CFStringRef *a1@<X0>, const UInt8 *a2@<X1>, CFPropertyListRef *a3@<X8>)
{
  CFIndex v5;
  CFIndex v6;
  const __CFString *v7;
  const __CFString *v8;
  void *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E29DC30](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v8 = v7;
  *a3 = CFPreferencesCopyAppValue(v7, *a1);
  CFRelease(v8);
}

void sub_227796D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<__CFData const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t rf::UserDefaults::BOOLValue(CFStringRef *a1, const UInt8 *a2)
{
  const __CFNumber *v2;
  CFTypeID v3;
  _BOOL4 v4;
  int v5;
  int valuePtr;
  CFTypeRef cf;

  rf::UserDefaults::getValue(a1, a2, &cf);
  v2 = (const __CFNumber *)cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID() || v3 == CFBooleanGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v2, kCFNumberIntType, &valuePtr);
      v4 = valuePtr != 0;
      v5 = 1;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (v5 << 8);
}

void sub_227796E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t rf::UserDefaults::intValue(CFStringRef *a1, const UInt8 *a2)
{
  const __CFNumber *v2;
  CFTypeID v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v7;
  CFTypeRef cf;

  rf::UserDefaults::getValue(a1, a2, &cf);
  v2 = (const __CFNumber *)cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      v7 = 0;
      CFNumberGetValue(v2, kCFNumberLongLongType, &v7);
      v4 = v7;
      v5 = v7 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | v4;
}

void sub_227796F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t rf::UserDefaults::uintValue(CFStringRef *a1, const UInt8 *a2)
{
  const __CFNumber *v2;
  CFTypeID v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v7;
  CFTypeRef cf;

  rf::UserDefaults::getValue(a1, a2, &cf);
  v2 = (const __CFNumber *)cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      v7 = 0;
      CFNumberGetValue(v2, kCFNumberLongLongType, &v7);
      v4 = v7;
      v5 = v7 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | v4;
}

void sub_227796FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t rf::UserDefaults::floatValue(CFStringRef *a1, const UInt8 *a2)
{
  const __CFNumber *v2;
  CFTypeID v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int valuePtr;
  CFTypeRef cf;

  rf::UserDefaults::getValue(a1, a2, &cf);
  v2 = (const __CFNumber *)cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v2, kCFNumberFloatType, &valuePtr);
      v4 = valuePtr;
      v5 = 0x100000000;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v5 & 0x100000000 | v4;
}

void sub_227797078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x22E29DC30](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return this;
}

void sub_227797110(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_227797220(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t rf::data_flow::validateAnchor(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf9data_flow14validateAnchorERKNS_7variantIJNS7_12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJS9_SA_SB_SC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix
                                                    + v1))(&v4, a1);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, float32x4_t *a2)
{
  int v2;
  BOOL v3;
  float32_t result;
  rf::internal *v6;
  std::string *v7;
  float32x4_t *v8;
  std::string v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  int v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(a2[4]), (int8x16_t)vcgezq_f32(a2[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[2]), (int8x16_t)vcgezq_f32(a2[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[3]), (int8x16_t)vcgezq_f32(a2[3]))))))v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    v8 = a2;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(__p, (rf::data_flow::RFUUID **)&v8);
    rf::internal::logAssert((const char *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v6);
    v10 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(&v9, (rf::data_flow::RFUUID **)&v8);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    v13 = 136315138;
    v14 = v7;
    _os_log_send_and_compose_impl();
    std::string::~string(&v9);
    _os_crash_msg();
    __break(1u);
  }
  result = a2[5].f32[3];
  v8 = a2;
  return result;
}

void sub_2277974F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  rf::data_flow::RFUUID *v2;
  std::string *v3;
  int v4;
  BOOL v5;
  int v7;
  BOOL v8;
  float32_t result;
  rf::internal *v11;
  std::string *v12;
  void **v13;
  rf::internal *v14;
  std::string *v15;
  rf::data_flow::RFUUID *v16;
  void **v17;
  rf::internal *v18;
  std::string *v19;
  int v20;
  uint64_t v21;
  rf::data_flow::RFUUID *v22;
  std::string v23;
  uint64_t v24;
  void *__p[5];
  void *v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v2 = (rf::data_flow::RFUUID *)this;
  v3 = (std::string *)v26;
  v31 = *MEMORY[0x24BDAC8D0];
  v4 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v22 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(__p, &v22);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v11);
    v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v3 = &v23;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v23;
    else
      v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v12;
    v20 = 12;
    v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
LABEL_22:
    v22 = v2;
    rf::data_flow::RFUUID::string(v2, v26);
    if (SBYTE7(v27) < 0)
      operator delete(v26[0]);
    rf::data_flow::RFUUID::string(v2, v26);
    if ((SBYTE7(v27) & 0x80u) == 0)
      v13 = v26;
    else
      v13 = (void **)v26[0];
    rf::getMessage((rf *)"Plane anchor %s center transform cannot contain NaN", __p, v13, v20, v22);
    if (SBYTE7(v27) < 0)
      operator delete(v26[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v14);
    v24 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_0::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v23;
    else
      v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v15;
    LODWORD(v21) = 12;
    v16 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
    v22 = v16;
    rf::data_flow::RFUUID::string(v16, v26);
    if (SBYTE7(v27) < 0)
      operator delete(v26[0]);
    rf::data_flow::RFUUID::string(v16, v26);
    if ((SBYTE7(v27) & 0x80u) == 0)
      v17 = v26;
    else
      v17 = (void **)v26[0];
    rf::getMessage((rf *)"Plane anchor %s extent cannot contain NaN", __p, v17, v21, v22);
    if (SBYTE7(v27) < 0)
      operator delete(v26[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v18);
    v24 = 0;
    memset(&__p[2], 0, 24);
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_1::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v23;
    else
      v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v19;
    _os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
  }
  v22 = (rf::data_flow::RFUUID *)this;
  v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[10]), (int8x16_t)vcgezq_f32(this[10])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[8]), (int8x16_t)vcgezq_f32(this[8])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[9]), (int8x16_t)vcgezq_f32(this[9]))))))v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
    goto LABEL_22;
  v22 = (rf::data_flow::RFUUID *)this;
  result = this[12].f32[2];
  v22 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_227797A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  int v2;
  BOOL v3;
  float32_t result;
  rf::internal *v6;
  std::string *v7;
  rf::data_flow::RFUUID *v8;
  void **v9;
  rf::internal *v10;
  std::string *v11;
  rf::data_flow::RFUUID *v12;
  std::string v13;
  uint64_t v14;
  void *__p[5];
  void *v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    v12 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(__p, &v12);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v6);
    v14 = 0;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(&v13, &v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v13;
    else
      v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v7;
    v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
    v12 = v8;
    rf::data_flow::RFUUID::string(v8, v16);
    if (SBYTE7(v17) < 0)
      operator delete(v16[0]);
    rf::data_flow::RFUUID::string(v8, v16);
    if ((SBYTE7(v17) & 0x80u) == 0)
      v9 = v16;
    else
      v9 = (void **)v16[0];
    rf::getMessage((rf *)"Image anchor %s extent cannot contain NaN", __p, v9, 12, v12);
    if (SBYTE7(v17) < 0)
      operator delete(v16[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v10);
    v14 = 0;
    memset(&__p[2], 0, 24);
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ImageAnchor const&)::$_0::operator()(&v13, &v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v11;
    _os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
  }
  v12 = (rf::data_flow::RFUUID *)this;
  result = this[12].f32[2];
  v12 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_227797D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  int v2;
  BOOL v3;
  float32_t result;
  rf::internal *v6;
  std::string *v7;
  rf::data_flow::RFUUID *v8;
  void **v9;
  rf::internal *v10;
  std::string *v11;
  rf::data_flow::RFUUID *v12;
  void **v13;
  rf::internal *v14;
  std::string *v15;
  uint64_t v16;
  rf::data_flow::RFUUID *v17;
  std::string v18;
  uint64_t v19;
  void *__p[2];
  _DWORD v21[6];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    v17 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(__p, &v17);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v6);
    v19 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v18;
    else
      v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v21[2] = 136315138;
    *(_QWORD *)&v21[3] = v7;
    v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
    v17 = v8;
    rf::data_flow::RFUUID::string(v8, v22);
    if (SBYTE7(v23) < 0)
      operator delete(v22[0]);
    rf::data_flow::RFUUID::string(v8, v22);
    if ((SBYTE7(v23) & 0x80u) == 0)
      v9 = v22;
    else
      v9 = (void **)v22[0];
    rf::getMessage((rf *)"Object anchor %s center cannot contain NaN", __p, v9, 12, v17);
    if (SBYTE7(v23) < 0)
      operator delete(v22[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v10);
    v19 = 0;
    memset(v21, 0, sizeof(v21));
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_0::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v18;
    else
      v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v21[2] = 136315138;
    *(_QWORD *)&v21[3] = v11;
    LODWORD(v16) = 12;
    v12 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
    v17 = v12;
    rf::data_flow::RFUUID::string(v12, v22);
    if (SBYTE7(v23) < 0)
      operator delete(v22[0]);
    rf::data_flow::RFUUID::string(v12, v22);
    if ((SBYTE7(v23) & 0x80u) == 0)
      v13 = v22;
    else
      v13 = (void **)v22[0];
    rf::getMessage((rf *)"Object anchor %s extent cannot contain NaN", __p, v13, v16, v17);
    if (SBYTE7(v23) < 0)
      operator delete(v22[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v14);
    v19 = 0;
    memset(v21, 0, sizeof(v21));
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_1::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v18;
    else
      v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v21[2] = 136315138;
    *(_QWORD *)&v21[3] = v15;
    _os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
  }
  v17 = (rf::data_flow::RFUUID *)this;
  result = this[14].f32[2];
  v17 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_227798240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  rf::data_flow::RFUUID *v2;
  std::string *v3;
  int v4;
  BOOL v5;
  int v7;
  BOOL v8;
  float32_t result;
  rf::internal *v11;
  std::string *v12;
  void **v13;
  rf::internal *v14;
  std::string *v15;
  void **v16;
  rf::internal *v17;
  std::string *v18;
  uint64_t v19;
  rf::data_flow::RFUUID *v20;
  std::string v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  int v25;
  std::string *v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v2 = (rf::data_flow::RFUUID *)this;
  v3 = (std::string *)v27;
  v32 = *MEMORY[0x24BDAC8D0];
  v4 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v20 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(__p, &v20);
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v11);
    v22 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v3 = &v21;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v21;
    else
      v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v25 = 136315138;
    v26 = v12;
    LODWORD(v19) = 12;
    v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v20 = (rf::data_flow::RFUUID *)this;
  v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[10]), (int8x16_t)vcgezq_f32(this[10])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[8]), (int8x16_t)vcgezq_f32(this[8])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[9]), (int8x16_t)vcgezq_f32(this[9]))))))v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
LABEL_24:
    v20 = v2;
    rf::data_flow::RFUUID::string(v2, v27);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
    rf::data_flow::RFUUID::string(v2, v27);
    if ((SBYTE7(v28) & 0x80u) == 0)
      v13 = v27;
    else
      v13 = (void **)v27[0];
    rf::getMessage((rf *)"Face anchor %s leftEye cannot contain NaN", __p, v13, v19, v20);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v14);
    v22 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v3 = &v21;
    rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_0::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v21;
    else
      v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v25 = 136315138;
    v26 = v15;
    LODWORD(v19) = 12;
    v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
LABEL_37:
    v20 = v2;
    rf::data_flow::RFUUID::string(v2, v27);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
    rf::data_flow::RFUUID::string(v2, v27);
    if ((SBYTE7(v28) & 0x80u) == 0)
      v16 = v27;
    else
      v16 = (void **)v27[0];
    rf::getMessage((rf *)"Face anchor %s rightEye cannot contain NaN", __p, v16, v19, v20);
    if (SBYTE7(v28) < 0)
      operator delete(v27[0]);
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v17);
    v22 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_1::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v21;
    else
      v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v25 = 136315138;
    v26 = v18;
    _os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
  }
  v20 = (rf::data_flow::RFUUID *)this;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[12]), (int8x16_t)vcgezq_f32(this[12])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[13]), (int8x16_t)vcgezq_f32(this[13])))))|| (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[14]), (int8x16_t)vcgezq_f32(this[14])))) & 0xF) != 0)
  {
    goto LABEL_37;
  }
  result = this[15].f32[3];
  v20 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_2277987CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  int v2;
  BOOL v3;
  float32_t result;
  rf::internal *v6;
  std::string *v7;
  rf::data_flow::RFUUID *v8;
  void **v9;
  rf::internal *v10;
  std::string *v11;
  float32x4_t *v12;
  std::string v13;
  uint64_t v14;
  void *__p[5];
  void *v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2277EFAC0, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_2277EFAB0, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    v12 = this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(__p, (rf::data_flow::RFUUID **)&v12);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v6);
    v14 = 0;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(&v13, (rf::data_flow::RFUUID **)&v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v13;
    else
      v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v7;
    v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
    rf::data_flow::RFUUID::string(v8, v16);
    if (SBYTE7(v17) < 0)
      operator delete(v16[0]);
    rf::data_flow::RFUUID::string(v8, v16);
    if ((SBYTE7(v17) & 0x80u) == 0)
      v9 = v16;
    else
      v9 = (void **)v16[0];
    rf::getMessage((rf *)"Body anchor %s estimatedScaleFactor cannot contain NaN", __p, v9, 12, v12);
    if (SBYTE7(v17) < 0)
      operator delete(v16[0]);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v10);
    v14 = 0;
    memset(&__p[2], 0, 24);
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::BodyAnchor const&)::$_0::operator()(&v13, (rf::data_flow::RFUUID **)&v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v11;
    _os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
  }
  v12 = this;
  result = this[8].f32[0];
  v12 = this;
  return result;
}

void sub_227798B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::CustomAnchor]";
  v7 = "rf::data_flow::CustomAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227798C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::PlaneAnchor]";
  v7 = "rf::data_flow::PlaneAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227798D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::ImageAnchor]";
  v7 = "rf::data_flow::ImageAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227798E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::ObjectAnchor]";
  v7 = "rf::data_flow::ObjectAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227798F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::FaceAnchor]";
  v7 = "rf::data_flow::FaceAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227799048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  int v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char v9;
  void **v10;
  void *__p[2];
  char v12;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = 1;
  v5 = 114;
  v6 = "f::data_flow::BodyAnchor]";
  v7 = "rf::data_flow::BodyAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93)
      break;
    v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4)
      goto LABEL_12;
LABEL_11:
    v9 = *v6++;
    v5 = v9;
  }
  if (v5)
    goto LABEL_11;
  v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_227799148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_0::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Plane anchor %s center transform cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277991F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_1::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Plane anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277992A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ImageAnchor const&)::$_0::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Image anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_22779934C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_0::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Object anchor %s center cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277993F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_1::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Object anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277994A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_0::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Face anchor %s leftEye cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_227799550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_1::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Face anchor %s rightEye cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277995FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::BodyAnchor const&)::$_0::operator()(_QWORD *a1, rf::data_flow::RFUUID **a2)
{
  void **v4;
  void *__p[2];
  char v6;

  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  rf::getMessage((rf *)"Body anchor %s estimatedScaleFactor cannot contain NaN", a1, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2277996A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void rf::CoordinateSpaceTracker::~CoordinateSpaceTracker(rf::CoordinateSpaceTracker *this)
{
  uint64_t EventBus;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  if (*(_QWORD *)this)
  {
    EventBus = REEngineGetEventBus();
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    if (v3 != v4)
    {
      v5 = EventBus;
      do
      {
        MEMORY[0x22E29D510](v5, *v3, v3[1]);
        v3 += 2;
      }
      while (v3 != v4);
    }
    for (i = (_QWORD *)*((_QWORD *)this + 6); i; i = (_QWORD *)*i)
    {
      v7 = RESceneGetEventBus();
      v8 = (_QWORD *)i[3];
      v9 = (_QWORD *)i[4];
      if (v8 != v9)
      {
        v10 = v7;
        do
        {
          MEMORY[0x22E29D510](v10, *v8, v8[1]);
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::~__hash_table((uint64_t)this + 32);
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 2) = v11;
    operator delete(v11);
  }
}

uint64_t rf::CoordinateSpaceTracker::findCoordinateSpaceDefinitionEntity(uint64_t a1)
{
  uint64_t Parent;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  Parent = REEntityGetParent();
  if (!Parent)
    return 0;
  v2 = Parent;
  v3 = 0;
  do
  {
    RECoordinateSpaceDefinitionComponentGetComponentType();
    if (REEntityGetComponentByClass())
      v3 = v2;
    v2 = REEntityGetParent();
  }
  while (v2);
  return v3;
}

uint64_t std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *i;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  void *v20;
  rf *v21;
  NSObject *v22;
  uint64_t Name;
  void **v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  int64_t v32;
  uint64_t v33;
  std::string v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
  {
    v8 = i[6];
    v7 = (std::__shared_weak_count *)i[7];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8)
    {
      v33 = REEntityCreate();
      v11 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v11 + 1;
      std::to_string(&v29, v11);
      v12 = std::string::insert(&v29, 0, "Mesh Entity ", 0xCuLL);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v30, " ", 1uLL);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, a4);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v28;
      else
        v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v34, (const std::string::value_type *)v16, size);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v32 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      REEntitySetName();
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      RETransformComponentGetComponentType();
      REEntityAddComponentByClass();
      RETransformComponentSetWorldMatrix4x4F();
      REAnchorComponentGetComponentType();
      REEntityAddComponentByClass();
      REAnchorComponentSetAnchoredLocally();
      RESceneUnderstandingComponentGetComponentType();
      REEntityAddComponentByClass();
      rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)v8);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      RESceneUnderstandingComponentSetIdentifier();

      RESceneUnderstandingComponentSetEntityType();
      v21 = (rf *)RESceneAddEntity();
      rf::realityFusionLogObject(v21);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        Name = REEntityGetName();
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v8, __p);
        v24 = v32 >= 0 ? __p : (void **)__p[0];
        LODWORD(v34.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = Name;
        WORD2(v34.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        _os_log_impl(&dword_227777000, v22, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Adding entity %s with mesh %s", (uint8_t *)&v34, 0x16u);
        if (SHIBYTE(v32) < 0)
          operator delete(__p[0]);
      }

      if (*(_BYTE *)(a1 + 16))
      {
        RENetworkComponentGetComponentType();
        REEntityAddComponentByClass();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(_QWORD *)(v8 + 24))
        {
          if (*(_BYTE *)(v8 + 16))
            v27 = *(_QWORD **)v8;
          else
            v27 = (_QWORD *)v8;
          *(_QWORD *)(v8 + 24) = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
        }
        kdebug_trace();
      }
      RESharedPtr<REEntity>::~RESharedPtr(&v33);
    }
    if (v7)
    {
      v25 = (unint64_t *)&v7->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_227799C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v45;

  RESharedPtr<REEntity>::~RESharedPtr(&a36);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t IdentifierPtr;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t *i;
  uuid_t uu;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  RESceneUnderstandingComponentGetComponentType();
  v25[0] = RESceneGetComponentsOfClass();
  v25[1] = v5;
  v18 = v25[0];
  v19 = v5;
  v20 = v25;
  v21 = a3;
  v22 = 1;
  LOBYTE(v23) = 0;
  v24 = 0;
  ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&v18);
  v6 = v23;
  result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&v18);
  v8 = v18 + 8 * v19;
  v26 = v6;
  for (i = &v18;
        v26 != v8;
        result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(i, &v26))
  {
    REComponentGetEntity();
    RETransformComponentGetComponentType();
    REEntityGetComponentByClass();
    IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
    v29 = 0;
    v30 = 0;
    uuid_clear(uu);
    *(_QWORD *)uu = IdentifierPtr;
    v29 = 1;
    v10 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(a3, (uint64_t)uu);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v12 = v10[6];
    v11 = (std::__shared_weak_count *)v10[7];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    RETransformComponentSetWorldMatrix4x4F();
    if (*(_BYTE *)(a1 + 16))
      RENetworkMarkComponentDirty();
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(_QWORD *)(v12 + 24))
      {
        if (*(_BYTE *)(v12 + 16))
          v17 = *(_QWORD **)v12;
        else
          v17 = (_QWORD *)v12;
        *(_QWORD *)(v12 + 24) = ((*v17 >> 2) + (*v17 << 6) + v17[1] + 2654435769) ^ *v17;
      }
      kdebug_trace();
    }
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v26 += 8;
  }
  return result;
}

void sub_227799F88(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  rf *Entity;
  NSObject *v9;
  uint64_t Name;
  uint64_t ComponentsOfClass;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *i;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  RESceneUnderstandingComponentGetComponentType();
  ComponentsOfClass = RESceneGetComponentsOfClass();
  v12 = v4;
  v13 = a3;
  v14 = 1;
  LOBYTE(v15) = 0;
  v16 = 0;
  ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&ComponentsOfClass);
  v5 = v15;
  result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&ComponentsOfClass);
  v7 = ComponentsOfClass + 8 * v12;
  v17 = v5;
  for (i = &ComponentsOfClass; v17 != v7; v5 = v17)
  {
    Entity = (rf *)REComponentGetEntity();
    rf::realityFusionLogObject(Entity);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      Name = REEntityGetName();
      *(_DWORD *)buf = 136315138;
      v20 = Name;
      _os_log_impl(&dword_227777000, v9, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Removing entity %s", buf, 0xCu);
    }

    MEMORY[0x22E29D48C](Entity);
    v17 = v5 + 8;
    result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(i, &v17);
  }
  return result;
}

void sub_22779A13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::EntitiesProcessor::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *updated;
  _QWORD *v7;

  if (*(_BYTE *)(a2 + 32))
    v2 = *(_BYTE *)(a2 + 16) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v4 = *(_QWORD *)(a2 + 24);
    rf::data_flow::consumer::EntitiesProcessor::getOrCreateSceneUnderstandingRoot(a1);
    v5 = *(_QWORD *)(a1 + 8);
    std::mutex::lock((std::mutex *)v5);
    RESceneUnderstandingRootComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneUnderstandingRootComponentSetUpdateId();
    if (*(_BYTE *)(a1 + 16))
      RENetworkMarkComponentDirty();
    rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(a1, v4, v5 + 1800, 1);
    updated = rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(a1, v4, (_QWORD *)(v5 + 1840));
    rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene((uint64_t)updated, v4, v5 + 1880);
    rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(a1, v4, v5 + 1920, 2);
    v7 = rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(a1, v4, (_QWORD *)(v5 + 1960));
    rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene((uint64_t)v7, v4, v5 + 2000);
    std::mutex::unlock((std::mutex *)v5);
  }
}

void sub_22779A248(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::EntitiesProcessor::getOrCreateSceneUnderstandingRoot(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  RESceneUnderstandingRootComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v2)
    return REComponentGetEntity();
  v5 = REEntityCreate();
  REEntitySetName();
  RESceneUnderstandingRootComponentGetComponentType();
  REEntityAddComponentByClass();
  REComponentClassFromType();
  REEntityAddComponentByClass();
  REAnchorComponentSetAnchoredLocally();
  RESceneUnderstandingRenderOptionsComponentGetComponentType();
  REEntityAddComponentByClass();
  if (*(_BYTE *)(a1 + 16))
  {
    REComponentClassFromType();
    REEntityAddComponentByClass();
  }
  RESceneAddEntity();
  REHideEntity();
  v4 = v5;
  RESharedPtr<REEntity>::~RESharedPtr(&v5);
  return v4;
}

void sub_22779A35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  RESharedPtr<REEntity>::~RESharedPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::EntitiesProcessor::~EntitiesProcessor(rf::data_flow::consumer::EntitiesProcessor *this)
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
    if (*(_BYTE *)(a2 + 16))
      v13 = *(_QWORD **)a2;
    else
      v13 = (_QWORD *)a2;
    v3 = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
    *(_QWORD *)(a2 + 24) = v3;
  }
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v7 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    v10 = (uint64_t)(a1 + 4);
    do
    {
      v11 = v9[1];
      if (v3 == v11)
      {
        if (rf::data_flow::RFUUID::Equality::operator()(v10, (uint64_t)(v9 + 2), a2))
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (v11 >= *(_QWORD *)&v4)
            v11 %= *(_QWORD *)&v4;
        }
        else
        {
          v11 &= *(_QWORD *)&v4 - 1;
        }
        if (v11 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t IdentifierPtr;
  uint64_t v7;
  uuid_t uu;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    v4 = result;
    do
    {
      result = (_QWORD *)RESceneUnderstandingComponentGetSourceType();
      if ((_DWORD)result != 2)
      {
        v5 = (_QWORD *)v4[3];
        IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        v9 = 0;
        v10 = 0;
        uuid_clear(uu);
        *(_QWORD *)uu = IdentifierPtr;
        v9 = 1;
        result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
          break;
      }
      v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 48))
  {
    v1 = result;
    v2 = *result;
    result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(result, &v2);
    v1[5] = v2;
    *((_BYTE *)v1 + 48) = 1;
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t IdentifierPtr;
  uint64_t v7;
  uuid_t uu;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    v4 = result;
    do
    {
      result = (_QWORD *)RESceneUnderstandingComponentGetSourceType();
      if ((_DWORD)result != 2)
      {
        v5 = (_QWORD *)v4[2];
        IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        v9 = 0;
        v10 = 0;
        uuid_clear(uu);
        *(_QWORD *)uu = IdentifierPtr;
        v9 = 1;
        result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
          break;
      }
      v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *result;
    result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((_BYTE *)v1 + 40) = 1;
  }
  return result;
}

uint64_t *rf::HandMetadataComponent::instance(rf::HandMetadataComponent *this)
{
  unsigned __int8 v1;

  {
    rf::HandMetadataComponent::instance(void)::instance = 0;
    qword_2558F9D50 = 0;
    qword_2558F9D70 = 0;
    dword_2558F9D78 = 0;
  }
  return &rf::HandMetadataComponent::instance(void)::instance;
}

void sub_22779A798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(rf::data_flow::provider::InputFrame &&)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_22779A9A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_22779AA18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void rf::ARState::consume(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  rf *v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  BOOL v19;
  __int128 *i;
  _QWORD *v21;
  __int128 *j;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t *v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  int8x8_t v62;
  uint8x8_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD **v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x8_t v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int8x8_t v82;
  uint8x8_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int8x8_t v91;
  unint64_t v92;
  uint8x8_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  int8x8_t v104;
  unint64_t v105;
  uint8x8_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  char v137;
  _OWORD *v138;
  _OWORD *v139;
  uint64_t v140;
  _OWORD *v141;
  _OWORD *v142;
  uint64_t v143;
  _OWORD *v144;
  _OWORD *v145;
  uint64_t v146;
  _OWORD *v147;
  _OWORD *v148;
  uint64_t v149;
  _OWORD *v150;
  _OWORD *v151;
  uint64_t v152;
  _OWORD *v153;
  _OWORD *v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  uint64_t v158;
  unint64_t v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint8x8_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  float v179;
  float v180;
  _BOOL8 v181;
  unint64_t v182;
  unint64_t v183;
  size_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  int8x8_t v195;
  unint64_t v196;
  uint8x8_t v197;
  unint64_t v198;
  unint64_t v199;
  void **v200;
  _QWORD *v201;
  unint64_t v202;
  int8x8_t v203;
  _QWORD *v204;
  unint64_t v205;
  uint8x8_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint8x8_t v220;
  unint64_t v221;
  void **v222;
  char *v223;
  unint64_t v224;
  std::string *v225;
  float v226;
  float v227;
  _BOOL8 v228;
  unint64_t v229;
  unint64_t v230;
  int8x8_t prime;
  void *v232;
  void *v233;
  uint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  uint8x8_t v237;
  unint64_t v238;
  uint8x8_t v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  unint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _OWORD *MutableCameraAnchor;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  unint64_t v261;
  void *v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _BYTE v267[16];
  _QWORD *v268;
  _BYTE v269[16];
  _QWORD *v270;
  void *__p;
  void *v272;
  void *v273;
  _OWORD *v274;
  void *v275;
  _OWORD *v276;
  void *v277;
  _OWORD *v278;
  void *v279;
  _OWORD *v280;
  void *v281;
  _OWORD *v282;
  void *v283;
  _OWORD *v284;
  void *v285;
  _OWORD *v286;
  _BYTE v287[16];
  uint64_t *v288;
  void *v289;
  _OWORD *v290;
  void *v291;
  _OWORD *v292;
  _BYTE v293[16];
  _QWORD *v294;
  _BYTE v295[16];
  __int128 *v296;
  uint64_t *v297[2];
  __int128 *v298;
  __n128 v299;
  _BYTE v300[32];
  int v301;
  uint8_t buf[16];
  __int128 v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  uint64_t v306;

  v306 = *MEMORY[0x24BDAC8D0];
  v299.n128_u64[0] = a1 + 64;
  v299.n128_u64[1] = a1;
  std::mutex::lock((std::mutex *)a1);
  v6 = *(unsigned __int8 *)(a2 + 1032);
  v7 = *(unsigned __int8 *)(a2 + 1026);
  if (*(_BYTE *)(a2 + 1032))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    v9 = *(_DWORD *)(a1 + 2888);
    switch(v9)
    {
      case 0:
        if (*(_BYTE *)(a2 + 1032))
        {
          v10 = *(_DWORD *)(a2 + 1028);
          if (v10 == 2)
            goto LABEL_41;
          if (v10 == 1)
          {
            v11 = 1;
            goto LABEL_20;
          }
        }
        if (*(_BYTE *)(a2 + 1026) && *(_BYTE *)(a2 + 1025))
          *(_DWORD *)(a1 + 2888) = 2;
        goto LABEL_37;
      case 1:
        v13 = *(_DWORD *)(a2 + 1028);
        if (*(_BYTE *)(a2 + 1032) && !v13)
        {
          *(_DWORD *)(a1 + 2888) = 0;
          goto LABEL_45;
        }
        if (*(_BYTE *)(a2 + 1026) && *(_BYTE *)(a2 + 1025))
        {
          *(_DWORD *)(a1 + 2888) = 3;
          goto LABEL_36;
        }
        if (!*(_BYTE *)(a2 + 1032))
          goto LABEL_38;
        if (v13 != 2)
          goto LABEL_45;
LABEL_41:
        *(_DWORD *)(a1 + 2888) = 4;
        goto LABEL_43;
      case 2:
        if (*(_BYTE *)(a2 + 1032) && *(_DWORD *)(a2 + 1028) == 1)
        {
          v11 = 3;
          goto LABEL_20;
        }
        if (!*(_BYTE *)(a2 + 1026) || *(_BYTE *)(a2 + 1025))
          goto LABEL_37;
        *(_DWORD *)(a1 + 2888) = 0;
        goto LABEL_36;
      case 3:
        if (!*(_BYTE *)(a2 + 1032) || *(_DWORD *)(a2 + 1028))
        {
          if (*(_BYTE *)(a2 + 1026) && !*(_BYTE *)(a2 + 1025))
          {
            *(_DWORD *)(a1 + 2888) = 1;
LABEL_36:
            *(_BYTE *)(a1 + 1784) = 1;
          }
LABEL_37:
          if (!v6)
          {
LABEL_38:
            v14 = -1;
            goto LABEL_46;
          }
        }
        else
        {
          v11 = 2;
LABEL_20:
          *(_DWORD *)(a1 + 2888) = v11;
        }
        goto LABEL_45;
      case 4:
        if (!*(_BYTE *)(a2 + 1032))
          goto LABEL_38;
        v12 = *(_DWORD *)(a2 + 1028);
        if (v12)
        {
          if (v12 != 1)
            goto LABEL_45;
          *(_DWORD *)(a1 + 2888) = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 2888) = 0;
LABEL_43:
          LOBYTE(v12) = 1;
        }
        *(_BYTE *)(a1 + 1785) = v12;
LABEL_45:
        v14 = *(_DWORD *)(a2 + 1028);
LABEL_46:
        v15 = *(unsigned __int8 *)(a2 + 1025);
        rf::realityFusionLogObject(v5);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *(_DWORD *)(a1 + 2888);
          *(_DWORD *)buf = 67109888;
          if (v7)
            v18 = v15;
          else
            v18 = -1;
          *(_DWORD *)&buf[4] = v9;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v17;
          *(_WORD *)&buf[14] = 1024;
          LODWORD(v303) = v14;
          WORD2(v303) = 1024;
          *(_DWORD *)((char *)&v303 + 6) = v18;
          _os_log_impl(&dword_227777000, v16, OS_LOG_TYPE_DEFAULT, "ARState: TrackingState has changed from %d to %d (input: tracking - %d, travel - %d)", buf, 0x1Au);
        }

        break;
      default:
        goto LABEL_37;
    }
  }
  if (*(_BYTE *)(a2 + 996))
    v19 = *(_DWORD *)(a2 + 992) == 0;
  else
    v19 = 0;
  if (!v19)
  {
    rf::detail::insertMeshesInto((uint64_t *)&v299, (uint64_t *)a2, (_BYTE *)(a1 + 2928), (uint64_t)v297);
    for (i = v298; i; i = *(__int128 **)i)
    {
      *(_QWORD *)buf = i + 1;
      v21 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v299.n128_u64[0] + 720, (uint64_t)(i + 1), (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
      std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>::operator=[abi:ne180100]((uint64_t)(v21 + 6), i + 3);
    }
    rf::detail::updateMeshAt((uint64_t *)&v299, (uint64_t *)(a2 + 24), (_BYTE *)(a1 + 2928), (uint64_t)v295);
    for (j = v296; j; j = *(__int128 **)j)
    {
      *(_QWORD *)buf = j + 1;
      v23 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v299.n128_u64[0] + 760, (uint64_t)(j + 1), (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
      std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>::operator=[abi:ne180100]((uint64_t)(v23 + 6), j + 3);
    }
    rf::detail::removeMeshesFrom((uint64_t)&v299, (uint64_t *)(a2 + 48), *(_BYTE *)(a1 + 2904), (uint64_t)v293);
    v24 = v294;
    if (v294)
    {
      v25 = v299.n128_u64[0] + 800;
      do
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v25, (uint64_t)(v24 + 2), (uint64_t)(v24 + 2));
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    rf::detail::requestFloorPlaneForPlacementIfNeeded((uint64_t *)(a2 + 72), (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 120), a1 + 3032);
    rf::detail::updateExternalAnchorsAt((unsigned int *)&v299, (uint64_t *)(a2 + 144), a1 + 2968);
    rf::detail::relocalizeExternalAnchors(&v299, (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 72), a1 + 3000);
    rf::detail::insertAnchorsInto((uint64_t)&v299, (uint64_t *)(a2 + 72), a1 + 2936, (char **)&v291);
    v27 = v291;
    v26 = v292;
    if (v291 != v292)
    {
      v28 = v299.n128_u64[0] + 1080;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v28, (uint64_t)v27, v27);
        v27 += 2;
      }
      while (v27 != v26);
    }
    rf::detail::updateAnchorsAt((uint64_t)&v299, (uint64_t *)(a2 + 96), (char **)&v289);
    v30 = v289;
    v29 = v290;
    if (v289 != v290)
    {
      v31 = v299.n128_u64[0] + 1120;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v31, (uint64_t)v30, v30);
        v30 += 2;
      }
      while (v30 != v29);
    }
    rf::detail::removeAnchorsFrom((uint64_t)&v299, (uint64_t *)(a2 + 120), a1 + 3032, (uint64_t)v287);
    v32 = v288;
    if (v288)
    {
      v33 = v299.n128_u64[0] + 1200;
      do
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v33, (uint64_t)(v32 + 2), (_OWORD *)v32 + 1);
        v32 = (uint64_t *)*v32;
      }
      while (v32);
    }
    if (*(_BYTE *)(a2 + 464))
    {
      memset(v300, 0, sizeof(v300));
      v301 = 1065353216;
      v34 = v299.n128_u64[0];
      v35 = *(uint64_t **)(v299.n128_u64[0] + 96);
      if (v35)
      {
        do
        {
          while (*((_DWORD *)v35 + 76) == 3)
          {
            v36 = *((_OWORD *)v35 + 2);
            *(_OWORD *)buf = *((_OWORD *)v35 + 1);
            v303 = v36;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v304, (uint64_t)(v35 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v300, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v304);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1080), (uint64_t)(v35 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1120), (uint64_t)(v35 + 2));
            v37 = (uint64_t *)*v35;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 80), v35, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            v35 = v37;
            if (!v37)
              goto LABEL_78;
          }
          v35 = (uint64_t *)*v35;
        }
        while (v35);
LABEL_78:
        v34 = v299.n128_u64[0];
      }
      v38 = *(uint64_t **)(v34 + 136);
      if (v38)
      {
        do
        {
          while (*((_DWORD *)v38 + 76) == 3)
          {
            v39 = *((_OWORD *)v38 + 2);
            *(_OWORD *)buf = *((_OWORD *)v38 + 1);
            v303 = v39;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v304, (uint64_t)(v38 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v300, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v304);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1080), (uint64_t)(v38 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1120), (uint64_t)(v38 + 2));
            v40 = (uint64_t *)*v38;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 120), v38, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            v38 = v40;
            if (!v40)
              goto LABEL_84;
          }
          v38 = (uint64_t *)*v38;
        }
        while (v38);
LABEL_84:
        v34 = v299.n128_u64[0];
      }
      v41 = *(uint64_t **)&v300[16];
      if (*(_QWORD *)&v300[16])
      {
        v42 = v34 + 1200;
        do
        {
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v42, (uint64_t)(v41 + 2), (_OWORD *)v41 + 1);
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v300);
    }
    if (*(_BYTE *)(a2 + 465))
    {
      memset(v300, 0, sizeof(v300));
      v301 = 1065353216;
      v43 = v299.n128_u64[0];
      v44 = *(uint64_t **)(v299.n128_u64[0] + 96);
      if (v44)
      {
        do
        {
          while (*((_DWORD *)v44 + 76) == 2)
          {
            v45 = *((_OWORD *)v44 + 2);
            *(_OWORD *)buf = *((_OWORD *)v44 + 1);
            v303 = v45;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v304, (uint64_t)(v44 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v300, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v304);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1080), (uint64_t)(v44 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1120), (uint64_t)(v44 + 2));
            v46 = (uint64_t *)*v44;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 80), v44, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            v44 = v46;
            if (!v46)
              goto LABEL_95;
          }
          v44 = (uint64_t *)*v44;
        }
        while (v44);
LABEL_95:
        v43 = v299.n128_u64[0];
      }
      v47 = *(uint64_t **)(v43 + 136);
      if (v47)
      {
        do
        {
          while (*((_DWORD *)v47 + 76) == 2)
          {
            v48 = *((_OWORD *)v47 + 2);
            *(_OWORD *)buf = *((_OWORD *)v47 + 1);
            v303 = v48;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v304, (uint64_t)(v47 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v300, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v304);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1080), (uint64_t)(v47 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1120), (uint64_t)(v47 + 2));
            v49 = (uint64_t *)*v47;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 120), v47, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            v47 = v49;
            if (!v49)
              goto LABEL_101;
          }
          v47 = (uint64_t *)*v47;
        }
        while (v47);
LABEL_101:
        v43 = v299.n128_u64[0];
      }
      v50 = *(uint64_t **)&v300[16];
      if (*(_QWORD *)&v300[16])
      {
        v51 = v43 + 1200;
        do
        {
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v51, (uint64_t)(v50 + 2), (_OWORD *)v50 + 1);
          v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v300);
    }
    if (*(_BYTE *)(a2 + 996) && *(_DWORD *)(a2 + 992) == 1)
    {
      v52 = a2 + 176;
      v53 = v299.n128_u64[0];
      v54 = v299.n128_u64[0] + 432;
      if (*(unsigned __int8 *)(v299.n128_u64[0] + 704) == *(unsigned __int8 *)(a2 + 448))
      {
        if (*(_BYTE *)(v299.n128_u64[0] + 704))
          std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(v54, v52);
      }
      else
      {
        if (*(_BYTE *)(v299.n128_u64[0] + 704))
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v54);
          v137 = 0;
        }
        else
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v54, v52);
          v137 = 1;
        }
        *(_BYTE *)(v53 + 704) = v137;
      }
    }
    rf::detail::insertProbeInto((rf *)&v299, (uint64_t **)(a2 + 472), (char **)&v285);
    v139 = v285;
    v138 = v286;
    if (v285 != v286)
    {
      v140 = v299.n128_u64[0] + 1240;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v140, (uint64_t)v139, v139);
        v139 += 2;
      }
      while (v139 != v138);
    }
    rf::detail::updateProbeAt((uint64_t)&v299, (uint64_t **)(a2 + 496), (char **)&v283);
    v142 = v283;
    v141 = v284;
    if (v283 != v284)
    {
      v143 = v299.n128_u64[0] + 1280;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v143, (uint64_t)v142, v142);
        v142 += 2;
      }
      while (v142 != v141);
    }
    rf::detail::removeProbeFrom((uint64_t *)&v299, (rf::data_flow::RFUUID **)(a2 + 520), (char **)&v281);
    v145 = v281;
    v144 = v282;
    if (v281 != v282)
    {
      v146 = v299.n128_u64[0] + 1320;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v146, (uint64_t)v145, v145);
        v145 += 2;
      }
      while (v145 != v144);
    }
    rf::detail::insertObjectsInto(&v299, (__n128 **)(a2 + 544), (char **)&v279);
    v148 = v279;
    v147 = v280;
    if (v279 != v280)
    {
      v149 = v299.n128_u64[0] + 1360;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v149, (uint64_t)v148, v148);
        v148 += 2;
      }
      while (v148 != v147);
    }
    rf::detail::updateObjectsAt(&v299, (__int128 **)(a2 + 568), (char **)&v277);
    v151 = v277;
    v150 = v278;
    if (v277 != v278)
    {
      v152 = v299.n128_u64[0] + 1400;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v152, (uint64_t)v151, v151);
        v151 += 2;
      }
      while (v151 != v150);
    }
    rf::detail::removeObjectsFrom((rf *)&v299, (rf::data_flow::RFUUID **)(a2 + 592), (char **)&v275);
    v154 = v275;
    v153 = v276;
    if (v275 != v276)
    {
      v155 = v299.n128_u64[0] + 1440;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v155, (uint64_t)v154, v154);
        v154 += 2;
      }
      while (v154 != v153);
    }
    rf::detail::insertRoomBoundaryAnchorsInto((uint64_t *)&v299, (uint64_t *)(a2 + 688), (char **)&v273);
    v157 = v273;
    v156 = v274;
    if (v273 != v274)
    {
      v158 = v299.n128_u64[0] + 1480;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v158, (uint64_t)v157, v157);
        v157 += 2;
      }
      while (v157 != v156);
    }
    rf::detail::updateRoomBoundarysAt((uint64_t *)&v299, (uint64_t *)(a2 + 712), (char **)&__p);
    v160 = __p;
    v159 = (unint64_t)v272;
    if (__p != v272)
    {
      v161 = v299.n128_u64[0] + 1520;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v161, (uint64_t)v160, v160);
        v160 += 2;
      }
      while (v160 != (_OWORD *)v159);
    }
    v263 = a1;
    v264 = a2;
    rf::detail::removeRoomBoundaryAnchorsFrom((int8x8_t **)&v299, (rf::data_flow::RFUUID **)(a2 + 736), (uint64_t)buf);
    v162 = (uint64_t *)v303;
    if ((_QWORD)v303)
    {
      v163 = v299.n128_u64[0];
      v164 = (_QWORD *)(v299.n128_u64[0] + 1560);
      v265 = (_QWORD *)(v299.n128_u64[0] + 1576);
      v266 = v299.n128_u64[0] + 1592;
      do
      {
        v165 = v162[5];
        if (!v165)
        {
          if (*((_BYTE *)v162 + 32))
            v187 = (_QWORD *)v162[2];
          else
            v187 = v162 + 2;
          v165 = ((*v187 >> 2) + (*v187 << 6) + v187[1] + 2654435769) ^ *v187;
          v162[5] = v165;
        }
        v159 = *(_QWORD *)(v163 + 1568);
        if (v159)
        {
          v166 = (uint8x8_t)vcnt_s8((int8x8_t)v159);
          v166.i16[0] = vaddlv_u8(v166);
          v167 = v166.u32[0];
          if (v166.u32[0] > 1uLL)
          {
            v2 = v165;
            if (v165 >= v159)
              v2 = v165 % v159;
          }
          else
          {
            v2 = (v159 - 1) & v165;
          }
          v168 = *(_QWORD **)(*v164 + 8 * v2);
          if (v168)
          {
            v169 = (_QWORD *)*v168;
            if (*v168)
            {
              do
              {
                v170 = v169[1];
                if (v170 == v165)
                {
                  if (rf::data_flow::RFUUID::Equality::operator()(v266, (uint64_t)(v169 + 2), (uint64_t)(v162 + 2)))
                    goto LABEL_350;
                }
                else
                {
                  if (v167 > 1)
                  {
                    if (v170 >= v159)
                      v170 %= v159;
                  }
                  else
                  {
                    v170 &= v159 - 1;
                  }
                  if (v170 != v2)
                    break;
                }
                v169 = (_QWORD *)*v169;
              }
              while (v169);
            }
          }
        }
        v171 = operator new(0x5D0uLL);
        *(_QWORD *)v300 = v171;
        *(_QWORD *)&v300[8] = v265;
        v300[16] = 0;
        *v171 = 0;
        v171[1] = v165;
        v172 = *((_OWORD *)v162 + 2);
        *((_OWORD *)v171 + 1) = *((_OWORD *)v162 + 1);
        *((_OWORD *)v171 + 2) = v172;
        *((_OWORD *)v171 + 3) = *((_OWORD *)v162 + 3);
        v173 = *((_OWORD *)v162 + 7);
        v175 = *((_OWORD *)v162 + 4);
        v174 = *((_OWORD *)v162 + 5);
        *((_OWORD *)v171 + 6) = *((_OWORD *)v162 + 6);
        *((_OWORD *)v171 + 7) = v173;
        *((_OWORD *)v171 + 4) = v175;
        *((_OWORD *)v171 + 5) = v174;
        v177 = *((_OWORD *)v162 + 9);
        v176 = *((_OWORD *)v162 + 10);
        v178 = *((_OWORD *)v162 + 8);
        *((_BYTE *)v171 + 176) = *((_BYTE *)v162 + 176);
        *((_OWORD *)v171 + 9) = v177;
        *((_OWORD *)v171 + 10) = v176;
        *((_OWORD *)v171 + 8) = v178;
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v171 + 24), (__int128 *)v162 + 12);
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v171 + 78), (__int128 *)v162 + 39);
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v171 + 132), (__int128 *)v162 + 66);
        v300[16] = 1;
        v179 = (float)(unint64_t)(*(_QWORD *)(v163 + 1584) + 1);
        v180 = *(float *)(v163 + 1592);
        if (!v159 || (float)(v180 * (float)v159) < v179)
        {
          v181 = (v159 & (v159 - 1)) != 0;
          if (v159 < 3)
            v181 = 1;
          v182 = v181 | (2 * v159);
          v183 = vcvtps_u32_f32(v179 / v180);
          if (v182 <= v183)
            v184 = v183;
          else
            v184 = v182;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>((uint64_t)v164, v184);
          v159 = *(_QWORD *)(v163 + 1568);
          if ((v159 & (v159 - 1)) != 0)
          {
            if (v165 >= v159)
              v2 = v165 % v159;
            else
              v2 = v165;
          }
          else
          {
            v2 = (v159 - 1) & v165;
          }
        }
        v185 = *(_QWORD **)(*v164 + 8 * v2);
        if (v185)
        {
          **(_QWORD **)v300 = *v185;
          *v185 = *(_QWORD *)v300;
        }
        else
        {
          **(_QWORD **)v300 = *v265;
          *v265 = *(_QWORD *)v300;
          *(_QWORD *)(*v164 + 8 * v2) = v265;
          if (**(_QWORD **)v300)
          {
            v186 = *(_QWORD *)(**(_QWORD **)v300 + 8);
            if ((v159 & (v159 - 1)) != 0)
            {
              if (v186 >= v159)
                v186 %= v159;
            }
            else
            {
              v186 &= v159 - 1;
            }
            *(_QWORD *)(*v164 + 8 * v186) = *(_QWORD *)v300;
          }
        }
        *(_QWORD *)v300 = 0;
        ++*(_QWORD *)(v163 + 1584);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)v300, 0);
LABEL_350:
        v162 = (uint64_t *)*v162;
      }
      while (v162);
    }
    v189 = v263;
    v188 = v264;
    v190 = *(unsigned __int8 *)(v264 + 783);
    if ((v190 & 0x80u) != 0)
      v190 = *(_QWORD *)(v264 + 768);
    if (v190)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v299.n128_u64[0] + 368, (unsigned __int8 *)(v264 + 760), v264 + 760);
      v159 = v299.n128_u64[0];
      if (*(char *)(v264 + 783) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v300, *(const std::string::value_type **)(v264 + 760), *(_QWORD *)(v264 + 768));
      }
      else
      {
        *(_OWORD *)v300 = *(_OWORD *)(v264 + 760);
        *(_QWORD *)&v300[16] = *(_QWORD *)(v264 + 776);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v159 + 1600, v300, (uint64_t)v300);
      if ((v300[23] & 0x80000000) != 0)
        operator delete(*(void **)v300);
    }
    v191 = *(unsigned __int8 *)(v264 + 807);
    if ((v191 & 0x80u) != 0)
      v191 = *(_QWORD *)(v264 + 792);
    if (!v191)
      goto LABEL_417;
    v192 = v299.n128_u64[0];
    v193 = (_QWORD *)(v299.n128_u64[0] + 392);
    v194 = std::__string_hash<char>::operator()[abi:ne180100](v299.n128_u64[0] + 392, v264 + 784);
    v195 = *(int8x8_t *)(v192 + 376);
    if (!*(_QWORD *)&v195)
      goto LABEL_412;
    v196 = v194;
    v197 = (uint8x8_t)vcnt_s8(v195);
    v197.i16[0] = vaddlv_u8(v197);
    v198 = v197.u32[0];
    if (v197.u32[0] > 1uLL)
    {
      v199 = v194;
      if (v194 >= *(_QWORD *)&v195)
        v199 = v194 % *(_QWORD *)&v195;
    }
    else
    {
      v199 = (*(_QWORD *)&v195 - 1) & v194;
    }
    v200 = *(void ***)(*(_QWORD *)(v192 + 368) + 8 * v199);
    if (!v200)
      goto LABEL_412;
    v201 = *v200;
    if (!*v200)
      goto LABEL_412;
    while (1)
    {
      v202 = v201[1];
      if (v202 == v196)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v192 + 400, (unsigned __int8 *)v201 + 16, (unsigned __int8 *)(v264 + 784)) & 1) != 0)
        {
          v203 = *(int8x8_t *)(v192 + 376);
          v204 = (_QWORD *)*v201;
          v205 = v201[1];
          v206 = (uint8x8_t)vcnt_s8(v203);
          v206.i16[0] = vaddlv_u8(v206);
          if (v206.u32[0] > 1uLL)
          {
            if (v205 >= *(_QWORD *)&v203)
              v205 %= *(_QWORD *)&v203;
          }
          else
          {
            v205 &= *(_QWORD *)&v203 - 1;
          }
          v207 = *(_QWORD *)(v192 + 368);
          v208 = *(_QWORD **)(v207 + 8 * v205);
          do
          {
            v209 = v208;
            v208 = (_QWORD *)*v208;
          }
          while (v208 != v201);
          if (v209 == (_QWORD *)(v192 + 384))
            goto LABEL_401;
          v210 = v209[1];
          if (v206.u32[0] > 1uLL)
          {
            if (v210 >= *(_QWORD *)&v203)
              v210 %= *(_QWORD *)&v203;
          }
          else
          {
            v210 &= *(_QWORD *)&v203 - 1;
          }
          if (v210 == v205)
          {
LABEL_403:
            if (v204)
            {
              v211 = v204[1];
              goto LABEL_405;
            }
          }
          else
          {
LABEL_401:
            if (!v204)
              goto LABEL_402;
            v211 = v204[1];
            if (v206.u32[0] > 1uLL)
            {
              v212 = v204[1];
              if (v211 >= *(_QWORD *)&v203)
                v212 = v211 % *(_QWORD *)&v203;
            }
            else
            {
              v212 = v211 & (*(_QWORD *)&v203 - 1);
            }
            if (v212 != v205)
            {
LABEL_402:
              *(_QWORD *)(v207 + 8 * v205) = 0;
              v204 = (_QWORD *)*v201;
              goto LABEL_403;
            }
LABEL_405:
            if (v206.u32[0] > 1uLL)
            {
              if (v211 >= *(_QWORD *)&v203)
                v211 %= *(_QWORD *)&v203;
            }
            else
            {
              v211 &= *(_QWORD *)&v203 - 1;
            }
            if (v211 != v205)
            {
              *(_QWORD *)(*(_QWORD *)(v192 + 368) + 8 * v211) = v209;
              v204 = (_QWORD *)*v201;
            }
          }
          *v209 = v204;
          *v201 = 0;
          --*v193;
          v300[16] = 1;
          *(_QWORD *)&v300[8] = v192 + 384;
          *(_QWORD *)v300 = 0;
          std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v300[8], (void **)v201);
LABEL_412:
          v159 = v299.n128_u64[0];
          v188 = v264;
          if (*(char *)(v264 + 807) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v300, *(const std::string::value_type **)(v264 + 784), *(_QWORD *)(v264 + 792));
          }
          else
          {
            *(_OWORD *)v300 = *(_OWORD *)(v264 + 784);
            *(_QWORD *)&v300[16] = *(_QWORD *)(v264 + 800);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v159 + 1640, v300, (uint64_t)v300);
          v189 = v263;
          if ((v300[23] & 0x80000000) != 0)
            operator delete(*(void **)v300);
LABEL_417:
          v213 = *(unsigned __int8 *)(v188 + 839);
          if ((v213 & 0x80u) != 0)
            v213 = *(_QWORD *)(v188 + 824);
          if (v213)
          {
            v214 = v188 + 816;
            v215 = v299.n128_u64[0];
            v216 = (_QWORD *)(v299.n128_u64[0] + 1704);
            v217 = std::__string_hash<char>::operator()[abi:ne180100](v299.n128_u64[0] + 1704, v188 + 816);
            v218 = v217;
            v219 = *(_QWORD *)(v215 + 1688);
            if (v219)
            {
              v220 = (uint8x8_t)vcnt_s8((int8x8_t)v219);
              v220.i16[0] = vaddlv_u8(v220);
              v221 = v220.u32[0];
              if (v220.u32[0] > 1uLL)
              {
                v159 = v217;
                if (v217 >= v219)
                  v159 = v217 % v219;
              }
              else
              {
                v159 = (v219 - 1) & v217;
              }
              v222 = *(void ***)(*(_QWORD *)(v215 + 1680) + 8 * v159);
              if (v222)
              {
                v223 = (char *)*v222;
                if (*v222)
                {
                  while (1)
                  {
                    v224 = *((_QWORD *)v223 + 1);
                    if (v224 == v218)
                    {
                      if ((std::equal_to<std::string>::operator()[abi:ne180100](v215 + 1712, (unsigned __int8 *)v223 + 16, (unsigned __int8 *)(v188 + 816)) & 1) != 0)
                      {
                        v189 = v263;
                        v188 = v264;
                        goto LABEL_497;
                      }
                    }
                    else
                    {
                      if (v221 > 1)
                      {
                        if (v224 >= v219)
                          v224 %= v219;
                      }
                      else
                      {
                        v224 &= v219 - 1;
                      }
                      if (v224 != v159)
                      {
LABEL_437:
                        v189 = v263;
                        v188 = v264;
                        break;
                      }
                    }
                    v223 = *(char **)v223;
                    if (!v223)
                      goto LABEL_437;
                  }
                }
              }
            }
            v223 = (char *)operator new(0x70uLL);
            *(_QWORD *)v223 = 0;
            *((_QWORD *)v223 + 1) = v218;
            v225 = (std::string *)(v223 + 16);
            if (*(char *)(v188 + 839) < 0)
            {
              std::string::__init_copy_ctor_external(v225, *(const std::string::value_type **)(v188 + 816), *(_QWORD *)(v188 + 824));
            }
            else
            {
              *(_OWORD *)&v225->__r_.__value_.__l.__data_ = *(_OWORD *)v214;
              *((_QWORD *)v223 + 4) = *(_QWORD *)(v214 + 16);
            }
            *((_OWORD *)v223 + 5) = 0u;
            *((_OWORD *)v223 + 6) = 0u;
            *((_OWORD *)v223 + 3) = 0u;
            *((_OWORD *)v223 + 4) = 0u;
            v226 = (float)(unint64_t)(*(_QWORD *)(v215 + 1704) + 1);
            v227 = *(float *)(v215 + 1712);
            if (!v219 || (float)(v227 * (float)v219) < v226)
            {
              v228 = 1;
              if (v219 >= 3)
                v228 = (v219 & (v219 - 1)) != 0;
              v229 = v228 | (2 * v219);
              v230 = vcvtps_u32_f32(v226 / v227);
              if (v229 <= v230)
                prime = (int8x8_t)v230;
              else
                prime = (int8x8_t)v229;
              if (*(_QWORD *)&prime == 1)
              {
                prime = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
              {
                prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              }
              v219 = *(_QWORD *)(v215 + 1688);
              if (*(_QWORD *)&prime <= v219)
              {
                if (*(_QWORD *)&prime < v219)
                {
                  v238 = vcvtps_u32_f32((float)*(unint64_t *)(v215 + 1704) / *(float *)(v215 + 1712));
                  if (v219 < 3
                    || (v239 = (uint8x8_t)vcnt_s8((int8x8_t)v219), v239.i16[0] = vaddlv_u8(v239), v239.u32[0] > 1uLL))
                  {
                    v238 = std::__next_prime(v238);
                  }
                  else
                  {
                    v240 = 1 << -(char)__clz(v238 - 1);
                    if (v238 >= 2)
                      v238 = v240;
                  }
                  if (*(_QWORD *)&prime <= v238)
                    prime = (int8x8_t)v238;
                  if (*(_QWORD *)&prime >= v219)
                  {
                    v219 = *(_QWORD *)(v215 + 1688);
                  }
                  else
                  {
                    if (prime)
                      goto LABEL_453;
                    v262 = *(void **)(v215 + 1680);
                    *(_QWORD *)(v215 + 1680) = 0;
                    if (v262)
                      operator delete(v262);
                    v219 = 0;
                    *(_QWORD *)(v215 + 1688) = 0;
                  }
                }
              }
              else
              {
LABEL_453:
                if (*(_QWORD *)&prime >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v232 = operator new(8 * *(_QWORD *)&prime);
                v233 = *(void **)(v215 + 1680);
                *(_QWORD *)(v215 + 1680) = v232;
                if (v233)
                  operator delete(v233);
                v234 = 0;
                *(int8x8_t *)(v215 + 1688) = prime;
                do
                  *(_QWORD *)(*(_QWORD *)(v215 + 1680) + 8 * v234++) = 0;
                while (*(_QWORD *)&prime != v234);
                v235 = *(_QWORD **)(v215 + 1696);
                if (v235)
                {
                  v236 = v235[1];
                  v237 = (uint8x8_t)vcnt_s8(prime);
                  v237.i16[0] = vaddlv_u8(v237);
                  if (v237.u32[0] > 1uLL)
                  {
                    if (v236 >= *(_QWORD *)&prime)
                      v236 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v236 &= *(_QWORD *)&prime - 1;
                  }
                  *(_QWORD *)(*(_QWORD *)(v215 + 1680) + 8 * v236) = v215 + 1696;
                  v241 = (_QWORD *)*v235;
                  if (*v235)
                  {
                    do
                    {
                      v242 = v241[1];
                      if (v237.u32[0] > 1uLL)
                      {
                        if (v242 >= *(_QWORD *)&prime)
                          v242 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v242 &= *(_QWORD *)&prime - 1;
                      }
                      if (v242 != v236)
                      {
                        v243 = *(_QWORD *)(v215 + 1680);
                        if (!*(_QWORD *)(v243 + 8 * v242))
                        {
                          *(_QWORD *)(v243 + 8 * v242) = v235;
                          goto LABEL_478;
                        }
                        *v235 = *v241;
                        *v241 = **(_QWORD **)(*(_QWORD *)(v215 + 1680) + 8 * v242);
                        **(_QWORD **)(*(_QWORD *)(v215 + 1680) + 8 * v242) = v241;
                        v241 = v235;
                      }
                      v242 = v236;
LABEL_478:
                      v235 = v241;
                      v241 = (_QWORD *)*v241;
                      v236 = v242;
                    }
                    while (v241);
                  }
                }
                v219 = (unint64_t)prime;
              }
              if ((v219 & (v219 - 1)) != 0)
              {
                if (v218 >= v219)
                  v159 = v218 % v219;
                else
                  v159 = v218;
              }
              else
              {
                v159 = (v219 - 1) & v218;
              }
            }
            v244 = *(_QWORD *)(v215 + 1680);
            v245 = *(_QWORD **)(v244 + 8 * v159);
            if (v245)
            {
              *(_QWORD *)v223 = *v245;
              goto LABEL_495;
            }
            *(_QWORD *)v223 = *(_QWORD *)(v215 + 1696);
            *(_QWORD *)(v215 + 1696) = v223;
            *(_QWORD *)(v244 + 8 * v159) = v215 + 1696;
            if (*(_QWORD *)v223)
            {
              v246 = *(_QWORD *)(*(_QWORD *)v223 + 8);
              if ((v219 & (v219 - 1)) != 0)
              {
                if (v246 >= v219)
                  v246 %= v219;
              }
              else
              {
                v246 &= v219 - 1;
              }
              v245 = (_QWORD *)(*(_QWORD *)(v215 + 1680) + 8 * v246);
LABEL_495:
              *v245 = v223;
            }
            ++*v216;
LABEL_497:
            v247 = *(_OWORD *)(v188 + 848);
            v248 = *(_OWORD *)(v188 + 864);
            v249 = *(_OWORD *)(v188 + 896);
            *((_OWORD *)v223 + 5) = *(_OWORD *)(v188 + 880);
            *((_OWORD *)v223 + 6) = v249;
            *((_OWORD *)v223 + 3) = v247;
            *((_OWORD *)v223 + 4) = v248;
          }
          rf::detail::insertPRRMeshesInto((rf *)&v299, v188 + 616, (uint64_t)v300);
          v250 = *(_QWORD **)&v300[16];
          if (*(_QWORD *)&v300[16])
          {
            v251 = v299.n128_u64[0] + 960;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v251, (uint64_t)(v250 + 2), (uint64_t)(v250 + 2));
              v250 = (_QWORD *)*v250;
            }
            while (v250);
          }
          rf::detail::updatePRRMeshesAt((uint64_t)&v299, (uint64_t *)(v188 + 640), (uint64_t)v269);
          v252 = v270;
          if (v270)
          {
            v253 = v299.n128_u64[0] + 1000;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v253, (uint64_t)(v252 + 2), (uint64_t)(v252 + 2));
              v252 = (_QWORD *)*v252;
            }
            while (v252);
          }
          rf::detail::removePRRMeshesFrom((rf *)&v299, (uint64_t *)(v188 + 664), *(_BYTE *)(v189 + 2904), (uint64_t)v267);
          v254 = v268;
          if (v268)
          {
            v255 = v299.n128_u64[0] + 1040;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v255, (uint64_t)(v254 + 2), (uint64_t)(v254 + 2));
              v254 = (_QWORD *)*v254;
            }
            while (v254);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v267);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v269);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v300);
          if (*(_BYTE *)(v188 + 976))
          {
            MutableCameraAnchor = rf::helpers::getMutableCameraAnchor((rf::helpers *)(v299.n128_u64[0] + 80));
            v257 = *(_OWORD *)(v188 + 912);
            v258 = *(_OWORD *)(v188 + 928);
            v259 = *(_OWORD *)(v188 + 960);
            MutableCameraAnchor[4] = *(_OWORD *)(v188 + 944);
            MutableCameraAnchor[5] = v259;
            MutableCameraAnchor[2] = v257;
            MutableCameraAnchor[3] = v258;
          }
          if (*(_BYTE *)(v188 + 1004))
          {
            v260 = v299.n128_u64[0];
            *(_DWORD *)(v299.n128_u64[0] + 408) = *(_DWORD *)(v188 + 1000);
            *(_BYTE *)(v260 + 412) = 1;
          }
          if (*(_BYTE *)(v188 + 1012))
          {
            v261 = v299.n128_u64[0];
            *(_DWORD *)(v299.n128_u64[0] + 416) = *(_DWORD *)(v188 + 1008);
            *(_BYTE *)(v261 + 420) = 1;
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)buf);
          if (__p)
          {
            v272 = __p;
            operator delete(__p);
          }
          if (v273)
          {
            v274 = v273;
            operator delete(v273);
          }
          if (v275)
          {
            v276 = v275;
            operator delete(v275);
          }
          if (v277)
          {
            v278 = v277;
            operator delete(v277);
          }
          if (v279)
          {
            v280 = v279;
            operator delete(v279);
          }
          if (v281)
          {
            v282 = v281;
            operator delete(v281);
          }
          if (v283)
          {
            v284 = v283;
            operator delete(v283);
          }
          if (v285)
          {
            v286 = v285;
            operator delete(v285);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v287);
          if (v289)
          {
            v290 = v289;
            operator delete(v289);
          }
          if (v291)
          {
            v292 = v291;
            operator delete(v291);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v293);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v295);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v297);
          goto LABEL_534;
        }
      }
      else
      {
        if (v198 > 1)
        {
          if (v202 >= *(_QWORD *)&v195)
            v202 %= *(_QWORD *)&v195;
        }
        else
        {
          v202 &= *(_QWORD *)&v195 - 1;
        }
        if (v202 != v199)
          goto LABEL_412;
      }
      v201 = (_QWORD *)*v201;
      if (!v201)
        goto LABEL_412;
    }
  }
  v297[0] = (uint64_t *)&v299;
  v55 = (_QWORD *)v299.n128_u64[0];
  v56 = *(uint64_t **)(v299.n128_u64[0] + 16);
  if (!v56)
    goto LABEL_261;
  do
  {
    if (*(_BYTE *)(v56[6] + 112))
    {
      v57 = (uint64_t *)*v56;
      goto LABEL_251;
    }
    v58 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 720), (uint64_t)(v56 + 2));
    if (v58)
    {
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 720), v58, (uint64_t)buf);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
    }
    v59 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 760), (uint64_t)(v56 + 2));
    if (v59)
    {
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 760), v59, (uint64_t)buf);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
    }
    v60 = (_QWORD *)v299.n128_u64[0];
    v61 = v56[5];
    if (!v61)
    {
      if (*((_BYTE *)v56 + 32))
        v122 = (_QWORD *)v56[2];
      else
        v122 = v56 + 2;
      v61 = ((*v122 >> 2) + (*v122 << 6) + v122[1] + 2654435769) ^ *v122;
      v56[5] = v61;
    }
    v62 = (int8x8_t)v60[106];
    if (!*(_QWORD *)&v62)
      goto LABEL_165;
    v63 = (uint8x8_t)vcnt_s8(v62);
    v63.i16[0] = vaddlv_u8(v63);
    v64 = v63.u32[0];
    if (v63.u32[0] > 1uLL)
    {
      v65 = v61;
      if (v61 >= *(_QWORD *)&v62)
        v65 = v61 % *(_QWORD *)&v62;
    }
    else
    {
      v65 = (*(_QWORD *)&v62 - 1) & v61;
    }
    v66 = *(_QWORD ***)(v60[105] + 8 * v65);
    if (!v66)
      goto LABEL_165;
    v67 = *v66;
    if (!*v66)
      goto LABEL_165;
    v68 = (uint64_t)(v60 + 109);
    while (1)
    {
      v69 = v67[1];
      if (v69 == v61)
        break;
      if (v64 > 1)
      {
        if (v69 >= *(_QWORD *)&v62)
          v69 %= *(_QWORD *)&v62;
      }
      else
      {
        v69 &= *(_QWORD *)&v62 - 1;
      }
      if (v69 != v65)
        goto LABEL_164;
LABEL_135:
      v67 = (_QWORD *)*v67;
      if (!v67)
        goto LABEL_164;
    }
    if (!rf::data_flow::RFUUID::Equality::operator()(v68, (uint64_t)(v67 + 2), (uint64_t)(v56 + 2)))
      goto LABEL_135;
    v70 = v299.n128_u64[0];
    v71 = *(int8x8_t *)(v299.n128_u64[0] + 848);
    v72 = v67[1];
    v73 = (uint8x8_t)vcnt_s8(v71);
    v73.i16[0] = vaddlv_u8(v73);
    if (v73.u32[0] > 1uLL)
    {
      if (v72 >= *(_QWORD *)&v71)
        v72 %= *(_QWORD *)&v71;
    }
    else
    {
      v72 &= *(_QWORD *)&v71 - 1;
    }
    v74 = *(_QWORD *)(v299.n128_u64[0] + 840);
    v75 = *(_QWORD **)(v74 + 8 * v72);
    do
    {
      v76 = v75;
      v75 = (_QWORD *)*v75;
    }
    while (v75 != v67);
    if (v76 == (_QWORD *)(v299.n128_u64[0] + 856))
      goto LABEL_154;
    v77 = v76[1];
    if (v73.u32[0] > 1uLL)
    {
      if (v77 >= *(_QWORD *)&v71)
        v77 %= *(_QWORD *)&v71;
    }
    else
    {
      v77 &= *(_QWORD *)&v71 - 1;
    }
    if (v77 != v72)
    {
LABEL_154:
      if (!*v67)
        goto LABEL_155;
      v78 = *(_QWORD *)(*v67 + 8);
      if (v73.u32[0] > 1uLL)
      {
        if (v78 >= *(_QWORD *)&v71)
          v78 %= *(_QWORD *)&v71;
      }
      else
      {
        v78 &= *(_QWORD *)&v71 - 1;
      }
      if (v78 != v72)
LABEL_155:
        *(_QWORD *)(v74 + 8 * v72) = 0;
    }
    v79 = *v67;
    if (*v67)
    {
      v80 = *(_QWORD *)(v79 + 8);
      if (v73.u32[0] > 1uLL)
      {
        if (v80 >= *(_QWORD *)&v71)
          v80 %= *(_QWORD *)&v71;
      }
      else
      {
        v80 &= *(_QWORD *)&v71 - 1;
      }
      if (v80 != v72)
      {
        *(_QWORD *)(*(_QWORD *)(v70 + 840) + 8 * v80) = v76;
        v79 = *v67;
      }
    }
    *v76 = v79;
    *v67 = 0;
    --*(_QWORD *)(v70 + 864);
    *(_QWORD *)buf = v67;
    *(_QWORD *)&buf[8] = v70 + 856;
    LOBYTE(v303) = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_164:
    v60 = (_QWORD *)v299.n128_u64[0];
LABEL_165:
    v81 = v56[5];
    if (!v81)
    {
      if (*((_BYTE *)v56 + 32))
        v123 = (_QWORD *)v56[2];
      else
        v123 = v56 + 2;
      v81 = ((*v123 >> 2) + (*v123 << 6) + v123[1] + 2654435769) ^ *v123;
      v56[5] = v81;
    }
    v82 = (int8x8_t)v60[111];
    if (!*(_QWORD *)&v82)
      goto LABEL_213;
    v83 = (uint8x8_t)vcnt_s8(v82);
    v83.i16[0] = vaddlv_u8(v83);
    v84 = v83.u32[0];
    if (v83.u32[0] > 1uLL)
    {
      v85 = v81;
      if (v81 >= *(_QWORD *)&v82)
        v85 = v81 % *(_QWORD *)&v82;
    }
    else
    {
      v85 = (*(_QWORD *)&v82 - 1) & v81;
    }
    v86 = *(_QWORD ***)(v60[110] + 8 * v85);
    if (!v86)
      goto LABEL_213;
    v87 = *v86;
    if (!*v86)
      goto LABEL_213;
    v88 = (uint64_t)(v60 + 114);
    while (2)
    {
      v89 = v87[1];
      if (v89 != v81)
      {
        if (v84 > 1)
        {
          if (v89 >= *(_QWORD *)&v82)
            v89 %= *(_QWORD *)&v82;
        }
        else
        {
          v89 &= *(_QWORD *)&v82 - 1;
        }
        if (v89 != v85)
          goto LABEL_212;
LABEL_182:
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_212;
        continue;
      }
      break;
    }
    if (!rf::data_flow::RFUUID::Equality::operator()(v88, (uint64_t)(v87 + 2), (uint64_t)(v56 + 2)))
      goto LABEL_182;
    v90 = v299.n128_u64[0];
    v91 = *(int8x8_t *)(v299.n128_u64[0] + 888);
    v92 = v87[1];
    v93 = (uint8x8_t)vcnt_s8(v91);
    v93.i16[0] = vaddlv_u8(v93);
    if (v93.u32[0] > 1uLL)
    {
      if (v92 >= *(_QWORD *)&v91)
        v92 %= *(_QWORD *)&v91;
    }
    else
    {
      v92 &= *(_QWORD *)&v91 - 1;
    }
    v94 = (_QWORD *)*v87;
    v95 = *(_QWORD *)(v299.n128_u64[0] + 880);
    v96 = *(_QWORD **)(v95 + 8 * v92);
    do
    {
      v97 = v96;
      v96 = (_QWORD *)*v96;
    }
    while (v96 != v87);
    if (v97 == (_QWORD *)(v299.n128_u64[0] + 896))
      goto LABEL_201;
    v98 = v97[1];
    if (v93.u32[0] > 1uLL)
    {
      if (v98 >= *(_QWORD *)&v91)
        v98 %= *(_QWORD *)&v91;
    }
    else
    {
      v98 &= *(_QWORD *)&v91 - 1;
    }
    if (v98 == v92)
    {
LABEL_203:
      if (v94)
      {
        v99 = v94[1];
        goto LABEL_205;
      }
    }
    else
    {
LABEL_201:
      if (!v94)
        goto LABEL_202;
      v99 = v94[1];
      if (v93.u32[0] > 1uLL)
      {
        v100 = v94[1];
        if (v99 >= *(_QWORD *)&v91)
          v100 = v99 % *(_QWORD *)&v91;
      }
      else
      {
        v100 = v99 & (*(_QWORD *)&v91 - 1);
      }
      if (v100 != v92)
      {
LABEL_202:
        *(_QWORD *)(v95 + 8 * v92) = 0;
        v94 = (_QWORD *)*v87;
        goto LABEL_203;
      }
LABEL_205:
      if (v93.u32[0] > 1uLL)
      {
        if (v99 >= *(_QWORD *)&v91)
          v99 %= *(_QWORD *)&v91;
      }
      else
      {
        v99 &= *(_QWORD *)&v91 - 1;
      }
      if (v99 != v92)
      {
        *(_QWORD *)(*(_QWORD *)(v90 + 880) + 8 * v99) = v97;
        v94 = (_QWORD *)*v87;
      }
    }
    *v97 = v94;
    *v87 = 0;
    --*(_QWORD *)(v90 + 904);
    std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](v87 + 6);
    operator delete(v87);
LABEL_212:
    v60 = (_QWORD *)v299.n128_u64[0];
LABEL_213:
    v101 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v60 + 115, (uint64_t)(v56 + 2));
    v102 = v101;
    if (v101)
    {
      v103 = v299.n128_u64[0];
      v104 = *(int8x8_t *)(v299.n128_u64[0] + 928);
      v105 = v101[1];
      v106 = (uint8x8_t)vcnt_s8(v104);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        if (v105 >= *(_QWORD *)&v104)
          v105 %= *(_QWORD *)&v104;
      }
      else
      {
        v105 &= *(_QWORD *)&v104 - 1;
      }
      v107 = *v101;
      v108 = *(_QWORD *)(v299.n128_u64[0] + 920);
      v109 = *(uint64_t **)(v108 + 8 * v105);
      do
      {
        v110 = v109;
        v109 = (uint64_t *)*v109;
      }
      while (v109 != v101);
      if (v110 == (uint64_t *)(v299.n128_u64[0] + 936))
        goto LABEL_231;
      v111 = v110[1];
      if (v106.u32[0] > 1uLL)
      {
        if (v111 >= *(_QWORD *)&v104)
          v111 %= *(_QWORD *)&v104;
      }
      else
      {
        v111 &= *(_QWORD *)&v104 - 1;
      }
      if (v111 == v105)
      {
LABEL_233:
        if (v107)
        {
          v112 = *(_QWORD *)(v107 + 8);
          goto LABEL_235;
        }
      }
      else
      {
LABEL_231:
        if (!v107)
          goto LABEL_232;
        v112 = *(_QWORD *)(v107 + 8);
        if (v106.u32[0] > 1uLL)
        {
          v113 = *(_QWORD *)(v107 + 8);
          if (v112 >= *(_QWORD *)&v104)
            v113 = v112 % *(_QWORD *)&v104;
        }
        else
        {
          v113 = v112 & (*(_QWORD *)&v104 - 1);
        }
        if (v113 != v105)
        {
LABEL_232:
          *(_QWORD *)(v108 + 8 * v105) = 0;
          v107 = *v101;
          goto LABEL_233;
        }
LABEL_235:
        if (v106.u32[0] > 1uLL)
        {
          if (v112 >= *(_QWORD *)&v104)
            v112 %= *(_QWORD *)&v104;
        }
        else
        {
          v112 &= *(_QWORD *)&v104 - 1;
        }
        if (v112 != v105)
        {
          *(_QWORD *)(*(_QWORD *)(v103 + 920) + 8 * v112) = v110;
          v107 = *v101;
        }
      }
      *v110 = v107;
      *v101 = 0;
      --*(_QWORD *)(v103 + 944);

      operator delete(v102);
    }
    v114 = v299.n128_u64[0];
    v115 = *((_OWORD *)v56 + 2);
    *(_OWORD *)buf = *((_OWORD *)v56 + 1);
    v303 = v115;
    v116 = (std::__shared_weak_count *)v56[7];
    v304 = v56[6];
    v305 = v116;
    if (v116)
    {
      p_shared_owners = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldxr(p_shared_owners);
      while (__stxr(v118 + 1, p_shared_owners));
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(v114 + 800, (uint64_t)buf, (uint64_t)buf);
    v119 = v305;
    if (v305)
    {
      v120 = (unint64_t *)&v305->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v57 = (uint64_t *)*v56;
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(v299.n128_u64[0], v56, (uint64_t)buf);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
LABEL_251:
    v56 = v57;
  }
  while (v57);
  v55 = (_QWORD *)v299.n128_u64[0];
LABEL_261:
  v124 = (uint64_t *)v55[7];
  if (v124)
  {
    do
    {
      if (*(_BYTE *)(v124[6] + 112))
      {
        v125 = (uint64_t *)*v124;
      }
      else
      {
        v126 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v55 + 120, (uint64_t)(v124 + 2));
        if (v126)
        {
          std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 960), v126, (uint64_t)buf);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
        }
        v127 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(v299.n128_u64[0] + 1000), (uint64_t)(v124 + 2));
        if (v127)
        {
          std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 1000), v127, (uint64_t)buf);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
        }
        v128 = v299.n128_u64[0];
        v129 = *((_OWORD *)v124 + 2);
        *(_OWORD *)buf = *((_OWORD *)v124 + 1);
        v303 = v129;
        v130 = (std::__shared_weak_count *)v124[7];
        v304 = v124[6];
        v305 = v130;
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(v128 + 1040, (uint64_t)buf, (uint64_t)buf);
        v133 = v305;
        if (v305)
        {
          v134 = (unint64_t *)&v305->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v125 = (uint64_t *)*v124;
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(v299.n128_u64[0] + 40), v124, (uint64_t)buf);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
        v55 = (_QWORD *)v299.n128_u64[0];
      }
      v124 = v125;
    }
    while (v125);
  }
  v136 = (uint64_t *)v55[38];
  if (v136)
  {
    do
    {
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v299.n128_u64[0] + 1320, (uint64_t)(v136 + 2), (_OWORD *)v136 + 1);
      v136 = (uint64_t *)*v136;
    }
    while (v136);
    v55 = (_QWORD *)v299.n128_u64[0];
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear((uint64_t)(v55 + 36));
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((_QWORD *)(v299.n128_u64[0] + 1240));
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((_QWORD *)(v299.n128_u64[0] + 1280));
LABEL_534:
  std::mutex::unlock((std::mutex *)v299.n128_u64[1]);
}

void sub_22779C900(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_22779CBE8()
{
  JUMPOUT(0x22779CB64);
}

void rf::ARState::consumeChangesSinceLast(uint64_t a1, uint64_t a2)
{
  uint64_t *Entity;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  rf *v17;
  uint64_t v18;
  void *Mutable;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void **v26;
  NSObject *v27;
  const char *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  const UInt8 *v33;
  CFIndex v34;
  CFDataRef v35;
  _QWORD *v36;
  unint64_t *v37;
  NSObject *v38;
  int v39;
  const char *v40;
  void **v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t *i;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t **j;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t k;
  rf::AnchorDefinitionComponent *Scene;
  rf::AnchorDefinitionComponent *v73;
  char *ComponentsOfCustomType;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t Object;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t (*v90)();
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t **v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  __int128 v99;
  _QWORD *v100;
  uint64_t *v101;
  _QWORD *v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD **v106;
  uint64_t v107;
  _QWORD *v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t *v111;
  __int128 v112;
  _QWORD *v113;
  __int128 v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  _QWORD *v120;
  __int128 v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  __int128 v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t m;
  uint64_t v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  __int128 v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  __int128 v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t n;
  uint64_t v155;
  void *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  BOOL v170;
  int v171;
  uint64_t *ii;
  int v173;
  BOOL v174;
  int v175;
  _QWORD *v176;
  CFDataRef cf;
  CFDataRef v178;
  uint64_t v179;
  uint64_t v180;
  const __CFAllocator *v181;
  const __CFAllocator *v182;
  std::mutex *v184;
  _OWORD v185[2];
  int v186;
  _OWORD v187[2];
  int v188;
  _OWORD v189[2];
  int v190;
  __int128 v191;
  __int128 v192;
  int v193;
  _OWORD v194[2];
  int v195;
  __int128 v196;
  __int128 v197;
  int v198;
  __int128 v199;
  __int128 v200;
  int v201;
  _QWORD *v202;
  std::mutex *v203;
  uint8_t buf[16];
  __int128 v205;
  int v206;
  uint8_t v207[32];
  int v208;
  __int128 v209;
  __int128 v210;
  int v211;
  void *__p[2];
  __int128 v213;
  uint64_t (*v214)();
  _BYTE v215[40];
  _QWORD v216[15];
  _BYTE v217[40];
  _BYTE v218[40];
  _BYTE v219[40];
  _BYTE v220[40];
  _BYTE v221[40];
  _BYTE v222[40];
  _BYTE v223[40];
  _BYTE v224[40];
  _BYTE v225[40];
  _BYTE v226[40];
  _BYTE v227[40];
  _BYTE v228[40];
  _BYTE v229[40];
  _BYTE v230[40];
  _BYTE v231[40];
  _BYTE v232[40];
  _BYTE v233[40];
  _BYTE v234[40];
  _BYTE v235[40];
  _BYTE v236[40];
  int v237;
  _OWORD v238[2];
  int v239;
  uint64_t v240[4];
  int v241;
  __int16 v242;
  __int128 block;
  __int128 v244;
  void **v245;
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v176 = (_QWORD *)(a1 + 64);
  v202 = (_QWORD *)(a1 + 64);
  v203 = (std::mutex *)a1;
  std::mutex::lock((std::mutex *)a1);
  v214 = 0;
  *(_OWORD *)__p = 0u;
  v213 = 0u;
  *(_DWORD *)v215 = 1065353216;
  memset(&v215[8], 0, 32);
  memset(&v216[1], 0, 32);
  LODWORD(v216[0]) = 1065353216;
  LODWORD(v216[5]) = 1065353216;
  memset(&v216[6], 0, 32);
  memset(&v216[11], 0, 32);
  LODWORD(v216[10]) = 1065353216;
  *(_DWORD *)v217 = 1065353216;
  memset(&v217[8], 0, 32);
  memset(&v218[8], 0, 32);
  *(_DWORD *)v218 = 1065353216;
  *(_DWORD *)v219 = 1065353216;
  memset(&v219[8], 0, 32);
  *(_DWORD *)v220 = 1065353216;
  memset(&v220[8], 0, 32);
  *(_DWORD *)v221 = 1065353216;
  memset(&v221[8], 0, 32);
  *(_DWORD *)v222 = 1065353216;
  memset(&v222[8], 0, 32);
  *(_DWORD *)v223 = 1065353216;
  memset(&v223[8], 0, 32);
  *(_DWORD *)v224 = 1065353216;
  memset(&v224[8], 0, 32);
  *(_DWORD *)v225 = 1065353216;
  memset(&v225[8], 0, 32);
  *(_DWORD *)v226 = 1065353216;
  memset(&v226[8], 0, 32);
  *(_DWORD *)v227 = 1065353216;
  memset(&v227[8], 0, 32);
  *(_DWORD *)v228 = 1065353216;
  memset(&v228[8], 0, 32);
  *(_DWORD *)v229 = 1065353216;
  memset(&v229[8], 0, 32);
  *(_DWORD *)v230 = 1065353216;
  memset(&v230[8], 0, 32);
  *(_DWORD *)v231 = 1065353216;
  memset(&v231[8], 0, 32);
  *(_DWORD *)v232 = 1065353216;
  memset(&v232[8], 0, 32);
  *(_DWORD *)v233 = 1065353216;
  memset(&v233[8], 0, 32);
  *(_DWORD *)v234 = 1065353216;
  memset(&v234[8], 0, 32);
  *(_DWORD *)v235 = 1065353216;
  memset(&v235[8], 0, 32);
  *(_DWORD *)v236 = 1065353216;
  memset(&v236[8], 0, 32);
  v237 = 1065353216;
  memset(v238, 0, sizeof(v238));
  v239 = 1065353216;
  Entity = v240;
  memset(v240, 0, sizeof(v240));
  v241 = 1065353216;
  *(_QWORD *)(a1 + 1792) = 0;
  v242 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1800, (uint64_t *)&__p[1]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1840, (uint64_t *)&v215[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1880, &v216[1]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1920, &v216[6]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1960, &v216[11]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2000, (uint64_t *)&v217[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2040, (uint64_t *)&v218[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2080, (uint64_t *)&v219[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign(a1 + 2120, (uint64_t *)&v220[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2160, (uint64_t *)&v221[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2200, (uint64_t *)&v222[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2240, (uint64_t *)&v223[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2280, (uint64_t *)&v224[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2320, (uint64_t *)&v225[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign(a1 + 2360, (uint64_t *)&v226[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2400, (uint64_t *)&v227[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2440, (uint64_t *)&v228[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2480, (uint64_t *)&v229[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2520, (uint64_t *)&v230[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2560, (uint64_t *)&v231[8]);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign(a1 + 2600, (uint64_t *)&v232[8]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 2640, (uint64_t *)&v233[8]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 2680, (uint64_t *)&v234[8]);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign(a1 + 2720, (uint64_t *)&v235[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2760, (uint64_t *)&v236[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2800, (uint64_t *)v238);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign(a1 + 2840, v240);
  *(_WORD *)(a1 + 2880) = v242;
  rf::data_flow::consumer::UpdateData::~UpdateData((rf::data_flow::consumer::UpdateData *)__p);
  v4 = *(_QWORD *)(a1 + 2896);
  *(_QWORD *)(a1 + 2896) = v4 + 1;
  *(_QWORD *)(a1 + 1792) = v4;
  v184 = (std::mutex *)a1;
  if (!*(_BYTE *)(a2 + 8))
  {
    v7 = v176;
    goto LABEL_193;
  }
  v5 = *(_QWORD **)(a1 + 840);
  if (v5)
  {
    v6 = 0;
    v199 = 0u;
    v200 = 0u;
    v201 = 1065353216;
LABEL_7:
    v8 = (_QWORD *)(a1 + 800);
    do
    {
      while (1)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>((uint64_t)&v199, (uint64_t)(v5 + 2), (uint64_t)(v5 + 2));
        if (v6)
          break;
        v9 = (_QWORD *)*v5;
        v5 = v8;
        if (!v9)
          break;
        v6 = 0;
        v5 = v9;
      }
      v5 = (_QWORD *)*v5;
      v6 = 1;
    }
    while (v5);
    if (!*(_BYTE *)(a2 + 8))
      std::__throw_bad_optional_access[abi:ne180100]();
    goto LABEL_14;
  }
  v5 = *(_QWORD **)(a1 + 800);
  v199 = 0u;
  v200 = 0u;
  v201 = 1065353216;
  if (v5)
  {
    v6 = 1;
    goto LABEL_7;
  }
LABEL_14:
  v10 = MEMORY[0x22E29DA08](*(_QWORD *)a2);
  v11 = (uint64_t *)v200;
  if (!(_QWORD)v200)
    goto LABEL_154;
  v12 = v10;
  v180 = *MEMORY[0x24BE26308];
  v179 = *MEMORY[0x24BE262F8];
  v182 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v181 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  do
  {
    v13 = *((_OWORD *)v11 + 2);
    v209 = *((_OWORD *)v11 + 1);
    v210 = v13;
    v14 = *(_QWORD *)(v11[6] + 32);
    if (rf::isRealityFusionVerboseLoggingEnabled(void)::once != -1)
      dispatch_once(&rf::isRealityFusionVerboseLoggingEnabled(void)::once, &__block_literal_global_3_0);
    if (rf::isRealityFusionVerboseLoggingEnabled(void)::_realityFusionVerboseLoggingEnabled)
    {
      rf::realityFusionLogObject((rf *)v10);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = *(_DWORD *)(v11[6] + 116);
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v209, __p);
        v40 = "PRR";
        if (!v39)
          v40 = "MeshChunk";
        if ((SBYTE7(v213) & 0x80u) == 0)
          v41 = __p;
        else
          v41 = (void **)__p[0];
        *(_DWORD *)v207 = 136315394;
        *(_QWORD *)&v207[4] = v40;
        *(_WORD *)&v207[12] = 2080;
        *(_QWORD *)&v207[14] = v41;
        _os_log_impl(&dword_227777000, v38, OS_LOG_TYPE_DEFAULT, "ARState: Update Mesh Asset for %s mesh %s", v207, 0x16u);
        if (SBYTE7(v213) < 0)
          operator delete(__p[0]);
      }

    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((_QWORD *)&v210 + 1))
      {
        v42 = &v209;
        if ((_BYTE)v210)
          v42 = (__int128 *)v209;
        *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v42 >> 2) + (*(_QWORD *)v42 << 6) + *((_QWORD *)v42 + 1) + 2654435769) ^ *(_QWORD *)v42;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((_QWORD *)&v210 + 1))
      {
        v43 = &v209;
        if ((_BYTE)v210)
          v43 = (__int128 *)v209;
        *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v43 >> 2) + (*(_QWORD *)v43 << 6) + *((_QWORD *)v43 + 1) + 2654435769) ^ *(_QWORD *)v43;
      }
      kdebug_trace();
    }
    if (v184[45].__m_.__opaque[44])
    {
      __p[0] = 0;
      __p[1] = __p;
      *(_QWORD *)&v213 = 0x6812000000;
      *((_QWORD *)&v213 + 1) = __Block_byref_object_copy_;
      v214 = __Block_byref_object_dispose_;
      *(_QWORD *)v215 = "";
      *(_QWORD *)&v215[8] = v184;
      *(_OWORD *)&v215[24] = v209;
      *(_OWORD *)v216 = v210;
      *(_QWORD *)&v215[16] = v14;
      v216[2] = v12;
      v15 = *(NSObject **)&v184[45].__m_.__opaque[32];
      v16 = *(NSObject **)&v184[45].__m_.__opaque[24];
      *(_QWORD *)&block = MEMORY[0x24BDAC760];
      *((_QWORD *)&block + 1) = 3221225472;
      *(_QWORD *)&v244 = ___ZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManager_block_invoke;
      *((_QWORD *)&v244 + 1) = &unk_24EFD8170;
      v245 = __p;
      dispatch_group_async(v15, v16, &block);
      _Block_object_dispose(__p, 8);
      goto LABEL_27;
    }
    v18 = *(_QWORD *)v207;
    if (!*(_QWORD *)v207)
    {
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*((_QWORD *)&v210 + 1))
        {
          v44 = &v209;
          if ((_BYTE)v210)
            v44 = (__int128 *)v209;
          *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v44 >> 2) + (*(_QWORD *)v44 << 6) + *((_QWORD *)v44 + 1) + 2654435769) ^ *(_QWORD *)v44;
        }
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*((_QWORD *)&v210 + 1))
        {
          v45 = &v209;
          if ((_BYTE)v210)
            v45 = (__int128 *)v209;
          *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v45 >> 2) + (*(_QWORD *)v45 << 6) + *((_QWORD *)v45 + 1) + 2654435769) ^ *(_QWORD *)v45;
        }
        kdebug_trace();
      }
      v10 = re::internal::enableSignposts(0, 0);
      if ((_DWORD)v10)
      {
        if (!*((_QWORD *)&v210 + 1))
        {
          v46 = &v209;
          if ((_BYTE)v210)
            v46 = (__int128 *)v209;
          *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v46 >> 2) + (*(_QWORD *)v46 << 6) + *((_QWORD *)v46 + 1) + 2654435769) ^ *(_QWORD *)v46;
        }
        v10 = kdebug_trace();
      }
      goto LABEL_59;
    }
    if (!*(_BYTE *)(*(_QWORD *)v207 + 216)
      || (v17 = *(rf **)(*(_QWORD *)v207 + 192)) == 0
      || (v17 = (rf *)-[rf length](v17, "length")) == 0)
    {
      rf::realityFusionLogObject(v17);
      v22 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v209, __p);
      if ((SBYTE7(v213) & 0x80u) == 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v30;
      v27 = v22;
      v28 = "Updated Mesh with identifier %s should have indices buffer";
LABEL_78:
      _os_log_error_impl(&dword_227777000, v27, OS_LOG_TYPE_ERROR, v28, buf, 0xCu);
      if (SBYTE7(v213) < 0)
        operator delete(__p[0]);
      goto LABEL_49;
    }
    if (!*(_BYTE *)(v18 + 152)
      || (v17 = *(rf **)(v18 + 128)) == 0
      || (v17 = (rf *)-[rf length](v17, "length")) == 0)
    {
      rf::realityFusionLogObject(v17);
      v22 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v209, __p);
      if ((SBYTE7(v213) & 0x80u) == 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v26;
      v27 = v22;
      v28 = "Updated Mesh with identifier %s should have position buffer";
      goto LABEL_78;
    }
    if (!*(_BYTE *)(v18 + 184)
      || (v17 = *(rf **)(v18 + 160)) == 0
      || (v17 = (rf *)-[rf length](v17, "length")) == 0)
    {
      rf::realityFusionLogObject(v17);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v209, __p);
        if ((SBYTE7(v213) & 0x80u) == 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v29;
        v27 = v22;
        v28 = "Updated Mesh with identifier %s should have normal buffer";
        goto LABEL_78;
      }
LABEL_49:

LABEL_59:
      v23 = *(std::__shared_weak_count **)&v207[8];
      if (!*(_QWORD *)&v207[8])
        goto LABEL_27;
      v24 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_62;
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((_QWORD *)&v210 + 1))
      {
        v47 = &v209;
        if ((_BYTE)v210)
          v47 = (__int128 *)v209;
        *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v47 >> 2) + (*(_QWORD *)v47 << 6) + *((_QWORD *)v47 + 1) + 2654435769) ^ *(_QWORD *)v47;
      }
      kdebug_trace();
    }
    if (!*(_BYTE *)(v18 + 376) || !*(_QWORD *)(v18 + 368))
    {
      Mutable = (void *)REAssetServiceMeshAssetCreateMutable();
      v20 = Mutable;
      __p[0] = Mutable;
      if (*(_BYTE *)(v18 + 376))
      {
        v21 = *(_QWORD *)(v18 + 368);
        *(_QWORD *)(v18 + 368) = v20;
        if (v21)
          RERelease();
        __p[0] = 0;
      }
      else
      {
        *(_QWORD *)(v18 + 368) = Mutable;
        __p[0] = 0;
        *(_BYTE *)(v18 + 376) = 1;
      }
      RESharedPtr<REAsset>::~RESharedPtr(__p);
    }
    *(_QWORD *)buf = v180;
    *(_QWORD *)&buf[8] = v179;
    REMeshAttributesDescriptorCreate();
    REMeshDefinitionCreateWithAttributes();
    v31 = *(_QWORD *)(v18 + 208);
    v32 = objc_msgSend(*(id *)(v18 + 192), "length");
    v33 = (const UInt8 *)objc_msgSend(*(id *)(v18 + 192), "contents");
    if (v32 >= 4 * v31)
      v34 = 4 * v31;
    else
      v34 = v32;
    v178 = CFDataCreateWithBytesNoCopy(v182, v33, v34, v181);
    *(_QWORD *)&v196 = v178;
    cf = CFDataCreateWithBytesNoCopy(v182, (const UInt8 *)objc_msgSend(*(id *)(v18 + 128), "contents"), objc_msgSend(*(id *)(v18 + 128), "length"), v181);
    *(_QWORD *)&v194[0] = cf;
    v35 = CFDataCreateWithBytesNoCopy(v182, (const UInt8 *)objc_msgSend(*(id *)(v18 + 160), "contents"), objc_msgSend(*(id *)(v18 + 160), "length"), v181);
    *(_QWORD *)&v191 = v35;
    REMeshDefinitionSetIndicesWithData();
    REMeshDefinitionSetAttributeWithData();
    REMeshDefinitionSetAttributeWithData();
    REMeshModelDefinitionCreate();
    REMeshModelDefinitionAppendTriangles();
    REMeshAssetReplaceAllWithModel();
    RERelease();
    RERelease();
    RERelease();
    v36 = v202;
    *(_OWORD *)__p = v209;
    v213 = v210;
    v214 = *(uint64_t (**)())(v18 + 368);
    if (v214)
      RERetain();
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>((uint64_t)(v36 + 105), (uint64_t)__p, (uint64_t)__p);
    RESharedPtr<REAsset>::~RESharedPtr(&v214);
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((_QWORD *)&v210 + 1))
      {
        v48 = &v209;
        if ((_BYTE)v210)
          v48 = (__int128 *)v209;
        *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v48 >> 2) + (*(_QWORD *)v48 << 6) + *((_QWORD *)v48 + 1) + 2654435769) ^ *(_QWORD *)v48;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((_QWORD *)&v210 + 1))
      {
        v49 = &v209;
        if ((_BYTE)v210)
          v49 = (__int128 *)v209;
        *((_QWORD *)&v210 + 1) = ((*(_QWORD *)v49 >> 2) + (*(_QWORD *)v49 << 6) + *((_QWORD *)v49 + 1) + 2654435769) ^ *(_QWORD *)v49;
      }
      kdebug_trace();
    }
    if (v35)
      CFRelease(v35);
    if (cf)
      CFRelease(cf);
    v10 = (uint64_t)v178;
    if (v178)
      CFRelease(v178);
    v23 = *(std::__shared_weak_count **)&v207[8];
    if (*(_QWORD *)&v207[8])
    {
      v37 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
      do
        v25 = __ldaxr(v37);
      while (__stlxr(v25 - 1, v37));
LABEL_62:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
LABEL_27:
    v11 = (uint64_t *)*v11;
  }
  while (v11);
  if (v184[45].__m_.__opaque[40])
  {
    for (i = (uint64_t *)v200; i; i = (uint64_t *)*i)
    {
      v51 = (unint64_t *)i[2];
      v52 = i[3];
      v53 = *((unsigned __int8 *)i + 32);
      LODWORD(v209) = *(_DWORD *)((char *)i + 33);
      *(_DWORD *)((char *)&v209 + 3) = *((_DWORD *)i + 9);
      v54 = i[5];
      v55 = *(_QWORD *)(i[6] + 32);
      if (re::internal::enableSignposts(0, 0))
      {
        if (!v54)
        {
          if (v53)
          {
            v58 = *v51;
            v59 = v51[1];
          }
          else
          {
            v58 = (unint64_t)v51;
            v59 = v52;
          }
          v54 = ((v58 >> 2) + (v58 << 6) + v59 + 2654435769u) ^ v58;
        }
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!v54)
        {
          if (v53)
          {
            v60 = *v51;
            v61 = v51[1];
          }
          else
          {
            v60 = (unint64_t)v51;
            v61 = v52;
          }
          v54 = ((v60 >> 2) + (v60 << 6) + v61 + 2654435769u) ^ v60;
        }
        kdebug_trace();
      }
      __p[0] = 0;
      __p[1] = __p;
      *(_QWORD *)&v213 = 0x6012000000;
      *((_QWORD *)&v213 + 1) = __Block_byref_object_copy__6;
      v214 = __Block_byref_object_dispose__7;
      *(_QWORD *)v215 = "";
      *(_QWORD *)&v215[8] = v184;
      *(_QWORD *)&v215[16] = v55;
      *(_QWORD *)&v215[24] = v51;
      *(_QWORD *)&v215[32] = v52;
      LOBYTE(v216[0]) = v53;
      *(_DWORD *)((char *)v216 + 1) = v209;
      HIDWORD(v216[0]) = *(_DWORD *)((char *)&v209 + 3);
      v216[1] = v54;
      v56 = *(NSObject **)&v184[45].__m_.__opaque[32];
      v57 = *(NSObject **)&v184[45].__m_.__opaque[24];
      *(_QWORD *)&block = MEMORY[0x24BDAC760];
      *((_QWORD *)&block + 1) = 3221225472;
      *(_QWORD *)&v244 = ___ZN2rf7ARState18updatePhysicsShapeERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEE_block_invoke;
      *((_QWORD *)&v244 + 1) = &unk_24EFD8170;
      v245 = __p;
      dispatch_group_async(v56, v57, &block);
      _Block_object_dispose(__p, 8);
    }
  }
LABEL_154:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v199);
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:ne180100]();
  MEMORY[0x22E29DA08](*(_QWORD *)a2);
  v62 = v202;
  v63 = (_QWORD *)v202[107];
  if (v63)
  {
    do
    {
      v64 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(v63 + 2));
      if (v64)
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v64[6] + 368, v63 + 6);
      v65 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 5, (uint64_t)(v63 + 2));
      if (v65)
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v65[6] + 368, v63 + 6);
      v63 = (_QWORD *)*v63;
    }
    while (v63);
    v62 = v202;
  }
  Entity = (uint64_t *)v62[112];
  if (Entity)
  {
    do
    {
      Entity[6] = 0;
      *(_QWORD *)&block = REAssetManagerCollisionMeshAssetCreateFromMesh();
      *(_QWORD *)&v199 = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(Entity + 2)))
      {
        __p[0] = Entity + 2;
        v66 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v202, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v66[6] + 384, (uint64_t *)&v199);
        if (re::internal::enableSignposts(0, 0))
        {
          if (!Entity[5])
          {
            if (*((_BYTE *)Entity + 32))
              v67 = (_QWORD *)Entity[2];
            else
              v67 = Entity + 2;
            Entity[5] = ((*v67 >> 2) + (*v67 << 6) + v67[1] + 2654435769) ^ *v67;
          }
          __p[0] = Entity + 2;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v202, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
          kdebug_trace();
        }
      }
      RESharedPtr<REAsset>::~RESharedPtr(&v199);
      RESharedPtr<REAsset>::~RESharedPtr(&block);
      Entity = (uint64_t *)*Entity;
    }
    while (Entity);
    v62 = v202;
  }
  for (j = (uint64_t **)v62[117]; j; j = (uint64_t **)*j)
  {
    v69 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(j + 2));
    if (v69)
      std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(v69[6] + 400, j[6]);
    v70 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 5, (uint64_t)(j + 2));
    if (v70)
      std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(v70[6] + 400, j[6]);
  }
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:ne180100]();
  REServiceLocatorGetECSService();
  for (k = 0; k < REECSManagerSceneCount(); ++k)
  {
    Scene = (rf::AnchorDefinitionComponent *)REECSManagerGetScene();
    v73 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::instance(Scene);
    if (*(_QWORD *)v73)
    {
      rf::AnchorDefinitionComponent::instance(v73);
      ComponentsOfCustomType = (char *)RESceneGetComponentsOfCustomType();
      v76 = v75;
      *(_QWORD *)&v199 = ComponentsOfCustomType;
      *((_QWORD *)&v199 + 1) = v75;
      __p[0] = ComponentsOfCustomType;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward((uint64_t)ComponentsOfCustomType, v75, (uint64_t *)__p);
      v77 = (char *)__p[0];
      *(void **)&v200 = __p[0];
      BYTE8(v200) = 1;
      v78 = &ComponentsOfCustomType[8 * v76];
      *(void **)&v209 = __p[0];
      *((_QWORD *)&v209 + 1) = &v199;
      if (v78 != __p[0])
      {
        do
        {
          Object = RECustomComponentGetObject();
          LOBYTE(v244) = 0;
          *((_QWORD *)&v244 + 1) = 0;
          uuid_clear((unsigned __int8 *)&block);
          *(_QWORD *)&block = Object;
          LOBYTE(v244) = 1;
          Entity = (uint64_t *)REComponentGetEntity();
          v80 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 10, (uint64_t)&block);
          v81 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 15, (uint64_t)&block);
          if (v80)
          {
            if (REEntityIsActive())
            {
              rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)__p);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v80 + 6), (uint64_t)__p);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
              std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)(v202 + 140), (uint64_t)&block, &block);
            }
          }
          else
          {
            v82 = v81;
            if (v81 && REEntityIsActive())
            {
              rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)__p);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v82 + 6), (uint64_t)__p);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
            }
          }
          *(_QWORD *)&v209 = v77 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward(**((_QWORD **)&v209 + 1), *(_QWORD *)(*((_QWORD *)&v209 + 1) + 8), (uint64_t *)&v209);
          v77 = (char *)v209;
        }
        while ((char *)v209 != v78);
      }
    }
  }
  v7 = v202;
LABEL_193:
  v83 = (uint64_t *)v7[107];
  if (v83)
  {
    while (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(v83 + 2)))
    {
      v83 = (uint64_t *)*v83;
      if (!v83)
        goto LABEL_196;
    }
    v199 = 0u;
    v200 = 0u;
    v201 = 1065353216;
LABEL_265:
    *(_QWORD *)&block = v83 + 2;
    v137 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v202, (uint64_t)(v83 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)&block);
    v138 = *((_OWORD *)v83 + 2);
    *(_OWORD *)__p = *((_OWORD *)v83 + 1);
    v213 = v138;
    v139 = v137[7];
    v214 = (uint64_t (*)())v137[6];
    *(_QWORD *)v215 = v139;
    if (v139)
    {
      v140 = (unint64_t *)(v139 + 8);
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>((uint64_t)&v199, (uint64_t)__p, (uint64_t)__p);
    v142 = *(std::__shared_weak_count **)v215;
    if (*(_QWORD *)v215)
    {
      v143 = (unint64_t *)(*(_QWORD *)v215 + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    while (1)
    {
      v83 = (uint64_t *)*v83;
      if (!v83)
        break;
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(v83 + 2)))
      {
        goto LABEL_265;
      }
    }
  }
  else
  {
LABEL_196:
    v199 = 0u;
    v200 = 0u;
    v201 = 1065353216;
  }
  v84 = (uint64_t *)v202[112];
  if (v84)
  {
    while (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(v84 + 2)))
    {
      v84 = (uint64_t *)*v84;
      if (!v84)
        goto LABEL_200;
    }
    v209 = 0u;
    v210 = 0u;
    v211 = 1065353216;
LABEL_277:
    *(_QWORD *)&block = v84 + 2;
    v145 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v202, (uint64_t)(v84 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)&block);
    v146 = *((_OWORD *)v84 + 2);
    *(_OWORD *)__p = *((_OWORD *)v84 + 1);
    v213 = v146;
    v147 = v145[7];
    v214 = (uint64_t (*)())v145[6];
    *(_QWORD *)v215 = v147;
    if (v147)
    {
      v148 = (unint64_t *)(v147 + 8);
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>((uint64_t)&v209, (uint64_t)__p, (uint64_t)__p);
    v150 = *(std::__shared_weak_count **)v215;
    if (*(_QWORD *)v215)
    {
      v151 = (unint64_t *)(*(_QWORD *)v215 + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    while (1)
    {
      v84 = (uint64_t *)*v84;
      if (!v84)
        break;
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202, (uint64_t)(v84 + 2)))
      {
        goto LABEL_277;
      }
    }
  }
  else
  {
LABEL_200:
    v209 = 0u;
    v210 = 0u;
    v211 = 1065353216;
  }
  v85 = v202;
  v86 = (uint64_t *)v202[137];
  memset(v207, 0, sizeof(v207));
  v208 = 1065353216;
  if (v86)
  {
    do
    {
      v87 = v202;
      v88 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 10, (uint64_t)(v86 + 2));
      Entity = v88 + 6;
      v89 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v87 + 15, (uint64_t)(v86 + 2));
      v90 = (uint64_t (*)())(v89 + 6);
      if (!v89)
        v90 = 0;
      v91 = *((_OWORD *)v86 + 2);
      if (v88)
        v90 = (uint64_t (*)())(v88 + 6);
      *(_OWORD *)__p = *((_OWORD *)v86 + 1);
      v213 = v91;
      v214 = v90;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>((float *)v207, (uint64_t)__p, (uint64_t)__p);
      v86 = (uint64_t *)*v86;
    }
    while (v86);
    v85 = v202;
  }
  *(_QWORD *)&v213 = v85 + 140;
  *((_QWORD *)&v213 + 1) = v85 + 135;
  v214 = (uint64_t (*)())&v202;
  v215[0] = 1;
  v92 = v85[142];
  if (v92)
  {
    v93 = 0;
  }
  else
  {
    v92 = v85[137];
    v93 = 1;
  }
  *(_OWORD *)buf = 0u;
  v205 = 0u;
  v206 = 1065353216;
  *(_QWORD *)&v196 = &__p[1];
  *((_QWORD *)&v196 + 1) = v92;
  *(_QWORD *)&v197 = v93;
  *((_QWORD *)&v197 + 1) = &v214;
  while (2)
  {
    if (v93 == -1)
    {
LABEL_215:
      v94 = (uint64_t **)*((_QWORD *)&v197 + 1);
LABEL_218:
      v95 = **v94;
      v96 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(v95 + 80), (uint64_t)(Entity + 2));
      v97 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(v95 + 120), (uint64_t)(Entity + 2));
      v98 = (void **)(v97 + 6);
      if (!v97)
        v98 = 0;
      v99 = *((_OWORD *)Entity + 2);
      if (v96)
        v98 = (void **)(v96 + 6);
      block = *((_OWORD *)Entity + 1);
      v244 = v99;
      v245 = v98;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>((float *)buf, (uint64_t)&block, (uint64_t)&block);
      *((_QWORD *)&block + 1) = -1;
      ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(v197, (_QWORD **)&v196 + 1, &v196, (uint64_t)&block);
      v93 = v197;
      continue;
    }
    break;
  }
  if (v93 != 1)
  {
    v94 = (uint64_t **)*((_QWORD *)&v197 + 1);
    if (v93 < 2)
      Entity = (uint64_t *)*((_QWORD *)&v196 + 1);
    goto LABEL_218;
  }
  Entity = (uint64_t *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
    goto LABEL_215;
  v100 = v202;
  v101 = (uint64_t *)v202[172];
  v196 = 0u;
  v197 = 0u;
  v198 = 1065353216;
  if (v101)
  {
    do
    {
      __p[0] = v101 + 2;
      v102 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v202 + 41), (uint64_t)(v101 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v103 = *((_OWORD *)v101 + 2);
      *(_OWORD *)__p = *((_OWORD *)v101 + 1);
      v213 = v103;
      v214 = (uint64_t (*)())(v102 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)&v196, (uint64_t)__p, (uint64_t)__p);
      v101 = (uint64_t *)*v101;
    }
    while (v101);
    v100 = v202;
  }
  *(_QWORD *)&v213 = v100 + 175;
  *((_QWORD *)&v213 + 1) = v100 + 170;
  v214 = (uint64_t (*)())&v202;
  v215[0] = 1;
  v104 = v100[177];
  if (v104)
  {
    v105 = 0;
  }
  else
  {
    v104 = v100[172];
    v105 = 1;
  }
  memset(v194, 0, sizeof(v194));
  v195 = 1065353216;
  *(_QWORD *)&v191 = &__p[1];
  *((_QWORD *)&v191 + 1) = v104;
  *(_QWORD *)&v192 = v105;
  *((_QWORD *)&v192 + 1) = &v214;
  while (2)
  {
    if (v105 == -1)
    {
LABEL_233:
      v106 = (_QWORD **)*((_QWORD *)&v192 + 1);
LABEL_236:
      v107 = **v106 + 328;
      *(_QWORD *)&v189[0] = Entity + 2;
      v108 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v107, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)v189);
      v109 = *((_OWORD *)Entity + 2);
      block = *((_OWORD *)Entity + 1);
      v244 = v109;
      v245 = (void **)(v108 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)v194, (uint64_t)&block, (uint64_t)&block);
      *((_QWORD *)&block + 1) = -1;
      ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(v192, (_QWORD **)&v191 + 1, &v191, (uint64_t)&block);
      v105 = v192;
      continue;
    }
    break;
  }
  if (v105 != 1)
  {
    v106 = (_QWORD **)*((_QWORD *)&v192 + 1);
    if (v105 < 2)
      Entity = (uint64_t *)*((_QWORD *)&v191 + 1);
    goto LABEL_236;
  }
  Entity = (uint64_t *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
    goto LABEL_233;
  v110 = v202;
  v111 = (uint64_t *)v202[182];
  v112 = 0uLL;
  block = 0u;
  v244 = 0u;
  LODWORD(v245) = 1065353216;
  if (v111)
  {
    do
    {
      __p[0] = v111 + 2;
      v113 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v202 + 41), (uint64_t)(v111 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v114 = *((_OWORD *)v111 + 2);
      *(_OWORD *)__p = *((_OWORD *)v111 + 1);
      v213 = v114;
      v214 = (uint64_t (*)())(v113 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)&block, (uint64_t)__p, (uint64_t)__p);
      v111 = (uint64_t *)*v111;
    }
    while (v111);
    v110 = v202;
    v112 = 0uLL;
  }
  v115 = v110[157];
  v191 = v112;
  v192 = v112;
  v193 = 1065353216;
  if (v115)
  {
    do
    {
      __p[0] = (void *)(v115 + 16);
      v116 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v202 + 36), v115 + 16, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v117 = *(_OWORD *)(v115 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v115 + 16);
      v213 = v117;
      v214 = (uint64_t (*)())(v116 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>((float *)&v191, (uint64_t)__p, (uint64_t)__p);
      v115 = *(_QWORD *)v115;
    }
    while (v115);
    v110 = v202;
  }
  v118 = v110[162];
  v119 = 0uLL;
  memset(v189, 0, sizeof(v189));
  v190 = 1065353216;
  if (v118)
  {
    do
    {
      __p[0] = (void *)(v118 + 16);
      v120 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v202 + 36), v118 + 16, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v121 = *(_OWORD *)(v118 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v118 + 16);
      v213 = v121;
      v214 = (uint64_t (*)())(v120 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>((float *)v189, (uint64_t)__p, (uint64_t)__p);
      v118 = *(_QWORD *)v118;
    }
    while (v118);
    v110 = v202;
    v119 = 0uLL;
  }
  v122 = v110[187];
  v187[0] = v119;
  v187[1] = v119;
  v188 = 1065353216;
  if (v122)
  {
    do
    {
      v123 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 26, v122 + 16);
      if (!v123)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v124 = *(_OWORD *)(v122 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v122 + 16);
      v213 = v124;
      v214 = (uint64_t (*)())(v123 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>((float *)v187, (uint64_t)__p, (uint64_t)__p);
      v122 = *(_QWORD *)v122;
    }
    while (v122);
    v110 = v202;
  }
  v125 = v110[192];
  memset(v185, 0, sizeof(v185));
  v186 = 1065353216;
  if (v125)
  {
    do
    {
      v126 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v202 + 26, v125 + 16);
      if (!v126)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v127 = *(_OWORD *)(v125 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v125 + 16);
      v213 = v127;
      v214 = (uint64_t (*)())(v126 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>((float *)v185, (uint64_t)__p, (uint64_t)__p);
      v125 = *(_QWORD *)v125;
    }
    while (v125);
    v110 = v202;
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v110 + 217), v110 + 90);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 222), v202 + 95);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 227), v202 + 100);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 232), v202 + 120);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 237), v202 + 125);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 242), v202 + 130);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 247), (uint64_t *)&v199);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v202 + 252), (uint64_t *)&v209);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign((uint64_t)(v202 + 257), v202 + 115);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 277), (uint64_t *)v207);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 282), (uint64_t *)buf);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign((uint64_t)(v202 + 287), v202 + 150);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 292), (uint64_t *)&v196);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 297), (uint64_t *)v194);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 302), (uint64_t *)&block);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 307), (uint64_t *)&v191);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 312), (uint64_t *)v189);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v202 + 317), v202 + 165);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v202 + 322), v202 + 200);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v202 + 327), v202 + 205);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign((uint64_t)(v202 + 332), v202 + 210);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 337), (uint64_t *)v187);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v202 + 342), (uint64_t *)v185);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign((uint64_t)(v202 + 347), v202 + 195);
  v128 = v202;
  v129 = v202 + 90;
  *((_WORD *)v202 + 1408) = *((_WORD *)v202 + 860);
  *(_OWORD *)__p = 0u;
  v213 = 0u;
  memset(v215, 0, 32);
  LODWORD(v214) = 1065353216;
  *(_DWORD *)&v215[32] = 1065353216;
  memset(v216, 0, 32);
  memset(&v216[5], 0, 32);
  LODWORD(v216[4]) = 1065353216;
  LODWORD(v216[9]) = 1065353216;
  memset(&v216[10], 0, 32);
  memset(v217, 0, 32);
  LODWORD(v216[14]) = 1065353216;
  *(_DWORD *)&v217[32] = 1065353216;
  memset(v218, 0, 32);
  *(_DWORD *)&v218[32] = 1065353216;
  memset(v219, 0, 32);
  *(_DWORD *)&v219[32] = 1065353216;
  memset(v220, 0, 32);
  *(_DWORD *)&v220[32] = 1065353216;
  memset(v221, 0, 32);
  *(_DWORD *)&v221[32] = 1065353216;
  memset(v222, 0, 32);
  *(_DWORD *)&v222[32] = 1065353216;
  memset(v223, 0, 32);
  *(_DWORD *)&v223[32] = 1065353216;
  memset(v224, 0, 32);
  *(_DWORD *)&v224[32] = 1065353216;
  memset(v225, 0, 32);
  *(_DWORD *)&v225[32] = 1065353216;
  memset(v226, 0, 32);
  *(_DWORD *)&v226[32] = 1065353216;
  memset(v227, 0, 32);
  *(_DWORD *)&v227[32] = 1065353216;
  memset(v228, 0, 32);
  *(_DWORD *)&v228[32] = 1065353216;
  memset(v229, 0, 32);
  *(_DWORD *)&v229[32] = 1065353216;
  memset(v230, 0, 32);
  *(_DWORD *)&v230[32] = 1065353216;
  memset(v231, 0, 32);
  *(_DWORD *)&v231[32] = 1065353216;
  memset(v232, 0, 32);
  *(_DWORD *)&v232[32] = 1065353216;
  memset(v233, 0, 32);
  *(_DWORD *)&v233[32] = 1065353216;
  memset(v234, 0, 32);
  *(_DWORD *)&v234[32] = 1065353216;
  memset(v235, 0, 32);
  *(_DWORD *)&v235[32] = 1065353216;
  memset(v236, 0, 32);
  *(_DWORD *)&v236[32] = 1065353216;
  LOWORD(v237) = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)v129, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v128 + 95), (uint64_t *)v215);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v128 + 100), v216);
  if (v128[108])
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node((_QWORD *)v128[107]);
    v128[107] = 0;
    v130 = v128[106];
    if (v130)
    {
      for (m = 0; m != v130; ++m)
        *(_QWORD *)(v128[105] + 8 * m) = 0;
    }
    v128[108] = 0;
  }
  v132 = v216[5];
  v216[5] = 0;
  v133 = (void *)v128[105];
  v128[105] = v132;
  if (v133)
    operator delete(v133);
  v134 = *(_OWORD *)&v216[6];
  v128[106] = v216[6];
  v216[6] = 0;
  v135 = v216[8];
  v128[108] = v216[8];
  *((_DWORD *)v128 + 218) = v216[9];
  v128[107] = *((_QWORD *)&v134 + 1);
  if (v135)
  {
    v136 = *(_QWORD *)(*((_QWORD *)&v134 + 1) + 8);
    if (((unint64_t)v134 & ((_QWORD)v134 - 1)) != 0)
    {
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
        v136 = *((_QWORD *)&v134 + 1) % (unint64_t)v134;
    }
    else
    {
      v136 = *((_QWORD *)&v134 + 1) & (v134 - 1);
    }
    *(_QWORD *)(v128[105] + 8 * v136) = v128 + 107;
    v216[7] = 0;
    v216[8] = 0;
  }
  if (v128[113])
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node((_QWORD *)v128[112]);
    v128[112] = 0;
    v153 = v128[111];
    if (v153)
    {
      for (n = 0; n != v153; ++n)
        *(_QWORD *)(v128[110] + 8 * n) = 0;
    }
    v128[113] = 0;
  }
  v155 = v216[10];
  v216[10] = 0;
  v156 = (void *)v128[110];
  v128[110] = v155;
  if (v156)
    operator delete(v156);
  v157 = v216[11];
  v158 = v216[12];
  v128[111] = v216[11];
  v216[11] = 0;
  v159 = v216[13];
  v128[113] = v216[13];
  *((_DWORD *)v128 + 228) = v216[14];
  v128[112] = v158;
  if (v159)
  {
    v160 = *(_QWORD *)(v158 + 8);
    if ((v157 & (v157 - 1)) != 0)
    {
      if (v160 >= v157)
        v160 %= v157;
    }
    else
    {
      v160 &= v157 - 1;
    }
    *(_QWORD *)(v128[110] + 8 * v160) = v128 + 112;
    *(_OWORD *)&v216[12] = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign((uint64_t)(v128 + 115), (uint64_t *)v217);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v128 + 120), (uint64_t *)v218);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v128 + 125), (uint64_t *)v219);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v128 + 130), (uint64_t *)v220);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 135), (uint64_t *)v221);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 140), (uint64_t *)v222);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 145), (uint64_t *)v223);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign((uint64_t)(v128 + 150), (uint64_t *)v224);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 155), (uint64_t *)v225);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 160), (uint64_t *)v226);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 165), (uint64_t *)v227);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 170), (uint64_t *)v228);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 175), (uint64_t *)v229);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 180), (uint64_t *)v230);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 185), (uint64_t *)v231);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v128 + 190), (uint64_t *)v232);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign((uint64_t)(v128 + 195), (uint64_t *)v233);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v128 + 200), (uint64_t *)v234);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v128 + 205), (uint64_t *)v235);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign((uint64_t)(v128 + 210), (uint64_t *)v236);
  *((_WORD *)v128 + 860) = v237;
  rf::ARStateData::SinceLastData::~SinceLastData((rf::ARStateData::SinceLastData *)__p);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v185);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v187);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v189);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v191);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&block);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v194);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v196);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v207);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v209);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v199);
  std::mutex::unlock(v203);
  if ((kdebug_is_enabled() & 1) != 0 || (kdebug_is_enabled() & 1) != 0 || kdebug_is_enabled())
  {
    std::mutex::lock(v184);
    v161 = *(uint64_t **)&v184[2].__m_.__opaque[24];
    if (v161)
    {
      v162 = 0;
      v163 = 0;
      v164 = 0;
      v165 = 0;
      v166 = 0;
      v167 = 0;
      v168 = 0;
      do
      {
        switch(*((_DWORD *)v161 + 76))
        {
          case 0:
            ++v166;
            break;
          case 1:
            v169 = *((_DWORD *)v161 + 64);
            v170 = v169 == 0;
            if (v169)
              v171 = v163;
            else
              v171 = v162;
            if (v170)
              v162 = v171 + 1;
            else
              v163 = v171 + 1;
            break;
          case 2:
            ++v164;
            break;
          case 3:
            ++v165;
            break;
          case 4:
            ++v167;
            break;
          case 5:
            ++v168;
            break;
          default:
            break;
        }
        v161 = (uint64_t *)*v161;
      }
      while (v161);
    }
    else
    {
      v162 = 0;
      v163 = 0;
      v164 = 0;
      v165 = 0;
      v166 = 0;
      v167 = 0;
      v168 = 0;
    }
    for (ii = *(uint64_t **)v184[3].__m_.__opaque; ii; ii = (uint64_t *)*ii)
    {
      switch(*((_DWORD *)ii + 76))
      {
        case 0:
          ++v166;
          break;
        case 1:
          v173 = *((_DWORD *)ii + 64);
          v174 = v173 == 0;
          if (v173)
            v175 = v163;
          else
            v175 = v162;
          if (v174)
            v162 = v175 + 1;
          else
            v163 = v175 + 1;
          break;
        case 2:
          ++v164;
          break;
        case 3:
          ++v165;
          break;
        case 4:
          ++v167;
          break;
        case 5:
          ++v168;
          break;
        default:
          continue;
      }
    }
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    std::mutex::unlock(v184);
  }
}

void sub_22779EE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&a67);
  std::mutex::unlock((std::mutex *)STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t rf::ARState::ARState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  char v7;
  unsigned __int16 v8;
  BOOL v9;
  char v10;
  rf::helpers *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  rf::helpers *v16;
  __int128 *v17;
  __int128 v18;
  rf::helpers *v19;
  __int128 *v20;
  __int128 v21;
  rf::helpers *v22;
  __int128 *v23;
  __int128 v24;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  v4 = a1 + 144;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 476) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 484) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 492) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 1065353216;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_DWORD *)(a1 + 896) = 1065353216;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_DWORD *)(a1 + 936) = 1065353216;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 1065353216;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 1065353216;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1056) = 1065353216;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_DWORD *)(a1 + 1096) = 1065353216;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1136) = 1065353216;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1176) = 1065353216;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1216) = 1065353216;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 1065353216;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1296) = 1065353216;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1336) = 1065353216;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_DWORD *)(a1 + 1376) = 1065353216;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_DWORD *)(a1 + 1416) = 1065353216;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_DWORD *)(a1 + 1456) = 1065353216;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 1065353216;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1536) = 1065353216;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_DWORD *)(a1 + 1576) = 1065353216;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1656) = 1065353216;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_DWORD *)(a1 + 1736) = 1065353216;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_DWORD *)(a1 + 1776) = 1065353216;
  *(_WORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_DWORD *)(a1 + 1832) = 1065353216;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_DWORD *)(a1 + 1872) = 1065353216;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_DWORD *)(a1 + 1912) = 1065353216;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1952) = 1065353216;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_DWORD *)(a1 + 1992) = 1065353216;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_DWORD *)(a1 + 2032) = 1065353216;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_DWORD *)(a1 + 2072) = 1065353216;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_DWORD *)(a1 + 2112) = 1065353216;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_DWORD *)(a1 + 2152) = 1065353216;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_DWORD *)(a1 + 2192) = 1065353216;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_DWORD *)(a1 + 2232) = 1065353216;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_DWORD *)(a1 + 2272) = 1065353216;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_DWORD *)(a1 + 2312) = 1065353216;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_DWORD *)(a1 + 2352) = 1065353216;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_DWORD *)(a1 + 2392) = 1065353216;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_DWORD *)(a1 + 2432) = 1065353216;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_DWORD *)(a1 + 2472) = 1065353216;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_DWORD *)(a1 + 2512) = 1065353216;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_DWORD *)(a1 + 2552) = 1065353216;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_DWORD *)(a1 + 2592) = 1065353216;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_DWORD *)(a1 + 2632) = 1065353216;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_DWORD *)(a1 + 2672) = 1065353216;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_DWORD *)(a1 + 2712) = 1065353216;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_DWORD *)(a1 + 2752) = 1065353216;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_DWORD *)(a1 + 2792) = 1065353216;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_DWORD *)(a1 + 2832) = 1065353216;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_DWORD *)(a1 + 2872) = 1065353216;
  *(_WORD *)(a1 + 2880) = 0;
  *(_DWORD *)(a1 + 2888) = 0;
  *(_QWORD *)(a1 + 2896) = 0;
  *(_BYTE *)(a1 + 2904) = 1;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v5, QOS_CLASS_USER_INITIATED, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 2912) = dispatch_queue_create("SceneUnderstandingARManager", v6);

  *(_QWORD *)(a1 + 2920) = dispatch_group_create();
  v7 = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 2928) = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 2932) = v7;
  *(_QWORD *)(a1 + 2960) = 0;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_QWORD *)(a1 + 3024) = 0;
  *(_QWORD *)(a1 + 3056) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v41, (const UInt8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v43, "com.apple.re.HideMeshRemoveCrash");
  v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v41, (const UInt8 *)&v43);
  if ((_BYTE)v8)
    v9 = 0;
  else
    v9 = v8 >= 0x100u;
  v10 = !v9;
  *(_BYTE *)(a1 + 2904) = v10;
  if (SBYTE7(v44) < 0)
    operator delete((void *)v43);
  rf::UserDefaults::~UserDefaults((const void **)&v41);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  v12 = rf::helpers::kCameraIdentifier(v11);
  v43 = *v12;
  v44 = v12[1];
  v13 = rf::helpers::kBodyIdentifier((rf::helpers *)v12);
  v41 = *v13;
  v42 = v13[1];
  v14 = rf::helpers::kHeadIdentifier((rf::helpers *)v13);
  v15 = v14[1];
  v39 = *v14;
  v40 = v15;
  std::mutex::lock((std::mutex *)a1);
  v17 = rf::helpers::kCameraIdentifier(v16);
  v18 = v17[1];
  *(_OWORD *)__p = *v17;
  v27 = v18;
  v28 = v43;
  v29 = v44;
  v30 = xmmword_2277EE440;
  v31 = xmmword_2277EE450;
  v32 = xmmword_2277EE460;
  v33 = xmmword_2277EE900;
  v34 = 16842752;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  std::mutex::lock((std::mutex *)a1);
  v20 = rf::helpers::kBodyIdentifier(v19);
  v21 = v20[1];
  *(_OWORD *)__p = *v20;
  v27 = v21;
  v28 = v41;
  v29 = v42;
  v30 = xmmword_2277EE440;
  v31 = xmmword_2277EE450;
  v32 = xmmword_2277EE460;
  v33 = xmmword_2277EE900;
  v34 = 16842752;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  std::mutex::lock((std::mutex *)a1);
  v23 = rf::helpers::kHeadIdentifier(v22);
  v24 = v23[1];
  *(_OWORD *)__p = *v23;
  v27 = v24;
  v28 = v39;
  v29 = v40;
  v30 = xmmword_2277EE440;
  v31 = xmmword_2277EE450;
  v32 = xmmword_2277EE460;
  v33 = xmmword_2277EE900;
  v34 = 16842752;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  rf::ARState::consumeChangesSinceLast(a1, (uint64_t)__p);
  return a1;
}

void sub_22779F758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v26 = *(_QWORD **)(v24 + 3056);
  if (v26 == (_QWORD *)(v24 + 3032))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 + 3032);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  v28 = *(_QWORD **)(v24 + 3024);
  if (v28 == (_QWORD *)(v24 + 3000))
  {
    v29 = 4;
    v28 = (_QWORD *)(v24 + 3000);
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  v30 = *(_QWORD **)(v24 + 2992);
  if (v30 == (_QWORD *)(v24 + 2968))
  {
    v31 = 4;
    v30 = (_QWORD *)(v24 + 2968);
  }
  else
  {
    if (!v30)
      goto LABEL_16;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_16:
  v32 = *(_QWORD **)(v24 + 2960);
  if (v32 == (_QWORD *)(v24 + 2936))
  {
    v33 = 4;
    v32 = (_QWORD *)(v24 + 2936);
  }
  else
  {
    if (!v32)
      goto LABEL_21;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_21:

  rf::ARStateData::~ARStateData((rf::ARStateData *)(v24 + 64));
  std::mutex::~mutex((std::mutex *)v24);
  _Unwind_Resume(a1);
}

void rf::ARState::~ARState(rf::ARState *this)
{
  NSObject *v2;
  void *v3;
  void *v4;
  rf::ARState *v5;
  uint64_t v6;
  rf::ARState *v7;
  uint64_t v8;
  rf::ARState *v9;
  uint64_t v10;
  rf::ARState *v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 365);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    v3 = (void *)*((_QWORD *)this + 365);
    *((_QWORD *)this + 365) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)this + 64);
  if (*((_QWORD *)this + 370))
  {
    rf::ARState::~ARState()::$_0::operator()(this, *((uint64_t **)this + 20));
    rf::ARState::~ARState()::$_0::operator()(this, *((uint64_t **)this + 25));
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear((uint64_t)this + 144);
  v5 = (rf::ARState *)*((_QWORD *)this + 382);
  if (v5 == (rf::ARState *)((char *)this + 3032))
  {
    v6 = 4;
    v5 = (rf::ARState *)((char *)this + 3032);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  v7 = (rf::ARState *)*((_QWORD *)this + 378);
  if (v7 == (rf::ARState *)((char *)this + 3000))
  {
    v8 = 4;
    v7 = (rf::ARState *)((char *)this + 3000);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_15:
  v9 = (rf::ARState *)*((_QWORD *)this + 374);
  if (v9 == (rf::ARState *)((char *)this + 2968))
  {
    v10 = 4;
    v9 = (rf::ARState *)((char *)this + 2968);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  v11 = (rf::ARState *)*((_QWORD *)this + 370);
  if (v11 == (rf::ARState *)((char *)this + 2936))
  {
    v12 = 4;
    v11 = (rf::ARState *)((char *)this + 2936);
    goto LABEL_24;
  }
  if (v11)
  {
    v12 = 5;
LABEL_24:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }

  rf::ARStateData::~ARStateData((rf::ARState *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

rf *rf::ARState::~ARState()::$_0::operator()(rf *result, uint64_t *a2)
{
  uint64_t *v2;
  rf *v3;
  NSObject *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      if (!*((_DWORD *)v2 + 76) && *((_DWORD *)v2 + 37) == 1)
      {
        rf::realityFusionLogObject(result);
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)(v2 + 6), __p);
          v5 = v8 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v10 = v5;
          _os_log_impl(&dword_227777000, v4, OS_LOG_TYPE_DEFAULT, "ARState: Cleaning up anchor %s", buf, 0xCu);
          if (v8 < 0)
            operator delete(__p[0]);
        }

        v6 = *((_QWORD *)v3 + 370);
        if (!v6)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (rf *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, v2 + 6);
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_22779FB78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void rf::`anonymous namespace'::tryGetCurrentMesh(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*a4, a3);
  if (v8
    || (v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*a4 + 5, a3)) != 0)
  {
    v9 = v8[6];
    v10 = (std::__shared_weak_count *)v8[7];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    if (v9 && *(_QWORD *)(v9 + 32) == a2)
    {
      *a1 = v9;
      a1[1] = v10;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void ___ZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManager_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void *v22;
  std::mutex *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(std::mutex **)(v1 + 48);
  v3 = v17;
  if (v17)
  {
    if (*(_BYTE *)(v17 + 360))
    {
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(_QWORD *)(v1 + 88))
        {
          if (*(_BYTE *)(v1 + 80))
            v13 = *(_QWORD **)(v1 + 64);
          else
            v13 = (_QWORD *)(v1 + 64);
          *(_QWORD *)(v1 + 88) = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
        }
        kdebug_trace();
      }
      if (!*(_BYTE *)(v3 + 360))
        std::__throw_bad_optional_access[abi:ne180100]();
      v19 = MEMORY[0x24BDAC760];
      v20 = 3321888768;
      v21 = ___ZZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManagerENK3__0clEv_block_invoke;
      v22 = &__block_descriptor_96_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE_e33_v24__0__REAsset__8____CFError__16l;
      v23 = v2;
      v4 = *(_OWORD *)(v1 + 80);
      v24 = *(_OWORD *)(v1 + 64);
      v25 = v4;
      v26 = v3;
      v27 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v28 = *(_QWORD *)(v1 + 56);
      REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError();
      v7 = v27;
      if (v27)
      {
        v8 = (unint64_t *)&v27->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  else
  {
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(_QWORD *)(v1 + 88))
      {
        if (*(_BYTE *)(v1 + 80))
          v14 = *(_QWORD **)(v1 + 64);
        else
          v14 = (_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 88) = ((*v14 >> 2) + (*v14 << 6) + v14[1] + 2654435769) ^ *v14;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(_QWORD *)(v1 + 88))
      {
        if (*(_BYTE *)(v1 + 80))
          v15 = *(_QWORD **)(v1 + 64);
        else
          v15 = (_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 88) = ((*v15 >> 2) + (*v15 << 6) + v15[1] + 2654435769) ^ *v15;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(_QWORD *)(v1 + 88))
      {
        if (*(_BYTE *)(v1 + 80))
          v16 = *(_QWORD **)(v1 + 64);
        else
          v16 = (_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 88) = ((*v16 >> 2) + (*v16 << 6) + v16[1] + 2654435769) ^ *v16;
      }
      kdebug_trace();
    }
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_22779FFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void ___ZN2rf7ARState18updatePhysicsShapeERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(_QWORD *)(v1 + 48);
  v3 = v52;
  if (v52)
  {
    if (!*(_BYTE *)(v52 + 152))
      goto LABEL_24;
    v4 = *(void **)(v52 + 128);
    if (!v4)
      goto LABEL_24;
    if (!objc_msgSend(v4, "length"))
      goto LABEL_24;
    if (!*(_BYTE *)(v3 + 216))
      goto LABEL_24;
    v5 = *(void **)(v3 + 192);
    if (!v5 || !objc_msgSend(v5, "length"))
      goto LABEL_24;
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(_QWORD *)(v1 + 88))
      {
        if (*(_BYTE *)(v1 + 80))
          v49 = *(_QWORD **)(v1 + 64);
        else
          v49 = (_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 88) = ((*v49 >> 2) + (*v49 << 6) + v49[1] + 2654435769) ^ *v49;
      }
      kdebug_trace();
    }
    v6 = objc_msgSend(*(id *)(v3 + 128), "contents");
    objc_msgSend(*(id *)(v3 + 192), "contents");
    v7 = RECollisionMeshCreateWithFormat();
    std::mutex::lock((std::mutex *)v2);
    v8 = *(_OWORD *)(v1 + 80);
    v54 = *(_OWORD *)(v1 + 64);
    v55 = v8;
    v56 = v7;
    v9 = *((_QWORD *)&v8 + 1);
    if (!*((_QWORD *)&v8 + 1))
    {
      v48 = &v54;
      if ((_BYTE)v55)
        v48 = (__int128 *)v54;
      v9 = ((*(_QWORD *)v48 >> 2) + (*(_QWORD *)v48 << 6) + *((_QWORD *)v48 + 1) + 2654435769) ^ *(_QWORD *)v48;
      *((_QWORD *)&v55 + 1) = v9;
    }
    v10 = *(_QWORD *)(v2 + 952);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      v12 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        v6 = v9;
        if (v9 >= v10)
          v6 = v9 % v10;
      }
      else
      {
        v6 = (v10 - 1) & v9;
      }
      v16 = *(_QWORD **)(*(_QWORD *)(v2 + 944) + 8 * v6);
      if (v16)
      {
        v17 = (_QWORD *)*v16;
        if (*v16)
        {
          do
          {
            v18 = v17[1];
            if (v18 == v9)
            {
              if (rf::data_flow::RFUUID::Equality::operator()(v2 + 976, (uint64_t)(v17 + 2), (uint64_t)&v54))
                goto LABEL_100;
            }
            else
            {
              if (v12 > 1)
              {
                if (v18 >= v10)
                  v18 %= v10;
              }
              else
              {
                v18 &= v10 - 1;
              }
              if (v18 != v6)
                break;
            }
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
      }
    }
    v19 = operator new(0x38uLL);
    v20 = (_QWORD *)(v2 + 960);
    *v19 = 0;
    v19[1] = v9;
    v21 = v55;
    *((_OWORD *)v19 + 1) = v54;
    *((_OWORD *)v19 + 2) = v21;
    v19[6] = v56;
    v56 = 0;
    v22 = (float)(unint64_t)(*(_QWORD *)(v2 + 968) + 1);
    v23 = *(float *)(v2 + 976);
    if (v10 && (float)(v23 * (float)v10) >= v22)
    {
LABEL_90:
      v40 = *(_QWORD *)(v2 + 944);
      v41 = *(_QWORD **)(v40 + 8 * v6);
      if (v41)
      {
        *v19 = *v41;
      }
      else
      {
        *v19 = *v20;
        *v20 = v19;
        *(_QWORD *)(v40 + 8 * v6) = v20;
        if (!*v19)
        {
LABEL_99:
          ++*(_QWORD *)(v2 + 968);
LABEL_100:
          v43 = v56;
          v56 = 0;
          if (v43)
            RECollisionMeshDestroy();
          std::mutex::unlock((std::mutex *)v2);
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*(_QWORD *)(v1 + 88))
            {
              if (*(_BYTE *)(v1 + 80))
                v50 = *(_QWORD **)(v1 + 64);
              else
                v50 = (_QWORD *)(v1 + 64);
              *(_QWORD *)(v1 + 88) = ((*v50 >> 2) + (*v50 << 6) + v50[1] + 2654435769) ^ *v50;
            }
            kdebug_trace();
          }
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*(_QWORD *)(v1 + 88))
            {
              if (*(_BYTE *)(v1 + 80))
                v51 = *(_QWORD **)(v1 + 64);
              else
                v51 = (_QWORD *)(v1 + 64);
              *(_QWORD *)(v1 + 88) = ((*v51 >> 2) + (*v51 << 6) + v51[1] + 2654435769) ^ *v51;
            }
LABEL_23:
            kdebug_trace();
            goto LABEL_24;
          }
          goto LABEL_24;
        }
        v42 = *(_QWORD *)(*v19 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v42 >= v10)
            v42 %= v10;
        }
        else
        {
          v42 &= v10 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)(v2 + 944) + 8 * v42);
      }
      *v41 = v19;
      goto LABEL_99;
    }
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(v2 + 952);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_56;
    if (*(_QWORD *)&prime < v10)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 968) / *(float *)(v2 + 976));
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(v2 + 952);
      }
      else
      {
        if (prime)
        {
LABEL_56:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = *(void **)(v2 + 944);
          *(_QWORD *)(v2 + 944) = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          *(int8x8_t *)(v2 + 952) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v2 + 944) + 8 * v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD *)*v20;
          if (*v20)
          {
            v32 = v31[1];
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v2 + 944) + 8 * v32) = v20;
            v37 = (_QWORD *)*v31;
            if (*v31)
            {
              do
              {
                v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&prime)
                    v38 %= *(_QWORD *)&prime;
                }
                else
                {
                  v38 &= *(_QWORD *)&prime - 1;
                }
                if (v38 != v32)
                {
                  v39 = *(_QWORD *)(v2 + 944);
                  if (!*(_QWORD *)(v39 + 8 * v38))
                  {
                    *(_QWORD *)(v39 + 8 * v38) = v31;
                    goto LABEL_81;
                  }
                  *v31 = *v37;
                  *v37 = **(_QWORD **)(*(_QWORD *)(v2 + 944) + 8 * v38);
                  **(_QWORD **)(*(_QWORD *)(v2 + 944) + 8 * v38) = v37;
                  v37 = v31;
                }
                v38 = v32;
LABEL_81:
                v31 = v37;
                v37 = (_QWORD *)*v37;
                v32 = v38;
              }
              while (v37);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_85;
        }
        v44 = *(void **)(v2 + 944);
        *(_QWORD *)(v2 + 944) = 0;
        if (v44)
          operator delete(v44);
        v10 = 0;
        *(_QWORD *)(v2 + 952) = 0;
      }
    }
LABEL_85:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v6 = v9 % v10;
      else
        v6 = v9;
    }
    else
    {
      v6 = (v10 - 1) & v9;
    }
    goto LABEL_90;
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(_QWORD *)(v1 + 88))
    {
      if (*(_BYTE *)(v1 + 80))
        v45 = *(_QWORD **)(v1 + 64);
      else
        v45 = (_QWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 88) = ((*v45 >> 2) + (*v45 << 6) + v45[1] + 2654435769) ^ *v45;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(_QWORD *)(v1 + 88))
    {
      if (*(_BYTE *)(v1 + 80))
        v46 = *(_QWORD **)(v1 + 64);
      else
        v46 = (_QWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 88) = ((*v46 >> 2) + (*v46 << 6) + v46[1] + 2654435769) ^ *v46;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(_QWORD *)(v1 + 88))
    {
      if (*(_BYTE *)(v1 + 80))
        v47 = *(_QWORD **)(v1 + 64);
      else
        v47 = (_QWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 88) = ((*v47 >> 2) + (*v47 << 6) + v47[1] + 2654435769) ^ *v47;
    }
    goto LABEL_23;
  }
LABEL_24:
  v13 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2277A083C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ARState::getAnchorWithIdentifier@<X0>(rf::ARState *this@<X0>, const unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uuid_t uu;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = a2;
  v12 = 1;
  v6 = (unint64_t)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)this + 18, (uint64_t)uu);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)this + 23, (uint64_t)uu);
  v8 = v6 | result;
  if (v6 | result)
  {
    v9 = result + 48;
    if (!result)
      v9 = 0;
    if (v6)
      v10 = v6 + 48;
    else
      v10 = v9;
    result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a3, v10);
    v8 = 1;
  }
  else
  {
    *a3 = 0;
  }
  a3[272] = v8;
  return result;
}

_QWORD *rf::ARState::getAnchorPtrWithIdentifier(rf::ARState *this, const unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uuid_t uu;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = a2;
  v9 = 1;
  v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)this + 18, (uint64_t)uu);
  v5 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)this + 23, (uint64_t)uu);
  v6 = v5 + 6;
  if (!v5)
    v6 = 0;
  if (v4)
    return v4 + 6;
  else
    return v6;
}

void rf::ARState::getAnchors(rf::ARState *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v44, *((_QWORD *)this + 21));
  v4 = (_QWORD *)*((_QWORD *)this + 20);
  v6 = v44;
  for (i = v45;
        i != v6;
  v45 = v6;
  if (v4)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v47, (uint64_t)(v4 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v44, (uint64_t)&v47);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v47);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v6 = v45;
  }
  v7 = v44;
  a2[2] = v46;
  v8 = a2 + 2;
  *a2 = v7;
  a2[1] = v6;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v47 = (void **)&v44;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v44, *((_QWORD *)this + 26));
  v9 = (_QWORD *)*((_QWORD *)this + 25);
  v11 = v44;
  for (j = v45;
        j != v11;
  v45 = v11;
  if (v9)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v47, (uint64_t)(v9 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v44, (uint64_t)&v47);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v47);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = v45;
  }
  v12 = v44;
  v43[0] = v44;
  v43[1] = v11;
  v43[2] = v46;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = (void **)&v44;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
  if (v11 - v12 >= 1)
  {
    v13 = (v11 - v12) / 272;
    v15 = (void **)*a2;
    v14 = a2[1];
    v16 = (uint64_t)(v14 - *a2) / 272;
    v17 = *a2 + 272 * v16;
    if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v8 - v14) >> 4)) < v13)
    {
      v18 = v16 + v13;
      if ((unint64_t)(v16 + v13) > 0xF0F0F0F0F0F0F0)
        _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
      if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v8 - (_QWORD)v15) >> 4) > v18)
        v18 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v8 - (_QWORD)v15) >> 4);
      if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v8 - (_QWORD)v15) >> 4) >= 0x78787878787878)
        v19 = 0xF0F0F0F0F0F0F0;
      else
        v19 = v18;
      v51 = a2 + 2;
      if (v19)
        v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)(a2 + 2), v19);
      else
        v20 = 0;
      v24 = (uint64_t)&v20[34 * v16];
      v47 = v20;
      v48 = v24;
      v49 = v24;
      v50 = &v20[34 * v19];
      v25 = v24 + 272 * v13;
      v26 = 272 * v13;
      do
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(v24, v12);
        v24 += 272;
        v12 += 272;
        v26 -= 272;
      }
      while (v26);
      v27 = v48;
      v28 = *a2;
      if (*a2 != v17)
      {
        v29 = v17;
        do
        {
          v27 -= 272;
          v29 -= 272;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v27, v29);
        }
        while (v29 != v28);
      }
      v30 = a2[1];
      if (v30 != v17)
      {
        do
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v25, v17);
          v17 += 272;
          v25 += 272;
        }
        while (v17 != v30);
        v17 = a2[1];
      }
      v31 = (void **)*a2;
      *a2 = v27;
      a2[1] = v25;
      v32 = (void **)a2[2];
      a2[2] = (uint64_t)v50;
      v49 = v17;
      v50 = v32;
      v47 = v31;
      v48 = (uint64_t)v31;
      std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v47);
      goto LABEL_54;
    }
    v42 = (uint64_t)(v14 - *a2) / 272;
    if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v14 - v17) >> 4)) >= v13)
    {
      v21 = v12 + 272 * v13;
      v23 = a2[1];
    }
    else
    {
      v21 = v12 + 16 * ((uint64_t)(v14 - v17) >> 4);
      if (v21 == v11)
      {
        v23 = a2[1];
      }
      else
      {
        v22 = 0;
        do
        {
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(v14 + v22, v21 + v22);
          v22 += 272;
        }
        while (v21 + v22 != v11);
        v23 = v14 + v22;
      }
      a2[1] = v23;
      if ((uint64_t)(v14 - v17) < 1)
        goto LABEL_54;
    }
    v33 = v23 - 272 * v13;
    v34 = v23;
    if (v33 < v14)
    {
      v34 = v23;
      do
      {
        v35 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v34, v33);
        v33 += 272;
        v34 = v35 + 272;
      }
      while (v33 < v14);
    }
    a2[1] = v34;
    v36 = 16 * ((v23 - (v17 + 272 * v13)) >> 4);
    v37 = v23 - 272;
    while (v36)
    {
      v38 = (uint64_t)&v15[34 * v42 - 34] + v36;
      v36 -= 272;
      v39 = v37 - 272;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(v37, v38);
      v37 = v39;
    }
    for (; v12 != v21; v17 += 272)
    {
      v40 = *(unsigned int *)(v17 + 256);
      v41 = *(unsigned int *)(v12 + 256);
      if ((_DWORD)v40 == -1)
      {
        if ((_DWORD)v41 != -1)
        {
LABEL_52:
          v47 = (void **)v17;
          ((void (*)(void ***, uint64_t, uint64_t))off_24EFD8220[v41])(&v47, v17, v12);
        }
      }
      else
      {
        if ((_DWORD)v41 != -1)
          goto LABEL_52;
        ((void (*)(void ***, uint64_t))off_24EFD8190[v40])(&v47, v17);
        *(_DWORD *)(v17 + 256) = -1;
      }
      v12 += 272;
    }
  }
LABEL_54:
  v47 = (void **)v43;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
}

void sub_2277A0F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t rf::ARState::visitAnchors(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *(_QWORD **)(result + 160);
  if (v4)
  {
    while (1)
    {
      v8 = v4 + 6;
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        break;
      result = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 48))(v5, &v8);
      v4 = (_QWORD *)*v4;
      if (!v4)
        goto LABEL_4;
    }
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_4:
  v6 = *(_QWORD **)(v3 + 200);
  if (v6)
  {
    while (1)
    {
      v8 = v6 + 6;
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        break;
      result = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 48))(v7, &v8);
      v6 = (_QWORD *)*v6;
      if (!v6)
        return result;
    }
    goto LABEL_8;
  }
  return result;
}

void rf::ARState::getUpdatedAnchors(rf::ARState *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13[36];

  v13[35] = *(void ***)MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v10, *((_QWORD *)this + 151));
  v4 = (_QWORD *)*((_QWORD *)this + 150);
  v6 = v10;
  for (i = v11;
        i != v6;
  v11 = v6;
  if (v4)
  {
    v7 = (_QWORD *)((char *)this + 144);
    do
    {
      v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v7, (uint64_t)(v4 + 2));
      if (!v8)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v13, (uint64_t)(v8 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v10, (uint64_t)v13);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v6 = v11;
  }
  v9 = v12;
  *a2 = v10;
  a2[1] = v6;
  a2[2] = v9;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v13[0] = (void **)&v10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_2277A118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t rf::ARState::visitUpdatedAnchors(uint64_t result, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;

  for (i = *(_QWORD **)(result + 2336); i; i = (_QWORD *)*i)
  {
    v5 = i[6];
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v5);
  }
  return result;
}

void rf::`anonymous namespace'::clearARDataFromState(rf::LockedARStateData &)::$_0::operator()(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  _BOOL4 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  _OWORD v11[2];
  _DWORD v12[20];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)a2[2];
  while (v2)
  {
    rf::helpers::getBaseAnchorProperties((uint64_t)(v2 + 6));
    v5 = v12[17] == 1;

    if (v5)
    {
      v6 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(**a1 + 1080), (uint64_t)(v2 + 2));
      if (v6)
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase((_QWORD *)(**a1 + 1080), v6);
      v7 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(**a1 + 1120), (uint64_t)(v2 + 2));
      if (v7)
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase((_QWORD *)(**a1 + 1120), v7);
      v8 = **a1;
      v9 = *((_OWORD *)v2 + 2);
      v11[0] = *((_OWORD *)v2 + 1);
      v11[1] = v9;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v12, (uint64_t)(v2 + 6));
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v8 + 1200, (uint64_t)v11, v11);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
      v10 = (uint64_t *)*v2;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a2, v2, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      v2 = v10;
    }
    else
    {
      v2 = (uint64_t *)*v2;
    }
  }
}

void sub_2277A1378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void rf::data_flow::ImageAnchor::~ImageAnchor(void **this)
{
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);

}

void rf::data_flow::ObjectAnchor::~ObjectAnchor(void **this)
{
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);

}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      RESharedPtr<REAsset>::~RESharedPtr(v1 + 6);
    operator delete(v1);
  }
}

uint64_t std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return RECollisionMeshDestroy();
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  _QWORD v26[2];
  char v27;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v25 = *(_QWORD **)a2;
    else
      v25 = (_QWORD *)a2;
    v7 = ((*v25 >> 2) + (*v25 << 6) + v25[1] + 2654435769) ^ *v25;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x40uLL);
  v26[0] = v14;
  v26[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v27 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v26[0] = *v22;
    *v22 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_2277A17BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 256);
  v4 = *(unsigned int *)(a2 + 256);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24EFD8190[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 256) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24EFD81C0[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<4ul,rf::data_flow::FaceAnchor,rf::data_flow::FaceAnchor>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<5ul,rf::data_flow::BodyAnchor,rf::data_flow::BodyAnchor>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;

  if (*(_DWORD *)(a1 + 256))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<0ul,rf::data_flow::CustomAnchor>(a1, (__int128 *)a3);
  }
  else
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v4;
    *(_OWORD *)a2 = v3;
    v5 = *(_OWORD *)(a3 + 48);
    v6 = *(_OWORD *)(a3 + 64);
    v7 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v6;
    *(_OWORD *)(a2 + 80) = v7;
    *(_OWORD *)(a2 + 48) = v5;
    v8 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v9 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v8;

  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<0ul,rf::data_flow::CustomAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v12;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v12, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  *(_DWORD *)(a1 + 256) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*(_DWORD *)(a1 + 256) == 1)
  {
    v5 = *(_OWORD *)a3;
    v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    v7 = *(_OWORD *)(a3 + 48);
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v10;

    v12 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 144) = v12;
    v13 = *(_OWORD *)(a3 + 160);
    v14 = *(_OWORD *)(a3 + 176);
    v15 = *(_OWORD *)(a3 + 192);
    *(_QWORD *)(a2 + 208) = *(_QWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 176) = v14;
    *(_OWORD *)(a2 + 192) = v15;
    *(_OWORD *)(a2 + 160) = v13;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a2 + 216, (__n128 *)(a3 + 216));
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(a1, (__int128 *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v16;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v16, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  v11 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v11;
  v12 = a2[10];
  v13 = a2[12];
  v14 = *((_QWORD *)a2 + 26);
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 208) = v14;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *(_DWORD *)(a1 + 256) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;

  if (*(_DWORD *)(a1 + 256) == 2)
  {
    v5 = *(_OWORD *)a3;
    v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    v7 = *(_OWORD *)(a3 + 48);
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v10;

    *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
    v12 = (void **)(a2 + 136);
    if (*(char *)(a2 + 159) < 0)
      operator delete(*v12);
    v13 = *(_OWORD *)(a3 + 136);
    *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(a3 + 159) = 0;
    *(_BYTE *)(a3 + 136) = 0;
    v14 = (void **)(a2 + 160);
    if (*(char *)(a2 + 183) < 0)
      operator delete(*v14);
    v15 = *(_OWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_OWORD *)v14 = v15;
    *(_BYTE *)(a3 + 183) = 0;
    *(_BYTE *)(a3 + 160) = 0;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(a1, (__int128 *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v14;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v14, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  v11 = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_OWORD *)(a1 + 136) = v11;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v12 = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_QWORD *)(a1 + 176) = v12;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_DWORD *)(a1 + 256) = 2;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*(_DWORD *)(a1 + 256) == 3)
  {
    v5 = *(_OWORD *)a3;
    v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    v7 = *(_OWORD *)(a3 + 48);
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v10;

    v12 = (void **)(a2 + 128);
    if (*(char *)(a2 + 151) < 0)
      operator delete(*v12);
    v13 = *(_OWORD *)(a3 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(a3 + 151) = 0;
    *(_BYTE *)(a3 + 128) = 0;
    v14 = (void **)(a2 + 152);
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v14);
    v15 = *(_OWORD *)(a3 + 152);
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
    *(_OWORD *)v14 = v15;
    *(_BYTE *)(a3 + 175) = 0;
    *(_BYTE *)(a3 + 152) = 0;
    v16 = *(_OWORD *)(a3 + 176);
    v17 = *(_OWORD *)(a3 + 192);
    v18 = *(_OWORD *)(a3 + 224);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 224) = v18;
    *(_OWORD *)(a2 + 176) = v16;
    *(_OWORD *)(a2 + 192) = v17;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(a1, (__int128 *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v17;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v17, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_QWORD *)(a1 + 144) = v11;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v12 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v12;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 19) = 0;
  v13 = a2[11];
  v14 = a2[12];
  v15 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = v14;
  *(_DWORD *)(a1 + 256) = 3;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<4ul,rf::data_flow::FaceAnchor,rf::data_flow::FaceAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*(_DWORD *)(a1 + 256) == 4)
  {
    v5 = *(_OWORD *)a3;
    v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    v7 = *(_OWORD *)(a3 + 48);
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v10;

    v12 = *(_OWORD *)(a3 + 128);
    v13 = *(_OWORD *)(a3 + 144);
    v14 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(a2 + 176) = v14;
    *(_OWORD *)(a2 + 128) = v12;
    *(_OWORD *)(a2 + 144) = v13;
    v15 = *(_OWORD *)(a3 + 192);
    v16 = *(_OWORD *)(a3 + 208);
    v17 = *(_OWORD *)(a3 + 240);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
    *(_OWORD *)(a2 + 240) = v17;
    *(_OWORD *)(a2 + 192) = v15;
    *(_OWORD *)(a2 + 208) = v16;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<4ul,rf::data_flow::FaceAnchor>(a1, (__int128 *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<4ul,rf::data_flow::FaceAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v18;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v18, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  v11 = a2[8];
  v12 = a2[9];
  v13 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  v14 = a2[12];
  v15 = a2[13];
  v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_DWORD *)(a1 + 256) = 4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<5ul,rf::data_flow::BodyAnchor,rf::data_flow::BodyAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;

  if (*(_DWORD *)(a1 + 256) == 5)
  {
    v5 = *(_OWORD *)a3;
    v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    v7 = *(_OWORD *)(a3 + 48);
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v10;

    *(_DWORD *)(a2 + 128) = *(_DWORD *)(a3 + 128);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<5ul,rf::data_flow::BodyAnchor>(a1, (__int128 *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<5ul,rf::data_flow::BodyAnchor>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v12;

  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24EFD8190[v4])(&v12, a1);
  *(_DWORD *)(a1 + 256) = -1;
  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
  *(_DWORD *)(a1 + 256) = 5;
  return a1;
}

void rf::data_flow::consumer::UpdateData::~UpdateData(rf::data_flow::consumer::UpdateData *this)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)this + 1048);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 1008);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 968);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 888);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 848);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 808);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 728);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 688);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 648);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 608);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      RESharedPtr<REAsset>::~RESharedPtr(v1 + 6);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](v1 + 6);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void rf::ARStateData::SinceLastData::~SinceLastData(rf::ARStateData::SinceLastData *this)
{
  void *v2;
  void *v3;

  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table((uint64_t)this + 960);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 920);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 880);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)this + 840);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 800);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 760);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 720);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 680);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 640);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 600);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 560);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 520);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 480);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 440);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 400);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 360);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 320);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 280);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node(*((_QWORD **)this + 22));
  v2 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    operator delete(v2);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node(*((_QWORD **)this + 17));
  v3 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    operator delete(v3);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::ARStateData::~ARStateData(rf::ARStateData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  rf::data_flow::consumer::UpdateData::~UpdateData((rf::ARStateData *)((char *)this + 1728));
  rf::ARStateData::SinceLastData::~SinceLastData((rf::ARStateData *)((char *)this + 720));
  if (*((_BYTE *)this + 704))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 432);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 368);
  v2 = (_QWORD *)*((_QWORD *)this + 43);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v4)
    operator delete(v4);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::`anonymous namespace'::tryGetCurrentMesh(_QWORD *a1, uint64_t a2, uint64_t a3, std::mutex *this)
{
  _QWORD *v8[2];

  v8[0] = &this[1].__m_.__sig;
  v8[1] = &this->__m_.__sig;
  std::mutex::lock(this);
  std::mutex::unlock(this);
}

void sub_2277A2624(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManagerENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v4);
  v5 = *(_OWORD *)(a1 + 56);
  v10[0] = *(_OWORD *)(a1 + 40);
  v10[1] = v5;
  v11[0] = a2;
  v9 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>((uint64_t)v4[14].__m_.__opaque, (uint64_t)v10, (uint64_t)v10);
  RESharedPtr<REAsset>::~RESharedPtr(v11);
  RESharedPtr<REAsset>::~RESharedPtr(&v9);
  v6 = *(_QWORD *)(a1 + 72);
  if (*(_BYTE *)(v6 + 360))
  {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((_QWORD *)(v6 + 352));
    *(_BYTE *)(v6 + 360) = 0;
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(_QWORD *)(a1 + 64))
    {
      if (*(_BYTE *)(a1 + 56))
        v7 = *(_QWORD **)(a1 + 40);
      else
        v7 = (_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 64) = ((*v7 >> 2) + (*v7 << 6) + v7[1] + 2654435769) ^ *v7;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(_QWORD *)(a1 + 64))
    {
      if (*(_BYTE *)(a1 + 56))
        v8 = *(_QWORD **)(a1 + 40);
      else
        v8 = (_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 64) = ((*v8 >> 2) + (*v8 << 6) + v8[1] + 2654435769) ^ *v8;
    }
    kdebug_trace();
  }
  std::mutex::unlock(v4);
}

void sub_2277A27D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE(uint64_t a1)
{
  return std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](a1 + 72);
}

_QWORD *RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(_QWORD *a1)
{
  if (*a1)
    RERelease();
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 256);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      v7 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v7;
      *(_OWORD *)a2 = v6;
      v8 = a3[3];
      v9 = a3[4];
      v10 = a3[5];
      *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v9;
      *(_OWORD *)(a2 + 80) = v10;
      *(_OWORD *)(a2 + 48) = v8;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      return;
    }
    ((void (*)(char *, uint64_t))off_24EFD8190[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  v11 = *a3;
  v12 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v12;
  *(_OWORD *)v4 = v11;
  v13 = a3[3];
  v14 = a3[4];
  v15 = a3[5];
  *(_OWORD *)(v4 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v14;
  *(_OWORD *)(v4 + 80) = v15;
  *(_OWORD *)(v4 + 48) = v13;
  *(_QWORD *)(v4 + 112) = *((id *)a3 + 14);
  *(_DWORD *)(v4 + 256) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const void *v20;
  uint64_t v21;
  __int128 v22[5];
  _OWORD v23[2];
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 1)
  {
    v6 = *(_OWORD *)a3;
    v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    v8 = *(_OWORD *)(a3 + 48);
    v9 = *(_OWORD *)(a3 + 64);
    v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    v11 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 144) = v11;
    v12 = *(_OWORD *)(a3 + 160);
    v13 = *(_OWORD *)(a3 + 176);
    v14 = *(_OWORD *)(a3 + 192);
    *(_QWORD *)(a2 + 208) = *(_QWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 192) = v14;
    *(_OWORD *)(a2 + 160) = v12;
    if (a2 != a3)
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)(a2 + 216), *(char **)(a3 + 216), *(_QWORD *)(a3 + 224), (uint64_t)(*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 4);
  }
  else
  {
    v15 = *(_OWORD *)(a3 + 80);
    v22[4] = *(_OWORD *)(a3 + 64);
    v23[0] = v15;
    *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)(a3 + 89);
    v16 = *(_OWORD *)(a3 + 16);
    v22[0] = *(_OWORD *)a3;
    v22[1] = v16;
    v17 = *(_OWORD *)(a3 + 48);
    v22[2] = *(_OWORD *)(a3 + 32);
    v22[3] = v17;
    v24 = *(id *)(a3 + 112);
    v18 = *(_OWORD *)(a3 + 176);
    v27 = *(_OWORD *)(a3 + 160);
    v28 = v18;
    v29 = *(_OWORD *)(a3 + 192);
    v19 = *(_OWORD *)(a3 + 144);
    v25 = *(_OWORD *)(a3 + 128);
    v26 = v19;
    v20 = *(const void **)(a3 + 216);
    v30 = *(_QWORD *)(a3 + 208);
    __p = 0;
    v21 = *(_QWORD *)(a3 + 224);
    v32 = 0;
    v33 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, v20, v21, (v21 - (uint64_t)v20) >> 4);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(v4, v22);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }

  }
}

void sub_2277A2ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14[5];
  _OWORD v15[2];
  id v16;
  char v17;
  std::string v18;
  std::string __p;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 2)
  {
    v6 = *(_OWORD *)a3;
    v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    v8 = *(_OWORD *)(a3 + 48);
    v9 = *(_OWORD *)(a3 + 64);
    v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
    std::string::operator=((std::string *)(a2 + 136), (const std::string *)(a3 + 136));
    std::string::operator=((std::string *)(a2 + 160), (const std::string *)(a3 + 160));
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
  }
  else
  {
    v11 = *(_OWORD *)(a3 + 80);
    v14[4] = *(_OWORD *)(a3 + 64);
    v15[0] = v11;
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(a3 + 89);
    v12 = *(_OWORD *)(a3 + 16);
    v14[0] = *(_OWORD *)a3;
    v14[1] = v12;
    v13 = *(_OWORD *)(a3 + 48);
    v14[2] = *(_OWORD *)(a3 + 32);
    v14[3] = v13;
    v16 = *(id *)(a3 + 112);
    v17 = *(_BYTE *)(a3 + 128);
    if (*(char *)(a3 + 159) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a3 + 136), *(_QWORD *)(a3 + 144));
    else
      v18 = *(std::string *)(a3 + 136);
    if (*(char *)(a3 + 183) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 160), *(_QWORD *)(a3 + 168));
    else
      __p = *(std::string *)(a3 + 160);
    v20 = *(_OWORD *)(a3 + 192);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(v4, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);

  }
}

void sub_2277A2C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19[5];
  _OWORD v20[2];
  id v21;
  std::string v22;
  std::string __p;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 3)
  {
    v6 = *(_OWORD *)a3;
    v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    v8 = *(_OWORD *)(a3 + 48);
    v9 = *(_OWORD *)(a3 + 64);
    v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    std::string::operator=((std::string *)(a2 + 128), (const std::string *)(a3 + 128));
    std::string::operator=((std::string *)(a2 + 152), (const std::string *)(a3 + 152));
    v11 = *(_OWORD *)(a3 + 224);
    v13 = *(_OWORD *)(a3 + 176);
    v12 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 224) = v11;
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 192) = v12;
  }
  else
  {
    v14 = *(_OWORD *)(a3 + 80);
    v19[4] = *(_OWORD *)(a3 + 64);
    v20[0] = v14;
    *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)(a3 + 89);
    v15 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v15;
    v16 = *(_OWORD *)(a3 + 48);
    v19[2] = *(_OWORD *)(a3 + 32);
    v19[3] = v16;
    v21 = *(id *)(a3 + 112);
    if (*(char *)(a3 + 151) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a3 + 128), *(_QWORD *)(a3 + 136));
    else
      v22 = *(std::string *)(a3 + 128);
    if (*(char *)(a3 + 175) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 152), *(_QWORD *)(a3 + 160));
    else
      __p = *(std::string *)(a3 + 152);
    v17 = *(_OWORD *)(a3 + 192);
    v24 = *(_OWORD *)(a3 + 176);
    v25 = v17;
    v18 = *(_OWORD *)(a3 + 224);
    v26 = *(_OWORD *)(a3 + 208);
    v27 = v18;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(v4, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);

  }
}

void sub_2277A2E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 256);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      v7 = *a3;
      v8 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v7;
      v9 = a3[3];
      v10 = a3[4];
      v11 = a3[5];
      *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 80) = v11;
      *(_OWORD *)(a2 + 48) = v9;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      v12 = a3[8];
      v13 = a3[9];
      v14 = a3[11];
      *(_OWORD *)(a2 + 160) = a3[10];
      *(_OWORD *)(a2 + 176) = v14;
      *(_OWORD *)(a2 + 128) = v12;
      *(_OWORD *)(a2 + 144) = v13;
      result = (__n128)a3[12];
      v16 = a3[13];
      v17 = a3[15];
      *(_OWORD *)(a2 + 224) = a3[14];
      *(_OWORD *)(a2 + 240) = v17;
      *(__n128 *)(a2 + 192) = result;
      *(_OWORD *)(a2 + 208) = v16;
      return result;
    }
    ((void (*)(char *, uint64_t))off_24EFD8190[v5])(&v28, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  v18 = *a3;
  v19 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v19;
  *(_OWORD *)v4 = v18;
  v20 = a3[3];
  v21 = a3[4];
  v22 = a3[5];
  *(_OWORD *)(v4 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v21;
  *(_OWORD *)(v4 + 80) = v22;
  *(_OWORD *)(v4 + 48) = v20;
  *(_QWORD *)(v4 + 112) = *((id *)a3 + 14);
  v23 = a3[8];
  v24 = a3[9];
  v25 = a3[11];
  *(_OWORD *)(v4 + 160) = a3[10];
  *(_OWORD *)(v4 + 176) = v25;
  *(_OWORD *)(v4 + 128) = v23;
  *(_OWORD *)(v4 + 144) = v24;
  result = (__n128)a3[12];
  v26 = a3[13];
  v27 = a3[15];
  *(_OWORD *)(v4 + 224) = a3[14];
  *(_OWORD *)(v4 + 240) = v27;
  *(__n128 *)(v4 + 192) = result;
  *(_OWORD *)(v4 + 208) = v26;
  *(_DWORD *)(v4 + 256) = 4;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 256);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      v7 = *a3;
      v8 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v7;
      v9 = a3[3];
      v10 = a3[4];
      v11 = a3[5];
      *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 80) = v11;
      *(_OWORD *)(a2 + 48) = v9;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      result = *((float *)a3 + 32);
      *(float *)(a2 + 128) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_24EFD8190[v5])(&v18, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v14;
  *(_OWORD *)v4 = v13;
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[5];
  *(_OWORD *)(v4 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v16;
  *(_OWORD *)(v4 + 80) = v17;
  *(_OWORD *)(v4 + 48) = v15;
  *(_QWORD *)(v4 + 112) = *((id *)a3 + 14);
  result = *((float *)a3 + 32);
  *(float *)(v4 + 128) = result;
  *(_DWORD *)(v4 + 256) = 5;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  _QWORD v26[2];
  char v27;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v25 = *(_QWORD **)a2;
    else
      v25 = (_QWORD *)a2;
    v7 = ((*v25 >> 2) + (*v25 << 6) + v25[1] + 2654435769) ^ *v25;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x140uLL);
  v26[0] = v14;
  v26[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v15 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v15;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v14 + 6), (uint64_t)(a3 + 2));
  v27 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v26[0] = *v22;
    *v22 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_2277A33AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;
  _QWORD v27[2];
  char v28;

  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    if (*(_BYTE *)(a2 + 16))
      v26 = *(_QWORD **)a2;
    else
      v26 = (_QWORD *)a2;
    v8 = ((*v26 >> 2) + (*v26 << 6) + v26[1] + 2654435769) ^ *v26;
    *(_QWORD *)(a2 + 24) = v8;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v13 + 2), a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = operator new(0x40uLL);
  v27[0] = v15;
  v27[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = (*a4)[1];
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = v16;
  v15[6] = 0;
  v15[7] = 0;
  v28 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v27[0] = *v23;
    *v23 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v27[0];
    }
  }
  v13 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_2277A3664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD v29[2];
  char v30;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v28 = *(_QWORD **)a2;
    else
      v28 = (_QWORD *)a2;
    v7 = ((*v28 >> 2) + (*v28 << 6) + v28[1] + 2654435769) ^ *v28;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x40uLL);
  v29[0] = v14;
  v29[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v16 = *(_QWORD *)(a3 + 40);
  v14[6] = *(_QWORD *)(a3 + 32);
  v14[7] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v8 || (float)(v20 * (float)v8) < v19)
  {
    v21 = 1;
    if (v8 >= 3)
      v21 = (v8 & (v8 - 1)) != 0;
    v22 = v21 | (2 * v8);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v24);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v29[0] = *v25;
    *v25 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8)
          v26 %= v8;
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29[0];
    }
  }
  v12 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v12;
}

void sub_2277A3934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v2 + 6));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  char v26;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v24 = *(_QWORD **)a2;
    else
      v24 = (_QWORD *)a2;
    v7 = ((*v24 >> 2) + (*v24 << 6) + v24[1] + 2654435769) ^ *v24;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x140uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  v26 = 0;
  *v14 = 0;
  v14[1] = v7;
  v15 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v15;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v14 + 6), (uint64_t)(a3 + 2));
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_2277A3C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1456))
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 1040));
  if (*(_BYTE *)(a1 + 1024))
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 608));
  if (*(_BYTE *)(a1 + 592))
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 176));
}

void rf::data_flow::consumer::Mesh::~Mesh(id *this)
{
  if (*((_BYTE *)this + 408))

  if (*((_BYTE *)this + 392))
    RESharedPtr<REAsset>::~RESharedPtr(this + 48);
  if (*((_BYTE *)this + 376))
    RESharedPtr<REAsset>::~RESharedPtr(this + 46);
  if (*((_BYTE *)this + 360))
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(this + 44);
  if (*((_BYTE *)this + 344))

  if (*((_BYTE *)this + 312))
  if (*((_BYTE *)this + 280))

  if (*((_BYTE *)this + 248))
  if (*((_BYTE *)this + 216))

  if (*((_BYTE *)this + 184))
  if (*((_BYTE *)this + 152))

}

uint64_t std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*((_BYTE *)a2 + 416))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v9;
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (*((_BYTE *)a2 + 152))
    {
      *(_QWORD *)(a1 + 128) = *((id *)a2 + 16);
      *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    if (*((_BYTE *)a2 + 184))
    {
      *(_QWORD *)(a1 + 160) = *((id *)a2 + 20);
      *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_BYTE *)(a1 + 192) = 0;
    *(_BYTE *)(a1 + 216) = 0;
    if (*((_BYTE *)a2 + 216))
    {
      *(_QWORD *)(a1 + 192) = *((id *)a2 + 24);
      *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
      *(_BYTE *)(a1 + 216) = 1;
    }
    *(_BYTE *)(a1 + 224) = 0;
    *(_BYTE *)(a1 + 248) = 0;
    if (*((_BYTE *)a2 + 248))
    {
      *(_QWORD *)(a1 + 224) = *((id *)a2 + 28);
      *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
      *(_BYTE *)(a1 + 248) = 1;
    }
    *(_BYTE *)(a1 + 256) = 0;
    *(_BYTE *)(a1 + 280) = 0;
    if (*((_BYTE *)a2 + 280))
    {
      *(_QWORD *)(a1 + 256) = *((id *)a2 + 32);
      *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
      *(_BYTE *)(a1 + 280) = 1;
    }
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 312) = 0;
    if (*((_BYTE *)a2 + 312))
    {
      *(_QWORD *)(a1 + 288) = *((id *)a2 + 36);
      *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
      *(_BYTE *)(a1 + 312) = 1;
    }
    *(_BYTE *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 344) = 0;
    if (*((_BYTE *)a2 + 344))
    {
      *(_QWORD *)(a1 + 320) = *((id *)a2 + 40);
      *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
      *(_BYTE *)(a1 + 344) = 1;
    }
    *(_BYTE *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 360) = 0;
    if (*((_BYTE *)a2 + 360))
    {
      v10 = *((_QWORD *)a2 + 44);
      *(_QWORD *)(a1 + 352) = v10;
      if (v10)
        RERetain();
      *(_BYTE *)(a1 + 360) = 1;
    }
    std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100]((_BYTE *)(a1 + 368), (uint64_t *)a2 + 46);
    std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100]((_BYTE *)(a1 + 384), (uint64_t *)a2 + 48);
    *(_BYTE *)(a1 + 400) = 0;
    *(_BYTE *)(a1 + 408) = 0;
    if (*((_BYTE *)a2 + 408))
    {
      *(_QWORD *)(a1 + 400) = *((id *)a2 + 50);
      *(_BYTE *)(a1 + 408) = 1;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
  return a1;
}

void sub_2277A4024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;

  if (*(_BYTE *)(v1 + 360))
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(v2);
  if (*(_BYTE *)(v1 + 344))

  if (*(_BYTE *)(v1 + 312))
  if (*(_BYTE *)(v1 + 280))

  if (*(_BYTE *)(v1 + 248))
  if (*(_BYTE *)(v1 + 216))

  if (*(_BYTE *)(v1 + 184))
  if (*(_BYTE *)(v1 + 152))

  if (*(_BYTE *)(v1 + 416))
    rf::data_flow::consumer::Mesh::~Mesh((id *)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t *a2)
{
  uint64_t v3;

  *a1 = 0;
  a1[8] = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v3 = *a2;
    *(_QWORD *)a1 = *a2;
    if (v3)
      RERetain();
    a1[8] = 1;
  }
  return a1;
}

void sub_2277A4124(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_2277A43DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2277A4564(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    RESharedPtr<REAsset>::operator=((uint64_t *)a1, a2);
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)a1 = *a2;
    if (v3)
      RERetain();
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t *RESharedPtr<REAsset>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    RERetain();
  v4 = *a1;
  *a1 = v3;
  if (v4)
    RERelease();
  return a1;
}

uint64_t std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(uint64_t a1, void *a2)
{
  int v3;
  id v4;
  void *v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = a2;
  if (v3)
  {
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;

  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  char v26;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v24 = *(_QWORD **)a2;
    else
      v24 = (_QWORD *)a2;
    v7 = ((*v24 >> 2) + (*v24 << 6) + v24[1] + 2654435769) ^ *v24;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x40uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_2277A54B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v37 = *(_QWORD **)a2;
    else
      v37 = (_QWORD *)a2;
    v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v14 = *v34;
LABEL_73:
    *v34 = v14;
    goto LABEL_74;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)a1 + 3);
}

void sub_2277A5900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(uint64_t result, _QWORD **a2, _QWORD *a3, uint64_t a4)
{
  if (result)
  {
    *a2 = (_QWORD *)**a2;
    *(_QWORD *)(a4 + 8) = 1;
  }
  else
  {
    *a2 = (_QWORD *)**a2;
    if (!a3[1])
    {
      a3[1] = *(_QWORD *)(*(_QWORD *)(*a3 + 16) + 16);
      a3[2] = 1;
    }
    *(_QWORD *)(a4 + 8) = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v37 = *(_QWORD **)a2;
    else
      v37 = (_QWORD *)a2;
    v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v14 = *v34;
LABEL_73:
    *v34 = v14;
    goto LABEL_74;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)a1 + 3);
}

void sub_2277A5D94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v37 = *(_QWORD **)a2;
    else
      v37 = (_QWORD *)a2;
    v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v14 = *v34;
LABEL_73:
    *v34 = v14;
    goto LABEL_74;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)a1 + 3);
}

void sub_2277A61DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v37 = *(_QWORD **)a2;
    else
      v37 = (_QWORD *)a2;
    v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v7;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v14 = *v34;
LABEL_73:
    *v34 = v14;
    goto LABEL_74;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)a1 + 3);
}

void sub_2277A6624(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  _QWORD *v38;
  _QWORD v39[2];
  char v40;

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v38 = *(_QWORD **)a2;
    else
      v38 = (_QWORD *)a2;
    v7 = ((*v38 >> 2) + (*v38 << 6) + v38[1] + 2654435769) ^ *v38;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
              return;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x38uLL);
  v39[0] = v15;
  v39[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v16;
  v15[6] = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  v40 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v14;
          if (*v14)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v14;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_56;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_56:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v35 = v39[0];
  if (v34)
  {
    *(_QWORD *)v39[0] = *v34;
LABEL_73:
    *v34 = v35;
    goto LABEL_74;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*(_QWORD *)v35)
  {
    v36 = *(_QWORD *)(*(_QWORD *)v35 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v36 >= v8)
        v36 %= v8;
    }
    else
    {
      v36 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_73;
  }
LABEL_74:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_2277A6A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t Object;
  uint64_t v6;

  v3 = result + 8 * a2;
  if (*a3 != v3)
  {
    do
    {
      Object = RECustomComponentGetObject();
      REComponentGetEntity();
      RENetworkComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (result)
      {
        result = RENetworkComponentIsAuthoritative();
        if (!(_DWORD)result)
          break;
      }
      if (!*(_BYTE *)(Object + 21) && !*(_BYTE *)(Object + 20))
        break;
      v6 = *a3 + 8;
      *a3 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1)
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 272 * v6;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2277A6BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0xF0F0F0F0F0F0F0)
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x78787878787878)
      v12 = 0xF0F0F0F0F0F0F0;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[272 * v9];
    v18 = &v13[272 * v12];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v16, a2);
    v17 = v16 + 272;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v8;
  return v8 - 272;
}

void sub_2277A6CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *RFDebugServiceCreate()
{
  uint64_t *Instance;
  _QWORD *v1;
  __int128 v3[4];

  memset(v3, 0, 60);
  if (qword_253DC9B68 != -1)
    dispatch_once(&qword_253DC9B68, &__block_literal_global_3);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::DebugOptionConsumer::DebugOptionConsumer((uint64_t)(v1 + 2), v3);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

void sub_2277A6DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10B0C4095DBC23ELL);
  _Unwind_Resume(a1);
}

uint64_t RFDebugServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFDebugServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFDebugServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  float v7;
  uint64_t ServiceLocator;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  RESceneGetECSManagerNullable();
  v7 = a3;
  ServiceLocator = REECSManagerGetServiceLocator();
  v9 = 1;
  v10 = a2;
  v11 = 1;
  v12 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 16) + 16))(v5 + 16, &v7);
}

uint64_t RFDebugServiceSetAnchorVisualizationEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 32) = a2;
  return result;
}

uint64_t RFDebugServiceGetAnchorVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 32);
}

uint64_t RFDebugServiceSetAnchorVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 16) + 36) = a2;
  return result;
}

uint64_t RFDebugServiceGetAnchorVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 36);
}

uint64_t RFDebugServiceSetSceneGraphVisualizationEnabled(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 40) = 0;
  return result;
}

uint64_t RFDebugServiceGetSceneGraphVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t RFDebugServiceSetSceneGraphVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 16) + 44) = a2;
  return result;
}

uint64_t RFDebugServiceGetSceneVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 44);
}

double RFDebugServiceSetMeshVisualizationEnabled(uint64_t a1, char a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 48) = a2;
  result = *(double *)(v2 + 52);
  *(double *)(v2 + 200) = result;
  *(_BYTE *)(v2 + 1744) = 1;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t RFDebugServiceSetMeshVisualizationMode(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(unsigned __int8 *)(v2 + 60);
  if (v3 == 2)
  {
    if (*(_DWORD *)(v2 + 52) == a2)
    {
      v5 = *(_DWORD *)(v2 + 56);
    }
    else
    {
      *(_DWORD *)(v2 + 52) = a2;
      v5 = *(_DWORD *)(v2 + 56);
      *(_DWORD *)(v2 + 200) = a2;
      *(_DWORD *)(v2 + 204) = v5;
      *(_BYTE *)(v2 + 1744) = 1;
    }
    if (v5 != a2)
    {
      *(_DWORD *)(v2 + 56) = a2;
      v4 = a2;
      goto LABEL_13;
    }
  }
  else
  {
    if (v3 == 1)
    {
      if (*(_DWORD *)(v2 + 56) == a2)
        return result;
      *(_DWORD *)(v2 + 56) = a2;
      v4 = *(_DWORD *)(v2 + 52);
      goto LABEL_13;
    }
    if (!*(_BYTE *)(v2 + 60) && *(_DWORD *)(v2 + 52) != a2)
    {
      *(_DWORD *)(v2 + 52) = a2;
      v4 = a2;
      a2 = *(_DWORD *)(v2 + 56);
LABEL_13:
      *(_DWORD *)(v2 + 200) = v4;
      *(_DWORD *)(v2 + 204) = a2;
      *(_BYTE *)(v2 + 1744) = 1;
    }
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationMode(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(unsigned __int8 *)(v1 + 60);
  if (v2 == 2)
    return *(int *)(v1 + 52);
  if (v2 != 1)
  {
    if (*(_BYTE *)(v1 + 60))
      return result;
    return *(int *)(v1 + 52);
  }
  return *(int *)(v1 + 56);
}

uint64_t RFDebugServiceSetMeshVisualizationSolidMode(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v2 + 52) != a2)
  {
    *(_DWORD *)(v2 + 52) = a2;
    v3 = *(_DWORD *)(v2 + 56);
    *(_DWORD *)(v2 + 200) = a2;
    *(_DWORD *)(v2 + 204) = v3;
    *(_BYTE *)(v2 + 1744) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationSolidMode(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 52);
}

uint64_t RFDebugServiceSetMeshVisualizationWireMode(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v2 + 56) != a2)
  {
    *(_DWORD *)(v2 + 56) = a2;
    *(_DWORD *)(v2 + 200) = *(_DWORD *)(v2 + 52);
    *(_DWORD *)(v2 + 204) = a2;
    *(_BYTE *)(v2 + 1744) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationWireMode(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 56);
}

uint64_t RFDebugServiceSetMeshVisualizationFillMode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(v2 + 60) = a2;
  if (a2 == 2)
  {
    v5 = *(_DWORD *)(v2 + 52);
    v4 = *(_DWORD *)(v2 + 56);
    if (v5)
    {
      if (v5 != v4)
      {
        *(_DWORD *)(v2 + 56) = v5;
        v4 = v5;
LABEL_21:
        *(_DWORD *)(v2 + 200) = v4;
        *(_DWORD *)(v2 + 204) = v5;
        *(_BYTE *)(v2 + 1744) = 1;
      }
    }
    else if (v4)
    {
      *(_DWORD *)(v2 + 52) = v4;
      v5 = v4;
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 == 1)
    {
      v6 = *(_DWORD *)(v2 + 52);
      v5 = *(_DWORD *)(v2 + 56);
      if (v5)
      {
        if (!v6)
          return result;
      }
      else
      {
        if (!v6)
          return result;
        *(_DWORD *)(v2 + 56) = v6;
        v5 = v6;
      }
      v4 = 0;
      *(_DWORD *)(v2 + 52) = 0;
      goto LABEL_21;
    }
    if (a2)
      return result;
    v4 = *(_DWORD *)(v2 + 52);
    v3 = *(_DWORD *)(v2 + 56);
    if (v4)
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
    if (v3)
    {
      *(_DWORD *)(v2 + 52) = v3;
      v4 = v3;
LABEL_15:
      v5 = 0;
      *(_DWORD *)(v2 + 56) = 0;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationFillMode(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 60);
}

int8x16_t RFDebugServiceSetMeshVisualizationSolidConstantModeColor(uint64_t a1, float32x4_t a2)
{
  int8x16_t result;

  __asm { FMOV            V2.4S, #1.0 }
  result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(_QWORD *)(a1 + 16) + 240) = result;
  return result;
}

__n128 RFDebugServiceGetMeshVisualizationSolidConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + 240);
}

int8x16_t RFDebugServiceSetMeshVisualizationWireConstantModeColor(uint64_t a1, float32x4_t a2)
{
  int8x16_t result;

  __asm { FMOV            V2.4S, #1.0 }
  result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(_QWORD *)(a1 + 16) + 256) = result;
  return result;
}

__n128 RFDebugServiceGetMeshVisualizationWireConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + 256);
}

float RFDebugServiceSetMeshVisualizationClassificationColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3;
  __n128 v5;

  v3 = *(_QWORD *)(a1 + 16);
  v5 = a3;
  return rf::ColorPalette::setColor((_QWORD *)(v3 + 288), a2, (__int128 *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetMeshVisualizationClassificationColor(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 288);
  v4 = (*(_QWORD *)(v2 + 296) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  v5 = v2 + 320;
  if (!v4)
    v5 = v3 + 16 * a2;
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetMeshVisualizationClassificationsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationClassificationsAlpha(*(_QWORD *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetMeshVisualizationClassificationsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = rf::ColorPalette::setColorVisibility(v3 + 368, a2);
  *(_BYTE *)(v3 + 448) = ~(-1 << ((*(_QWORD *)(v3 + 376) - *(_QWORD *)(v3 + 368)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationClassificationsVisibility(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 424);
  if (!v2)
    return 0;
  v3 = 0;
  LODWORD(result) = 0;
  v5 = *(_QWORD *)(v1 + 416);
  do
  {
    result = (((*(_QWORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float RFDebugServiceSetMeshVisualizationMaterialColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3;
  __n128 v5;

  v3 = *(_QWORD *)(a1 + 16);
  v5 = a3;
  return rf::ColorPalette::setColor((_QWORD *)(v3 + 288), a2, (__int128 *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetMeshVisualizationMaterialColor(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 288);
  v4 = (*(_QWORD *)(v2 + 296) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  v5 = v2 + 320;
  if (!v4)
    v5 = v3 + 16 * a2;
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetMeshVisualizationMaterialsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationMaterialsAlpha(*(_QWORD *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetMeshVisualizationMaterialsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = rf::ColorPalette::setColorVisibility(v3 + 288, a2);
  *(_BYTE *)(v3 + 449) = ~(-1 << ((*(_QWORD *)(v3 + 296) - *(_QWORD *)(v3 + 288)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationMaterialsVisibility(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 344);
  if (!v2)
    return 0;
  v3 = 0;
  LODWORD(result) = 0;
  v5 = *(_QWORD *)(v1 + 336);
  do
  {
    result = (((*(_QWORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

double RFDebugServiceSetPRRMeshVisualizationEnabled(uint64_t a1, char a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 61) = a2;
  result = *(double *)(v2 + 64);
  *(double *)(v2 + 520) = result;
  *(_BYTE *)(v2 + 1745) = 1;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 61);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationSolidMode(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v2 + 64) != a2)
  {
    *(_DWORD *)(v2 + 64) = a2;
    v3 = *(_DWORD *)(v2 + 68);
    *(_DWORD *)(v2 + 520) = a2;
    *(_DWORD *)(v2 + 524) = v3;
    *(_BYTE *)(v2 + 1745) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationSolidMode(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 64);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationWireMode(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v2 + 68) != a2)
  {
    *(_DWORD *)(v2 + 68) = a2;
    *(_DWORD *)(v2 + 520) = *(_DWORD *)(v2 + 64);
    *(_DWORD *)(v2 + 524) = a2;
    *(_BYTE *)(v2 + 1745) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationWireMode(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 68);
}

int8x16_t RFDebugServiceSetPRRMeshVisualizationSolidConstantModeColor(uint64_t a1, float32x4_t a2)
{
  int8x16_t result;

  __asm { FMOV            V2.4S, #1.0 }
  result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(_QWORD *)(a1 + 16) + 560) = result;
  return result;
}

__n128 RFDebugServiceGetPRRMeshVisualizationSolidConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + 560);
}

int8x16_t RFDebugServiceSetPRRMeshVisualizationWireConstantModeColor(uint64_t a1, float32x4_t a2)
{
  int8x16_t result;

  __asm { FMOV            V2.4S, #1.0 }
  result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(_QWORD *)(a1 + 16) + 576) = result;
  return result;
}

__n128 RFDebugServiceGetPRRMeshVisualizationWireConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + 576);
}

float RFDebugServiceSetPRRMeshVisualizationClassificationColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3;
  __n128 v5;

  v3 = *(_QWORD *)(a1 + 16);
  v5 = a3;
  return rf::ColorPalette::setColor((_QWORD *)(v3 + 608), a2, (__int128 *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetPRRMeshVisualizationClassificationColor(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 608);
  v4 = (*(_QWORD *)(v2 + 616) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  v5 = v2 + 640;
  if (!v4)
    v5 = v3 + 16 * a2;
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetPRRMeshVisualizationClassificationsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationClassificationsAlpha(*(_QWORD *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationClassificationsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = rf::ColorPalette::setColorVisibility(v3 + 688, a2);
  *(_BYTE *)(v3 + 768) = ~(-1 << ((*(_QWORD *)(v3 + 696) - *(_QWORD *)(v3 + 688)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationClassificationsVisibility(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 744);
  if (!v2)
    return 0;
  v3 = 0;
  LODWORD(result) = 0;
  v5 = *(_QWORD *)(v1 + 736);
  do
  {
    result = (((*(_QWORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float RFDebugServiceSetPRRMeshVisualizationMaterialColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3;
  __n128 v5;

  v3 = *(_QWORD *)(a1 + 16);
  v5 = a3;
  return rf::ColorPalette::setColor((_QWORD *)(v3 + 608), a2, (__int128 *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetPRRMeshVisualizationMaterialColor(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 608);
  v4 = (*(_QWORD *)(v2 + 616) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  v5 = v2 + 640;
  if (!v4)
    v5 = v3 + 16 * a2;
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetPRRMeshVisualizationMaterialsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationMaterialsAlpha(*(_QWORD *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationMaterialsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = rf::ColorPalette::setColorVisibility(v3 + 608, a2);
  *(_BYTE *)(v3 + 769) = ~(-1 << ((*(_QWORD *)(v3 + 616) - *(_QWORD *)(v3 + 608)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationMaterialsVisibility(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 664);
  if (!v2)
    return 0;
  v3 = 0;
  LODWORD(result) = 0;
  v5 = *(_QWORD *)(v1 + 656);
  do
  {
    result = (((*(_QWORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

uint64_t RFDebugServiceSetEnvironmentProbeVisualizationEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 72) = a2;
  return result;
}

uint64_t RFDebugServiceGetEnvironmentProbeVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 72);
}

uint64_t RFDebugServiceSetEnvironmentProbeVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 16) + 76) = a2;
  return result;
}

uint64_t RFDebugServiceGetEnvironmentProbeVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 76);
}

uint64_t RFDebugServiceSetRoomVisualizationEnabled(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(v2 + 80) = a2;
  *(_BYTE *)(v2 + 1746) = 1;
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 80);
}

double RFDebugServiceSetRoomVisualizationClassificationAlpha(uint64_t a1, float a2)
{
  double result;

  *(_QWORD *)&result = rf::data_flow::consumer::DebugOptionConsumer::setRoomVisualizationClassificationAlpha((__n128 *)(*(_QWORD *)(a1 + 16) + 16), a2).n128_u64[0];
  return result;
}

uint64_t RFDebugServiceSetRoomVisualizationMode(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v2 + 84) != a2)
  {
    *(_DWORD *)(v2 + 84) = a2;
    *(_BYTE *)(v2 + 1746) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationMode(uint64_t a1)
{
  return *(int *)(*(_QWORD *)(a1 + 16) + 84);
}

uint64_t RFDebugServiceSetRoomVisualizationCurrentRoomOnly(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 88) != a2)
    *(_BYTE *)(v2 + 88) = a2;
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationCurrentRoomOnly(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 88);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer19DebugOptionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_12[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::DebugOptionConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9B70 = 0u;
  xmmword_253DC9B80 = 0u;
  xmmword_253DC9B90 = 0u;
  unk_253DC9BA0 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9BB0 = 0uLL;
  unk_253DC9BC0 = 0uLL;
  *((_QWORD *)&xmmword_253DC9B70 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9B80 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9B90 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::finalizeCallback;
  qword_253DC9BA8 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9BB0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_4 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277A7848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer((rf::data_flow::consumer::DebugOptionConsumer *)(v2 + 16));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t rf::data_flow::consumer::AtmospherePlacementConsumer::AtmospherePlacementConsumer(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  __int16 v26;
  unint64_t v27;
  char v28;
  char v29;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  const void *v35;

  *(_QWORD *)a1 = &off_24EFD8280;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = *((_QWORD *)a2 + 10);
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 128) = 850045863;
  v9 = a1 + 128;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 109) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_2277EE440;
  *(_OWORD *)(a1 + 272) = xmmword_2277EE450;
  *(_OWORD *)(a1 + 288) = xmmword_2277EE460;
  *(_OWORD *)(a1 + 304) = xmmword_2277EE900;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = dispatch_group_create();
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v10, QOS_CLASS_USER_INITIATED, 0);
  v11 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(v9 + 240) = dispatch_queue_create("RoomExtentComputeQueue", v11);

  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.recalibrateIntervalUpdate");
  v12 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v12 & 0xFF00000000) == 0)
    LODWORD(v12) = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = v12;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.recalibrateIntervalNoUpdate");
  v13 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v13 & 0xFF00000000) == 0)
    LODWORD(v13) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v13;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentCenterDifference");
  v14 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v14 & 0xFF00000000) == 0)
    LODWORD(v14) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = v14;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentExtentDifference");
  v15 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v15 & 0xFF00000000) == 0)
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = v15;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentOrientationDifference");
  v16 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v16 & 0xFF00000000) == 0)
    LODWORD(v16) = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 76) = v16;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentHeightDifference");
  v17 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v17 & 0xFF00000000) == 0)
    LODWORD(v17) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v17;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCrossfadeDuration");
  v18 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v18 & 0xFF00000000) == 0)
    LODWORD(v18) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = v18;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyOutdoorCeilingOffset");
  v19 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v19 & 0xFF00000000) == 0)
    LODWORD(v19) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v19;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCombinedExtentRatioThreshold");
  v20 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v20 & 0xFF00000000) == 0)
    LODWORD(v20) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v20;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.lowestWallOffset");
  v21 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v21 & 0xFF00000000) == 0)
    LODWORD(v21) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v21;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.highestWallOffset");
  v22 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v22 & 0xFF00000000) == 0)
    LODWORD(v22) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v22;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyDefaultBoundsType");
  v23 = rf::UserDefaults::intValue((CFStringRef *)&v35, (const UInt8 *)__p);
  v25 = v24;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v25)
  {
    if (v23)
    {
      if (v23 != 1)
        goto LABEL_77;
      v26 = 257;
    }
    else
    {
      v26 = 256;
    }
    *(_WORD *)(a1 + 84) = v26;
  }
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCombinedExtentEstimationMode");
  v27 = rf::UserDefaults::intValue((CFStringRef *)&v35, (const UInt8 *)__p);
  v29 = v28;
  if (v32 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v29 && v27 < 5)
    *(_BYTE *)(a1 + 92) = v27;
  return a1;
}

void sub_2277A7FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  rf::UserDefaults::~UserDefaults((const void **)(v23 - 40));
  if (a21 < 0)
    operator delete(a16);

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v21 + 192);
  std::mutex::~mutex(v22);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AtmospherePlacementConsumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::useRFRoomExtentFeatureFlagEnabled(rf::data_flow::consumer::AtmospherePlacementConsumer *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_253DC9BD8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_253DC9BD8))
    {
      _MergedGlobals_5 = _os_feature_enabled_impl();
      __cxa_guard_release(&qword_253DC9BD8);
    }
  }
}

void sub_2277A8170(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253DC9BD8);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate(rf *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];
  uint64_t v7;
  uint64_t v8;

  if (a3 == 2)
  {
    v7 = v3;
    v8 = v4;
    rf::realityFusionLogObject(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_227777000, v5, OS_LOG_TYPE_INFO, "AtmospherePlacementConsumer: Skipping calibration, not needed for Atmosphere", v6, 2u);
    }

  }
  else
  {
    rf::data_flow::consumer::AtmospherePlacementConsumer::useRFRoomExtentFeatureFlagEnabled(a1);
  }
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer(rf::data_flow::consumer::AtmospherePlacementConsumer *this)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer(this);
  JUMPOUT(0x22E29DD50);
}

{

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  std::mutex::~mutex((std::mutex *)this + 2);
}

uint64_t rf::data_flow::consumer::VFXCollisionConsumer::consumeLatestUpdate(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t ComponentsOfClass;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD **v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *j;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t k;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  float v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  int8x8_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  _QWORD **v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  int8x8_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *m;
  unint64_t v88;
  __n128 *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int8x8_t v94;
  uint8x8_t v95;
  _QWORD *v96;
  _QWORD *n;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  __int128 v109;
  __int128 v110;
  float v111;
  float v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  float v121;
  float v122;
  unint64_t v123;
  int8x8_t v124;
  _BOOL8 v125;
  unint64_t v126;
  unint64_t v127;
  int8x8_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint8x8_t v134;
  unint64_t v135;
  uint8x8_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __n128 v140;
  __n128 v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  __n128 v146;
  __n128 v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint8x8_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *ii;
  unint64_t v165;
  int8x8_t v166;
  unint64_t v167;
  uint8x8_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  __n128 v184;
  __n128 v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  __n128 v190;
  __n128 v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t *v194;
  _QWORD *v195;
  uint64_t *v196;
  int8x8_t v197;
  unint64_t v198;
  uint8x8_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210;
  __n128 v211;
  __n128 v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  __n128 v217;
  __n128 v218;
  uint64_t v219;
  __n128 v220;
  __n128 v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  __n128 v226;
  __n128 v227;
  uint64_t v228;
  void *v229;
  unint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  std::mutex *v239;
  int v240;
  unint64_t v241;
  __n128 *v242;
  _QWORD *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  _QWORD *v248;
  int v249;
  int v250;
  uint64_t v251;
  size_t __n[2];
  __int128 v253;
  int v254;
  void *__p[2];
  __int128 v256;
  float v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;

  if (*(_BYTE *)(a2 + 32))
    v3 = *(_BYTE *)(a2 + 16) == 0;
  else
    v3 = 1;
  if (v3)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(a2 + 24);
  REVFXSceneComponentGetComponentType();
  ComponentsOfClass = RESceneGetComponentsOfClass();
  v8 = ComponentsOfClass;
  v9 = v7;
  if (v7)
  {
    v10 = 8 * v7;
    v11 = (unint64_t *)ComponentsOfClass;
    do
    {
      if ((MEMORY[0x22E29DBA0](*v11) & 1) != 0)
        goto LABEL_11;
      ++v11;
      v10 -= 8;
    }
    while (v10);
    *(_OWORD *)__p = 0u;
    v256 = 0u;
    v257 = 1.0;
    goto LABEL_99;
  }
  v11 = (unint64_t *)ComponentsOfClass;
LABEL_11:
  v10 = v8 + 8 * v9;
  *(_OWORD *)__p = 0u;
  v256 = 0u;
  v257 = 1.0;
  if (v11 != (unint64_t *)v10)
  {
    while (1)
    {
      v2 = *v11;
      v12 = 0x9DDFEA08EB382D69 * ((8 * *v11 + 8) ^ HIDWORD(*v11));
      v13 = 0x9DDFEA08EB382D69 * (HIDWORD(*v11) ^ (v12 >> 47) ^ v12);
      v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
      v15 = (unint64_t)__p[1];
      if (__p[1])
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v9 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
          if ((void *)v14 >= __p[1])
            v9 = v14 % (unint64_t)__p[1];
        }
        else
        {
          v9 = v14 & ((unint64_t)__p[1] - 1);
        }
        v17 = (_QWORD *)*((_QWORD *)__p[0] + v9);
        if (v17)
        {
          for (i = (_QWORD *)*v17; i; i = (_QWORD *)*i)
          {
            v19 = i[1];
            if (v19 == v14)
            {
              if (i[2] == v2)
                goto LABEL_84;
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if ((void *)v19 >= __p[1])
                  v19 %= (unint64_t)__p[1];
              }
              else
              {
                v19 &= (unint64_t)__p[1] - 1;
              }
              if (v19 != v9)
                break;
            }
          }
        }
      }
      v20 = operator new(0x18uLL);
      *v20 = 0;
      v20[1] = v14;
      v20[2] = v2;
      v21 = (float)(unint64_t)(*((_QWORD *)&v256 + 1) + 1);
      if (!v15 || (float)(v257 * (float)v15) < v21)
        break;
LABEL_74:
      v37 = __p[0];
      v38 = (_QWORD *)*((_QWORD *)__p[0] + v9);
      if (v38)
      {
        *v20 = *v38;
      }
      else
      {
        *v20 = v256;
        *(_QWORD *)&v256 = v20;
        v37[v9] = &v256;
        if (!*v20)
          goto LABEL_83;
        v39 = *(_QWORD *)(*v20 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v39 >= v15)
            v39 %= v15;
        }
        else
        {
          v39 &= v15 - 1;
        }
        v38 = (char *)__p[0] + 8 * v39;
      }
      *v38 = v20;
LABEL_83:
      ++*((_QWORD *)&v256 + 1);
LABEL_84:
      if (++v11 != (unint64_t *)v10)
      {
        while ((MEMORY[0x22E29DBA0](*v11) & 1) == 0)
        {
          if (++v11 == (unint64_t *)v10)
            goto LABEL_99;
        }
        if (v11 != (unint64_t *)v10)
          continue;
      }
      goto LABEL_99;
    }
    v22 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3)
      v22 = 1;
    v23 = v22 | (2 * v15);
    v24 = vcvtps_u32_f32(v21 / v257);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = (unint64_t)__p[1];
    }
    if (*(_QWORD *)&prime > v15)
      goto LABEL_40;
    if (*(_QWORD *)&prime < v15)
    {
      v32 = vcvtps_u32_f32((float)*((unint64_t *)&v256 + 1) / v257);
      if (v15 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = __p[0];
          __p[0] = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD **)v256;
          if ((_QWORD)v256)
          {
            v30 = *(_QWORD *)(v256 + 8);
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v30) = &v256;
            for (j = *v29; j; v30 = v36)
            {
              v36 = j[1];
              if (v31.u32[0] > 1uLL)
              {
                if (v36 >= *(_QWORD *)&prime)
                  v36 %= *(_QWORD *)&prime;
              }
              else
              {
                v36 &= *(_QWORD *)&prime - 1;
              }
              if (v36 != v30)
              {
                if (!*((_QWORD *)__p[0] + v36))
                {
                  *((_QWORD *)__p[0] + v36) = v29;
                  goto LABEL_65;
                }
                *v29 = (_QWORD *)*j;
                *j = **((_QWORD **)__p[0] + v36);
                **((_QWORD **)__p[0] + v36) = j;
                j = v29;
              }
              v36 = v30;
LABEL_65:
              v29 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_69;
        }
        v40 = __p[0];
        __p[0] = 0;
        if (v40)
          operator delete(v40);
        v15 = 0;
        __p[1] = 0;
      }
    }
LABEL_69:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v9 = v14 % v15;
      else
        v9 = v14;
    }
    else
    {
      v9 = (v15 - 1) & v14;
    }
    goto LABEL_74;
  }
LABEL_99:
  v41 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v42 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v41 >> 47) ^ v41);
  v43 = v42 ^ (v42 >> 47);
  v44 = 0x9DDFEA08EB382D69 * v43;
  v45 = *(_QWORD *)(v4 + 32);
  if (*((_QWORD *)&v256 + 1))
  {
    if (v45)
    {
      v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
      v46.i16[0] = vaddlv_u8(v46);
      if (v46.u32[0] > 1uLL)
      {
        v10 = 0x9DDFEA08EB382D69 * v43;
        if (v44 >= v45)
          v10 = v44 % v45;
      }
      else
      {
        v10 = (v45 - 1) & v44;
      }
      v49 = *(unint64_t **)(*(_QWORD *)(v4 + 24) + 8 * v10);
      if (v49)
      {
        for (k = *v49; k; k = *(_QWORD *)k)
        {
          v51 = *(_QWORD *)(k + 8);
          if (v51 == v44)
          {
            if (*(_QWORD *)(k + 16) == v5)
              goto LABEL_191;
          }
          else
          {
            if (v46.u32[0] > 1uLL)
            {
              if (v51 >= v45)
                v51 %= v45;
            }
            else
            {
              v51 &= v45 - 1;
            }
            if (v51 != v10)
              break;
          }
        }
      }
    }
    v52 = (char *)operator new(0x40uLL);
    v53 = (_QWORD *)(v4 + 40);
    v262.n128_u64[0] = (unint64_t)v52;
    v262.n128_u64[1] = v4 + 40;
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = v44;
    *((_QWORD *)v52 + 2) = v5;
    *(_OWORD *)(v52 + 24) = 0u;
    *(_OWORD *)(v52 + 40) = 0u;
    *((_DWORD *)v52 + 14) = 1065353216;
    v263.n128_u8[0] = 1;
    v54 = (float)(unint64_t)(*(_QWORD *)(v4 + 48) + 1);
    v55 = *(float *)(v4 + 56);
    if (v45 && (float)(v55 * (float)v45) >= v54)
    {
LABEL_181:
      v76 = *(unint64_t **)(*(_QWORD *)(v4 + 24) + 8 * v10);
      k = v262.n128_u64[0];
      if (v76)
      {
        *(_QWORD *)v262.n128_u64[0] = *v76;
      }
      else
      {
        *(_QWORD *)v262.n128_u64[0] = *(_QWORD *)(v4 + 40);
        *(_QWORD *)(v4 + 40) = k;
        *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v10) = v53;
        if (!*(_QWORD *)k)
        {
LABEL_190:
          v262.n128_u64[0] = 0;
          ++*(_QWORD *)(v4 + 48);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_191:
          v239 = *(std::mutex **)(v4 + 8);
          std::mutex::lock(v239);
          v78 = (_QWORD *)v256;
          if ((_QWORD)v256)
          {
            v240 = 0;
            v242 = 0;
            v243 = (_QWORD *)(k + 40);
            v238 = k;
            do
            {
              v79 = *(int8x8_t *)(k + 32);
              if (v79)
              {
                v80 = v78[2];
                v81 = 0x9DDFEA08EB382D69 * (((8 * v80) + 8) ^ HIDWORD(v80));
                v82 = 0x9DDFEA08EB382D69 * (HIDWORD(v80) ^ (v81 >> 47) ^ v81);
                v83 = 0x9DDFEA08EB382D69 * (v82 ^ (v82 >> 47));
                v84 = (uint8x8_t)vcnt_s8(v79);
                v84.i16[0] = vaddlv_u8(v84);
                if (v84.u32[0] > 1uLL)
                {
                  v85 = v83;
                  if (v83 >= *(_QWORD *)&v79)
                    v85 = v83 % *(_QWORD *)&v79;
                }
                else
                {
                  v85 = v83 & (*(_QWORD *)&v79 - 1);
                }
                v86 = *(_QWORD **)(*(_QWORD *)(k + 24) + 8 * v85);
                if (v86)
                {
                  for (m = (_QWORD *)*v86; m; m = (_QWORD *)*m)
                  {
                    v88 = m[1];
                    if (v88 == v83)
                    {
                      if (m[2] == v80)
                        goto LABEL_344;
                    }
                    else
                    {
                      if (v84.u32[0] > 1uLL)
                      {
                        if (v88 >= *(_QWORD *)&v79)
                          v88 %= *(_QWORD *)&v79;
                      }
                      else
                      {
                        v88 &= *(_QWORD *)&v79 - 1;
                      }
                      if (v88 != v85)
                        break;
                    }
                  }
                }
              }
              *(_OWORD *)__n = 0u;
              v253 = 0u;
              v254 = 1065353216;
              if (v240)
              {
                v89 = v242;
                if (!v242)
                {
                  v242 = 0;
                  goto LABEL_216;
                }
              }
              else
              {
                v89 = *(__n128 **)&v239[2].__m_.__opaque[24];
                if (!v89)
                {
LABEL_215:
                  v242 = 0;
                  v240 = 1;
                  goto LABEL_216;
                }
                while (v89[19].n128_u32[0] != 1)
                {
                  v89 = (__n128 *)v89->n128_u64[0];
                  if (!v89)
                    goto LABEL_215;
                }
                v240 = 1;
              }
              v242 = v89;
              if (v89[19].n128_u32[0] != 1)
                std::__throw_bad_variant_access[abi:ne180100]();
LABEL_308:
              v138 = 0;
              v139 = v78[2];
              v141 = v89[14];
              v140 = v89[15];
              v142 = (float32x4_t)v89[5];
              v143 = (float32x4_t)v89[6];
              v144 = (float32x4_t)v89[7];
              v145 = (float32x4_t)v89[8];
              v146 = v89[12];
              v147 = v89[13];
              v258 = v89[11];
              v259 = v146;
              v260 = v147;
              v261 = v141;
              do
              {
                *(float32x4_t *)((char *)&v262 + v138) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v138))), v143, (float32x2_t)v258.n128_u64[v138 / 8], 1), v144, *(float32x4_t *)((char *)&v258 + v138), 2), v145, *(float32x4_t *)((char *)&v258 + v138), 3);
                v138 += 16;
              }
              while (v138 != 64);
              v251 = MEMORY[0x22E29DB88](v139, v140, v262, v263, v264, v265);
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)__n, (uint64_t)&v89[1], (__n128 *)v89[1].n128_u64, &v251);
              while (1)
              {
                v89 = (__n128 *)v89->n128_u64[0];
                if (!v89)
                  break;
                if (v89[19].n128_u32[0] == 1)
                  goto LABEL_308;
              }
LABEL_216:
              v90 = v78[2];
              v91 = 0x9DDFEA08EB382D69 * (((8 * v90) + 8) ^ HIDWORD(v90));
              v92 = 0x9DDFEA08EB382D69 * (HIDWORD(v90) ^ (v91 >> 47) ^ v91);
              v93 = 0x9DDFEA08EB382D69 * (v92 ^ (v92 >> 47));
              v94 = *(int8x8_t *)(k + 32);
              if (v94)
              {
                v95 = (uint8x8_t)vcnt_s8(v94);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v2 = 0x9DDFEA08EB382D69 * (v92 ^ (v92 >> 47));
                  if (v93 >= *(_QWORD *)&v94)
                    v2 = v93 % *(_QWORD *)&v94;
                }
                else
                {
                  v2 = v93 & (*(_QWORD *)&v94 - 1);
                }
                v96 = *(_QWORD **)(*(_QWORD *)(k + 24) + 8 * v2);
                if (v96)
                {
                  for (n = (_QWORD *)*v96; n; n = (_QWORD *)*n)
                  {
                    v98 = n[1];
                    if (v98 == v93)
                    {
                      if (n[2] == v90)
                        goto LABEL_343;
                    }
                    else
                    {
                      if (v95.u32[0] > 1uLL)
                      {
                        if (v98 >= *(_QWORD *)&v94)
                          v98 %= *(_QWORD *)&v94;
                      }
                      else
                      {
                        v98 &= *(_QWORD *)&v94 - 1;
                      }
                      if (v98 != v2)
                        break;
                    }
                  }
                }
              }
              v99 = (char *)operator new(0x40uLL);
              v245 = v2;
              v246 = (unint64_t)v94;
              v244 = v78;
              v262.n128_u64[0] = (unint64_t)v99;
              v262.n128_u64[1] = (unint64_t)v243;
              v263.n128_u8[0] = 0;
              *(_QWORD *)v99 = 0;
              *((_QWORD *)v99 + 1) = v93;
              v241 = v93;
              *((_QWORD *)v99 + 2) = v90;
              *(_OWORD *)(v99 + 24) = 0u;
              v100 = (uint64_t *)(v99 + 24);
              *((_DWORD *)v99 + 14) = v254;
              *(_OWORD *)(v99 + 40) = 0u;
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)(v99 + 24), __n[1]);
              v2 = v253;
              if ((_QWORD)v253)
              {
                v248 = v99 + 40;
                do
                {
                  v101 = *(_QWORD *)(v2 + 40);
                  if (!v101)
                  {
                    if (*(_BYTE *)(v2 + 32))
                      v120 = *(_QWORD **)(v2 + 16);
                    else
                      v120 = (_QWORD *)(v2 + 16);
                    v101 = ((*v120 >> 2) + (*v120 << 6) + v120[1] + 2654435769) ^ *v120;
                    *(_QWORD *)(v2 + 40) = v101;
                  }
                  v102 = *((_QWORD *)v99 + 4);
                  if (v102)
                  {
                    v103 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
                    v103.i16[0] = vaddlv_u8(v103);
                    v104 = v103.u32[0];
                    if (v103.u32[0] > 1uLL)
                    {
                      k = v101;
                      if (v101 >= v102)
                        k = v101 % v102;
                    }
                    else
                    {
                      k = (v102 - 1) & v101;
                    }
                    v105 = *(_QWORD **)(*v100 + 8 * k);
                    if (v105)
                    {
                      v106 = (_QWORD *)*v105;
                      if (*v105)
                      {
                        do
                        {
                          v107 = v106[1];
                          if (v107 == v101)
                          {
                            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v99 + 56), (uint64_t)(v106 + 2), v2 + 16))
                            {
                              goto LABEL_273;
                            }
                          }
                          else
                          {
                            if (v104 > 1)
                            {
                              if (v107 >= v102)
                                v107 %= v102;
                            }
                            else
                            {
                              v107 &= v102 - 1;
                            }
                            if (v107 != k)
                              break;
                          }
                          v106 = (_QWORD *)*v106;
                        }
                        while (v106);
                      }
                    }
                  }
                  v108 = operator new(0x38uLL);
                  *v108 = 0;
                  v108[1] = v101;
                  v109 = *(_OWORD *)(v2 + 16);
                  v110 = *(_OWORD *)(v2 + 32);
                  v108[6] = *(_QWORD *)(v2 + 48);
                  *((_OWORD *)v108 + 1) = v109;
                  *((_OWORD *)v108 + 2) = v110;
                  v111 = (float)(unint64_t)(*((_QWORD *)v99 + 6) + 1);
                  v112 = *((float *)v99 + 14);
                  if (!v102 || (float)(v112 * (float)v102) < v111)
                  {
                    v113 = (v102 & (v102 - 1)) != 0;
                    if (v102 < 3)
                      v113 = 1;
                    v114 = v113 | (2 * v102);
                    v115 = vcvtps_u32_f32(v111 / v112);
                    if (v114 <= v115)
                      v116 = v115;
                    else
                      v116 = v114;
                    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)v100, v116);
                    v102 = *((_QWORD *)v99 + 4);
                    if ((v102 & (v102 - 1)) != 0)
                    {
                      if (v101 >= v102)
                        k = v101 % v102;
                      else
                        k = v101;
                    }
                    else
                    {
                      k = (v102 - 1) & v101;
                    }
                  }
                  v117 = *v100;
                  v118 = *(_QWORD **)(*v100 + 8 * k);
                  if (v118)
                  {
                    *v108 = *v118;
                  }
                  else
                  {
                    *v108 = *v248;
                    *v248 = v108;
                    *(_QWORD *)(v117 + 8 * k) = v248;
                    if (!*v108)
                      goto LABEL_272;
                    v119 = *(_QWORD *)(*v108 + 8);
                    if ((v102 & (v102 - 1)) != 0)
                    {
                      if (v119 >= v102)
                        v119 %= v102;
                    }
                    else
                    {
                      v119 &= v102 - 1;
                    }
                    v118 = (_QWORD *)(*v100 + 8 * v119);
                  }
                  *v118 = v108;
LABEL_272:
                  ++*((_QWORD *)v99 + 6);
LABEL_273:
                  v2 = *(_QWORD *)v2;
                }
                while (v2);
              }
              v263.n128_u8[0] = 1;
              k = v238;
              v121 = (float)(unint64_t)(*(_QWORD *)(v238 + 48) + 1);
              v122 = *(float *)(v238 + 56);
              v123 = v245;
              v124 = (int8x8_t)v246;
              if (!v246 || (float)(v122 * (float)v246) < v121)
              {
                v125 = (v246 & (v246 - 1)) != 0;
                if (v246 < 3)
                  v125 = 1;
                v126 = v125 | (2 * v246);
                v127 = vcvtps_u32_f32(v121 / v122);
                if (v126 <= v127)
                  v128 = (int8x8_t)v127;
                else
                  v128 = (int8x8_t)v126;
                if (*(_QWORD *)&v128 == 1)
                {
                  v128 = (int8x8_t)2;
                  goto LABEL_289;
                }
                if ((*(_QWORD *)&v128 & (*(_QWORD *)&v128 - 1)) != 0)
                {
                  v123 = v241;
                  v128 = (int8x8_t)std::__next_prime(*(_QWORD *)&v128);
                }
                else
                {
LABEL_289:
                  v123 = v241;
                }
                v124 = *(int8x8_t *)(v238 + 32);
                if (*(_QWORD *)&v128 <= *(_QWORD *)&v124)
                {
                  if (*(_QWORD *)&v128 < *(_QWORD *)&v124)
                  {
                    v135 = vcvtps_u32_f32((float)*(unint64_t *)(v238 + 48) / *(float *)(v238 + 56));
                    if (*(_QWORD *)&v124 < 3uLL
                      || (v136 = (uint8x8_t)vcnt_s8(v124), v136.i16[0] = vaddlv_u8(v136), v136.u32[0] > 1uLL))
                    {
                      v135 = std::__next_prime(v135);
                    }
                    else
                    {
                      v137 = 1 << -(char)__clz(v135 - 1);
                      if (v135 >= 2)
                        v135 = v137;
                    }
                    if (*(_QWORD *)&v128 <= v135)
                      v128 = (int8x8_t)v135;
                    if (*(_QWORD *)&v128 >= *(_QWORD *)&v124)
                    {
                      v124 = *(int8x8_t *)(v238 + 32);
                    }
                    else
                    {
                      if (v128)
                        goto LABEL_292;
                      v154 = *(void **)(v238 + 24);
                      *(_QWORD *)(v238 + 24) = 0;
                      if (v154)
                        operator delete(v154);
                      v124 = 0;
                      *(_QWORD *)(v238 + 32) = 0;
                    }
                  }
                }
                else
                {
LABEL_292:
                  if (*(_QWORD *)&v128 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v129 = operator new(8 * *(_QWORD *)&v128);
                  v130 = *(void **)(v238 + 24);
                  *(_QWORD *)(v238 + 24) = v129;
                  if (v130)
                    operator delete(v130);
                  v131 = 0;
                  *(int8x8_t *)(v238 + 32) = v128;
                  do
                    *(_QWORD *)(*(_QWORD *)(v238 + 24) + 8 * v131++) = 0;
                  while (*(_QWORD *)&v128 != v131);
                  v132 = (_QWORD *)*v243;
                  if (*v243)
                  {
                    v133 = v132[1];
                    v134 = (uint8x8_t)vcnt_s8(v128);
                    v134.i16[0] = vaddlv_u8(v134);
                    if (v134.u32[0] > 1uLL)
                    {
                      if (v133 >= *(_QWORD *)&v128)
                        v133 %= *(_QWORD *)&v128;
                    }
                    else
                    {
                      v133 &= *(_QWORD *)&v128 - 1;
                    }
                    *(_QWORD *)(*(_QWORD *)(v238 + 24) + 8 * v133) = v243;
                    v148 = (_QWORD *)*v132;
                    if (*v132)
                    {
                      do
                      {
                        v149 = v148[1];
                        if (v134.u32[0] > 1uLL)
                        {
                          if (v149 >= *(_QWORD *)&v128)
                            v149 %= *(_QWORD *)&v128;
                        }
                        else
                        {
                          v149 &= *(_QWORD *)&v128 - 1;
                        }
                        if (v149 != v133)
                        {
                          v150 = *(_QWORD *)(v238 + 24);
                          if (!*(_QWORD *)(v150 + 8 * v149))
                          {
                            *(_QWORD *)(v150 + 8 * v149) = v132;
                            goto LABEL_325;
                          }
                          *v132 = *v148;
                          *v148 = **(_QWORD **)(*(_QWORD *)(v238 + 24) + 8 * v149);
                          **(_QWORD **)(*(_QWORD *)(v238 + 24) + 8 * v149) = v148;
                          v148 = v132;
                        }
                        v149 = v133;
LABEL_325:
                        v132 = v148;
                        v148 = (_QWORD *)*v148;
                        v133 = v149;
                      }
                      while (v148);
                    }
                  }
                  v124 = v128;
                }
                if ((*(_QWORD *)&v124 & (*(_QWORD *)&v124 - 1)) != 0)
                {
                  if (v123 >= *(_QWORD *)&v124)
                    v123 %= *(_QWORD *)&v124;
                }
                else
                {
                  v123 &= *(_QWORD *)&v124 - 1;
                }
              }
              v151 = *(unint64_t **)(*(_QWORD *)(v238 + 24) + 8 * v123);
              v152 = v262.n128_u64[0];
              v78 = v244;
              if (v151)
              {
                *(_QWORD *)v262.n128_u64[0] = *v151;
LABEL_341:
                *v151 = v152;
                goto LABEL_342;
              }
              *(_QWORD *)v262.n128_u64[0] = *(_QWORD *)(v238 + 40);
              *(_QWORD *)(v238 + 40) = v152;
              *(_QWORD *)(*(_QWORD *)(v238 + 24) + 8 * v123) = v243;
              if (*(_QWORD *)v152)
              {
                v153 = *(_QWORD *)(*(_QWORD *)v152 + 8);
                if ((*(_QWORD *)&v124 & (*(_QWORD *)&v124 - 1)) != 0)
                {
                  if (v153 >= *(_QWORD *)&v124)
                    v153 %= *(_QWORD *)&v124;
                }
                else
                {
                  v153 &= *(_QWORD *)&v124 - 1;
                }
                v151 = (unint64_t *)(*(_QWORD *)(v238 + 24) + 8 * v153);
                goto LABEL_341;
              }
LABEL_342:
              v262.n128_u64[0] = 0;
              ++*(_QWORD *)(v238 + 48);
              std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_343:
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__n);
LABEL_344:
              v78 = (_QWORD *)*v78;
            }
            while (v78);
          }
          v156 = (_QWORD *)(k + 40);
          v155 = *(_QWORD **)(k + 40);
          if (!v155)
            goto LABEL_483;
          while (1)
          {
            if (__p[1])
            {
              v157 = v155[2];
              v158 = 0x9DDFEA08EB382D69 * (((8 * v157) + 8) ^ HIDWORD(v157));
              v159 = 0x9DDFEA08EB382D69 * (HIDWORD(v157) ^ (v158 >> 47) ^ v158);
              v160 = 0x9DDFEA08EB382D69 * (v159 ^ (v159 >> 47));
              v161 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v161.i16[0] = vaddlv_u8(v161);
              if (v161.u32[0] > 1uLL)
              {
                v162 = v160;
                if ((void *)v160 >= __p[1])
                  v162 = v160 % (unint64_t)__p[1];
              }
              else
              {
                v162 = v160 & ((unint64_t)__p[1] - 1);
              }
              v163 = (_QWORD *)*((_QWORD *)__p[0] + v162);
              if (v163)
              {
                for (ii = (_QWORD *)*v163; ii; ii = (_QWORD *)*ii)
                {
                  v165 = ii[1];
                  if (v165 == v160)
                  {
                    if (ii[2] == v157)
                    {
                      v176 = (_QWORD *)*v155;
                      goto LABEL_399;
                    }
                  }
                  else
                  {
                    if (v161.u32[0] > 1uLL)
                    {
                      if ((void *)v165 >= __p[1])
                        v165 %= (unint64_t)__p[1];
                    }
                    else
                    {
                      v165 &= (unint64_t)__p[1] - 1;
                    }
                    if (v165 != v162)
                      break;
                  }
                }
              }
            }
            v166 = *(int8x8_t *)(k + 32);
            v167 = v155[1];
            v168 = (uint8x8_t)vcnt_s8(v166);
            v168.i16[0] = vaddlv_u8(v168);
            if (v168.u32[0] > 1uLL)
            {
              if (v167 >= *(_QWORD *)&v166)
                v167 %= *(_QWORD *)&v166;
            }
            else
            {
              v167 &= *(_QWORD *)&v166 - 1;
            }
            v176 = (_QWORD *)*v155;
            v169 = *(_QWORD *)(k + 24);
            v170 = *(_QWORD **)(v169 + 8 * v167);
            do
            {
              v171 = v170;
              v170 = (_QWORD *)*v170;
            }
            while (v170 != v155);
            if (v171 != v156)
            {
              v172 = v171[1];
              if (v168.u32[0] > 1uLL)
              {
                if (v172 >= *(_QWORD *)&v166)
                  v172 %= *(_QWORD *)&v166;
              }
              else
              {
                v172 &= *(_QWORD *)&v166 - 1;
              }
              v173 = (_QWORD *)*v155;
              if (v172 == v167)
                goto LABEL_391;
            }
            if (!v176)
              break;
            v174 = v176[1];
            if (v168.u32[0] > 1uLL)
            {
              if (v174 >= *(_QWORD *)&v166)
                v174 %= *(_QWORD *)&v166;
            }
            else
            {
              v174 &= *(_QWORD *)&v166 - 1;
            }
            v173 = (_QWORD *)*v155;
            if (v174 != v167)
              break;
LABEL_392:
            v175 = v173[1];
            if (v168.u32[0] > 1uLL)
            {
              if (v175 >= *(_QWORD *)&v166)
                v175 %= *(_QWORD *)&v166;
            }
            else
            {
              v175 &= *(_QWORD *)&v166 - 1;
            }
            if (v175 != v167)
            {
              *(_QWORD *)(*(_QWORD *)(k + 24) + 8 * v175) = v171;
              v173 = (_QWORD *)*v155;
            }
LABEL_398:
            *v171 = v173;
            *v155 = 0;
            --*(_QWORD *)(k + 48);
            v262.n128_u64[0] = (unint64_t)v155;
            v262.n128_u64[1] = k + 40;
            v263.n128_u8[0] = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_399:
            v155 = v176;
            if (!v176)
            {
              v177 = (_QWORD *)*v156;
              if (v177)
              {
                v178 = 0;
                v249 = 0;
                v179 = 0;
                v247 = 0;
                v180 = 0;
                v250 = 0;
                do
                {
                  if (v250)
                  {
                    if (!v180)
                      goto LABEL_409;
                  }
                  else
                  {
                    v180 = *(_QWORD **)&v239[35].__m_.__opaque[48];
                    if (!v180)
                    {
LABEL_408:
                      v250 = 1;
                      goto LABEL_409;
                    }
                    while (*(_DWORD *)(v180[6] + 256) != 1)
                    {
                      v180 = (_QWORD *)*v180;
                      if (!v180)
                        goto LABEL_408;
                    }
                    v250 = 1;
                  }
                  v181 = v180[6];
                  if (*(_DWORD *)(v181 + 256) != 1)
                    std::__throw_bad_variant_access[abi:ne180100]();
                  v182 = v180;
LABEL_428:
                  if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v182 + 2)))
                  {
                    v183 = 0;
                    v185 = *(__n128 *)(v181 + 176);
                    v184 = *(__n128 *)(v181 + 192);
                    v186 = *(float32x4_t *)(v181 + 32);
                    v187 = *(float32x4_t *)(v181 + 48);
                    v188 = *(float32x4_t *)(v181 + 64);
                    v189 = *(float32x4_t *)(v181 + 80);
                    v190 = *(__n128 *)(v181 + 144);
                    v191 = *(__n128 *)(v181 + 160);
                    v192 = v177[2];
                    v258 = *(__n128 *)(v181 + 128);
                    v259 = v190;
                    v260 = v191;
                    v261 = v185;
                    do
                    {
                      *(float32x4_t *)((char *)&v262 + v183) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v183))), v187, (float32x2_t)v258.n128_u64[v183 / 8], 1), v188, *(float32x4_t *)((char *)&v258 + v183), 2), v189, *(float32x4_t *)((char *)&v258 + v183), 3);
                      v183 += 16;
                    }
                    while (v183 != 64);
                    v262.n128_u64[0] = MEMORY[0x22E29DB88](v192, v184, v262, v263, v264, v265);
                    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)(v177 + 3), (uint64_t)(v182 + 2), (_OWORD *)v182 + 1, &v262);
                  }
                  while (1)
                  {
                    v182 = (_QWORD *)*v182;
                    if (!v182)
                      break;
                    v181 = v182[6];
                    if (*(_DWORD *)(v181 + 256) == 1)
                      goto LABEL_428;
                  }
LABEL_409:
                  if (v249)
                  {
                    if (!v179)
                      goto LABEL_416;
                  }
                  else
                  {
                    v179 = *(uint64_t **)v239[37].__m_.__opaque;
                    if (!v179)
                    {
LABEL_415:
                      v249 = 1;
                      goto LABEL_416;
                    }
                    while (*((_DWORD *)v179 + 76) != 1)
                    {
                      v179 = (uint64_t *)*v179;
                      if (!v179)
                        goto LABEL_415;
                    }
                    v249 = 1;
                  }
                  v193 = v177 + 3;
                  v194 = v179;
LABEL_437:
                  v195 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v194 + 2));
                  if (v195)
                  {
                    MEMORY[0x22E29DBAC](v177[2], v195[6]);
                    v196 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v194 + 2));
                    if (v196)
                    {
                      v197 = (int8x8_t)v177[4];
                      v198 = v196[1];
                      v199 = (uint8x8_t)vcnt_s8(v197);
                      v199.i16[0] = vaddlv_u8(v199);
                      if (v199.u32[0] > 1uLL)
                      {
                        if (v198 >= *(_QWORD *)&v197)
                          v198 %= *(_QWORD *)&v197;
                      }
                      else
                      {
                        v198 &= *(_QWORD *)&v197 - 1;
                      }
                      v200 = *v196;
                      v201 = *(uint64_t **)(*v193 + 8 * v198);
                      do
                      {
                        v202 = v201;
                        v201 = (uint64_t *)*v201;
                      }
                      while (v201 != v196);
                      if (v202 == v177 + 5)
                        goto LABEL_456;
                      v203 = v202[1];
                      if (v199.u32[0] > 1uLL)
                      {
                        if (v203 >= *(_QWORD *)&v197)
                          v203 %= *(_QWORD *)&v197;
                      }
                      else
                      {
                        v203 &= *(_QWORD *)&v197 - 1;
                      }
                      if (v203 == v198)
                      {
LABEL_458:
                        if (v200)
                        {
                          v204 = *(_QWORD *)(v200 + 8);
                          goto LABEL_460;
                        }
                      }
                      else
                      {
LABEL_456:
                        if (!v200)
                          goto LABEL_457;
                        v204 = *(_QWORD *)(v200 + 8);
                        if (v199.u32[0] > 1uLL)
                        {
                          v205 = *(_QWORD *)(v200 + 8);
                          if (v204 >= *(_QWORD *)&v197)
                            v205 = v204 % *(_QWORD *)&v197;
                        }
                        else
                        {
                          v205 = v204 & (*(_QWORD *)&v197 - 1);
                        }
                        if (v205 != v198)
                        {
LABEL_457:
                          *(_QWORD *)(*v193 + 8 * v198) = 0;
                          v200 = *v196;
                          goto LABEL_458;
                        }
LABEL_460:
                        if (v199.u32[0] > 1uLL)
                        {
                          if (v204 >= *(_QWORD *)&v197)
                            v204 %= *(_QWORD *)&v197;
                        }
                        else
                        {
                          v204 &= *(_QWORD *)&v197 - 1;
                        }
                        if (v204 != v198)
                        {
                          *(_QWORD *)(*v193 + 8 * v204) = v202;
                          v200 = *v196;
                        }
                      }
                      *v202 = v200;
                      *v196 = 0;
                      --v177[6];
                      operator delete(v196);
                    }
                  }
                  while (1)
                  {
                    v194 = (uint64_t *)*v194;
                    if (!v194)
                      break;
                    if (*((_DWORD *)v194 + 76) == 1)
                      goto LABEL_437;
                  }
LABEL_416:
                  if (v247)
                  {
                    if (v178)
                      goto LABEL_471;
                  }
                  else
                  {
                    v178 = *(_QWORD **)&v239[36].__m_.__opaque[24];
                    if (v178)
                    {
                      while (*(_DWORD *)(v178[6] + 256) != 1)
                      {
                        v178 = (_QWORD *)*v178;
                        if (!v178)
                          goto LABEL_422;
                      }
                      v247 = 1;
LABEL_471:
                      v206 = v178[6];
                      if (*(_DWORD *)(v206 + 256) != 1)
                        std::__throw_bad_variant_access[abi:ne180100]();
                      v207 = v178;
LABEL_473:
                      v208 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v207 + 2));
                      v209 = 0;
                      if (v208)
                      {
                        v210 = v208[6];
                        v212 = *(__n128 *)(v206 + 176);
                        v211 = *(__n128 *)(v206 + 192);
                        v213 = *(float32x4_t *)(v206 + 32);
                        v214 = *(float32x4_t *)(v206 + 48);
                        v215 = *(float32x4_t *)(v206 + 64);
                        v216 = *(float32x4_t *)(v206 + 80);
                        v217 = *(__n128 *)(v206 + 144);
                        v218 = *(__n128 *)(v206 + 160);
                        v219 = v177[2];
                        v258 = *(__n128 *)(v206 + 128);
                        v259 = v217;
                        v260 = v218;
                        v261 = v212;
                        do
                        {
                          *(float32x4_t *)((char *)&v262 + v209) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v213, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v209))), v214, (float32x2_t)v258.n128_u64[v209 / 8], 1), v215, *(float32x4_t *)((char *)&v258 + v209), 2), v216, *(float32x4_t *)((char *)&v258 + v209), 3);
                          v209 += 16;
                        }
                        while (v209 != 64);
                        MEMORY[0x22E29DBB8](v219, v210, v211, v262, v263, v264, v265);
                      }
                      else
                      {
                        v221 = *(__n128 *)(v206 + 176);
                        v220 = *(__n128 *)(v206 + 192);
                        v222 = *(float32x4_t *)(v206 + 32);
                        v223 = *(float32x4_t *)(v206 + 48);
                        v224 = *(float32x4_t *)(v206 + 64);
                        v225 = *(float32x4_t *)(v206 + 80);
                        v226 = *(__n128 *)(v206 + 144);
                        v227 = *(__n128 *)(v206 + 160);
                        v228 = v177[2];
                        v258 = *(__n128 *)(v206 + 128);
                        v259 = v226;
                        v260 = v227;
                        v261 = v221;
                        do
                        {
                          *(float32x4_t *)((char *)&v262 + v209) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v222, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v209))), v223, (float32x2_t)v258.n128_u64[v209 / 8], 1), v224, *(float32x4_t *)((char *)&v258 + v209), 2), v225, *(float32x4_t *)((char *)&v258 + v209), 3);
                          v209 += 16;
                        }
                        while (v209 != 64);
                        v262.n128_u64[0] = MEMORY[0x22E29DB88](v228, v220, v262, v263, v264, v265);
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)(v177 + 3), (uint64_t)(v207 + 2), (_OWORD *)v207 + 1, &v262);
                      }
                      while (1)
                      {
                        v207 = (_QWORD *)*v207;
                        if (!v207)
                          goto LABEL_423;
                        v206 = v207[6];
                        if (*(_DWORD *)(v206 + 256) == 1)
                          goto LABEL_473;
                      }
                    }
LABEL_422:
                    v247 = 1;
                  }
LABEL_423:
                  v177 = (_QWORD *)*v177;
                }
                while (v177);
              }
LABEL_483:
              std::mutex::unlock(v239);
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
            }
          }
          *(_QWORD *)(v169 + 8 * v167) = 0;
          v173 = (_QWORD *)*v155;
LABEL_391:
          if (!v173)
            goto LABEL_398;
          goto LABEL_392;
        }
        v77 = *(_QWORD *)(*(_QWORD *)k + 8);
        if ((v45 & (v45 - 1)) != 0)
        {
          if (v77 >= v45)
            v77 %= v45;
        }
        else
        {
          v77 &= v45 - 1;
        }
        v76 = (unint64_t *)(*(_QWORD *)(v4 + 24) + 8 * v77);
      }
      *v76 = k;
      goto LABEL_190;
    }
    v56 = 1;
    if (v45 >= 3)
      v56 = (v45 & (v45 - 1)) != 0;
    v57 = v56 | (2 * v45);
    v58 = vcvtps_u32_f32(v54 / v55);
    if (v57 <= v58)
      v59 = (int8x8_t)v58;
    else
      v59 = (int8x8_t)v57;
    if (*(_QWORD *)&v59 == 1)
    {
      v59 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v59 & (*(_QWORD *)&v59 - 1)) != 0)
    {
      v59 = (int8x8_t)std::__next_prime(*(_QWORD *)&v59);
      v45 = *(_QWORD *)(v4 + 32);
    }
    if (*(_QWORD *)&v59 > v45)
      goto LABEL_132;
    if (*(_QWORD *)&v59 < v45)
    {
      v66 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 48) / *(float *)(v4 + 56));
      if (v45 < 3 || (v67 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        v66 = std::__next_prime(v66);
      }
      else
      {
        v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2)
          v66 = v68;
      }
      if (*(_QWORD *)&v59 <= v66)
        v59 = (int8x8_t)v66;
      if (*(_QWORD *)&v59 >= v45)
      {
        v45 = *(_QWORD *)(v4 + 32);
      }
      else
      {
        if (v59)
        {
LABEL_132:
          if (*(_QWORD *)&v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = operator new(8 * *(_QWORD *)&v59);
          v61 = *(void **)(v4 + 24);
          *(_QWORD *)(v4 + 24) = v60;
          if (v61)
            operator delete(v61);
          v62 = 0;
          *(int8x8_t *)(v4 + 32) = v59;
          do
            *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62++) = 0;
          while (*(_QWORD *)&v59 != v62);
          v63 = (_QWORD *)*v53;
          if (*v53)
          {
            v64 = v63[1];
            v65 = (uint8x8_t)vcnt_s8(v59);
            v65.i16[0] = vaddlv_u8(v65);
            if (v65.u32[0] > 1uLL)
            {
              if (v64 >= *(_QWORD *)&v59)
                v64 %= *(_QWORD *)&v59;
            }
            else
            {
              v64 &= *(_QWORD *)&v59 - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v64) = v53;
            v73 = (_QWORD *)*v63;
            if (*v63)
            {
              do
              {
                v74 = v73[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v74 >= *(_QWORD *)&v59)
                    v74 %= *(_QWORD *)&v59;
                }
                else
                {
                  v74 &= *(_QWORD *)&v59 - 1;
                }
                if (v74 != v64)
                {
                  v75 = *(_QWORD *)(v4 + 24);
                  if (!*(_QWORD *)(v75 + 8 * v74))
                  {
                    *(_QWORD *)(v75 + 8 * v74) = v63;
                    goto LABEL_172;
                  }
                  *v63 = *v73;
                  *v73 = **(_QWORD **)(*(_QWORD *)(v4 + 24) + 8 * v74);
                  **(_QWORD **)(*(_QWORD *)(v4 + 24) + 8 * v74) = v73;
                  v73 = v63;
                }
                v74 = v64;
LABEL_172:
                v63 = v73;
                v73 = (_QWORD *)*v73;
                v64 = v74;
              }
              while (v73);
            }
          }
          v45 = (unint64_t)v59;
          goto LABEL_176;
        }
        v229 = *(void **)(v4 + 24);
        *(_QWORD *)(v4 + 24) = 0;
        if (v229)
          operator delete(v229);
        v45 = 0;
        *(_QWORD *)(v4 + 32) = 0;
      }
    }
LABEL_176:
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v44 >= v45)
        v10 = v44 % v45;
      else
        v10 = v44;
    }
    else
    {
      v10 = (v45 - 1) & v44;
    }
    goto LABEL_181;
  }
  if (v45)
  {
    v47 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      v48 = 0x9DDFEA08EB382D69 * v43;
      if (v44 >= v45)
        v48 = v44 % v45;
    }
    else
    {
      v48 = (v45 - 1) & v44;
    }
    v69 = *(_QWORD ***)(*(_QWORD *)(v4 + 24) + 8 * v48);
    if (v69)
    {
      v70 = *v69;
      if (v70)
      {
        v71 = v45 - 1;
        do
        {
          v72 = v70[1];
          if (v72 == v44)
          {
            if (v70[2] == v5)
            {
              v230 = v70[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v230 >= v45)
                  v230 %= v45;
              }
              else
              {
                v230 &= v71;
              }
              v231 = *(_QWORD *)(v4 + 24);
              v232 = *(_QWORD **)(v231 + 8 * v230);
              do
              {
                v233 = v232;
                v232 = (_QWORD *)*v232;
              }
              while (v232 != v70);
              if (v233 == (_QWORD *)(v4 + 40))
                goto LABEL_512;
              v234 = v233[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v234 >= v45)
                  v234 %= v45;
              }
              else
              {
                v234 &= v71;
              }
              if (v234 != v230)
              {
LABEL_512:
                if (!*v70)
                  goto LABEL_513;
                v235 = *(_QWORD *)(*v70 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v235 >= v45)
                    v235 %= v45;
                }
                else
                {
                  v235 &= v71;
                }
                if (v235 != v230)
LABEL_513:
                  *(_QWORD *)(v231 + 8 * v230) = 0;
              }
              v236 = *v70;
              if (*v70)
              {
                v237 = *(_QWORD *)(v236 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v237 >= v45)
                    v237 %= v45;
                }
                else
                {
                  v237 &= v71;
                }
                if (v237 != v230)
                {
                  *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v237) = v233;
                  v236 = *v70;
                }
              }
              *v233 = v236;
              *v70 = 0;
              --*(_QWORD *)(v4 + 48);
              v262.n128_u64[0] = (unint64_t)v70;
              v262.n128_u64[1] = v4 + 40;
              v263.n128_u8[0] = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
            }
          }
          else
          {
            if (v47.u32[0] > 1uLL)
            {
              if (v72 >= v45)
                v72 %= v45;
            }
            else
            {
              v72 &= v71;
            }
            if (v72 != v48)
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
}

void sub_2277A9C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  operator delete(v27);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::VFXCollisionConsumer::~VFXCollisionConsumer(rf::data_flow::consumer::VFXCollisionConsumer *this)
{
  *(_QWORD *)this = &off_24EFD82C8;
  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_24EFD82C8;
  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x22E29DD50);
}

uint64_t std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;

  v5 = a4;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    if (*(_BYTE *)(a2 + 16))
      v27 = *(_QWORD **)a2;
    else
      v27 = (_QWORD *)a2;
    v9 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
    *(_QWORD *)(a2 + 24) = v9;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        while (1)
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v14 + 2), a2))
              return;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
            {
LABEL_19:
              v5 = a4;
              break;
            }
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_19;
        }
      }
    }
  }
  v16 = operator new(0x38uLL);
  *v16 = 0;
  v16[1] = v9;
  v17 = a3[1];
  *((_OWORD *)v16 + 1) = *a3;
  *((_OWORD *)v16 + 2) = v17;
  v16[6] = *v5;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v16 = *v25;
LABEL_40:
    *v25 = v16;
    goto LABEL_41;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    v26 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
}

void sub_2277AA0C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t RFAnchorGetIdentifierPtr(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(v1 + 272);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD8300[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorGetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = &v6;
  v6 = a2;
  v3 = *(unsigned int *)(v2 + 272);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24EFD8330[v3])(&v7, v2 + 16);
}

uint64_t RFAnchorSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = &v6;
  v6 = a2;
  v3 = *(unsigned int *)(v2 + 272);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24EFD8360[v3])(&v7, v2 + 16);
}

uint64_t RFAnchorGetType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[256];
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(_QWORD *)(a1 + 16) + 16);
  if (v5 == 5)
    v1 = 5;
  else
    v1 = 0;
  if (v5 >= 5)
    v2 = v1;
  else
    v2 = v5;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2;
}

uint64_t RFAnchorGetARAnchor(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(v1 + 272);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD83C0[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorCopyDescription(uint64_t a1)
{
  uint64_t DebugDescriptionForAnchor;
  _QWORD v3[36];

  v3[35] = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, *(_QWORD *)(a1 + 16) + 16);
  DebugDescriptionForAnchor = rf::helpers::getDebugDescriptionForAnchor((uint64_t)v3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return DebugDescriptionForAnchor;
}

void sub_2277AA548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorGetTrackable(uint64_t a1)
{
  char v1;
  _BOOL4 v2;
  _BYTE v4[256];
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(_QWORD *)(a1 + 16) + 16);
  v1 = v5;
  v2 = v5 < 6;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2 & (0x34u >> v1);
}

uint64_t RFAnchorGetTracked(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(v1 + 272);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD83F0[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorSetTracked(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = a2;
  v3 = *(unsigned int *)(v2 + 272);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t))off_24EFD8420[v3])(&v6, v2 + 16);
}

__n128 RFAnchorGetTransform(uint64_t a1)
{
  __int128 v1;
  __int128 v3;
  char v4;
  char *v5;
  _BYTE v6[256];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6, *(_QWORD *)(a1 + 16) + 16);
  if (v7 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  *(double *)&v1 = ((double (*)(char **, _BYTE *))off_24EFD8450[v7])(&v5, v6);
  v3 = v1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
  return (__n128)v3;
}

void sub_2277AA730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorSetTransform(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[4];
  _OWORD *v9;

  v5 = *(_QWORD *)(a1 + 16);
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  v6 = *(unsigned int *)(v5 + 272);
  if ((_DWORD)v6 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v9 = v8;
  return ((uint64_t (*)(_OWORD **, uint64_t))off_24EFD8480[v6])(&v9, v5 + 16);
}

uint64_t RFAnchorGetAlignment(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 1)
  {
    v3 = *(_DWORD *)(v1 + 224);
    if (v3 == 1)
      LOBYTE(v2) = 2;
    if (v3 == 2)
      return -1;
    else
      return v2;
  }
  else
  {
    return -1;
  }
}

void RFAnchorSetAlignment(rf *a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)a1 + 2);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    switch(a2)
    {
      case 255:
        rf::realityFusionLogObject(a1);
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v4 = 0;
          _os_log_error_impl(&dword_227777000, v3, OS_LOG_TYPE_ERROR, "RFAnchorSetAlignment: Setting the classification with kREAnchoringAlignmentAny", v4, 2u);
        }

        break;
      case 2:
        *(_DWORD *)(v2 + 224) = 1;
        break;
      case 1:
        *(_DWORD *)(v2 + 224) = 0;
        break;
    }
  }
}

uint64_t RFAnchorGetClassification(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[212];
  int v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, *(_QWORD *)(a1 + 16) + 16);
  if (v5 == 1 && (v4 - 1) <= 4)
    v1 = qword_2277EFE90[v4 - 1];
  else
    v1 = -1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return v1;
}

void RFAnchorSetClassification(rf *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint8_t v5[16];

  v2 = *((_QWORD *)a1 + 2);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    switch(a2)
    {
      case -1:
        rf::realityFusionLogObject(a1);
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_227777000, v3, OS_LOG_TYPE_ERROR, "RFAnchorSetClassification: Setting the classification with kREAnchoringClassificationAny", v5, 2u);
        }

        return;
      case 0:
      case 3:
      case 5:
      case 6:
      case 7:
        return;
      case 1:
        v4 = 1;
        goto LABEL_12;
      case 2:
        v4 = 2;
        goto LABEL_12;
      case 4:
        v4 = 3;
        goto LABEL_12;
      case 8:
        v4 = 4;
        goto LABEL_12;
      default:
        if (a2 != 16)
          return;
        v4 = 5;
LABEL_12:
        *(_DWORD *)(v2 + 228) = v4;
        break;
    }
  }
}

__n128 RFAnchorGetCenter(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  v1 = *(__n128 **)(a1 + 16);
  result.n128_u64[0] = 0;
  if (v1[17].n128_u32[0] == 1)
    return v1[12];
  return result;
}

__n128 RFAnchorSetCenter(uint64_t a1, __n128 result)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    result.n128_u32[3] = 1.0;
    *(_OWORD *)(v2 + 144) = xmmword_2277EE440;
    *(_OWORD *)(v2 + 160) = xmmword_2277EE450;
    *(_OWORD *)(v2 + 176) = xmmword_2277EE460;
    *(__n128 *)(v2 + 192) = result;
  }
  return result;
}

__n128 RFAnchorGetExtent(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  v1 = *(__n128 **)(a1 + 16);
  result.n128_u64[0] = 0;
  if (v1[17].n128_u32[0] == 1)
    return v1[13];
  return result;
}

uint64_t RFAnchorSetExtent(uint64_t result, __n128 a2)
{
  __n128 *v2;

  v2 = *(__n128 **)(result + 16);
  if (v2[17].n128_u32[0] == 1)
    v2[13] = a2;
  return result;
}

uint64_t RFAnchorGetBoundaryPoints()
{
  return 0;
}

CFStringRef RFAnchorCopyReferenceName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const __CFAllocator *v3;
  const char *v4;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 3)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = (const char *)(v1 + 144);
    if (*(char *)(v1 + 167) < 0)
LABEL_6:
      v4 = *(const char **)v4;
  }
  else
  {
    if (v2 != 2)
    {
      v4 = "";
      v3 = 0;
      return CFStringCreateWithCString(v3, v4, 0x8000100u);
    }
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = (const char *)(v1 + 152);
    if (*(char *)(v1 + 175) < 0)
      goto LABEL_6;
  }
  return CFStringCreateWithCString(v3, v4, 0x8000100u);
}

void RFAnchorSetReferenceName(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;
  int v3;
  std::string *v4;
  std::string __str;

  v2 = *(_QWORD *)(a1 + 16);
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  v3 = *(_DWORD *)(v2 + 272);
  if (v3 == 3)
  {
    v4 = (std::string *)(v2 + 144);
  }
  else
  {
    if (v3 != 2)
      goto LABEL_6;
    v4 = (std::string *)(v2 + 152);
  }
  std::string::operator=(v4, &__str);
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2277AAB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef RFAnchorCopyReferenceGroup(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const __CFAllocator *v3;
  const char *v4;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 3)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = (const char *)(v1 + 168);
    if (*(char *)(v1 + 191) < 0)
LABEL_6:
      v4 = *(const char **)v4;
  }
  else
  {
    if (v2 != 2)
    {
      v4 = "";
      v3 = 0;
      return CFStringCreateWithCString(v3, v4, 0x8000100u);
    }
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = (const char *)(v1 + 176);
    if (*(char *)(v1 + 199) < 0)
      goto LABEL_6;
  }
  return CFStringCreateWithCString(v3, v4, 0x8000100u);
}

void RFAnchorSetReferenceGroup(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;
  int v3;
  std::string *v4;
  std::string __str;

  v2 = *(_QWORD *)(a1 + 16);
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  v3 = *(_DWORD *)(v2 + 272);
  if (v3 == 3)
  {
    v4 = (std::string *)(v2 + 168);
  }
  else
  {
    if (v3 != 2)
      goto LABEL_6;
    v4 = (std::string *)(v2 + 176);
  }
  std::string::operator=(v4, &__str);
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2277AAC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorCreateCustom(_OWORD *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v12;
  uuid_t v13;
  __int128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  _OWORD v18[2];
  id v19;
  int v20;
  uuid_t uu;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  _BYTE v26[25];
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v22) = 0;
  *((_QWORD *)&v22 + 1) = 0;
  uuid_clear(uu);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  *(__n128 *)v26 = a5;
  *(_QWORD *)&v26[16] = 16842752;
  v26[24] = 0;
  v27 = 0;
  LOBYTE(v14) = 0;
  *((_QWORD *)&v14 + 1) = 0;
  uuid_clear(v13);
  *(_OWORD *)uu = *a1;
  v22 = v14;
  v17 = v25;
  v18[0] = *(_OWORD *)v26;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)&v26[9];
  *(_OWORD *)v13 = *(_OWORD *)uu;
  v15 = v23;
  v16 = v24;
  v19 = v27;
  v20 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v13, &v12);
  v6 = v12;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);

  return v6;
}

void sub_2277AAD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreatePlane(uint64_t a1, __n128 a2, float32x4_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  __n128 v8;
  int v9;
  float32x4_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v20;
  _BYTE v21[256];
  int v22;
  uuid_t uu;
  char v24;
  uint64_t v25;
  __n128 v26;
  float32x4_t v27;
  __n128 v28;
  __n128 v29;
  int v30;
  int v31;
  char v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __n128 v38;
  _BOOL4 v39;
  int v40;
  void *__p;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = 16842752;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = xmmword_2277EE440;
  v35 = xmmword_2277EE450;
  v8 = a6;
  v8.n128_u32[3] = 1.0;
  v36 = xmmword_2277EE460;
  v37 = v8;
  v38 = a7;
  v9 = 1;
  switch(a1)
  {
    case 1:
      break;
    case 2:
      v9 = 2;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      v9 = 3;
      break;
    case 8:
      v9 = 4;
      break;
    default:
      if (a1 == 16)
        v9 = 5;
      else
LABEL_5:
        v9 = 0;
      break;
  }
  v43 = 0;
  v10 = vmulq_f32(a3, (float32x4_t)xmmword_2277EE450);
  __p = 0;
  v42 = 0;
  v10.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  v11 = v10.f32[0] <= 0.70711;
  if (v10.f32[0] < -0.70711)
    v11 = 0;
  v40 = v9;
  v39 = v11;
  std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>((uint64_t)v21, (__int128 *)uu);
  v22 = 1;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v21, &v20);
  v12 = v20;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v21);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }

  return v12;
}

void sub_2277AAF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a23);
  rf::data_flow::PlaneAnchor::~PlaneAnchor((rf::data_flow::PlaneAnchor *)&a57);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreateImage(char *a1, char *a2, char a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v10;
  uint64_t v16;
  _BYTE v17[256];
  int v18;
  uuid_t uu;
  char v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __int16 v26;
  char v27;
  char v28;
  int v29;
  char v30;
  id v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = 0;
  v27 = 1;
  v28 = a3;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v33, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  v37 = 0u;
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>((uint64_t)v17, (__int128 *)uu);
  v18 = 2;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v17, &v16);
  v10 = v16;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
  if (v36 < 0)
    operator delete(__p);
  if (v34 < 0)
    operator delete(v33);

  return v10;
}

void sub_2277AB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a19);
  rf::data_flow::ImageAnchor::~ImageAnchor(&a53);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreateObject(char *a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v8;
  uint64_t v14;
  _BYTE v15[256];
  int v16;
  uuid_t uu;
  char v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  int v24;
  int v25;
  char v26;
  id v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  unsigned __int8 v32[24];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = 16842752;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v28, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  v32[16] = 0;
  v33 = 0;
  uuid_clear(v32);
  v34 = 0u;
  v35 = 0u;
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>((uint64_t)v15, (__int128 *)uu);
  v16 = 3;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v15, &v14);
  v8 = v14;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
  if (v31 < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28);

  return v8;
}

void sub_2277AB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a19);
  rf::data_flow::ObjectAnchor::~ObjectAnchor(&a53);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreateCamera(rf::helpers *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v13;
  _OWORD v14[6];
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = rf::helpers::kCameraIdentifier(a1);
  v6 = v5[1];
  v20 = *v5;
  v21 = v6;
  v14[0] = v20;
  v14[1] = v6;
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v15 = 16842752;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v14, &v13);
  v7 = v13;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return v7;
}

void sub_2277AB36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreateBody(rf::helpers *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v13;
  _OWORD v14[6];
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = rf::helpers::kBodyIdentifier(a1);
  v6 = v5[1];
  v20 = *v5;
  v21 = v6;
  v14[0] = v20;
  v14[1] = v6;
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v15 = 16842752;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v14, &v13);
  v7 = v13;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return v7;
}

void sub_2277AB430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorCreate(_OWORD *a1, uint64_t a2, uint64_t a3, __n128 a4, float32x4_t a5, __n128 a6, __n128 a7)
{
  uint64_t v10;
  uint64_t v16;
  uuid_t uu;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)uu = 0u;
  v18 = 0u;
  uuid_clear(uu);
  v19 = xmmword_2277EE440;
  v20 = xmmword_2277EE450;
  v21 = xmmword_2277EE460;
  v22 = xmmword_2277EE900;
  *(_QWORD *)&v23 = 16842752;
  BYTE8(v23) = 0;
  *(_QWORD *)&v24 = 0;
  v25 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)uu, &v16);
  v10 = v16;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
  return v10;
}

void sub_2277AB54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::createAnchor(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, __n128 a5, float32x4_t a6, __n128 a7, __n128 a8)
{
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  float32x4_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  float32x4_t v44;
  __n128 v45;
  _BYTE v46[25];
  id obj;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  void *v51[2];
  __int128 v52;
  uuid_t uu;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  float32x4_t v58;
  __n128 v59;
  _BYTE v60[25];
  id v61;
  _BYTE v62[48];
  __int128 v63;
  __int128 v64;
  void *v65[2];
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v54) = 0;
  *((_QWORD *)&v54 + 1) = 0;
  uuid_clear(uu);
  *(_OWORD *)uu = *a2;
  switch(a3)
  {
    case 0:
      v55 = *(_OWORD *)uu;
      v56 = v54;
      v57 = a5;
      v58 = a6;
      v59 = a7;
      *(__n128 *)v60 = a8;
      *(_DWORD *)&v60[16] = 16842752;
      *(_DWORD *)&v60[20] = 0;
      v60[24] = 0;
      v61 = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>(a1, a1, (uint64_t)&v55);

      return;
    case 1:
      v41 = *(_OWORD *)uu;
      v42 = v54;
      v43 = a5;
      v44 = a6;
      v45 = a7;
      *(__n128 *)v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obj = 0;
      *(_OWORD *)v48 = xmmword_2277EE440;
      *(_OWORD *)&v48[16] = xmmword_2277EE450;
      v12 = v35;
      HIDWORD(v12) = 1.0;
      *(_OWORD *)&v48[32] = xmmword_2277EE460;
      v49 = v12;
      v50 = v36;
      v13 = 1;
      switch(a4)
      {
        case 1:
          break;
        case 2:
          v13 = 2;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_25;
        case 4:
          v13 = 3;
          break;
        case 8:
          v13 = 4;
          break;
        default:
          if (a4 == 16)
            v13 = 5;
          else
LABEL_25:
            v13 = 0;
          break;
      }
      v52 = 0uLL;
      v51[1] = 0;
      v28 = vmulq_f32(a6, (float32x4_t)xmmword_2277EE450);
      v28.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
      v29 = v28.f32[0] <= 0.70711;
      if (v28.f32[0] < -0.70711)
        v29 = 0;
      v51[0] = (void *)__PAIR64__(v13, v29);
      if (*(_DWORD *)(a1 + 256) == 1)
      {
        v30 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v30;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        v31 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v31;
        v32 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + 48) = v32;
        objc_storeStrong((id *)(a1 + 112), 0);
        v33 = v49;
        *(_OWORD *)(a1 + 160) = *(_OWORD *)&v48[32];
        *(_OWORD *)(a1 + 176) = v33;
        *(_OWORD *)(a1 + 192) = v50;
        *(void **)(a1 + 208) = v51[0];
        v34 = *(_OWORD *)&v48[16];
        *(_OWORD *)(a1 + 128) = *(_OWORD *)v48;
        *(_OWORD *)(a1 + 144) = v34;
        if (&v41 != (__int128 *)a1)
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)(a1 + 216), (char *)v51[1], v52, (uint64_t)(v52 - (unint64_t)v51[1]) >> 4);
      }
      else
      {
        v59 = v45;
        *(_OWORD *)v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        v55 = v41;
        v56 = v42;
        v57 = v43;
        v58 = v44;
        v61 = 0;
        *(_OWORD *)&v62[32] = *(_OWORD *)&v48[32];
        v63 = v49;
        v64 = v50;
        *(_OWORD *)v62 = *(_OWORD *)v48;
        *(_OWORD *)&v62[16] = *(_OWORD *)&v48[16];
        v65[0] = v51[0];
        v65[1] = 0;
        v66 = 0uLL;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v65[1], v51[1], v52, (uint64_t)(v52 - (unint64_t)v51[1]) >> 4);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(a1, &v55);
        if (v65[1])
        {
          *(void **)&v66 = v65[1];
          operator delete(v65[1]);
        }

      }
      if (v51[1])
      {
        *(void **)&v52 = v51[1];
        operator delete(v51[1]);
      }

      return;
    case 2:
      v41 = *(_OWORD *)uu;
      v42 = v54;
      v43 = a5;
      v44 = a6;
      v45 = a7;
      *(__n128 *)v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obj = 0;
      v48[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v48[8], "");
      std::string::basic_string[abi:ne180100]<0>(&v48[32], "");
      v50 = 0u;
      if (*(_DWORD *)(a1 + 256) == 2)
      {
        v14 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v14;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        v15 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v15;
        v16 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + 48) = v16;
        objc_storeStrong((id *)(a1 + 112), obj);
        *(_BYTE *)(a1 + 128) = v48[0];
        std::string::operator=((std::string *)(a1 + 136), (const std::string *)&v48[8]);
        std::string::operator=((std::string *)(a1 + 160), (const std::string *)&v48[32]);
        *(_OWORD *)(a1 + 192) = v50;
      }
      else
      {
        v59 = v45;
        *(_OWORD *)v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        v55 = v41;
        v56 = v42;
        v57 = v43;
        v58 = v44;
        v61 = obj;
        v62[0] = v48[0];
        if ((v48[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[8], *(const std::string::value_type **)&v48[8], *(std::string::size_type *)&v48[16]);
        }
        else
        {
          *(_OWORD *)&v62[8] = *(_OWORD *)&v48[8];
          *(_QWORD *)&v62[24] = *(_QWORD *)&v48[24];
        }
        if (SBYTE7(v49) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[32], *(const std::string::value_type **)&v48[32], *(std::string::size_type *)&v48[40]);
        }
        else
        {
          *(_OWORD *)&v62[32] = *(_OWORD *)&v48[32];
          *(_QWORD *)&v63 = v49;
        }
        v64 = v50;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(a1, &v55);
        if (SBYTE7(v63) < 0)
          operator delete(*(void **)&v62[32]);
        if ((v62[31] & 0x80000000) != 0)
          operator delete(*(void **)&v62[8]);

      }
      if (SBYTE7(v49) < 0)
        operator delete(*(void **)&v48[32]);
      if ((v48[31] & 0x80000000) != 0)
        operator delete(*(void **)&v48[8]);

      return;
    case 3:
      v41 = *(_OWORD *)uu;
      v42 = v54;
      v43 = a5;
      v44 = a6;
      v45 = a7;
      *(__n128 *)v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obj = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      std::string::basic_string[abi:ne180100]<0>(&v48[24], "");
      LOBYTE(v50) = 0;
      *((_QWORD *)&v50 + 1) = 0;
      uuid_clear((unsigned __int8 *)&v49);
      *(_OWORD *)v51 = 0u;
      v52 = 0u;
      if (*(_DWORD *)(a1 + 256) == 3)
      {
        v17 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v17;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        v18 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v18;
        v19 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + 48) = v19;
        objc_storeStrong((id *)(a1 + 112), obj);
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)v48);
        std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v48[24]);
        v20 = v50;
        *(_OWORD *)(a1 + 176) = v49;
        *(_OWORD *)(a1 + 192) = v20;
        v21 = v52;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)v51;
        *(_OWORD *)(a1 + 224) = v21;
      }
      else
      {
        v59 = v45;
        *(_OWORD *)v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        v55 = v41;
        v56 = v42;
        v57 = v43;
        v58 = v44;
        v61 = obj;
        if ((v48[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v62, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
        }
        else
        {
          *(_OWORD *)v62 = *(_OWORD *)v48;
          *(_QWORD *)&v62[16] = *(_QWORD *)&v48[16];
        }
        if ((v48[47] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[24], *(const std::string::value_type **)&v48[24], *(std::string::size_type *)&v48[32]);
        }
        else
        {
          *(_OWORD *)&v62[24] = *(_OWORD *)&v48[24];
          *(_QWORD *)&v62[40] = *(_QWORD *)&v48[40];
        }
        v63 = v49;
        v64 = v50;
        *(_OWORD *)v65 = *(_OWORD *)v51;
        v66 = v52;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(a1, &v55);
        if ((v62[47] & 0x80000000) != 0)
          operator delete(*(void **)&v62[24]);
        if ((v62[23] & 0x80000000) != 0)
          operator delete(*(void **)v62);

      }
      if ((v48[47] & 0x80000000) != 0)
        operator delete(*(void **)&v48[24]);
      if ((v48[23] & 0x80000000) != 0)
        operator delete(*(void **)v48);

      return;
    case 4:
      v55 = *(_OWORD *)uu;
      v56 = v54;
      v22 = *(unsigned int *)(a1 + 256);
      if ((_DWORD)v22 == -1)
        goto LABEL_20;
      if ((_DWORD)v22 == 4)
      {
        v23 = v54;
        *(_OWORD *)a1 = *(_OWORD *)uu;
        *(_OWORD *)(a1 + 16) = v23;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(_QWORD *)(a1 + 96) = 16842752;
        *(_BYTE *)(a1 + 104) = 0;
        objc_storeStrong((id *)(a1 + 112), 0);
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + 208) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 176) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
      else
      {
        ((void (*)(__int128 *, uint64_t))off_24EFD8390[v22])(&v41, a1);
LABEL_20:
        *(_DWORD *)(a1 + 256) = -1;
        v26 = v56;
        *(_OWORD *)a1 = v55;
        *(_OWORD *)(a1 + 16) = v26;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(_QWORD *)(a1 + 96) = 16842752;
        *(_BYTE *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 176) = 0u;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + 208) = 0u;
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_DWORD *)(a1 + 256) = 4;
      }
      break;
    case 5:
      v55 = *(_OWORD *)uu;
      v56 = v54;
      v24 = *(unsigned int *)(a1 + 256);
      if ((_DWORD)v24 == -1)
        goto LABEL_22;
      if ((_DWORD)v24 == 5)
      {
        v25 = v54;
        *(_OWORD *)a1 = *(_OWORD *)uu;
        *(_OWORD *)(a1 + 16) = v25;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(_QWORD *)(a1 + 96) = 16842752;
        *(_BYTE *)(a1 + 104) = 0;
        objc_storeStrong((id *)(a1 + 112), 0);
        *(_DWORD *)(a1 + 128) = 1065353216;
      }
      else
      {
        ((void (*)(__int128 *, uint64_t))off_24EFD8390[v24])(&v41, a1);
LABEL_22:
        *(_DWORD *)(a1 + 256) = -1;
        v27 = v56;
        *(_OWORD *)a1 = v55;
        *(_OWORD *)(a1 + 16) = v27;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(_QWORD *)(a1 + 96) = 16842752;
        *(_BYTE *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_DWORD *)(a1 + 128) = 1065353216;
        *(_DWORD *)(a1 + 256) = 5;
      }
      break;
    default:
      return;
  }
}

void sub_2277ABDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  void *__p;

  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);

  rf::data_flow::ObjectAnchor::~ObjectAnchor(&a21);
  _Unwind_Resume(a1);
}

void RFAnchorUpdate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __n128 v14;
  int v15;
  float32x4_t v16;
  _BOOL4 v17;
  _OWORD *v24;
  _OWORD v25[4];
  _QWORD v26[2];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v25[0] = a4;
  v25[1] = a5;
  v25[2] = a6;
  v25[3] = a7;
  v11 = *(_QWORD *)(a1 + 16);
  switch(a2)
  {
    case 0:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12)
        goto LABEL_3;
      goto LABEL_10;
    case 1:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 1)
        goto LABEL_10;
      goto LABEL_3;
    case 2:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 2)
        goto LABEL_10;
      goto LABEL_3;
    case 3:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 3)
        goto LABEL_10;
      goto LABEL_3;
    case 4:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 4)
        goto LABEL_10;
      goto LABEL_3;
    case 5:
      v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 5)
      {
LABEL_10:
        v24 = v25;
LABEL_11:
        v26[0] = &v24;
        ((void (*)(_QWORD *, uint64_t))off_24EFD84B0[v12])(v26, v11 + 16);
        if (a2 == 1)
        {
          if (*(_DWORD *)(v11 + 272) != 1)
LABEL_32:
            std::__throw_bad_variant_access[abi:ne180100]();
          v14 = a8;
          v14.n128_u32[3] = 1.0;
          *(_OWORD *)(v11 + 144) = xmmword_2277EE440;
          *(_OWORD *)(v11 + 160) = xmmword_2277EE450;
          *(_OWORD *)(v11 + 176) = xmmword_2277EE460;
          *(__n128 *)(v11 + 192) = v14;
          *(__n128 *)(v11 + 208) = a9;
          v15 = 1;
          switch(a3)
          {
            case 1:
              break;
            case 2:
              v15 = 2;
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_25;
            case 4:
              v15 = 3;
              break;
            case 8:
              v15 = 4;
              break;
            default:
              if (a3 == 16)
                v15 = 5;
              else
LABEL_25:
                v15 = 0;
              break;
          }
          v16 = vmulq_f32(*(float32x4_t *)(v11 + 64), (float32x4_t)xmmword_2277EE450);
          v16.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
          v17 = v16.f32[0] <= 0.70711;
          if (v16.f32[0] < -0.70711)
            v17 = 0;
          *(_DWORD *)(v11 + 224) = v17;
          *(_DWORD *)(v11 + 228) = v15;
        }
      }
      else
      {
LABEL_3:
        rf::helpers::getRFUUIDFromAnchor(v11 + 16, (uint64_t)v26);
        if (v27)
          v13 = (_OWORD *)v26[0];
        else
          v13 = v26;
      }
      return;
    default:
      v12 = *(_DWORD *)(v11 + 272);
      v24 = v25;
      if (v12 == -1)
        goto LABEL_32;
      goto LABEL_11;
  }
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, _BYTE *a2)
{
  if (a2[16])
    return *(_BYTE **)a2;
  else
    return a2;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;

  if (*(_BYTE *)(a2 + 16))
    v2 = *(__n128 **)a2;
  else
    v2 = (__n128 *)a2;
  result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__int128 ****a1, uint64_t a2)
{
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __n128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  v5 = *v3;
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

_BYTE **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(_BYTE **result, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = **result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  v9 = a2[10];
  v10 = a2[11];
  v11 = a2[12];
  v12 = *((_QWORD *)a2 + 26);
  v13 = a2[8];
  v14 = a2[9];
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((_QWORD *)(a1 + 216), *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 4);
  return a1;
}

void sub_2277AC870(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v9;
  }
  v10 = (std::string *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v11 = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  return a1;
}

void sub_2277AC950(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v2);

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 112) = *((id *)a2 + 14);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v9 = a2[8];
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v9;
  }
  v10 = (std::string *)(a1 + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 152);
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = a2[11];
  v13 = a2[12];
  v14 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_2277ACA48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v2);

  _Unwind_Resume(a1);
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = **a1;
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

_QWORD *rf::data_flow::provider::ARKitDataProvider::ARKitDataProvider(_QWORD *a1, id *a2)
{
  NSObject *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  dispatch_group_t v7;
  void *v8;

  *a1 = &off_24EFD84F0;
  a1[1] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[5] = *a2;
  a1[6] = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INITIATED, 0);
  v4 = objc_claimAutoreleasedReturnValue();

  v5 = dispatch_queue_create("RFARServiceDelegate", v4);
  v6 = (void *)a1[4];
  a1[4] = v5;

  v7 = dispatch_group_create();
  v8 = (void *)a1[3];
  a1[3] = v7;

  return a1;
}

void rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider(rf::data_flow::provider::ARKitDataProvider *this)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    v3 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

  objc_msgSend(*((id *)this + 5), "pause");
  objc_msgSend(*((id *)this + 5), "_removeObserver:", *((_QWORD *)this + 6));
  v5 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  v6 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;

}

{
  rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider(this);
  JUMPOUT(0x22E29DD50);
}

void rf::data_flow::provider::ARKitDataProvider::setARSession(rf::data_flow::provider::ARKitDataProvider *this, ARSession *a2)
{
  ARSession *v4;
  id *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  int v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  __int16 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = (id *)((char *)this + 40);
  if (*((ARSession **)this + 5) != v4)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v42 = 0;
    v44 = 0;
    v43 = 0;
    v50 = 0;
    v51 = 0;
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v52 = 1;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v6 = *((_QWORD *)this + 1);
    if (v6)
      rf::Session::consumeInputFromProvider(v6, (uint64_t)&v7);
    rf::data_flow::provider::InputData::~InputData((void **)&v7);
    if (*v5)
      objc_msgSend(*v5, "_removeObserver:", *((_QWORD *)this + 6), v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
    objc_storeStrong((id *)this + 5, a2);
    objc_msgSend(*((id *)this + 5), "_addObserver:", *((_QWORD *)this + 6));
  }

}

void sub_2277ACDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  rf::data_flow::provider::InputData::~InputData(&a9);

  _Unwind_Resume(a1);
}

_QWORD *rf::data_flow::provider::ARKitDataProvider::setSession(uint64_t a1, uint64_t a2)
{
  void *v3;
  RFARSessionObserver *v4;
  void *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(void **)(a1 + 48);
  if (!v3)
  {
    v4 = objc_alloc_init(RFARSessionObserver);
    v5 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v4;

    objc_msgSend(*(id *)(a1 + 48), "setDispatchGroup:", *(_QWORD *)(a1 + 24));
    objc_msgSend(*(id *)(a1 + 48), "setBackgroundComputeQueue:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 40), "_addObserver:", *(_QWORD *)(a1 + 48));
    v3 = *(void **)(a1 + 48);
  }
  v8[0] = &off_24EFD8530;
  v8[1] = a1;
  v9 = v8;
  objc_msgSend(v3, "setCallback:", v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2277ACEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t rf::data_flow::provider::ARKitDataProvider::update(id *this, double a2)
{
  return objc_msgSend(this[6], "updateSession:withTime:", this[5], a2);
}

void std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD8530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD8530;
  a2[1] = v2;
  return result;
}

void std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v2)
    rf::Session::consumeInputFromProvider(v2, a2);
}

uint64_t std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::target_type()
{
}

__int128 *rf::helpers::kCameraIdentifier(rf::helpers *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    byte_2558F9D98 = 0;
    qword_2558F9DA0 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier);
  }
  if (rf::helpers::kCameraIdentifier(void)::once != -1)
    dispatch_once(&rf::helpers::kCameraIdentifier(void)::once, &__block_literal_global_4);
  return &rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier;
}

void sub_2277AD094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZN2rf7helpers17kCameraIdentifierEv_block_invoke()
{
  double result;
  uuid_t uu;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v2) = 0;
  *((_QWORD *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = 1;
  result = *(double *)&v2;
  rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_2558F9D98 = v2;
  return result;
}

__int128 *rf::helpers::kBodyIdentifier(rf::helpers *this)
{
  unsigned __int8 v1;

  {
    byte_2558F9DC8 = 0;
    qword_2558F9DD0 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kBodyIdentifier(void)::_kBodyIdentifier);
  }
  if (rf::helpers::kBodyIdentifier(void)::once != -1)
    dispatch_once(&rf::helpers::kBodyIdentifier(void)::once, &__block_literal_global_1);
  return &rf::helpers::kBodyIdentifier(void)::_kBodyIdentifier;
}

void sub_2277AD1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZN2rf7helpers15kBodyIdentifierEv_block_invoke()
{
  double result;
  uuid_t uu;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v2) = 0;
  *((_QWORD *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = 2;
  result = *(double *)&v2;
  rf::helpers::kBodyIdentifier(void)::_kBodyIdentifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_2558F9DC8 = v2;
  return result;
}

__int128 *rf::helpers::kHeadIdentifier(rf::helpers *this)
{
  unsigned __int8 v1;

  {
    byte_2558F9DF8 = 0;
    qword_2558F9E00 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kHeadIdentifier(void)::_kHeadIdentifier);
  }
  if (rf::helpers::kHeadIdentifier(void)::once != -1)
    dispatch_once(&rf::helpers::kHeadIdentifier(void)::once, &__block_literal_global_2);
  return &rf::helpers::kHeadIdentifier(void)::_kHeadIdentifier;
}

void sub_2277AD2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZN2rf7helpers15kHeadIdentifierEv_block_invoke()
{
  double result;
  uuid_t uu;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v2) = 0;
  *((_QWORD *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = 1;
  result = *(double *)&v2;
  rf::helpers::kHeadIdentifier(void)::_kHeadIdentifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_2558F9DF8 = v2;
  return result;
}

_QWORD *rf::helpers::getMutableCameraAnchor(rf::helpers *a1)
{
  _QWORD *v2;
  __int128 *v4;

  rf::helpers::kCameraIdentifier(a1);
  v4 = &rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier;
  v2 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)a1, (uint64_t)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier, (uint64_t)&std::piecewise_construct, &v4);
  if (*((_DWORD *)v2 + 76))
    std::__throw_bad_variant_access[abi:ne180100]();
  return v2 + 6;
}

_QWORD *rf::helpers::getCameraAnchor(rf::helpers *a1)
{
  _QWORD *v2;

  rf::helpers::kCameraIdentifier(a1);
  v2 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(a1, (uint64_t)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)v2 + 76))
    std::__throw_bad_variant_access[abi:ne180100]();
  return v2 + 6;
}

uint64_t rf::helpers::getBaseAnchorProperties(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers23getBaseAnchorPropertiesERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

uint64_t rf::helpers::getRFUUIDFromAnchor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  v6 = a2;
  v4 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v6;
  return ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers19getRFUUIDFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v7, a1);
}

_QWORD *rf::helpers::getDebugDescriptionForClassification@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, (char *)*(&off_24EFD8700 + *a1));
}

void rf::helpers::getDebugDescriptionForAnchorType(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  const void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a1 + 256))
  {
    case 1:
      v7 = *(id *)(a1 + 112);
      v5 = *(const void **)(a1 + 216);
      v8 = *(_QWORD *)(a1 + 208);
      __p = 0;
      v6 = *(_QWORD *)(a1 + 224);
      v10 = 0;
      v11 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, v5, v6, (v6 - (uint64_t)v5) >> 4);
      if (HIDWORD(v8) < 8)
        std::string::basic_string[abi:ne180100]<0>(a2, off_24EFD8740[SHIDWORD(v8)]);
      if (__p)
      {
        v10 = __p;
        operator delete(__p);
      }

      return;
    case 2:
      v3 = "Image";
      goto LABEL_12;
    case 3:
      v3 = "Object";
      goto LABEL_12;
    case 4:
      v3 = "Face";
      goto LABEL_12;
    case 5:
      v3 = "Body";
      goto LABEL_12;
    default:
      v3 = "Custom";
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(a2, v3);
      return;
  }
}

void sub_2277AD6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  rf::data_flow::PlaneAnchor::~PlaneAnchor((rf::data_flow::PlaneAnchor *)&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::helpers::getDebugDescriptionForAnchor(uint64_t a1)
{
  const UInt8 *p_p;
  CFIndex v3;
  CFStringRef v4;
  uint64_t v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  uint64_t v9;
  CFStringRef v10;
  uint64_t v11;
  void *exception;
  void *v14;
  float v15[6];
  uint64_t v16;
  __int128 v17;
  void *__p;
  CFIndex v19;
  unsigned __int8 v20;
  __int128 v21;
  CFStringRef v22;
  CFStringRef v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  rf::helpers::getDebugDescriptionForAnchorType(a1, &__p);
  if ((v20 & 0x80u) == 0)
    p_p = (const UInt8 *)&__p;
  else
    p_p = (const UInt8 *)__p;
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = v19;
  v4 = CFStringCreateWithBytes(0, p_p, v3, 0x8000100u, 0);
  v23 = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E29DC30](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((char)v20 < 0)
    operator delete(__p);
  v5 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  __p = &v17;
  ((void (*)(_QWORD *__return_ptr, void **, uint64_t))off_24EFD8670[v5])(v24, &__p, a1);
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v24, &__p);
  if ((v20 & 0x80u) == 0)
    v6 = (const UInt8 *)&__p;
  else
    v6 = (const UInt8 *)__p;
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = v19;
  v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  v22 = v8;
  if (!v8)
  {
    v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E29DC30](v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((char)v20 < 0)
    operator delete(__p);
  v9 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v9 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_QWORD *)&v17 = &v16;
  ((void (*)(void **__return_ptr, __int128 *, uint64_t))off_24EFD86A0[v9])(&__p, &v17, a1);
  *(_OWORD *)v15 = v21;
  v17 = 0u;
  v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("<translation=(%f %f %f) rotation=(%0.2f° %0.2f° %0.2f°)>"), v15[0], v15[1], v15[2], (float)((float)(*(float *)&v17 * 180.0) * 0.31831), (float)((float)(*((float *)&v17 + 1) * 180.0) * 0.31831), (float)((float)(*((float *)&v17 + 2) * 180.0) * 0.31831));
  applesauce::CF::make_StringRef((applesauce::CF::StringRef *)&v16, v8, v10, v4);
  v11 = v16;
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v4);
  return v11;
}

void sub_2277AD980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef((const void **)(v26 - 96));
  _Unwind_Resume(a1);
}

void re::`anonymous namespace'::matrixToEulerXYZ<re::Matrix4x4<float>,float>(float *a1, float *a2)
{
  float v4;
  float v5;

  v4 = a1[8];
  if (v4 > 1.0)
    v4 = 1.0;
  if (v4 < -1.0)
    v4 = -1.0;
  a2[1] = asinf(v4);
  if (fabsf(a1[8]) >= 0.9999)
  {
    *a2 = atan2f(a1[6], a1[5]);
    v5 = 0.0;
  }
  else
  {
    *a2 = atan2f(-a1[9], a1[10]);
    v5 = atan2f(-a1[4], *a1);
  }
  a2[2] = v5;
}

applesauce::CF::StringRef *applesauce::CF::make_StringRef@<X0>(applesauce::CF::StringRef *a1@<X8>, ...)
{
  CFStringRef v4;
  applesauce::CF *exception;
  va_list va;

  va_start(va, a1);
  v4 = CFStringCreateWithFormatAndArguments(0, 0, CFSTR("%@: %@ - %@"), va);
  if (!v4)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return applesauce::CF::StringRef::StringRef(a1, v4);
}

void sub_2277ADB20()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2277ADB38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t rf::helpers::getTrackedFromAnchor(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers20getTrackedFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

__n128 rf::helpers::planeCenterAndRotationToCenterTransform@<Q0>(__int128 *a1@<X0>, _OWORD *a2@<X8>, float a3@<S0>)
{
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  float32x4_t v22;

  v5 = vrsqrte_f32((float32x2_t)1065353216);
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v5, v5)));
  v22 = vmulq_n_f32((float32x4_t)xmmword_2277EE450, vmul_f32(v6, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v6, v6))).f32[0]);
  v7 = vmuls_lane_f32(v22.f32[1], *(float32x2_t *)v22.f32, 1);
  v8 = vmuls_lane_f32(v22.f32[2], v22, 2);
  v9 = vmuls_lane_f32(v22.f32[0], *(float32x2_t *)v22.f32, 1);
  v10 = vmuls_lane_f32(v22.f32[0], v22, 2);
  v11 = vmuls_lane_f32(v22.f32[1], v22, 2);
  v12 = __sincosf_stret(a3);
  v13 = vmulq_f32(v22, v22).f32[0];
  v14 = vmuls_lane_f32(v12.__sinval, *(float32x2_t *)v22.f32, 1);
  v15 = vmuls_lane_f32(v12.__sinval, v22, 2);
  v16 = v14 + (float)(v10 * (float)(1.0 - v12.__cosval));
  HIDWORD(v17) = 0;
  *(float *)&v17 = v13 + (float)(v12.__cosval * (float)(1.0 - v13));
  *((float *)&v17 + 1) = v15 + (float)(v9 * (float)(1.0 - v12.__cosval));
  HIDWORD(v19) = 0;
  *((float *)&v17 + 2) = -(float)(v14 - (float)(v10 * (float)(1.0 - v12.__cosval)));
  HIDWORD(v18) = 0;
  *(float *)&v18 = -(float)(v15 - (float)(v9 * (float)(1.0 - v12.__cosval)));
  *((float *)&v18 + 1) = v7 + (float)(v12.__cosval * (float)(1.0 - v7));
  *((float *)&v18 + 2) = (float)(v12.__sinval * v22.f32[0]) + (float)(v11 * (float)(1.0 - v12.__cosval));
  *(float *)&v19 = v16;
  *((float *)&v19 + 1) = -(float)((float)(v12.__sinval * v22.f32[0]) - (float)(v11 * (float)(1.0 - v12.__cosval)));
  *((float *)&v19 + 2) = v8 + (float)(v12.__cosval * (float)(1.0 - v8));
  *a2 = v17;
  a2[1] = v18;
  v20 = *a1;
  HIDWORD(v20) = 1.0;
  a2[2] = v19;
  a2[3] = v20;
  result.n128_u64[0] = v19;
  result.n128_u32[2] = DWORD2(v19);
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  result = *(id *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD **a1, uint64_t a2)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)**a1;
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

void applesauce::CF::construct_error(applesauce::CF *this)
{
  JUMPOUT(0x22E29DC30);
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 99) | *(unsigned __int8 *)(a2 + 128)) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v23;
  _OWORD **v24;
  _QWORD v25[3];

  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a2 + 16))
      v23 = *(_QWORD **)a2;
    else
      v23 = (_QWORD *)a2;
    v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(_QWORD *)(a2 + 24) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_21;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v4 = v7;
    if (v7 >= v8)
      v4 = v7 % v8;
  }
  else
  {
    v4 = (v8 - 1) & v7;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v11)
    goto LABEL_21;
  v12 = (_QWORD *)*v11;
  if (!*v11)
    goto LABEL_21;
  v24 = a4;
  do
  {
    v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2))
        return v12;
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8)
        v13 %= v8;
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4)
      break;
LABEL_19:
    v12 = (_QWORD *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)v25);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v25[0] = *v20;
    *v20 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8)
          v21 %= v8;
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v25[0];
    }
  }
  v12 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v12;
}

void sub_2277AE280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  __int128 v9;
  double result;

  v7 = a1 + 16;
  v8 = operator new(0x140uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  *((_OWORD *)v8 + 5) = xmmword_2277EE440;
  *((_OWORD *)v8 + 6) = xmmword_2277EE450;
  *((_OWORD *)v8 + 7) = xmmword_2277EE460;
  *((_OWORD *)v8 + 8) = xmmword_2277EE900;
  *(_QWORD *)&result = 16842752;
  *((_QWORD *)v8 + 18) = 16842752;
  *((_BYTE *)v8 + 152) = 0;
  *((_QWORD *)v8 + 20) = 0;
  *((_DWORD *)v8 + 76) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2277AE35C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t rf::helpers::getTransformFromAnchor(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers22getTransformFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

double rf::helpers::getTransformFromAnchor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  _OWORD v24[4];
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  REAnchoringComponentGetScaleFactor();
  v23 = v10;
  *(_QWORD *)&v26 = a2;
  *((_QWORD *)&v26 + 1) = a3;
  *(_QWORD *)&v27 = a4;
  v11 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v11 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_QWORD *)&v25[0] = &v26;
  ((void (*)(_OWORD *__return_ptr, _OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers22getTransformFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEERKP11REComponentRKN2re9Matrix4x4IfEERKNS7_27HandAnchorPlacementDefaultsEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v11])(v24, v25, a1);
  v12 = 0;
  *(_QWORD *)&v13 = 0;
  LODWORD(v14) = 0;
  HIDWORD(v14) = v23;
  *((_QWORD *)&v13 + 1) = v23;
  v15 = (float32x4_t)v24[0];
  v16 = (float32x4_t)v24[1];
  v17 = (float32x4_t)v24[2];
  v18 = (float32x4_t)v24[3];
  v25[0] = v23;
  v25[1] = v14;
  v25[2] = v13;
  v25[3] = xmmword_2277EE900;
  do
  {
    *(__int128 *)((char *)&v26 + v12 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v25[v12])), v16, *(float32x2_t *)&v25[v12], 1), v17, (float32x4_t)v25[v12], 2), v18, (float32x4_t)v25[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  result = *(double *)&v26;
  v20 = v27;
  v21 = v28;
  v22 = v29;
  *a5 = v26;
  a5[1] = v20;
  a5[2] = v21;
  a5[3] = v22;
  return result;
}

uint64_t rf::helpers::isRemotelyOwned()
{
  uint64_t result;

  result = REEntityGetComponent();
  if (result)
    return RENetworkComponentIsAuthoritative() ^ 1;
  return result;
}

uint64_t rf::helpers::classificationMatches(int a1, unint64_t a2)
{
  uint64_t result;

  if (a2 == -1)
    return 1;
  switch(a1)
  {
    case 1:
      result = a2 & 1;
      break;
    case 2:
      result = (a2 >> 1) & 1;
      break;
    case 3:
      result = (a2 >> 2) & 1;
      break;
    case 4:
      result = (a2 >> 3) & 1;
      break;
    case 5:
      result = (a2 >> 4) & 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t rf::helpers::getInternalActiveCamera()
{
  uint64_t ComponentsOfClass;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Entity;
  uint64_t Name;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  REPerspectiveCameraComponentGetComponentType();
  ComponentsOfClass = RESceneGetComponentsOfClass();
  v2 = v1;
  RECustomMatrixCameraComponentGetComponentType();
  v3 = RESceneGetComponentsOfClass();
  v5 = v4;
  v6 = 0;
  if (v2)
  {
    while (1)
    {
      Entity = REComponentGetEntity();
      if (REEntityIsActive())
      {
        Name = REEntityGetName();
        if (strlen((const char *)Name) != 15
          || (*(_QWORD *)Name == 0x6C75616665445F5FLL ? (v9 = *(_QWORD *)(Name + 7) == 0x6172656D6143746CLL) : (v9 = 0),
              !v9
           || (RECameraViewDescriptorsComponentGetComponentType(),
               REEntityGetComponentByClass(),
               RECameraViewDescriptorsComponentGetRenderOrder() != 0x80000000)))
        {
          RENetworkComponentGetComponentType();
          if (!REEntityGetComponentByClass() || (RENetworkComponentIsAuthoritative() & 1) != 0)
            return Entity;
        }
      }
      v10 = REEntityGetName();
      if (strlen((const char *)v10) == 15
        && *(_QWORD *)v10 == 0x6C75616665445F5FLL
        && *(_QWORD *)(v10 + 7) == 0x6172656D6143746CLL)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetComponentByClass();
        if (RECameraViewDescriptorsComponentGetRenderOrder() == 0x80000000)
          v6 = Entity;
      }
      ComponentsOfClass += 8;
      if (!--v2)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    if (v5)
    {
      while (1)
      {
        v12 = REComponentGetEntity();
        if (REEntityIsActive())
        {
          v13 = REEntityGetName();
          if (strlen((const char *)v13) != 15
            || (*(_QWORD *)v13 == 0x6C75616665445F5FLL
              ? (v14 = *(_QWORD *)(v13 + 7) == 0x6172656D6143746CLL)
              : (v14 = 0),
                !v14
             || (RECameraViewDescriptorsComponentGetComponentType(),
                 REEntityGetComponentByClass(),
                 RECameraViewDescriptorsComponentGetRenderOrder() != 0x80000000)))
          {
            RENetworkComponentGetComponentType();
            if (!REEntityGetComponentByClass() || (RENetworkComponentIsAuthoritative() & 1) != 0)
              break;
          }
        }
        v15 = REEntityGetName();
        if (strlen((const char *)v15) == 15
          && *(_QWORD *)v15 == 0x6C75616665445F5FLL
          && *(_QWORD *)(v15 + 7) == 0x6172656D6143746CLL)
        {
          RECameraViewDescriptorsComponentGetComponentType();
          REEntityGetComponentByClass();
          if (RECameraViewDescriptorsComponentGetRenderOrder() == 0x80000000)
            v6 = v12;
        }
        v3 += 8;
        if (!--v5)
          return v6;
      }
      return v12;
    }
  }
  return v6;
}

std::string *rf::helpers::getFullPath@<X0>(std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  const char *v6;
  size_t v7;
  std::string::value_type *v9;
  std::string::size_type v10;
  std::string::value_type *v11;
  std::string::size_type v12;

  v11 = a1;
  v12 = a2;
  v9 = a3;
  v10 = a4;
  v6 = (const char *)&str_3_1;
  if (!std::string_view::starts_with[abi:ne180100](&v11, "/", 1uLL)
    && !std::string_view::starts_with[abi:ne180100](&v9, "/", 1uLL))
  {
    v6 = "/";
  }
  v7 = strlen(v6);
  if (std::string_view::starts_with[abi:ne180100](&v11, "reality", 7uLL)
    || std::string_view::starts_with[abi:ne180100](&v11, "usd:", 4uLL))
  {
    return rf::concatStringViews<std::string_view,std::string_view,std::string_view>(v11, v12, v6, v7, v9, v10, a5);
  }
  else
  {
    return rf::concatStringViews<std::string_view>(v9, v10, a5);
  }
}

BOOL std::string_view::starts_with[abi:ne180100](_QWORD *a1, void *__s2, size_t a3)
{
  return a1[1] >= a3 && std::string_view::compare[abi:ne180100](a1, 0, a3, __s2, a3) == 0;
}

std::string *rf::concatStringViews<std::string_view,std::string_view,std::string_view>@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, const std::string::value_type *a5@<X4>, std::string::size_type a6@<X5>, std::string *a7@<X8>)
{
  a7->__r_.__value_.__r.__words[0] = 0;
  a7->__r_.__value_.__l.__size_ = 0;
  a7->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a7, __s, __n);
  std::string::append(a7, a3, a4);
  return std::string::append(a7, a5, a6);
}

void sub_2277AE914(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *rf::concatStringViews<std::string_view>@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::string::append(a3, __s, __n);
}

void sub_2277AE964(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float rf::helpers::rotationThatFitsRect(float a1, double a2, double a3)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  rf::internal *v24;
  rf::internal *v25;
  float v26;
  float v27;
  float32x2_t v28;
  double v29;
  double v30;
  float32x2_t v31;
  double v32;
  double v33;
  void *__p[2];
  char v35;

  v4 = a2;
  v5 = *((float *)&a3 + 1);
  if (((vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a2)).u32[0] & 1) != 0
     || *((float *)&a2 + 1) > *((float *)&a3 + 1))
    && (*(float *)&a2 > *((float *)&a3 + 1) || *((float *)&a2 + 1) > *(float *)&a3))
  {
    v29 = a3;
    v32 = a2;
    rf::getMessage((rf *)"The size is too small.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v35 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v24);
    a3 = v29;
    a2 = v32;
  }
  v6 = 3.1416;
  if (a1 > 3.1416 || a1 < -3.1416)
  {
    v30 = a3;
    v33 = a2;
    rf::getMessage((rf *)"The rotation is invalid.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v35 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v25);
    a3 = v30;
    a2 = v33;
  }
  v7 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a2)));
  if (v7 >= 0.00000011921)
  {
    v8 = *(float *)&a3 / v7;
    if (a1 > 2.35619456)
      goto LABEL_17;
    if (a1 < -2.38761048)
    {
      v6 = -3.1416;
      goto LABEL_17;
    }
    if (a1 <= 0.7854)
    {
      v9 = 0.0;
      if (a1 < -0.7854)
        v9 = -1.0;
      v6 = (float)(v9 * 0.5) * 3.1416;
      if (a1 >= -0.7854)
      {
LABEL_17:
        v28 = *(float32x2_t *)&a3;
        v31 = *(float32x2_t *)&a2;
        v10 = a1 - v6;
        v11 = v5 / v7;
        if (v8 >= 1.0)
        {
          v12 = 0.0;
          if (v11 >= 1.0)
            return a1;
          goto LABEL_35;
        }
        v26 = *(float *)&a3 / v7;
        v13 = acosf(v8);
        v14 = v13;
        if ((vcgt_f32(v28, v31).u8[0] & 1) != 0)
        {
          v15 = acosf(*(float *)&v4 / v7) - v13;
          if (v10 >= 0.0)
          {
            v17 = v15 < v10;
LABEL_30:
            if (v17)
              v12 = v15;
            else
              v12 = v10;
LABEL_33:
            v8 = v26;
LABEL_34:
            if (v11 >= 1.0)
              return v6 + v12;
LABEL_35:
            v27 = v12;
            v18 = v8;
            v19 = acosf(v5 / v7);
            if ((vcgt_f32(v28, v31).i32[1] & 1) != 0)
            {
              v20 = acosf(*((float *)&v4 + 1) / v7) - v11;
              if (v10 >= 0.0)
              {
                v22 = v20 < v10;
LABEL_45:
                if (!v22)
                  v20 = v10;
LABEL_47:
                v21 = v18;
                goto LABEL_48;
              }
              v20 = -v20;
            }
            else
            {
              v20 = 0.0;
              v21 = v18;
              if (v31.f32[0] >= v5)
              {
LABEL_48:
                if (v21 >= 1.0)
                  return v6 + v20;
                v12 = v27;
                if (vabds_f32(v27, v10) >= vabds_f32(v20, v10))
                  return v6 + v20;
                return v6 + v12;
              }
              v20 = (float)(acosf(*(float *)&v4 / v7) - v19) + 1.5708;
              if (v10 < 0.0)
              {
                v20 = -v20;
                if (v10 <= v20)
                  v20 = v10;
                goto LABEL_47;
              }
            }
            v22 = v10 < v20;
            goto LABEL_45;
          }
          v15 = -v15;
        }
        else
        {
          v12 = 0.0;
          v8 = v26;
          if ((vcgt_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1)).u8[0] & 1) == 0)
            goto LABEL_34;
          v15 = (float)(acosf(*((float *)&v4 + 1) / v7) - v14) + 1.5708;
          if (v10 < 0.0)
          {
            v16 = -v15;
            if (v10 <= v16)
              v12 = v10;
            else
              v12 = v16;
            goto LABEL_33;
          }
        }
        v17 = v10 < v15;
        goto LABEL_30;
      }
    }
    else
    {
      v6 = 1.5708;
    }
    a2 = COERCE_DOUBLE(vrev64_s32(*(int32x2_t *)&a2));
    goto LABEL_17;
  }
  return a1;
}

void sub_2277AECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::rayPlaneHitTestInBounds(float32x4_t a1, float32x4_t a2, simd_float4 a3, float32x4_t a4, simd_float4 a5, float32x4_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, simd_float4 a18, float32x4_t a19)
{
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  simd_float4x4 v32;
  simd_float4x4 v33;
  simd_float4x4 v34;

  v19 = vmulq_f32(a4, a2);
  v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
  if (v20.f32[0] <= -0.00000011921
    && (v21 = vmulq_f32(a4, vsubq_f32(a6, a1)),
        v22 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))), v20).f32[0], v22 >= 0.0))
  {
    v29 = v22;
    v30 = vmlaq_n_f32(a1, a2, v22);
    v32.columns[0] = a3;
    v32.columns[1] = (simd_float4)a4;
    v32.columns[2] = a5;
    v32.columns[3] = (simd_float4)a6;
    v33 = __invert_f4(v32);
    v31 = vaddq_f32((float32x4_t)v33.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v33.columns[0], v30.f32[0]), (float32x4_t)v33.columns[1], *(float32x2_t *)v30.f32, 1), (float32x4_t)v33.columns[2], v30, 2));
    v33.columns[0] = a15;
    v33.columns[1] = a16;
    v33.columns[2] = a17;
    v33.columns[3] = a18;
    v34 = __invert_f4(v33);
    v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v34.columns[0], v31.f32[0]), (float32x4_t)v34.columns[1], *(float32x2_t *)v31.f32, 1), (float32x4_t)v34.columns[2], v31, 2), (float32x4_t)v34.columns[3], v31, 3);
    v34.columns[1].i64[0] = 0x3F0000003F000000;
    v34.columns[1].i64[1] = 0x3F0000003F000000;
    v26 = vmulq_f32(a19, (float32x4_t)v34.columns[1]);
    if (v25.f32[0] >= (float)-v26.f32[0] && v25.f32[0] <= v26.f32[0])
    {
      v23 = 0x100000000;
      if (v25.f32[2] >= (float)-v26.f32[2] && v25.f32[2] <= v26.f32[2])
      {
        v24 = LODWORD(v29);
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  return v24 | v23;
}

uint64_t *rf::helpers::getNearestPlaneAnchorConstPtr(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  simd_float4 *v9;
  float32x4_t *v10;
  uint64_t *v11;
  float v12;
  float v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  _OWORD v36[4];
  simd_float4x4 v37;
  simd_float4x4 v38;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  v9 = *(simd_float4 **)(a2 + 16);
  if (!v9)
    return 0;
  v10 = (float32x4_t *)a1;
  v11 = 0;
  v12 = 3.4028e38;
  v13 = 3.4028e38;
  do
  {
    if (v9[19].i32[0] == 1)
    {
      v14 = v10[2].u64[1];
      if (v14 == -1)
      {
        v28 = v10[1];
        if ((v10[2].i8[0] & 2) == 0
          || (a9.i64[0] = v9[6].i64[0],
              a9.i32[2] = v9[6].i32[2],
              v29 = vmulq_f32(a9, vnegq_f32(v28)),
              a9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))), a9.f32[0] >= 0.93969))
        {
          a1 = rf::helpers::rayPlaneHitTestInBounds(*v10, v28, v9[5], (float32x4_t)v9[6], v9[7], (float32x4_t)v9[8], a1, -1, a3, a4, a5, a6, a7, a8, v9[11], v9[12], v9[11], v9[12], (float32x4_t)v9[13]);
          if (HIDWORD(a1) != 0 && v13 > *(float *)&a1)
          {
            v11 = (uint64_t *)&v9[3];
            v13 = *(float *)&a1;
          }
        }
      }
      else
      {
        a1 = rf::helpers::classificationMatches(v9[16].i32[1], v14);
        if ((_DWORD)a1)
        {
          a9 = (float32x4_t)v9[6];
          v15 = vmulq_f32(v10[1], a9);
          v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
          if (v16.f32[0] <= -0.00000011921)
          {
            v17 = (float32x4_t)v9[8];
            v18 = vmulq_f32(a9, vsubq_f32(v17, *v10));
            v19 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))), v16).f32[0];
            if (v19 >= 0.0)
            {
              v35 = v19;
              v20 = 0;
              v21 = (float32x4_t)v9[5];
              v22 = (float32x4_t)v9[7];
              v23 = v9[12];
              v24 = v9[13];
              v25 = v9[14];
              v36[0] = v9[11];
              v36[1] = v23;
              v36[2] = v24;
              v36[3] = v25;
              do
              {
                v37.columns[v20] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(v36[v20])), a9, *(float32x2_t *)&v36[v20], 1), v22, (float32x4_t)v36[v20], 2), v17, (float32x4_t)v36[v20], 3);
                ++v20;
              }
              while (v20 != 4);
              v31 = (float32x4_t)v37.columns[0];
              v32 = (float32x4_t)v37.columns[1];
              v33 = (float32x4_t)v37.columns[3];
              v34 = (float32x4_t)v37.columns[2];
              v38 = __invert_f4(v37);
              v26 = *v10;
              v27 = vmlaq_n_f32(*v10, v10[1], v35);
              v38.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v38.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v38.columns[0], v27.f32[0]), (float32x4_t)v38.columns[1], *(float32x2_t *)v27.f32, 1), (float32x4_t)v38.columns[2], v27, 2));
              v38.columns[2].i64[0] = 0x3F0000003F000000;
              v38.columns[2].i64[1] = 0x3F0000003F000000;
              v38.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v9[15], (float32x4_t)v38.columns[2]);
              v38.columns[0].i32[3] = 0;
              v38.columns[2] = (simd_float4)vnegq_f32((float32x4_t)v38.columns[1]);
              v38.columns[2].i32[3] = 0;
              v38.columns[0] = (simd_float4)vmaxnmq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[2]);
              v38.columns[0].i32[3] = 0;
              v38.columns[1].i32[3] = 0;
              v38.columns[0] = (simd_float4)vminnmq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[1]);
              v26.i32[3] = 1.0;
              v38.columns[0] = (simd_float4)vsubq_f32(vaddq_f32(v33, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v38.columns[0].f32[0]), v32, *(float32x2_t *)v38.columns[0].f32, 1), v34, (float32x4_t)v38.columns[0], 2)), v26);
              a9 = vmulq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[0]);
              a9.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)a9.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL)));
              if (a9.f32[0] < v12)
              {
                v11 = (uint64_t *)&v9[3];
                v13 = v35;
                v12 = a9.f32[0];
              }
            }
          }
        }
      }
    }
    v9 = (simd_float4 *)v9->i64[0];
  }
  while (v9);
  return v11;
}

uint64_t *rf::helpers::getNearestPlaneAnchor@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float32x4_t a10@<Q0>)
{
  uint64_t *result;
  int v12;
  int v13;
  _BYTE v14[272];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = rf::helpers::getNearestPlaneAnchorConstPtr(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  if (result)
  {
    v13 = v12;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v14, (uint64_t)result);
    v15 = v13;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(a9, (uint64_t)v14);
    *(_DWORD *)(a9 + 272) = v15;
    *(_BYTE *)(a9 + 288) = 1;
    return (uint64_t *)std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 288) = 0;
  }
  return result;
}

uint64_t rf::helpers::updateShadowMarker(uint64_t a1, uint64_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  float32x4_t v12;
  _OWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[48];
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (REEntityGetComponent())
  {
    REEntityGetOrAddComponent();
    RETransformComponentGetWorldPosition();
    v12 = v3;
    REEntityGetComponent();
    REAnchoringComponentGetDescriptorBounds();
    v13[0] = vaddq_f32(v12, (float32x4_t)xmmword_2277F0020);
    v13[1] = xmmword_2277F0030;
    v14 = 1;
    v15 = -1;
    v16 = v4.i64[0];
    rf::helpers::getNearestPlaneAnchor((unint64_t)v13, a2, v5, v6, v7, v8, v9, v10, (uint64_t)v17, v4);
    if (v19)
    {
      if (v18 != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      REEntityGetOrAddComponent();
      result = REAnchorShadowMarkerSetPointAndNormal();
    }
    else
    {
      REAnchorShadowMarkerComponentGetComponentType();
      result = REEntityRemoveComponentByClass();
    }
    if (v19)
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
  }
  else
  {
    REAnchorShadowMarkerComponentGetComponentType();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

void sub_2277AF300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a21);
  _Unwind_Resume(exception_object);
}

_QWORD *rf::helpers::tryGetAnchorFromAllAnchors(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((_QWORD *)(a1 + 80), a2);
  result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((_QWORD *)(a1 + 120), a2);
  if (v4)
    return v4 + 6;
  v4 = result;
  if (result)
    return v4 + 6;
  return result;
}

uint64_t rf::helpers::validateAnchorState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AnchorIdentifier;
  _QWORD *AnchorFromAllAnchors;
  char v7;
  char v8;
  uint64_t DescriptorType;
  __int128 *v10;
  unsigned __int8 *v11;
  const unsigned __int8 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const unsigned __int8 *DescriptorAnchorIdentifier;
  unsigned __int8 *v22;
  int v23;
  BOOL v24;
  _OWORD v27[4];
  uuid_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uuid_t uu;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  AnchorIdentifier = REAnchorComponentGetAnchorIdentifier();
  v33 = 0;
  v34 = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = AnchorIdentifier;
  v33 = 1;
  REComponentGetEntity();
  if (REAnchoringComponentGetMode() || REAnchoringComponentGetDescriptorType() == 1)
  {
    AnchorFromAllAnchors = rf::helpers::tryGetAnchorFromAllAnchors(a3, (uint64_t)uu);
    v8 = v7;
    DescriptorType = REAnchoringComponentGetDescriptorType();
    switch((int)DescriptorType)
    {
      case 0:
        v10 = rf::helpers::kCameraIdentifier((rf::helpers *)DescriptorType);
        v11 = uu;
        if (v33)
          v11 = *(unsigned __int8 **)uu;
        if (*((_BYTE *)v10 + 16))
          v12 = *(const unsigned __int8 **)v10;
        else
          v12 = (const unsigned __int8 *)v10;
        LOBYTE(DescriptorType) = uuid_compare(v11, v12) == 0;
        break;
      case 1:
        if ((MEMORY[0x22E29D06C](a1) & 1) != 0)
          goto LABEL_35;
        LOBYTE(DescriptorType) = REAnchorComponentGetAnchoredLocally();
        break;
      case 2:
        if (!v8)
          goto LABEL_35;
        DescriptorAnchorIdentifier = (const unsigned __int8 *)REAnchoringComponentGetDescriptorAnchorIdentifier();
        LOBYTE(v29) = 0;
        *((_QWORD *)&v29 + 1) = 0;
        uuid_clear(v28);
        *(_QWORD *)v28 = DescriptorAnchorIdentifier;
        LOBYTE(v29) = 1;
        if (v33)
          v22 = *(unsigned __int8 **)uu;
        else
          v22 = uu;
        v23 = uuid_compare(v22, DescriptorAnchorIdentifier);
        LOBYTE(DescriptorType) = 0;
        if (!v23)
          LOBYTE(DescriptorType) = rf::helpers::getTrackedFromAnchor((uint64_t)AnchorFromAllAnchors);
        break;
      case 3:
        if (!v8)
          goto LABEL_35;
        LOBYTE(DescriptorType) = rf::helpers::planeAnchorMatches((uint64_t)AnchorFromAllAnchors);
        break;
      case 4:
        if (!v8)
          goto LABEL_35;
        LOBYTE(DescriptorType) = rf::helpers::imageAnchorMatches((uint64_t)AnchorFromAllAnchors, a1, 0);
        break;
      case 5:
        if (!v8)
          goto LABEL_35;
        LOBYTE(DescriptorType) = rf::helpers::objectAnchorMatches((uint64_t)AnchorFromAllAnchors);
        break;
      case 6:
        if (!v8)
          goto LABEL_35;
        v24 = *((_DWORD *)AnchorFromAllAnchors + 64) == 4;
        goto LABEL_29;
      case 7:
        if (v8)
        {
          v24 = *((_DWORD *)AnchorFromAllAnchors + 64) == 5;
LABEL_29:
          LOBYTE(DescriptorType) = v24 && *((_BYTE *)AnchorFromAllAnchors + 99) != 0;
        }
        else
        {
LABEL_35:
          LOBYTE(DescriptorType) = 0;
        }
        break;
      default:
        return DescriptorType & 1;
    }
  }
  else
  {
    REAnchorComponentGetWorldTransform();
    *(_OWORD *)v28 = v13;
    v29 = v14;
    v30 = v15;
    v31 = v16;
    REAnchoringComponentGetWorldTransformOfDescriptorTransform();
    v27[0] = v17;
    v27[1] = v18;
    v27[2] = v19;
    v27[3] = v20;
    LOBYTE(DescriptorType) = re::areAlmostEqual<float>((float *)v28, (float *)v27);
  }
  return DescriptorType & 1;
}

BOOL re::areAlmostEqual<float>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;

  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001))
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001))
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001))
    return 0;
  v6 = a1[3];
  v7 = a2[3];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001))
    return 0;
  v8 = a1[4];
  v9 = a2[4];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001))
    return 0;
  v10 = a1[5];
  v11 = a2[5];
  if (v10 != v11 && vabds_f32(v10, v11) >= (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001))
    return 0;
  v12 = a1[6];
  v13 = a2[6];
  if (v12 != v13 && vabds_f32(v12, v13) >= (float)((float)((float)(fabsf(v12) + fabsf(v13)) + 1.0) * 0.00001))
    return 0;
  v14 = a1[7];
  v15 = a2[7];
  if (v14 != v15 && vabds_f32(v14, v15) >= (float)((float)((float)(fabsf(v14) + fabsf(v15)) + 1.0) * 0.00001))
    return 0;
  v16 = a1[8];
  v17 = a2[8];
  if (v16 != v17 && vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001))
    return 0;
  v18 = a1[9];
  v19 = a2[9];
  if (v18 != v19 && vabds_f32(v18, v19) >= (float)((float)((float)(fabsf(v18) + fabsf(v19)) + 1.0) * 0.00001))
    return 0;
  v20 = a1[10];
  v21 = a2[10];
  if (v20 != v21 && vabds_f32(v20, v21) >= (float)((float)((float)(fabsf(v20) + fabsf(v21)) + 1.0) * 0.00001))
    return 0;
  v22 = a1[11];
  v23 = a2[11];
  if (v22 != v23 && vabds_f32(v22, v23) >= (float)((float)((float)(fabsf(v22) + fabsf(v23)) + 1.0) * 0.00001))
    return 0;
  v24 = a1[12];
  v25 = a2[12];
  if (v24 != v25 && vabds_f32(v24, v25) >= (float)((float)((float)(fabsf(v24) + fabsf(v25)) + 1.0) * 0.00001))
    return 0;
  v26 = a1[13];
  v27 = a2[13];
  if (v26 != v27 && vabds_f32(v26, v27) >= (float)((float)((float)(fabsf(v26) + fabsf(v27)) + 1.0) * 0.00001))
    return 0;
  v28 = a1[14];
  v29 = a2[14];
  if (v28 != v29 && vabds_f32(v28, v29) >= (float)((float)((float)(fabsf(v28) + fabsf(v29)) + 1.0) * 0.00001))
    return 0;
  v30 = a1[15];
  v31 = a2[15];
  return v30 == v31 || vabds_f32(v30, v31) < (float)((float)((float)(fabsf(v30) + fabsf(v31)) + 1.0) * 0.00001);
}

BOOL rf::helpers::planeAnchorMatches(uint64_t a1)
{
  rf::PlacementComponentTypeInfo *Entity;
  _BOOL8 result;
  int DescriptorAlignment;
  unint64_t DescriptorClassification;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity) && REEntityGetCustomComponent())
    return 1;
  if (*(_DWORD *)(a1 + 256) != 1)
    return 0;
  DescriptorAlignment = REAnchoringComponentGetDescriptorAlignment();
  DescriptorClassification = REAnchoringComponentGetDescriptorClassification();
  REAnchoringComponentGetDescriptorBounds();
  if (DescriptorAlignment != 255)
  {
    v7 = *(_DWORD *)(a1 + 208);
    if (v7)
    {
      if (v7 != 1 || (DescriptorAlignment & 2) == 0)
        return 0;
    }
    else if ((DescriptorAlignment & 1) == 0)
    {
      return 0;
    }
  }
  v9 = v6;
  v8 = rf::helpers::classificationMatches(*(_DWORD *)(a1 + 212), DescriptorClassification);
  result = 0;
  if (v8)
  {
    if (*(float *)(a1 + 192) >= *(float *)&v9)
      return *(float *)(a1 + 200) >= *((float *)&v9 + 1);
  }
  return result;
}

uint64_t rf::helpers::imageAnchorMatches(uint64_t a1, uint64_t a2, int a3)
{
  char *DescriptorResourceGroup;
  size_t v6;
  char *DescriptorResourceName;
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  const void **v13;
  void **v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  BOOL v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  rf::internal *v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  int v33;
  std::string *v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 256) != 2)
    return 0;
  if (!REAnchoringComponentGetDescriptorResourceStyle())
  {
    rf::getMessage((rf *)"AnchorManagementConsumer: Image anchoring target should not have kREAnchoringResourceNone", v31);
    rf::internal::logAssert((const char *)v31);
    if (v32 < 0)
      operator delete(v31[0]);
    rf::internal::debugBreakHandler(v27);
    v30 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)__p = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::helpers::imageAnchorMatches(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent *,BOOL)::$_0::operator()(&v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v29;
    else
      v28 = (std::string *)v29.__r_.__value_.__r.__words[0];
    v33 = 136315138;
    v34 = v28;
    _os_log_send_and_compose_impl();
    std::string::~string(&v29);
    _os_crash_msg();
    __break(1u);
  }
  DescriptorResourceGroup = (char *)REAnchoringComponentGetDescriptorResourceGroup();
  v6 = strlen(DescriptorResourceGroup);
  DescriptorResourceName = (char *)REAnchoringComponentGetDescriptorResourceName();
  v8 = strlen(DescriptorResourceName);
  rf::helpers::getFullPath(DescriptorResourceGroup, v6, DescriptorResourceName, v8, (std::string *)__p);
  v9 = *(unsigned __int8 *)(a1 + 159);
  if ((v9 & 0x80u) == 0)
    v10 = (void *)*(unsigned __int8 *)(a1 + 159);
  else
    v10 = *(void **)(a1 + 144);
  v11 = (void *)BYTE7(v36);
  v12 = SBYTE7(v36);
  if (SBYTE7(v36) < 0)
    v11 = __p[1];
  if (v10 == v11)
  {
    v13 = (const void **)(a1 + 136);
    if ((SBYTE7(v36) & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((v9 & 0x80) != 0)
    {
      v23 = memcmp(*v13, v14, *(_QWORD *)(a1 + 144)) == 0;
    }
    else if (*(_BYTE *)(a1 + 159))
    {
      v15 = v9 - 1;
      do
      {
        v17 = *(unsigned __int8 *)v13;
        v13 = (const void **)((char *)v13 + 1);
        v16 = v17;
        v19 = *(unsigned __int8 *)v14;
        v14 = (void **)((char *)v14 + 1);
        v18 = v19;
        v21 = v15-- != 0;
        v22 = v16 == v18;
        v23 = v16 == v18;
      }
      while (v22 && v21);
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  if (*(_BYTE *)(a1 + 99))
  {
    v25 = 1;
  }
  else
  {
    v25 = a3 ^ 1;
    if (!*(_BYTE *)(a1 + 128))
      v25 = 0;
  }
  v24 = v23 & v25;
  if (v12 < 0)
    operator delete(__p[0]);
  return v24;
}

void sub_2277AFD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL rf::helpers::objectAnchorMatches(uint64_t a1)
{
  char *DescriptorResourceGroup;
  size_t v3;
  char *DescriptorResourceName;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  int v9;
  const void **v10;
  std::string *p_p;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL8 v19;
  std::string __p;

  if (*(_DWORD *)(a1 + 256) != 3)
    return 0;
  DescriptorResourceGroup = (char *)REAnchoringComponentGetDescriptorResourceGroup();
  v3 = strlen(DescriptorResourceGroup);
  DescriptorResourceName = (char *)REAnchoringComponentGetDescriptorResourceName();
  v5 = strlen(DescriptorResourceName);
  rf::helpers::getFullPath(DescriptorResourceGroup, v3, DescriptorResourceName, v5, &__p);
  v6 = *(unsigned __int8 *)(a1 + 151);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a1 + 151);
  else
    v7 = *(_QWORD *)(a1 + 136);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v7 == size)
  {
    v10 = (const void **)(a1 + 128);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80) != 0)
    {
      v19 = memcmp(*v10, p_p, *(_QWORD *)(a1 + 136)) == 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 151))
      {
        v19 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v19;
        goto LABEL_25;
      }
      v12 = v6 - 1;
      do
      {
        v14 = *(unsigned __int8 *)v10;
        v10 = (const void **)((char *)v10 + 1);
        v13 = v14;
        v16 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v15 = v16;
        v18 = v12-- != 0;
        v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
    }
    if (v9 < 0)
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
  }
  return v19;
}

uint64_t rf::helpers::cacheAnchorBeforeTravelMode(uint64_t result)
{
  if (result)
  {
    result = REAnchoringComponentGetDescriptorType();
    if ((_DWORD)result == 1)
    {
      REAnchorComponentGetAnchorIdentifier();
      REAnchoringComponentSetDescriptorCachedAnchorIdentifier();
      return REAnchoringComponentInvalidateCachedDescriptorTransform();
    }
  }
  return result;
}

uint64_t rf::helpers::isAnchoringTypeAuthorizedForPeer(uint64_t a1, _QWORD *a2)
{
  int DescriptorType;
  uint64_t result;
  _QWORD *v6;
  rf::internal *v7;
  rf::internal *v8;
  void *__p[2];
  char v10;

  if (!a1)
  {
    rf::getMessage((rf *)"Anchoring component should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v7);
  }
  DescriptorType = REAnchoringComponentGetDescriptorType();
  REComponentGetEntity();
  if (!a1)
  {
    rf::getMessage((rf *)"Entity should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v8);
  }
  if (!a2[3])
    return 1;
  RENetworkComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (!result)
    return result;
  __p[0] = (void *)RENetworkComponentOwnerPeerID();
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)__p);
  if (!result)
    return result;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if ((DescriptorType - 3) < 3)
    return (*((unsigned __int8 *)v6 + 24) >> 1) & 1;
  if (DescriptorType == 2)
    return 1;
  if (DescriptorType == 1)
    return (*((unsigned __int8 *)v6 + 24) >> 1) & 1;
  return 0;
}

void sub_2277B0000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::needAnchoringInClientProcessForEntity(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;

  result = 0;
  if (a2)
  {
    if (*a1)
    {
      REAnchoringComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (result)
      {
        v4 = REAnchoringComponentGetDescriptorType() - 1;
        result = 1;
        switch(v4)
        {
          case 0:
            v5 = a1[1];
            goto LABEL_10;
          case 1:
            return result;
          case 2:
            v5 = a1[2];
            goto LABEL_10;
          case 3:
            v5 = a1[3];
            goto LABEL_10;
          case 4:
            v5 = a1[4];
LABEL_10:
            result = v5 != 0;
            break;
          default:
            result = 0;
            break;
        }
      }
    }
  }
  return result;
}

uint64_t rf::helpers::needAnchoringInServerProcessForEntity(uint64_t result)
{
  if (result)
  {
    REClientAnchorSyncComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      result = REClientAnchorSyncComponentIsAnchored();
      if ((_DWORD)result)
      {
        REAnchoringComponentGetComponentType();
        result = REEntityGetComponentByClass();
        if (result)
          return REAnchoringComponentGetDescriptorType() - 6 < 0xFFFFFFFB;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t rf::helpers::isAnchoringTypeAuthorizedForSelf(uint64_t a1, unint64_t a2)
{
  rf::internal *v4;
  int DescriptorType;
  void *__p[2];
  char v7;

  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return 0;
  }
  else
  {
    rf::getMessage((rf *)"Anchoring component should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v4);
    if ((a2 & 0x8000000000000000) == 0)
      return 0;
  }
  DescriptorType = REAnchoringComponentGetDescriptorType();
  if ((DescriptorType - 3) < 3)
    return (a2 >> 1) & 1;
  if (DescriptorType != 2)
  {
    if (DescriptorType != 1)
      return 0;
    return (a2 >> 1) & 1;
  }
  return 1;
}

void sub_2277B01C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::shouldAnchorEntityInClientProcess(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t ComponentByClass;

  result = rf::helpers::needAnchoringInClientProcessForEntity(a2, a1);
  if ((_DWORD)result)
  {
    REAnchoringComponentGetComponentType();
    ComponentByClass = REEntityGetComponentByClass();
    return rf::helpers::isAnchoringTypeAuthorizedForSelf(ComponentByClass, a3);
  }
  return result;
}

uint64_t rf::helpers::shouldAnchorEntityRequiringClientAnchoring(uint64_t a1, _QWORD *a2)
{
  uint64_t ComponentByClass;
  uint64_t result;

  REClientAnchorSyncComponentGetComponentType();
  REEntityGetComponentByClass();
  REAnchoringComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  result = rf::helpers::isAnchoringTypeAuthorizedForPeer(ComponentByClass, a2);
  if ((_DWORD)result)
    return REClientAnchorSyncComponentIsAnchored();
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType;
  rf::PlacementComponentTypeInfo *Entity;
  float32x4_t v6;
  _OWORD *CoordinateSpaceOfDescriptorTransform;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD v19[4];
  simd_float4x4 v20;
  __int128 v21;
  simd_float4x4 v22;
  simd_float4x4 v23;

  DescriptorType = REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity))
    REEntityGetCustomComponent();
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    v15 = vmulq_laneq_f32(a1[4], v6, 2);
    v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransform = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      v8 = CoordinateSpaceOfDescriptorTransform[1];
      v9 = CoordinateSpaceOfDescriptorTransform[2];
      v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      v23 = __invert_f4(v22);
      v11 = 0;
      v20 = v23;
      do
      {
        *(__int128 *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21))
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
    }
    *a2 = v17;
    a2[1] = v18;
    result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    result = (__n128)a1[4];
    v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  rf::PlacementComponentTypeInfo *Entity;
  _QWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  result = rf::PlacementComponentTypeInfo::instance(Entity);
  if (*result)
    result = (_QWORD *)REEntityGetCustomComponent();
  if (*(_DWORD *)(a1 + 208))
  {
    v6 = *(_OWORD *)(a1 + 48);
    *a2 = *(_OWORD *)(a1 + 32);
    a2[1] = v6;
    v7 = *(_OWORD *)(a1 + 80);
    a2[2] = *(_OWORD *)(a1 + 64);
    a2[3] = v7;
  }
  else
  {
    result = (_QWORD *)REComposeMatrix();
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType;
  rf::PlacementComponentTypeInfo *Entity;
  float32x4_t v6;
  _OWORD *CoordinateSpaceOfDescriptorTransform;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD v19[4];
  simd_float4x4 v20;
  __int128 v21;
  simd_float4x4 v22;
  simd_float4x4 v23;

  DescriptorType = REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity))
    REEntityGetCustomComponent();
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    v15 = vmulq_laneq_f32(a1[4], v6, 2);
    v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransform = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      v8 = CoordinateSpaceOfDescriptorTransform[1];
      v9 = CoordinateSpaceOfDescriptorTransform[2];
      v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      v23 = __invert_f4(v22);
      v11 = 0;
      v20 = v23;
      do
      {
        *(__int128 *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21))
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
    }
    *a2 = v17;
    a2[1] = v18;
    result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    result = (__n128)a1[4];
    v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType;
  rf::PlacementComponentTypeInfo *Entity;
  float32x4_t v6;
  _OWORD *CoordinateSpaceOfDescriptorTransform;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD v19[4];
  simd_float4x4 v20;
  __int128 v21;
  simd_float4x4 v22;
  simd_float4x4 v23;

  DescriptorType = REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity))
    REEntityGetCustomComponent();
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    v15 = vmulq_laneq_f32(a1[4], v6, 2);
    v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransform = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      v8 = CoordinateSpaceOfDescriptorTransform[1];
      v9 = CoordinateSpaceOfDescriptorTransform[2];
      v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      v23 = __invert_f4(v22);
      v11 = 0;
      v20 = v23;
      do
      {
        *(__int128 *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21))
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
    }
    *a2 = v17;
    a2[1] = v18;
    result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    result = (__n128)a1[4];
    v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType;
  rf::PlacementComponentTypeInfo *Entity;
  float32x4_t v6;
  _OWORD *CoordinateSpaceOfDescriptorTransform;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD v19[4];
  simd_float4x4 v20;
  __int128 v21;
  simd_float4x4 v22;
  simd_float4x4 v23;

  DescriptorType = REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity))
    REEntityGetCustomComponent();
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    v15 = vmulq_laneq_f32(a1[4], v6, 2);
    v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransform = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      v8 = CoordinateSpaceOfDescriptorTransform[1];
      v9 = CoordinateSpaceOfDescriptorTransform[2];
      v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      v23 = __invert_f4(v22);
      v11 = 0;
      v20 = v23;
      do
      {
        *(__int128 *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21))
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
    }
    *a2 = v17;
    a2[1] = v18;
    result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    result = (__n128)a1[4];
    v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  rf::PlacementComponentTypeInfo *Entity;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  _OWORD v17[4];

  REAnchoringComponentGetDescriptorType();
  Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity))
    REEntityGetCustomComponent();
  v5 = 0;
  v6 = (float32x4_t)*(unsigned int *)(a1 + 128);
  v8.i64[0] = 0;
  v7.i32[0] = 0;
  v7.i64[1] = 0;
  v7.i32[1] = v6.i32[0];
  v8.i64[1] = v6.u32[0];
  v9 = *(_OWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 80);
  v16[0] = *(_OWORD *)(a1 + 32);
  v16[1] = v9;
  v16[2] = v10;
  v16[3] = v11;
  do
  {
    v17[v5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v16[v5])), v7, *(float32x2_t *)&v16[v5], 1), v8, (float32x4_t)v16[v5], 2), (float32x4_t)xmmword_2277EE900, (float32x4_t)v16[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  result = *(double *)v17;
  v13 = v17[1];
  v14 = v17[2];
  v15 = v17[3];
  *a2 = v17[0];
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  return result;
}

uint64_t std::string_view::compare[abi:ne180100](_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

void rf::helpers::imageAnchorMatches(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent *,BOOL)::$_0::operator()(_QWORD *a1)
{
  rf::getMessage((rf *)"AnchorManagementConsumer: Image anchoring target should not have kREAnchoringResourceNone", a1);
}

uint64_t rf::data_flow::consumer::`anonymous namespace'::AttributesNeededForTheseModes(int a1, int a2)
{
  unsigned __int8 v2;

  if ((a1 - 2) >= 8)
    v2 = 0;
  else
    v2 = 0x200010101090304uLL >> (8 * (a1 - 2));
  switch(a2)
  {
    case 2:
      v2 |= 4u;
      break;
    case 3:
      v2 |= 2u;
      break;
    case 4:
      v2 |= 8u;
      break;
    case 5:
      v2 |= 1u;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;

  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(id *)a2;
  if (v4)
  {
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;

    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void rf::data_flow::consumer::MeshVisualizer::DebugVisMesh::~DebugVisMesh(id *this)
{
  if (*((_BYTE *)this + 168))

  if (*((_BYTE *)this + 136))
  if (*((_BYTE *)this + 104))

  if (*((_BYTE *)this + 72))
}

uint64_t rf::data_flow::consumer::MeshVisualizer::setupMaterials(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t AssetHandle;

  v1 = result;
  v2 = *(_DWORD *)(result + 64);
  if (v2 == 1)
  {
    result = REAssetHandleIsLoaded();
    if (!(_DWORD)result)
      return result;
    AssetHandle = REAssetManagerMaterialMemoryAssetCreate();
    v5 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = AssetHandle;
    if (v5)
      RERelease();
    AssetHandle = 0;
    result = (uint64_t)RESharedPtr<REAsset>::~RESharedPtr(&AssetHandle);
    v4 = 2;
  }
  else
  {
    if (v2)
      return result;
    AssetHandle = REAssetManagerCreateAssetHandle();
    v3 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = AssetHandle;
    if (v3)
      RERelease();
    AssetHandle = 0;
    RESharedPtr<REAsset>::~RESharedPtr(&AssetHandle);
    result = REAssetHandleLoadAsync();
    v4 = 1;
  }
  *(_DWORD *)(v1 + 64) = v4;
  return result;
}

void sub_2277B0D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  RESharedPtr<REAsset>::~RESharedPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::MeshVisualizer::setMaterial(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;

  if (*(_DWORD *)(result + 64) == 2)
  {
    v9 = result;
    result = REPrimitiveRenderSetMeshMaterial();
    if (a4)
      result = REPrimitiveRenderSetMeshMaterialTechniqueMapping();
    if (a5)
      result = REPrimitiveRenderSetMeshMaterialTechniqueMapping();
    *(_QWORD *)(v9 + 72) = a3;
    *(_QWORD *)(v9 + 80) = a2;
    *(_DWORD *)(v9 + 56) = a4;
    *(_DWORD *)(v9 + 60) = a5;
  }
  return result;
}

void rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(rf::data_flow::consumer::MeshVisualizer *this, const rf::data_flow::consumer::Mesh *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *i;
  unint64_t v36;
  _QWORD *v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t **v48;
  uint64_t *j;
  unint64_t v50;
  _QWORD *v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  void **v82;
  _QWORD *v83;
  unint64_t v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  _OWORD *v102;
  unint64_t v103;
  uint64_t v104;
  BOOL v105;
  _OWORD *v106;
  char *v107;
  char *v108;
  char *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  rf::internal *v121;
  rf::internal *v122;
  rf::internal *v123;
  rf::internal *v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  __int128 v144;
  id v145;
  __int128 v146;
  id v147;
  __int128 v148;
  char v149;
  id v150;
  __int128 v151;
  char v152;
  id v153;
  __int128 v154;
  char v155;
  id v156;
  __int128 v157;
  char v158;
  uint64_t v159;
  char *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  float v164;
  __int128 v165;
  __int128 v166;
  float v167;
  void *v168[2];
  char v169;

  v2 = *((_DWORD *)this + 14);
  v3 = *((_DWORD *)this + 15);
  if (!*((_QWORD *)this + 7))
    return;
  v4 = (uint64_t)a2;
  v5 = (uint64_t)this;
    return;
  v143 = 0;
  v145 = 0;
  LOBYTE(v147) = 0;
  v149 = 0;
  LOBYTE(v150) = 0;
  v152 = 0;
  LOBYTE(v153) = 0;
  v155 = 0;
  LOBYTE(v156) = 0;
  v158 = 0;
  LOBYTE(v159) = 1;
  HIDWORD(v159) = *(_DWORD *)(v5 + 88);
  if ((v6 & 0xA) != 0)
  {
    v128 = v5;
    if (*(_QWORD *)(v4 + 200) != 36)
    {
      rf::getMessage((rf *)"Bad index buffer format!", &v165);
      rf::internal::logAssert((const char *)&v165);
      if (SBYTE7(v166) < 0)
        operator delete((void *)v165);
      rf::internal::debugBreakHandler(v121);
    }
    v132 = objc_msgSend(*(id *)(v4 + 192), "contents");
    if ((v6 & 2) != 0)
    {
      if (*(_QWORD *)(v4 + 232) != 45)
      {
        rf::getMessage((rf *)"Bad per face attribute buffer format for classification!", &v165);
        rf::internal::logAssert((const char *)&v165);
        if (SBYTE7(v166) < 0)
          operator delete((void *)v165);
        rf::internal::debugBreakHandler(v123);
      }
      v130 = objc_msgSend(*(id *)(v4 + 224), "contents");
    }
    else
    {
      v130 = 0;
    }
    if (v6 >= 8)
    {
      if (*(_QWORD *)(v4 + 296) != 45)
      {
        rf::getMessage((rf *)"Bad per face attribute buffer format for material!", &v165);
        rf::internal::logAssert((const char *)&v165);
        if (SBYTE7(v166) < 0)
          operator delete((void *)v165);
        rf::internal::debugBreakHandler(v124);
      }
      v129 = objc_msgSend(*(id *)(v4 + 288), "contents");
    }
    else
    {
      v129 = 0;
    }
    if (((v6 & 2) == 0 || *(_BYTE *)(v5 + 304)) && (v6 < 8 || *(_BYTE *)(v5 + 305)))
    {
      v7 = *(_QWORD *)(v4 + 208);
      v127 = 1;
      if (!v7)
      {
LABEL_186:
        LOBYTE(v159) = 0;
        goto LABEL_270;
      }
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 208);
      if (v8 < 3)
        goto LABEL_186;
      v7 = 0;
      v9 = v8 / 3;
      v11 = (_BYTE *)v129;
      v10 = (_BYTE *)v130;
      do
      {
        if ((v6 & 2) != 0
          && ((v12 = *v10, *v10) ? (v13 = *(_QWORD *)(v5 + 280) > v12) : (v13 = 0),
              v13 && ((*(_QWORD *)(*(_QWORD *)(v5 + 272) + ((v12 >> 3) & 0x18)) >> v12) & 1) != 0)
          || v6 >= 8
          && ((v14 = *v11, *v11) ? (v15 = *(_QWORD *)(v5 + 200) > v14) : (v15 = 0),
              v15 && ((*(_QWORD *)(*(_QWORD *)(v5 + 192) + ((v14 >> 3) & 0x18)) >> v14) & 1) != 0))
        {
          v7 += 3;
        }
        ++v11;
        ++v10;
        --v9;
      }
      while (v9);
      v127 = 0;
      if (!v7)
        goto LABEL_186;
    }
    objc_msgSend(*(id *)(v4 + 192), "device");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v145 = (id)objc_msgSend(v16, "newBufferWithLength:options:", 4 * v7, 0);
    *(_QWORD *)&v146 = 36;
    *((_QWORD *)&v146 + 1) = v7;

    v131 = objc_msgSend(v145, "contents");
    v165 = 0u;
    v166 = 0u;
    v167 = 1.0;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v165, (unint64_t)(float)v7);
    v163 = 0u;
    v162 = 0u;
    v164 = 1.0;
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v162, (unint64_t)(float)v7);
    v125 = v7;
    v126 = v4;
    v17 = *(_QWORD *)(v4 + 208);
    if (v17 >= 3)
    {
      v18 = 0;
      v19 = 0;
      v135 = 0;
      v137 = v6 << 48;
      while (1)
      {
        if ((v127 & 1) != 0)
        {
LABEL_49:
          v20 = 0;
LABEL_50:
          v21 = v18;
          if ((v6 & 2) != 0)
            v22 = *(unsigned __int8 *)(v130 + v135);
          else
            v22 = 255;
          if (v6 >= 8)
            v23 = *(unsigned __int8 *)(v129 + v135);
          else
            v23 = 255;
          v24 = *(unsigned int *)(v132 + 4 * (v20 + 3 * v135));
          v25 = v24 + 2654435769;
          if ((v6 & 2) != 0)
            v25 ^= (v25 >> 2) + 2654435769u + (v25 << 6) + v22;
          if (v6 >= 8)
            v26 = (v23 + 2654435769 + (v25 >> 2) + (v25 << 6)) ^ v25;
          else
            v26 = v25;
          v27 = *((_QWORD *)&v165 + 1);
          v28 = v22 << 32;
          v141 = v21;
          if (!*((_QWORD *)&v165 + 1))
          {
            v139 = v19 + 1;
            goto LABEL_103;
          }
          v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v165 + 8));
          v29.i16[0] = vaddlv_u8(v29);
          if (v29.u32[0] > 1uLL)
          {
            v30 = v26;
            if (v26 >= *((_QWORD *)&v165 + 1))
              v30 = v26 % *((_QWORD *)&v165 + 1);
          }
          else
          {
            v30 = (*((_QWORD *)&v165 + 1) + 0x3FFFFFFFFFFFLL) & v26;
          }
          v31 = *(uint64_t ***)(v165 + 8 * v30);
          if (!v31 || (v32 = *v31) == 0)
          {
LABEL_83:
            if (v29.u32[0] > 1uLL)
            {
              v4 = v26;
              if (v26 >= *((_QWORD *)&v165 + 1))
                v4 = v26 % *((_QWORD *)&v165 + 1);
            }
            else
            {
              v4 = (*((_QWORD *)&v165 + 1) + 0x3FFFFFFFFFFFLL) & v26;
            }
            v139 = v19 + 1;
            v34 = *(uint64_t ***)(v165 + 8 * v4);
            if (v34)
            {
              for (i = *v34; i; i = (uint64_t *)*i)
              {
                v36 = i[1];
                if (v36 == v26)
                {
                  if (*((_DWORD *)i + 4) == (_DWORD)v24
                    && *((unsigned __int8 *)i + 22) == (_DWORD)v6
                    && ((v6 & 2) == 0 || *((unsigned __int8 *)i + 20) == v22)
                    && (v6 < 8 || *((unsigned __int8 *)i + 21) == v23))
                  {
                    goto LABEL_126;
                  }
                }
                else
                {
                  if (v29.u32[0] > 1uLL)
                  {
                    if (v36 >= *((_QWORD *)&v165 + 1))
                      v36 %= *((_QWORD *)&v165 + 1);
                  }
                  else
                  {
                    v36 &= *((_QWORD *)&v165 + 1) - 1;
                  }
                  if (v36 != v4)
                    break;
                }
              }
            }
LABEL_103:
            v37 = operator new(0x20uLL);
            *v37 = 0;
            v37[1] = v26;
            v37[2] = v28 | (v23 << 40) | v137 | v24;
            *((_DWORD *)v37 + 6) = v19;
            v38 = (float)(unint64_t)(*((_QWORD *)&v166 + 1) + 1);
            if (!v27 || (float)(v167 * (float)v27) < v38)
            {
              v39 = v27 < 3 || (v27 & (v27 - 1)) != 0;
              v40 = v39 | (2 * v27);
              v41 = vcvtps_u32_f32(v38 / v167);
              if (v40 <= v41)
                v42 = v41;
              else
                v42 = v40;
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v165, v42);
              v27 = *((_QWORD *)&v165 + 1);
              if ((v27 & (v27 - 1)) != 0)
              {
                if (v26 >= *((_QWORD *)&v165 + 1))
                  v4 = v26 % *((_QWORD *)&v165 + 1);
                else
                  v4 = v26;
              }
              else
              {
                v4 = (*((_QWORD *)&v165 + 1) + 0x3FFFFFFFFFFFLL) & v26;
              }
            }
            v43 = v165;
            v44 = *(_QWORD **)(v165 + 8 * v4);
            if (v44)
            {
              *v37 = *v44;
              goto LABEL_124;
            }
            *v37 = v166;
            *(_QWORD *)&v166 = v37;
            *(_QWORD *)(v43 + 8 * v4) = &v166;
            if (*v37)
            {
              v45 = *(_QWORD *)(*v37 + 8);
              if ((v27 & (v27 - 1)) != 0)
              {
                if (v45 >= v27)
                  v45 %= v27;
              }
              else
              {
                v45 &= v27 - 1;
              }
              v44 = (_QWORD *)(v165 + 8 * v45);
LABEL_124:
              *v44 = v37;
            }
            ++*((_QWORD *)&v166 + 1);
LABEL_126:
            v46 = *((_QWORD *)&v162 + 1);
            if (*((_QWORD *)&v162 + 1))
            {
              v47 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v162 + 8));
              v47.i16[0] = vaddlv_u8(v47);
              if (v47.u32[0] > 1uLL)
              {
                v4 = v19;
                if (*((_QWORD *)&v162 + 1) <= (unint64_t)v19)
                  v4 = (unint64_t)v19 % *((_QWORD *)&v162 + 1);
              }
              else
              {
                v4 = (DWORD2(v162) - 1) & v19;
              }
              v48 = *(uint64_t ***)(v162 + 8 * v4);
              if (v48)
              {
                for (j = *v48; j; j = (uint64_t *)*j)
                {
                  v50 = j[1];
                  if (v50 == v19)
                  {
                    if (*((_DWORD *)j + 4) == v19)
                    {
                      v60 = v19;
                      v19 = v139;
                      v21 = v141;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    if (v47.u32[0] > 1uLL)
                    {
                      if (v50 >= *((_QWORD *)&v162 + 1))
                        v50 %= *((_QWORD *)&v162 + 1);
                    }
                    else
                    {
                      v50 &= *((_QWORD *)&v162 + 1) - 1;
                    }
                    if (v50 != v4)
                      break;
                  }
                }
              }
            }
            v51 = operator new(0x20uLL);
            *v51 = 0;
            v51[1] = v19;
            *((_DWORD *)v51 + 4) = v19;
            *(_QWORD *)((char *)v51 + 20) = v28 | (v23 << 40) | v137 | v24;
            v52 = (float)(unint64_t)(*((_QWORD *)&v163 + 1) + 1);
            if (!v46 || (float)(v164 * (float)v46) < v52)
            {
              v53 = (v46 & (v46 - 1)) != 0;
              if (v46 < 3)
                v53 = 1;
              v54 = v53 | (2 * v46);
              v55 = vcvtps_u32_f32(v52 / v164);
              if (v54 <= v55)
                v56 = v55;
              else
                v56 = v54;
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v162, v56);
              v46 = *((_QWORD *)&v162 + 1);
              if ((v46 & (v46 - 1)) != 0)
              {
                if (*((_QWORD *)&v162 + 1) <= (unint64_t)v19)
                  v4 = (unint64_t)v19 % *((_QWORD *)&v162 + 1);
                else
                  v4 = v19;
              }
              else
              {
                v4 = (DWORD2(v162) - 1) & v19;
              }
            }
            v57 = v162;
            v58 = *(_QWORD **)(v162 + 8 * v4);
            if (v58)
            {
              *v51 = *v58;
              v21 = v141;
              goto LABEL_162;
            }
            *v51 = v163;
            *(_QWORD *)&v163 = v51;
            *(_QWORD *)(v57 + 8 * v4) = &v163;
            v21 = v141;
            if (*v51)
            {
              v59 = *(_QWORD *)(*v51 + 8);
              if ((v46 & (v46 - 1)) != 0)
              {
                if (v59 >= v46)
                  v59 %= v46;
              }
              else
              {
                v59 &= v46 - 1;
              }
              v58 = (_QWORD *)(v162 + 8 * v59);
LABEL_162:
              *v58 = v51;
            }
            ++*((_QWORD *)&v163 + 1);
            v60 = v19;
            v19 = v139;
            goto LABEL_164;
          }
          while (1)
          {
            v33 = v32[1];
            if (v33 == v26)
            {
              if (*((_DWORD *)v32 + 4) == (_DWORD)v24
                && *((unsigned __int8 *)v32 + 22) == (_DWORD)v6
                && ((v6 & 2) == 0 || *((unsigned __int8 *)v32 + 20) == v22)
                && (v6 < 8 || *((unsigned __int8 *)v32 + 21) == v23))
              {
                v60 = *((_DWORD *)v32 + 6);
LABEL_164:
                v18 = v21 + 1;
                *(_DWORD *)(v131 + 4 * v21) = v60;
                if (++v20 == 3)
                {
                  v17 = *(_QWORD *)(v126 + 208);
                  v5 = v128;
                  goto LABEL_184;
                }
                goto LABEL_50;
              }
            }
            else
            {
              if (v29.u32[0] > 1uLL)
              {
                if (v33 >= *((_QWORD *)&v165 + 1))
                  v33 %= *((_QWORD *)&v165 + 1);
              }
              else
              {
                v33 &= *((_QWORD *)&v165 + 1) - 1;
              }
              if (v33 != v30)
                goto LABEL_83;
            }
            v32 = (uint64_t *)*v32;
            if (!v32)
              goto LABEL_83;
          }
        }
        if ((v6 & 2) != 0
          && ((v61 = *(unsigned __int8 *)(v130 + v135), *(_BYTE *)(v130 + v135))
            ? (v62 = *(_QWORD *)(v5 + 280) > v61)
            : (v62 = 0),
              v62))
        {
          v63 = *(_QWORD *)(*(_QWORD *)(v5 + 272) + ((v61 >> 3) & 0x18)) & (1 << v61);
          if (v6 < 8 || v63)
          {
            if (v63)
              goto LABEL_49;
            goto LABEL_184;
          }
        }
        else if (v6 < 8)
        {
          goto LABEL_184;
        }
        v64 = *(unsigned __int8 *)(v129 + v135);
        if (*(_BYTE *)(v129 + v135))
          v65 = *(_QWORD *)(v5 + 200) > v64;
        else
          v65 = 0;
        if (v65 && ((*(_QWORD *)(*(_QWORD *)(v5 + 192) + ((v64 >> 3) & 0x18)) >> v64) & 1) != 0)
          goto LABEL_49;
LABEL_184:
        if (++v135 >= v17 / 3)
          goto LABEL_188;
      }
    }
    v19 = 0;
    v18 = 0;
LABEL_188:
    if (v18 != v125)
    {
      rf::getMessage((rf *)"Error writing new index stream!", v168);
      rf::internal::logAssert((const char *)v168);
      if (v169 < 0)
        operator delete(v168[0]);
      rf::internal::debugBreakHandler(v122);
      v5 = v128;
    }
    objc_msgSend(*(id *)(v126 + 192), "device", v125);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = 12 * v19;
    v143 = (id)objc_msgSend(v66, "newBufferWithLength:options:", v67, 0);
    *(_QWORD *)&v144 = 30;
    v142 = v19;
    *((_QWORD *)&v144 + 1) = v19;

    v68 = objc_msgSend(*(id *)(v126 + 128), "contents");
    v69 = objc_msgSend(v143, "contents");
    if ((v6 & 1) != 0)
    {
      objc_msgSend(*(id *)(v126 + 192), "device");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v149 = 1;
      v147 = (id)objc_msgSend(v73, "newBufferWithLength:options:", v67, 0);
      *(_QWORD *)&v148 = 30;
      *((_QWORD *)&v148 + 1) = v19;

      v140 = objc_msgSend(*(id *)(v126 + 160), "contents");
      v70 = objc_msgSend(v147, "contents");
      v5 = v128;
      if ((v6 & 4) == 0)
      {
LABEL_191:
        v71 = 0;
        v72 = 0;
        if ((v6 & 2) == 0)
        {
LABEL_192:
          v138 = 0;
          goto LABEL_199;
        }
LABEL_195:
        objc_msgSend(*(id *)(v126 + 192), "device");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = (void *)objc_msgSend(v75, "newBufferWithLength:options:", 16 * v19, 0);
        if (v152)

        else
          v152 = 1;
        v150 = v76;
        *(_QWORD *)&v151 = 31;
        *((_QWORD *)&v151 + 1) = v19;

        v138 = objc_msgSend(v76, "contents");
LABEL_199:
        if (v6 >= 8)
        {
          objc_msgSend(*(id *)(v126 + 192), "device");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = (void *)objc_msgSend(v77, "newBufferWithLength:options:", 16 * v19, 0);
          if (v158)

          else
            v158 = 1;
          v156 = v78;
          *(_QWORD *)&v157 = 31;
          *((_QWORD *)&v157 + 1) = v19;

          v136 = objc_msgSend(v78, "contents");
        }
        else
        {
          v136 = 0;
        }
        if (!v19)
        {
LABEL_269:
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v162);
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v165);
          v4 = v126;
          goto LABEL_270;
        }
        v79 = 0;
        v134 = (_OWORD *)(v5 + 256);
        v133 = (_OWORD *)(v5 + 176);
        v80 = *((_QWORD *)&v162 + 1);
        while (1)
        {
          if (v80)
          {
            v81 = (uint8x8_t)vcnt_s8((int8x8_t)v80);
            v81.i16[0] = vaddlv_u8(v81);
            if (v81.u32[0] > 1uLL)
            {
              v5 = v79;
              if (v80 <= v79)
                v5 = v79 % v80;
            }
            else
            {
              v5 = (v80 + 0xFFFFFFFF) & v79;
            }
            v82 = *(void ***)(v162 + 8 * v5);
            if (v82)
            {
              v83 = *v82;
              if (*v82)
              {
                do
                {
                  v84 = v83[1];
                  if (v84 == v79)
                  {
                    if (v79 == *((_DWORD *)v83 + 4))
                    {
                      v5 = v128;
                      goto LABEL_246;
                    }
                  }
                  else
                  {
                    if (v81.u32[0] > 1uLL)
                    {
                      if (v84 >= v80)
                        v84 %= v80;
                    }
                    else
                    {
                      v84 &= v80 - 1;
                    }
                    if (v84 != v5)
                      break;
                  }
                  v83 = (_QWORD *)*v83;
                }
                while (v83);
              }
            }
          }
          v83 = operator new(0x20uLL);
          *v83 = 0;
          v83[1] = v79;
          *((_DWORD *)v83 + 4) = v79;
          *(_QWORD *)((char *)v83 + 20) = 0;
          v85 = (float)(unint64_t)(*((_QWORD *)&v163 + 1) + 1);
          if (!v80 || (float)(v164 * (float)v80) < v85)
          {
            v86 = v80 < 3 || (v80 & (v80 - 1)) != 0;
            v87 = v86 | (2 * v80);
            v88 = vcvtps_u32_f32(v85 / v164);
            if (v87 <= v88)
              v89 = v88;
            else
              v89 = v87;
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v162, v89);
            v80 = *((_QWORD *)&v162 + 1);
            if ((v80 & (v80 - 1)) != 0)
            {
              if (*((_QWORD *)&v162 + 1) <= v79)
                v5 = v79 % *((_QWORD *)&v162 + 1);
              else
                v5 = v79;
            }
            else
            {
              v5 = (*((_QWORD *)&v162 + 1) + 0xFFFFFFFFLL) & v79;
            }
          }
          v90 = v162;
          v91 = *(_QWORD **)(v162 + 8 * v5);
          if (v91)
            break;
          *v83 = v163;
          *(_QWORD *)&v163 = v83;
          *(_QWORD *)(v90 + 8 * v5) = &v163;
          v5 = v128;
          if (*v83)
          {
            v92 = *(_QWORD *)(*v83 + 8);
            if ((v80 & (v80 - 1)) != 0)
            {
              if (v92 >= v80)
                v92 %= v80;
            }
            else
            {
              v92 &= v80 - 1;
            }
            v91 = (_QWORD *)(v162 + 8 * v92);
            goto LABEL_244;
          }
LABEL_245:
          ++*((_QWORD *)&v163 + 1);
LABEL_246:
          v93 = (3 * *((_DWORD *)v83 + 5));
          v94 = (3 * v79);
          *(_DWORD *)(v69 + 4 * v94) = *(_DWORD *)(v68 + 4 * v93);
          v95 = (v93 + 1);
          v96 = (v94 + 1);
          *(_DWORD *)(v69 + 4 * v96) = *(_DWORD *)(v68 + 4 * v95);
          v97 = (v93 + 2);
          v98 = (v94 + 2);
          *(_DWORD *)(v69 + 4 * v98) = *(_DWORD *)(v68 + 4 * v97);
          if ((v6 & 1) != 0)
          {
            *(_DWORD *)(v70 + 4 * v94) = *(_DWORD *)(v140 + 4 * v93);
            *(_DWORD *)(v70 + 4 * v96) = *(_DWORD *)(v140 + 4 * v95);
            *(_DWORD *)(v70 + 4 * v98) = *(_DWORD *)(v140 + 4 * v97);
            if ((v6 & 4) == 0)
            {
LABEL_248:
              if ((v6 & 2) != 0)
                goto LABEL_249;
              goto LABEL_256;
            }
          }
          else if ((v6 & 4) == 0)
          {
            goto LABEL_248;
          }
          *(_DWORD *)(v72 + 4 * v94) = *(_DWORD *)(v71 + 4 * v93);
          *(_DWORD *)(v72 + 4 * v96) = *(_DWORD *)(v71 + 4 * v95);
          *(_DWORD *)(v72 + 4 * v98) = *(_DWORD *)(v71 + 4 * v97);
          if ((v6 & 2) != 0)
          {
LABEL_249:
            v99 = *((unsigned __int8 *)v83 + 24);
            v100 = *(_QWORD *)(v5 + 224);
            v101 = (*(_QWORD *)(v5 + 232) - v100) >> 4 <= v99 || v99 == 0;
            v102 = (_OWORD *)(v100 + 16 * v99);
            if (v101)
              v102 = v134;
            *(_OWORD *)(v138 + 4 * (4 * v79)) = *v102;
          }
LABEL_256:
          if (v6 >= 8)
          {
            v103 = *((unsigned __int8 *)v83 + 25);
            v104 = *(_QWORD *)(v5 + 144);
            v105 = (*(_QWORD *)(v5 + 152) - v104) >> 4 <= v103 || v103 == 0;
            v106 = (_OWORD *)(v104 + 16 * v103);
            if (v105)
              v106 = v133;
            *(_OWORD *)(v136 + 4 * (4 * v79)) = *v106;
          }
          if (++v79 == v142)
            goto LABEL_269;
        }
        *v83 = *v91;
        v5 = v128;
LABEL_244:
        *v91 = v83;
        goto LABEL_245;
      }
    }
    else
    {
      v140 = 0;
      v70 = 0;
      if ((v6 & 4) == 0)
        goto LABEL_191;
    }
    objc_msgSend(*(id *)(v126 + 192), "device");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v155 = 1;
    v153 = (id)objc_msgSend(v74, "newBufferWithLength:options:", v67, 0);
    *(_QWORD *)&v154 = 30;
    *((_QWORD *)&v154 + 1) = v19;

    v71 = objc_msgSend(*(id *)(v126 + 256), "contents");
    v72 = objc_msgSend(v153, "contents");
    if ((v6 & 2) == 0)
      goto LABEL_192;
    goto LABEL_195;
  }
  if (!*(_BYTE *)(v4 + 152))
    goto LABEL_310;
  v143 = *(id *)(v4 + 128);
  v144 = *(_OWORD *)(v4 + 136);
  if (!*(_BYTE *)(v4 + 216))
    goto LABEL_310;
  v145 = *(id *)(v4 + 192);
  v146 = *(_OWORD *)(v4 + 200);
  if ((v6 & 4) != 0)
  {
    if (!*(_BYTE *)(v4 + 280))
      goto LABEL_310;
    std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>((uint64_t)&v153, v4 + 256);
  }
  if ((v6 & 1) != 0)
  {
    if (*(_BYTE *)(v4 + 184))
    {
      std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>((uint64_t)&v147, v4 + 160);
      goto LABEL_270;
    }
LABEL_310:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
LABEL_270:
  v107 = (char *)operator new(0xD0uLL);
  v108 = v107;
  *((_QWORD *)v107 + 1) = 0;
  *((_QWORD *)v107 + 2) = 0;
  *((_QWORD *)v107 + 3) = v143;
  v109 = v107 + 24;
  *(_QWORD *)v107 = &off_24EFD88B0;
  *((_OWORD *)v107 + 2) = v144;
  *((_QWORD *)v107 + 6) = v145;
  *(_OWORD *)(v107 + 56) = v146;
  v107[72] = 0;
  v107[96] = 0;
  if (v149)
  {
    v110 = v147;
    v147 = 0;
    *((_QWORD *)v107 + 9) = v110;
    *((_OWORD *)v107 + 5) = v148;
    v107[96] = 1;
  }
  v107[104] = 0;
  v107[128] = 0;
  if (v152)
  {
    v111 = v150;
    v150 = 0;
    *((_QWORD *)v107 + 13) = v111;
    *((_OWORD *)v107 + 7) = v151;
    v107[128] = 1;
  }
  v107[136] = 0;
  v107[160] = 0;
  if (v155)
  {
    v112 = v153;
    v153 = 0;
    *((_QWORD *)v107 + 17) = v112;
    *((_OWORD *)v107 + 9) = v154;
    v107[160] = 1;
  }
  v107[168] = 0;
  v107[192] = 0;
  if (v158)
  {
    v113 = v156;
    v156 = 0;
    *((_QWORD *)v107 + 21) = v113;
    *((_OWORD *)v107 + 11) = v157;
    v107[192] = 1;
  }
  *((_QWORD *)v107 + 25) = v159;
  v160 = v107 + 24;
  v161 = (std::__shared_weak_count *)v107;
  *(_QWORD *)&v165 = v4;
  v114 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v5, v4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v165);
  v160 = 0;
  v161 = 0;
  v115 = (std::__shared_weak_count *)v114[7];
  v114[6] = v109;
  v114[7] = v108;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v161;
  if (v161)
  {
    v119 = (unint64_t *)&v161->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v158)

  if (v155)
  if (v152)

  if (v149)
}

void sub_2277B1FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));
  rf::data_flow::consumer::MeshVisualizer::DebugVisMesh::~DebugVisMesh((id *)va);
  _Unwind_Resume(a1);
}

BOOL rf::data_flow::consumer::`anonymous namespace'::HasNeededMeshAttributesForTheseModes(_BYTE *a1, int a2, int a3)
{
  BOOL v3;
  unsigned int v5;

  if (a1[152])
    v3 = a1[216] == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  if ((v5 & 1) != 0 && !a1[184])
    return 0;
  if ((v5 & 2) != 0 && !a1[248] || (v5 & 4) != 0 && !a1[280])
    return 0;
  return v5 < 8 || a1[312] != 0;
}

void rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(rf::data_flow::consumer::MeshVisualizer *this, const rf::data_flow::consumer::Mesh *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v11;

  if (*((_QWORD *)this + 7)
  {
    v11 = a2;
    v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)this, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
    v5 = v4[6];
    v6 = (std::__shared_weak_count *)v4[7];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (*(_BYTE *)(v5 + 176))
      REPrimitiveRenderAddStaticMesh();
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2277B22A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2rf9data_flow8consumer14MeshVisualizer16drawDebugVisMeshERKNS1_4MeshE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  const float *v5;

  v2 = *(_QWORD *)(a1 + 32);
  REPrimitiveRenderStaticMeshAddStandardAttribute();
  REPrimitiveRenderStaticMeshAddStandardAttribute();
  v3 = **(_BYTE ***)(a1 + 40);
  if (v3[72])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    v3 = **(_BYTE ***)(a1 + 40);
  }
  if (v3[136])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    v3 = **(_BYTE ***)(a1 + 40);
  }
  if (v3[104])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    v3 = **(_BYTE ***)(a1 + 40);
  }
  if (v3[168])
    REPrimitiveRenderStaticMeshAddStandardAttribute();
  REMakeSRTFromMatrix();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3();
  v4 = *(_DWORD *)(v2 + 56);
  if (v4 == 6 || *(_DWORD *)(v2 + 60) == 6)
  {
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat();
    v4 = *(_DWORD *)(v2 + 56);
  }
  if (v4 == 7)
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  if (*(_DWORD *)(v2 + 60) == 7)
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  if (*(_DWORD *)(v2 + 56) == 8)
  {
    v5 = (const float *)(v2 + 128);
    vld1q_dup_f32(v5);
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
    vld1q_dup_f32(v5);
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  }
  REPrimitiveRenderStaticMeshSetVertexCount();
  REPrimitiveRenderStaticMeshSetIndexCount();
  __asm
  {
    FMOV            V0.4S, #-25.0
    FMOV            V1.4S, #25.0
  }
  REAABBInit();
  return REPrimitiveRenderStaticMeshSetAABB();
}

__n128 __copy_helper_block_ea8_32c81_ZTSKZN2rf9data_flow8consumer14MeshVisualizer16drawDebugVisMeshERKNS1_4MeshEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void *v38;
  _QWORD *v39;
  _QWORD v40[2];
  char v41;

  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    if (*(_BYTE *)(a2 + 16))
      v39 = *(_QWORD **)a2;
    else
      v39 = (_QWORD *)a2;
    v8 = ((*v39 >> 2) + (*v39 << 6) + v39[1] + 2654435769) ^ *v39;
    *(_QWORD *)(a2 + 24) = v8;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v13 + 2), a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x40uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = (*a4)[1];
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = v17;
  v16[6] = 0;
  v16[7] = 0;
  v41 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_56;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_56:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v35)
  {
    *(_QWORD *)v40[0] = *v35;
    *v35 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v40[0])
    {
      v36 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v36 >= v9)
          v36 %= v9;
      }
      else
      {
        v36 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v40[0];
    }
  }
  v13 = (_QWORD *)v40[0];
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v40, 0);
  return v13;
}

void sub_2277B29B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD88B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD88B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::__on_zero_shared(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 192))

  if (*(_BYTE *)(a1 + 160))
  if (*(_BYTE *)(a1 + 128))

  if (*(_BYTE *)(a1 + 96))
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t RFIsRealityFusionFeatureFlagEnabled(int a1)
{
  _BOOL8 v1;
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  unint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *__p[2];
  unsigned __int8 v15;

  v1 = 1;
  switch(a1)
  {
    case 0:
      MainBundle = CFBundleGetMainBundle();
      Identifier = CFBundleGetIdentifier(MainBundle);
      applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
      v4 = v15;
      if ((v15 & 0x80u) != 0)
        v4 = (unint64_t)__p[1];
      if (v4 != 25)
      {
        v1 = 1;
        if (((char)v15 & 0x80000000) == 0)
          return v1;
        goto LABEL_25;
      }
      v5 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v5 = __p;
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = *((unsigned __int8 *)v5 + 24);
      v1 = v6 != (void *)0x6C7070612E6D6F63
        || v7 != (void *)0x74696C6165522E65
        || v8 != (void *)0x65736F706D6F4379
        || v9 != 114;
      if ((char)v15 < 0)
LABEL_25:
        operator delete(__p[0]);
      return v1;
    case 1:
    case 2:
      return v1;
    case 3:
    case 5:
      return 0;
    case 4:
    case 6:
      return _os_feature_enabled_impl();
    default:
      if (a1 != 255)
        return 0;
      return v1;
  }
}

BOOL RFIsRealityFusionSupported()
{
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  unint64_t v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  _BOOL8 v11;
  void *__p[2];
  unsigned __int8 v14;

  MainBundle = CFBundleGetMainBundle();
  Identifier = CFBundleGetIdentifier(MainBundle);
  applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
  v2 = v14;
  if ((v14 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (v2 == 25)
  {
    v3 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v3 = __p;
    v4 = *v3;
    v5 = v3[1];
    v6 = v3[2];
    v7 = *((unsigned __int8 *)v3 + 24);
    v11 = v4 != (void *)0x6C7070612E6D6F63
       || v5 != (void *)0x74696C6165522E65
       || v6 != (void *)0x65736F706D6F4379
       || v7 != 114;
    if ((char)v14 < 0)
      goto LABEL_21;
  }
  else
  {
    v11 = 1;
    if ((char)v14 < 0)
LABEL_21:
      operator delete(__p[0]);
  }
  return v11;
}

uint64_t *RFServiceManagerCreate(rf::AnchorDefinitionComponent *a1)
{
  rf::HandMetadataComponent *v1;
  uint64_t *v2;
  uint64_t *v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  char v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  uint64_t *Instance;
  _QWORD *v15;
  void *__p[2];
  char v18;
  const void *v19;

  v1 = (rf::HandMetadataComponent *)rf::AnchorDefinitionComponent::instance(a1);
  ++*((_DWORD *)v1 + 38);
  v2 = rf::HandMetadataComponent::instance(v1);
  ++*((_DWORD *)v2 + 18);
  v3 = rf::PlacementComponentTypeInfo::instance((rf::PlacementComponentTypeInfo *)v2);
  ++*((_DWORD *)v3 + 34);
  v4 = rf::AnchorMetadataComponent::instance((rf::AnchorMetadataComponent *)v3);
  ++v4[36];
  v5 = _os_feature_enabled_impl();
  v6 = _os_feature_enabled_impl();
  v7 = _os_feature_enabled_impl();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v19, (const UInt8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.UpdateMeshAssetSlowPath");
  v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v19, (const UInt8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v9 = v8;
  if (v8 <= 0x100u)
    v9 = 0;
  v10 = v9 != 0;
  rf::UserDefaults::~UserDefaults(&v19);
  v11 = 0x1000000;
  if (!v7)
    v11 = 0;
  v12 = 0x10000;
  if (!v6)
    v12 = 0;
  v13 = 257;
  if (!v5)
    v13 = 1;
  LODWORD(__p[0]) = v12 | v13 | v11;
  BYTE4(__p[0]) = v10;
  if (qword_253DC9BE8 != -1)
    dispatch_once(&qword_253DC9BE8, &__block_literal_global_5);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v15 = (_QWORD *)operator new();
  *v15 = Instance;
  rf::Session::Session((uint64_t)(v15 + 2), (uint64_t)__p);
  std::unique_ptr<rf::CustomCFObject<rf::Session>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::Session>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v15);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

void sub_2277B2EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x22E29DD50](v15, 0x10F2C40BEFC2129);
  _Unwind_Resume(a1);
}

rf::AnchorMetadataComponent *RFServiceManagerCleanUp(rf::AnchorDefinitionComponent *a1)
{
  rf::AnchorDefinitionComponent *v1;
  int v2;
  BOOL v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  int v7;
  rf::AnchorMetadataComponent *result;
  int v9;

  v1 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::instance(a1);
  v2 = *((_DWORD *)v1 + 38);
  v3 = __OFSUB__(v2--, 1);
  *((_DWORD *)v1 + 38) = v2;
  if ((v2 < 0) ^ v3 | (v2 == 0))
    v1 = rf::AnchorDefinitionComponent::deinit(v1);
  v4 = rf::HandMetadataComponent::instance(v1);
  v5 = *((_DWORD *)v4 + 18);
  v3 = __OFSUB__(v5--, 1);
  *((_DWORD *)v4 + 18) = v5;
  if ((v5 < 0) ^ v3 | (v5 == 0))
  {
    *((_DWORD *)v4 + 18) = 0;
    *v4 = 0;
  }
  v6 = rf::PlacementComponentTypeInfo::instance((rf::PlacementComponentTypeInfo *)v4);
  v7 = *((_DWORD *)v6 + 34);
  v3 = __OFSUB__(v7--, 1);
  *((_DWORD *)v6 + 34) = v7;
  if ((v7 < 0) ^ v3 | (v7 == 0))
  {
    *((_DWORD *)v6 + 34) = 0;
    *v6 = 0;
  }
  result = (rf::AnchorMetadataComponent *)rf::AnchorMetadataComponent::instance((rf::AnchorMetadataComponent *)v6);
  v9 = *((_DWORD *)result + 36);
  v3 = __OFSUB__(v9--, 1);
  *((_DWORD *)result + 36) = v9;
  if ((v9 < 0) ^ v3 | (v9 == 0))
    return (rf::AnchorMetadataComponent *)rf::AnchorMetadataComponent::deinit(result);
  return result;
}

uint64_t RFServiceManagerGenerateSnapshot(uint64_t a1)
{
  uint64_t v1;
  uint64_t ServiceLocator;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  void *__p;
  void *v8;
  _QWORD v9[3];

  v1 = *(_QWORD *)(a1 + 16);
  ServiceLocator = REECSManagerGetServiceLocator();
  v3 = *(_QWORD *)(v1 + 32);
  v9[0] = *(_QWORD *)(v1 + 48);
  v9[1] = ServiceLocator;
  v9[2] = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)v9, (uint64_t)v6);
  v4 = *(_QWORD *)(v1 + 3288);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  *(double *)(v1 + 3304) = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
  return v1 + 3304;
}

void sub_2277B3034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RFServiceManagerUpdate(uint64_t a1)
{
  uint64_t v1;
  uint64_t ServiceLocator;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  void *__p;
  void *v8;
  _QWORD v9[3];

  v1 = *(_QWORD *)(a1 + 16);
  ServiceLocator = REECSManagerGetServiceLocator();
  v3 = *(_QWORD *)(v1 + 32);
  v9[0] = *(_QWORD *)(v1 + 48);
  v9[1] = ServiceLocator;
  v9[2] = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)v9, (uint64_t)v6);
  v4 = *(_QWORD *)(v1 + 3288);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  *(double *)(v1 + 3304) = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
  return v1 + 3304;
}

void sub_2277B30D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RFServiceManagerUpdateServices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16) + 16;
  RESceneGetECSManagerNullable();
  LODWORD(v5) = 0;
  *((_QWORD *)&v5 + 1) = REECSManagerGetServiceLocator();
  v6 = 1;
  v7 = a2;
  v8 = 1;
  v9 = 0;
  return rf::Session::processConsumerRequest(v3, &v5);
}

rf::RealityFusionSystem *RFServiceManagerAddSystems(uint64_t a1)
{
  uint64_t v1;
  uint64_t ServiceLocator;

  v1 = *(_QWORD *)(a1 + 16) + 16;
  ServiceLocator = REECSManagerGetServiceLocator();
  return rf::Session::addSystemToECSSystem(v1, ServiceLocator);
}

rf::RealityFusionSystem *RFServiceManagerRemoveSystems(uint64_t a1)
{
  return std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100]((rf::RealityFusionSystem **)(*(_QWORD *)(a1 + 16) + 3248), 0);
}

void RFServiceManagerSetARKitDataProvider(uint64_t a1, std::__shared_weak_count_vtbl *cf)
{
  std::__shared_weak_count_vtbl *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void (__cdecl *v14)(std::__shared_count *__hidden);
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void *v22;
  void **v23;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    v2 = (std::__shared_weak_count_vtbl *)((char *)v2->__on_zero_shared + 8);
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8920;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v2;
    v21 = v4;
    v19 = v2;
    v20 = v4;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
  }
  v7 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v7)
    *(_QWORD *)(v7[3] + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v2)
  {
    rf::data_flow::provider::ARKitDataProvider::setSession((uint64_t)v2, v3 + 16);
    v23 = &v22;
    v8 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 128, (uint64_t *)&v22, (uint64_t **)&v23);
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v8[4];
    v8[3] = v2;
    v8[4] = v4;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(void (__cdecl **)(std::__shared_count *__hidden))(v3 + 3296);
    if (v14)
      v19->__on_zero_shared = v14;
  }
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2277B336C(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B3380(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B339C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

const void *RFServiceManagerGetARKitDataProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void (***v3)(rf::data_flow::provider::ARKitDataProvider *__hidden);
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 128);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void (***)(rf::data_flow::provider::ARKitDataProvider *__hidden))v2[3];
  if (!v3 || *v3 != &off_24EFD84F0)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetSyntheticARDataProvider(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void *v22;
  void **v23;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    v4 = v2->__shared_weak_owners_ + 8;
    v2 = (std::__shared_weak_count *)operator new();
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8980;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v21 = v2;
    v19 = v4;
    v20 = v2;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
  }
  v7 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v7)
    *(_QWORD *)(v7[3] + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = v3 + 16;
    v23 = &v22;
    v8 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 128, (uint64_t *)&v22, (uint64_t **)&v23);
    if (v2)
    {
      v9 = (unint64_t *)&v2->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v8[4];
    v8[3] = v4;
    v8[4] = v2;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(v3 + 3296);
    if (v14)
      *(_QWORD *)(v19 + 64) = v14;
  }
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2277B3688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B36A4(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B36B8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetSyntheticARDataProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 128);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void **)v2[3];
  if (!v3 || *v3 != &unk_24EFD7490)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetAnchorDataProvider(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void *v22;
  void **v23;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    v4 = v2->__shared_weak_owners_ + 8;
    v2 = (std::__shared_weak_count *)operator new();
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD89E0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v21 = v2;
    v19 = v4;
    v20 = v2;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
  }
  v7 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v7)
    *(_QWORD *)(v7[3] + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = v3 + 16;
    v23 = &v22;
    v8 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 128, (uint64_t *)&v22, (uint64_t **)&v23);
    if (v2)
    {
      v9 = (unint64_t *)&v2->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v8[4];
    v8[3] = v4;
    v8[4] = v2;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(v3 + 3296);
    if (v14)
      *(_QWORD *)(v19 + 16) = v14;
  }
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2277B39A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B39C4(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B39D8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetCameraMetadataProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 128);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void **)v2[3];
  if (!v3 || *v3 != &unk_24EFD7EA8)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetCameraMetadataProvider(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void *v22;
  void **v23;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    v4 = v2->__shared_weak_owners_ + 8;
    v2 = (std::__shared_weak_count *)operator new();
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8A40;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v21 = v2;
    v19 = v4;
    v20 = v2;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
  }
  v7 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v7)
    *(_QWORD *)(v7[3] + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 128), (uint64_t *)&v23);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = v3 + 16;
    v23 = &v22;
    v8 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 128, (uint64_t *)&v22, (uint64_t **)&v23);
    if (v2)
    {
      v9 = (unint64_t *)&v2->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v8[4];
    v8[3] = v4;
    v8[4] = v2;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(_QWORD *)(v3 + 3296);
    if (v14)
      *(_QWORD *)(v19 + 16) = v14;
  }
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2277B3CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B3CE0(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B3CF4(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetAnchorDataProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void (***v3)(rf::data_flow::provider::AnchorDataProvider *__hidden);
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 128);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void (***)(rf::data_flow::provider::AnchorDataProvider *__hidden))v2[3];
  if (!v3 || *v3 != &off_24EFD7160)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetMeshReconstructionService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *v19;
  void **v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    v4 = *((_QWORD *)cf + 2) + 8;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8AA0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v18 = v5;
    v17 = v5;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v2 + 88), (uint64_t *)&v20);
    v20 = &v19;
    v8 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v2 + 88, (uint64_t *)&v19, (uint64_t **)&v20);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (std::__shared_weak_count *)v8[4];
    v8[3] = v4;
    v8[4] = v5;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v2 + 176);
  }
  else
  {
    v18 = 0;
    v17 = 0;
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v2 + 88), (uint64_t *)&v20);
  }
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2277B3FC8(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B3FDC(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetMeshReconstructionService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetAnchorManagementService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8B00;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B42A8(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B42BC(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B42D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetAnchorManagementService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetLoggingService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 16;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8B60;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 16);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B4588(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B459C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B45B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetLoggingService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetQueryService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8BC0;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *(_QWORD *)(v5 + 8) = v3 + 176;
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B487C(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B4890(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetQueryService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void **)v2[3];
  if (!v3 || *v3 != &unk_24EFD9DC0)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetDebugService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 16;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8C20;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 16);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B4B38(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B4B4C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B4B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetDebugService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetEnvironmentProbePlacementService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 16;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8C80;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 16);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B4E18(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B4E2C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetEnvironmentProbePlacementService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetVFXCollisionService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8CE0;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B50F8(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B510C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B5128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetVFXCollisionService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetSyntheticEnvironmentService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8D40;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B53D8(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B53EC(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B5408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetSyntheticEnvironmentService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetAtmospherePlacementService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 16;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8DA0;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 16);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *(_QWORD *)(v5 + 8) = v3 + 176;
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B56B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B56CC(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B56E0(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetAtmospherePlacementService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void (***v3)(rf::data_flow::consumer::AtmospherePlacementConsumer *__hidden);
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void (***)(rf::data_flow::consumer::AtmospherePlacementConsumer *__hidden))v2[3];
  if (!v3 || *v3 != &off_24EFD8280)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 2);
  if (v4)
  {
    CFRetain(*(v3 - 2));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetRayCastingService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8E00;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *(_QWORD *)(v5 + 8) = v3 + 176;
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B5980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2277B599C(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B59B0(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

const void *RFServiceManagerGetRayCastingService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  const void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v11);
  if (!v2)
    return 0;
  v3 = (void **)v2[3];
  if (!v3 || *v3 != &unk_24EFD8E78)
    return 0;
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4 = *(v3 - 1);
  if (v4)
  {
    CFRetain(*(v3 - 1));
    CFRetain(v4);
    CFRelease(v4);
    CFRelease(v4);
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4;
}

void RFServiceManagerSetClientSharedDataService(uint64_t a1, std::__shared_weak_count *cf)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t shared_weak_owners;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;

  v2 = cf;
  v3 = *(_QWORD *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    shared_weak_owners = v2->__shared_weak_owners_;
    v2 = (std::__shared_weak_count *)operator new();
    v5 = shared_weak_owners + 8;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD8EA8;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 8);
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((_QWORD *)(v3 + 88), (uint64_t *)&v15);
  if (v5)
  {
    v15 = &v14;
    v6 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v3 + 88, (uint64_t *)&v14, (uint64_t **)&v15);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v5;
    v6[4] = v2;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v3 + 176);
  }
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2277B5C58(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277B5C6C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_2277B5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerGetClientSharedDataService(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v12);
  v3 = v2;
  if (v2)
  {
    v4 = (const void *)v2[3];
    if (v4
    {
      v6 = (std::__shared_weak_count *)v3[4];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3 = (_QWORD *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t (***RFServiceManagerSetUpdateTimeSampler(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t (***v12)();
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v10 = &off_24EFD8F08;
  v11 = MEMORY[0x22E29E0BC](a2);
  v12 = &v10;
  v13[0] = &off_24EFD8F08;
  v14 = v13;
  v4 = (_QWORD *)(v2 + 3264);
  v13[1] = MEMORY[0x22E29E0BC](v11, v3);
  v5 = v14;
  if (v13 != (_QWORD *)(v2 + 3264))
  {
    v6 = *(_QWORD **)(v2 + 3288);
    if (v14 == v13)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v13[0] + 24))(v13, v15);
        (*(void (**)(_QWORD *))(*v14 + 32))(v14);
        v14 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 3288) + 24))(*(_QWORD *)(v2 + 3288), v13);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 3288) + 32))(*(_QWORD *)(v2 + 3288));
        *(_QWORD *)(v2 + 3288) = 0;
        v14 = v13;
        (*(void (**)(_QWORD *, uint64_t))(v15[0] + 24))(v15, v2 + 3264);
        (*(void (**)(_QWORD *))(v15[0] + 32))(v15);
        *(_QWORD *)(v2 + 3288) = v4;
        v5 = v14;
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v13[0] + 24))(v13, v2 + 3264);
        (*(void (**)(_QWORD *))(*v14 + 32))(v14);
        v5 = *(_QWORD **)(v2 + 3288);
        v14 = v5;
        *(_QWORD *)(v2 + 3288) = v4;
      }
    }
    else
    {
      if (v6 == v4)
      {
        v5 = v13;
        (*(void (**)(uint64_t, _QWORD *))(*v4 + 24))(v2 + 3264, v13);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 3288) + 32))(*(_QWORD *)(v2 + 3288));
        *(_QWORD *)(v2 + 3288) = v14;
        v14 = v13;
        v7 = 4;
        goto LABEL_13;
      }
      v14 = *(_QWORD **)(v2 + 3288);
      *(_QWORD *)(v2 + 3288) = v5;
      v5 = v6;
    }
  }
  if (v5 == v13)
  {
    v7 = 4;
    v5 = v13;
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v7 = 5;
  }
LABEL_13:
  (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
LABEL_14:
  result = v12;
  if (v12 == &v10)
  {
    v9 = 4;
    result = &v10;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (uint64_t (***)())(*result)[v9]();
}

void sub_2277B5FC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerSetAnchorCleanUpCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v7[0] = &off_24EFD8F88;
  v7[1] = MEMORY[0x22E29E0BC](a2);
  v8 = v7;
  v9[0] = &off_24EFD8F88;
  v10 = v9;
  v9[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((_QWORD *)(v2 + 3112), (uint64_t)v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2277B60B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFServiceManagerSetExternalAnchorCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v7[0] = &off_24EFD9018;
  v7[1] = MEMORY[0x22E29E0BC](a2);
  v8 = v7;
  v9[0] = &off_24EFD9018;
  v10 = v9;
  v9[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((_QWORD *)(v2 + 3144), (uint64_t)v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2277B6218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *RFServiceManagerSetRelocalizedAnchorCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v7[0] = &off_24EFD9098;
  v7[1] = MEMORY[0x22E29E0BC](a2);
  v8 = v7;
  v9[0] = &off_24EFD9098;
  v10 = v9;
  v9[1] = MEMORY[0x22E29E0BC]();
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((_QWORD *)(v2 + 3176), (uint64_t)v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2277B6378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t RFServiceManagerCopyAnchorMatchingIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[272];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  rf::ARState::getAnchorWithIdentifier((rf::ARState *)(*(_QWORD *)(a1 + 16) + 176), a2, v5);
  if (!v6)
    return 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>((uint64_t)v5, &v4);
  v2 = v4;
  if (v6)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5);
  return v2;
}

void sub_2277B6480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a11);
  _Unwind_Resume(exception_object);
}

const void **rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~CFObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *RFServiceManagerGetAnchorPtrMatchingIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  return rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(*(_QWORD *)(a1 + 16) + 176), a2);
}

__CFArray *RFServiceManagerCopyAnchors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  void *value;

  rf::ARState::getAnchors((rf::ARState *)(*(_QWORD *)(a1 + 16) + 176), &v6);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0xF0F0F0F0F0F0F0F1 * ((v7 - v6) >> 4), MEMORY[0x24BDBD690]);
  v2 = v6;
  v3 = v7;
  while (v2 != v3)
  {
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(&value, v2);
    v4 = value;
    value = 0;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
    if (value)
      CFRelease(value);
    v2 += 272;
  }
  value = &v6;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&value);
  return Mutable;
}

void sub_2277B65A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t *Instance;
  _QWORD *v5;
  CFTypeRef cf;

  if (rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag != -1)
    dispatch_once(&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag, &__block_literal_global_13);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v5 = (_QWORD *)operator new();
  *v5 = Instance;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v5 + 2), a2);
  std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v5);
  cf = Instance;
  rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::CFObjectRef(a1, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_2277B66B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10F2C40557DAE71);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerVisitAnchors(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 16;
  v5[0] = &off_24EFD9138;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  rf::Session::visitAnchors(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2277B6784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *RFServiceManagerCopyUpdatedAnchors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  void *value;

  rf::ARState::getUpdatedAnchors((rf::ARState *)(*(_QWORD *)(a1 + 16) + 176), &v6);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0xF0F0F0F0F0F0F0F1 * ((v7 - v6) >> 4), MEMORY[0x24BDBD690]);
  v2 = v6;
  v3 = v7;
  while (v2 != v3)
  {
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(&value, v2);
    v4 = value;
    value = 0;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
    if (value)
      CFRelease(value);
    v2 += 272;
  }
  value = &v6;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&value);
  return Mutable;
}

void sub_2277B6884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *RFServiceManagerVisitUpdatedAnchors(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 16;
  v5[0] = &off_24EFD91C8;
  v5[1] = MEMORY[0x22E29E0BC](a2);
  v6 = v5;
  rf::Session::visitUpdatedAnchors(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2277B6960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *RFServiceManagerGetCameraIdentifierPtr(rf::helpers *a1)
{
  __int128 *result;

  result = rf::helpers::kCameraIdentifier(a1);
  if (*((_BYTE *)result + 16))
    return *(__int128 **)result;
  return result;
}

__int128 *RFServiceManagerGetBodyIdentifierPtr(rf::helpers *a1)
{
  __int128 *result;

  result = rf::helpers::kBodyIdentifier(a1);
  if (*((_BYTE *)result + 16))
    return *(__int128 **)result;
  return result;
}

uint64_t RFServiceManagerCopyNearestPlane(uint64_t a1, char a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, double a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[2];
  char v17;
  uint64_t v18;
  double v19;
  int v20;
  _BYTE v21[272];
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 16);
  v16[0] = a9;
  v16[1] = a10;
  v17 = a2;
  v18 = a3;
  v19 = a11;
  rf::helpers::getNearestPlaneAnchor((unint64_t)v16, v12 + 320, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v21, a9);
  if (!v23)
    return 0;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)v21);
  v20 = v22;
  *a4 = v22;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(&v15, (uint64_t)v16);
  v13 = v15;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
  if (v23)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v21);
  return v13;
}

void sub_2277B6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a11);
  if (LOBYTE(STACK[0x250]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t *RFServiceManagerGetNearestPlanePtr(uint64_t a1, char a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, double a11)
{
  uint64_t v12;
  uint64_t *result;
  int v14;
  _OWORD v15[2];
  char v16;
  uint64_t v17;
  double v18;

  v12 = *(_QWORD *)(a1 + 16);
  v15[0] = a9;
  v15[1] = a10;
  v16 = a2;
  v17 = a3;
  v18 = a11;
  result = rf::helpers::getNearestPlaneAnchorConstPtr((unint64_t)v15, v12 + 320, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  *a4 = v14;
  return result;
}

uint64_t RFServiceManagerGetFloorPlaneForPlacement(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v1 + 944))
    return v1 + 672;
  else
    return 0;
}

uint64_t RFServiceManagerSetServiceLocator(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *i;

  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v2 + 3296) = a2;
  for (i = *(_QWORD **)(v2 + 144); i; i = (_QWORD *)*i)
    *(_QWORD *)(i[3] + 16) = a2;
  return result;
}

_QWORD *std::function<void ()(rf::data_flow::RFUUID const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_2277B6D10(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_7SessionEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_13[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::Session]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9BF0 = 0u;
  xmmword_253DC9C00 = 0u;
  xmmword_253DC9C10 = 0u;
  unk_253DC9C20 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9C30 = 0uLL;
  unk_253DC9C40 = 0uLL;
  *((_QWORD *)&xmmword_253DC9BF0 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9C00 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::initCallback;
  *(_QWORD *)&xmmword_253DC9C10 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::finalizeCallback;
  qword_253DC9C28 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9C30 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyDebugDescriptionCallback;
  _MergedGlobals_6 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277B6E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::Session>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::Session>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::Session>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::Session>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  rf::CoordinateSpaceTracker *v21;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 3360));
    v3 = *(void ***)(v2 + 3320);
    v4 = *(void ***)(v2 + 3328);
    if (v4 == v3)
    {
      v8 = (_QWORD *)(v2 + 3352);
      v4 = *(void ***)(v2 + 3320);
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 3344);
      v6 = &v3[v5 >> 4];
      v7 = (void **)((char *)*v6 + 1104 * (v5 & 0xF));
      v8 = (_QWORD *)(v2 + 3352);
      v9 = *(uint64_t *)((char *)v3 + (((*(_QWORD *)(v2 + 3352) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 1104 * ((*(_DWORD *)(v2 + 3352) + (int)v5) & 0xF);
      if (v7 != (void **)v9)
      {
        do
        {
          rf::data_flow::provider::InputData::~InputData(v7);
          v7 = (void **)(v10 + 1104);
          if ((char *)v7 - (_BYTE *)*v6 == 17664)
          {
            v11 = (void **)v6[1];
            ++v6;
            v7 = v11;
          }
        }
        while (v7 != (void **)v9);
        v4 = *(void ***)(v2 + 3328);
        v3 = *(void ***)(v2 + 3320);
      }
    }
    *v8 = 0;
    v12 = (char *)v4 - (char *)v3;
    if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
    {
      do
      {
        operator delete(*v3);
        v3 = (void **)(*(_QWORD *)(v2 + 3320) + 8);
        *(_QWORD *)(v2 + 3320) = v3;
        v4 = *(void ***)(v2 + 3328);
        v12 = (char *)v4 - (char *)v3;
      }
      while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
    }
    v13 = v12 >> 3;
    if (v13 == 1)
    {
      v14 = 8;
    }
    else
    {
      if (v13 != 2)
      {
LABEL_17:
        if (v3 != v4)
        {
          do
          {
            v15 = *v3++;
            operator delete(v15);
          }
          while (v3 != v4);
          v16 = *(_QWORD *)(v2 + 3320);
          v17 = *(_QWORD *)(v2 + 3328);
          if (v17 != v16)
            *(_QWORD *)(v2 + 3328) = v17 + ((v16 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        v18 = *(void **)(v2 + 3312);
        if (v18)
          operator delete(v18);
        v19 = *(_QWORD **)(v2 + 3288);
        if (v19 == (_QWORD *)(v2 + 3264))
        {
          v20 = 4;
          v19 = (_QWORD *)(v2 + 3264);
        }
        else
        {
          if (!v19)
            goto LABEL_28;
          v20 = 5;
        }
        (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_28:
        v21 = *(rf::CoordinateSpaceTracker **)(v2 + 3256);
        *(_QWORD *)(v2 + 3256) = 0;
        if (v21)
        {
          rf::CoordinateSpaceTracker::~CoordinateSpaceTracker(v21);
          MEMORY[0x22E29DD50]();
        }
        std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100]((rf::RealityFusionSystem **)(v2 + 3248), 0);
        rf::ARState::~ARState((rf::ARState *)(v2 + 176));
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(v2 + 128);
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(v2 + 88);
        std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v2 + 56);
        std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v2 + 32);
        std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v2 + 16);
        JUMPOUT(0x22E29DD50);
      }
      v14 = 16;
    }
    *(_QWORD *)(v2 + 3344) = v14;
    goto LABEL_17;
  }
  return result;
}

rf::RealityFusionSystem *std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100](rf::RealityFusionSystem **a1, rf::RealityFusionSystem *a2)
{
  rf::RealityFusionSystem *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    rf::RealityFusionSystem::~RealityFusionSystem(result);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v3 >= *(_QWORD *)&v7)
      v10 = v3 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v3;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v13 == v3)
      {
        if (std::type_info::operator==[abi:ne180100](v12[2], *a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
        }
        else
        {
          v13 &= *(_QWORD *)&v7 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v3;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = *(_QWORD *)(*a2 + 8);
  if ((v7 & 0x8000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    v9 = 5381;
    do
    {
      v7 = v9;
      v10 = *v8++;
      v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v11)
        v3 = v7 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v7;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v7)
        {
          if (std::type_info::operator==[abi:ne180100](i[2], *a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  v41[0] = v18;
  v41[1] = a1 + 16;
  *v18 = 0;
  v18[1] = v7;
  v19 = **a3;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v17;
          if (*v17)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v17;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v7 >= v11)
        v3 = v7 % v11;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v11 - 1) & v7;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v17;
  if (*i)
  {
    v38 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11)
        v38 %= v11;
    }
    else
    {
      v38 &= v11 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_2277B7920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v3;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = *(_QWORD *)(*a2 + 8);
  if ((v7 & 0x8000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    v9 = 5381;
    do
    {
      v7 = v9;
      v10 = *v8++;
      v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v11)
        v3 = v7 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v7;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v7)
        {
          if (std::type_info::operator==[abi:ne180100](i[2], *a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  v41[0] = v18;
  v41[1] = a1 + 16;
  *v18 = 0;
  v18[1] = v7;
  v19 = **a3;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v17;
          if (*v17)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v17;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v7 >= v11)
        v3 = v7 % v11;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v11 - 1) & v7;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v17;
  if (*i)
  {
    v38 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11)
        v38 %= v11;
    }
    else
    {
      v38 &= v11 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_2277B7F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 16));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 16));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 16));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 16));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void rf::data_flow::consumer::RayCastingConsumer::~RayCastingConsumer(rf::data_flow::consumer::RayCastingConsumer *this)
{
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD8F08;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD8F08;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD8F88;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD8F88;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9018;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9018;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(rf *a1, rf::data_flow::RFUUID *a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  rf::realityFusionLogObject(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl(&dword_227777000, v4, OS_LOG_TYPE_DEFAULT, "RFServiceManagerSetExternalAnchorCallback(): Anchor %s marked external", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  return (*(uint64_t (**)(void))(*((_QWORD *)a1 + 1) + 16))();
}

void sub_2277B89D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9098;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9098;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(rf *a1, rf::data_flow::RFUUID *a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  rf::realityFusionLogObject(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl(&dword_227777000, v4, OS_LOG_TYPE_DEFAULT, "RFServiceManagerSetRelocalizedAnchorCallback(): Anchor %s relocalized", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  return (*(uint64_t (**)(void))(*((_QWORD *)a1 + 1) + 16))();
}

void sub_2277B8C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINSt3__17variantIJNS_9data_flow12CustomAnchorENS4_11PlaneAnchorENS4_11ImageAnchorENS4_12ObjectAnchorENS4_10FaceAnchorENS4_10BodyAnchorEEEEEEE13registerClassEv_block_invoke_0()
{
  void **v0;
  void *__p[2];
  char v2;

  rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(__p);
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass = 0u;
  xmmword_2558F9B00 = 0u;
  xmmword_2558F9B10 = 0u;
  unk_2558F9B20 = 0u;
  xmmword_2558F9B30 = 0u;
  unk_2558F9B40 = 0u;
  v0 = (void **)__p[0];
  if (v2 >= 0)
    v0 = __p;
  *((_QWORD *)&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass
  + 1) = v0;
  *(_QWORD *)&xmmword_2558F9B00 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback;
  *(_QWORD *)&xmmword_2558F9B10 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback;
  qword_2558F9B28 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_2558F9B30 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback;
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfTypeID = _CFRuntimeRegisterClass();
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_2277B8D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9138;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9138;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD91C8;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD91C8;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target_type()
{
}

uint64_t rf::update(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t Scene;
  rf::Session *v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v13[40];
  void *__p;
  void *v15;

  rf::Session::update(*(rf::Session **)a1);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *(_QWORD *)&v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *((_QWORD *)&v8 + 1) = v2;
  v9 = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)&v8, (uint64_t)v13);
  for (i = 0; i < REECSManagerSceneCount(); ++i)
  {
    Scene = REECSManagerGetScene();
    LODWORD(v8) = 0;
    v6 = *(rf::Session **)a1;
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(a1 + 8);
    LOBYTE(v9) = 1;
    v10 = Scene;
    v11 = 1;
    v12 = 0;
    rf::Session::processConsumerRequest((uint64_t)v6, &v8);
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v13);
}

void sub_2277B90E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t *rf::RealityFusionSystem::RealityFusionSystem(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ECSService;

  ECSService = REServiceLocatorGetECSService();
  a1[1] = a3;
  *a1 = ECSService;
  a1[2] = a2;
  a1[3] = REECSManagerAddCustomSystem();
  return a1;
}

void rf::RealityFusionSystem::~RealityFusionSystem(rf::RealityFusionSystem *this)
{
  if (*((_QWORD *)this + 3))
  {
    REECSManagerRemoveCustomSystem();
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t RFAnchorDataProviderCreate()
{
  uint64_t Instance;
  _QWORD *v1;
  char v3;

  v3 = 0;
  if (qword_253DC9C58 != -1)
    dispatch_once(&qword_253DC9C58, &__block_literal_global_6);
  Instance = _CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::provider::AnchorDataProvider::AnchorDataProvider((uint64_t)(v1 + 1), &v3);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject>>::reset[abi:ne180100]((rf::data_flow::provider::AnchorDataProvider *)(Instance + 16), (uint64_t)v1);
  if (Instance)
  {
    CFRetain((CFTypeRef)Instance);
    CFRelease((CFTypeRef)Instance);
  }
  return Instance;
}

void sub_2277B9278(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10A0C407178166CLL);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorDataProviderAddLocalAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[36];

  v4[35] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(_QWORD *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::addAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_2277B9310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RFAnchorDataProviderAddAnchor(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  rf *v6;
  NSObject *v7;
  _QWORD *v8;
  uint8_t buf[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  char v18;
  id v19;
  void *v20[2];
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  void *v25[2];
  __int128 v26;
  __int128 v27;
  uuid_t out;
  __int128 v29;
  uuid_t uu;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)uu = 0u;
  v31 = 0u;
  uuid_clear(uu);
  v32 = xmmword_2277EE440;
  v33 = xmmword_2277EE450;
  v34 = xmmword_2277EE460;
  v35 = xmmword_2277EE900;
  *(_QWORD *)&v36 = 16842752;
  BYTE8(v36) = 0;
  *(_QWORD *)&v37 = 0;
  v38 = 0;
  LOBYTE(v29) = 0;
  *((_QWORD *)&v29 + 1) = 0;
  uuid_clear(out);
  if (a3)
    *(_OWORD *)out = *a3;
  else
    uuid_generate_random(out);
  switch(a2)
  {
    case 0:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    case 1:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)v25 = 0u;
      v26 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (v25[1])
      {
        *(void **)&v26 = v25[1];
        operator delete(v25[1]);
      }
      goto LABEL_22;
    case 2:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      LOBYTE(v20[0]) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v20[1], "");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      v24 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (SBYTE7(v23) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[1]);
      goto LABEL_22;
    case 3:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      std::string::basic_string[abi:ne180100]<0>(v20, "");
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v21 + 1, "");
      LOBYTE(v24) = 0;
      *((_QWORD *)&v24 + 1) = 0;
      uuid_clear((unsigned __int8 *)&v23);
      *(_OWORD *)v25 = 0u;
      v26 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (SHIBYTE(__p[1]) < 0)
        operator delete(*((void **)&v21 + 1));
      if (SBYTE7(v21) < 0)
        operator delete(v20[0]);
LABEL_22:

      break;
    case 4:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<4ul,rf::data_flow::FaceAnchor,rf::data_flow::FaceAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    case 5:
      *(_OWORD *)buf = *(_OWORD *)out;
      v11 = v29;
      v12 = xmmword_2277EE440;
      v13 = xmmword_2277EE450;
      v14 = xmmword_2277EE460;
      v15 = xmmword_2277EE900;
      v16 = 16842752;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      LODWORD(v20[0]) = 1065353216;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<5ul,rf::data_flow::BodyAnchor,rf::data_flow::BodyAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    default:
      rf::realityFusionLogObject(v6);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_227777000, v7, OS_LOG_TYPE_ERROR, "RFAnchorDataProvider: Unknown RFAnchorType %lu", buf, 0xCu);
      }

      break;
  }
  v8 = rf::data_flow::provider::AnchorDataProvider::addAnchor(*(_QWORD *)(a1 + 16) + 8, (uint64_t)uu);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
  return v8;
}

void sub_2277B975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void RFAnchorDataProviderUpdateAnchor(uint64_t a1, uint64_t a2)
{
  rf::data_flow::provider::AnchorDataProvider::updateAnchor(*(_QWORD *)(a1 + 16) + 8, a2);
}

uint64_t RFAnchorDataProviderUpdateLocalAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[36];

  v4[35] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(_QWORD *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::updateAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_2277B9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderRemoveAnchorByIdentifier(uint64_t a1, uint64_t a2)
{
  rf::data_flow::provider::AnchorDataProvider *v3;
  uuid_t uu;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = (rf::data_flow::provider::AnchorDataProvider *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = 0;
  v6 = 0;
  uuid_clear(uu);
  *(_QWORD *)uu = a2;
  v5 = 1;
  rf::data_flow::provider::AnchorDataProvider::removeAnchor(v3, (const rf::data_flow::RFUUID *)uu);
}

void RFAnchorDataProviderRemoveAnchor(uint64_t a1, uint64_t a2)
{
  rf::data_flow::provider::AnchorDataProvider::removeAnchor(*(_QWORD *)(a1 + 16) + 8, a2);
}

uint64_t RFAnchorDataProviderRemoveLocalAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[36];

  v4[35] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(_QWORD *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::removeAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_2277B99A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderAddLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  void **v8[36];

  v8[35] = *(void ***)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::addAnchors((rf *)(v5 + 8), v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_2277B9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderUpdateLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  void **v8[36];

  v8[35] = *(void ***)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::updateAnchors(v5 + 8, v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_2277B9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderRemoveLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  void **v8[36];

  v8[35] = *(void ***)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::removeAnchors((rf *)(v5 + 8), v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_2277B9C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider18AnchorDataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_14[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::provider::AnchorDataProvider]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9C60 = 0u;
  xmmword_253DC9C70 = 0u;
  xmmword_253DC9C80 = 0u;
  unk_253DC9C90 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9CA0 = 0uLL;
  unk_253DC9CB0 = 0uLL;
  *((_QWORD *)&xmmword_253DC9C60 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9C70 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::initCallback;
  *(_QWORD *)&xmmword_253DC9C80 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::finalizeCallback;
  qword_253DC9C98 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9CA0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals_7 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277B9E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

rf::data_flow::provider::AnchorDataProvider *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject>>::reset[abi:ne180100]((rf::data_flow::provider::AnchorDataProvider *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

rf::data_flow::provider::AnchorDataProvider *std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject>>::reset[abi:ne180100](rf::data_flow::provider::AnchorDataProvider *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(result);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

void rf::synthetic::getSceneUnderstandingTypeString(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t i;
  __int128 v8;
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "plane");
    std::string::basic_string[abi:ne180100]<0>(v9, "image");
    std::string::basic_string[abi:ne180100]<0>(v10, "object");
    std::string::basic_string[abi:ne180100]<0>(v11, "mesh");
    std::string::basic_string[abi:ne180100]<0>(v12, "parametricRepresentation");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getSceneUnderstandingTypeString(rf::synthetic::SceneUnderstandingType)::MAP_SUTYPE_STR, &v8, 5uLL);
    for (i = 0; i != -15; i -= 3)
    {
      if (SHIBYTE(v12[i + 2]) < 0)
        operator delete((void *)v12[i]);
    }
  }
  v5 = rf::synthetic::getSceneUnderstandingTypeString(rf::synthetic::SceneUnderstandingType)::MAP_SUTYPE_STR + 24 * a1;
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_2277BA038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 119) < 0)
      operator delete(*(void **)(v1 + v3 + 96));
    v3 -= 24;
    if (v3 == -120)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_2277BA128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::getSceneUnderstandingTypeFromString(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t i;
  int v8;
  uint64_t *v9;
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];
  char v16;
  _QWORD v17[3];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "plane");
    v10 = 0;
    std::string::basic_string[abi:ne180100]<0>(v11, "image");
    v12 = 1;
    std::string::basic_string[abi:ne180100]<0>(v13, "object");
    v14 = 2;
    std::string::basic_string[abi:ne180100]<0>(v15, "mesh");
    v16 = 3;
    std::string::basic_string[abi:ne180100]<0>(v17, "parametricRepresentation");
    v18 = 4;
    std::unordered_map<std::string,rf::synthetic::SceneUnderstandingType>::unordered_map((uint64_t)&v8, 5);
    for (i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v17[i + 2]) < 0)
        operator delete((void *)v17[i]);
    }
    __cxa_guard_release(&_MergedGlobals_8);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(a1))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(a1);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v3[40];
  }
  else
  {
    rf::realityFusionLogObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0)
        v6 = (uint64_t *)a1;
      else
        v6 = *(uint64_t **)a1;
      v8 = 136315138;
      v9 = v6;
      _os_log_error_impl(&dword_227777000, v5, OS_LOG_TYPE_ERROR, "getSceneUnderstandingTypeFromString(): Invalid Scene Understanding Type: %s", (uint8_t *)&v8, 0xCu);
    }

    return 0;
  }
}

void sub_2277BA32C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 151) < 0)
      operator delete(*(void **)(v1 + v3 + 128));
    v3 -= 32;
    if (v3 == -160)
    {
      __cxa_guard_abort(&_MergedGlobals_8);
      _Unwind_Resume(a1);
    }
  }
}

BOOL rf::synthetic::isSceneUnderstandingAnchor(unsigned int a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  unsigned int v8;
  int v9;
  __int16 v10;
  char v11;

  if ((v1 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v9)
    {
      v10 = 256;
      v11 = 2;
      std::set<rf::synthetic::SceneUnderstandingType>::set[abi:ne180100]((uint64_t)&rf::synthetic::isSceneUnderstandingAnchor(rf::synthetic::SceneUnderstandingType)::SU_ANCHOR_TYPES, (unsigned __int8 *)&v10, 3);
      a1 = v8;
    }
  }
  v2 = qword_2558F9E40;
  if (!qword_2558F9E40)
    return 0;
  v3 = &qword_2558F9E40;
  do
  {
    v4 = *(unsigned __int8 *)(v2 + 25);
    v5 = v4 >= a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  return v3 != &qword_2558F9E40 && *((unsigned __int8 *)v3 + 25) <= a1;
}

void sub_2277BA48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::getAlignmentString(unsigned __int8 a1@<W0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t i;
  __int128 v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "horizontal");
    std::string::basic_string[abi:ne180100]<0>(v9, "vertical");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getAlignmentString(rf::data_flow::PlaneAnchor::Alignment)::MAP_ALIGNMENT_STR, &v8, 2uLL);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  v5 = rf::synthetic::getAlignmentString(rf::data_flow::PlaneAnchor::Alignment)::MAP_ALIGNMENT_STR + 24 * a1;
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_2277BA5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getAlignmentFromString(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t i;
  int v8;
  uint64_t *v9;
  int v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253DC9CC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9CC8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "horizontal");
    v10 = 0;
    std::string::basic_string[abi:ne180100]<0>(v11, "vertical");
    v12 = 1;
    std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Alignment>::unordered_map((uint64_t)&v8, 2);
    for (i = 0; i != -8; i -= 4)
    {
      if (SHIBYTE(v11[i + 2]) < 0)
        operator delete((void *)v11[i]);
    }
    __cxa_guard_release(&qword_253DC9CC8);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(a1))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(a1);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return *((unsigned int *)v3 + 10);
  }
  else
  {
    rf::realityFusionLogObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0)
        v6 = (uint64_t *)a1;
      else
        v6 = *(uint64_t **)a1;
      v8 = 136315138;
      v9 = v6;
      _os_log_error_impl(&dword_227777000, v5, OS_LOG_TYPE_ERROR, "getAlignmentFromString(): Invalid Alignment: %s", (uint8_t *)&v8, 0xCu);
    }

    return 0;
  }
}

void sub_2277BA7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = 0;
  while (1)
  {
    if (*(char *)(v14 + v16 + 55) < 0)
      operator delete(*(void **)(v14 + v16 + 32));
    v16 -= 32;
    if (v16 == -64)
    {
      __cxa_guard_abort(&qword_253DC9CC8);
      _Unwind_Resume(a1);
    }
  }
}

void rf::synthetic::getPlaneClassificationString(unsigned __int8 a1@<W0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t i;
  __int128 v8;
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "PlaneClassificationNone");
    std::string::basic_string[abi:ne180100]<0>(v9, "PlaneClassificationWall");
    std::string::basic_string[abi:ne180100]<0>(v10, "PlaneClassificationFloor");
    std::string::basic_string[abi:ne180100]<0>(v11, "PlaneClassificationCeiling");
    std::string::basic_string[abi:ne180100]<0>(v12, "PlaneClassificationTable");
    std::string::basic_string[abi:ne180100]<0>(v13, "PlaneClassificationSeat");
    std::string::basic_string[abi:ne180100]<0>(v14, "PlaneClassificationWindow");
    std::string::basic_string[abi:ne180100]<0>(v15, "PlaneClassificationDoor");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getPlaneClassificationString(rf::data_flow::PlaneAnchor::Classification)::MAP_PLANE_CLASSIFICATION_STR, &v8, 8uLL);
    for (i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v15[i + 2]) < 0)
        operator delete((void *)v15[i]);
    }
  }
  v5 = rf::synthetic::getPlaneClassificationString(rf::data_flow::PlaneAnchor::Classification)::MAP_PLANE_CLASSIFICATION_STR
     + 24 * a1;
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_2277BA9D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 191) < 0)
      operator delete(*(void **)(v1 + v3 + 168));
    v3 -= 24;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getPlaneClassificationFromString(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t i;
  int v8;
  uint64_t *v9;
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253DC9CD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9CD0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "PlaneClassificationNone");
    v10 = 0;
    std::string::basic_string[abi:ne180100]<0>(v11, "PlaneClassificationWall");
    v12 = 1;
    std::string::basic_string[abi:ne180100]<0>(v13, "PlaneClassificationFloor");
    v14 = 2;
    std::string::basic_string[abi:ne180100]<0>(v15, "PlaneClassificationCeiling");
    v16 = 3;
    std::string::basic_string[abi:ne180100]<0>(v17, "PlaneClassificationTable");
    v18 = 4;
    std::string::basic_string[abi:ne180100]<0>(v19, "PlaneClassificationSeat");
    v20 = 5;
    std::string::basic_string[abi:ne180100]<0>(v21, "PlaneClassificationWindow");
    v22 = 6;
    std::string::basic_string[abi:ne180100]<0>(v23, "PlaneClassificationDoor");
    v24 = 7;
    std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Classification>::unordered_map((uint64_t)&v8, 8);
    for (i = 0; i != -32; i -= 4)
    {
      if (SHIBYTE(v23[i + 2]) < 0)
        operator delete((void *)v23[i]);
    }
    __cxa_guard_release(&qword_253DC9CD0);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(a1))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(a1);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return *((unsigned int *)v3 + 10);
  }
  else
  {
    rf::realityFusionLogObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0)
        v6 = (uint64_t *)a1;
      else
        v6 = *(uint64_t **)a1;
      v8 = 136315138;
      v9 = v6;
      _os_log_error_impl(&dword_227777000, v5, OS_LOG_TYPE_ERROR, "getPlaneClassificationFromString(): Invalid Plane Classification string: %s", (uint8_t *)&v8, 0xCu);
    }

    return 0;
  }
}

void sub_2277BAC80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 247) < 0)
      operator delete(*(void **)(v1 + v3 + 224));
    v3 -= 32;
    if (v3 == -256)
    {
      __cxa_guard_abort(&qword_253DC9CD0);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getClassificationFromString(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];
  char v16;
  _QWORD v17[3];
  char v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  char v22;
  _QWORD v23[3];
  char v24;
  _QWORD v25[3];
  char v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[3];
  char v30;
  _QWORD v31[3];
  char v32;
  _QWORD v33[3];
  char v34;
  _QWORD v35[3];
  char v36;
  _QWORD v37[3];
  char v38;
  _QWORD v39[3];
  char v40;
  _QWORD v41[3];
  char v42;
  _QWORD v43[3];
  char v44;
  _QWORD v45[3];
  char v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];
  char v54;
  _QWORD v55[3];
  char v56;
  _QWORD v57[3];
  char v58;
  _QWORD v59[3];
  char v60;
  _QWORD v61[3];
  char v62;
  _QWORD v63[3];
  char v64;
  _QWORD v65[3];
  char v66;
  _QWORD v67[3];
  char v68;
  _QWORD v69[3];
  char v70;
  _QWORD v71[3];
  char v72;
  _QWORD v73[3];
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253DC9CD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9CD8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "ClassificationNone");
    v10 = 0;
    std::string::basic_string[abi:ne180100]<0>(v11, "ClassificationFloor");
    v12 = 1;
    std::string::basic_string[abi:ne180100]<0>(v13, "ClassificationWall");
    v14 = 2;
    std::string::basic_string[abi:ne180100]<0>(v15, "ClassificationCeiling");
    v16 = 3;
    std::string::basic_string[abi:ne180100]<0>(v17, "ClassificationDecoration");
    v18 = 4;
    std::string::basic_string[abi:ne180100]<0>(v19, "ClassificationElectricalAppliance");
    v20 = 5;
    std::string::basic_string[abi:ne180100]<0>(v21, "ClassificationDoor");
    v22 = 6;
    std::string::basic_string[abi:ne180100]<0>(v23, "ClassificationWindow");
    v24 = 7;
    std::string::basic_string[abi:ne180100]<0>(v25, "ClassificationBlind");
    v26 = 8;
    std::string::basic_string[abi:ne180100]<0>(v27, "ClassificationFireplace");
    v28 = 9;
    std::string::basic_string[abi:ne180100]<0>(v29, "ClassificationPerson");
    v30 = 10;
    std::string::basic_string[abi:ne180100]<0>(v31, "ClassificationMirror");
    v32 = 11;
    std::string::basic_string[abi:ne180100]<0>(v33, "ClassificationStairs");
    v34 = 12;
    std::string::basic_string[abi:ne180100]<0>(v35, "ClassificationBed");
    v36 = 13;
    std::string::basic_string[abi:ne180100]<0>(v37, "ClassificationCabinet");
    v38 = 14;
    std::string::basic_string[abi:ne180100]<0>(v39, "ClassificationChair");
    v40 = 15;
    std::string::basic_string[abi:ne180100]<0>(v41, "ClassificationCounter");
    v42 = 16;
    std::string::basic_string[abi:ne180100]<0>(v43, "ClassificationShelf");
    v44 = 17;
    std::string::basic_string[abi:ne180100]<0>(v45, "ClassificationSofa");
    v46 = 18;
    std::string::basic_string[abi:ne180100]<0>(v47, "ClassificationTable");
    v48 = 19;
    std::string::basic_string[abi:ne180100]<0>(v49, "ClassificationToilet");
    v50 = 20;
    std::string::basic_string[abi:ne180100]<0>(v51, "ClassificationSink");
    v52 = 21;
    std::string::basic_string[abi:ne180100]<0>(v53, "ClassificationBathtub");
    v54 = 22;
    std::string::basic_string[abi:ne180100]<0>(v55, "ClassificationShower");
    v56 = 23;
    std::string::basic_string[abi:ne180100]<0>(v57, "ClassificationRefrigerator");
    v58 = 24;
    std::string::basic_string[abi:ne180100]<0>(v59, "ClassificationStove");
    v60 = 25;
    std::string::basic_string[abi:ne180100]<0>(v61, "ClassificationWasherOrDryer");
    v62 = 26;
    std::string::basic_string[abi:ne180100]<0>(v63, "ClassificationOven");
    v64 = 27;
    std::string::basic_string[abi:ne180100]<0>(v65, "ClassificationDishwasher");
    v66 = 28;
    std::string::basic_string[abi:ne180100]<0>(v67, "ClassificationFurniture");
    v68 = 29;
    std::string::basic_string[abi:ne180100]<0>(v69, "ClassificationStorageBuiltin");
    v70 = 30;
    std::string::basic_string[abi:ne180100]<0>(v71, "ClassificationDoorFrame");
    v72 = 31;
    std::string::basic_string[abi:ne180100]<0>(v73, "ClassificationTVMonitor");
    v74 = 32;
    std::unordered_map<std::string,rf::synthetic::Classification>::unordered_map((uint64_t)&v8, 33);
    v7 = 1056;
    do
    {
      if (*((char *)&v8 + v7 - 9) < 0)
        operator delete(*(void **)((char *)&v8 + v7 - 32));
      v7 -= 32;
    }
    while (v7);
    __cxa_guard_release(&qword_253DC9CD8);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(a1))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(a1);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v3[40];
  }
  else
  {
    rf::realityFusionLogObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0)
        v6 = (uint64_t *)a1;
      else
        v6 = *(uint64_t **)a1;
      v8 = 136315138;
      v9 = v6;
      _os_log_error_impl(&dword_227777000, v5, OS_LOG_TYPE_ERROR, "getClassificationFromString(): Invalid Classification string: %s", (uint8_t *)&v8, 0xCu);
    }

    return 0;
  }
}

void sub_2277BB23C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 1056;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_253DC9CD8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getMaterialFromString(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];
  char v16;
  _QWORD v17[3];
  char v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  char v22;
  _QWORD v23[3];
  char v24;
  _QWORD v25[3];
  char v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[3];
  char v30;
  _QWORD v31[3];
  char v32;
  _QWORD v33[3];
  char v34;
  _QWORD v35[3];
  char v36;
  _QWORD v37[3];
  char v38;
  _QWORD v39[3];
  char v40;
  _QWORD v41[3];
  char v42;
  _QWORD v43[3];
  char v44;
  _QWORD v45[3];
  char v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];
  char v54;
  _QWORD v55[3];
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253DC9CE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253DC9CE0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "MaterialBrickwork");
    v10 = 1;
    std::string::basic_string[abi:ne180100]<0>(v11, "MaterialCarpet");
    v12 = 2;
    std::string::basic_string[abi:ne180100]<0>(v13, "MaterialCeilingTile");
    v14 = 3;
    std::string::basic_string[abi:ne180100]<0>(v15, "MaterialCeramic");
    v16 = 4;
    std::string::basic_string[abi:ne180100]<0>(v17, "MaterialConcrete");
    v18 = 5;
    std::string::basic_string[abi:ne180100]<0>(v19, "MaterialPolishedStone");
    v20 = 6;
    std::string::basic_string[abi:ne180100]<0>(v21, "MaterialFabric");
    v22 = 7;
    std::string::basic_string[abi:ne180100]<0>(v23, "MaterialFoliage");
    v24 = 8;
    std::string::basic_string[abi:ne180100]<0>(v25, "MaterialFood");
    v26 = 9;
    std::string::basic_string[abi:ne180100]<0>(v27, "MaterialGlass");
    v28 = 10;
    std::string::basic_string[abi:ne180100]<0>(v29, "MaterialLeather");
    v30 = 11;
    std::string::basic_string[abi:ne180100]<0>(v31, "MaterialMetal");
    v32 = 12;
    std::string::basic_string[abi:ne180100]<0>(v33, "MaterialMirror");
    v34 = 13;
    std::string::basic_string[abi:ne180100]<0>(v35, "MaterialPaint");
    v36 = 14;
    std::string::basic_string[abi:ne180100]<0>(v37, "MaterialPaper");
    v38 = 15;
    std::string::basic_string[abi:ne180100]<0>(v39, "MaterialClearPlastic");
    v40 = 16;
    std::string::basic_string[abi:ne180100]<0>(v41, "MaterialNonClearPlastic");
    v42 = 17;
    std::string::basic_string[abi:ne180100]<0>(v43, "MaterialRubber");
    v44 = 18;
    std::string::basic_string[abi:ne180100]<0>(v45, "MaterialSky");
    v46 = 19;
    std::string::basic_string[abi:ne180100]<0>(v47, "MaterialNaturalStone");
    v48 = 20;
    std::string::basic_string[abi:ne180100]<0>(v49, "MaterialTile");
    v50 = 21;
    std::string::basic_string[abi:ne180100]<0>(v51, "MaterialWater");
    v52 = 22;
    std::string::basic_string[abi:ne180100]<0>(v53, "MaterialWood");
    v54 = 23;
    std::string::basic_string[abi:ne180100]<0>(v55, "MaterialOther");
    v56 = 24;
    std::unordered_map<std::string,rf::synthetic::Material>::unordered_map((uint64_t)&v8, 24);
    v7 = 768;
    do
    {
      if (*((char *)&v8 + v7 - 9) < 0)
        operator delete(*(void **)((char *)&v8 + v7 - 32));
      v7 -= 32;
    }
    while (v7);
    __cxa_guard_release(&qword_253DC9CE0);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(a1))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(a1);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v3[40];
  }
  else
  {
    rf::realityFusionLogObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0)
        v6 = (uint64_t *)a1;
      else
        v6 = *(uint64_t **)a1;
      v8 = 136315138;
      v9 = v6;
      _os_log_error_impl(&dword_227777000, v5, OS_LOG_TYPE_ERROR, "getMaterialFromString(): Invalid Material string: %s", (uint8_t *)&v8, 0xCu);
    }

    return 24;
  }
}

void sub_2277BB74C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 768;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_253DC9CE0);
      _Unwind_Resume(a1);
    }
  }
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2277BB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::unordered_map<std::string,rf::synthetic::SceneUnderstandingType>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_253DC9CE8 = 0u;
  *(_OWORD *)&qword_253DC9CF8 = 0u;
  dword_253DC9D08 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D00, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_253DC9CE8 + 1);
      if (*((_QWORD *)&xmmword_253DC9CE8 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9CE8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_253DC9CE8 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_253DC9CE8 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_253DC9CE8 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_253DC9CE8 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D08, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(_BYTE *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_253DC9D00 + 1);
      if (!v6 || (float)(*(float *)&dword_253DC9D08 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_253DC9CE8;
      v32 = *(_QWORD **)(xmmword_253DC9CE8 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_253DC9CF8;
        qword_253DC9CF8 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_253DC9CF8;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_253DC9CE8 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_253DC9D00;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_253DC9D08);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_253DC9CE8 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_253DC9CE8 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_253DC9CE8 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_253DC9D00 / *(float *)&dword_253DC9D08);
      if (*((_QWORD *)&xmmword_253DC9CE8 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9CE8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_253DC9CE8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_253DC9CE8;
          *(_QWORD *)&xmmword_253DC9CE8 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_253DC9CE8 + 1) = prime;
          do
            *(_QWORD *)(xmmword_253DC9CE8 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_253DC9CF8;
          if (qword_253DC9CF8)
          {
            v24 = *(_QWORD *)(qword_253DC9CF8 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_253DC9CE8 + 8 * v24) = &qword_253DC9CF8;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_253DC9CE8 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_253DC9CE8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_253DC9CE8 + 8 * v30);
                **(_QWORD **)(xmmword_253DC9CE8 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_253DC9CE8;
        *(_QWORD *)&xmmword_253DC9CE8 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_253DC9CE8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2277BBE24(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_253DC9CF8;
  if (qword_253DC9CF8)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_253DC9CE8;
  *(_QWORD *)&xmmword_253DC9CE8 = 0;
  if (v2)
    operator delete(v2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D00, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_253DC9CE8 + 1);
  if (!*((_QWORD *)&xmmword_253DC9CE8 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9CE8 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_253DC9CE8 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_253DC9CE8 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_253DC9CE8 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_253DC9CE8 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D08, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

uint64_t std::set<rf::synthetic::SceneUnderstandingType>::set[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<rf::synthetic::SceneUnderstandingType>::__emplace_hint_unique_key_args<rf::synthetic::SceneUnderstandingType,rf::synthetic::SceneUnderstandingType const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2277BC034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__emplace_hint_unique_key_args<rf::synthetic::SceneUnderstandingType,rf::synthetic::SceneUnderstandingType const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<rf::synthetic::SceneUnderstandingType>::__find_equal<rf::synthetic::SceneUnderstandingType>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    std::__tree<rf::synthetic::SceneUnderstandingType>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__find_equal<rf::synthetic::SceneUnderstandingType>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(a1, *a2);
    std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Alignment>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_253DC9D10 = 0u;
  *(_OWORD *)&qword_253DC9D20 = 0u;
  dword_253DC9D30 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D28, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_253DC9D10 + 1);
      if (*((_QWORD *)&xmmword_253DC9D10 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D10 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_253DC9D10 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_253DC9D10 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_253DC9D10 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_253DC9D10 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D30, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((_DWORD *)v12 + 10) = *(_DWORD *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_253DC9D28 + 1);
      if (!v6 || (float)(*(float *)&dword_253DC9D30 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_253DC9D10;
      v32 = *(_QWORD **)(xmmword_253DC9D10 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_253DC9D20;
        qword_253DC9D20 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_253DC9D20;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_253DC9D10 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_253DC9D28;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_253DC9D30);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_253DC9D10 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_253DC9D10 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_253DC9D10 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_253DC9D28 / *(float *)&dword_253DC9D30);
      if (*((_QWORD *)&xmmword_253DC9D10 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D10 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_253DC9D10 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_253DC9D10;
          *(_QWORD *)&xmmword_253DC9D10 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_253DC9D10 + 1) = prime;
          do
            *(_QWORD *)(xmmword_253DC9D10 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_253DC9D20;
          if (qword_253DC9D20)
          {
            v24 = *(_QWORD *)(qword_253DC9D20 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_253DC9D10 + 8 * v24) = &qword_253DC9D20;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_253DC9D10 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_253DC9D10 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_253DC9D10 + 8 * v30);
                **(_QWORD **)(xmmword_253DC9D10 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_253DC9D10;
        *(_QWORD *)&xmmword_253DC9D10 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_253DC9D10 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2277BC798(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_253DC9D20;
  if (qword_253DC9D20)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_253DC9D10;
  *(_QWORD *)&xmmword_253DC9D10 = 0;
  if (v2)
    operator delete(v2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D28, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_253DC9D10 + 1);
  if (!*((_QWORD *)&xmmword_253DC9D10 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D10 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_253DC9D10 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_253DC9D10 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_253DC9D10 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_253DC9D10 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D30, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Classification>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_253DC9D38 = 0u;
  *(_OWORD *)&qword_253DC9D48 = 0u;
  dword_253DC9D58 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D50, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_253DC9D38 + 1);
      if (*((_QWORD *)&xmmword_253DC9D38 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D38 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_253DC9D38 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_253DC9D38 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_253DC9D38 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_253DC9D38 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D58, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((_DWORD *)v12 + 10) = *(_DWORD *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_253DC9D50 + 1);
      if (!v6 || (float)(*(float *)&dword_253DC9D58 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_253DC9D38;
      v32 = *(_QWORD **)(xmmword_253DC9D38 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_253DC9D48;
        qword_253DC9D48 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_253DC9D48;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_253DC9D38 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_253DC9D50;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_253DC9D58);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_253DC9D38 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_253DC9D38 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_253DC9D38 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_253DC9D50 / *(float *)&dword_253DC9D58);
      if (*((_QWORD *)&xmmword_253DC9D38 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D38 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_253DC9D38 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_253DC9D38;
          *(_QWORD *)&xmmword_253DC9D38 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_253DC9D38 + 1) = prime;
          do
            *(_QWORD *)(xmmword_253DC9D38 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_253DC9D48;
          if (qword_253DC9D48)
          {
            v24 = *(_QWORD *)(qword_253DC9D48 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_253DC9D38 + 8 * v24) = &qword_253DC9D48;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_253DC9D38 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_253DC9D38 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_253DC9D38 + 8 * v30);
                **(_QWORD **)(xmmword_253DC9D38 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_253DC9D38;
        *(_QWORD *)&xmmword_253DC9D38 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_253DC9D38 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2277BCDD0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_253DC9D48;
  if (qword_253DC9D48)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_253DC9D38;
  *(_QWORD *)&xmmword_253DC9D38 = 0;
  if (v2)
    operator delete(v2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D50, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_253DC9D38 + 1);
  if (!*((_QWORD *)&xmmword_253DC9D38 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D38 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_253DC9D38 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_253DC9D38 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_253DC9D38 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_253DC9D38 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D58, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::synthetic::Classification>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_253DC9D60 = 0u;
  *(_OWORD *)&qword_253DC9D70 = 0u;
  dword_253DC9D80 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D78, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_253DC9D60 + 1);
      if (*((_QWORD *)&xmmword_253DC9D60 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D60 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_253DC9D60 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_253DC9D60 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_253DC9D60 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_253DC9D60 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D80, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(_BYTE *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_253DC9D78 + 1);
      if (!v6 || (float)(*(float *)&dword_253DC9D80 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_253DC9D60;
      v32 = *(_QWORD **)(xmmword_253DC9D60 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_253DC9D70;
        qword_253DC9D70 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_253DC9D70;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_253DC9D60 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_253DC9D78;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_253DC9D80);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_253DC9D60 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_253DC9D60 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_253DC9D60 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_253DC9D78 / *(float *)&dword_253DC9D80);
      if (*((_QWORD *)&xmmword_253DC9D60 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D60 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_253DC9D60 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_253DC9D60;
          *(_QWORD *)&xmmword_253DC9D60 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_253DC9D60 + 1) = prime;
          do
            *(_QWORD *)(xmmword_253DC9D60 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_253DC9D70;
          if (qword_253DC9D70)
          {
            v24 = *(_QWORD *)(qword_253DC9D70 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_253DC9D60 + 8 * v24) = &qword_253DC9D70;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_253DC9D60 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_253DC9D60 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_253DC9D60 + 8 * v30);
                **(_QWORD **)(xmmword_253DC9D60 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_253DC9D60;
        *(_QWORD *)&xmmword_253DC9D60 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_253DC9D60 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2277BD408(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_253DC9D70;
  if (qword_253DC9D70)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_253DC9D60;
  *(_QWORD *)&xmmword_253DC9D60 = 0;
  if (v2)
    operator delete(v2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9D78, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_253DC9D60 + 1);
  if (!*((_QWORD *)&xmmword_253DC9D60 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D60 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_253DC9D60 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_253DC9D60 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_253DC9D60 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_253DC9D60 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9D80, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::synthetic::Material>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_253DC9D88 = 0u;
  *(_OWORD *)&qword_253DC9D98 = 0u;
  dword_253DC9DA8 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9DA0, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_253DC9D88 + 1);
      if (*((_QWORD *)&xmmword_253DC9D88 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D88 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_253DC9D88 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_253DC9D88 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_253DC9D88 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_253DC9D88 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9DA8, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(_BYTE *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_253DC9DA0 + 1);
      if (!v6 || (float)(*(float *)&dword_253DC9DA8 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_253DC9D88;
      v32 = *(_QWORD **)(xmmword_253DC9D88 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_253DC9D98;
        qword_253DC9D98 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_253DC9D98;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_253DC9D88 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_253DC9DA0;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_253DC9DA8);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_253DC9D88 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_253DC9D88 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_253DC9D88 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_253DC9DA0 / *(float *)&dword_253DC9DA8);
      if (*((_QWORD *)&xmmword_253DC9D88 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D88 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_253DC9D88 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_253DC9D88;
          *(_QWORD *)&xmmword_253DC9D88 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_253DC9D88 + 1) = prime;
          do
            *(_QWORD *)(xmmword_253DC9D88 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_253DC9D98;
          if (qword_253DC9D98)
          {
            v24 = *(_QWORD *)(qword_253DC9D98 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_253DC9D88 + 8 * v24) = &qword_253DC9D98;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_253DC9D88 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_253DC9D88 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_253DC9D88 + 8 * v30);
                **(_QWORD **)(xmmword_253DC9D88 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_253DC9D88;
        *(_QWORD *)&xmmword_253DC9D88 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_253DC9D88 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2277BDA40(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_253DC9D98;
  if (qword_253DC9D98)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_253DC9D88;
  *(_QWORD *)&xmmword_253DC9D88 = 0;
  if (v2)
    operator delete(v2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253DC9DA0, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_253DC9D88 + 1);
  if (!*((_QWORD *)&xmmword_253DC9D88 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253DC9D88 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_253DC9D88 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_253DC9D88 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_253DC9D88 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_253DC9D88 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253DC9DA8, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

uint64_t rf::data_flow::details::Context::Context(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v6;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[1] - *a2) >> 3);
  v6 = 0;
  std::vector<unsigned long>::vector((_QWORD *)(a1 + 40), v4, &v6);
  *(_QWORD *)(a1 + 64) = a2;
  return a1;
}

void sub_2277BDC5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *rf::data_flow::details::Context::markOutputReady(rf::data_flow::details::Context *this, unint64_t *a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__equal_range_multi<unsigned long>((_QWORD *)(*((_QWORD *)this + 8) + 24), a2);
  if (result != v4)
  {
    v5 = result;
    v6 = v4;
    do
    {
      v7 = v5[3];
      v8 = (uint64_t *)*((_QWORD *)this + 8);
      v9 = *((_QWORD *)this + 5);
      v10 = *(_QWORD *)(v9 + 8 * v7) + 1;
      *(_QWORD *)(v9 + 8 * v7) = v10;
      v11 = *v8;
      if (v10 == (uint64_t)(*(_QWORD *)(v11 + 88 * v7 + 64) - *(_QWORD *)(v11 + 88 * v7 + 56)) >> 3)
      {
        v12 = *(_QWORD *)(v11 + 88 * v7 + 24);
        if (!v12)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, rf::data_flow::details::Context *))(*(_QWORD *)v12 + 48))(v12, this);
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5 != v6);
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2277BDD74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__equal_range_multi<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t RFAtmospherePlacementServiceCreate()
{
  uint64_t v1;
  __int128 v2[4];
  int v3;
  __int16 v4;
  int v5;
  char v6;
  char v7[16];

  v2[0] = xmmword_2277F1570;
  v2[1] = xmmword_2277F1580;
  v2[2] = xmmword_2277F1590;
  v2[3] = xmmword_2277F15A0;
  v3 = 1036831949;
  v4 = 0;
  v5 = 1077936128;
  v6 = 1;
  strcpy(v7, "ff&?");
  rf::makeCustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer,rf::data_flow::consumer::AtmospherePlacementConfig &>(&v1, v2);
  return v1;
}

void rf::makeCustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer,rf::data_flow::consumer::AtmospherePlacementConfig &>(_QWORD *a1, __int128 *a2)
{
  uint64_t *Instance;
  _QWORD *v5;
  CFTypeRef cf;

  if (qword_253DC9DB8 != -1)
    dispatch_once(&qword_253DC9DB8, &__block_literal_global_7);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v5 = (_QWORD *)operator new();
  *v5 = Instance;
  rf::data_flow::consumer::AtmospherePlacementConsumer::AtmospherePlacementConsumer((uint64_t)(v5 + 2), a2);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v5);
  cf = Instance;
  rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::CFObjectRef(a1, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_2277BDF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10A0C40F6950127);
  _Unwind_Resume(a1);
}

uint64_t RFAtmospherePlacementServiceCreateForReplay()
{
  uint64_t v1;
  __int128 v2[4];
  int v3;
  __int16 v4;
  int v5;
  char v6;
  int v7;
  char v8;

  v2[0] = xmmword_2277F1570;
  v2[1] = xmmword_2277F1580;
  v2[2] = xmmword_2277F1590;
  v2[3] = xmmword_2277F15A0;
  v3 = 1036831949;
  v4 = 0;
  v5 = 1077936128;
  v6 = 1;
  v7 = 1059481190;
  v8 = 1;
  rf::makeCustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer,rf::data_flow::consumer::AtmospherePlacementConfig &>(&v1, v2);
  return v1;
}

uint64_t RFAtmospherePlacementServiceUpdateByDeltaTime()
{
  uint64_t result;

  result = RESceneGetECSManagerNullable();
  if (result)
    return REECSManagerGetServiceLocator();
  return result;
}

void RFAtmospherePlacementServiceRequestCalibrationAt(uint64_t a1, uint64_t a2, int a3)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate((rf *)(*(_QWORD *)(a1 + 16) + 16), a2, a3);
}

void RFAtmospherePlacementServiceRequestCalibration(uint64_t a1, uint64_t a2, int a3)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate((rf *)(*(_QWORD *)(a1 + 16) + 16), a2, a3);
}

void RFAtmospherePlacementServiceRequestCalibrationAtEx(uint64_t a1, uint64_t a2, int a3)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate((rf *)(*(_QWORD *)(a1 + 16) + 16), a2, a3);
}

void RFAtmospherePlacementServiceRequestCalibrationEx(uint64_t a1, uint64_t a2, int a3)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate((rf *)(*(_QWORD *)(a1 + 16) + 16), a2, a3);
}

uint64_t RFAtmospherePlacementServiceGetOpenSkyState()
{
  return 0;
}

uint64_t RFAtmospherePlacementServiceGetOpenSkyUnsupportedReason()
{
  return 0;
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer27AtmospherePlacementConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_15[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::AtmospherePlacementConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9DC0 = 0u;
  xmmword_253DC9DD0 = 0u;
  xmmword_253DC9DE0 = 0u;
  unk_253DC9DF0 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9E00 = 0uLL;
  unk_253DC9E10 = 0uLL;
  *((_QWORD *)&xmmword_253DC9DC0 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9DD0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9DE0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::finalizeCallback;
  qword_253DC9DF8 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9E00 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_9 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277BE254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer((rf::data_flow::consumer::AtmospherePlacementConsumer *)(v2 + 16));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

rf::RealityFusionSystem *rf::Session::addSystemToECSSystem(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  rf::RealityFusionSystem::RealityFusionSystem(v4, a2, a1);
  return std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100]((rf::RealityFusionSystem **)(a1 + 3232), (rf::RealityFusionSystem *)v4);
}

void sub_2277BE338(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

_QWORD *rf::Session::visitAnchors(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  rf::ARState::visitAnchors(a1 + 160, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2277BE3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *rf::Session::visitUpdatedAnchors(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  rf::ARState::visitUpdatedAnchors(a1 + 160, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2277BE4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t rf::Session::processConsumerRequest(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  _BYTE v5[40];
  void *__p;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = a2[1];
  v9 = *a2;
  v10 = v2;
  v11 = a2[2];
  v3 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  rf::data_flow::DataGraph::evaluate<rf::ConsumerRequest>(v3, (uint64_t)&v8, (uint64_t)v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v5);
}

void rf::Session::consumeInputFromProvider(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 1024))
  {
    rf::ARState::consume(a1 + 160, a2);
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 3344));
    std::deque<rf::data_flow::provider::InputData>::push_back((_QWORD *)(a1 + 3296), a2);
    std::mutex::unlock((std::mutex *)(a1 + 3344));
  }
}

void sub_2277BE5CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double rf::Session::createSessionState@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  int v7;
  char i;
  int v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  char v17;
  int v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  char v26;
  int v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  _QWORD *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  double result;
  std::string __p;
  char v57;
  std::string v58;
  char v59;
  __int128 v60;
  unint64_t v61;
  std::string v62;
  __int128 __dst;
  unint64_t v64;
  __int128 *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_DWORD *)(v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_DWORD *)(v4 + 120) = 1065353216;
  std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(&v60, (_QWORD *)v4);
  v5 = v60;
  std::string::basic_string[abi:ne180100]<0>(&v62, "Snapshot request");
  v6 = 0;
  v7 = 1;
  for (i = 114; i != 91; i = aStdStringViewR_16[v6++ + 51])
  {
    if (i == 93)
    {
      v9 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      v6 = 0;
      HIBYTE(v64) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v9 = 1;
LABEL_8:
  v7 += v9;
  if (v7)
    goto LABEL_9;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v64 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v64) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_17:
    memcpy(p_dst, "rf::UpdateRequest]", v6);
LABEL_18:
  *((_BYTE *)p_dst + v6) = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    __p = v62;
  v57 = 1;
  v13 = rf::data_flow::details::NodeStore::createNode(v5 + 16, (unint64_t)&__dst, &__p);
  if (v57 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v14 = v60;
  std::string::basic_string[abi:ne180100]<0>(&v62, "Consume request");
  v15 = 0;
  v16 = 1;
  v17 = 114;
  while (2)
  {
    switch(v17)
    {
      case 91:
        v18 = 1;
        break;
      case 93:
        v18 = -1;
        break;
      case 0:
        v15 = 0;
        HIBYTE(v64) = 0;
        v19 = &__dst;
        goto LABEL_45;
      default:
        goto LABEL_36;
    }
    v16 += v18;
    if (v16)
    {
LABEL_36:
      v17 = aStdStringViewR_17[v15++ + 51];
      continue;
    }
    break;
  }
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    v19 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v64 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = v19;
    goto LABEL_44;
  }
  HIBYTE(v64) = v15;
  v19 = &__dst;
  if (v15)
LABEL_44:
    memcpy(v19, "rf::ConsumerRequest]", v15);
LABEL_45:
  *((_BYTE *)v19 + v15) = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    __p = v62;
  v57 = 1;
  v22 = rf::data_flow::details::NodeStore::createNode(v14 + 16, (unint64_t)&__dst, &__p);
  if (v57 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v23 = v60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ARSnapshot");
  v24 = 1;
  v57 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v58, "Build new snapshot");
  v25 = 0;
  v59 = 1;
  v26 = 117;
  while (2)
  {
    switch(v26)
    {
      case 91:
        v27 = 1;
        break;
      case 93:
        v27 = -1;
        break;
      case 0:
        v25 = 0;
        HIBYTE(v64) = 0;
        v28 = &__dst;
        goto LABEL_72;
      default:
        goto LABEL_63;
    }
    v24 += v27;
    if (v24)
    {
LABEL_63:
      v26 = aStdStringViewR_18[v25++ + 51];
      continue;
    }
    break;
  }
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v25 >= 0x17)
  {
    v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v29 = v25 | 7;
    v30 = v29 + 1;
    v28 = (__int128 *)operator new(v29 + 1);
    *((_QWORD *)&__dst + 1) = v25;
    v64 = v30 | 0x8000000000000000;
    *(_QWORD *)&__dst = v28;
    goto LABEL_71;
  }
  HIBYTE(v64) = v25;
  v28 = &__dst;
  if (v25)
LABEL_71:
    memcpy(v28, "unsigned long]", v25);
LABEL_72:
  *((_BYTE *)v28 + v25) = 0;
  v31 = rf::data_flow::details::NodeStore::createNode(v23 + 16, (unint64_t)&__dst, &__p);
  v61 = v31;
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  v32 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v32 = &off_24EFD92B8;
  *((_QWORD *)v32 + 1) = v13;
  *((_QWORD *)v32 + 2) = v31;
  *((_QWORD *)v32 + 3) = a1;
  v65 = v32;
  v33 = operator new(8uLL);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  *v33 = v13;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 1);
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 1);
  rf::data_flow::details::FunctionStore::addFunctionImpl((uint64_t *)(v23 + 64), (uint64_t)&__dst, &v58, (uint64_t)&v62, (uint64_t *)&v61);
  if (v62.__r_.__value_.__r.__words[0])
  {
    v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  v34 = v65;
  if (v65 == &__dst)
  {
    v35 = 4;
    v34 = &__dst;
LABEL_80:
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  }
  else if (v65)
  {
    v35 = 5;
    goto LABEL_80;
  }
  v36 = v61;
  if (v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v57 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v37 = v60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v57 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v58, "Send snapshot to Consumers");
  v59 = 1;
  rf::getTypeName<void>(&__dst);
  v38 = rf::data_flow::details::NodeStore::createNode(v37 + 16, (unint64_t)&__dst, &__p);
  v61 = v38;
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  v39 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v39 = &off_24EFD9338;
  *((_QWORD *)v39 + 1) = v22;
  *((_QWORD *)v39 + 2) = v38;
  *((_QWORD *)v39 + 3) = a1;
  v65 = v39;
  v40 = operator new(8uLL);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  *v40 = v22;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)(v40 + 1);
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)(v40 + 1);
  rf::data_flow::details::FunctionStore::addFunctionImpl((uint64_t *)(v37 + 64), (uint64_t)&__dst, &v58, (uint64_t)&v62, (uint64_t *)&v61);
  if (v62.__r_.__value_.__r.__words[0])
  {
    v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  v41 = v65;
  if (v65 == &__dst)
  {
    v42 = 4;
    v41 = &__dst;
LABEL_95:
    (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
  }
  else if (v65)
  {
    v42 = 5;
    goto LABEL_95;
  }
  if (v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v57 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(&__dst, (_QWORD *)v60);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    __p.__r_.__value_.__r.__words[2] = v13;
    if (*((_QWORD *)&__dst + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[2] = v13;
  }
  std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(&__dst, (_QWORD *)v60);
  v48 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v51 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  v54 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)a2 = v60;
  *(_OWORD *)(a2 + 16) = v54;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(a2 + 40) = v48;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v36;
  result = 0.0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_DWORD *)(a2 + 104) = 1065353216;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_DWORD *)(a2 + 144) = 1065353216;
  return result;
}

void sub_2277BEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  if (a35 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t rf::Session::Session(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a1 + 72, (uint64_t *)(a2 + 72));
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a1 + 112, (uint64_t *)(a2 + 112));
  rf::ARState::ARState(a1 + 160, a3);
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_QWORD *)(a1 + 3248) = &off_24EFD93B8;
  *(_QWORD *)(a1 + 3256) = MEMORY[0x24BDE5410];
  *(_QWORD *)(a1 + 3272) = a1 + 3248;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_OWORD *)(a1 + 3328) = 0u;
  *(_QWORD *)(a1 + 3344) = 850045863;
  *(_QWORD *)(a1 + 3400) = 0;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  return a1;
}

void sub_2277BEFD4(_Unwind_Exception *a1)
{
  rf::Session::SessionState *v1;

  rf::Session::SessionState::~SessionState(v1);
  _Unwind_Resume(a1);
}

void rf::Session::SessionState::~SessionState(rf::Session::SessionState *this)
{
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)this + 72);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t rf::Session::Session(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[8];
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;

  rf::Session::createSessionState(a1, (uint64_t)v14);
  rf::Session::Session(a1, (uint64_t)v14, a2);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)&v18);
  v4 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_2277BF130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  rf::Session::SessionState::~SessionState((rf::Session::SessionState *)va);
  _Unwind_Resume(a1);
}

void rf::Session::update(rf::Session *this)
{
  uint64_t v2;
  double v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *((_QWORD *)this + 409);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v4 = (_QWORD *)*((_QWORD *)this + 16);
  if (v4)
  {
    v5 = v3;
    do
    {
      v6 = v4[3];
      v7 = (std::__shared_weak_count *)v4[4];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 16))(v6, v5);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  std::mutex::lock((std::mutex *)((char *)this + 3344));
  while (*((_QWORD *)this + 417))
  {
    rf::ARState::consume((unint64_t)this + 160, *(_QWORD *)(*((_QWORD *)this + 413) + ((*((_QWORD *)this + 416) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1104 * (*((_QWORD *)this + 416) & 0xFLL));
    std::deque<rf::data_flow::provider::InputData>::pop_front((int64x2_t *)this + 206);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 3344));
}

void sub_2277BF274(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  rf::data_flow::details::Context::Context((uint64_t)v8, (_QWORD *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::UpdateRequest>((uint64_t)v8, (_QWORD *)a2, (__int128 *)(a2 + 8));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  v5 = v10;
  v6 = v11;
  v10 = 0;
  v9 = 0uLL;
  *(_QWORD *)(a3 + 56) = v5;
  *(_QWORD *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_2277BF314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::UpdateRequest>(uint64_t a1, _QWORD *a2, __int128 *a3))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  _QWORD *v3;
  _QWORD *v5;
  void (*v6)(int);
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v5 = a2;
  v6 = std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100];
  v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v5);
  std::any::operator=[abi:ne180100](v3 + 3, (void (**)(uint64_t))&v6);
  return std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v6);
}

void sub_2277BF3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

void std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2277BF3F8()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::ConsumerRequest>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  rf::data_flow::details::Context::Context((uint64_t)v8, (_QWORD *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::ConsumerRequest>((uint64_t)v8, (_QWORD *)a2, (_OWORD *)(a2 + 8));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  v5 = v10;
  v6 = v11;
  v10 = 0;
  v9 = 0uLL;
  *(_QWORD *)(a3 + 56) = v5;
  *(_QWORD *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_2277BF4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::ConsumerRequest>(uint64_t a1, _QWORD *a2, _OWORD *a3))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  void (*v6)(uint64_t);
  __int128 v7;
  _QWORD *v8;
  _QWORD *v10;
  void (*v11[5])(uint64_t);

  v11[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v6 = (void (*)(uint64_t))operator new(0x30uLL);
  v7 = a3[1];
  *(_OWORD *)v6 = *a3;
  *((_OWORD *)v6 + 1) = v7;
  *((_OWORD *)v6 + 2) = a3[2];
  v11[0] = (void (*)(uint64_t))std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100];
  v11[1] = v6;
  v10 = a2;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v10);
  std::any::operator=[abi:ne180100](v8 + 3, v11);
  return std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_2277BF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

void std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2277BF610()
{
  uint64_t v0;
  uint64_t result;

  operator delete(*(void **)(v0 + 8));
  result = 0;
  *(_QWORD *)v0 = 0;
  return result;
}

uint64_t std::deque<rf::data_flow::provider::InputData>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<rf::data_flow::provider::InputData>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1104 * (v7 & 0xF);
  }
  result = rf::data_flow::provider::InputData::InputData(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<rf::data_flow::provider::InputData>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x4500uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v28);
  v31 = v30;
  v32 = operator new(0x4500uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_2277BFB68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t rf::data_flow::provider::InputData::InputData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  v4 = a1 + 176;
  *(_BYTE *)(v4 + 272) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a2 + 176);
    *(_BYTE *)(a1 + 448) = 1;
  }
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  v5 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v5;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = 0;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 680) = 0;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_QWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a2 + 728) = 0;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_QWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a2 + 752) = 0;
  *(_OWORD *)(a2 + 736) = 0u;
  v6 = *(_OWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = v6;
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 768) = 0u;
  v7 = *(_OWORD *)(a2 + 784);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v7;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_QWORD *)(a2 + 784) = 0;
  v8 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 816) = v8;
  *(_QWORD *)(a2 + 832) = 0;
  *(_OWORD *)(a2 + 816) = 0u;
  v9 = *(_OWORD *)(a2 + 848);
  v10 = *(_OWORD *)(a2 + 864);
  v11 = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 896) = v11;
  *(_OWORD *)(a1 + 848) = v9;
  *(_OWORD *)(a1 + 864) = v10;
  v12 = *(_OWORD *)(a2 + 912);
  v13 = *(_OWORD *)(a2 + 928);
  v14 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v14;
  *(_OWORD *)(a1 + 912) = v12;
  *(_OWORD *)(a1 + 928) = v13;
  v15 = *(_OWORD *)(a2 + 976);
  v16 = *(_OWORD *)(a2 + 992);
  v17 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v17;
  *(_OWORD *)(a1 + 976) = v15;
  *(_OWORD *)(a1 + 992) = v16;
  v18 = *(_OWORD *)(a2 + 1040);
  v19 = *(_OWORD *)(a2 + 1056);
  v20 = *(_OWORD *)(a2 + 1072);
  *(_BYTE *)(a1 + 1088) = *(_BYTE *)(a2 + 1088);
  *(_OWORD *)(a1 + 1072) = v20;
  *(_OWORD *)(a1 + 1056) = v19;
  *(_OWORD *)(a1 + 1040) = v18;
  return a1;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EFD92B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EFD92B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(uint64_t a1, rf::data_flow::details::Context *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD *, _QWORD, void *, void *);
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  void (*v12[5])(uint64_t);

  v12[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)(a1 + 8));
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  rf::Session::update(*(rf::Session **)(a1 + 24));
  rf::ARState::consumeChangesSinceLast(*(_QWORD *)(a1 + 24) + 160, v6);
  v7 = *(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 1952);
  v8 = (_QWORD *)(a1 + 16);
  v12[0] = (void (*)(uint64_t))std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100];
  v12[1] = v7;
  v11 = v8;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2, v8, (uint64_t)&std::piecewise_construct, &v11);
  std::any::operator=[abi:ne180100](v9 + 3, v12);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12);
  return rf::data_flow::details::Context::markOutputReady(a2, v8);
}

void sub_2277C010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2277C01B8()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EFD9338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EFD9338;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(unint64_t *a1, rf::data_flow::details::Context *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD *, _QWORD, void *, void *);
  uint64_t v6;
  uint64_t **i;

  v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, a1 + 1);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  for (i = *(uint64_t ***)(a1[3] + 88); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[3] + 16))(i[3], v6);
  return rf::data_flow::details::Context::markOutputReady(a2, a1 + 2);
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::~__func()
{
  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EFD93B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EFD93B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::target_type()
{
}

uint64_t std::deque<rf::data_flow::provider::InputData>::pop_front(int64x2_t *a1)
{
  rf::data_flow::provider::InputData::~InputData((void **)(*(_QWORD *)(a1->i64[1]
                                                                     + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))
                                                         + 1104 * (a1[2].i64[0] & 0xF)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2277F1AB0);
  return std::deque<rf::data_flow::provider::InputData>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<rf::data_flow::provider::InputData>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x10)
    a2 = 1;
  if (v2 < 0x20)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

__n128 RFPredicatePositionCompareCreate(int a1, __n128 result)
{
  uint64_t v2;
  uint64_t (**v3)();
  __n128 v4;

  v4 = result;
  switch(a1)
  {
    case 0:
      v2 = operator new();
      v3 = off_24EFD9458;
      goto LABEL_8;
    case 1:
      v2 = operator new();
      v3 = off_24EFD94A8;
      goto LABEL_8;
    case 2:
      v2 = operator new();
      v3 = off_24EFD94E8;
      goto LABEL_8;
    case 3:
      v2 = operator new();
      v3 = off_24EFD9528;
      goto LABEL_8;
    case 4:
      v2 = operator new();
      v3 = off_24EFD9568;
      goto LABEL_8;
    case 5:
      v2 = operator new();
      v3 = off_24EFD95A8;
LABEL_8:
      *(_QWORD *)v2 = v3;
      result = v4;
      *(__n128 *)(v2 + 16) = v4;
      break;
    default:
      return result;
  }
  return result;
}

__n128 RFPredicatePositionRangeCreate(int a1, __n128 result, __n128 a3)
{
  uint64_t v3;
  uint64_t (**v4)();
  __n128 v5;
  __n128 v6;

  if (a1 == 1)
  {
    v5 = result;
    v6 = a3;
    v3 = operator new();
    v4 = off_24EFD9628;
  }
  else
  {
    if (a1)
      return result;
    v5 = result;
    v6 = a3;
    v3 = operator new();
    v4 = off_24EFD95E8;
  }
  *(_QWORD *)v3 = v4;
  result = v6;
  *(__n128 *)(v3 + 16) = v5;
  *(__n128 *)(v3 + 32) = v6;
  return result;
}

uint64_t RFPredicateDestroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vcgtq_f32(a1[1], a2[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vcgeq_f32(a1[1], a2[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vcgtq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vcgeq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vceqq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::not_equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[1], a1[1]));
  v2.i32[3] = v2.i32[2];
  return vmaxvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::not_equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)0>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v5;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = a2[1];
  v3 = (uint32x4_t)vcgeq_f32(v2, a1[1]);
  v3.i32[3] = v3.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) == 0)
    return 0;
  v5 = (uint32x4_t)vcgeq_f32(a1[2], v2);
  v5.i32[3] = v5.i32[2];
  return vminvq_u32(v5) >> 31;
}

void csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)0>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

BOOL csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)1>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v5;

  if (a2[2].i32[0] == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = a2[1];
  v3 = (uint32x4_t)vcgeq_f32(v2, a1[1]);
  v3.i32[3] = v3.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) == 0)
    return 1;
  v5 = (uint32x4_t)vcgeq_f32(a1[2], v2);
  v5.i32[3] = v5.i32[2];
  return (vminvq_u32(v5) & 0x80000000) == 0;
}

void csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)1>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
  JUMPOUT(0x22E29DD50);
}

uint64_t rf::data_flow::provider::InputFrameProvider::provideData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  _BYTE v6[40];
  void *__p;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = a2[1];
  v10 = *a2;
  v11 = v2;
  v3 = a2[3];
  v12 = a2[2];
  v13 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>(v4, (uint64_t)&v9, (uint64_t)v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
}

void rf::data_flow::provider::InputFrameProvider::~InputFrameProvider(rf::data_flow::provider::InputFrameProvider *this)
{
  *(_QWORD *)this = &unk_24EFD9668;
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_24EFD9668;
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x22E29DD50);
}

void *rf::AnchorMetadataComponent::instance(rf::AnchorMetadataComponent *this)
{
  unsigned __int8 v1;

  {
    rf::AnchorMetadataComponent::AnchorMetadataComponent((rf::AnchorMetadataComponent *)&rf::AnchorMetadataComponent::instance(void)::instance);
  }
  return &rf::AnchorMetadataComponent::instance(void)::instance;
}

void sub_2277C0AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

rf::AnchorMetadataComponent *rf::AnchorMetadataComponent::AnchorMetadataComponent(rf::AnchorMetadataComponent *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  rf::AnchorMetadataComponent::buildIntrospectionInfo((uint64_t)this);
  rf::AnchorMetadataComponent::registerAnchorMetadataComponent(this);
  return this;
}

void sub_2277C0B6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v7 = v3;
  if ((_QWORD *)*v6 == v7)
  {
    v9 = v7;
    v10 = 4;
  }
  else
  {
    if (!*v6)
      goto LABEL_6;
    v10 = 5;
    v9 = (_QWORD *)*v6;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = (_QWORD *)v2[12];
  if (v11 == v5)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v12 = 5;
    v5 = (_QWORD *)v2[12];
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v12))(v5);
LABEL_11:
  v13 = (_QWORD *)v2[8];
  if (v13 == v4)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v14 = 5;
    v4 = (_QWORD *)v2[8];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v14))(v4);
LABEL_16:
  v15 = (_QWORD *)v2[4];
  if (v15 == v1)
  {
    v16 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    v16 = 5;
    v1 = (_QWORD *)v2[4];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v16))(v1);
LABEL_21:
  _Unwind_Resume(exception_object);
}

uint64_t rf::AnchorMetadataComponent::deinit(rf::AnchorMetadataComponent *this)
{
  uint64_t result;

  *((_DWORD *)this + 36) = 0;
  if (*(_QWORD *)this)
  {
    RECustomComponentTypeDestroy();
    *(_QWORD *)this = 0;
  }
  result = *((_QWORD *)this + 17);
  if (result)
  {
    result = RECIntrospectionStructUnregister();
    *((_QWORD *)this + 17) = 0;
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::buildIntrospectionInfo(uint64_t this)
{
  uint64_t v1;

  if (!*(_QWORD *)(this + 136))
  {
    v1 = this;
    this = REStructBuilderCreate();
    if (this)
    {
      if (REStructBuilderInit())
      {
        REStructBuilderAddMemberDataTypeWithTag();
        *(_QWORD *)(v1 + 136) = RECIntrospectionStructRegister();
      }
      return REStructBuilderDestroy();
    }
  }
  return this;
}

_QWORD *rf::AnchorMetadataComponent::registerAnchorMetadataComponent(_QWORD *this)
{
  _QWORD *v1;

  if (!*this)
  {
    v1 = this;
    this = (_QWORD *)RECustomComponentTypeCreate();
    *v1 = this;
  }
  return this;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_0::__invoke()
{
  return operator new();
}

void rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_1::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x22E29DD50);
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_2::__invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  RECustomComponentGetType();
  result = *(_QWORD *)(RECustomComponentTypeGetContext() + 32);
  if (result)
  {
    v3 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_3::__invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  RECustomComponentGetType();
  result = *(_QWORD *)(RECustomComponentTypeGetContext() + 64);
  if (result)
  {
    v3 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_4::__invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  RECustomComponentGetType();
  result = *(_QWORD *)(RECustomComponentTypeGetContext() + 96);
  if (result)
  {
    v3 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_5::__invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  RECustomComponentGetType();
  result = *(_QWORD *)(RECustomComponentTypeGetContext() + 128);
  if (result)
  {
    v3 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

void rf::detail::createGeomModelDescriptorFromInputMesh(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  BOOL v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  char *v40;
  char *v41;
  size_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int *v48;
  _BYTE __dst[400];
  void *__p[128];
  uint64_t v51;
  void *v52[4];

  if (!a3[4] || (*(_BYTE *)(a2 + 136) ? (v5 = *(_BYTE *)(a2 + 200) == 0) : (v5 = 1), v5))
  {
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 128);
    v8 = *(_DWORD *)(a2 + 192);
    v9 = v8 / 3;
    objc_msgSend(*(id *)(a2 + 176), "contents");
    LOBYTE(__p[0]) = 3;
    std::vector<unsigned char>::vector(v52, v8 / 3uLL, __p);
    v51 = REGeomModelDescriptorCreate();
    if (!*(_BYTE *)(a2 + 136))
      std::__throw_bad_optional_access[abi:ne180100]();
    v10 = objc_msgSend(*(id *)(a2 + 112), "contents");
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(__p, v7);
    v12 = 16 * v7;
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = (_DWORD *)(v10 + 8);
      do
      {
        *(_QWORD *)&v11 = *((_QWORD *)v14 - 1);
        DWORD2(v11) = *v14;
        *(_OWORD *)((char *)__p[0] + v13) = v11;
        v13 += 16;
        v14 += 3;
      }
      while (v12 != v13);
    }
    MEMORY[0x22E29D51C](v51, "vertexPosition", 1, v7, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_BYTE *)(a2 + 168))
    {
      v15 = objc_msgSend(*(id *)(a2 + 144), "contents");
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(__p, v7);
      if ((_DWORD)v7)
      {
        v17 = 0;
        v18 = (_DWORD *)(v15 + 8);
        do
        {
          *(_QWORD *)&v16 = *((_QWORD *)v18 - 1);
          DWORD2(v16) = *v18;
          *(_OWORD *)((char *)__p[0] + v17) = v16;
          v17 += 16;
          v18 += 3;
        }
        while (v12 != v17);
      }
      MEMORY[0x22E29D51C](v51, "vertexNormal", 1, v7, __p[0]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (a3[1] && *(_BYTE *)(a2 + 232) && objc_msgSend(*(id *)(a2 + 208), "length"))
    {
      if (!*(_BYTE *)(a2 + 232))
        std::__throw_bad_optional_access[abi:ne180100]();
      v19 = objc_msgSend(*(id *)(a2 + 208), "contents");
      if (v8 >= 3)
      {
        v21 = (unsigned __int8 *)v19;
        v20 = (char *)operator new(12 * v9);
        bzero(v20, 12 * v9);
        v22 = 0;
        if (v9 <= 1)
          v23 = 1;
        else
          v23 = v8 / 3;
        v24 = 12 * v23;
        do
        {
          v25 = *v21++;
          v26 = &v20[v22];
          *(_DWORD *)v26 = v25;
          *((_DWORD *)v26 + 1) = v25;
          *((_DWORD *)v26 + 2) = v25;
          v22 += 12;
        }
        while (v24 != v22);
      }
      else
      {
        v20 = 0;
      }
      memcpy(__p, &unk_2277F2140, sizeof(__p));
      REGeomModelDescriptorAddIndexedAttributeUInt32();
      if (v20)
        operator delete(v20);
    }
    if (a3[2] && *(_BYTE *)(a2 + 264) && objc_msgSend(*(id *)(a2 + 240), "length"))
    {
      if (!*(_BYTE *)(a2 + 264))
        std::__throw_bad_optional_access[abi:ne180100]();
      v27 = objc_msgSend(*(id *)(a2 + 240), "contents");
      memset(__p, 0, 24);
      if ((_DWORD)v7)
      {
        _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(__p, v7);
        v28 = (char *)__p[1];
        bzero(__p[1], 16 * v7);
        __p[1] = &v28[16 * v7];
        v29 = 0;
        v30 = (_DWORD *)(v27 + 8);
        do
        {
          *(_QWORD *)&v31 = *((_QWORD *)v30 - 1);
          DWORD2(v31) = *v30;
          HIDWORD(v31) = 1.0;
          *(_OWORD *)((char *)__p[0] + v29) = v31;
          v29 += 16;
          v30 += 3;
        }
        while (v12 != v29);
      }
      MEMORY[0x22E29D528](v51, "vertexColor", 1, v7, __p[0]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (a3[3] && *(_BYTE *)(a2 + 296) && objc_msgSend(*(id *)(a2 + 272), "length"))
    {
      if (!*(_BYTE *)(a2 + 296))
        std::__throw_bad_optional_access[abi:ne180100]();
      v32 = (unsigned __int8 *)objc_msgSend(*(id *)(a2 + 272), "contents");
      v33 = 3 * v9;
      if (v8 >= 3)
      {
        v34 = (char *)operator new(4 * v33);
        bzero(v34, 4 * v33);
        v35 = 0;
        if (v9 <= 1)
          v36 = 1;
        else
          v36 = v8 / 3;
        v37 = 12 * v36;
        v38 = v32;
        do
        {
          v39 = *v38++;
          v40 = &v34[v35];
          *(_DWORD *)v40 = v39;
          *((_DWORD *)v40 + 1) = v39;
          *((_DWORD *)v40 + 2) = v39;
          v35 += 12;
        }
        while (v37 != v35);
      }
      else
      {
        v34 = 0;
      }
      memcpy(__p, &unk_2277F2140, sizeof(__p));
      REGeomModelDescriptorAddIndexedAttributeUInt32();
      memcpy(__dst, &unk_2277F2540, sizeof(__dst));
      if (v8 >= 3)
      {
        v42 = 4 * v33;
        v41 = (char *)operator new(v42);
        bzero(v41, v42);
        v43 = 0;
        if (v9 <= 1)
          v44 = 1;
        else
          v44 = v8 / 3;
        v45 = 12 * v44;
        do
        {
          v47 = *v32++;
          v46 = v47;
          if (v47 >= 0x18)
            v46 = 24;
          v48 = (int *)&v41[v43];
          *v48 = v46;
          v48[1] = v46;
          v48[2] = v46;
          v43 += 12;
        }
        while (v45 != v43);
      }
      else
      {
        v41 = 0;
      }
      REGeomModelDescriptorAddIndexedAttributeVector3F();
      if (v41)
        operator delete(v41);
      if (v34)
        operator delete(v34);
    }
    *(_QWORD *)a1 = v51;
    v51 = 0;
    a1[8] = 1;
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v51);
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
  }
}

void sub_2277C142C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  void *v63;
  uint64_t v64;
  void *v66;

  if (v63)
    operator delete(v63);
  RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((_QWORD *)(v64 - 120));
  v66 = *(void **)(v64 - 112);
  if (v66)
  {
    *(_QWORD *)(v64 - 104) = v66;
    operator delete(v66);
  }
  _Unwind_Resume(a1);
}

void rf::detail::removeMeshesFrom(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  NSObject *v9;
  void **v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void **v19;
  _QWORD *v20;
  uint8_t buf[16];
  __int128 v22;
  void *__p[2];
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = (_QWORD **)a1;
    do
    {
      rf::realityFusionLogObject((rf *)a1);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        v10 = (SBYTE7(v24) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_227777000, v9, OS_LOG_TYPE_DEFAULT, "ARState: Removing mesh %s", buf, 0xCu);
        if (SBYTE7(v24) < 0)
          operator delete(__p[0]);
      }

      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8 + 90, v5);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8 + 95, v5);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(*v8, v5))
      {
        goto LABEL_12;
      }
      rf::realityFusionLogObject(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        v19 = (SBYTE7(v24) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v19;
        _os_log_error_impl(&dword_227777000, v11, OS_LOG_TYPE_ERROR, "removeMeshesFrom(): Mesh %s to be removed but doesn't exist in meshDictionary!", buf, 0xCu);
        if (SBYTE7(v24) < 0)
          operator delete(__p[0]);
      }

      if ((a3 & 1) == 0)
      {
LABEL_12:
        *(_OWORD *)buf = *(_OWORD *)v5;
        v22 = *(_OWORD *)(v5 + 16);
        v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*v8, v5);
        if (!v12)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        *(_OWORD *)__p = *(_OWORD *)buf;
        v24 = v22;
        v13 = (std::__shared_weak_count *)v12[7];
        v25 = v12[6];
        v26 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(a4, (uint64_t)__p, (uint64_t)__p);
        v16 = v26;
        if (v26)
        {
          v17 = (unint64_t *)&v26->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8, v5);
        a1 = re::internal::enableSignposts(0, 0);
        if ((_DWORD)a1)
        {
          if (!*(_QWORD *)(v5 + 24))
          {
            if (*(_BYTE *)(v5 + 16))
              v20 = *(_QWORD **)v5;
            else
              v20 = (_QWORD *)v5;
            *(_QWORD *)(v5 + 24) = ((*v20 >> 2) + (*v20 << 6) + v20[1] + 2654435769) ^ *v20;
          }
          a1 = kdebug_trace();
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
  }
}

void sub_2277C17D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updateMeshAt(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  char v36;
  _OWORD *v37;
  __int128 v38[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  _BYTE v69[16];
  _BYTE v70[32];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)*a1, v4);
      if (v7)
      {
        v9 = v7 + 6;
        v8 = (_QWORD *)v7[6];
        v10 = v8[4];
        rf::detail::createGeomModelDescriptorFromInputMesh(&v35, v4, a3);
        v11 = *(_OWORD *)(v4 + 16);
        v38[0] = *(_OWORD *)v4;
        v38[1] = v11;
        v39 = v10 + 1;
        v12 = *(_OWORD *)(v4 + 32);
        v13 = *(_OWORD *)(v4 + 48);
        v14 = *(_OWORD *)(v4 + 80);
        v42 = *(_OWORD *)(v4 + 64);
        v43 = v14;
        v40 = v12;
        v41 = v13;
        v44 = *(_BYTE *)(v4 + 96);
        v45 = *(_DWORD *)(v4 + 100);
        v46 = 0;
        LOBYTE(v47) = 0;
        v49 = 0;
        if (*(_BYTE *)(v4 + 136))
        {
          v15 = *(_QWORD *)(v4 + 112);
          *(_QWORD *)(v4 + 112) = 0;
          v47 = v15;
          v48 = *(_OWORD *)(v4 + 120);
          v49 = 1;
        }
        LOBYTE(v50) = 0;
        v52 = 0;
        if (*(_BYTE *)(v4 + 168))
        {
          v16 = *(_QWORD *)(v4 + 144);
          *(_QWORD *)(v4 + 144) = 0;
          v50 = v16;
          v51 = *(_OWORD *)(v4 + 152);
          v52 = 1;
        }
        LOBYTE(v53) = 0;
        v55 = 0;
        if (*(_BYTE *)(v4 + 200))
        {
          v17 = *(_QWORD *)(v4 + 176);
          *(_QWORD *)(v4 + 176) = 0;
          v53 = v17;
          v54 = *(_OWORD *)(v4 + 184);
          v55 = 1;
        }
        LOBYTE(v56) = 0;
        v58 = 0;
        if (*(_BYTE *)(v4 + 232))
        {
          v18 = *(_QWORD *)(v4 + 208);
          *(_QWORD *)(v4 + 208) = 0;
          v56 = v18;
          v57 = *(_OWORD *)(v4 + 216);
          v58 = 1;
        }
        LOBYTE(v59) = 0;
        v61 = 0;
        if (*(_BYTE *)(v4 + 264))
        {
          v19 = *(_QWORD *)(v4 + 240);
          *(_QWORD *)(v4 + 240) = 0;
          v59 = v19;
          v60 = *(_OWORD *)(v4 + 248);
          v61 = 1;
        }
        LOBYTE(v62) = 0;
        v64 = 0;
        if (*(_BYTE *)(v4 + 296))
        {
          v20 = *(_QWORD *)(v4 + 272);
          *(_QWORD *)(v4 + 272) = 0;
          v62 = v20;
          v63 = *(_OWORD *)(v4 + 280);
          v64 = 1;
        }
        v65 = 0;
        v66 = 0;
        LOBYTE(v67) = 0;
        v68 = 0;
        if (v36)
        {
          v67 = v35;
          v35 = 0;
          v68 = 1;
        }
        std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](v69, v8 + 46);
        std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](v70, v8 + 48);
        v70[16] = 0;
        v70[24] = 0;
        std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v38, &v33);
        std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v9, &v33);
        v37 = (_OWORD *)v4;
        v21 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a4, v4, (uint64_t)&std::piecewise_construct, &v37);
        std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v21 + 6, &v33);
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(_QWORD *)(v4 + 24))
          {
            if (*(_BYTE *)(v4 + 16))
              v28 = *(_QWORD **)v4;
            else
              v28 = (_QWORD *)v4;
            *(_QWORD *)(v4 + 24) = ((*v28 >> 2) + (*v28 << 6) + v28[1] + 2654435769) ^ *v28;
          }
          v22 = *a1;
          v37 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v22, v4, (uint64_t)&std::piecewise_construct, &v37);
          kdebug_trace();
        }
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(_QWORD *)(v4 + 24))
          {
            if (*(_BYTE *)(v4 + 16))
              v29 = *(_QWORD **)v4;
            else
              v29 = (_QWORD *)v4;
            *(_QWORD *)(v4 + 24) = ((*v29 >> 2) + (*v29 << 6) + v29[1] + 2654435769) ^ *v29;
          }
          v23 = *a1;
          v37 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v23, v4, (uint64_t)&std::piecewise_construct, &v37);
          kdebug_trace();
        }
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(_QWORD *)(v4 + 24))
          {
            if (*(_BYTE *)(v4 + 16))
              v30 = *(_QWORD **)v4;
            else
              v30 = (_QWORD *)v4;
            *(_QWORD *)(v4 + 24) = ((*v30 >> 2) + (*v30 << 6) + v30[1] + 2654435769) ^ *v30;
          }
          v24 = *a1;
          v37 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v24, v4, (uint64_t)&std::piecewise_construct, &v37);
          kdebug_trace();
        }
        v25 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        rf::data_flow::consumer::Mesh::~Mesh((id *)v38);
        if (v36)
          RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v35);
      }
      v4 += 336;
    }
    while (v4 != v5);
  }
}

void sub_2277C1D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)va);
  rf::data_flow::consumer::Mesh::~Mesh((id *)va2);
  if ((_BYTE)v17)
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((uint64_t *)va1);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

void sub_2277C1E1C()
{
  JUMPOUT(0x2277C1E14);
}

void rf::detail::insertMeshesInto(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  rf *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  void **v35;
  void *__p[2];
  __int128 v37;
  uint8_t buf[4];
  _BYTE v39[12];
  __int128 v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      rf::detail::createGeomModelDescriptorFromInputMesh(&v33, v5, a3);
      v10 = *(_OWORD *)(v5 + 16);
      v40[0] = *(_OWORD *)v5;
      v40[1] = v10;
      v41 = 1;
      v11 = *(_OWORD *)(v5 + 32);
      v12 = *(_OWORD *)(v5 + 48);
      v13 = *(_OWORD *)(v5 + 80);
      v44 = *(_OWORD *)(v5 + 64);
      v45 = v13;
      v42 = v11;
      v43 = v12;
      v46 = *(_BYTE *)(v5 + 96);
      v47 = *(_DWORD *)(v5 + 100);
      v48 = 0;
      LOBYTE(v49) = 0;
      v51 = 0;
      if (*(_BYTE *)(v5 + 136))
      {
        v14 = *(_QWORD *)(v5 + 112);
        *(_QWORD *)(v5 + 112) = 0;
        v49 = v14;
        v50 = *(_OWORD *)(v5 + 120);
        v51 = 1;
      }
      LOBYTE(v52) = 0;
      v54 = 0;
      if (*(_BYTE *)(v5 + 168))
      {
        v15 = *(_QWORD *)(v5 + 144);
        *(_QWORD *)(v5 + 144) = 0;
        v52 = v15;
        v53 = *(_OWORD *)(v5 + 152);
        v54 = 1;
      }
      LOBYTE(v55) = 0;
      v57 = 0;
      if (*(_BYTE *)(v5 + 200))
      {
        v16 = *(_QWORD *)(v5 + 176);
        *(_QWORD *)(v5 + 176) = 0;
        v55 = v16;
        v56 = *(_OWORD *)(v5 + 184);
        v57 = 1;
      }
      LOBYTE(v58) = 0;
      v60 = 0;
      if (*(_BYTE *)(v5 + 232))
      {
        v17 = *(_QWORD *)(v5 + 208);
        *(_QWORD *)(v5 + 208) = 0;
        v58 = v17;
        v59 = *(_OWORD *)(v5 + 216);
        v60 = 1;
      }
      LOBYTE(v61) = 0;
      v63 = 0;
      if (*(_BYTE *)(v5 + 264))
      {
        v18 = *(_QWORD *)(v5 + 240);
        *(_QWORD *)(v5 + 240) = 0;
        v61 = v18;
        v62 = *(_OWORD *)(v5 + 248);
        v63 = 1;
      }
      LOBYTE(v64) = 0;
      v66 = 0;
      if (*(_BYTE *)(v5 + 296))
      {
        v19 = *(_QWORD *)(v5 + 272);
        *(_QWORD *)(v5 + 272) = 0;
        v64 = v19;
        v65 = *(_OWORD *)(v5 + 280);
        v66 = 1;
      }
      v67 = 0;
      v68 = 0;
      LOBYTE(v69) = 0;
      v70 = 0;
      if (v34)
      {
        v69 = v33;
        v33 = 0;
        v70 = 1;
      }
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      rf::realityFusionLogObject(v9);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v40, __p);
        v21 = (SBYTE7(v37) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v39 = v21;
        _os_log_impl(&dword_227777000, v20, OS_LOG_TYPE_DEFAULT, "ARState: Adding mesh %s", buf, 0xCu);
        if (SBYTE7(v37) < 0)
          operator delete(__p[0]);
      }

      std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v40, buf);
      v22 = *a1;
      v23 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)__p = *(_OWORD *)v5;
      v37 = v23;
      v35 = __p;
      v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v22, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v35);
      std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v24 + 6, (uint64_t *)buf);
      __p[0] = (void *)v5;
      v25 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a4, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v25 + 6, (uint64_t *)buf);
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(_QWORD *)(v5 + 24))
        {
          if (*(_BYTE *)(v5 + 16))
            v31 = *(_QWORD **)v5;
          else
            v31 = (_QWORD *)v5;
          *(_QWORD *)(v5 + 24) = ((*v31 >> 2) + (*v31 << 6) + v31[1] + 2654435769) ^ *v31;
        }
        v26 = *a1;
        __p[0] = (void *)v5;
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v26, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(_QWORD *)(v5 + 24))
        {
          if (*(_BYTE *)(v5 + 16))
            v32 = *(_QWORD **)v5;
          else
            v32 = (_QWORD *)v5;
          *(_QWORD *)(v5 + 24) = ((*v32 >> 2) + (*v32 << 6) + v32[1] + 2654435769) ^ *v32;
        }
        v27 = *a1;
        __p[0] = (void *)v5;
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v27, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        kdebug_trace();
      }
      v28 = *(std::__shared_weak_count **)&v39[4];
      if (*(_QWORD *)&v39[4])
      {
        v29 = (unint64_t *)(*(_QWORD *)&v39[4] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      rf::data_flow::consumer::Mesh::~Mesh((id *)v40);
      if (v34)
        RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v33);
      v5 += 336;
    }
    while (v5 != v6);
  }
}

void sub_2277C22E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  uint64_t v27;
  void *v28;

  rf::data_flow::consumer::Mesh::~Mesh(&a27);
  if (a18)
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&a17);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

void sub_2277C2340()
{
  JUMPOUT(0x2277C2338);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2277C23A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2277C245C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1C0uLL);
  result = std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__shared_ptr_emplace[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,0>(v4, a1);
  *a2 = v4 + 4;
  a2[1] = v4;
  return result;
}

void sub_2277C24FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__shared_ptr_emplace[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_24EFD9698;
  a1[1] = 0;
  rf::data_flow::consumer::Mesh::Mesh((uint64_t)(a1 + 4), a2);
  return a1;
}

void sub_2277C2548(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EFD9698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EFD9698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__on_zero_shared(uint64_t a1)
{
  rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 32));
}

uint64_t rf::data_flow::consumer::Mesh::Mesh(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(result + 32) = a2[2];
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)result = v2;
  *(_OWORD *)(result + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(result + 96) = a2[6];
  *(_OWORD *)(result + 112) = v7;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 80) = v6;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 152) = 0;
  if (*((_BYTE *)a2 + 152))
  {
    v8 = *((_QWORD *)a2 + 16);
    *((_QWORD *)a2 + 16) = 0;
    *(_QWORD *)(result + 128) = v8;
    *(_OWORD *)(result + 136) = *(__int128 *)((char *)a2 + 136);
    *(_BYTE *)(result + 152) = 1;
  }
  *(_BYTE *)(result + 160) = 0;
  *(_BYTE *)(result + 184) = 0;
  if (*((_BYTE *)a2 + 184))
  {
    v9 = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 20) = 0;
    *(_QWORD *)(result + 160) = v9;
    *(_OWORD *)(result + 168) = *(__int128 *)((char *)a2 + 168);
    *(_BYTE *)(result + 184) = 1;
  }
  *(_BYTE *)(result + 192) = 0;
  *(_BYTE *)(result + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    v10 = *((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 24) = 0;
    *(_QWORD *)(result + 192) = v10;
    *(_OWORD *)(result + 200) = *(__int128 *)((char *)a2 + 200);
    *(_BYTE *)(result + 216) = 1;
  }
  *(_BYTE *)(result + 224) = 0;
  *(_BYTE *)(result + 248) = 0;
  if (*((_BYTE *)a2 + 248))
  {
    v11 = *((_QWORD *)a2 + 28);
    *((_QWORD *)a2 + 28) = 0;
    *(_QWORD *)(result + 224) = v11;
    *(_OWORD *)(result + 232) = *(__int128 *)((char *)a2 + 232);
    *(_BYTE *)(result + 248) = 1;
  }
  *(_BYTE *)(result + 256) = 0;
  *(_BYTE *)(result + 280) = 0;
  if (*((_BYTE *)a2 + 280))
  {
    v12 = *((_QWORD *)a2 + 32);
    *((_QWORD *)a2 + 32) = 0;
    *(_QWORD *)(result + 256) = v12;
    *(_OWORD *)(result + 264) = *(__int128 *)((char *)a2 + 264);
    *(_BYTE *)(result + 280) = 1;
  }
  *(_BYTE *)(result + 288) = 0;
  *(_BYTE *)(result + 312) = 0;
  if (*((_BYTE *)a2 + 312))
  {
    v13 = *((_QWORD *)a2 + 36);
    *((_QWORD *)a2 + 36) = 0;
    *(_QWORD *)(result + 288) = v13;
    *(_OWORD *)(result + 296) = *(__int128 *)((char *)a2 + 296);
    *(_BYTE *)(result + 312) = 1;
  }
  *(_BYTE *)(result + 320) = 0;
  *(_BYTE *)(result + 344) = 0;
  if (*((_BYTE *)a2 + 344))
  {
    v14 = *((_QWORD *)a2 + 40);
    *((_QWORD *)a2 + 40) = 0;
    *(_QWORD *)(result + 320) = v14;
    *(_OWORD *)(result + 328) = *(__int128 *)((char *)a2 + 328);
    *(_BYTE *)(result + 344) = 1;
  }
  *(_BYTE *)(result + 352) = 0;
  *(_BYTE *)(result + 360) = 0;
  if (*((_BYTE *)a2 + 360))
  {
    *(_QWORD *)(result + 352) = *((_QWORD *)a2 + 44);
    *((_QWORD *)a2 + 44) = 0;
    *(_BYTE *)(result + 360) = 1;
  }
  *(_BYTE *)(result + 368) = 0;
  *(_BYTE *)(result + 376) = 0;
  if (*((_BYTE *)a2 + 376))
  {
    *(_QWORD *)(result + 368) = *((_QWORD *)a2 + 46);
    *((_QWORD *)a2 + 46) = 0;
    *(_BYTE *)(result + 376) = 1;
  }
  *(_BYTE *)(result + 384) = 0;
  *(_BYTE *)(result + 392) = 0;
  if (*((_BYTE *)a2 + 392))
  {
    *(_QWORD *)(result + 384) = *((_QWORD *)a2 + 48);
    *((_QWORD *)a2 + 48) = 0;
    *(_BYTE *)(result + 392) = 1;
  }
  *(_BYTE *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 0;
  if (*((_BYTE *)a2 + 408))
  {
    v15 = *((_QWORD *)a2 + 50);
    *((_QWORD *)a2 + 50) = 0;
    *(_QWORD *)(result + 400) = v15;
    *(_BYTE *)(result + 408) = 1;
  }
  return result;
}

uint64_t RFAnchorDefinitionComponentGetCustomComponentType(rf::AnchorDefinitionComponent *a1)
{
  return *(_QWORD *)rf::AnchorDefinitionComponent::instance(a1);
}

__n128 RFAnchorDefinitionComponentInit(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t Object;
  __n128 result;

  Object = RECustomComponentGetObject();
  result = *a2;
  *(__n128 *)Object = *a2;
  *(_DWORD *)(Object + 16) = a3;
  return result;
}

__n128 RFAnchorDefinitionComponentInitWithCustomAnchor()
{
  uint64_t Object;
  __n128 *v1;
  __n128 result;
  uuid_t uu;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  Object = RECustomComponentGetObject();
  v4 = 0;
  v5 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  if (v4)
    v1 = *(__n128 **)uu;
  else
    v1 = (__n128 *)uu;
  result = *v1;
  *(__n128 *)Object = *v1;
  *(_DWORD *)(Object + 16) = 0;
  return result;
}

__n128 RFAnchorDefinitionComponentInitWithPlane(__n128 a1, __n128 a2, uint64_t a3, uint64_t a4)
{
  uint64_t Object;
  unsigned __int8 *v6;
  __n128 result;
  uuid_t uu;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  Object = RECustomComponentGetObject();
  v11 = 0;
  v12 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  if (v11)
    v6 = *(unsigned __int8 **)uu;
  else
    v6 = uu;
  *(_OWORD *)Object = *(_OWORD *)v6;
  *(_DWORD *)(Object + 16) = 1;
  *(_QWORD *)(Object + 64) = a4;
  result = a2;
  *(__n128 *)(Object + 32) = a1;
  *(__n128 *)(Object + 48) = a2;
  return result;
}

__n128 RFAnchorDefinitionComponentGetIdentifier(uint64_t a1, __n128 *a2)
{
  __n128 *Object;
  __n128 result;

  Object = (__n128 *)RECustomComponentGetObject();
  result = *Object;
  *a2 = *Object;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetAnchorType()
{
  return *(unsigned int *)(RECustomComponentGetObject() + 16);
}

__n128 RFAnchorDefinitionComponentGetCenter()
{
  return *(__n128 *)(RECustomComponentGetObject() + 32);
}

__n128 RFAnchorDefinitionComponentSetCenter(__n128 a1)
{
  __n128 *Object;
  __n128 result;

  Object = (__n128 *)RECustomComponentGetObject();
  result = a1;
  Object[2] = a1;
  return result;
}

__n128 RFAnchorDefinitionComponentGetExtent()
{
  return *(__n128 *)(RECustomComponentGetObject() + 48);
}

__n128 RFAnchorDefinitionComponentSetExtent(__n128 a1)
{
  __n128 *Object;
  __n128 result;

  Object = (__n128 *)RECustomComponentGetObject();
  result = a1;
  Object[3] = a1;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetRemoteOnly()
{
  return *(unsigned __int8 *)(RECustomComponentGetObject() + 20);
}

uint64_t RFAnchorDefinitionComponentSetRemoteOnly(uint64_t a1, char a2)
{
  uint64_t result;

  result = RECustomComponentGetObject();
  *(_BYTE *)(result + 20) = a2;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetRedefinesExistingAnchor()
{
  return *(unsigned __int8 *)(RECustomComponentGetObject() + 21);
}

uint64_t RFAnchorDefinitionComponentSetRedefinesExistingAnchor(uint64_t a1, char a2)
{
  uint64_t result;

  result = RECustomComponentGetObject();
  *(_BYTE *)(result + 21) = a2;
  return result;
}

double rf::helpers::createAnchorFromAnchorDefinitionComponent@<D0>(uint64_t a1@<X8>)
{
  uint64_t Object;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uuid_t v22;
  __int128 v23;
  uuid_t uu;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[25];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  Object = RECustomComponentGetObject();
  REComponentGetEntity();
  REEntityCalculateWorldMatrix4x4F();
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  if (*(_DWORD *)(Object + 16) == 1)
  {
    LOBYTE(v25) = 0;
    *((_QWORD *)&v25 + 1) = 0;
    uuid_clear(uu);
    v26 = xmmword_2277EE440;
    v27 = xmmword_2277EE450;
    v28 = xmmword_2277EE460;
    *(_OWORD *)v29 = xmmword_2277EE900;
    *(_DWORD *)&v29[16] = 16842752;
    *(_DWORD *)&v29[20] = 0;
    v29[24] = 0;
    v30 = 0;
    v38 = 0;
    v37 = 0uLL;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    LOBYTE(v23) = 0;
    *((_QWORD *)&v23 + 1) = 0;
    uuid_clear(v22);
    *(_OWORD *)uu = *(_OWORD *)Object;
    v25 = v23;
    v26 = v18;
    v27 = v19;
    v28 = v20;
    *(_OWORD *)v29 = v21;
    *(_WORD *)&v29[16] = *(_WORD *)(Object + 20);
    v29[18] = *(_BYTE *)(Object + 72);
    *(_OWORD *)v22 = *(_OWORD *)(Object + 32);
    rf::helpers::planeCenterAndRotationToCenterTransform((__int128 *)v22, &v31, *(float *)(Object + 52));
    v35 = *(_OWORD *)(Object + 48);
    DWORD1(v35) = 0;
    HIDWORD(v36) = *(_QWORD *)(Object + 64);
    v7 = *(_OWORD *)v29;
    *(_OWORD *)(a1 + 64) = v28;
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v29[9];
    v8 = v25;
    *(_OWORD *)a1 = *(_OWORD *)uu;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = v27;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 112) = v30;
    v10 = v32;
    *(_OWORD *)(a1 + 128) = v31;
    *(_OWORD *)(a1 + 144) = v10;
    v11 = v33;
    v12 = v34;
    v13 = v35;
    *(_QWORD *)(a1 + 208) = v36;
    *(_OWORD *)(a1 + 176) = v12;
    *(_OWORD *)(a1 + 192) = v13;
    *(_OWORD *)(a1 + 160) = v11;
    result = *(double *)&v37;
    *(_OWORD *)(a1 + 216) = v37;
    *(_QWORD *)(a1 + 232) = v38;
    *(_DWORD *)(a1 + 256) = 1;
  }
  else
  {
    LOBYTE(v25) = 0;
    *((_QWORD *)&v25 + 1) = 0;
    uuid_clear(uu);
    v26 = xmmword_2277EE440;
    v27 = xmmword_2277EE450;
    v28 = xmmword_2277EE460;
    *(_OWORD *)v29 = xmmword_2277EE900;
    *(_DWORD *)&v29[16] = 16842752;
    *(_DWORD *)&v29[20] = 0;
    v29[24] = 0;
    v30 = 0;
    LOBYTE(v23) = 0;
    *((_QWORD *)&v23 + 1) = 0;
    uuid_clear(v22);
    v16 = v23;
    *(_OWORD *)uu = *(_OWORD *)Object;
    v15 = *(_OWORD *)uu;
    v25 = v23;
    v26 = v18;
    v27 = v19;
    v28 = v20;
    *(_OWORD *)v29 = v21;
    *(_WORD *)&v29[16] = *(_WORD *)(Object + 20);
    v29[18] = *(_BYTE *)(Object + 72);
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = v27;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + 48) = v17;
    result = *(double *)&v29[9];
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v29[9];
    *(_QWORD *)(a1 + 112) = v30;
    *(_DWORD *)(a1 + 256) = 0;
  }
  return result;
}

void sub_2277C2CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{

  _Unwind_Resume(a1);
}

void rf::helpers::printAnchorDefinitionComponentInfo()
{
  _OWORD *Object;
  uint64_t Entity;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  rf *ComponentByClass;
  int v7;
  NSObject *v8;
  int v9;
  void **v10;
  _BOOL4 v11;
  void **v12;
  __int128 v13;
  _OWORD v14[4];
  void *__p[2];
  char v16;
  _OWORD v17[4];
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  _BOOL4 v27;
  __int16 v28;
  int v29;
  uuid_t uu;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  Object = (_OWORD *)RECustomComponentGetObject();
  Entity = REComponentGetEntity();
  REEntityCalculateWorldMatrix4x4F();
  v17[0] = v2;
  v17[1] = v3;
  v17[2] = v4;
  v17[3] = v5;
  v13 = v5;
  v31 = 0;
  v32 = 0;
  uuid_clear(uu);
  *(_OWORD *)uu = *Object;
  if (Entity)
  {
    while (1)
    {
      RETransformComponentGetComponentType();
      ComponentByClass = (rf *)REEntityGetComponentByClass();
      if (ComponentByClass)
        break;
      REAnchorComponentGetComponentType();
      ComponentByClass = (rf *)REEntityGetComponentByClass();
      if (ComponentByClass)
        break;
      ComponentByClass = (rf *)REEntityGetParent();
      if (!ComponentByClass)
        goto LABEL_5;
    }
    v7 = 1;
  }
  else
  {
LABEL_5:
    v7 = 0;
  }
  rf::realityFusionLogObject(ComponentByClass);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)uu, __p);
    v9 = v16;
    v10 = (void **)__p[0];
    v14[0] = xmmword_2277EE440;
    v14[1] = xmmword_2277EE450;
    v14[2] = xmmword_2277EE460;
    v14[3] = xmmword_2277EE900;
    v11 = re::areAlmostEqual<float>((float *)v17, (float *)v14);
    *(_DWORD *)buf = 136316418;
    v12 = __p;
    if (v9 < 0)
      v12 = v10;
    v19 = v12;
    v20 = 2048;
    v21 = *(float *)&v13;
    v22 = 2048;
    v23 = *((float *)&v13 + 1);
    v24 = 2048;
    v25 = *((float *)&v13 + 2);
    v26 = 1024;
    v27 = v11;
    v28 = 1024;
    v29 = v7;
    _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "AnchorDefinitionDebug: AnchorDefinitionComponent id=%s, translation=[%f, %f, %f] (isIdentity=%d) (hasTransformOrAnchor=%d)", buf, 0x36u);
    if (v16 < 0)
      operator delete(__p[0]);
  }

}

void sub_2277C2EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a25 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *RFMeshReconstructionServiceCreate()
{
  _QWORD *Instance;
  _QWORD *v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  *(_QWORD *)&v4 = 0;
  BYTE8(v4) = 1;
  v5 = 0;
  v6 = 0;
  v7 = _os_feature_enabled_impl();
  v8 = 1;
  if (qword_253DC9E28 != -1)
    dispatch_once(&qword_253DC9E28, &__block_literal_global_8);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::MeshReconstructionConsumer::MeshReconstructionConsumer((uint64_t)(v1 + 1), &v4);
  v2 = Instance[2];
  Instance[2] = v1;
  if (v2)
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::BridgableObject>::operator()[abi:ne180100](v2);
  CFRetain(Instance);
  CFRelease(Instance);
  return Instance;
}

void sub_2277C3010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E29DD50](v1, 0x10A0C40F791489ALL);
  _Unwind_Resume(a1);
}

_BYTE *RFMeshReconstructionServiceSetOcclusionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setOcclusionEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 24);
}

_BYTE *RFMeshReconstructionServiceSetLightingEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setLightingEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsLightingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 28);
}

_BYTE *RFMeshReconstructionServiceSetDynamicLightingEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setDynamicLightingEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsDynamicLightingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 30);
}

_BYTE *RFMeshReconstructionServiceSetCollisionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsCollisionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 25);
}

_BYTE *RFMeshReconstructionServiceSetPhysicsEnabled(uint64_t a1, int a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8);
  rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled(v3, a2);
  return rf::data_flow::consumer::MeshReconstructionConsumer::setRigidbodyEnabled(v3, a2);
}

uint64_t RFMeshReconstructionServiceIsPhysicsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 26);
}

_QWORD *RFMeshReconstructionServiceExportAcousticMeshComponents(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = 0;
  rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(v3, a2, a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2277C3164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void RFMeshReconstructionServiceExportAcousticMeshComponentsWithCompletion(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v8 = v7;
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v13 = 0;
  if (v7)
  {
    v12[0] = &off_24EFD9708;
    v12[1] = MEMORY[0x22E29E0BC](v7);
    v13 = v12;
  }
  rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(v9, a2, a3, (uint64_t)v12);
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v11 = 5;
LABEL_7:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

}

void sub_2277C3288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t (**RFMeshReconstructionServiceSetMeshMaterial(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setMeshMaterial((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceMeshMaterial(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t (**RFMeshReconstructionServiceSetSyntheticMeshMaterial(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setSyntheticMeshMaterial((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceSyntheticMeshMaterial(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
}

_BYTE *RFMeshReconstructionServiceSetWireframeEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setWireframeEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsWireframeEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 27);
}

uint64_t RFMeshReconstructionServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFMeshReconstructionServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFMeshReconstructionServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t ECSManagerNullable;
  char v7;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
  v10 = ECSManagerNullable;
  v11 = v7;
  v12 = a2;
  v13 = 1;
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 8) + 16))(v5 + 8, &v9);
}

double RFMeshReconstructionServiceGetBoundingBox(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v4;

  rf::data_flow::consumer::MeshReconstructionConsumer::getBoundingBox(a3, (uint64_t)&v4);
  return *(double *)&v4;
}

_BYTE *RFMeshReconstructionServiceSetAtmosphereOcclusionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setAtmosphereOcclusionEnabled((_BYTE *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsAtmosphereOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 32);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer26MeshReconstructionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_19[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::MeshReconstructionConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9E30 = 0u;
  xmmword_253DC9E40 = 0u;
  xmmword_253DC9E50 = 0u;
  unk_253DC9E60 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9E70 = 0uLL;
  unk_253DC9E80 = 0uLL;
  *((_QWORD *)&xmmword_253DC9E30 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9E40 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9E50 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::finalizeCallback;
  qword_253DC9E68 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9E70 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_10 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277C3554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::finalizeCallback(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::BridgableObject>::operator()[abi:ne180100](result);
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::BridgableObject>::operator()[abi:ne180100](uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_24EFD9E98;

  RESharedPtr<REAsset>::~RESharedPtr((_QWORD *)(a1 + 112));
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(a1 + 64);
  JUMPOUT(0x22E29DD50);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9708;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::target_type()
{
}

_QWORD *RFCameraMetadataProviderCreate()
{
  _QWORD *Instance;
  _QWORD *v1;
  uint64_t v2;

  if (qword_253DC9E98 != -1)
    dispatch_once(&qword_253DC9E98, &__block_literal_global_9);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  v1[2] = 0;
  v1[3] = 0;
  *v1 = Instance;
  v1[1] = &unk_24EFD7EA8;
  v2 = Instance[2];
  Instance[2] = v1;
  if (v2)
    MEMORY[0x22E29DD50](v2, 0xA0C40775DC4B1);
  CFRetain(Instance);
  CFRelease(Instance);
  return Instance;
}

void RFCameraMetadataProviderSetCameraExposure(uint64_t a1, float a2)
{
  rf::data_flow::provider::CameraMetadataProvider::setCameraMetadataExposure((rf::data_flow::provider::CameraMetadataProvider *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

void RFCameraMetadataProviderSetClippingPointLux(uint64_t a1, float a2)
{
  rf::data_flow::provider::CameraMetadataProvider::setClippingPointLux((rf::data_flow::provider::CameraMetadataProvider *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider22CameraMetadataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_20[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::provider::CameraMetadataProvider]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9EA0 = 0u;
  xmmword_253DC9EB0 = 0u;
  xmmword_253DC9EC0 = 0u;
  unk_253DC9ED0 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9EE0 = 0uLL;
  unk_253DC9EF0 = 0uLL;
  *((_QWORD *)&xmmword_253DC9EA0 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9EB0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::initCallback;
  *(_QWORD *)&xmmword_253DC9EC0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::finalizeCallback;
  qword_253DC9ED8 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9EE0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals_11 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277C396C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::finalizeCallback(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    JUMPOUT(0x22E29DD50);
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

id rf::realityFusionLogObject(rf *this)
{
  if (rf::realityFusionLogObject(void)::once != -1)
    dispatch_once(&rf::realityFusionLogObject(void)::once, &__block_literal_global_10);
  return (id)rf::realityFusionLogObject(void)::_realityFusionLogObject;
}

void ___ZN2rf22realityFusionLogObjectEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.re", "RealityFusion");
  v1 = (void *)rf::realityFusionLogObject(void)::_realityFusionLogObject;
  rf::realityFusionLogObject(void)::_realityFusionLogObject = (uint64_t)v0;

}

void ___ZN2rf36isRealityFusionVerboseLoggingEnabledEv_block_invoke()
{
  unsigned int v0;
  void *__p[2];
  char v2;
  void *v3[2];
  char v4;
  const void *v5;

  std::string::basic_string[abi:ne180100]<0>(v3, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v5, (const UInt8 *)v3);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.verboseLogging");
  v0 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v5, (const UInt8 *)__p);
  if (v0 <= 0x100)
    LOBYTE(v0) = 0;
  rf::isRealityFusionVerboseLoggingEnabled(void)::_realityFusionVerboseLoggingEnabled = v0 != 0;
  if (v2 < 0)
    operator delete(__p[0]);
  rf::UserDefaults::~UserDefaults(&v5);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_2277C3AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  rf::UserDefaults::~UserDefaults((const void **)(v21 - 24));
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t convert(uint64_t result)
{
  rf::internal *v1;
  std::string *v2;
  std::string v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  int v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    rf::getMessage((rf *)"Service should not be null!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v1);
    v4 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    convert(RFSceneUnderstandingService *)::$_0::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = &v3;
    else
      v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    v7 = 136315138;
    v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_2277C3C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RFGetSceneUnderstandingServiceFromRE()
{
  uint64_t result;
  rf::internal *v1;
  std::string *v2;
  std::string v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  int v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = MEMORY[0x22E29DA44]();
  if (!result)
  {
    rf::getMessage((rf *)"Service should not be null!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v1);
    v4 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    convert(RFSceneUnderstandingService *)::$_0::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = &v3;
    else
      v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    v7 = 136315138;
    v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_2277C3DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RFSceneUnderstandingServiceSetDepthFeatheringEnabled(uint64_t a1)
{
  convert(a1);
  return RESceneUnderstandingServiceSetDepthFeatheringEnabled();
}

uint64_t RFSceneUnderstandingServiceIsDepthFeatheringEnabled(uint64_t a1)
{
  convert(a1);
  return RESceneUnderstandingServiceIsDepthFeatheringEnabled();
}

void convert(RFSceneUnderstandingService *)::$_0::operator()(_QWORD *a1)
{
  rf::getMessage((rf *)"Service should not be null!", a1);
}

_QWORD *rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(_QWORD *a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;

  v3 = a2;
  *a1 = off_24EFD97F8;
  a1[1] = v3;
  a1[3] = 0;
  v4 = (objc_class *)MEMORY[0x24BEBED00];
  v5 = v3;
  v6 = objc_alloc_init(v4);
  v7 = (void *)a1[3];
  a1[3] = v6;

  return a1;
}

void sub_2277C3E80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(_QWORD *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v7;
  id v8;

  v7 = a2;
  *a1 = off_24EFD97F8;
  v8 = v7;
  a1[1] = v8;
  a1[2] = a3;
  a1[3] = 0;
  rf::synthetic::SyntheticUsdKitParser::open((uint64_t)a1, a4);

  return a1;
}

void sub_2277C3F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::open(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v3, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc(MEMORY[0x24BEBED00]);
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v7 = objc_msgSend(v5, "initSceneFromURL:error:", v6, &v10);
  v8 = v10;
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;

}

void sub_2277C3FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale(rf::synthetic::SyntheticUsdKitParser *this, float a2)
{
  void *v2;
  id v4;
  id v5;
  double v6;
  void *v7;
  void *v8;
  int v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *__p[2];
  char v15;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    v4 = v2;
    v5 = objc_alloc(MEMORY[0x24BEBECD8]);
    *(float *)&v6 = a2;
    v7 = (void *)objc_msgSend(v5, "initWithFloat:", v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "metersPerUnit");
    v8 = (void *)MEMORY[0x24BDD17C8];
    v9 = v15;
    v10 = (void **)__p[0];
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v9 >= 0)
      v12 = __p;
    else
      v12 = v10;
    objc_msgSend(v8, "stringWithCString:encoding:", v12, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setMetadataWithKey:value:", v13, v7);

    if (v15 < 0)
      operator delete(__p[0]);

  }
}

void sub_2277C40D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::save(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v3, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 24);
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "exportToURL:", v6);

  return v7;
}

void sub_2277C419C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputMeshes(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uuid_t uu;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    objc_msgSend(v5, "nodeIterator");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "nextObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v9 = 0;
      v10 = (void *)*MEMORY[0x24BEBEDF8];
      do
      {
        objc_msgSend(v8, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        {

          if (v12)
          {
            v19 = 0;
            v20 = 0;
            uuid_clear(uu);
            *(_QWORD *)uu = v9;
            rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(a1, v8, (__int128 *)uu, &v17);
            if ((_QWORD)v17)
              std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100]((uint64_t)a3, &v17);
            v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
            if (*((_QWORD *)&v17 + 1))
            {
              v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            ++v9;
          }
        }
        else
        {

        }
        objc_msgSend(v7, "nextObject");
        v16 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v16;
      }
      while (v16);
    }

  }
}

void sub_2277C4344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::isSceneUnderstandingType(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  void *__p[2];
  char v11;

  v1 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  v2 = (void *)MEMORY[0x24BDD17C8];
  v3 = v11;
  v4 = (void **)__p[0];
  v5 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v3 >= 0)
    v6 = __p;
  else
    v6 = v4;
  objc_msgSend(v2, "stringWithCString:encoding:", v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "property:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11 < 0)
    operator delete(__p[0]);

  return v8 != 0;
}

void sub_2277C4450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getSceneUnderstandingTypeProperty(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t SceneUnderstandingTypeFromString;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;

  v1 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  v2 = (void *)MEMORY[0x24BDD17C8];
  v3 = v16;
  v4 = (void **)__p[0];
  v5 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v3 >= 0)
    v6 = __p;
  else
    v6 = v4;
  objc_msgSend(v2, "stringWithCString:encoding:", v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "property:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16 < 0)
    operator delete(__p[0]);
  objc_msgSend(v8, "tokenValue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringValue");
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend(v10, "UTF8String"));

  SceneUnderstandingTypeFromString = rf::synthetic::getSceneUnderstandingTypeFromString((unsigned __int8 *)v13);
  if (v14 < 0)
    operator delete(v13[0]);

  return SceneUnderstandingTypeFromString;
}

void sub_2277C4588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  void *v8;
  __int128 v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  int v31;
  void **v32;
  uint64_t v33;
  void **v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  int v47;
  void **v48;
  uint64_t v49;
  void **v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  uint64_t SceneUnitScale;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  _QWORD *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD v72[4];
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *__p[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[32];
  __int128 v82;
  __int128 v83;
  __int128 v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  int v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  id v108;
  char v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  id v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = v7;
  if (!*(_QWORD *)(a1 + 8))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_78;
  }
  v9 = a3[1];
  v84[0] = *a3;
  v84[1] = v9;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 1;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  v95 = 0;
  LOBYTE(v96) = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  v103 = 0;
  LOBYTE(v104) = 0;
  v107 = 0;
  LOBYTE(v108) = 0;
  v109 = 0;
  LOBYTE(v110) = 0;
  v113 = 0;
  LOBYTE(v114) = 0;
  v115 = 0;
  objc_msgSend(v7, "property:", CFSTR("points"));
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v69, "data");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v70, "arraySize");
  objc_msgSend(v70, "dataNoCopy");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "copy");

  v13 = *(void **)(a1 + 8);
  v68 = objc_retainAutorelease(v12);
  v14 = v10;
  v15 = 12 * v10;
  v95 = 1;
  v92 = (id)objc_msgSend(v13, "newBufferWithBytes:length:options:", objc_msgSend(v68, "bytes"), v15, 0);
  v93 = 30;
  v94 = v10;
  objc_msgSend(v8, "property:", CFSTR("faceVertexIndices"));
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "data");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v67, "arraySize");
  objc_msgSend(v67, "dataNoCopy");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "copy");

  v19 = *(void **)(a1 + 8);
  v65 = objc_retainAutorelease(v18);
  v103 = 1;
  v100 = (id)objc_msgSend(v19, "newBufferWithBytes:length:options:", objc_msgSend(v65, "bytes"), 4 * v16, 0);
  v101 = 36;
  v102 = v16;
  objc_msgSend(v8, "property:", CFSTR("normals"));
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "data");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  if (v71)
  {
    objc_msgSend(v71, "dataNoCopy");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v20, "copy");

    v22 = *(void **)(a1 + 8);
    v23 = objc_retainAutorelease(v21);
    v99 = 1;
    v96 = (id)objc_msgSend(v22, "newBufferWithBytes:length:options:", objc_msgSend(v23, "bytes"), v15, 0);
    v97 = 30;
    v98 = v14;

  }
  objc_msgSend(v8, "property:", CFSTR("classifications"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v16 / 3;
  if (v24)
  {
    std::vector<int>::vector((std::vector<int> *)v81, v25);
    objc_msgSend(v24, "intArray:maxCount:", *(_QWORD *)v81, v25);
    std::vector<unsigned char>::vector(__p, v25);
    if (v16 >= 3)
    {
      v26 = 0;
      if (v25 <= 1)
        v27 = 1;
      else
        v27 = v25;
      do
      {
        *((_BYTE *)__p[0] + v26) = *(_DWORD *)(*(_QWORD *)v81 + 4 * v26);
        ++v26;
      }
      while (v27 != v26);
    }
    v28 = (void *)objc_msgSend(*(id *)(a1 + 8), "newBufferWithBytes:length:options:", __p[0], v25, 0);
    if (v107)
    {
      v29 = v104;
      v104 = v28;

    }
    else
    {
      v104 = v28;
      v107 = 1;
    }
    v105 = 45;
    v106 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)v81)
    {
      *(_QWORD *)&v81[8] = *(_QWORD *)v81;
      operator delete(*(void **)v81);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v75, "preliminary:sceneUnderstanding:classification");
  v30 = (void *)MEMORY[0x24BDD17C8];
  v31 = v76;
  v32 = (void **)v75[0];
  v33 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v31 >= 0)
    v34 = v75;
  else
    v34 = v32;
  objc_msgSend(v30, "stringWithCString:encoding:", v34, v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "property:", v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if (v76 < 0)
  {
    operator delete(v75[0]);
    if (!v36)
      goto LABEL_34;
  }
  else if (!v36)
  {
    goto LABEL_34;
  }
  objc_msgSend(v36, "tokenValue");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "stringValue");
  v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v81, (char *)objc_msgSend(v38, "UTF8String"));

  LOBYTE(v72[0]) = rf::synthetic::getClassificationFromString(v81);
  std::vector<unsigned char>::vector(__p, v25, v72);
  v39 = (void *)objc_msgSend(*(id *)(a1 + 8), "newBufferWithBytes:length:options:", __p[0], v25, 0);
  if (v107)
  {
    v40 = v104;
    v104 = v39;

  }
  else
  {
    v104 = v39;
    v107 = 1;
  }
  v105 = 45;
  v106 = v25;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);

LABEL_34:
  objc_msgSend(v8, "property:", CFSTR("materials"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
  {
    std::vector<int>::vector((std::vector<int> *)v81, v25);
    objc_msgSend(v41, "intArray:maxCount:", *(_QWORD *)v81, v25);
    std::vector<unsigned char>::vector(__p, v25);
    if (v16 >= 3)
    {
      v42 = 0;
      if (v25 <= 1)
        v43 = 1;
      else
        v43 = v25;
      do
      {
        *((_BYTE *)__p[0] + v42) = *(_DWORD *)(*(_QWORD *)v81 + 4 * v42);
        ++v42;
      }
      while (v43 != v42);
    }
    v44 = (void *)objc_msgSend(*(id *)(a1 + 8), "newBufferWithBytes:length:options:", __p[0], v25, 0);
    if (v113)
    {
      v45 = v110;
      v110 = v44;

    }
    else
    {
      v110 = v44;
      v113 = 1;
    }
    v111 = 45;
    v112 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)v81)
    {
      *(_QWORD *)&v81[8] = *(_QWORD *)v81;
      operator delete(*(void **)v81);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "preliminary:sceneUnderstanding:material");
  v46 = (void *)MEMORY[0x24BDD17C8];
  v47 = v74;
  v48 = (void **)v73[0];
  v49 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v47 >= 0)
    v50 = v73;
  else
    v50 = v48;
  objc_msgSend(v46, "stringWithCString:encoding:", v50, v49);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "property:", v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  if (v74 < 0)
  {
    operator delete(v73[0]);
    if (!v52)
      goto LABEL_62;
LABEL_54:
    objc_msgSend(v52, "tokenValue");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "stringValue");
    v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v81, (char *)objc_msgSend(v54, "UTF8String"));

    LOBYTE(v72[0]) = 0;
    LOBYTE(v72[0]) = rf::synthetic::getMaterialFromString(v81);
    std::vector<unsigned char>::vector(__p, v25, v72);
    v55 = (void *)objc_msgSend(*(id *)(a1 + 8), "newBufferWithBytes:length:options:", __p[0], v25, 0);
    if (v113)
    {
      v56 = v110;
      v110 = v55;

    }
    else
    {
      v110 = v55;
      v113 = 1;
    }
    v111 = 45;
    v112 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);

    goto LABEL_62;
  }
  if (v52)
    goto LABEL_54;
LABEL_62:
  v59 = v58;
  v60 = 0;
  v62.i64[0] = 0;
  v61.i32[0] = 0;
  v61.i64[1] = 0;
  v61.i32[1] = HIDWORD(SceneUnitScale);
  v62.i64[1] = v59;
  *(_OWORD *)__p = v72[0];
  v78 = v72[1];
  v79 = v72[2];
  v80 = v72[3];
  do
  {
    *(float32x4_t *)&v81[v60 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, COERCE_FLOAT(*(_OWORD *)&__p[v60])), v61, (float32x2_t)__p[v60], 1), v62, *(float32x4_t *)&__p[v60], 2), (float32x4_t)xmmword_2277EE900, *(float32x4_t *)&__p[v60], 3);
    v60 += 2;
  }
  while (v60 != 8);
  v85 = *(_OWORD *)v81;
  v86 = *(_OWORD *)&v81[16];
  v87 = v82;
  v88 = v83;
  v63 = operator new(0x170uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24EFD98D0;
  std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>((uint64_t)(v63 + 4), v84);
  *a4 = v63 + 4;
  a4[1] = v63;

  if (v115)
  if (v113)

  if (v109)
  if (v107)

  if (v103)
  if (v99)

  if (v95)
LABEL_78:

}

void sub_2277C4EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;

  if (__p)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);

  rf::data_flow::provider::InputMesh::~InputMesh(&a56);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    if (v5 == v10)
    {
      v9 = v16 + 16;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v9 = v16 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
      while ((_QWORD *)v22 != v10)
      {
        v22 -= 16;
        std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v5 = *(_QWORD *)a2;
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void rf::synthetic::SyntheticUsdKitParser::getInputAnchors(rf::synthetic::SyntheticUsdKitParser *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BOOL4 isSceneUnderstandingType;
  unsigned int SceneUnderstandingTypeProperty;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uuid_t uu;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    objc_msgSend(v4, "nodeIterator");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "nextObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = 0;
      v8 = (void *)*MEMORY[0x24BEBEDF8];
      do
      {
        objc_msgSend(v6, "type");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9 == v8)
        {

          if (isSceneUnderstandingType)
          {
            if (rf::synthetic::isSceneUnderstandingAnchor(SceneUnderstandingTypeProperty))
            {
              v18 = 0;
              v19 = 0;
              uuid_clear(uu);
              *(_QWORD *)uu = v7;
              rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode((uint64_t)this, v6, (__int128 *)uu, (uint64_t *)&v16);
              if ((_QWORD)v16)
                std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100]((uint64_t)a2, &v16);
              v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
              if (*((_QWORD *)&v16 + 1))
              {
                v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 - 1, v13));
                if (!v14)
                {
                  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                  std::__shared_weak_count::__release_weak(v12);
                }
              }
              ++v7;
            }
          }
        }
        else
        {

        }
        objc_msgSend(v5, "nextObject");
        v15 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v15;
      }
      while (v15);
    }

  }
}

void sub_2277C53D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  int SceneUnderstandingTypeProperty;
  uint64_t SceneUnitScale;
  unint64_t v10;
  float32x4_t v11;
  unsigned int v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float v20;
  __int128 v21;
  id v22;
  void *v23;
  int v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void *v28;
  void *v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  id v33;
  void *v34;
  int v35;
  void **v36;
  uint64_t v37;
  void **v38;
  void *v39;
  void *v40;
  char v41;
  id v42;
  void *v43;
  int v44;
  void **v45;
  uint64_t v46;
  void **v47;
  void *v48;
  void *v49;
  char v50;
  float32x4_t v51;
  uint64_t v52;
  unint64_t PlaneExtentProperty;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  void **v62;
  uint64_t v63;
  void **v64;
  void *v65;
  void *v66;
  id v67;
  int AlignmentFromString;
  id v69;
  void *v70;
  int v71;
  void **v72;
  uint64_t v73;
  void **v74;
  void *v75;
  void *v76;
  id v77;
  int PlaneClassificationFromString;
  _QWORD *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  __int128 v91;
  __int128 v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int v97;
  int v98;
  char v99;
  id v100;
  void *v101[2];
  char v102;
  void *__p;
  void *v104;
  char v105;
  unsigned __int8 v106[16];
  float32x4_t v107;
  void *v108[2];
  __int128 v109;
  uuid_t uu;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  *(_OWORD *)uu = 0u;
  v111 = 0u;
  uuid_clear(uu);
  v112 = xmmword_2277EE440;
  v113 = xmmword_2277EE450;
  v114 = xmmword_2277EE460;
  v115 = xmmword_2277EE900;
  *(_QWORD *)&v116 = 16842752;
  BYTE8(v116) = 0;
  *(_QWORD *)&v117 = 0;
  v118 = 0;
  v80 = v86;
  LODWORD(v10) = 0;
  HIDWORD(v10) = HIDWORD(SceneUnitScale);
  v11.i64[0] = 0;
  v11.i64[1] = v12;
  v13 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, v80.f32[0]), (float32x4_t)v10, *(float32x2_t *)v80.f32, 1), v11, v80, 2), (float32x4_t)0);
  v13.i32[3] = v80.i32[3];
  v86 = v13;
  v14 = (int32x4_t)vmulq_f32(v83, v83);
  v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)));
  v14.i32[0] = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).u32[0];
  v15 = (int32x4_t)vmulq_f32(v84, v84);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  v16 = vmulq_n_f32(v83, *(float *)v14.i32);
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  v17 = vmulq_n_f32(v84, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]);
  v18 = (int32x4_t)vmulq_f32(v85, v85);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  *(float32x2_t *)v15.i8 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  *(float32x2_t *)v15.i8 = vmul_f32(*(float32x2_t *)v15.i8, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)));
  v83.i32[2] = v16.i32[2];
  v84.i32[2] = v17.i32[2];
  v83.i64[0] = v16.i64[0];
  v84.i64[0] = v17.i64[0];
  v19 = vmulq_n_f32(v85, vmul_f32(*(float32x2_t *)v15.i8, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8))).f32[0]);
  v85.i64[0] = v19.i64[0];
  v85.i32[2] = v19.i32[2];
  if (SceneUnderstandingTypeProperty == 2)
  {
    v31 = a3[1];
    v91 = *a3;
    v92 = v31;
    v93 = v83;
    v94 = v84;
    v95 = v85;
    v96 = v86;
    v97 = 16842752;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v107.i8[0] = 0;
    v107.i64[1] = 0;
    uuid_clear(v106);
    *(_OWORD *)v108 = 0u;
    v109 = 0u;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
    if (v105 < 0)
      operator delete(__p);
    if (v102 < 0)
      operator delete(v101[0]);
    goto LABEL_14;
  }
  if (SceneUnderstandingTypeProperty == 1)
  {
    v32 = a3[1];
    v91 = *a3;
    v92 = v32;
    v93 = v83;
    v94 = v84;
    v95 = v85;
    v96 = v86;
    LOWORD(v97) = 0;
    BYTE2(v97) = 1;
    v33 = v7;
    std::string::basic_string[abi:ne180100]<0>(v89, "isTracked");
    v34 = (void *)MEMORY[0x24BDD17C8];
    v35 = v90;
    v36 = (void **)v89[0];
    v37 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v35 >= 0)
      v38 = v89;
    else
      v38 = v36;
    objc_msgSend(v34, "stringWithCString:encoding:", v38, v37, 16842752);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "property:", v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (v90 < 0)
    {
      operator delete(v89[0]);
      if (v40)
        goto LABEL_20;
    }
    else if (v40)
    {
LABEL_20:
      v41 = objc_msgSend(v40, "BOOLValue");
      goto LABEL_23;
    }
    v41 = 0;
LABEL_23:

    HIBYTE(v97) = v41;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v42 = v33;
    std::string::basic_string[abi:ne180100]<0>(v89, "isDetectionOnly");
    v43 = (void *)MEMORY[0x24BDD17C8];
    v44 = v90;
    v45 = (void **)v89[0];
    v46 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v44 >= 0)
      v47 = v89;
    else
      v47 = v45;
    objc_msgSend(v43, "stringWithCString:encoding:", v47, v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "property:", v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    if (v90 < 0)
    {
      operator delete(v89[0]);
      if (v49)
        goto LABEL_28;
    }
    else if (v49)
    {
LABEL_28:
      v50 = objc_msgSend(v49, "BOOLValue");
LABEL_41:

      LOBYTE(v101[0]) = v50;
      std::string::basic_string[abi:ne180100]<0>(&v104, "");
      v107 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
      if ((char)v106[7] < 0)
        operator delete(v104);
      if (SHIBYTE(__p) < 0)
        operator delete(v101[1]);
LABEL_14:

      goto LABEL_61;
    }
    v50 = 1;
    goto LABEL_41;
  }
  if (SceneUnderstandingTypeProperty)
    goto LABEL_61;
  v21 = a3[1];
  v91 = *a3;
  v92 = v21;
  v93 = v83;
  v94 = v84;
  v95 = v85;
  v96 = v86;
  v97 = 16842752;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v22 = v7;
  std::string::basic_string[abi:ne180100]<0>(v89, "center");
  v23 = (void *)MEMORY[0x24BDD17C8];
  v24 = v90;
  v25 = (void **)v89[0];
  v26 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v24 >= 0)
    v27 = v89;
  else
    v27 = v25;
  objc_msgSend(v23, "stringWithCString:encoding:", v27, v26, 16842752);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "property:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v29)
      goto LABEL_9;
  }
  else if (v29)
  {
LABEL_9:
    objc_msgSend(v29, "float3Value");
    v81 = v30;
    goto LABEL_31;
  }
  v81 = 0u;
LABEL_31:

  v51.i64[1] = v52;
  v82 = vmulq_f32(v81, v51);
  rf::helpers::planeCenterAndRotationToCenterTransform((__int128 *)&v82, v101, v20);
  v55 = v54;
  v57.i64[0] = PlaneExtentProperty;
  v57.i64[1] = v55;
  v58.i64[0] = v56;
  v58.i64[1] = v59;
  v107 = vmulq_f32(v57, v58);
  v60 = v22;
  std::string::basic_string[abi:ne180100]<0>(v89, "preliminary:sceneUnderstanding:plane:alignment");
  v61 = (void *)MEMORY[0x24BDD17C8];
  LODWORD(PlaneExtentProperty) = v90;
  v62 = (void **)v89[0];
  v63 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if ((PlaneExtentProperty & 0x80000000) == 0)
    v64 = v89;
  else
    v64 = v62;
  objc_msgSend(v61, "stringWithCString:encoding:", v64, v63);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "property:", v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v66)
      goto LABEL_36;
LABEL_47:
    AlignmentFromString = 0;
    goto LABEL_48;
  }
  if (!v66)
    goto LABEL_47;
LABEL_36:
  objc_msgSend(v66, "stringValue");
  v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v87, (char *)objc_msgSend(v67, "UTF8String"));
  AlignmentFromString = rf::synthetic::getAlignmentFromString((unsigned __int8 *)v87);
  if (v88 < 0)
    operator delete(v87[0]);

LABEL_48:
  LODWORD(v108[0]) = AlignmentFromString;
  v69 = v60;
  std::string::basic_string[abi:ne180100]<0>(v89, "preliminary:sceneUnderstanding:planeClassification");
  v70 = (void *)MEMORY[0x24BDD17C8];
  v71 = v90;
  v72 = (void **)v89[0];
  v73 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v71 >= 0)
    v74 = v89;
  else
    v74 = v72;
  objc_msgSend(v70, "stringWithCString:encoding:", v74, v73);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v69, "property:", v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v76)
      goto LABEL_53;
  }
  else if (v76)
  {
LABEL_53:
    objc_msgSend(v76, "stringValue");
    v77 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v87, (char *)objc_msgSend(v77, "UTF8String"));
    PlaneClassificationFromString = rf::synthetic::getPlaneClassificationFromString((unsigned __int8 *)v87);
    if (v88 < 0)
      operator delete(v87[0]);

    goto LABEL_58;
  }
  PlaneClassificationFromString = 0;
LABEL_58:

  HIDWORD(v108[0]) = PlaneClassificationFromString;
  v109 = 0uLL;
  v108[1] = 0;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
  if (v108[1])
  {
    *(void **)&v109 = v108[1];
    operator delete(v108[1]);
  }

LABEL_61:
  v79 = operator new(0x130uLL);
  v79[1] = 0;
  v79[2] = 0;
  *v79 = &off_24EFD9920;
  *a4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v79 + 4), (uint64_t)uu);
  a4[1] = (uint64_t)v79;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);

}

void sub_2277C5C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  if (a28 < 0)
    operator delete(__p);

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputObjects(rf::synthetic::SyntheticUsdKitParser *this@<X0>, char **a2@<X8>)
{
  rf::synthetic::SyntheticUsdKitParser *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  rf::synthetic::SyntheticUsdKitParser *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  unsigned __int8 v40;
  uuid_t uu;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v2 = this;
  v44 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    objc_msgSend(v4, "nodeIterator");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "nextObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = 0;
      while (1)
      {
        objc_msgSend(v6, "metadataWithKey:", CFSTR("typeName"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringValue");
        v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v9, "UTF8String"));

        v10 = v40;
        if ((v40 & 0x80u) != 0)
          v10 = (unint64_t)__p[1];
        if (v10 == 14)
        {
          v11 = (void **)__p[0];
          if ((v40 & 0x80u) == 0)
            v11 = __p;
          v12 = *v11;
          v13 = *(uint64_t *)((char *)v11 + 6);
          if (v12 == (void *)0x656E6563535F5241 && v13 == 0x7463656A624F656ELL)
            break;
        }
        if ((v40 & 0x80) != 0)
          goto LABEL_14;
LABEL_15:
        objc_msgSend(v5, "nextObject", v37);
        v15 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v15;
        if (!v15)
          goto LABEL_50;
      }
      v42 = 0;
      v43 = 0;
      uuid_clear(uu);
      *(_QWORD *)uu = v7;
      rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(&v38, (uint64_t)v2, v6, (__int128 *)uu);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if ((_QWORD)v38)
      {
        v18 = a2[1];
        v17 = (unint64_t)a2[2];
        if ((unint64_t)v18 >= v17)
        {
          v22 = v2;
          v23 = *a2;
          v24 = (v18 - *a2) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v38;
          v26 = v17 - (_QWORD)v23;
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v24];
          *(_OWORD *)v29 = v37;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }
          v2 = v22;
          if (v18 == v23)
          {
            v21 = v29 + 16;
            *a2 = v29;
            a2[1] = v29 + 16;
            a2[2] = &v28[16 * v27];
          }
          else
          {
            v32 = v18;
            v33 = v29;
            do
            {
              v34 = *((_OWORD *)v32 - 1);
              v32 -= 16;
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 16;
              *(_QWORD *)v32 = 0;
              *((_QWORD *)v32 + 1) = 0;
            }
            while (v32 != v23);
            v21 = v29 + 16;
            *a2 = v33;
            a2[1] = v29 + 16;
            a2[2] = &v28[16 * v27];
            do
            {
              v18 -= 16;
              std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)v18);
            }
            while (v18 != v23);
            v18 = v23;
          }
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_OWORD *)v18 = v38;
          if (v16)
          {
            v19 = (unint64_t *)&v16->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = v18 + 16;
        }
        a2[1] = v21;
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      }
      if (v16)
      {
        v35 = (unint64_t *)&v16->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v7;
      if ((v40 & 0x80) == 0)
        goto LABEL_15;
LABEL_14:
      operator delete(__p[0]);
      goto LABEL_15;
    }
LABEL_50:

  }
}

void sub_2277C61B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(_QWORD *a1, uint64_t a2, void *a3, __int128 *a4)
{
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  float32x4_t v15;
  uint64_t SceneUnitScale;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t PlaneExtentProperty;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  int v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void *v34;
  void *v35;
  int v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  float32x4_t v45;
  __int128 v46;
  float32x4_t v47;
  __int128 v48;
  float32x4_t v49;
  __int128 v50;
  float32x4_t v51;
  _OWORD v52[4];
  void *v53[2];
  unsigned __int8 v54;
  _OWORD v55[4];
  void *__p[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  uuid_t uu;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v63.i8[0] = 0;
  v63.i64[1] = 0;
  uuid_clear(uu);
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  objc_msgSend(v7, "metadataWithKey:", CFSTR("typeName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringValue");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v53, (char *)objc_msgSend(v9, "UTF8String"));

  v10 = v54;
  if ((v54 & 0x80u) != 0)
    v10 = (unint64_t)v53[1];
  if (v10 == 14)
  {
    v11 = v53;
    if ((v54 & 0x80u) != 0)
      v11 = (void **)v53[0];
    v12 = *v11;
    v13 = *(uint64_t *)((char *)v11 + 6);
    if (v12 == (void *)0x656E6563535F5241 && v13 == 0x7463656A624F656ELL)
    {
      v15 = (float32x4_t)a4[1];
      v60 = *a4;
      v61 = v15;
      v18 = v17;
      v19 = 0;
      v21.i64[0] = 0;
      v20.i32[0] = 0;
      v20.i64[1] = 0;
      v20.i32[1] = HIDWORD(SceneUnitScale);
      v21.i64[1] = v18;
      v55[0] = v52[0];
      v55[1] = v52[1];
      v55[2] = v52[2];
      v55[3] = v52[3];
      do
      {
        *(float32x4_t *)&__p[v19 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, COERCE_FLOAT(v55[v19 / 0x10])), v20, *(float32x2_t *)&v55[v19 / 0x10], 1), v21, (float32x4_t)v55[v19 / 0x10], 2), (float32x4_t)xmmword_2277EE900, (float32x4_t)v55[v19 / 0x10], 3);
        v19 += 16;
      }
      while (v19 != 64);
      v48 = v57;
      v50 = *(_OWORD *)__p;
      v44 = v59;
      v46 = v58;
      v24 = v23;
      v27 = v26;
      v28 = v7;
      std::string::basic_string[abi:ne180100]<0>(__p, "classification");
      v29 = (void *)MEMORY[0x24BDD17C8];
      v30 = SBYTE7(v57);
      v31 = (void **)__p[0];
      v32 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
      if (v30 >= 0)
        v33 = __p;
      else
        v33 = v31;
      objc_msgSend(v29, "stringWithCString:encoding:", v33, v32, v44, v46, v48, v50);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "property:", v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      if (SBYTE7(v57) < 0)
        operator delete(__p[0]);
      v36 = objc_msgSend(v35, "intValue");

      v37.i64[0] = PlaneExtentProperty;
      v38.i64[0] = v25;
      v37.i64[1] = v24;
      v38.i64[1] = v27;
      *(_OWORD *)uu = v60;
      v63 = v61;
      v64 = v51;
      v65 = v49;
      v66 = v47;
      v67 = v45;
      v68 = vmulq_f32(v37, v38);
      v69.i64[0] = v36;
    }
  }
  v39 = (float32x4_t *)operator new(0xA0uLL);
  v39->i64[1] = 0;
  v39[1].i64[0] = 0;
  v39->i64[0] = (uint64_t)&off_24EFD9970;
  v40 = v67;
  v39[6] = v66;
  v39[7] = v40;
  v41 = v69;
  v39[8] = v68;
  v39[9] = v41;
  v42 = v63;
  v39[2] = *(float32x4_t *)uu;
  v39[3] = v42;
  v43 = v65;
  v39[4] = v64;
  v39[5] = v43;
  *a1 = v39 + 2;
  a1[1] = v39;
  if ((char)v54 < 0)
    operator delete(v53[0]);

}

void sub_2277C654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  void *v47;

  if (a31 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbes(rf::synthetic::SyntheticUsdKitParser *this@<X0>, char **a2@<X8>)
{
  rf::synthetic::SyntheticUsdKitParser *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  void **v11;
  void *v12;
  int v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  rf::synthetic::SyntheticUsdKitParser *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  unsigned __int8 v40;
  uuid_t uu;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v2 = this;
  v44 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    objc_msgSend(v4, "nodeIterator");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "nextObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = 0;
      while (1)
      {
        objc_msgSend(v6, "metadataWithKey:", CFSTR("typeName"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringValue");
        v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v9, "UTF8String"));

        v10 = v40;
        if ((v40 & 0x80u) != 0)
          v10 = (unint64_t)__p[1];
        if (v10 == 9)
        {
          v11 = (void **)__p[0];
          if ((v40 & 0x80u) == 0)
            v11 = __p;
          v12 = *v11;
          v13 = *((unsigned __int8 *)v11 + 8);
          if (v12 == (void *)0x6867694C656D6F44 && v13 == 116)
            break;
        }
        if ((v40 & 0x80) != 0)
          goto LABEL_14;
LABEL_15:
        objc_msgSend(v5, "nextObject", v37);
        v15 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v15;
        if (!v15)
          goto LABEL_50;
      }
      v42 = 0;
      v43 = 0;
      uuid_clear(uu);
      *(_QWORD *)uu = v7;
      rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(&v38, (uint64_t)v2, v6, uu);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if ((_QWORD)v38)
      {
        v18 = a2[1];
        v17 = (unint64_t)a2[2];
        if ((unint64_t)v18 >= v17)
        {
          v22 = v2;
          v23 = *a2;
          v24 = (v18 - *a2) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v38;
          v26 = v17 - (_QWORD)v23;
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v24];
          *(_OWORD *)v29 = v37;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }
          v2 = v22;
          if (v18 == v23)
          {
            v21 = v29 + 16;
            *a2 = v29;
            a2[1] = v29 + 16;
            a2[2] = &v28[16 * v27];
          }
          else
          {
            v32 = v18;
            v33 = v29;
            do
            {
              v34 = *((_OWORD *)v32 - 1);
              v32 -= 16;
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 16;
              *(_QWORD *)v32 = 0;
              *((_QWORD *)v32 + 1) = 0;
            }
            while (v32 != v23);
            v21 = v29 + 16;
            *a2 = v33;
            a2[1] = v29 + 16;
            a2[2] = &v28[16 * v27];
            do
            {
              v18 -= 16;
              std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)v18);
            }
            while (v18 != v23);
            v18 = v23;
          }
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_OWORD *)v18 = v38;
          if (v16)
          {
            v19 = (unint64_t *)&v16->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = v18 + 16;
        }
        a2[1] = v21;
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      }
      if (v16)
      {
        v35 = (unint64_t *)&v16->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v7;
      if ((v40 & 0x80) == 0)
        goto LABEL_15;
LABEL_14:
      operator delete(__p[0]);
      goto LABEL_15;
    }
LABEL_50:

  }
}

void sub_2277C6910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(_QWORD *a1, uint64_t a2, void *a3, _OWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  void **v11;
  void *v12;
  int v13;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;
  void *v20;
  void *v21;
  rf *v22;
  rf *v23;
  void *v24;
  char v25;
  char v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t i;
  int v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  __int128 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  size_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _QWORD v53[6];
  _QWORD v54[7];
  void *__p[2];
  unsigned __int8 v56;
  _BYTE buf[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int32x4_t v62;
  id v63;
  char v64;
  uint64_t v65;
  uuid_t uu;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int32x4_t v72;
  id v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  if (!*(_QWORD *)(a2 + 16))
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_19;
  }
  LOBYTE(v67) = 0;
  *((_QWORD *)&v67 + 1) = 0;
  uuid_clear(uu);
  v74 = 0;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  LOBYTE(v73) = 0;
  v75 = 1065353216;
  objc_msgSend(v7, "metadataWithKey:", CFSTR("typeName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringValue");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v9, "UTF8String"));

  v10 = v56;
  if ((v56 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10 != 9)
    goto LABEL_11;
  v11 = __p;
  if ((v56 & 0x80u) != 0)
    v11 = (void **)__p[0];
  v12 = *v11;
  v13 = *((unsigned __int8 *)v11 + 8);
  if (v12 != (void *)0x6867694C656D6F44 || v13 != 116)
    goto LABEL_11;
  objc_msgSend(v7, "property:", CFSTR("inputs:texture:file"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "resourcePath");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BEBECF8], "resourceWithResourcePath:", v21);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "dataNoCopy");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  RETextureImportOperationCreateWithData();
  RETextureImportOperationSetMipmapMode();
  RETextureImportOperationCopyTextureDescriptor();
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "setStorageMode:", 0);
  objc_msgSend(v52, "setCompressionType:", 0);
  v22 = (rf *)objc_msgSend(v52, "pixelFormat");
  if (v22 != (rf *)115)
  {
    rf::realityFusionLogObject(v22);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_227777000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Expected a texture in RGBA16Float format.", buf, 2u);
    }
    goto LABEL_41;
  }
  v23 = (rf *)objc_msgSend(v52, "width");
  if (v23 != (rf *)256)
  {
    rf::realityFusionLogObject(v23);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v42 = objc_msgSend(v52, "width");
      v43 = objc_msgSend(v52, "height");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v42;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v43;
      _os_log_error_impl(&dword_227777000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Expected a texture with width 256. Loaded texture is %lux%lu.", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if (objc_msgSend(v52, "textureType") == 5)
  {
    objc_msgSend(v21, "path");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "hasSuffix:", CFSTR("_envProbeMap.ktx"));

    if ((v25 & 1) != 0)
    {
      v46 = v21;
      v26 = 0;
      goto LABEL_34;
    }
  }
  v28 = objc_msgSend(v52, "textureType");
  if (v28 != 2 || (v29 = objc_msgSend(v52, "width"), v28 = objc_msgSend(v52, "height"), v29 != v28 / 6))
  {
    rf::realityFusionLogObject((rf *)v28);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_227777000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Provided texture asset must be one of the following types: 1. A 2D texture with a 1x6 layout(height=6*width). 2. A cube map texture in .ktx format with '_envProbeMap.ktx' suffix.", buf, 2u);
    }
LABEL_41:

    RERelease();
    *a1 = 0;
    a1[1] = 0;
    v35 = 1;
    goto LABEL_42;
  }
  v46 = v21;
  v26 = 1;
LABEL_34:
  v54[6] = 0;
  if (RETextureImportOperationCreateAsset())
  {
    MEMORY[0x22E29DA38](*(_QWORD *)(a2 + 16));
    objc_msgSend(MEMORY[0x24BDDD740], "textureCubeDescriptorWithPixelFormat:size:mipmapped:", objc_msgSend(v52, "pixelFormat"), objc_msgSend(v52, "width"), 1);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "setStorageMode:", 0);
    v49 = (void *)objc_msgSend(*(id *)(a2 + 8), "newTextureWithDescriptor:", v45);
    if ((v26 & 1) != 0)
    {
      v44 = v20;
      v48 = (void *)objc_msgSend(*(id *)(a2 + 8), "newTextureWithDescriptor:", v52);
      RETextureAssetCopyToDestination();
      v30 = objc_msgSend(v48, "width");
      v31 = 8 * v30;
      v47 = 8 * v30 * v30;
      v32 = malloc_type_malloc(v47, 0x76BD4563uLL);
      v33 = 0;
      for (i = 0; i != 6; ++i)
      {
        v54[0] = 0;
        v54[1] = v33;
        v54[2] = 0;
        v54[3] = v30;
        v54[4] = v30;
        v54[5] = 1;
        objc_msgSend(v48, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v32, v31, v54, 0);
        memset(v53, 0, 24);
        v53[3] = v30;
        v53[4] = v30;
        v53[5] = 1;
        objc_msgSend(v49, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v53, 0, i, v32, v31, v47);
        v33 += v30;
      }
      free(v32);

      v20 = v44;
      v21 = v46;
    }
    else
    {
      v21 = v46;
      RETextureAssetCopyToDestination();
    }
    RERelease();
    RERelease();
    v37 = (void *)objc_msgSend(*(id *)(a2 + 8), "newCommandQueue");
    objc_msgSend(v37, "commandBuffer");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "blitCommandEncoder");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "generateMipmapsForTexture:", v49);
    objc_msgSend(v39, "endEncoding");
    objc_msgSend(v38, "commit");
    objc_msgSend(v38, "waitUntilCompleted");
    v40 = a4[1];
    *(_OWORD *)buf = *a4;
    *(_OWORD *)&buf[16] = v40;
    v58 = xmmword_2277EE440;
    v59 = xmmword_2277EE450;
    v60 = xmmword_2277EE460;
    v61 = xmmword_2277EE900;
    v62 = vdupq_n_s32(0x7F800000u);
    v41 = v49;
    v63 = v41;
    v64 = 1;
    v65 = 1065353216;
    v70 = v60;
    v71 = v61;
    v72 = v62;
    *(_OWORD *)uu = *(_OWORD *)buf;
    v67 = *(_OWORD *)&buf[16];
    v68 = v58;
    v69 = v59;
    std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)&v73, (uint64_t *)&v63);
    v75 = v65;
    if (v64)

    v35 = 0;
  }
  else
  {
    rf::realityFusionLogObject(0);
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_227777000, v36, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to import environment probe texture", buf, 2u);
    }

    RERelease();
    *a1 = 0;
    a1[1] = 0;
    v35 = 1;
    v21 = v46;
  }
LABEL_42:

  if (!v35)
  {
LABEL_11:
    v15 = operator new(0xB0uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_24EFD99C0;
    v16 = v71;
    *((_OWORD *)v15 + 6) = v70;
    *((_OWORD *)v15 + 7) = v16;
    *((int32x4_t *)v15 + 8) = v72;
    v17 = v67;
    *((_OWORD *)v15 + 2) = *(_OWORD *)uu;
    *((_OWORD *)v15 + 3) = v17;
    v18 = v69;
    *((_OWORD *)v15 + 4) = v68;
    *((_OWORD *)v15 + 5) = v18;
    *((_BYTE *)v15 + 144) = 0;
    *((_BYTE *)v15 + 152) = 0;
    if (v74)
    {
      v19 = v73;
      v73 = 0;
      v15[18] = v19;
      *((_BYTE *)v15 + 152) = 1;
    }
    v15[20] = v75;
    *a1 = v15 + 4;
    a1[1] = v15;
  }
  if ((char)v56 < 0)
    operator delete(__p[0]);
  if (v74)

LABEL_19:
}

void sub_2277C715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  void *v73;

  if (a39 < 0)
    operator delete(__p);
  if (a73)

  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::getSpatialSceneClassification(rf::synthetic::SyntheticUsdKitParser *this)
{
  return 1;
}

void rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh(uint64_t a1, _OWORD **a2, float32x4_t *a3, unsigned __int8 *a4)
{
  id v8;
  void *v9;
  __int128 v10;
  std::vector<int>::pointer p_p;
  void *v12;
  void *v13;
  void *v14;
  _OWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _DWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  std::vector<int>::size_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<int>::pointer begin;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::vector<int>::pointer v44;
  void *v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  rf::internal *v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  std::vector<int>::value_type __x[4];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::vector<int> __p;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*a2)
    goto LABEL_2;
  rf::getMessage((rf *)"Mesh should not be null.", &__p);
  rf::internal::logAssert((const char *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  rf::internal::debugBreakHandler(v54);
  if (*a2)
  {
LABEL_2:
    v8 = objc_alloc(MEMORY[0x24BEBECE8]);
    v9 = (void *)MEMORY[0x24BDD17C8];
    v10 = (*a2)[1];
    v66[0] = **a2;
    v66[1] = v10;
    rf::synthetic::getMeshPathFromIdentifier((rf::data_flow::RFUUID *)v66);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
      p_p = (std::vector<int>::pointer)&__p;
    else
      p_p = __p.__begin_;
    objc_msgSend(v9, "stringWithUTF8String:", p_p);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v8, "initWithString:", v12);

    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    v14 = (void *)objc_msgSend(*(id *)(a1 + 24), "newNodeAtPath:type:", v13, *MEMORY[0x24BEBEDF8]);
    if (*a4 == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "guide");
      if (v58 < 0)
        operator delete(v57[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v55, "none");
    if (v56 < 0)
      operator delete(v55[0]);
    v15 = *a2;
    v16 = (_QWORD *)MEMORY[0x24BEBED58];
    if (*((_BYTE *)*a2 + 152))
    {
      v17 = *((_QWORD *)v15 + 18);
      v18 = objc_msgSend(*((id *)v15 + 16), "contents");
      std::vector<re::Vector3<float>>::vector(&__p, v17);
      if (v17)
      {
        v20 = 0;
        v21 = (_DWORD *)(v18 + 8);
        do
        {
          *(_QWORD *)&v19 = *((_QWORD *)v21 - 1);
          DWORD2(v19) = *v21;
          *(_OWORD *)&__p.__begin_[4 * v20++] = v19;
          v21 += 3;
        }
        while (v17 != v20);
      }
      v22 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("points"), *v16, 0);
      objc_msgSend(v22, "setFloat3Array:count:", __p.__begin_, v17);

      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v15 = *a2;
    }
    else
    {
      v17 = 0;
    }
    v23 = (_QWORD *)MEMORY[0x24BEBED80];
    if (*((_BYTE *)v15 + 216))
    {
      v24 = objc_msgSend(*((id *)v15 + 24), "contents");
      if (!*((_BYTE *)*a2 + 216))
        std::__throw_bad_optional_access[abi:ne180100]();
      v25 = v24;
      v26 = *((_QWORD *)*a2 + 26);
      v27 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("faceVertexIndices"), *MEMORY[0x24BEBED78], 0);
      objc_msgSend(v27, "setIntArray:count:", v25, v26);
      v28 = v26 / 3;
      __x[0] = 3;
      std::vector<int>::vector(&__p, v26 / 3, __x);
      v29 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("faceVertexCounts"), *v23, 0);
      objc_msgSend(v29, "setIntArray:count:", __p.__begin_, v28);

      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }

      v15 = *a2;
    }
    else
    {
      v28 = 0;
    }
    if (*((_BYTE *)v15 + 184))
    {
      v30 = objc_msgSend(*((id *)v15 + 20), "length");
      v15 = *a2;
      if (v30)
      {
        if (!*((_BYTE *)v15 + 184))
          std::__throw_bad_optional_access[abi:ne180100]();
        v31 = objc_msgSend(*((id *)v15 + 20), "contents");
        std::vector<re::Vector3<float>>::vector(&__p, v17);
        if (v17)
        {
          v33 = 0;
          v34 = (_DWORD *)(v31 + 8);
          do
          {
            *(_QWORD *)&v32 = *((_QWORD *)v34 - 1);
            DWORD2(v32) = *v34;
            *(_OWORD *)&__p.__begin_[4 * v33++] = v32;
            v34 += 3;
          }
          while (v17 != v33);
        }
        v35 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("normals"), *v16, *MEMORY[0x24BEBEE48]);
        objc_msgSend(v35, "setFloat3Array:count:", __p.__begin_, v17);

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v15 = *a2;
      }
    }
    if (*((_BYTE *)v15 + 248))
    {
      v36 = objc_msgSend(*((id *)v15 + 28), "length");
      v15 = *a2;
      if (v36)
      {
        if (!*((_BYTE *)v15 + 248))
          std::__throw_bad_optional_access[abi:ne180100]();
        v37 = objc_msgSend(*((id *)v15 + 28), "contents");
        std::vector<int>::vector(&__p, v28);
        if (v28)
        {
          v38 = 0;
          begin = __p.__begin_;
          do
          {
            begin[v38] = *(unsigned __int8 *)(v37 + v38);
            ++v38;
          }
          while (v28 > v38);
        }
        v40 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("classifications"), *v23, 0);
        objc_msgSend(v40, "setIntArray:count:", __p.__begin_, v28);

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v15 = *a2;
      }
    }
    if (*((_BYTE *)v15 + 312))
    {
      v41 = objc_msgSend(*((id *)v15 + 36), "length");
      v15 = *a2;
      if (v41)
      {
        if (!*((_BYTE *)v15 + 312))
          std::__throw_bad_optional_access[abi:ne180100]();
        v42 = objc_msgSend(*((id *)v15 + 36), "contents");
        std::vector<int>::vector(&__p, v28);
        if (v28)
        {
          v43 = 0;
          v44 = __p.__begin_;
          do
          {
            v44[v43] = *(unsigned __int8 *)(v42 + v43);
            ++v43;
          }
          while (v28 > v43);
        }
        v45 = (void *)objc_msgSend(v14, "newPropertyWithName:type:role:", CFSTR("materials"), *v23, 0);
        objc_msgSend(v45, "setIntArray:count:", __p.__begin_, v28);

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v15 = *a2;
      }
    }
    v46 = 0;
    v47 = *a3;
    v48 = a3[1];
    v49 = a3[2];
    v50 = a3[3];
    v51 = v15[4];
    v52 = v15[5];
    v53 = v15[6];
    *(_OWORD *)__x = v15[3];
    v60 = v51;
    v61 = v52;
    v62 = v53;
    do
    {
      *(float32x4_t *)((char *)&__p.__begin_ + v46 * 4) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)&__x[v46])), v48, *(float32x2_t *)&__x[v46], 1), v49, *(float32x4_t *)&__x[v46], 2), v50, *(float32x4_t *)&__x[v46], 3);
      v46 += 4;
    }
    while (v46 != 16);
    objc_msgSend(MEMORY[0x24BEBED10], "setLocalTransformWithNode:transform:time:", v14, *(double *)&__p.__begin_, *(double *)&__p.__end_cap_.__value_, *(double *)&v64, *(double *)&v65, 0.0);

  }
}

void sub_2277C7868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::createSceneUnderstandingTypeProperty(void *a1, unsigned __int8 *a2)
{
  id v3;
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  void *v16;
  std::string v17;
  void *__p[2];
  char v19;

  v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v19;
  v6 = (void **)__p[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  v10 = (void *)objc_msgSend(v3, "newPropertyWithName:type:role:", v9, *MEMORY[0x24BEBEDB0], 0);
  rf::synthetic::getSceneUnderstandingTypeString(*a2, &v17);
  v11 = (void *)MEMORY[0x24BDD17C8];
  v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v13 = v17.__r_.__value_.__r.__words[0];
  v14 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v12 >= 0)
    v15 = &v17;
  else
    v15 = (std::string *)v13;
  objc_msgSend(v11, "stringWithCString:encoding:", v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setStringValue:", v16);

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

}

void sub_2277C7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2277C7B04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x2277C7AF8);
}

void `anonymous namespace'::createPurposeProperty(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  void *v16;
  std::string v17;
  void *__p[2];
  char v19;

  v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "purpose");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v19;
  v6 = (void **)__p[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  v10 = (void *)objc_msgSend(v3, "newPropertyWithName:type:role:", v9, *MEMORY[0x24BEBEDB0], 0);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v11 = (void *)MEMORY[0x24BDD17C8];
  v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v13 = v17.__r_.__value_.__r.__words[0];
  v14 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0)
    v15 = &v17;
  else
    v15 = (std::string *)v13;
  objc_msgSend(v11, "stringWithCString:encoding:", v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setStringValue:", v16);

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

}

void sub_2277C7C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2277C7CA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x2277C7C9CLL);
}

void `anonymous namespace'::createSubdivisionSchemeProperty(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  void *v16;
  std::string v17;
  void *__p[2];
  char v19;

  v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "subdivisionScheme");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v19;
  v6 = (void **)__p[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  v10 = (void *)objc_msgSend(v3, "newPropertyWithName:type:role:", v9, *MEMORY[0x24BEBEDB0], 0);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v11 = (void *)MEMORY[0x24BDD17C8];
  v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v13 = v17.__r_.__value_.__r.__words[0];
  v14 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0)
    v15 = &v17;
  else
    v15 = (std::string *)v13;
  objc_msgSend(v11, "stringWithCString:encoding:", v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setStringValue:", v16);

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

}

void sub_2277C7DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2277C7E4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x2277C7E40);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  _BYTE v49[72];
  _BYTE v50[72];
  _BYTE v51[72];
  _BYTE v52[72];
  _BYTE v53[72];
  _BYTE v54[72];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  *(_OWORD *)&v54[24] = a3[1];
  v4 = a3[1];
  *(_OWORD *)&v54[8] = *a3;
  *(_OWORD *)&v54[40] = a3[2];
  v5 = a3[2];
  *(_OWORD *)&v54[56] = a3[3];
  v12 = a1;
  v14 = *(_OWORD *)&v54[16];
  v15 = *(_OWORD *)&v54[32];
  v16 = *(_OWORD *)&v54[48];
  v13 = *(_OWORD *)v54;
  v6 = a3[3];
  *(_OWORD *)&v53[40] = a3[2];
  *(_OWORD *)&v53[56] = v6;
  v7 = a3[1];
  *(_OWORD *)&v53[8] = *a3;
  *(_OWORD *)&v53[24] = v7;
  v17 = *(_QWORD *)&v54[64];
  v18 = a1;
  v19 = *(_OWORD *)v53;
  v22 = *(_OWORD *)&v53[48];
  v21 = *(_OWORD *)&v53[32];
  v20 = *(_OWORD *)&v53[16];
  *(_OWORD *)&v52[56] = a3[3];
  *(_OWORD *)&v52[8] = *a3;
  *(_OWORD *)&v52[40] = a3[2];
  *(_OWORD *)&v52[24] = a3[1];
  v23 = *(_QWORD *)&v53[64];
  v24 = a1;
  v25 = *(_OWORD *)v52;
  v28 = *(_OWORD *)&v52[48];
  v27 = *(_OWORD *)&v52[32];
  v26 = *(_OWORD *)&v52[16];
  *(_OWORD *)&v51[56] = a3[3];
  *(_OWORD *)&v51[8] = *a3;
  *(_OWORD *)&v51[40] = a3[2];
  *(_OWORD *)&v51[24] = a3[1];
  v29 = *(_QWORD *)&v52[64];
  v30 = a1;
  v33 = *(_OWORD *)&v51[32];
  v34 = *(_OWORD *)&v51[48];
  v32 = *(_OWORD *)&v51[16];
  v31 = *(_OWORD *)v51;
  v8 = a3[3];
  *(_OWORD *)&v50[40] = a3[2];
  *(_OWORD *)&v50[56] = v8;
  v9 = a3[1];
  *(_OWORD *)&v50[8] = *a3;
  *(_OWORD *)&v50[24] = v9;
  v35 = *(_QWORD *)&v51[64];
  v36 = a1;
  v39 = *(_OWORD *)&v50[32];
  v40 = *(_OWORD *)&v50[48];
  v37 = *(_OWORD *)v50;
  v38 = *(_OWORD *)&v50[16];
  *(_OWORD *)&v49[56] = a3[3];
  *(_OWORD *)&v49[8] = v3;
  *(_OWORD *)&v49[40] = v5;
  *(_OWORD *)&v49[24] = v4;
  v41 = *(_QWORD *)&v50[64];
  v42 = a1;
  v45 = *(_OWORD *)&v49[32];
  v46 = *(_OWORD *)&v49[48];
  v43 = *(_OWORD *)v49;
  v44 = *(_OWORD *)&v49[16];
  v47 = *(_QWORD *)&v49[64];
  v10 = *(unsigned int *)(a2 + 256);
  if ((_DWORD)v10 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v48 = &v12;
  return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2rf10overloadedIJZNS6_9synthetic21SyntheticUsdKitParser24addAnchorFromInputAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEERKN2re9Matrix4x4IfEEE3__0ZNS9_24addAnchorFromInputAnchorESK_SP_E3__1ZNS9_24addAnchorFromInputAnchorESK_SP_E3__2ZNS9_24addAnchorFromInputAnchorESK_SP_E3__3ZNS9_24addAnchorFromInputAnchorESK_SP_E3__4ZNS9_24addAnchorFromInputAnchorESK_SP_E3__5EEEEEJRKNS0_6__implIJSC_SD_SE_SF_SG_SH_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v48);
}

void rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  id v6;
  void *v7;
  __int128 v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void **v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  int v22;
  void **v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36[2];
  char v37;
  _OWORD v38[4];
  void *__p[2];
  double v40;
  __int128 v41;
  double v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = objc_alloc(MEMORY[0x24BEBECE8]);
  v7 = (void *)MEMORY[0x24BDD17C8];
  v8 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v8;
  rf::synthetic::getObjectPathFromIdentifier((rf::data_flow::RFUUID *)v43);
  if (v40 >= 0.0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  objc_msgSend(v7, "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v6, "initWithString:", v10);

  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v36, "AR_SceneObject");
  v12 = (void *)MEMORY[0x24BDD17C8];
  v13 = v37;
  v14 = (void **)v36[0];
  v15 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v13 >= 0)
    v16 = v36;
  else
    v16 = v14;
  objc_msgSend(v12, "stringWithCString:encoding:", v16, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37 < 0)
    operator delete(v36[0]);
  v18 = (void *)objc_msgSend(*(id *)(a1 + 24), "newNodeAtPath:type:", v11, v17);
  v19 = *(unsigned int *)(a2 + 112);
  v20 = v18;
  std::string::basic_string[abi:ne180100]<0>(__p, "classification");
  v21 = (void *)MEMORY[0x24BDD17C8];
  v22 = SHIBYTE(v40);
  v23 = (void **)__p[0];
  v24 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v22 >= 0)
    v25 = __p;
  else
    v25 = v23;
  objc_msgSend(v21, "stringWithCString:encoding:", v25, v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v27 = (void *)objc_msgSend(v20, "newPropertyWithName:type:role:", v26, *MEMORY[0x24BEBED78], 0);
  objc_msgSend(v27, "setIntValue:", v19);

  v28 = 0;
  v29 = *a3;
  v30 = a3[1];
  v31 = a3[2];
  v32 = a3[3];
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 80);
  v38[0] = *(_OWORD *)(a2 + 32);
  v38[1] = v33;
  v38[2] = v34;
  v38[3] = v35;
  do
  {
    *(float32x4_t *)&__p[v28 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v38[v28 / 0x10])), v30, *(float32x2_t *)&v38[v28 / 0x10], 1), v31, (float32x4_t)v38[v28 / 0x10], 2), v32, (float32x4_t)v38[v28 / 0x10], 3);
    v28 += 16;
  }
  while (v28 != 64);
  objc_msgSend(MEMORY[0x24BEBED10], "setLocalTransformWithNode:transform:time:", v20, *(double *)__p, v40, *(double *)&v41, v42, 0.0);

}

void sub_2277C82A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::createPlaneExtentProperty(void *a1, __n128 a2)
{
  id v2;
  void *v3;
  int v4;
  void **v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  _OWORD *v10;
  __int128 v12;
  void *__p[2];
  char v14;

  v2 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "extent");
  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = v14;
  v5 = (void **)__p[0];
  v6 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v4 >= 0)
    v7 = __p;
  else
    v7 = v5;
  objc_msgSend(v3, "stringWithCString:encoding:", v7, v6, *(_OWORD *)&a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "property:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14 < 0)
    operator delete(__p[0]);
  v10 = operator new(0x10uLL);
  *v10 = v12;
  objc_msgSend(v9, "setFloat3Array:count:", v10, 1);
  operator delete(v10);

}

void sub_2277C8428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;
  operator delete(v20);

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputMeshAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  id v15;
  __int128 v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = objc_alloc(MEMORY[0x24BEBECE8]);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v8, "initWithString:", v9);

    objc_msgSend(*(id *)(a1 + 24), "nodeAtPath:", v15);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "type");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)*MEMORY[0x24BEBEDF8];

      if (v12 == v13
      {
        v14 = a3[1];
        v16[0] = *a3;
        v16[1] = v14;
        rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(a1, v11, v16, a4);

        return;
      }
    }

  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_2277C860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputAnchorAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 isSceneUnderstandingType;
  unsigned int SceneUnderstandingTypeProperty;
  __int128 v16;
  id v17;
  __int128 v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = objc_alloc(MEMORY[0x24BEBECE8]);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (id)objc_msgSend(v8, "initWithString:", v9);

    objc_msgSend(*(id *)(a1 + 24), "nodeAtPath:", v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "type");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12 == (void *)*MEMORY[0x24BEBEDF8])
      {

        if (isSceneUnderstandingType)
        {
          if (rf::synthetic::isSceneUnderstandingAnchor(SceneUnderstandingTypeProperty))
          {
            v16 = a3[1];
            v18[0] = *a3;
            v18[1] = v16;
            rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode(a1, v11, v18, a4);

            return;
          }
        }
      }
      else
      {

      }
    }

  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_2277C87C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputObjectAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  __int128 v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = objc_alloc(MEMORY[0x24BEBECE8]);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (id)objc_msgSend(v8, "initWithString:", v9);

    objc_msgSend(*(id *)(a1 + 24), "nodeAtPath:", v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = a3[1];
      v13[0] = *a3;
      v13[1] = v11;
      rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(a4, a1, v10, v13);

      return;
    }

  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_2277C893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbeAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = objc_alloc(MEMORY[0x24BEBECE8]);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (id)objc_msgSend(v8, "initWithString:", v9);

    objc_msgSend(*(id *)(a1 + 24), "nodeAtPath:", v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = a3[1];
      v13[0] = *a3;
      v13[1] = v11;
      rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(a4, a1, v10, v13);

      return;
    }

  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_2277C8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::getNodeWorldTransform(_OWORD *a1, void *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v17 = a2;
  objc_msgSend(MEMORY[0x24BEBED10], "localTransformWithNode:time:", 0.0);
  v20 = v4;
  v21 = v3;
  *a1 = v3;
  a1[1] = v4;
  v18 = v6;
  v19 = v5;
  a1[2] = v5;
  a1[3] = v6;
  objc_msgSend(v17, "parent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    do
    {
      objc_msgSend(MEMORY[0x24BEBED10], "localTransformWithNode:time:", v7, 0.0);
      v12 = 0;
      v22[0] = v21;
      v22[1] = v20;
      v22[2] = v19;
      v22[3] = v18;
      do
      {
        *(__int128 *)((char *)&v23 + v12 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(v22[v12])), v9, *(float32x2_t *)&v22[v12], 1), v10, (float32x4_t)v22[v12], 2), v11, (float32x4_t)v22[v12], 3);
        ++v12;
      }
      while (v12 != 4);
      v14 = v25;
      v15 = v26;
      v20 = v24;
      v13 = v24;
      v21 = v23;
      *a1 = v23;
      a1[1] = v13;
      v18 = v15;
      v19 = v14;
      a1[2] = v14;
      a1[3] = v15;
      objc_msgSend(v7, "parent");
      v16 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v16;
    }
    while (v16);
  }

}

void sub_2277C8BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::getPlaneExtentProperty(void *a1)
{
  id v1;
  float32x4_t v2;
  BOOL v3;
  float v4;
  void *v5;
  int v6;
  void **v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  unint64_t v24;
  void *__p[3];
  void *v26[2];
  char v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;

  v1 = a1;
  v18 = v29;
  v20 = v28;
  v2 = vmulq_f32(v28, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v30, v30, 0xCuLL), v30, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), (int8x16_t)v29, 8uLL)));
  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] <= 0.0;
  v4 = -1.0;
  if (!v3)
    v4 = 1.0;
  v22 = (float32x4_t)v30;
  v23 = v4;
  std::string::basic_string[abi:ne180100]<0>(v26, "extent");
  v5 = (void *)MEMORY[0x24BDD17C8];
  v6 = v27;
  v7 = (void **)v26[0];
  v8 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v6 >= 0)
    v9 = v26;
  else
    v9 = v7;
  objc_msgSend(v5, "stringWithCString:encoding:", v9, v8, *(_OWORD *)&v18, *(_OWORD *)&v20);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "property:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27 < 0)
  {
    operator delete(v26[0]);
    if (v11)
      goto LABEL_8;
LABEL_10:
    v16 = 0;
    goto LABEL_11;
  }
  if (!v11)
    goto LABEL_10;
LABEL_8:
  std::vector<re::Vector3<float>>::vector(__p, 1uLL);
  objc_msgSend(v11, "float3Array:maxCount:", __p[0], 1);
  v12 = vmulq_f32(v21, v21);
  v13 = vmulq_f32(v19, v19);
  v14 = vmulq_f32(v22, v22);
  v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)));
  v15.f32[0] = sqrtf(v15.f32[0]);
  v15.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v15.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
  v24 = vmulq_f32(vmulq_n_f32(v15, v23), *(float32x4_t *)__p[0]).u64[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  v16 = v24;
LABEL_11:

  return v16;
}

void sub_2277C8DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getSceneUnitScale(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  uint64_t v16;
  void *__p[2];
  char v18;

  v1 = a1;
  if (v1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "metersPerUnit");
    v2 = (void *)MEMORY[0x24BDD17C8];
    v3 = v18;
    v4 = (void **)__p[0];
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v3 >= 0)
      v6 = __p;
    else
      v6 = v4;
    objc_msgSend(v2, "stringWithCString:encoding:", v6, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "metadataWithKey:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18 < 0)
    {
      operator delete(__p[0]);
      if (v8)
        goto LABEL_7;
    }
    else if (v8)
    {
LABEL_7:
      objc_msgSend(v8, "floatValue");
      *(_QWORD *)&_Q0 = vdupq_lane_s32(*(int32x2_t *)&_Q0, 0).u64[0];
LABEL_11:
      v16 = _Q0;

      goto LABEL_12;
    }
    __asm { FMOV            V0.4S, #1.0 }
    goto LABEL_11;
  }
  __asm { FMOV            V0.4S, #1.0 }
  v16 = _Q0;
LABEL_12:

  return v16;
}

void sub_2277C8F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::getSceneUnderstandingNameProperty(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  void *__p[2];
  char v13;

  v3 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:name");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v13;
  v6 = (void **)__p[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "property:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_6;
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    goto LABEL_9;
  }
  if (!v10)
    goto LABEL_8;
LABEL_6:
  objc_msgSend(v10, "stringValue");
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v11, "UTF8String"));

LABEL_9:
}

void sub_2277C904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<re::Vector3<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<re::Vector3<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2277C90F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<re::Vector3<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_2277C91A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  float32x4_t *v3;
  uint64_t v4;
  id v5;
  void *v6;
  __int128 v7;
  void **v8;
  void *v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  void **v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  int v21;
  void **v22;
  uint64_t v23;
  void **v24;
  void *v25;
  int v26;
  id v27;
  void *v28;
  int v29;
  void **v30;
  uint64_t v31;
  void **v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void *v40;
  __n128 v41;
  id v42;
  void *v43;
  int v44;
  void **v45;
  uint64_t v46;
  void **v47;
  void *v48;
  void *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __n128 v59;
  void *v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *__p[2];
  double v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (*a1)[5].i64[0];
  v5 = objc_alloc(MEMORY[0x24BEBECE8]);
  v6 = (void *)MEMORY[0x24BDD17C8];
  v7 = *(_OWORD *)(a2 + 16);
  v73[0] = *(_OWORD *)a2;
  v73[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v73);
  if (v70 >= 0.0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  objc_msgSend(v6, "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = (void *)objc_msgSend(v5, "initWithString:", v9);

  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  v10 = (void *)objc_msgSend(*(id *)(v4 + 24), "newNodeAtPath:type:", v60, *MEMORY[0x24BEBEDF8]);
  LOBYTE(__p[0]) = 0;
  v11 = *(_DWORD *)(a2 + 208);
  v12 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:plane:alignment");
  v13 = (void *)MEMORY[0x24BDD17C8];
  LODWORD(v10) = SHIBYTE(v70);
  v14 = (void **)__p[0];
  v15 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if ((int)v10 >= 0)
    v16 = __p;
  else
    v16 = v14;
  objc_msgSend(v13, "stringWithCString:encoding:", v16, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  v18 = *MEMORY[0x24BEBEDB0];
  v19 = (void *)objc_msgSend(v12, "newPropertyWithName:type:role:", v17, *MEMORY[0x24BEBEDB0], 0);
  rf::synthetic::getAlignmentString(v11, (std::string *)v65);
  v20 = (void *)MEMORY[0x24BDD17C8];
  v21 = SBYTE7(v66);
  v22 = (void **)v65[0];
  v23 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v21 >= 0)
    v24 = v65;
  else
    v24 = v22;
  objc_msgSend(v20, "stringWithCString:encoding:", v24, v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setStringValue:", v25);

  if (SBYTE7(v66) < 0)
    operator delete(v65[0]);

  v26 = *(_DWORD *)(a2 + 212);
  v27 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:planeClassification");
  v28 = (void *)MEMORY[0x24BDD17C8];
  v29 = SHIBYTE(v70);
  v30 = (void **)__p[0];
  v31 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v29 >= 0)
    v32 = __p;
  else
    v32 = v30;
  objc_msgSend(v28, "stringWithCString:encoding:", v32, v31);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  v34 = (void *)objc_msgSend(v27, "newPropertyWithName:type:role:", v33, v18, 0);
  rf::synthetic::getPlaneClassificationString(v26, (std::string *)v65);
  v35 = (void *)MEMORY[0x24BDD17C8];
  v36 = SBYTE7(v66);
  v37 = (void **)v65[0];
  v38 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v36 >= 0)
    v39 = v65;
  else
    v39 = v37;
  objc_msgSend(v35, "stringWithCString:encoding:", v39, v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setStringValue:", v40);

  if (SBYTE7(v66) < 0)
    operator delete(v65[0]);

  v59 = *(__n128 *)(a2 + 192);
  *(_OWORD *)__p = 0u;
  v58 = *(_OWORD *)(a2 + 176);
  v41 = v59;
  v41.n128_u32[1] = HIDWORD(__p[0]);
  v42 = v27;
  std::string::basic_string[abi:ne180100]<0>(__p, "center");
  v43 = (void *)MEMORY[0x24BDD17C8];
  v44 = SHIBYTE(v70);
  v45 = (void **)__p[0];
  v46 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v44 >= 0)
    v47 = __p;
  else
    v47 = v45;
  objc_msgSend(v43, "stringWithCString:encoding:", v47, v46);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  v49 = (void *)objc_msgSend(v42, "newPropertyWithName:type:role:", v48, *MEMORY[0x24BEBED50], 0);
  objc_msgSend(v49, "setFloat3Value:", *(double *)&v58);

  std::string::basic_string[abi:ne180100]<0>(v63, "guide");
  if (v64 < 0)
    operator delete(v63[0]);
  std::string::basic_string[abi:ne180100]<0>(v61, "none");
  if (v62 < 0)
    operator delete(v61[0]);
  v50 = 0;
  v51 = v3[6];
  v52 = v3[7];
  v53 = v3[8];
  v54 = v3[9];
  v55 = *(_OWORD *)(a2 + 48);
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v65 = *(_OWORD *)(a2 + 32);
  v66 = v55;
  v67 = v56;
  v68 = v57;
  do
  {
    *(float32x4_t *)&__p[v50] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)&v65[v50])), v52, (float32x2_t)v65[v50], 1), v53, *(float32x4_t *)&v65[v50], 2), v54, *(float32x4_t *)&v65[v50], 3);
    v50 += 2;
  }
  while (v50 != 8);
  objc_msgSend(MEMORY[0x24BEBED10], "setLocalTransformWithNode:transform:time:", v42, *(double *)__p, v70, *(double *)&v71, *(double *)&v72, 0.0);

}

void sub_2277C9644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  float32x4_t *v3;
  uint64_t v4;
  id v5;
  void *v6;
  __int128 v7;
  std::string *p_p;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  int v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  int v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  _OWORD v43[4];
  std::string __p;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (*a1)[10].i64[0];
  v5 = objc_alloc(MEMORY[0x24BEBECE8]);
  v6 = (void *)MEMORY[0x24BDD17C8];
  v7 = *(_OWORD *)(a2 + 16);
  v47[0] = *(_OWORD *)a2;
  v47[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v47);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "stringWithUTF8String:", p_p);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v5, "initWithString:", v9);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (void *)objc_msgSend(*(id *)(v4 + 24), "newNodeAtPath:type:", v10, *MEMORY[0x24BEBEDF8]);
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (*(char *)(a2 + 159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 136), *(_QWORD *)(a2 + 144));
  else
    __p = *(std::string *)(a2 + 136);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *(unsigned __int8 *)(a2 + 99);
  v13 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isTracked");
  v14 = (void *)MEMORY[0x24BDD17C8];
  v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v16 = __p.__r_.__value_.__r.__words[0];
  v17 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v15 >= 0)
    v18 = &__p;
  else
    v18 = (std::string *)v16;
  objc_msgSend(v14, "stringWithCString:encoding:", v18, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = *MEMORY[0x24BEBED18];
  v21 = (void *)objc_msgSend(v13, "newPropertyWithName:type:role:", v19, *MEMORY[0x24BEBED18], 0);
  objc_msgSend(v21, "setBoolValue:", v12 != 0);

  v22 = *(unsigned __int8 *)(a2 + 128);
  v23 = v13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isDetectionOnly");
  v24 = (void *)MEMORY[0x24BDD17C8];
  v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v26 = __p.__r_.__value_.__r.__words[0];
  v27 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v25 >= 0)
    v28 = &__p;
  else
    v28 = (std::string *)v26;
  objc_msgSend(v24, "stringWithCString:encoding:", v28, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30 = (void *)objc_msgSend(v23, "newPropertyWithName:type:role:", v29, v20, 0);
  objc_msgSend(v30, "setBoolValue:", v22 != 0);

  std::string::basic_string[abi:ne180100]<0>(v41, "guide");
  if (v42 < 0)
    operator delete(v41[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "none");
  if (v40 < 0)
    operator delete(v39[0]);
  v31 = 0;
  v32 = v3[11];
  v33 = v3[12];
  v34 = v3[13];
  v35 = v3[14];
  v36 = *(_OWORD *)(a2 + 48);
  v37 = *(_OWORD *)(a2 + 64);
  v38 = *(_OWORD *)(a2 + 80);
  v43[0] = *(_OWORD *)(a2 + 32);
  v43[1] = v36;
  v43[2] = v37;
  v43[3] = v38;
  do
  {
    *(float32x4_t *)((char *)&__p.__r_.__value_.__l.__data_ + v31 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(v43[v31])), v33, *(float32x2_t *)&v43[v31], 1), v34, (float32x4_t)v43[v31], 2), v35, (float32x4_t)v43[v31], 3);
    ++v31;
  }
  while (v31 != 4);
  objc_msgSend(MEMORY[0x24BEBED10], "setLocalTransformWithNode:transform:time:", v23, *(double *)&__p.__r_.__value_.__l.__data_, *(double *)&__p.__r_.__value_.__r.__words[2], *(double *)&v45, *(double *)&v46, 0.0);

}

void sub_2277C9B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  float32x4_t *v3;
  uint64_t v4;
  id v5;
  void *v6;
  __int128 v7;
  std::string *p_p;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  _OWORD v24[4];
  std::string __p;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (*a1)[15].i64[0];
  v5 = objc_alloc(MEMORY[0x24BEBECE8]);
  v6 = (void *)MEMORY[0x24BDD17C8];
  v7 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "stringWithUTF8String:", p_p);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v5, "initWithString:", v9);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (void *)objc_msgSend(*(id *)(v4 + 24), "newNodeAtPath:type:", v10, *MEMORY[0x24BEBEDF8]);
  __p.__r_.__value_.__s.__data_[0] = 2;
  if (*(char *)(a2 + 151) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  else
    __p = *(std::string *)(a2 + 128);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v22, "guide");
  if (v23 < 0)
    operator delete(v22[0]);
  std::string::basic_string[abi:ne180100]<0>(v20, "none");
  if (v21 < 0)
    operator delete(v20[0]);
  v12 = 0;
  v13 = v3[16];
  v14 = v3[17];
  v15 = v3[18];
  v16 = v3[19];
  v17 = *(_OWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v17;
  v24[2] = v18;
  v24[3] = v19;
  do
  {
    *(float32x4_t *)((char *)&__p.__r_.__value_.__l.__data_ + v12 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(v24[v12])), v14, *(float32x2_t *)&v24[v12], 1), v15, (float32x4_t)v24[v12], 2), v16, (float32x4_t)v24[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  objc_msgSend(MEMORY[0x24BEBED10], "setLocalTransformWithNode:transform:time:", v11, *(double *)&__p.__r_.__value_.__l.__data_, *(double *)&__p.__r_.__value_.__r.__words[2], *(double *)&v26, *(double *)&v27, 0.0);

}

void sub_2277C9E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::createSceneUnderstandingNameProperty(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  void *v16;
  std::string v17;
  void *__p[2];
  char v19;

  v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:name");
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v19;
  v6 = (void **)__p[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  v10 = (void *)objc_msgSend(v3, "newPropertyWithName:type:role:", v9, *MEMORY[0x24BEBEDA8], 0);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v11 = (void *)MEMORY[0x24BDD17C8];
  v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v13 = v17.__r_.__value_.__r.__words[0];
  v14 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0)
    v15 = &v17;
  else
    v15 = (std::string *)v13;
  objc_msgSend(v11, "stringWithCString:encoding:", v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setStringValue:", v16);

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

}

void sub_2277CA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2277CA058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x2277CA04CLL);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_2277CA0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD98D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD98D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::__on_zero_shared(uint64_t a1)
{
  rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 32));
}

void std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD9920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD9920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

uint64_t std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__on_zero_shared(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 32);
}

void std::__shared_ptr_emplace<rf::data_flow::SceneObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD9970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::SceneObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD9970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD99C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EFD99C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::__on_zero_shared(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))

}

BOOL rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;

  v2 = vsubq_f32(a1[2], a2[2]);
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) < 1.0e-10
    && (v4 = vsubq_f32(a1[3], a2[3]),
        v5 = (int8x16_t)vmulq_f32(v4, v4),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) < 1.0e-10)
    && (v6 = vsubq_f32(a1[4], a2[4]),
        v7 = (int8x16_t)vmulq_f32(v6, v6),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) < 1.0e-10)
    && (v8 = vsubq_f32(a1[5], a2[5]),
        v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) < 1.0e-10)
    && a1[6].u8[0] == a2[6].u8[0]
    && a1[6].u8[1] == a2[6].u8[1]
    && a1[6].u8[2] == a2[6].u8[2])
  {
    return a1[6].u8[3] != a2[6].u8[3];
  }
  else
  {
    return 1;
  }
}

uint64_t rf::detail::removeAnchorsFrom@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = result;
    do
    {
      v10[0] = v8;
      v10[1] = a3;
      v10[2] = a4;
      v9 = *(unsigned int *)(v5 + 256);
      if ((_DWORD)v9 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v11 = v10;
      result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS6_17LockedARStateDataEONS_6vectorINS_7variantIJNS6_9data_flow12CustomAnchorENSC_11PlaneAnchorENSC_11ImageAnchorENSC_12ObjectAnchorENSC_10FaceAnchorENSC_10BodyAnchorEEEENS_9allocatorISJ_EEEERKNS_8functionIFvvEEEENK3__0clERKSJ_EUlRT_E_EEJRKNS0_6__implIJSD_SE_SF_SG_SH_SI_EEEEEEDcOSW_DpOT0____fmatrix[v9])(&v11, v5);
      v5 += 272;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_2277CA3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updateAnchorsAt(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  _BOOL4 v11;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40[12];
  int v41;
  char v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v4, (uint64_t)&v38);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 80), (uint64_t)&v38))
      {
        v7 = *(_QWORD *)a1 + 80;
        v40[0] = &v38;
        v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v7, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, v40);
        v9 = *((_DWORD *)v8 + 76);
        v10 = *(_DWORD *)(v4 + 256);
        v11 = v10 == v9;
        v12 = v10 == -1;
        v13 = v10 == -1;
        if (v12)
          v11 = 0;
        if (v9 == -1)
          v14 = v13;
        else
          v14 = v11;
        if (!v14)
          goto LABEL_14;
        rf::helpers::getBaseAnchorProperties(v4);
        if (v41)
        {
          v36 = v8 + 6;
          v15 = *(unsigned int *)(v4 + 256);
          if ((_DWORD)v15 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          v37 = &v36;
          v16 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EFD9A00[v15])(&v37, v4);

          if ((v16 & 1) == 0)
            goto LABEL_34;
LABEL_14:
          v18 = *(unsigned int *)(v4 + 256);
          if ((_DWORD)v18 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          v40[0] = &v37;
          ((void (*)(_OWORD **, uint64_t))off_24EFD9A30[v18])(v40, v4);
          v20 = a3[1];
          v19 = (unint64_t)a3[2];
          if ((unint64_t)v20 >= v19)
          {
            v23 = *a3;
            v24 = (v20 - *a3) >> 5;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = v19 - (_QWORD)v23;
            if (v26 >> 4 > v25)
              v25 = v26 >> 4;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
              v27 = 0x7FFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v27);
              v23 = *a3;
              v20 = a3[1];
            }
            else
            {
              v28 = 0;
            }
            v29 = v39;
            v30 = &v28[32 * v24];
            *(_OWORD *)v30 = v38;
            *((_OWORD *)v30 + 1) = v29;
            if (v20 == v23)
            {
              v33 = &v28[32 * v24];
            }
            else
            {
              v31 = &v28[32 * v24];
              do
              {
                v32 = *((_OWORD *)v20 - 1);
                v33 = v31 - 32;
                *((_OWORD *)v31 - 2) = *((_OWORD *)v20 - 2);
                *((_OWORD *)v31 - 1) = v32;
                v20 -= 32;
                v31 -= 32;
              }
              while (v20 != v23);
            }
            v22 = v30 + 32;
            *a3 = v33;
            a3[1] = v30 + 32;
            a3[2] = &v28[32 * v27];
            if (v23)
              operator delete(v23);
          }
          else
          {
            v21 = v39;
            *(_OWORD *)v20 = v38;
            *((_OWORD *)v20 + 1) = v21;
            v22 = v20 + 32;
          }
          a3[1] = v22;
          v34 = *(_QWORD *)a1 + 80;
          v40[0] = &v38;
          v35 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v34, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, v40);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v35 + 6), v4);
          goto LABEL_34;
        }
        v17 = v42 == 0;

        if (!v17)
          goto LABEL_14;
      }
LABEL_34:
      v4 += 272;
    }
    while (v4 != v5);
  }
}

void sub_2277CA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)v29;
  if (*(_QWORD *)v29)
  {
    *(_QWORD *)(v29 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

unsigned int *rf::detail::updateExternalAnchorsAt(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  rf *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  _BYTE v18[32];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = result;
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v4, (uint64_t)v18);
      result = (unsigned int *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v7 + 80), (uint64_t)v18);
      v8 = result;
      if (result)
      {
        v9 = result[76];
        if ((_DWORD)v9 == -1)
          std::__throw_bad_variant_access[abi:ne180100]();
        __p[0] = buf;
        ((void (*)(void **, unsigned int *))off_24EFD9A60[v9])(__p, result + 12);
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(_QWORD *)v7 + 120, (uint64_t)(v8 + 4), (_OWORD *)v8 + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(*(_QWORD *)v7 + 80), v8, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        rf::realityFusionLogObject(v10);
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v18, __p);
          v12 = __p;
          if (v15 < 0)
            v12 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v12;
          _os_log_impl(&dword_227777000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Externalizing anchor %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        result = *(unsigned int **)(a3 + 24);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _BYTE *))(*(_QWORD *)result + 48))(result, v18);
      }
      v4 += 272;
    }
    while (v4 != v5);
    v13 = *a2;
    v4 = a2[1];
    if (v4 != *a2)
    {
      do
      {
        v4 -= 272;
        result = (unsigned int *)std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v4);
      }
      while (v4 != v13);
      v4 = v13;
    }
  }
  a2[1] = v4;
  return result;
}

void sub_2277CA8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_OWORD *rf::detail::relocalizeExternalAnchors(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  rf *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  rf *v16;
  NSObject *v17;
  void **v18;
  void *__p[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  _BYTE v23[32];
  uint64_t v24;

  v6 = result;
  v24 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v7, (uint64_t)v23);
      result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v6 + 120), (uint64_t)v23);
      v9 = result;
      if (result)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(_QWORD *)v6 + 80, (uint64_t)(result + 1), result + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(*(_QWORD *)v6 + 120), v9, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        rf::realityFusionLogObject(v10);
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v23, __p);
          v12 = v20 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v22 = v12;
          _os_log_impl(&dword_227777000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Relocalizing updated anchor %s", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }

        result = *(_OWORD **)(a4 + 24);
        if (result)
          result = (_OWORD *)(*(uint64_t (**)(_OWORD *, _BYTE *))(*(_QWORD *)result + 48))(result, v23);
      }
      v7 += 272;
    }
    while (v7 != v8);
  }
  v13 = *a3;
  v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v13, (uint64_t)v23);
      result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v6 + 120), (uint64_t)v23);
      v15 = result;
      if (result)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(_QWORD *)v6 + 80, (uint64_t)(result + 1), result + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((_QWORD *)(*(_QWORD *)v6 + 120), v15, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        rf::realityFusionLogObject(v16);
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v23, __p);
          if (v20 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v22 = v18;
          _os_log_impl(&dword_227777000, v17, OS_LOG_TYPE_DEFAULT, "ARState: Relocalizing added anchor %s", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }

        result = *(_OWORD **)(a4 + 24);
        if (result)
          result = (_OWORD *)(*(uint64_t (**)(_OWORD *, _BYTE *))(*(_QWORD *)result + 48))(result, v23);
      }
      v13 += 272;
    }
    while (v13 != v14);
  }
  return result;
}

void sub_2277CAB9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t rf::detail::insertAnchorsInto@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  rf *v9;
  BOOL v10;
  NSObject *v11;
  void **v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  void **v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint8_t buf[4];
  void **v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = result;
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v5, (uint64_t)&v38);
      if (*(_DWORD *)(v5 + 256)
        || *(_DWORD *)(v5 + 100) != 1
        || ((v9 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 80), (uint64_t)&v38)) == 0? (v10 = *(_QWORD *)(a3 + 24) == 0): (v10 = 1), v10))
      {
        if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 80), (uint64_t)&v38))
        {
          rf::realityFusionLogObject(0);
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v38, __p);
            v12 = __p;
            if (v35 < 0)
              v12 = (void **)__p[0];
            *(_DWORD *)buf = 136315138;
            v37 = v12;
            _os_log_impl(&dword_227777000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Adding anchor %s", buf, 0xCu);
            if (v35 < 0)
              operator delete(__p[0]);
          }

        }
        v14 = a4[1];
        v13 = (unint64_t)a4[2];
        if ((unint64_t)v14 >= v13)
        {
          v17 = *a4;
          v18 = (v14 - *a4) >> 5;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v13 - (_QWORD)v17;
          if (v20 >> 4 > v19)
            v19 = v20 >> 4;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
            v21 = 0x7FFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a4 + 2), v21);
            v17 = *a4;
            v14 = a4[1];
          }
          else
          {
            v22 = 0;
          }
          v23 = v39;
          v24 = &v22[32 * v18];
          *(_OWORD *)v24 = v38;
          *((_OWORD *)v24 + 1) = v23;
          if (v14 == v17)
          {
            v27 = &v22[32 * v18];
          }
          else
          {
            v25 = &v22[32 * v18];
            do
            {
              v26 = *((_OWORD *)v14 - 1);
              v27 = v25 - 32;
              *((_OWORD *)v25 - 2) = *((_OWORD *)v14 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v14 -= 32;
              v25 -= 32;
            }
            while (v14 != v17);
          }
          v16 = v24 + 32;
          *a4 = v27;
          a4[1] = v24 + 32;
          a4[2] = &v22[32 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          v15 = v39;
          *(_OWORD *)v14 = v38;
          *((_OWORD *)v14 + 1) = v15;
          v16 = v14 + 32;
        }
        a4[1] = v16;
        v28 = *(_QWORD *)v8 + 80;
        __p[0] = &v38;
        v29 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v28, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        result = std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v29 + 6), v5);
      }
      else
      {
        rf::realityFusionLogObject(v9);
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v38, __p);
          v32 = __p;
          if (v35 < 0)
            v32 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v37 = v32;
          _os_log_impl(&dword_227777000, v30, OS_LOG_TYPE_DEFAULT, "ARState: Cleaning up anchor %s", buf, 0xCu);
          if (v35 < 0)
            operator delete(__p[0]);
        }

        v33 = *(_QWORD *)(a3 + 24);
        if (!v33)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 48))(v33, &v38);
      }
      v5 += 272;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_2277CAEF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t rf::detail::requestFloorPlaneForPlacementIfNeeded(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;

  result = *(_QWORD *)(a4 + 24);
  if (result)
  {
    v7 = *a1;
    v6 = a1[1];
    while (v7 != v6)
    {
      if (*(_DWORD *)(v7 + 256) == 1 && *(_DWORD *)(v7 + 212) == 2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      v7 += 272;
    }
    for (i = *a2; i != a2[1]; i += 272)
    {
      if (*(_DWORD *)(i + 256) == 1 && *(_DWORD *)(i + 212) == 2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    }
    for (j = *a3; j != a3[1]; j += 272)
    {
      if (*(_DWORD *)(j + 256) == 1 && *(_DWORD *)(j + 212) == 2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;

  v2 = **a1;
  if (v2[16].i32[0])
    std::__throw_bad_variant_access[abi:ne180100]();
  return rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(v2, a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;
  uint32x4_t v5;

  v2 = **a1;
  if (v2[16].i32[0] != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2))
    return 1;
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[9], a2[9]), (int8x16_t)vceqq_f32(v2[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(v2[10], a2[10]), (int8x16_t)vceqq_f32(v2[11], a2[11])))) & 0x80000000) == 0)return 1;
  v5 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[12], a2[12]));
  v5.i32[3] = v5.i32[2];
  return (vmaxvq_u32(v5) & 0x80000000) != 0 || v2[13].i32[0] != a2[13].i32[0] || v2[13].i32[1] != a2[13].i32[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;
  uint32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _BOOL8 result;

  v2 = **a1;
  if (v2[16].i32[0] != 2)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2))
    return 1;
  v4 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[12], a2[12]));
  v4.i32[3] = v4.i32[2];
  if ((vmaxvq_u32(v4) & 0x80000000) != 0 || v2[8].u8[0] != a2[8].u8[0])
    return 1;
  v5 = v2[9].u8[15];
  if ((v5 & 0x80u) == 0)
    v6 = v2[9].u8[15];
  else
    v6 = v2[9].i64[0];
  v7 = a2[9].u8[15];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = a2[9].i64[0];
  if (v6 != v7)
    return 1;
  v9 = (const void **)&v2[8].i64[1];
  if (v8 >= 0)
    v10 = &a2[8].u8[8];
  else
    v10 = (unsigned __int8 *)a2[8].i64[1];
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, v2[9].u64[0]))
      return 1;
  }
  else if (v2[9].i8[15])
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v5)
        goto LABEL_20;
    }
    return 1;
  }
LABEL_20:
  v11 = v2[11].u8[7];
  if ((v11 & 0x80u) == 0)
    v12 = v2[11].u8[7];
  else
    v12 = v2[10].i64[1];
  v13 = a2[11].u8[7];
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = a2[10].i64[1];
  if (v12 != v13)
    return 1;
  v15 = (const void **)&v2[10];
  v18 = a2[10].i64[0];
  v17 = a2 + 10;
  v16 = (float32x4_t *)v18;
  if (v14 >= 0)
    v19 = v17;
  else
    v19 = v16;
  if ((v11 & 0x80) != 0)
    return memcmp(*v15, v19, v2[10].u64[1]) != 0;
  if (!v2[11].i8[7])
    return 0;
  v20 = v11 - 1;
  do
  {
    v22 = *(unsigned __int8 *)v15;
    v15 = (const void **)((char *)v15 + 1);
    v21 = v22;
    v23 = v19->u8[0];
    v19 = (float32x4_t *)((char *)v19 + 1);
    result = v21 != v23;
  }
  while (v21 == v23 && v20-- != 0);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint32x4_t v16;
  uint32x4_t v17;

  v2 = **a1;
  if (v2[16].i32[0] != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2))
    return 1;
  v4 = v2[9].u8[7];
  if ((v4 & 0x80u) == 0)
    v5 = v2[9].u8[7];
  else
    v5 = v2[8].i64[1];
  v6 = a2[9].u8[7];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = a2[8].i64[1];
  if (v5 != v6)
    return 1;
  v8 = (const void **)&v2[8];
  if (v7 >= 0)
    v9 = a2 + 8;
  else
    v9 = (float32x4_t *)a2[8].i64[0];
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, v2[8].u64[1]))
      return 1;
  }
  else if (v2[9].i8[7])
  {
    while (*(unsigned __int8 *)v8 == v9->u8[0])
    {
      v8 = (const void **)((char *)v8 + 1);
      v9 = (float32x4_t *)((char *)v9 + 1);
      if (!--v4)
        goto LABEL_18;
    }
    return 1;
  }
LABEL_18:
  v10 = v2[10].u8[15];
  if ((v10 & 0x80u) == 0)
    v11 = v2[10].u8[15];
  else
    v11 = v2[10].i64[0];
  v12 = a2[10].u8[15];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = a2[10].i64[0];
  if (v11 != v12)
    return 1;
  v14 = (const void **)&v2[9].i64[1];
  if (v13 >= 0)
    v15 = &a2[9].u8[8];
  else
    v15 = (unsigned __int8 *)a2[9].i64[1];
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, v2[10].u64[0]))
      return 1;
  }
  else if (v2[10].i8[15])
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_33;
    }
    return 1;
  }
LABEL_33:
  v16 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[13], a2[13]));
  v16.i32[3] = v16.i32[2];
  if ((vmaxvq_u32(v16) & 0x80000000) == 0)
  {
    v17 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[14], a2[14]));
    v17.i32[3] = v17.i32[2];
    return vmaxvq_u32(v17) >> 31;
  }
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;

  v2 = **a1;
  if (v2[16].i32[0] != 4)
    std::__throw_bad_variant_access[abi:ne180100]();
  return rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2)
      || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[9], a2[9]), (int8x16_t)vceqq_f32(v2[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(v2[10], a2[10]), (int8x16_t)vceqq_f32(v2[11], a2[11])))) & 0x80000000) == 0|| (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[13], a2[13]), (int8x16_t)vceqq_f32(v2[12], a2[12])), vandq_s8((int8x16_t)vceqq_f32(v2[14], a2[14]), (int8x16_t)vceqq_f32(v2[15], a2[15])))) & 0x80000000) == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t *v2;
  uint64_t result;

  v2 = **a1;
  if (v2[16].i32[0] != 5)
    std::__throw_bad_variant_access[abi:ne180100]();
  LODWORD(result) = rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2);
  if (v2[8].f32[0] == a2[8].f32[0])
    return result;
  else
    return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 99) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CB690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CB808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CB980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CBAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CBC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  rf **v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  rf *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)**a1;
  if (*(_BYTE *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    v6 = *((_BYTE *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    v7 = (rf *)uuid_compare(v5, v6);
    if (!(_DWORD)v7)
    {
      if (*((_QWORD *)v3[1] + 3))
      {
        rf::realityFusionLogObject(v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          v9 = v15 >= 0 ? __p : (void **)__p[0];
          v11 = 136315138;
          v12 = v9;
          _os_log_impl(&dword_227777000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }

        v10 = *((_QWORD *)v3[1] + 3);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      }
    }
  }
}

void sub_2277CBDE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::removeAnchor(rf *a1, rf::data_flow::RFUUID *a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  void *__p[2];
  __int128 v15;
  _BYTE v16[272];
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  rf::realityFusionLogObject(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if ((SBYTE7(v15) & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v18 = v7;
    _os_log_impl(&dword_227777000, v6, OS_LOG_TYPE_DEFAULT, "ARState: Removing anchor %s", buf, 0xCu);
    if (SBYTE7(v15) < 0)
      operator delete(__p[0]);
  }

  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 1080), (uint64_t)a2);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 1120), (uint64_t)a2);
  v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 80), (uint64_t)a2);
  v9 = v8;
  if (v8)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)__p = *(_OWORD *)a2;
    v15 = v10;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)(v8 + 6));
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(a3, (uint64_t)__p, __p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    v11 = (_QWORD *)(*(_QWORD *)a1 + 80);
  }
  else
  {
    v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 120), (uint64_t)a2);
    v9 = v12;
    if (!v12)
      return;
    v13 = *((_OWORD *)a2 + 1);
    *(_OWORD *)__p = *(_OWORD *)a2;
    v15 = v13;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)(v12 + 6));
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(a3, (uint64_t)__p, __p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    v11 = (_QWORD *)(*(_QWORD *)a1 + 120);
  }
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(v11, v9, (uint64_t)__p);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
}

void sub_2277CBFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t *RFLoggingServiceCreate()
{
  uint64_t *Instance;
  _QWORD *v1;

  if (qword_253DC9F08 != -1)
    dispatch_once(&qword_253DC9F08, &__block_literal_global_11);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::LoggingConsumer::LoggingConsumer((uint64_t)(v1 + 2));
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

void RFLoggingServiceSaveFullSnapshotToFile(uint64_t a1, const __CFURL *a2, __int128 *a3, void *a4)
{
  id v7;
  const __CFString *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21[2];
  char v22;
  std::string __p;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[24];
  _BYTE *v29;
  int v30;
  __int16 v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v8 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  applesauce::CF::details::CFString_get_value<true>(v8, (uint64_t)v21);
  CFRelease(v8);
  if (v22 >= 0)
    v9 = (char *)v21;
  else
    v9 = (char *)v21[0];
  if (a3)
  {
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
  }
  else
  {
    v20 = xmmword_2277EE900;
    v19 = xmmword_2277EE460;
    v18 = xmmword_2277EE450;
    v17 = xmmword_2277EE440;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x22E29E0BC](v7);
  v32[0] = &off_24EFD9AF0;
  v32[1] = v11;
  v33 = v32;
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  v24 = v17;
  v25 = v18;
  v26 = v19;
  v27 = v20;
  v12 = v28;
  v13 = (uint64_t)v33;
  if (!v33)
    goto LABEL_10;
  if (v33 != v32)
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
LABEL_10:
    v29 = (_BYTE *)v13;
    goto LABEL_12;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _BYTE *))(v32[0] + 24))(v32, v28);
LABEL_12:
  v30 = 65793;
  v31 = 256;
  rf::data_flow::consumer::LoggingConsumer::requestSaveFullSnapshot((std::string *)(v10 + 16), &__p);
  if (v29 == v28)
  {
    v14 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_17;
    v14 = 5;
    v12 = v29;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v33;
  if (v33 == v32)
  {
    v16 = 4;
    v15 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_24;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_24:
  if (v22 < 0)
    operator delete(v21[0]);

}

void sub_2277CC2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  if (a29 < 0)
    operator delete(__p);
  v32 = *(_QWORD **)(v30 - 64);
  if (v32 == (_QWORD *)(v30 - 88))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 88);
  }
  else
  {
    if (!v32)
      goto LABEL_8;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_8:
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void RFLoggingServiceStartSavingSnapshotsToFiles(uint64_t a1, const __CFURL *a2, __int128 *a3, void *a4, unsigned int a5)
{
  id v9;
  const __CFString *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[2];
  char v25;
  std::string __p;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int32 v33;
  BOOL v34;
  BOOL v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v10 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  applesauce::CF::details::CFString_get_value<true>(v10, (uint64_t)v24);
  CFRelease(v10);
  if (v25 >= 0)
    v11 = (char *)v24;
  else
    v11 = (char *)v24[0];
  if (a3)
  {
    v20 = *a3;
    v21 = a3[1];
    v22 = a3[2];
    v23 = a3[3];
  }
  else
  {
    v23 = xmmword_2277EE900;
    v22 = xmmword_2277EE460;
    v21 = xmmword_2277EE450;
    v20 = xmmword_2277EE440;
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x22E29E0BC](v9);
  v36[0] = &off_24EFD9B80;
  v36[1] = v13;
  v37 = v36;
  std::string::basic_string[abi:ne180100]<0>(&__p, v11);
  v27 = v20;
  v28 = v21;
  v14.i64[1] = *((_QWORD *)&v23 + 1);
  v29 = v22;
  v30 = v23;
  v15 = v31;
  v16 = (uint64_t)v37;
  if (!v37)
    goto LABEL_10;
  if (v37 != v36)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37);
LABEL_10:
    v32 = (_BYTE *)v16;
    goto LABEL_12;
  }
  v32 = v31;
  v14 = (int16x8_t)((__n128 (*)(_QWORD *, _BYTE *))*(_QWORD *)(v36[0] + 24))(v36, v31);
LABEL_12:
  v14.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(a5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFBFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  v33 = vmovn_s16(v14).u32[0];
  v34 = (a5 & 0x10) != 0;
  v35 = (a5 & 0x40) != 0;
  rf::data_flow::consumer::LoggingConsumer::startSavingSnapshots((rf::data_flow::consumer::LoggingConsumer *)(v12 + 16), &__p);
  if (v32 == v31)
  {
    v17 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_17;
    v17 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = v37;
  if (v37 == v36)
  {
    v19 = 4;
    v18 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_24;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_24:
  if (v25 < 0)
    operator delete(v24[0]);

}

void sub_2277CC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  if (a29 < 0)
    operator delete(__p);
  v32 = *(_QWORD **)(v30 - 64);
  if (v32 == (_QWORD *)(v30 - 88))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 88);
  }
  else
  {
    if (!v32)
      goto LABEL_8;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_8:
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void RFLoggingServiceStopSavingSnapshots(uint64_t a1)
{
  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::reset[abi:ne180100](*(_QWORD *)(a1 + 16) + 48);
}

uint64_t RFLoggingServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFLoggingServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFLoggingServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t ECSManagerNullable;
  char v7;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
  v10 = ECSManagerNullable;
  v11 = v7;
  v12 = a2;
  v13 = 1;
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 16) + 16))(v5 + 16, &v9);
}

_QWORD *RFLoggingObserverCreate()
{
  _QWORD *Instance;
  _QWORD *v1;
  _QWORD *v2;

  if (qword_253DC9F18 != -1)
    dispatch_once(&qword_253DC9F18, &__block_literal_global_3_1);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  v1[4] = 0;
  v1[8] = 0;
  v1[12] = 0;
  v2 = (_QWORD *)Instance[2];
  Instance[2] = v1;
  if (v2)
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::BridgableObject>::operator()[abi:ne180100](v2);
  CFRetain(Instance);
  CFRelease(Instance);
  return Instance;
}

void RFLoggingServiceRegisterObserver(uint64_t a1, const void *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (a2)
  {
    rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(&v12, a2);
    v11 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
  }
  else
  {
    v12 = 0uLL;
    v11 = 0uLL;
  }
  std::vector<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::push_back[abi:ne180100](v2 + 384, &v11);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2277CC854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void RFLoggingServiceRemoveObserver(uint64_t a1, const void *a2)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *(_QWORD *)(a1 + 16) + 16;
  if (a2)
  {
    rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(&v13, a2);
    v11 = v13;
    v12 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v11 = 0;
    v12 = 0;
  }
  rf::data_flow::consumer::LoggingConsumer::removeCallbacks(v2, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void RFLoggingObserverSetDidSaveFullSnapshotCallback(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>((_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v3);

}

void sub_2277CC998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  if (a2)
  {
    v8[0] = &off_24EFD9C80;
    v3 = v8;
    v8[1] = MEMORY[0x22E29E0BC](a2);
    v9 = v8;
  }
  else
  {
    v3 = 0;
  }
  if (v8 != a1)
  {
    v4 = (_QWORD *)a1[3];
    if (v3 == v8)
    {
      if (v4 == a1)
      {
        v6 = (void *)MEMORY[0x22E29E0BC]();
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        *a1 = &off_24EFD9C80;
        a1[1] = MEMORY[0x22E29E0BC](v6);

        a1[3] = a1;
        v3 = v9;
      }
      else
      {
        *a1 = &off_24EFD9C80;
        a1[1] = MEMORY[0x22E29E0BC]();
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v3 = (_QWORD *)a1[3];
        v9 = v3;
        a1[3] = a1;
      }
    }
    else
    {
      if (v4 == a1)
      {
        v3 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = v9;
        v9 = v8;
        v5 = 4;
LABEL_16:
        (*(void (**)(_QWORD *))(*v3 + 8 * v5))(v3);
        return a1;
      }
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
      v3 = v4;
    }
  }
  if (v3 == v8)
  {
    v5 = 4;
    v3 = v8;
    goto LABEL_16;
  }
  if (v3)
  {
    v5 = 5;
    goto LABEL_16;
  }
  return a1;
}

void sub_2277CCB94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RFLoggingObserverSetDidSaveSnapshotCallback(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>((_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v3);

}

void sub_2277CCBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t (***RFLoggingObserverSetDidUpdateMeshAssetsCallback(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t (***v12)();
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v10 = &off_24EFD9D10;
  v11 = MEMORY[0x22E29E0BC](a2);
  v12 = &v10;
  v13[0] = &off_24EFD9D10;
  v14 = v13;
  v4 = (_QWORD *)(v2 + 72);
  v13[1] = MEMORY[0x22E29E0BC](v11, v3);
  v5 = v14;
  if (v13 != (_QWORD *)(v2 + 72))
  {
    v6 = *(_QWORD **)(v2 + 96);
    if (v14 == v13)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v13[0] + 24))(v13, v15);
        (*(void (**)(_QWORD *))(*v14 + 32))(v14);
        v14 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 96) + 24))(*(_QWORD *)(v2 + 96), v13);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96));
        *(_QWORD *)(v2 + 96) = 0;
        v14 = v13;
        (*(void (**)(_QWORD *, uint64_t))(v15[0] + 24))(v15, v2 + 72);
        (*(void (**)(_QWORD *))(v15[0] + 32))(v15);
        *(_QWORD *)(v2 + 96) = v4;
        v5 = v14;
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v13[0] + 24))(v13, v2 + 72);
        (*(void (**)(_QWORD *))(*v14 + 32))(v14);
        v5 = *(_QWORD **)(v2 + 96);
        v14 = v5;
        *(_QWORD *)(v2 + 96) = v4;
      }
    }
    else
    {
      if (v6 == v4)
      {
        v5 = v13;
        (*(void (**)(uint64_t, _QWORD *))(*v4 + 24))(v2 + 72, v13);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96));
        *(_QWORD *)(v2 + 96) = v14;
        v14 = v13;
        v7 = 4;
        goto LABEL_13;
      }
      v14 = *(_QWORD **)(v2 + 96);
      *(_QWORD *)(v2 + 96) = v5;
      v5 = v6;
    }
  }
  if (v5 == v13)
  {
    v7 = 4;
    v5 = v13;
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v7 = 5;
  }
LABEL_13:
  (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
LABEL_14:
  result = v12;
  if (v12 == &v10)
  {
    v9 = 4;
    result = &v10;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (uint64_t (***)())(*result)[v9]();
}

void sub_2277CCE14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer15LoggingConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_21[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::LoggingConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9F20 = 0u;
  xmmword_253DC9F30 = 0u;
  xmmword_253DC9F40 = 0u;
  unk_253DC9F50 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9F60 = 0uLL;
  unk_253DC9F70 = 0uLL;
  *((_QWORD *)&xmmword_253DC9F20 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9F30 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DC9F40 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::finalizeCallback;
  qword_253DC9F58 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9F60 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_12 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277CCF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer((rf::data_flow::consumer::LoggingConsumer *)(v2 + 16));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9AF0;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9AF0;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, char *a2, const __CFURL *a3)
{
  uint64_t v3;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (a2[23] < 0)
      a2 = *(char **)a2;
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&cf, a2, a3);
    (*(void (**)(uint64_t, CFTypeRef))(v3 + 16))(v3, cf);
    if (cf)
      CFRelease(cf);
  }
}

void sub_2277CD188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::target_type()
{
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, char *a2, const __CFURL *a3)
{
  void **v4;
  CFIndex v5;
  CFURLRef v6;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (CFIndex)__p[1];
  v6 = CFURLCreateWithBytes(0, (const UInt8 *)v4, v5, 0, 0);
  *(_QWORD *)this = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E29DC30](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((char)v10 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_2277CD29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9B80;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9B80;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, char *a2, const __CFURL *a3)
{
  uint64_t v3;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (a2[23] < 0)
      a2 = *(char **)a2;
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&cf, a2, a3);
    (*(void (**)(uint64_t, CFTypeRef))(v3 + 16))(v3, cf);
    if (cf)
      CFRelease(cf);
  }
}

void sub_2277CD448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::target_type()
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer16LoggingCallbacksEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_22[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::LoggingCallbacks]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9F80 = 0u;
  xmmword_253DC9F90 = 0u;
  xmmword_253DC9FA0 = 0u;
  unk_253DC9FB0 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DC9FC0 = 0uLL;
  unk_253DC9FD0 = 0uLL;
  *((_QWORD *)&xmmword_253DC9F80 + 1) = v7;
  *(_QWORD *)&xmmword_253DC9F90 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::initCallback;
  *(_QWORD *)&xmmword_253DC9FA0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::finalizeCallback;
  qword_253DC9FB8 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DC9FC0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyDebugDescriptionCallback;
  qword_253DC9F10 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277CD620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_QWORD *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::finalizeCallback(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::BridgableObject>::operator()[abi:ne180100](result);
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::BridgableObject>::operator()[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x22E29DD50);
}

_QWORD *rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(_QWORD *a1, CFTypeRef cf)
{
  uint64_t v4;
  _QWORD *result;

  CFRetain(cf);
  v4 = *((_QWORD *)cf + 2);
  *a1 = v4 + 8;
  result = (_QWORD *)operator new();
  *result = &off_24EFD9C20;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4 + 8;
  a1[1] = result;
  return result;
}

void sub_2277CD794(void *a1)
{
  CFTypeRef *v1;

  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_2277CD7A8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E29DD50);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 24) - 8));
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9C80;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

_QWORD *std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24EFD9D10;
  v2[1] = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9D10;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  CFStringRef v9;

  if (*(_QWORD *)(a1 + 8))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    v6 = *a3;
    v7 = a3[1];
    while (v6 != v7)
    {
      v8 = (const char *)v6;
      if (*(char *)(v6 + 23) < 0)
        v8 = *(const char **)v6;
      v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      v6 += 24;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
    CFRelease(Mutable);
  }
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::target_type()
{
}

void rf::detail::removePRRMeshesFrom(rf *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  rf *v8;
  NSObject *v9;
  void **v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint8_t buf[16];
  __int128 v23;
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = a1;
    do
    {
      rf::realityFusionLogObject(a1);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        v10 = (SBYTE7(v25) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_227777000, v9, OS_LOG_TYPE_DEFAULT, "ARState: Removing prr mesh %s", buf, 0xCu);
        if (SBYTE7(v25) < 0)
          operator delete(__p[0]);
      }

      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 960), v5);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 1000), v5);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 40), v5))
      {
        goto LABEL_12;
      }
      rf::realityFusionLogObject(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        v21 = (SBYTE7(v25) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v21;
        _os_log_error_impl(&dword_227777000, v11, OS_LOG_TYPE_ERROR, "removePRRMeshesFrom(): Mesh %s to be removed but doesn't exist in prrMeshDictionary!", buf, 0xCu);
        if (SBYTE7(v25) < 0)
          operator delete(__p[0]);
      }

      if ((a3 & 1) == 0)
      {
LABEL_12:
        *(_OWORD *)buf = *(_OWORD *)v5;
        v23 = *(_OWORD *)(v5 + 16);
        v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 40), v5);
        if (!v12)
          goto LABEL_31;
        *(_OWORD *)__p = *(_OWORD *)buf;
        v25 = v23;
        v13 = (std::__shared_weak_count *)v12[7];
        v26 = v12[6];
        v27 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(a4, (uint64_t)__p, (uint64_t)__p);
        v16 = v27;
        if (v27)
        {
          v17 = (unint64_t *)&v27->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = *(_QWORD *)(v5 + 32);
        v20 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)a4, v5);
        if (!v20)
LABEL_31:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        *(_QWORD *)(v20[6] + 120) = v19;
        a1 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)v8 + 40), v5);
      }
      v5 += 40;
    }
    while (v5 != v6);
  }
}

void sub_2277CDE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updatePRRMeshesAt(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _OWORD *v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((_QWORD *)(*(_QWORD *)a1 + 40), v4))
      {
        v7 = *(_QWORD *)a1 + 40;
        v8 = *(_OWORD *)(v4 + 16);
        v32 = *(_OWORD *)v4;
        v33 = v8;
        *(_QWORD *)&v31[0] = &v32;
        v9 = *(_QWORD *)(std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v7, (uint64_t)&v32, (uint64_t)&std::piecewise_construct, (_OWORD **)v31)[6]+ 32);
        v10 = *(_OWORD *)(v4 + 16);
        v32 = *(_OWORD *)v4;
        v33 = v10;
        v34 = v9 + 1;
        v11 = *(_OWORD *)(v4 + 32);
        v12 = *(_OWORD *)(v4 + 48);
        v13 = *(_OWORD *)(v4 + 80);
        v37 = *(_OWORD *)(v4 + 64);
        v38 = v13;
        v35 = v11;
        v36 = v12;
        v39 = *(_BYTE *)(v4 + 96);
        v40 = 1;
        v41 = *(_QWORD *)(v4 + 104);
        LOBYTE(v42) = 0;
        v44 = 0;
        if (*(_BYTE *)(v4 + 136))
        {
          v14 = *(_QWORD *)(v4 + 112);
          *(_QWORD *)(v4 + 112) = 0;
          v42 = v14;
          v43 = *(_OWORD *)(v4 + 120);
          v44 = 1;
        }
        LOBYTE(v45) = 0;
        v47 = 0;
        if (*(_BYTE *)(v4 + 168))
        {
          v15 = *(_QWORD *)(v4 + 144);
          *(_QWORD *)(v4 + 144) = 0;
          v45 = v15;
          v46 = *(_OWORD *)(v4 + 152);
          v47 = 1;
        }
        LOBYTE(v48) = 0;
        v50 = 0;
        if (*(_BYTE *)(v4 + 200))
        {
          v16 = *(_QWORD *)(v4 + 176);
          *(_QWORD *)(v4 + 176) = 0;
          v48 = v16;
          v49 = *(_OWORD *)(v4 + 184);
          v50 = 1;
        }
        LOBYTE(v51) = 0;
        v53 = 0;
        if (*(_BYTE *)(v4 + 232))
        {
          v17 = *(_QWORD *)(v4 + 208);
          *(_QWORD *)(v4 + 208) = 0;
          v51 = v17;
          v52 = *(_OWORD *)(v4 + 216);
          v53 = 1;
        }
        LOBYTE(v54) = 0;
        v56 = 0;
        if (*(_BYTE *)(v4 + 264))
        {
          v18 = *(_QWORD *)(v4 + 240);
          *(_QWORD *)(v4 + 240) = 0;
          v54 = v18;
          v55 = *(_OWORD *)(v4 + 248);
          v56 = 1;
        }
        LOBYTE(v57) = 0;
        v59 = 0;
        if (*(_BYTE *)(v4 + 296))
        {
          v19 = *(_QWORD *)(v4 + 272);
          *(_QWORD *)(v4 + 272) = 0;
          v57 = v19;
          v58 = *(_OWORD *)(v4 + 280);
          v59 = 1;
        }
        LOBYTE(v60) = 0;
        v62 = 0;
        if (*(_BYTE *)(v4 + 328))
        {
          v20 = *(_QWORD *)(v4 + 304);
          *(_QWORD *)(v4 + 304) = 0;
          v60 = v20;
          v61 = *(_OWORD *)(v4 + 312);
          v62 = 1;
        }
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(&v32, &v28);
        v21 = *(_QWORD *)a1 + 40;
        v22 = *(_OWORD *)(v4 + 16);
        v31[0] = *(_OWORD *)v4;
        v31[1] = v22;
        v30 = v31;
        v23 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v21, (uint64_t)v31, (uint64_t)&std::piecewise_construct, &v30);
        std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v23 + 6, &v28);
        *(_QWORD *)&v31[0] = v4;
        v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a3, v4, (uint64_t)&std::piecewise_construct, (_OWORD **)v31);
        std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v24 + 6, &v28);
        v25 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        rf::data_flow::consumer::Mesh::~Mesh((id *)&v32);
      }
      v4 += 336;
    }
    while (v4 != v5);
  }
}

void sub_2277CE1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100]((uint64_t)va);
  rf::data_flow::consumer::Mesh::~Mesh((id *)va1);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void rf::detail::insertPRRMeshesInto(rf *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void *__p[2];
  __int128 v29;
  uint8_t buf[4];
  _BYTE v31[12];
  __int128 v32[2];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *(_OWORD **)a2;
  v5 = *(_OWORD **)(a2 + 8);
  if (*(_OWORD **)a2 != v5)
  {
    do
    {
      v7 = v4[1];
      v32[0] = *v4;
      v32[1] = v7;
      v33 = 1;
      v8 = v4[2];
      v9 = v4[3];
      v10 = v4[5];
      v36 = v4[4];
      v37 = v10;
      v34 = v8;
      v35 = v9;
      v38 = *((_BYTE *)v4 + 96);
      v39 = 1;
      v40 = *((_QWORD *)v4 + 13);
      LOBYTE(v41) = 0;
      v43 = 0;
      if (*((_BYTE *)v4 + 136))
      {
        v11 = *((_QWORD *)v4 + 14);
        *((_QWORD *)v4 + 14) = 0;
        v41 = v11;
        v42 = *(_OWORD *)((char *)v4 + 120);
        v43 = 1;
      }
      LOBYTE(v44) = 0;
      v46 = 0;
      if (*((_BYTE *)v4 + 168))
      {
        v12 = *((_QWORD *)v4 + 18);
        *((_QWORD *)v4 + 18) = 0;
        v44 = v12;
        v45 = *(_OWORD *)((char *)v4 + 152);
        v46 = 1;
      }
      LOBYTE(v47) = 0;
      v49 = 0;
      if (*((_BYTE *)v4 + 200))
      {
        v13 = *((_QWORD *)v4 + 22);
        *((_QWORD *)v4 + 22) = 0;
        v47 = v13;
        v48 = *(_OWORD *)((char *)v4 + 184);
        v49 = 1;
      }
      LOBYTE(v50) = 0;
      v52 = 0;
      if (*((_BYTE *)v4 + 232))
      {
        v14 = *((_QWORD *)v4 + 26);
        *((_QWORD *)v4 + 26) = 0;
        v50 = v14;
        v51 = *(_OWORD *)((char *)v4 + 216);
        v52 = 1;
      }
      LOBYTE(v53) = 0;
      v55 = 0;
      if (*((_BYTE *)v4 + 264))
      {
        v15 = *((_QWORD *)v4 + 30);
        *((_QWORD *)v4 + 30) = 0;
        v53 = v15;
        v54 = *(_OWORD *)((char *)v4 + 248);
        v55 = 1;
      }
      LOBYTE(v56) = 0;
      v58 = 0;
      if (*((_BYTE *)v4 + 296))
      {
        v16 = *((_QWORD *)v4 + 34);
        *((_QWORD *)v4 + 34) = 0;
        v56 = v16;
        v57 = *(_OWORD *)((char *)v4 + 280);
        v58 = 1;
      }
      LOBYTE(v59) = 0;
      v61 = 0;
      if (*((_BYTE *)v4 + 328))
      {
        v17 = *((_QWORD *)v4 + 38);
        *((_QWORD *)v4 + 38) = 0;
        v59 = v17;
        v60 = *(_OWORD *)((char *)v4 + 312);
        v61 = 1;
      }
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      rf::realityFusionLogObject(a1);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v32, __p);
        v19 = (SBYTE7(v29) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v31 = v19;
        _os_log_impl(&dword_227777000, v18, OS_LOG_TYPE_DEFAULT, "ARState: Adding prr mesh %s", buf, 0xCu);
        if (SBYTE7(v29) < 0)
          operator delete(__p[0]);
      }

      std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v32, buf);
      v20 = *(_QWORD *)a1 + 40;
      v21 = v4[1];
      *(_OWORD *)__p = *v4;
      v29 = v21;
      v27 = __p;
      v22 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v20, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v22 + 6, (uint64_t *)buf);
      __p[0] = v4;
      v23 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a3, (uint64_t)v4, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      std::shared_ptr<rf::data_flow::provider::InputFrameProvider>::operator=[abi:ne180100](v23 + 6, (uint64_t *)buf);
      v24 = *(std::__shared_weak_count **)&v31[4];
      if (*(_QWORD *)&v31[4])
      {
        v25 = (unint64_t *)(*(_QWORD *)&v31[4] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      rf::data_flow::consumer::Mesh::~Mesh((id *)v32);
      v4 += 21;
    }
    while (v4 != v5);
  }
}

void sub_2277CE5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  uint64_t v27;
  void *v28;

  rf::data_flow::consumer::Mesh::~Mesh(&a27);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

uint64_t *rf::PlacementComponentTypeInfo::instance(rf::PlacementComponentTypeInfo *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    rf::PlacementComponentTypeInfo::instance(void)::instance = 0;
    qword_2558F9F78 = 0;
    qword_2558F9F98 = 0;
    qword_2558F9FB8 = 0;
    qword_2558F9FD8 = 0;
    dword_2558F9FE0 = 0;
  }
  return &rf::PlacementComponentTypeInfo::instance(void)::instance;
}

_QWORD *rf::PlacementComponentTypeInfo::initWithType(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;

  *a1 = a2;
  v10 = a1 + 13;
  std::function<unsigned char const* ()(REComponent *)>::operator=(a1 + 1, a3);
  std::function<BOOL ()(REComponent *)>::operator=(a1 + 5, a4);
  std::function<void ()(REComponent *)>::operator=(a1 + 9, a5);
  return std::function<RESRT ()(REComponent *)>::operator=(v10, a6);
}

_QWORD *std::function<unsigned char const* ()(REComponent *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<BOOL ()(REComponent *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<BOOL ()(REComponent *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(REComponent *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<RESRT ()(REComponent *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<RESRT ()(REComponent *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

__n128 rf::PlacementComponent::identifier@<Q0>(rf::PlacementComponent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  __n128 result;
  uint64_t v7;

  v3 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7);
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  result = *v5;
  *(__n128 *)a2 = *v5;
  return result;
}

uint64_t rf::PlacementComponent::needsUpdate(rf::PlacementComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t rf::PlacementComponent::setDirty(rf::PlacementComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 96);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

_QWORD *std::__function::__value_func<unsigned char const* ()(REComponent *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2277CEB90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<BOOL ()(REComponent *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2277CED04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<RESRT ()(REComponent *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2277CEE78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *RFQueryServiceCreate()
{
  uint64_t *Instance;
  uint64_t v1;

  if (qword_253DC9FE8 != -1)
    dispatch_once(&qword_253DC9FE8, &__block_literal_global_12);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = Instance;
  *(_QWORD *)(v1 + 8) = &unk_24EFD9DC0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 1065353216;
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

void RFQueryServiceEvaluateEntityQuery(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  void (**v10)(id, _QWORD);
  uint64_t v11;
  uint64_t *v12;

  v10 = a4;
  v11 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a1 + 16) + 32;
  v12 = &v11;
  for (i = (uint64_t *)std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(v8, &v11, (uint64_t)&std::piecewise_construct, &v12)[5]; i; i = (uint64_t *)*i)
  {
    if ((***(unsigned int (****)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v7 + 8), (uint64_t)(i + 6))
      && !*((_DWORD *)i + 20))
    {
      v10[2](v10, i[6]);
    }
  }

}

void sub_2277CF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer13QueryConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_23[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::QueryConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DC9FF0 = 0u;
  xmmword_253DCA000 = 0u;
  xmmword_253DCA010 = 0u;
  unk_253DCA020 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DCA030 = 0uLL;
  unk_253DCA040 = 0uLL;
  *((_QWORD *)&xmmword_253DC9FF0 + 1) = v7;
  *(_QWORD *)&xmmword_253DCA000 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DCA010 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::finalizeCallback;
  qword_253DCA028 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DCA030 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_13 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277CF190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table(v2 + 32);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t rf::data_flow::details::NodeStore::createNode(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v6;
  std::string *v7;
  std::string *p_p;
  unint64_t v9;
  uint8x8_t v10;
  void ***v11;
  void **i;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void ***v33;
  unint64_t v34;
  void **v35;
  void **v36;
  void *v38;
  std::string v39;
  std::string __p;
  unint64_t v41;
  __int128 v42;
  std::string::size_type v43;
  __int128 v44;
  void *v45;
  _QWORD v46[2];
  char v47;

  v6 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v6;
  v41 = v6;
  std::to_string(&v39, v6);
  v7 = std::string::insert(&v39, 0, "Node ", 5uLL);
  __p = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  p_p = &__p;
  if (a3[1].__r_.__value_.__s.__data_[0])
    p_p = a3;
  v43 = p_p->__r_.__value_.__r.__words[2];
  v42 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
  p_p->__r_.__value_.__l.__size_ = 0;
  p_p->__r_.__value_.__r.__words[2] = 0;
  p_p->__r_.__value_.__r.__words[0] = 0;
  v45 = *(void **)(a2 + 16);
  v44 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      a2 = v6;
      if (v9 <= v6)
        a2 = v6 % v9;
    }
    else
    {
      a2 = (v9 - 1) & v6;
    }
    v11 = *(void ****)(*(_QWORD *)a1 + 8 * a2);
    if (v11)
    {
      for (i = *v11; i; i = (void **)*i)
      {
        v13 = (unint64_t)i[1];
        if (v13 == v6)
        {
          if (i[2] == (void *)v6)
            goto LABEL_76;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != a2)
            break;
        }
      }
    }
  }
  v14 = (char *)operator new(0x50uLL);
  v15 = (_QWORD *)(a1 + 16);
  v46[0] = v14;
  v46[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_QWORD *)v14 + 2) = v6;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *((_QWORD *)v14 + 9) = 0;
  v47 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v15;
          if (*v15)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v15;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_57;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_57:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v6)
        a2 = v6 % v9;
      else
        a2 = v6;
    }
    else
    {
      a2 = (v9 - 1) & v6;
    }
  }
  v33 = *(void ****)(*(_QWORD *)a1 + 8 * a2);
  i = (void **)v46[0];
  if (v33)
  {
    *(_QWORD *)v46[0] = *v33;
LABEL_74:
    *v33 = i;
    goto LABEL_75;
  }
  *(_QWORD *)v46[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * a2) = v15;
  if (*i)
  {
    v34 = *((_QWORD *)*i + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (void ***)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_74;
  }
LABEL_75:
  v46[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100]((uint64_t)v46);
LABEL_76:
  i[3] = (void *)v6;
  v35 = i + 4;
  if (*((char *)i + 55) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = v42;
  i[6] = (void *)v43;
  v36 = i + 7;
  if (*((char *)i + 79) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = v44;
  i[9] = v45;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  return v6;
}

void sub_2277CF798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100](v23 - 72);
  rf::data_flow::details::NodeStore::Node::~Node(&a23);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void rf::data_flow::details::NodeStore::Node::~Node(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t rf::data_flow::consumer::QueryConsumer::consumeLatestUpdate(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
    return rf::query::QueryDatabasePerScene::updateUsingScene(result + 24, *(_QWORD *)(a2 + 24));
  return result;
}

void rf::data_flow::consumer::QueryConsumer::~QueryConsumer(rf::data_flow::consumer::QueryConsumer *this)
{
  std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24);
}

{
  std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x22E29DD50);
}

uint64_t rf::data_flow::provider::SyntheticARData::SyntheticARData(uint64_t a1, void *a2, uint64_t a3, __int128 *a4)
{
  __int128 v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  id v31;
  unsigned __int8 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[4];
  void **v36;

  v31 = a2;
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_OWORD *)(a1 + 48) = xmmword_2277EE440;
  *(_OWORD *)(a1 + 64) = xmmword_2277EE450;
  *(_OWORD *)(a1 + 80) = xmmword_2277EE460;
  *(_OWORD *)(a1 + 96) = xmmword_2277EE900;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 112));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v8 = (void **)(a1 + 192);
  *(_OWORD *)(a1 + 240) = 0u;
  v9 = (void **)(a1 + 240);
  *(_BYTE *)(a1 + 384) = 0;
  v10 = (void **)(a1 + 264);
  v11 = (void **)(a1 + 216);
  v12 = (void **)(a1 + 288);
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  v13 = (void **)(a1 + 312);
  v14 = (void **)(a1 + 336);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v35, *(void **)a1, *(_QWORD *)(a1 + 8), (uint64_t *)a4);
  v32 = 3;
  rf::synthetic::SyntheticUsdKitParser::getInputMeshes((uint64_t)v35, &v32, &v33);
  std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate((void **)(a1 + 144));
  *(_OWORD *)(a1 + 144) = v33;
  *(_QWORD *)(a1 + 160) = v34;
  v34 = 0;
  v33 = 0uLL;
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v36);
  v32 = 4;
  rf::synthetic::SyntheticUsdKitParser::getInputMeshes((uint64_t)v35, &v32, &v33);
  std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate((void **)(a1 + 168));
  *(_OWORD *)(a1 + 168) = v33;
  *(_QWORD *)(a1 + 184) = v34;
  v34 = 0;
  v33 = 0uLL;
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v36);
  rf::synthetic::SyntheticUsdKitParser::getInputAnchors((rf::synthetic::SyntheticUsdKitParser *)v35, &v33);
  v15 = *(_QWORD *)(a1 + 192);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 200);
    v17 = *v8;
    if (v16 != v15)
    {
      do
        v16 = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v16 - 16);
      while (v16 != v15);
      v17 = *v8;
    }
    *(_QWORD *)(a1 + 200) = v15;
    operator delete(v17);
    *v8 = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = v33;
  *(_QWORD *)(a1 + 208) = v34;
  v34 = 0;
  v33 = 0uLL;
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v36);
  rf::synthetic::SyntheticUsdKitParser::getInputObjects((rf::synthetic::SyntheticUsdKitParser *)v35, (char **)&v33);
  v18 = *v11;
  if (*v11)
  {
    v19 = *(_QWORD *)(a1 + 224);
    v20 = *v11;
    if ((void *)v19 != v18)
    {
      do
        v19 = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v19 - 16);
      while ((void *)v19 != v18);
      v20 = *v11;
    }
    *(_QWORD *)(a1 + 224) = v18;
    operator delete(v20);
    *v11 = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
  }
  *(_OWORD *)(a1 + 216) = v33;
  *(_QWORD *)(a1 + 232) = v34;
  v34 = 0;
  v33 = 0uLL;
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v36);
  rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbes((rf::synthetic::SyntheticUsdKitParser *)v35, (char **)&v33);
  v21 = *v9;
  if (*v9)
  {
    v22 = *(_QWORD *)(a1 + 248);
    v23 = *v9;
    if ((void *)v22 != v21)
    {
      do
        v22 = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v22 - 16);
      while ((void *)v22 != v21);
      v23 = *v9;
    }
    *(_QWORD *)(a1 + 248) = v21;
    operator delete(v23);
    *v9 = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  *(_OWORD *)(a1 + 240) = v33;
  *(_QWORD *)(a1 + 256) = v34;
  v34 = 0;
  v33 = 0uLL;
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v36);
  *(_DWORD *)(a1 + 388) = 1;
  std::vector<rf::data_flow::RFUUID>::vector(&v33, (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 4);
  v24 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a1 + 272) = v24;
    operator delete(v24);
    *v10 = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  *(_OWORD *)v10 = v33;
  *(_QWORD *)(a1 + 280) = v34;
  std::vector<rf::data_flow::RFUUID>::vector(&v33, (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
  v25 = *v12;
  if (*v12)
  {
    *(_QWORD *)(a1 + 296) = v25;
    operator delete(v25);
    *v12 = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
  }
  *(_OWORD *)(a1 + 288) = v33;
  *(_QWORD *)(a1 + 304) = v34;
  std::vector<rf::data_flow::RFUUID>::vector(&v33, (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 4);
  v26 = *v13;
  if (*v13)
  {
    *(_QWORD *)(a1 + 320) = v26;
    operator delete(v26);
    *v13 = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  *(_OWORD *)v13 = v33;
  *(_QWORD *)(a1 + 328) = v34;
  std::vector<rf::data_flow::RFUUID>::vector(&v33, (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 4);
  v27 = *v14;
  if (*v14)
  {
    *(_QWORD *)(a1 + 344) = v27;
    operator delete(v27);
    *v14 = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 336) = v33;
  *(_QWORD *)(a1 + 352) = v34;
  std::vector<rf::data_flow::RFUUID>::vector(&v33, (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 4);
  v29 = (_QWORD *)(a1 + 360);
  v28 = *(void **)(a1 + 360);
  if (v28)
  {
    *(_QWORD *)(a1 + 368) = v28;
    operator delete(v28);
    *v29 = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
  }
  *(_OWORD *)v29 = v33;
  *(_QWORD *)(a1 + 376) = v34;

  return a1;
}

void sub_2277CFD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  id *v10;

  _Unwind_Resume(a1);
}

void sub_2277CFE40()
{
  JUMPOUT(0x2277CFD84);
}

void sub_2277CFE48()
{
  JUMPOUT(0x2277CFE14);
}

double rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::SyntheticARData *this, rf::data_flow::provider::InputData *a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  char *v64;
  char *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  void **v93;
  __int128 v94;
  double result;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[32];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  id v113;
  unsigned __int8 v114;
  uint64_t v115;
  char v116;
  id v117;
  char v118;
  id v119;
  char v120;
  id v121;
  char v122;
  id v123;
  int v124;
  char v125;
  id v126;
  char v127;
  id v128;
  char v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 18))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)this + 33);
      if (v4 >= (*((_QWORD *)this + 34) - v6) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v7 = (uint64_t *)(v6 + 32 * v4);
      if (*((_BYTE *)v7 + 16))
        v7 = (uint64_t *)*v7;
      if (!uuid_is_null((const unsigned __int8 *)v7))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)v107, *(const rf::data_flow::provider::InputMesh **)(*((_QWORD *)this + 18) + 16 * v4));
        v8 = *((_QWORD *)this + 33);
        if (v4 >= (*((_QWORD *)this + 34) - v8) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v9 = 0;
        v10 = (_OWORD *)(v8 + 32 * v4);
        v11 = v10[1];
        *(_OWORD *)v107 = *v10;
        *(_OWORD *)&v107[16] = v11;
        v12 = *((float32x4_t *)this + 3);
        v13 = *((float32x4_t *)this + 4);
        v14 = *((float32x4_t *)this + 5);
        v15 = *((float32x4_t *)this + 6);
        v130 = v108;
        v131 = v109;
        v132 = v110;
        v133 = v111;
        do
        {
          *(__int128 *)((char *)&v101 + v9) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(__int128 *)((char *)&v130 + v9))), v13, *(float32x2_t *)((char *)&v130 + v9), 1), v14, *(float32x4_t *)((char *)&v130 + v9), 2), v15, *(float32x4_t *)((char *)&v130 + v9), 3);
          v9 += 16;
        }
        while (v9 != 64);
        v108 = v101;
        v109 = v102;
        v110 = v103;
        v111 = v104;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a2 + 3, (__int128 *)v107);
        if (v129)

        if (v127)
        if (v125)

        if (v122)
        if (v120)

        if (v118)
        if (v116)

      }
      v4 = ++v5;
    }
    while (v5 < (unint64_t)((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4));
  }
  if (*((_QWORD *)this + 22) != *((_QWORD *)this + 21))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *((_QWORD *)this + 36);
      if (v16 >= (*((_QWORD *)this + 37) - v18) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v19 = (uint64_t *)(v18 + 32 * v16);
      if (*((_BYTE *)v19 + 16))
        v19 = (uint64_t *)*v19;
      if (!uuid_is_null((const unsigned __int8 *)v19))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)v107, *(const rf::data_flow::provider::InputMesh **)(*((_QWORD *)this + 21) + 16 * v16));
        v20 = *((_QWORD *)this + 36);
        if (v16 >= (*((_QWORD *)this + 37) - v20) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v21 = 0;
        v22 = (_OWORD *)(v20 + 32 * v16);
        v23 = v22[1];
        *(_OWORD *)v107 = *v22;
        *(_OWORD *)&v107[16] = v23;
        v24 = *((float32x4_t *)this + 3);
        v25 = *((float32x4_t *)this + 4);
        v26 = *((float32x4_t *)this + 5);
        v27 = *((float32x4_t *)this + 6);
        v130 = v108;
        v131 = v109;
        v132 = v110;
        v133 = v111;
        do
        {
          *(__int128 *)((char *)&v101 + v21) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(__int128 *)((char *)&v130 + v21))), v25, *(float32x2_t *)((char *)&v130 + v21), 1), v26, *(float32x4_t *)((char *)&v130 + v21), 2), v27, *(float32x4_t *)((char *)&v130 + v21), 3);
          v21 += 16;
        }
        while (v21 != 64);
        v108 = v101;
        v109 = v102;
        v110 = v103;
        v111 = v104;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a2 + 80, (__int128 *)v107);
        if (v129)

        if (v127)
        if (v125)

        if (v122)
        if (v120)

        if (v118)
        if (v116)

      }
      v16 = ++v17;
    }
    while (v17 < (unint64_t)((uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 4));
  }
  LODWORD(v105) = 0;
  if (*((_QWORD *)this + 25) != *((_QWORD *)this + 24))
  {
    v28 = 0;
    do
    {
      v29 = *((_QWORD *)this + 39);
      if (v28 >= (*((_QWORD *)this + 40) - v29) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v30 = (uint64_t *)(v29 + 32 * v28);
      if (*((_BYTE *)v30 + 16))
        v30 = (uint64_t *)*v30;
      if (!uuid_is_null((const unsigned __int8 *)v30))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v107, *(_QWORD *)(*((_QWORD *)this + 24) + 16 * v105));
        *(_QWORD *)&v101 = this;
        *((_QWORD *)&v101 + 1) = &v105;
        *(_QWORD *)&v102 = a2;
        if (v124 == -1)
          std::__throw_bad_variant_access[abi:ne180100]();
        *(_QWORD *)&v130 = &v101;
        ((void (*)(__int128 *, _BYTE *))off_24EFD9DF8[v124])(&v130, v107);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v107);
      }
      LODWORD(v105) = v105 + 1;
      v28 = v105;
    }
    while (v105 < (unint64_t)((uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 4));
  }
  if (*((_QWORD *)this + 28) != *((_QWORD *)this + 27))
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = *((_QWORD *)this + 42);
      if (v31 >= (*((_QWORD *)this + 43) - v33) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v34 = (uint64_t *)(v33 + 32 * v31);
      if (*((_BYTE *)v34 + 16))
        v34 = (uint64_t *)*v34;
      if (!uuid_is_null((const unsigned __int8 *)v34))
      {
        v35 = *(_OWORD **)(*((_QWORD *)this + 27) + 16 * v31);
        v36 = v35[2];
        v37 = v35[3];
        v38 = v35[4];
        v39 = v35[5];
        v40 = v35[7];
        v105 = v35[6];
        v106 = v40;
        v41 = *((_QWORD *)this + 42);
        if (v31 >= (*((_QWORD *)this + 43) - v41) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v42 = 0;
        v43 = (__int128 *)(v41 + 32 * v31);
        v130 = *v43;
        v131 = v43[1];
        v44 = *((float32x4_t *)this + 3);
        v45 = *((float32x4_t *)this + 4);
        v46 = *((float32x4_t *)this + 5);
        v47 = *((float32x4_t *)this + 6);
        v101 = v36;
        v102 = v37;
        v103 = v38;
        v104 = v39;
        do
        {
          *(float32x4_t *)&v107[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(__int128 *)((char *)&v101 + v42))), v45, *(float32x2_t *)((char *)&v101 + v42), 1), v46, *(float32x4_t *)((char *)&v101 + v42), 2), v47, *(float32x4_t *)((char *)&v101 + v42), 3);
          v42 += 16;
        }
        while (v42 != 64);
        v49 = *(_OWORD *)v107;
        v48 = *(_OWORD *)&v107[16];
        v51 = v108;
        v50 = v109;
        v52 = (__int128 *)*((_QWORD *)a2 + 72);
        v53 = *((_QWORD *)a2 + 73);
        if ((unint64_t)v52 >= v53)
        {
          v97 = *(_OWORD *)v107;
          v98 = *(_OWORD *)&v107[16];
          v99 = v108;
          v100 = v109;
          v57 = *((_QWORD *)a2 + 71);
          v58 = ((uint64_t)v52 - v57) >> 7;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 57)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v60 = v53 - v57;
          if (v60 >> 6 > v59)
            v59 = v60 >> 6;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFF80)
            v61 = 0x1FFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
            v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(v61);
          else
            v62 = 0;
          v63 = (_OWORD *)(v61 + (v58 << 7));
          *v63 = v130;
          v63[1] = v131;
          v63[2] = v97;
          v63[3] = v98;
          v63[4] = v99;
          v63[5] = v100;
          v63[6] = v105;
          v63[7] = v106;
          v64 = (char *)*((_QWORD *)a2 + 72);
          v65 = (char *)*((_QWORD *)a2 + 71);
          v66 = v63;
          if (v64 != v65)
          {
            do
            {
              v67 = *((_OWORD *)v64 - 8);
              v68 = *((_OWORD *)v64 - 7);
              v69 = *((_OWORD *)v64 - 5);
              *(v66 - 6) = *((_OWORD *)v64 - 6);
              *(v66 - 5) = v69;
              *(v66 - 8) = v67;
              *(v66 - 7) = v68;
              v70 = *((_OWORD *)v64 - 4);
              v71 = *((_OWORD *)v64 - 3);
              v72 = *((_OWORD *)v64 - 2);
              *((_QWORD *)v66 - 2) = *((_QWORD *)v64 - 2);
              *(v66 - 3) = v71;
              *(v66 - 2) = v72;
              *(v66 - 4) = v70;
              v66 -= 8;
              v64 -= 128;
            }
            while (v64 != v65);
            v64 = (char *)*((_QWORD *)a2 + 71);
          }
          *((_QWORD *)a2 + 71) = v66;
          v56 = v63 + 8;
          *((_QWORD *)a2 + 72) = v63 + 8;
          *((_QWORD *)a2 + 73) = v61 + (v62 << 7);
          if (v64)
            operator delete(v64);
        }
        else
        {
          v54 = v43[1];
          *v52 = *v43;
          v52[1] = v54;
          v52[2] = v49;
          v52[3] = v48;
          v52[4] = v51;
          v52[5] = v50;
          v55 = v106;
          v52[6] = v105;
          v52[7] = v55;
          v56 = v52 + 8;
        }
        *((_QWORD *)a2 + 72) = v56;
      }
      v31 = ++v32;
    }
    while (v32 < (unint64_t)((uint64_t)(*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 4));
  }
  if (*((_QWORD *)this + 31) != *((_QWORD *)this + 30))
  {
    v73 = 0;
    v74 = 0;
    do
    {
      v75 = *((_QWORD *)this + 45);
      if (v73 >= (*((_QWORD *)this + 46) - v75) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v76 = (uint64_t *)(v75 + 32 * v73);
      if (*((_BYTE *)v76 + 16))
        v76 = (uint64_t *)*v76;
      if (!uuid_is_null((const unsigned __int8 *)v76))
      {
        v77 = *(_QWORD *)(*((_QWORD *)this + 30) + 16 * v73);
        v109 = *(_OWORD *)(v77 + 48);
        v110 = *(_OWORD *)(v77 + 64);
        v111 = *(_OWORD *)(v77 + 80);
        v112 = *(_OWORD *)(v77 + 96);
        *(_OWORD *)v107 = *(_OWORD *)v77;
        *(_OWORD *)&v107[16] = *(_OWORD *)(v77 + 16);
        v108 = *(_OWORD *)(v77 + 32);
        LOBYTE(v113) = 0;
        v114 = 0;
        v78 = *(unsigned __int8 *)(v77 + 120);
        if (*(_BYTE *)(v77 + 120))
        {
          v113 = *(id *)(v77 + 112);
          v79 = 1;
          v114 = 1;
        }
        else
        {
          v79 = 0;
        }
        v80 = *(_QWORD *)(v77 + 128);
        v115 = v80;
        v81 = *((_QWORD *)this + 45);
        if (v73 >= (*((_QWORD *)this + 46) - v81) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v82 = 0;
        v83 = (_OWORD *)(v81 + 32 * v73);
        *(_OWORD *)v107 = *v83;
        *(_OWORD *)&v107[16] = v83[1];
        v84 = *((float32x4_t *)this + 3);
        v85 = *((float32x4_t *)this + 4);
        v86 = *((float32x4_t *)this + 5);
        v87 = *((float32x4_t *)this + 6);
        v130 = v108;
        v131 = v109;
        v132 = v110;
        v133 = v111;
        do
        {
          *(__int128 *)((char *)&v101 + v82) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, COERCE_FLOAT(*(__int128 *)((char *)&v130 + v82))), v85, *(float32x2_t *)((char *)&v130 + v82), 1), v86, *(float32x4_t *)((char *)&v130 + v82), 2), v87, *(float32x4_t *)((char *)&v130 + v82), 3);
          v82 += 16;
        }
        while (v82 != 64);
        v108 = v101;
        v109 = v102;
        v110 = v103;
        v111 = v104;
        v88 = *((_QWORD *)a2 + 63);
        if (v88 >= *((_QWORD *)a2 + 64))
        {
          v90 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>((uint64_t *)a2 + 62, (__int128 *)v107);
          v79 = v114;
        }
        else
        {
          *(_OWORD *)(v88 + 48) = v109;
          *(_OWORD *)(v88 + 64) = v110;
          *(_OWORD *)(v88 + 80) = v111;
          *(_OWORD *)(v88 + 96) = v112;
          *(_OWORD *)v88 = *(_OWORD *)v107;
          *(_OWORD *)(v88 + 16) = *(_OWORD *)&v107[16];
          *(_OWORD *)(v88 + 32) = v108;
          *(_BYTE *)(v88 + 112) = 0;
          *(_BYTE *)(v88 + 120) = 0;
          if (v78)
          {
            v89 = v113;
            v113 = 0;
            *(_QWORD *)(v88 + 112) = v89;
            *(_BYTE *)(v88 + 120) = 1;
          }
          *(_QWORD *)(v88 + 128) = v80;
          v90 = v88 + 144;
        }
        *((_QWORD *)a2 + 63) = v90;
        if (v79)

      }
      v73 = ++v74;
    }
    while (v74 < (unint64_t)((uint64_t)(*((_QWORD *)this + 31) - *((_QWORD *)this + 30)) >> 4));
  }
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v107, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)v107 = *((_OWORD *)this + 1);
    *(_QWORD *)&v107[16] = *((_QWORD *)this + 4);
  }
  v91 = *((_OWORD *)this + 4);
  v108 = *((_OWORD *)this + 3);
  v109 = v91;
  v92 = *((_OWORD *)this + 6);
  v110 = *((_OWORD *)this + 5);
  v111 = v92;
  v93 = (void **)((char *)a2 + 816);
  if (*((char *)a2 + 839) < 0)
    operator delete(*v93);
  *(_OWORD *)v93 = *(_OWORD *)v107;
  *((_QWORD *)a2 + 104) = *(_QWORD *)&v107[16];
  v94 = v109;
  *((_OWORD *)a2 + 53) = v108;
  *((_OWORD *)a2 + 54) = v94;
  result = *(double *)&v110;
  v96 = v111;
  *((_OWORD *)a2 + 55) = v110;
  *((_OWORD *)a2 + 56) = v96;
  *((_DWORD *)a2 + 254) = *((_DWORD *)this + 97);
  *((_BYTE *)a2 + 1020) = 1;
  return result;
}

void sub_2277D06F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,char a44)
{
  if (a44)

  _Unwind_Resume(exception_object);
}

void std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  __int128 *v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0xC30C30C30C30C3)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x61861861861861)
      v12 = 0xC30C30C30C30C3;
    else
      v12 = v11;
    v23 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>(v4, v12);
    else
      v13 = 0;
    v14 = (uint64_t)&v13[336 * v9];
    v15 = &v13[336 * v12];
    std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v14, a2);
    v8 = v14 + 336;
    v17 = (__int128 *)*a1;
    v16 = (__int128 *)a1[1];
    if (v16 == (__int128 *)*a1)
    {
      v18 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v14 -= 336;
        v16 -= 21;
        std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v14, v16);
      }
      while (v16 != v17);
      v18 = *(int64x2_t *)a1;
    }
    *a1 = v14;
    a1[1] = v8;
    v21 = v18;
    v19 = a1[2];
    a1[2] = (uint64_t)v15;
    v22 = v19;
    v20 = v18.i64[0];
    std::__split_buffer<rf::data_flow::provider::InputMesh>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 336;
  }
  a1[1] = v8;
}

std::string *rf::data_flow::provider::SyntheticARData::appendRemovedData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  char **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 *v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  char **v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  _OWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  unint64_t v74;
  unsigned int v75;
  char **v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  unint64_t v82;
  __int128 v83;
  _OWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  std::string *result;
  void *v97;
  _QWORD v98[3];
  unsigned int v99;
  _QWORD *v100;
  __int128 v101;
  __int128 v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 144))
  {
    v4 = 0;
    v5 = 0;
    v6 = (char **)(a2 + 48);
    do
    {
      v7 = *(_QWORD *)(a1 + 264);
      if (v4 >= (*(_QWORD *)(a1 + 272) - v7) >> 5)
LABEL_112:
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v8 = (uint64_t *)(v7 + 32 * v4);
      if (*((_BYTE *)v8 + 16))
        v8 = (uint64_t *)*v8;
      if (!uuid_is_null((const unsigned __int8 *)v8))
      {
        v9 = *(_QWORD *)(a1 + 264);
        if (v4 >= (*(_QWORD *)(a1 + 272) - v9) >> 5)
          goto LABEL_112;
        v10 = (_OWORD *)(v9 + 32 * v4);
        v11 = *(_OWORD **)(a2 + 56);
        v12 = *(_QWORD *)(a2 + 64);
        if ((unint64_t)v11 >= v12)
        {
          v15 = ((char *)v11 - *v6) >> 5;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v12 - (_QWORD)*v6;
          if (v17 >> 4 > v16)
            v16 = v17 >> 4;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
            v18 = 0x7FFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 64, v18);
          else
            v19 = 0;
          v20 = &v19[32 * v15];
          v21 = v10[1];
          *(_OWORD *)v20 = *v10;
          *((_OWORD *)v20 + 1) = v21;
          v23 = *(char **)(a2 + 48);
          v22 = *(char **)(a2 + 56);
          v24 = v20;
          if (v22 != v23)
          {
            do
            {
              v25 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v25;
              v24 -= 32;
              v22 -= 32;
            }
            while (v22 != v23);
            v22 = *v6;
          }
          v14 = v20 + 32;
          *(_QWORD *)(a2 + 48) = v24;
          *(_QWORD *)(a2 + 56) = v20 + 32;
          *(_QWORD *)(a2 + 64) = &v19[32 * v18];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v13 = v10[1];
          *v11 = *v10;
          v11[1] = v13;
          v14 = v11 + 2;
        }
        *(_QWORD *)(a2 + 56) = v14;
      }
      v4 = ++v5;
    }
    while (v5 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 4));
  }
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "timeIntervalSince1970");
  if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168))
  {
    v27 = v26;
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(a1 + 288);
      if (v28 >= (*(_QWORD *)(a1 + 296) - v30) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v31 = (uint64_t *)(v30 + 32 * v28);
      if (*((_BYTE *)v31 + 16))
        v31 = (uint64_t *)*v31;
      if (!uuid_is_null((const unsigned __int8 *)v31))
      {
        v32 = *(_QWORD *)(a1 + 288);
        if (v28 >= (*(_QWORD *)(a1 + 296) - v32) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v33 = (__int128 *)(v32 + 32 * v28);
        v101 = *v33;
        v102 = v33[1];
        v34 = *(char **)(a2 + 672);
        v35 = *(_QWORD *)(a2 + 680);
        if ((unint64_t)v34 >= v35)
        {
          v38 = *(char **)(a2 + 664);
          v39 = 0xCCCCCCCCCCCCCCCDLL * ((v34 - v38) >> 3) + 1;
          if (v39 > 0x666666666666666)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v35 - (_QWORD)v38) >> 3);
          if (2 * v40 > v39)
            v39 = 2 * v40;
          if (v40 >= 0x333333333333333)
            v41 = 0x666666666666666;
          else
            v41 = v39;
          if (v41)
          {
            if (v41 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v42 = (char *)operator new(40 * v41);
          }
          else
          {
            v42 = 0;
          }
          v43 = v102;
          v44 = &v42[8 * ((v34 - v38) >> 3)];
          *(_OWORD *)v44 = v101;
          *((_OWORD *)v44 + 1) = v43;
          *((_QWORD *)v44 + 4) = v27;
          v45 = v44;
          if (v34 != v38)
          {
            do
            {
              v46 = *(_OWORD *)(v34 - 40);
              v47 = *(_OWORD *)(v34 - 24);
              *((_QWORD *)v45 - 1) = *((_QWORD *)v34 - 1);
              *(_OWORD *)(v45 - 24) = v47;
              *(_OWORD *)(v45 - 40) = v46;
              v45 -= 40;
              v34 -= 40;
            }
            while (v34 != v38);
            v34 = *(char **)(a2 + 664);
          }
          v48 = &v42[40 * v41];
          *(_QWORD *)(a2 + 664) = v45;
          v37 = v44 + 40;
          *(_QWORD *)(a2 + 672) = v44 + 40;
          *(_QWORD *)(a2 + 680) = v48;
          if (v34)
            operator delete(v34);
        }
        else
        {
          v36 = v33[1];
          *(_OWORD *)v34 = *v33;
          *((_OWORD *)v34 + 1) = v36;
          *((_QWORD *)v34 + 4) = v27;
          v37 = v34 + 40;
        }
        *(_QWORD *)(a2 + 672) = v37;
      }
      v28 = ++v29;
    }
    while (v29 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4));
  }

  v99 = 0;
  if (*(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 192))
  {
    v49 = 0;
    do
    {
      v50 = *(_QWORD *)(a1 + 312);
      if (v49 >= (*(_QWORD *)(a1 + 320) - v50) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v51 = (uint64_t *)(v50 + 32 * v49);
      if (*((_BYTE *)v51 + 16))
        v51 = (uint64_t *)*v51;
      if (!uuid_is_null((const unsigned __int8 *)v51))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v101, *(_QWORD *)(*(_QWORD *)(a1 + 192) + 16 * v99));
        v98[0] = a1;
        v98[1] = &v99;
        v98[2] = a2;
        if (v103 == -1)
          std::__throw_bad_variant_access[abi:ne180100]();
        v100 = v98;
        ((void (*)(_QWORD **, __int128 *))off_24EFD9E28[v103])(&v100, &v101);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v101);
      }
      v49 = ++v99;
    }
    while (v99 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 4));
  }
  if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216))
  {
    v52 = 0;
    v53 = 0;
    v54 = (char **)(a2 + 592);
    do
    {
      v55 = *(_QWORD *)(a1 + 336);
      if (v52 >= (*(_QWORD *)(a1 + 344) - v55) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v56 = (uint64_t *)(v55 + 32 * v52);
      if (*((_BYTE *)v56 + 16))
        v56 = (uint64_t *)*v56;
      if (!uuid_is_null((const unsigned __int8 *)v56))
      {
        v57 = *(_QWORD *)(a1 + 336);
        if (v52 >= (*(_QWORD *)(a1 + 344) - v57) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v58 = (_OWORD *)(v57 + 32 * v52);
        v59 = *(_OWORD **)(a2 + 600);
        v60 = *(_QWORD *)(a2 + 608);
        if ((unint64_t)v59 >= v60)
        {
          v63 = ((char *)v59 - *v54) >> 5;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v65 = v60 - (_QWORD)*v54;
          if (v65 >> 4 > v64)
            v64 = v65 >> 4;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
            v66 = 0x7FFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 608, v66);
          else
            v67 = 0;
          v68 = &v67[32 * v63];
          v69 = v58[1];
          *(_OWORD *)v68 = *v58;
          *((_OWORD *)v68 + 1) = v69;
          v70 = *(char **)(a2 + 600);
          v71 = *(char **)(a2 + 592);
          v72 = v68;
          if (v70 != v71)
          {
            do
            {
              v73 = *((_OWORD *)v70 - 1);
              *((_OWORD *)v72 - 2) = *((_OWORD *)v70 - 2);
              *((_OWORD *)v72 - 1) = v73;
              v72 -= 32;
              v70 -= 32;
            }
            while (v70 != v71);
            v70 = *v54;
          }
          *(_QWORD *)(a2 + 592) = v72;
          v62 = v68 + 32;
          *(_QWORD *)(a2 + 600) = v68 + 32;
          *(_QWORD *)(a2 + 608) = &v67[32 * v66];
          if (v70)
            operator delete(v70);
        }
        else
        {
          v61 = v58[1];
          *v59 = *v58;
          v59[1] = v61;
          v62 = v59 + 2;
        }
        *(_QWORD *)(a2 + 600) = v62;
      }
      v52 = ++v53;
    }
    while (v53 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 4));
  }
  if (*(_QWORD *)(a1 + 248) != *(_QWORD *)(a1 + 240))
  {
    v74 = 0;
    v75 = 0;
    v76 = (char **)(a2 + 520);
    do
    {
      v77 = *(_QWORD *)(a1 + 360);
      if (v74 >= (*(_QWORD *)(a1 + 368) - v77) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v78 = (uint64_t *)(v77 + 32 * v74);
      if (*((_BYTE *)v78 + 16))
        v78 = (uint64_t *)*v78;
      if (!uuid_is_null((const unsigned __int8 *)v78))
      {
        v79 = *(_QWORD *)(a1 + 360);
        if (v74 >= (*(_QWORD *)(a1 + 368) - v79) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v80 = (_OWORD *)(v79 + 32 * v74);
        v81 = *(_OWORD **)(a2 + 528);
        v82 = *(_QWORD *)(a2 + 536);
        if ((unint64_t)v81 >= v82)
        {
          v85 = ((char *)v81 - *v76) >> 5;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v87 = v82 - (_QWORD)*v76;
          if (v87 >> 4 > v86)
            v86 = v87 >> 4;
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0)
            v88 = 0x7FFFFFFFFFFFFFFLL;
          else
            v88 = v86;
          if (v88)
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 536, v88);
          else
            v89 = 0;
          v90 = &v89[32 * v85];
          v91 = v80[1];
          *(_OWORD *)v90 = *v80;
          *((_OWORD *)v90 + 1) = v91;
          v92 = *(char **)(a2 + 528);
          v93 = *(char **)(a2 + 520);
          v94 = v90;
          if (v92 != v93)
          {
            do
            {
              v95 = *((_OWORD *)v92 - 1);
              *((_OWORD *)v94 - 2) = *((_OWORD *)v92 - 2);
              *((_OWORD *)v94 - 1) = v95;
              v94 -= 32;
              v92 -= 32;
            }
            while (v92 != v93);
            v92 = *v76;
          }
          *(_QWORD *)(a2 + 520) = v94;
          v84 = v90 + 32;
          *(_QWORD *)(a2 + 528) = v90 + 32;
          *(_QWORD *)(a2 + 536) = &v89[32 * v88];
          if (v92)
            operator delete(v92);
        }
        else
        {
          v83 = v80[1];
          *v81 = *v80;
          v81[1] = v83;
          v84 = v81 + 2;
        }
        *(_QWORD *)(a2 + 528) = v84;
      }
      v74 = ++v75;
    }
    while (v75 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 4));
  }
  result = std::string::operator=((std::string *)(a2 + 784), (const std::string *)(a1 + 16));
  *(_DWORD *)(a2 + 1016) = 0;
  *(_BYTE *)(a2 + 1020) = 1;
  return result;
}

void sub_2277D0FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void rf::data_flow::provider::SyntheticARData::appendUpdateProbe(float32x4_t *this, rf::data_flow::provider::InputData *a2, const unsigned __int8 *a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _OWORD *f32;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  char v39;
  uint64_t v40;
  uuid_t uu;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (this[15].i64[1] != this[15].i64[0])
  {
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t *)((char *)a2 + 472);
    f32 = (_OWORD *)this[7].f32;
    do
    {
      v10 = this[22].i64[1];
      if (v6 >= (this[23].i64[0] - v10) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v11 = (uint64_t *)(v10 + 32 * v6);
      if (*((_BYTE *)v11 + 16))
        v11 = (uint64_t *)*v11;
      if (!uuid_is_null((const unsigned __int8 *)v11))
      {
        v12 = *(_QWORD *)(this[15].i64[0] + 16 * v6);
        v13 = *(_OWORD *)(v12 + 80);
        v35 = *(_OWORD *)(v12 + 64);
        v36 = v13;
        v37 = *(_OWORD *)(v12 + 96);
        v14 = *(_OWORD *)(v12 + 16);
        v31 = *(_OWORD *)v12;
        v32 = v14;
        v15 = *(_OWORD *)(v12 + 48);
        v33 = *(_OWORD *)(v12 + 32);
        v34 = v15;
        LOBYTE(v38) = 0;
        v39 = 0;
        v16 = *(unsigned __int8 *)(v12 + 120);
        if (*(_BYTE *)(v12 + 120))
        {
          v38 = *(id *)(v12 + 112);
          v39 = 1;
        }
        v17 = *(_QWORD *)(v12 + 128);
        v40 = v17;
        LOBYTE(v42) = 0;
        *((_QWORD *)&v42 + 1) = 0;
        uuid_clear(uu);
        v18 = 0;
        v31 = *(_OWORD *)a3;
        v32 = v42;
        v19 = this[3];
        v20 = this[4];
        v21 = this[5];
        v22 = this[6];
        v30[0] = v33;
        v30[1] = v34;
        v30[2] = v35;
        v30[3] = v36;
        do
        {
          *(float32x4_t *)&uu[v18 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(v30[v18])), v20, *(float32x2_t *)&v30[v18], 1), v21, (float32x4_t)v30[v18], 2), v22, (float32x4_t)v30[v18], 3);
          ++v18;
        }
        while (v18 != 4);
        v33 = *(_OWORD *)uu;
        v34 = v42;
        v35 = v43;
        v36 = v44;
        v23 = *((_QWORD *)a2 + 60);
        if (v23 >= *((_QWORD *)a2 + 61))
        {
          v28 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>(v8, &v31);
        }
        else
        {
          v24 = v36;
          *(_OWORD *)(v23 + 64) = v35;
          *(_OWORD *)(v23 + 80) = v24;
          *(_OWORD *)(v23 + 96) = v37;
          v25 = v32;
          *(_OWORD *)v23 = v31;
          *(_OWORD *)(v23 + 16) = v25;
          v26 = v34;
          *(_OWORD *)(v23 + 32) = v33;
          *(_OWORD *)(v23 + 48) = v26;
          *(_BYTE *)(v23 + 112) = 0;
          *(_BYTE *)(v23 + 120) = 0;
          if (v16)
          {
            v27 = v38;
            v38 = 0;
            *(_QWORD *)(v23 + 112) = v27;
            *(_BYTE *)(v23 + 120) = 1;
          }
          *(_QWORD *)(v23 + 128) = v17;
          v28 = v23 + 144;
        }
        *((_QWORD *)a2 + 60) = v28;
        LOBYTE(v42) = 0;
        *((_QWORD *)&v42 + 1) = 0;
        uuid_clear(uu);
        v29 = v42;
        *f32 = *(_OWORD *)a3;
        f32[1] = v29;
        if (v39)

      }
      v6 = ++v7;
    }
    while (v7 < (unint64_t)((this[15].i64[1] - this[15].i64[0]) >> 4));
  }
}

void sub_2277D1234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,char a32)
{
  if (a32)

  _Unwind_Resume(exception_object);
}

void rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  char *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  _OWORD *v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uuid_t out;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  id v105;
  unsigned __int8 v106;
  uint64_t v107;
  char v108;
  id v109;
  char v110;
  id v111;
  char v112;
  id v113;
  char v114;
  id v115;
  int v116;
  char v117;
  id v118;
  char v119;
  id v120;
  char v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uuid_t uu;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  if (a2[9].i64[1] != a2[9].i64[0])
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = a2[16].i64[1];
      if (v5 >= (a2[17].i64[0] - v7) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v8 = (uint64_t *)(v7 + 32 * v5);
      if (*((_BYTE *)v8 + 16))
        v8 = (uint64_t *)*v8;
      if (uuid_is_null((const unsigned __int8 *)v8))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)out, *(const rf::data_flow::provider::InputMesh **)(a2[9].i64[0] + 16 * v5));
        LOBYTE(v127) = 0;
        *((_QWORD *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        v9 = 0;
        *(_OWORD *)out = *(_OWORD *)uu;
        v99 = v127;
        v10 = a2[3];
        v11 = a2[4];
        v12 = a2[5];
        v13 = a2[6];
        v122 = v100;
        v123 = v101;
        v124 = v102;
        v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(__int128 *)((char *)&v122 + v9))), v11, *(float32x2_t *)((char *)&v122 + v9), 1), v12, *(float32x4_t *)((char *)&v122 + v9), 2), v13, *(float32x4_t *)((char *)&v122 + v9), 3);
          v9 += 16;
        }
        while (v9 != 64);
        v100 = *(_OWORD *)uu;
        v101 = v127;
        v102 = v128;
        v103 = v129;
        v14 = a2[16].i64[1];
        if (v5 >= (a2[17].i64[0] - v14) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v15 = v99;
        v16 = (_OWORD *)(v14 + 32 * v5);
        *v16 = *(_OWORD *)out;
        v16[1] = v15;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a3, (__int128 *)out);
        if (v121)

        if (v119)
        if (v117)

        if (v114)
        if (v112)

        if (v110)
        if (v108)

      }
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((a2[9].i64[1] - a2[9].i64[0]) >> 4));
  }
  if (a2[11].i64[0] != a2[10].i64[1])
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = a2[18].i64[0];
      if (v17 >= (a2[18].i64[1] - v19) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v20 = (uint64_t *)(v19 + 32 * v17);
      if (*((_BYTE *)v20 + 16))
        v20 = (uint64_t *)*v20;
      if (uuid_is_null((const unsigned __int8 *)v20))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)out, *(const rf::data_flow::provider::InputMesh **)(a2[10].i64[1] + 16 * v17));
        LOBYTE(v127) = 0;
        *((_QWORD *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        v21 = 0;
        *(_OWORD *)out = *(_OWORD *)uu;
        v99 = v127;
        v22 = a2[3];
        v23 = a2[4];
        v24 = a2[5];
        v25 = a2[6];
        v122 = v100;
        v123 = v101;
        v124 = v102;
        v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v21] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(__int128 *)((char *)&v122 + v21))), v23, *(float32x2_t *)((char *)&v122 + v21), 1), v24, *(float32x4_t *)((char *)&v122 + v21), 2), v25, *(float32x4_t *)((char *)&v122 + v21), 3);
          v21 += 16;
        }
        while (v21 != 64);
        v100 = *(_OWORD *)uu;
        v101 = v127;
        v102 = v128;
        v103 = v129;
        v26 = a2[18].i64[0];
        if (v17 >= (a2[18].i64[1] - v26) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v27 = v99;
        v28 = (_OWORD *)(v26 + 32 * v17);
        *v28 = *(_OWORD *)out;
        v28[1] = v27;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)(a3 + 616), (__int128 *)out);
        if (v121)

        if (v119)
        if (v117)

        if (v114)
        if (v112)

        if (v110)
        if (v108)

      }
      v17 = ++v18;
    }
    while (v18 < (unint64_t)((a2[11].i64[0] - a2[10].i64[1]) >> 4));
  }
  LODWORD(v96) = 0;
  if (a2[12].i64[1] != a2[12].i64[0])
  {
    v29 = 0;
    do
    {
      v30 = a2[19].i64[1];
      if (v29 >= (a2[20].i64[0] - v30) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v31 = (uint64_t *)(v30 + 32 * v29);
      if (*((_BYTE *)v31 + 16))
        v31 = (uint64_t *)*v31;
      if (uuid_is_null((const unsigned __int8 *)v31))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)out, *(_QWORD *)(a2[12].i64[0] + 16 * v96));
        *(_QWORD *)uu = a2;
        *(_QWORD *)&uu[8] = &v96;
        *(_QWORD *)&v127 = a3;
        if (v116 == -1)
          std::__throw_bad_variant_access[abi:ne180100]();
        *(_QWORD *)&v122 = uu;
        ((void (*)(__int128 *, unsigned __int8 *))off_24EFD9E58[v116])(&v122, out);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)out);
      }
      LODWORD(v96) = v96 + 1;
      v29 = v96;
    }
    while (v96 < (unint64_t)((a2[12].i64[1] - a2[12].i64[0]) >> 4));
  }
  if (a2[14].i64[0] != a2[13].i64[1])
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = a2[21].i64[0];
      if (v32 >= (a2[21].i64[1] - v34) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v35 = (uint64_t *)(v34 + 32 * v32);
      if (*((_BYTE *)v35 + 16))
        v35 = (uint64_t *)*v35;
      if (uuid_is_null((const unsigned __int8 *)v35))
      {
        v36 = *(_OWORD **)(a2[13].i64[1] + 16 * v32);
        v92 = v36[3];
        v94 = v36[2];
        v88 = v36[5];
        v90 = v36[4];
        v37 = v36[7];
        v96 = v36[6];
        v97 = v37;
        LOBYTE(v99) = 0;
        *((_QWORD *)&v99 + 1) = 0;
        uuid_clear(out);
        uuid_generate_random(out);
        v38 = 0;
        v122 = *(_OWORD *)out;
        v123 = v99;
        v39 = a2[3];
        v40 = a2[4];
        v41 = a2[5];
        v42 = a2[6];
        *(_OWORD *)uu = v94;
        v127 = v92;
        v128 = v90;
        v129 = v88;
        do
        {
          *(float32x4_t *)&out[v38] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&uu[v38])), v40, *(float32x2_t *)&uu[v38], 1), v41, *(float32x4_t *)&uu[v38], 2), v42, *(float32x4_t *)&uu[v38], 3);
          v38 += 16;
        }
        while (v38 != 64);
        v43 = a2[21].i64[0];
        if (v32 >= (a2[21].i64[1] - v43) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v45 = *(_OWORD *)out;
        v44 = v99;
        v46 = v100;
        v47 = v101;
        v48 = (_OWORD *)(v43 + 32 * v32);
        *v48 = v122;
        v48[1] = v123;
        v49 = *(_OWORD **)(a3 + 552);
        v50 = *(_QWORD *)(a3 + 560);
        if ((unint64_t)v49 >= v50)
        {
          v89 = v45;
          v91 = v44;
          v93 = v46;
          v95 = v47;
          v54 = *(_QWORD *)(a3 + 544);
          v55 = ((uint64_t)v49 - v54) >> 7;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 57)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v57 = v50 - v54;
          if (v57 >> 6 > v56)
            v56 = v57 >> 6;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFF80)
            v58 = 0x1FFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
            v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(v58);
          else
            v59 = 0;
          v60 = (_OWORD *)(v58 + (v55 << 7));
          *v60 = v122;
          v60[1] = v123;
          v60[2] = v89;
          v60[3] = v91;
          v60[4] = v93;
          v60[5] = v95;
          v60[6] = v96;
          v60[7] = v97;
          v61 = *(char **)(a3 + 552);
          v62 = *(char **)(a3 + 544);
          v63 = v60;
          if (v61 != v62)
          {
            do
            {
              v64 = *((_OWORD *)v61 - 8);
              v65 = *((_OWORD *)v61 - 7);
              v66 = *((_OWORD *)v61 - 5);
              *(v63 - 6) = *((_OWORD *)v61 - 6);
              *(v63 - 5) = v66;
              *(v63 - 8) = v64;
              *(v63 - 7) = v65;
              v67 = *((_OWORD *)v61 - 4);
              v68 = *((_OWORD *)v61 - 3);
              v69 = *((_OWORD *)v61 - 2);
              *((_QWORD *)v63 - 2) = *((_QWORD *)v61 - 2);
              *(v63 - 3) = v68;
              *(v63 - 2) = v69;
              *(v63 - 4) = v67;
              v63 -= 8;
              v61 -= 128;
            }
            while (v61 != v62);
            v61 = *(char **)(a3 + 544);
          }
          *(_QWORD *)(a3 + 544) = v63;
          v53 = v60 + 8;
          *(_QWORD *)(a3 + 552) = v60 + 8;
          *(_QWORD *)(a3 + 560) = v58 + (v59 << 7);
          if (v61)
            operator delete(v61);
        }
        else
        {
          *v49 = v122;
          v49[1] = v123;
          v49[2] = v45;
          v49[3] = v44;
          v49[4] = v46;
          v51 = v96;
          v52 = v97;
          v49[5] = v47;
          v49[6] = v51;
          v49[7] = v52;
          v53 = v49 + 8;
        }
        *(_QWORD *)(a3 + 552) = v53;
      }
      v32 = ++v33;
    }
    while (v33 < (unint64_t)((a2[14].i64[0] - a2[13].i64[1]) >> 4));
  }
  if (a2[15].i64[1] != a2[15].i64[0])
  {
    v70 = 0;
    v71 = 0;
    do
    {
      v72 = a2[22].i64[1];
      if (v70 >= (a2[23].i64[0] - v72) >> 5)
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      v73 = (uint64_t *)(v72 + 32 * v70);
      if (*((_BYTE *)v73 + 16))
        v73 = (uint64_t *)*v73;
      if (uuid_is_null((const unsigned __int8 *)v73))
      {
        v74 = *(_QWORD *)(a2[15].i64[0] + 16 * v70);
        v101 = *(_OWORD *)(v74 + 48);
        v102 = *(_OWORD *)(v74 + 64);
        v103 = *(_OWORD *)(v74 + 80);
        v104 = *(_OWORD *)(v74 + 96);
        *(_OWORD *)out = *(_OWORD *)v74;
        v99 = *(_OWORD *)(v74 + 16);
        v100 = *(_OWORD *)(v74 + 32);
        LOBYTE(v105) = 0;
        v106 = 0;
        v75 = *(unsigned __int8 *)(v74 + 120);
        if (*(_BYTE *)(v74 + 120))
        {
          v105 = *(id *)(v74 + 112);
          v76 = 1;
          v106 = 1;
        }
        else
        {
          v76 = 0;
        }
        v77 = *(_QWORD *)(v74 + 128);
        v107 = v77;
        LOBYTE(v127) = 0;
        *((_QWORD *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        v78 = 0;
        *(_OWORD *)out = *(_OWORD *)uu;
        v99 = v127;
        v79 = a2[3];
        v80 = a2[4];
        v81 = a2[5];
        v82 = a2[6];
        v122 = v100;
        v123 = v101;
        v124 = v102;
        v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v78] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v79, COERCE_FLOAT(*(__int128 *)((char *)&v122 + v78))), v80, *(float32x2_t *)((char *)&v122 + v78), 1), v81, *(float32x4_t *)((char *)&v122 + v78), 2), v82, *(float32x4_t *)((char *)&v122 + v78), 3);
          v78 += 16;
        }
        while (v78 != 64);
        v100 = *(_OWORD *)uu;
        v101 = v127;
        v102 = v128;
        v103 = v129;
        v83 = a2[22].i64[1];
        if (v70 >= (a2[23].i64[0] - v83) >> 5)
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        v84 = (_OWORD *)(v83 + 32 * v70);
        *v84 = *(_OWORD *)out;
        v84[1] = v99;
        v85 = *(_QWORD *)(a3 + 480);
        if (v85 >= *(_QWORD *)(a3 + 488))
        {
          v87 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>((uint64_t *)(a3 + 472), (__int128 *)out);
          v76 = v106;
        }
        else
        {
          *(_OWORD *)(v85 + 48) = v101;
          *(_OWORD *)(v85 + 64) = v102;
          *(_OWORD *)(v85 + 80) = v103;
          *(_OWORD *)(v85 + 96) = v104;
          *(_OWORD *)v85 = *(_OWORD *)out;
          *(_OWORD *)(v85 + 16) = v99;
          *(_OWORD *)(v85 + 32) = v100;
          *(_BYTE *)(v85 + 112) = 0;
          *(_BYTE *)(v85 + 120) = 0;
          if (v75)
          {
            v86 = v105;
            v105 = 0;
            *(_QWORD *)(v85 + 112) = v86;
            *(_BYTE *)(v85 + 120) = 1;
          }
          *(_QWORD *)(v85 + 128) = v77;
          v87 = v85 + 144;
        }
        *(_QWORD *)(a3 + 480) = v87;
        if (v76)

      }
      v70 = ++v71;
    }
    while (v71 < (unint64_t)((a2[15].i64[1] - a2[15].i64[0]) >> 4));
  }
  *(_DWORD *)(a3 + 1016) = a2[24].i32[1];
  *(_BYTE *)(a3 + 1020) = 1;
}

void sub_2277D1B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,char a36)
{
  if (a36)

  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<rf::data_flow::DataGraph>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<rf::data_flow::RFUUID>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    v6 = 32 * a2;
    do
    {
      *(_BYTE *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      uuid_clear((unsigned __int8 *)v4);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2277D1C50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

rf::data_flow::provider::InputMesh *rf::data_flow::provider::InputMesh::InputMesh(rf::data_flow::provider::InputMesh *this, const rf::data_flow::provider::InputMesh *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v8;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    *((_QWORD *)this + 14) = *((id *)a2 + 14);
    *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
    *((_BYTE *)this + 136) = 1;
  }
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    *((_QWORD *)this + 18) = *((id *)a2 + 18);
    *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
    *((_BYTE *)this + 168) = 1;
  }
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    *((_QWORD *)this + 22) = *((id *)a2 + 22);
    *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)a2 + 184);
    *((_BYTE *)this + 200) = 1;
  }
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    *((_QWORD *)this + 26) = *((id *)a2 + 26);
    *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
    *((_BYTE *)this + 232) = 1;
  }
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    *((_QWORD *)this + 30) = *((id *)a2 + 30);
    *(_OWORD *)((char *)this + 248) = *(_OWORD *)((char *)a2 + 248);
    *((_BYTE *)this + 264) = 1;
  }
  *((_BYTE *)this + 272) = 0;
  *((_BYTE *)this + 296) = 0;
  if (*((_BYTE *)a2 + 296))
  {
    *((_QWORD *)this + 34) = *((id *)a2 + 34);
    *(_OWORD *)((char *)this + 280) = *(_OWORD *)((char *)a2 + 280);
    *((_BYTE *)this + 296) = 1;
  }
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 328) = 0;
  if (*((_BYTE *)a2 + 328))
  {
    *((_QWORD *)this + 38) = *((id *)a2 + 38);
    *(_OWORD *)((char *)this + 312) = *(_OWORD *)((char *)a2 + 312);
    *((_BYTE *)this + 328) = 1;
  }
  return this;
}

uint64_t std::__split_buffer<rf::data_flow::provider::InputMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 336;
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(i - 336));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[4];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  id v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v24[0] = a2[2];
  v24[1] = v13;
  v24[2] = v14;
  v24[3] = v15;
  do
  {
    *(__int128 *)((char *)&v25 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v24[v6])), v10, *(float32x2_t *)&v24[v6], 1), v11, (float32x4_t)v24[v6], 2), v12, (float32x4_t)v24[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v26;
  v17 = v27;
  v18 = v28;
  a2[2] = v25;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  *((_DWORD *)a2 + 25) = 2;
  v19 = (uint64_t *)&v2[2][6];
  v20 = a2[5];
  v29 = a2[4];
  v30[0] = v20;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v25 = *a2;
  v26 = v21;
  v22 = a2[3];
  v27 = a2[2];
  v28 = v22;
  v31 = *((id *)a2 + 14);
  v32 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v25);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v25);
}

void sub_2277D1F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t *v19;
  _OWORD v21[4];
  _OWORD v22[16];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (_OWORD *)(v5 + 32 * v4);
  v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v22[1];
  v17 = v22[2];
  v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  v19 = v2[2];
  std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>((uint64_t)v22, (__int128 *)a2);
  v23 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_2277D20A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t *v19;
  _OWORD v21[4];
  _OWORD v22[16];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (_OWORD *)(v5 + 32 * v4);
  v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v22[1];
  v17 = v22[2];
  v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  v19 = v2[2];
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>((uint64_t)v22, (__int128 *)a2);
  v23 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_2277D21C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t *v19;
  _OWORD v21[4];
  _OWORD v22[16];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (_OWORD *)(v5 + 32 * v4);
  v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v22[1];
  v17 = v22[2];
  v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  v19 = v2[2];
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>((uint64_t)v22, (__int128 *)a2);
  v23 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_2277D22DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v29[4];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v7 = 0;
  v8 = (__int128 *)(v5 + 32 * v4);
  v9 = v8[1];
  *a2 = *v8;
  a2[1] = v9;
  v10 = v3[3];
  v11 = v3[4];
  v12 = v3[5];
  v13 = v3[6];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  v29[0] = a2[2];
  v29[1] = v14;
  v29[2] = v15;
  v29[3] = v16;
  do
  {
    *(__int128 *)((char *)&v30 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(v29[v7])), v11, *(float32x2_t *)&v29[v7], 1), v12, (float32x4_t)v29[v7], 2), v13, (float32x4_t)v29[v7], 3);
    ++v7;
  }
  while (v7 != 4);
  v17 = v31;
  v18 = v32;
  v19 = v33;
  a2[2] = v30;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  *((_DWORD *)a2 + 25) = 2;
  v20 = (uint64_t *)&v2[2][6];
  v21 = a2[5];
  v34 = a2[4];
  v35[0] = v21;
  *(_OWORD *)((char *)v35 + 9) = *(__int128 *)((char *)a2 + 89);
  v22 = a2[1];
  v30 = *a2;
  v31 = v22;
  v23 = a2[3];
  v32 = a2[2];
  v33 = v23;
  v36 = *((id *)a2 + 14);
  v24 = a2[13];
  v41 = a2[12];
  v42 = v24;
  v25 = a2[15];
  v43 = a2[14];
  v44 = v25;
  v26 = a2[9];
  v37 = a2[8];
  v38 = v26;
  v27 = a2[11];
  v39 = a2[10];
  v40 = v27;
  v45 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v20, (uint64_t)&v30);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
}

void sub_2277D244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  id v32;
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v7 = 0;
  v8 = (__int128 *)(v5 + 32 * v4);
  v9 = v8[1];
  *a2 = *v8;
  a2[1] = v9;
  v10 = v3[3];
  v11 = v3[4];
  v12 = v3[5];
  v13 = v3[6];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  v25[0] = a2[2];
  v25[1] = v14;
  v25[2] = v15;
  v25[3] = v16;
  do
  {
    *(__int128 *)((char *)&v26 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(v25[v7])), v11, *(float32x2_t *)&v25[v7], 1), v12, (float32x4_t)v25[v7], 2), v13, (float32x4_t)v25[v7], 3);
    ++v7;
  }
  while (v7 != 4);
  v17 = v27;
  v18 = v28;
  v19 = v29;
  a2[2] = v26;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  *((_DWORD *)a2 + 25) = 2;
  v20 = (uint64_t *)&v2[2][6];
  v21 = a2[5];
  v30 = a2[4];
  v31[0] = v21;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)a2 + 89);
  v22 = a2[1];
  v26 = *a2;
  v27 = v22;
  v23 = a2[3];
  v28 = a2[2];
  v29 = v23;
  v32 = *((id *)a2 + 14);
  v33 = *((_DWORD *)a2 + 32);
  v34 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v20, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_2277D259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 7);
}

uint64_t std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xE38E38E38E38E3)
    v9 = 0x1C71C71C71C71C7;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[18 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[18 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[6];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = v16;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  v11[112] = 0;
  v11[120] = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v17 = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)v11 + 14) = v17;
    v11[120] = 1;
  }
  v10[18 * v4 + 16] = *((_QWORD *)a2 + 16);
  v20[2] = v11 + 144;
  std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_2277D2738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  do
  {
    *(__int128 *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v27;
  v17 = v28;
  v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v26 = *a2;
  v27 = v21;
  v22 = a2[3];
  v28 = a2[2];
  v29 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v32 = v23;
  v33 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_2277D2864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v30[0] = a2[2];
  v30[1] = v13;
  v30[2] = v14;
  v30[3] = v15;
  do
  {
    *(__int128 *)((char *)&v31 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v30[v6])), v10, *(float32x2_t *)&v30[v6], 1), v11, (float32x4_t)v30[v6], 2), v12, (float32x4_t)v30[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v32;
  v17 = v33;
  v18 = v34;
  a2[2] = v31;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v35 = a2[4];
  v36[0] = v20;
  *(_OWORD *)((char *)v36 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v31 = *a2;
  v32 = v21;
  v22 = a2[3];
  v33 = a2[2];
  v34 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v37 = v23;
  v24 = a2[9];
  v38 = a2[8];
  v39 = v24;
  v25 = a2[10];
  v26 = a2[12];
  v27 = *((_QWORD *)a2 + 26);
  v41 = a2[11];
  v42 = v26;
  v40 = v25;
  v44 = *(__int128 *)((char *)a2 + 216);
  v28 = *((_QWORD *)a2 + 29);
  v43 = v27;
  v45 = v28;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  v46 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v31);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v31);
}

void sub_2277D29CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  do
  {
    *(__int128 *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v27;
  v17 = v28;
  v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v26 = *a2;
  v27 = v21;
  v22 = a2[3];
  v28 = a2[2];
  v29 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v32 = v23;
  v33 = *((_BYTE *)a2 + 128);
  v34 = *(__int128 *)((char *)a2 + 136);
  v35 = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  v36 = a2[10];
  v37 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  v38 = a2[12];
  v39 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_2277D2B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD v29[4];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v29[0] = a2[2];
  v29[1] = v13;
  v29[2] = v14;
  v29[3] = v15;
  do
  {
    *(__int128 *)((char *)&v30 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v29[v6])), v10, *(float32x2_t *)&v29[v6], 1), v11, (float32x4_t)v29[v6], 2), v12, (float32x4_t)v29[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v31;
  v17 = v32;
  v18 = v33;
  a2[2] = v30;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v34 = a2[4];
  v35[0] = v20;
  *(_OWORD *)((char *)v35 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v30 = *a2;
  v31 = v21;
  v22 = a2[3];
  v32 = a2[2];
  v33 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v36 = v23;
  v24 = *((_QWORD *)a2 + 18);
  v37 = a2[8];
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v25 = *((_QWORD *)a2 + 21);
  v38 = v24;
  v40 = v25;
  v39 = *(__int128 *)((char *)a2 + 152);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  v26 = a2[12];
  v41 = a2[11];
  v42 = v26;
  v27 = a2[14];
  v43 = a2[13];
  v44 = v27;
  v45 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v30);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
}

void sub_2277D2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v31[0] = a2[2];
  v31[1] = v13;
  v31[2] = v14;
  v31[3] = v15;
  do
  {
    *(__int128 *)((char *)&v32 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v31[v6])), v10, *(float32x2_t *)&v31[v6], 1), v11, (float32x4_t)v31[v6], 2), v12, (float32x4_t)v31[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v33;
  v17 = v34;
  v18 = v35;
  a2[2] = v32;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v36 = a2[4];
  v37[0] = v20;
  *(_OWORD *)((char *)v37 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v32 = *a2;
  v33 = v21;
  v22 = a2[3];
  v34 = a2[2];
  v35 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v38 = v23;
  v24 = a2[8];
  v25 = a2[9];
  v26 = a2[11];
  v41 = a2[10];
  v42 = v26;
  v39 = v24;
  v40 = v25;
  v27 = a2[12];
  v28 = a2[13];
  v29 = a2[15];
  v45 = a2[14];
  v46 = v29;
  v43 = v27;
  v44 = v28;
  v47 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v32);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v32);
}

void sub_2277D2DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, __int128 *a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1]->u32[0];
  v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5)
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  v6 = 0;
  v7 = (__int128 *)(v5 + 32 * v4);
  v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  do
  {
    *(__int128 *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v16 = v27;
  v17 = v28;
  v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  v19 = &v2[2][7].i64[1];
  v20 = a2[5];
  v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)a2 + 89);
  v21 = a2[1];
  v26 = *a2;
  v27 = v21;
  v22 = a2[3];
  v28 = a2[2];
  v29 = v22;
  v23 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v32 = v23;
  v33 = *((_DWORD *)a2 + 32);
  v34 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_2277D2F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v24[4];
  uuid_t uu;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  v24[2] = v11;
  v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v26;
  v14 = v27;
  v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v26 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  v28 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v31 = v22;
  v32 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D3078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v29[4];
  uuid_t uu;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v31;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v29[0] = *(_OWORD *)(a2 + 32);
  v29[1] = v10;
  v29[2] = v11;
  v29[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v29[v4])), v7, *(float32x2_t *)&v29[v4], 1), v8, (float32x4_t)v29[v4], 2), v9, (float32x4_t)v29[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v31;
  v14 = v32;
  v15 = v33;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v34 = *(_OWORD *)(a2 + 64);
  v35[0] = v19;
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v31 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v32 = *(_OWORD *)(a2 + 32);
  v33 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v36 = v22;
  v23 = *(_OWORD *)(a2 + 144);
  v37 = *(_OWORD *)(a2 + 128);
  v38 = v23;
  v24 = *(_OWORD *)(a2 + 160);
  v25 = *(_OWORD *)(a2 + 192);
  v26 = *(_QWORD *)(a2 + 208);
  v40 = *(_OWORD *)(a2 + 176);
  v41 = v25;
  v39 = v24;
  v43 = *(_OWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 232);
  v42 = v26;
  v44 = v27;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  v45 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v24[4];
  uuid_t uu;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  v24[2] = v11;
  v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v26;
  v14 = v27;
  v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v26 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  v28 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v31 = v22;
  v32 = *(_BYTE *)(a2 + 128);
  v33 = *(_OWORD *)(a2 + 136);
  v34 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v35 = *(_OWORD *)(a2 + 160);
  v36 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v37 = *(_OWORD *)(a2 + 192);
  v38 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D33A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD v28[4];
  uuid_t uu;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v30;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v28[0] = *(_OWORD *)(a2 + 32);
  v28[1] = v10;
  v28[2] = v11;
  v28[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v28[v4])), v7, *(float32x2_t *)&v28[v4], 1), v8, (float32x4_t)v28[v4], 2), v9, (float32x4_t)v28[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v30;
  v14 = v31;
  v15 = v32;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v33 = *(_OWORD *)(a2 + 64);
  v34[0] = v19;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v30 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v31 = *(_OWORD *)(a2 + 32);
  v32 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v35 = v22;
  v23 = *(_QWORD *)(a2 + 144);
  v36 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v24 = *(_QWORD *)(a2 + 168);
  v37 = v23;
  v39 = v24;
  v38 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v25 = *(_OWORD *)(a2 + 192);
  v40 = *(_OWORD *)(a2 + 176);
  v41 = v25;
  v26 = *(_OWORD *)(a2 + 224);
  v42 = *(_OWORD *)(a2 + 208);
  v43 = v26;
  v44 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D353C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v30[4];
  uuid_t uu;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v32) = 0;
  *((_QWORD *)&v32 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v32;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v30[0] = *(_OWORD *)(a2 + 32);
  v30[1] = v10;
  v30[2] = v11;
  v30[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v30[v4])), v7, *(float32x2_t *)&v30[v4], 1), v8, (float32x4_t)v30[v4], 2), v9, (float32x4_t)v30[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v32;
  v14 = v33;
  v15 = v34;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v35 = *(_OWORD *)(a2 + 64);
  v36[0] = v19;
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v32 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v33 = *(_OWORD *)(a2 + 32);
  v34 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v37 = v22;
  v23 = *(_OWORD *)(a2 + 128);
  v24 = *(_OWORD *)(a2 + 144);
  v25 = *(_OWORD *)(a2 + 176);
  v40 = *(_OWORD *)(a2 + 160);
  v41 = v25;
  v38 = v23;
  v39 = v24;
  v26 = *(_OWORD *)(a2 + 192);
  v27 = *(_OWORD *)(a2 + 208);
  v28 = *(_OWORD *)(a2 + 240);
  v44 = *(_OWORD *)(a2 + 224);
  v45 = v28;
  v42 = v26;
  v43 = v27;
  v46 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D36B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  float32x4_t **v3;
  uint64_t v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v24[4];
  uuid_t uu;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  v4 = 0;
  v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = (*v3)[3];
  v7 = (*v3)[4];
  v8 = (*v3)[5];
  v9 = (*v3)[6];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  v24[2] = v11;
  v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  v13 = v26;
  v14 = v27;
  v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  v17 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v17;
  v18 = &v3[2][4].i64[1];
  v19 = *(_OWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu = *(_OWORD *)a2;
  v26 = v20;
  v21 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  v28 = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v31 = v22;
  v32 = *(_DWORD *)(a2 + 128);
  v33 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_2277D3814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void rf::helpers::createInputMeshFromARMeshAnchor(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  rf::internal *v32;
  void **v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  rf::data_flow::RFUUID *v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  void *v49;
  id v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  void *__p[2];
  char v55;
  int v56;
  void **v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v50 = a1;
  objc_msgSend(v50, "geometry");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "normals");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "count") <= 0)
  {
    rf::getMessage((rf *)"ARMeshAnchor must always provide normals!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v55 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v32);
    v53 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    rf::getMessage((rf *)"ARMeshAnchor must always provide normals!", v51);
    if (v52 >= 0)
      v33 = v51;
    else
      v33 = (void **)v51[0];
    v56 = 136315138;
    v57 = v33;
    _os_log_send_and_compose_impl();
    if (v52 < 0)
      operator delete(v51[0]);
    _os_crash_msg();
    __break(1u);
  }

  objc_msgSend(v50, "transform");
  v46 = v8;
  v48 = v7;
  v42 = v10;
  v44 = v9;
  objc_msgSend(v50, "identifier");
  v41 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
  rf::data_flow::RFUUID::copy(v41, a3);
  *(_OWORD *)(a3 + 32) = v48;
  *(_OWORD *)(a3 + 48) = v46;
  *(_OWORD *)(a3 + 64) = v44;
  *(_OWORD *)(a3 + 80) = v42;
  *(_BYTE *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 100) = a2;
  objc_msgSend(v50, "lastUpdateTimestamp");
  *(_QWORD *)(a3 + 104) = v11;
  objc_msgSend(v50, "geometry");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "vertices");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "buffer");
  v12 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "geometry");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "vertices");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v43, "format");
  objc_msgSend(v50, "geometry");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "vertices");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v39, "count");
  *(_QWORD *)(a3 + 112) = v12;
  *(_QWORD *)(a3 + 120) = v13;
  *(_QWORD *)(a3 + 128) = v14;
  *(_BYTE *)(a3 + 136) = 1;
  objc_msgSend(v50, "geometry");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "normals");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "buffer");
  v15 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "geometry");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "normals");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v35, "format");
  objc_msgSend(v50, "geometry");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "normals");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "count");
  *(_QWORD *)(a3 + 144) = v15;
  *(_QWORD *)(a3 + 152) = v16;
  *(_QWORD *)(a3 + 160) = v18;
  *(_BYTE *)(a3 + 168) = 1;
  objc_msgSend(v50, "geometry");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "faces");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "buffer");
  v21 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "geometry");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "faces");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "count");
  *(_QWORD *)(a3 + 176) = v21;
  *(_QWORD *)(a3 + 184) = 36;
  *(_QWORD *)(a3 + 192) = 3 * v24;
  *(_BYTE *)(a3 + 200) = 1;
  objc_msgSend(v50, "geometry");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "classification");
  v26 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "buffer");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend(v26, "buffer");
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v26, "format");
    v30 = objc_msgSend(v26, "count");
    *(_QWORD *)(a3 + 208) = v28;
    *(_QWORD *)(a3 + 216) = v29;
    v31 = 1;
    *(_QWORD *)(a3 + 224) = v30;
  }
  else
  {
    v31 = 0;
    *(_BYTE *)(a3 + 208) = 0;
  }
  *(_BYTE *)(a3 + 232) = v31;

  *(_BYTE *)(a3 + 240) = 0;
  *(_BYTE *)(a3 + 264) = 0;
  *(_BYTE *)(a3 + 272) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  *(_BYTE *)(a3 + 304) = 0;
  *(_BYTE *)(a3 + 328) = 0;

}

void sub_2277D3C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (*(_BYTE *)(v38 + 200))
  if (*(_BYTE *)(v38 + 168))

  if (*(_BYTE *)(v38 + 136))
  _Unwind_Resume(a1);
}

void rf::helpers::getBaseAnchorPropertiesFromARAnchor(rf::helpers *this@<X0>, uint64_t a2@<X8>)
{
  rf::helpers *v4;
  rf::data_flow::RFUUID *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  *(_OWORD *)(a2 + 32) = xmmword_2277EE440;
  *(_OWORD *)(a2 + 48) = xmmword_2277EE450;
  *(_OWORD *)(a2 + 64) = xmmword_2277EE460;
  *(_OWORD *)(a2 + 80) = xmmword_2277EE900;
  *(_QWORD *)(a2 + 96) = 16842752;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  -[rf::helpers identifier](v4, "identifier");
  v5 = (rf::data_flow::RFUUID *)objc_claimAutoreleasedReturnValue();
  rf::data_flow::RFUUID::copy(v5, (uint64_t)v12);
  v6 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v6;

  -[rf::helpers transform](v4, "transform");
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v10;
  if (-[rf::helpers conformsToProtocol:](v4, "conformsToProtocol:", &unk_2558FCA28))
    *(_BYTE *)(a2 + 99) = -[rf::helpers isTracked](v4, "isTracked");
  *(_DWORD *)(a2 + 100) = 1;
  v11 = *(void **)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v4;

}

void sub_2277D3FE8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void rf::internal::logAssert(const char *a1)
{
  std::string::size_type size;
  int v2;
  char **v3;
  unint64_t v4;
  uint64_t i;
  char *v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int j;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  std::string *v20;
  char *v21;
  std::string::value_type *v22;
  const std::string::value_type *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int64x2_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int64x2_t v45;
  char *v46;
  std::string v47;
  std::string v48;
  std::string v49;
  _DWORD v50[2];
  std::string __p;
  std::string v52;
  std::string v53;
  void *v54;
  char v55;
  std::string::value_type *v56;
  int64x2_t v57;
  char *v58;
  char **v59;
  _BYTE buf[12];
  __int16 v61;
  _QWORD *v62;
  __int16 v63;
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = backtrace((void **)buf, 48);
  v3 = backtrace_symbols((void *const *)buf, v2);
  v45 = 0uLL;
  v46 = 0;
  v4 = v2 - 3;
  if (v4 >= 5)
  {
    for (i = 4; i != v4; ++i)
    {
      v6 = v3[i];
      std::string::basic_string[abi:ne180100]<0>(&v54, v6);
      v7 = *v6;
      v8 = v6;
      while ((v7 & 0xFFFFFFDF) != 0)
      {
        v9 = *++v8;
        v7 = v9;
      }
      while (v7 == 32)
      {
        v10 = *++v8;
        v7 = v10;
      }
      if ((v7 & 0xFFFFFFDF) != 0)
      {
        do
        {
          v11 = *++v8;
          v7 = v11;
        }
        while ((v11 & 0xFFFFFFDF) != 0);
        while (v7 == 32)
        {
          v12 = *++v8;
          v7 = v12;
        }
      }
      if (v7)
        *v8++ = 0;
      std::string::basic_string[abi:ne180100]<0>(&v53, v6);
      for (j = *v8; (j & 0xFFFFFFDF) != 0; j = v14)
        v14 = *++v8;
      while (j == 32)
      {
        v15 = *++v8;
        j = v15;
      }
      v16 = v8;
      if (j)
      {
        v17 = 0;
        v16 = v8;
        while (j != 32 || v17)
        {
          v18 = v17 - 1;
          if (j == 91)
            ++v17;
          if (j == 93)
            v17 = v18;
          v19 = *++v16;
          j = v19;
          if (!v19)
            goto LABEL_31;
        }
        *v16 = 0;
      }
LABEL_31:
      std::string::basic_string[abi:ne180100]<0>(&v52, v8);
      std::string::basic_string[abi:ne180100]<0>(&__p, v16 + 1);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v52;
      else
        v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
      v21 = __cxa_demangle((const char *)v20, 0, 0, 0);
      if (v21)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, v21);
        free(v21);
        v22 = v56;
        size = v57.i64[0];
        v50[0] = v57.i32[2];
        *(_DWORD *)((char *)v50 + 3) = *(__int32 *)((char *)&v57.i32[2] + 3);
        LOBYTE(v16) = v57.i8[15];
      }
      else
      {
        v22 = 0;
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      else
        v47 = v53;
      if (v21)
      {
        if ((v16 & 0x80) != 0)
        {
          v23 = v22;
LABEL_47:
          std::string::__init_copy_ctor_external(&v48, v23, size);
          goto LABEL_48;
        }
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v48.__r_.__value_.__l.__size_ = size;
        LODWORD(v48.__r_.__value_.__r.__words[2]) = v50[0];
        *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v50 + 3);
        *((_BYTE *)&v48.__r_.__value_.__s + 23) = (_BYTE)v16;
      }
      else
      {
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v52.__r_.__value_.__l.__size_;
          v23 = (const std::string::value_type *)v52.__r_.__value_.__r.__words[0];
          goto LABEL_47;
        }
        v48 = v52;
      }
LABEL_48:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v49 = __p;
      if (v21 && (v16 & 0x80) != 0)
        operator delete(v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (v55 < 0)
        operator delete(v54);
      if (v45.i64[1] >= (unint64_t)v46)
      {
        v25 = 0x8E38E38E38E38E39 * ((v45.i64[1] - v45.i64[0]) >> 3) + 1;
        if (v25 > 0x38E38E38E38E38ELL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((uint64_t)&v46[-v45.i64[0]] >> 3) > v25)
          v25 = 0x1C71C71C71C71C72 * ((uint64_t)&v46[-v45.i64[0]] >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)&v46[-v45.i64[0]] >> 3) >= 0x1C71C71C71C71C7)
          v26 = 0x38E38E38E38E38ELL;
        else
          v26 = v25;
        v59 = &v46;
        if (v26)
        {
          if (v26 > 0x38E38E38E38E38ELL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = (char *)operator new(72 * v26);
        }
        else
        {
          v27 = 0;
        }
        v56 = v27;
        v57.i64[0] = (uint64_t)&v27[8 * ((v45.i64[1] - v45.i64[0]) >> 3)];
        v57.i64[1] = v57.i64[0];
        v58 = &v27[72 * v26];
        std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>((std::string *)v57.i64[0], (__int128 *)&v47);
        v28 = v45.i64[1];
        v29 = v45.i64[0];
        v30 = v57.i64[1];
        v31 = v57.i64[0];
        if (v45.i64[1] == v45.i64[0])
        {
          v35 = vdupq_n_s64(v45.u64[1]);
        }
        else
        {
          do
          {
            v32 = *(_OWORD *)(v28 - 72);
            *(_QWORD *)(v31 - 56) = *(_QWORD *)(v28 - 56);
            *(_OWORD *)(v31 - 72) = v32;
            *(_QWORD *)(v28 - 64) = 0;
            *(_QWORD *)(v28 - 56) = 0;
            *(_QWORD *)(v28 - 72) = 0;
            v33 = *(_OWORD *)(v28 - 48);
            *(_QWORD *)(v31 - 32) = *(_QWORD *)(v28 - 32);
            *(_OWORD *)(v31 - 48) = v33;
            *(_QWORD *)(v28 - 40) = 0;
            *(_QWORD *)(v28 - 32) = 0;
            *(_QWORD *)(v28 - 48) = 0;
            v34 = *(_OWORD *)(v28 - 24);
            *(_QWORD *)(v31 - 8) = *(_QWORD *)(v28 - 8);
            *(_OWORD *)(v31 - 24) = v34;
            v31 -= 72;
            *(_QWORD *)(v28 - 16) = 0;
            *(_QWORD *)(v28 - 8) = 0;
            *(_QWORD *)(v28 - 24) = 0;
            v28 -= 72;
          }
          while (v28 != v29);
          v35 = v45;
        }
        v24 = v30 + 72;
        v45.i64[0] = v31;
        v45.i64[1] = v30 + 72;
        v57 = v35;
        v36 = v46;
        v46 = v58;
        v58 = v36;
        v56 = (std::string::value_type *)v35.i64[0];
        std::__split_buffer<re::StackFrame>::~__split_buffer((uint64_t)&v56);
      }
      else
      {
        std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>((std::string *)v45.i64[1], (__int128 *)&v47);
        v24 = v45.i64[1] + 72;
      }
      v45.i64[1] = v24;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  free(v3);
  v37 = a1;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v38 = a1;
    if (a1[23] < 0)
      v38 = *(const char **)a1;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v38;
    _os_log_impl(&dword_227777000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Assertion failed: %s", buf, 0xCu);
  }
  v39 = v45.i64[0];
  if (v45.i64[0] != v45.i64[1])
  {
    v40 = MEMORY[0x24BDACB70];
    do
    {
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v41 = v39;
        if (*(char *)(v39 + 23) < 0)
          v41 = *(_QWORD *)v39;
        v42 = (_QWORD *)(v39 + 24);
        if (*(char *)(v39 + 47) < 0)
          v42 = (_QWORD *)*v42;
        v43 = (_QWORD *)(v39 + 48);
        if (*(char *)(v39 + 71) < 0)
          v43 = (_QWORD *)*v43;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v41;
        v61 = 2080;
        v62 = v42;
        v63 = 2080;
        v64 = v43;
        _os_log_impl(&dword_227777000, v40, OS_LOG_TYPE_ERROR, "%s %s %s", buf, 0x20u);
      }
      v39 += 72;
    }
    while (v39 != v45.i64[1]);
  }
  if (a1[23] < 0)
    v37 = *(const char **)a1;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Assertion failed: %s\nCheck os_log for additional details!\n", v37);
  *(_QWORD *)buf = &v45;
  std::vector<re::StackFrame>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2277D4660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  _Unwind_Resume(exception_object);
}

uint64_t rf::internal::debugBreakHandler(rf::internal *this)
{
  uint64_t result;
  size_t v2;
  int v3[2];
  int v4;
  pid_t v5;
  _BYTE v6[32];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  *(_QWORD *)v3 = 0xE00000001;
  v4 = 1;
  v5 = getpid();
  v2 = 648;
  result = sysctl(v3, 4u, v6, &v2, 0, 0);
  if ((v7 & 0x800) != 0)
    return raise(5);
  return result;
}

std::string *std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_2277D48D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<re::StackFrame,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<re::StackFrame>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<re::StackFrame,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<re::StackFrame>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<re::StackFrame,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t rf::data_flow::consumer::findInDirtyOptions<BOOL>(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t (*v4)(uint64_t, uint64_t *, _QWORD, _QWORD, void *);
  unsigned __int8 *v5;
  int v6;
  int v7;

  v3 = std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(a2, a3, a1);
  if (v3)
  {
    v4 = (uint64_t (*)(uint64_t, uint64_t *, _QWORD, _QWORD, void *))v3[3];
    if (!v4
      || (v5 = (unsigned __int8 *)v4(3, v3 + 3, 0, MEMORY[0x24BEDB770], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
    {
      std::__throw_bad_any_cast[abi:ne180100]();
    }
    v6 = *v5;
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v6 | (v7 << 8);
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::MeshReconstructionConsumer(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  char v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;

  *(_QWORD *)a1 = &off_24EFD9E98;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  v5 = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 120) = &unk_24EFD8130;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_USER_INITIATED, 0);
  v7 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 152) = dispatch_queue_create("AcousticMeshExportQueue", v7);

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v8, QOS_CLASS_USER_INITIATED, 0);
  v9 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 160) = dispatch_queue_create("AcousticMeshExportCompletionQueue", v9);

  *(_QWORD *)(a1 + 168) = dispatch_group_create();
  return a1;
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = a2;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void rf::data_flow::consumer::MeshReconstructionConsumer::consumeLatestUpdate(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ComponentsOfClass;
  uint64_t v4;
  __int128 *p_buf;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t (*v22)(uint64_t, uint64_t *, _QWORD, void *, void *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  rf *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t IdentifierPtr;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t Mesh;
  __int128 *BlockAtIndex;
  __int128 *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *opaque;
  char *v70;
  uint64_t v71;
  uint64_t Entity;
  rf *SelfEnabled;
  NSObject *v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t Shape;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t i;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t IsAnchorExternal;
  NSObject *v101;
  uint64_t Name;
  uint64_t LocalId;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  rf::internal *v111;
  __int128 *v112;
  _QWORD *v113;
  uint64_t v114;
  std::mutex *v115;
  __int128 *v116;
  __int128 *v117;
  void *__p[2];
  char v119;
  uint64_t v120;
  uint8_t uu[32];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 buf;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;

  p_buf = a1;
  v130 = *MEMORY[0x24BDAC8D0];
  rf::data_flow::consumer::EntitiesProcessor::consumeLatestUpdate((uint64_t)a1 + 120, a2);
  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a2 + 16))
    return;
  v115 = (std::mutex *)*((_QWORD *)p_buf + 1);
  std::mutex::lock(v115);
  if (!*(_BYTE *)(a2 + 16))
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = MEMORY[0x22E29DA08](*(_QWORD *)(a2 + 8));
  if (v7)
  {
    v8 = (_QWORD *)p_buf + 13;
    if (REAssetGetAssetManager() != v7)
    {
      *(_QWORD *)uu = REAssetManagerCreateAssetHandle();
      REAssetHandleLoadAsync();
      v9 = *((_QWORD *)p_buf + 4);
      if (!v9 || v9 == *v8)
        *((_QWORD *)p_buf + 4) = *(_QWORD *)uu;
      v10 = *((_QWORD *)p_buf + 5);
      if (!v10 || v10 == *v8)
        *((_QWORD *)p_buf + 5) = *(_QWORD *)uu;
      RESharedPtr<REAsset>::operator=((uint64_t *)p_buf + 13, (uint64_t *)uu);
      RESharedPtr<REAsset>::~RESharedPtr(uu);
    }
  }
  if (!*(_BYTE *)(a2 + 32))
    std::__throw_bad_optional_access[abi:ne180100]();
  RESceneUnderstandingRootComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v11 == 1)
  {
    REComponentGetEntity();
    RESceneUnderstandingRenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneUnderstandingRenderOptionsComponentSetOcclusionEnabled();
    RESceneUnderstandingRenderOptionsComponentSetWireframeEnabled();
    RESceneUnderstandingRenderOptionsComponentSetDepthFeatheringEnabled();
    RESceneUnderstandingRenderOptionsComponentSetShadowEnabled();
    RESceneUnderstandingRenderOptionsComponentSetPhysicsEnabled();
    RESceneUnderstandingComponentGetComponentType();
    ComponentsOfClass = RESceneGetComponentsOfClass();
    v4 = v12;
    v113 = (_QWORD *)p_buf + 7;
    if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(0, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8)) < 0x100u|| *((_BYTE *)p_buf + 16)|| *((_BYTE *)p_buf + 20)|| *((_BYTE *)p_buf + 19)|| *((_BYTE *)p_buf + 22)|| *((_BYTE *)p_buf + 24))
    {
      v2 = 0;
      v13 = 0;
      LODWORD(v14) = 1;
    }
    else
    {
      v2 = ComponentsOfClass + 8 * v4;
      if (v4)
      {
        v14 = 8 * v4;
        v104 = ComponentsOfClass;
        v13 = 1;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v104 += 8;
          v14 -= 8;
          if (!v14)
            goto LABEL_22;
        }
      }
      else
      {
        v104 = ComponentsOfClass;
      }
      if (v104 == v2)
      {
        LODWORD(v14) = 0;
        v13 = 1;
      }
      else
      {
        v107 = v104;
        while (2)
        {
          REComponentGetEntity();
          REMeshComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMeshComponentGetComponentType();
            REEntityRemoveComponentByClass();
          }
          REMaterialParameterBlockArrayComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMaterialParameterBlockArrayComponentGetComponentType();
            REEntityRemoveComponentByClass();
          }
          v107 += 8;
          if (v107 == v2)
          {
            LODWORD(v14) = 0;
            v13 = 1;
          }
          else
          {
            while (RESceneUnderstandingComponentGetSourceType() != 1)
            {
              v107 += 8;
              v13 = 1;
              if (v107 == v2)
                goto LABEL_336;
            }
            v13 = 1;
            if (v107 != v2)
              continue;
LABEL_336:
            LODWORD(v14) = 0;
          }
          break;
        }
        v2 = v104;
      }
    }
LABEL_22:
    if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(4, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8)) < 0x100u|| *((_BYTE *)p_buf + 16)|| *((_BYTE *)p_buf + 20)|| *((_BYTE *)p_buf + 19)|| *((_BYTE *)p_buf + 22)|| *((_BYTE *)p_buf + 24))
    {
      goto LABEL_28;
    }
    if ((_DWORD)v14)
    {
      if (v4)
      {
        v105 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v105 -= 8;
          if (!v105)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v109 = ComponentsOfClass + 8 * v4;
    if (v2 == v109)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
      goto LABEL_28;
    }
    v110 = v2;
    while (1)
    {
      REComponentGetEntity();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMaterialParameterBlockArrayComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMaterialParameterBlockArrayComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      v110 += 8;
      if (v110 == v109)
        break;
      while (RESceneUnderstandingComponentGetSourceType() != 1)
      {
        v110 += 8;
        v13 = 1;
        if (v110 == v109)
          goto LABEL_28;
      }
      v13 = 1;
      if (v110 == v109)
        goto LABEL_28;
    }
  }
  else
  {
    rf::getMessage((rf *)"We should have a root entity!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v119 < 0)
      operator delete(__p[0]);
    rf::internal::debugBreakHandler(v111);
    v117 = 0;
    v123 = 0u;
    v124 = 0u;
    v122 = 0u;
    memset(uu, 0, sizeof(uu));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    p_buf = &buf;
    rf::getMessage((rf *)"We should have a root entity!", &buf);
    if (v128 >= 0)
      v112 = &buf;
    else
      v112 = (__int128 *)buf;
    LODWORD(v125) = 136315138;
    *(_QWORD *)((char *)&v125 + 4) = v112;
    _os_log_send_and_compose_impl();
    if (v128 < 0)
      operator delete((void *)buf);
    _os_crash_msg();
    __break(1u);
  }
  v13 = 1;
LABEL_28:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(5, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8)) >= 0x100u&& (*((_BYTE *)p_buf + 16)|| *((_BYTE *)p_buf + 20)|| *((_BYTE *)p_buf + 19)|| *((_BYTE *)p_buf + 22)|| *((_BYTE *)p_buf + 24)))
  {
    if (!v13)
    {
      if (v4)
      {
        v17 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v17 -= 8;
          if (!v17)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v15 = ComponentsOfClass + 8 * v4;
    if (v2 == v15)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      v16 = v2;
      while (2)
      {
        REComponentGetEntity();
        REMaterialParameterBlockArrayComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REMaterialParameterBlockArrayComponentGetBlockAtIndex();
          REMaterialParameterBlockSetBool();
          if (*((_BYTE *)p_buf + 48))
            RENetworkMarkComponentDirty();
        }
        do
        {
          v16 += 8;
          if (v16 == v15)
          {
            v13 = 1;
            goto LABEL_51;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        v13 = 1;
        if (v16 != v15)
          continue;
        break;
      }
    }
  }
LABEL_51:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(6, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8)) >= 0x100u&& (*((_BYTE *)p_buf + 16)|| *((_BYTE *)p_buf + 20)|| *((_BYTE *)p_buf + 19)|| *((_BYTE *)p_buf + 22)|| *((_BYTE *)p_buf + 24)))
  {
    if (!v13)
    {
      if (v4)
      {
        v20 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v20 -= 8;
          if (!v20)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v18 = ComponentsOfClass + 8 * v4;
    if (v2 == v18)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      v19 = v2;
      while (2)
      {
        REComponentGetEntity();
        REMaterialParameterBlockArrayComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REMaterialParameterBlockArrayComponentGetBlockAtIndex();
          REMaterialParameterBlockSetBool();
          if (*((_BYTE *)p_buf + 48))
            RENetworkMarkComponentDirty();
        }
        do
        {
          v19 += 8;
          if (v19 == v18)
          {
            v13 = 1;
            goto LABEL_74;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        v13 = 1;
        if (v19 != v18)
          continue;
        break;
      }
    }
  }
LABEL_74:
  v21 = std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(*((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8), 3);
  if (v21)
  {
    v22 = (uint64_t (*)(uint64_t, uint64_t *, _QWORD, void *, void *))v21[3];
      std::__throw_bad_any_cast[abi:ne180100]();
    if (*((_BYTE *)p_buf + 16)
      || *((_BYTE *)p_buf + 20)
      || *((_BYTE *)p_buf + 19)
      || *((_BYTE *)p_buf + 22)
      || *((_BYTE *)p_buf + 24))
    {
      if (!v13)
      {
        if (v4)
        {
          v25 = 8 * v4;
          v2 = ComponentsOfClass;
          while (RESceneUnderstandingComponentGetSourceType() != 1)
          {
            v2 += 8;
            v25 -= 8;
            if (!v25)
            {
              v2 = ComponentsOfClass + 8 * v4;
              break;
            }
          }
        }
        else
        {
          v2 = ComponentsOfClass;
        }
      }
      v23 = ComponentsOfClass + 8 * v4;
      if (v2 == v23)
      {
        v13 = 1;
        v2 = ComponentsOfClass + 8 * v4;
      }
      else
      {
        v24 = v2;
        while (2)
        {
          REComponentGetEntity();
          REMeshComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMeshComponentSetMaterialAtIndex();
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
          }
          do
          {
            v24 += 8;
            if (v24 == v23)
            {
              v13 = 1;
              goto LABEL_99;
            }
          }
          while (RESceneUnderstandingComponentGetSourceType() != 1);
          v13 = 1;
          if (v24 != v23)
            continue;
          break;
        }
      }
    }
  }
LABEL_99:
  v26 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(2, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8));
  v27 = v26;
  if (v26 >= 0x100u)
  {
    if (!v13)
    {
      if (v4)
      {
        v30 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v30 -= 8;
          if (!v30)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v28 = ComponentsOfClass + 8 * v4;
    if (v2 == v28)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      v29 = v2;
      while (2)
      {
        REComponentGetEntity();
        RERigidBodyComponentGetComponentType();
        if (v27)
        {
          if (REEntityAddComponentByClass())
          {
            RERigidBodyComponentSetMotionType();
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
          }
        }
        else if (REEntityGetComponentByClass())
        {
          RERigidBodyComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v29 += 8;
          if (v29 == v28)
          {
            v13 = 1;
            goto LABEL_120;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        v13 = 1;
        if (v29 != v28)
          continue;
        break;
      }
    }
  }
LABEL_120:
  v31 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(1, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8));
  if (v31 >= 0x100u && v31 == 0)
  {
    if (!v13)
    {
      if (v4)
      {
        v35 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v35 -= 8;
          if (!v35)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v33 = ComponentsOfClass + 8 * v4;
    if (v2 == v33)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      v34 = v2;
      v13 = 1;
      while (2)
      {
        REComponentGetEntity();
        REColliderComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REColliderComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v34 += 8;
          if (v34 == v33)
          {
            v13 = 1;
            goto LABEL_141;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        if (v34 != v33)
          continue;
        break;
      }
    }
  }
LABEL_141:
  v36 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(8, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8));
  if (v36 >= 0x100u && v36 == 0)
  {
    if (!v13)
    {
      if (v4)
      {
        v40 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v40 -= 8;
          if (!v40)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v38 = ComponentsOfClass + 8 * v4;
    if (v2 == v38)
    {
      v13 = 1;
      v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      v39 = v2;
      v13 = 1;
      while (2)
      {
        if (RESceneUnderstandingComponentIsEntityType())
        {
          REComponentGetEntity();
          REAcousticMeshComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v39 += 8;
          if (v39 == v38)
          {
            v13 = 1;
            goto LABEL_162;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        if (v39 != v38)
          continue;
        break;
      }
    }
  }
LABEL_162:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(9, *((_QWORD *)p_buf + 7), *((_QWORD *)p_buf + 8)) >= 0x100u&& !*((_BYTE *)p_buf + 16)&& !*((_BYTE *)p_buf + 20)&& !*((_BYTE *)p_buf + 19)&& !*((_BYTE *)p_buf + 22)&& !*((_BYTE *)p_buf + 24))
  {
    if (!v13)
    {
      if (v4)
      {
        v108 = 8 * v4;
        v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v108 -= 8;
          if (!v108)
          {
            v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        v2 = ComponentsOfClass;
      }
    }
    v106 = ComponentsOfClass + 8 * v4;
LABEL_316:
    if (v2 != v106)
    {
      REComponentGetEntity();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMaterialParameterBlockArrayComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMaterialParameterBlockArrayComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      while (1)
      {
        v2 += 8;
        if (v2 == v106)
          break;
        if (RESceneUnderstandingComponentGetSourceType() == 1)
          goto LABEL_316;
      }
    }
  }
  v41 = *(_DWORD *)(*((_QWORD *)p_buf + 1) + 2888);
  v42 = v41 > 4;
  v43 = (1 << v41) & 0x15;
  if (v42 || v43 == 0)
  {
    v45 = (char *)(p_buf + 7);
    v46 = *((_BYTE *)p_buf + 112);
    if (v46)
    {
      RESceneUnderstandingComponentGetComponentType();
      v96 = RESceneGetComponentsOfClass();
      if (v97)
      {
        v98 = v96;
        v99 = 8 * v97;
        do
        {
          if ((RESceneUnderstandingComponentIsEntityType() & 1) == 0)
          {
            REComponentGetEntity();
            REAnchorComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              IsAnchorExternal = REAnchorComponentGetIsAnchorExternal();
              if ((IsAnchorExternal & 1) == 0)
              {
                rf::realityFusionLogObject((rf *)IsAnchorExternal);
                v101 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                {
                  Name = REEntityGetName();
                  LocalId = REEntityGetLocalId();
                  *(_DWORD *)uu = 136315394;
                  *(_QWORD *)&uu[4] = Name;
                  *(_WORD *)&uu[12] = 2048;
                  *(_QWORD *)&uu[14] = LocalId;
                  _os_log_impl(&dword_227777000, v101, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Mark SU mesh entity %s(%llu) as external.", uu, 0x16u);
                }

                REAnchorComponentSetIsAnchorExternal();
              }
            }
          }
          v98 += 8;
          v99 -= 8;
        }
        while (v99);
      }
      v46 = 0;
    }
  }
  else
  {
    v45 = (char *)(p_buf + 7);
    v46 = 1;
  }
  *v45 = v46;
  if (!*(_BYTE *)(a2 + 16))
    std::__throw_bad_optional_access[abi:ne180100]();
  v114 = *(_QWORD *)(a2 + 8);
  if (*((_BYTE *)p_buf + 16)
    || *((_BYTE *)p_buf + 20)
    || *((_BYTE *)p_buf + 19)
    || *((_BYTE *)p_buf + 22)
    || *((_BYTE *)p_buf + 24))
  {
    if (*((_BYTE *)p_buf + 96))
      v47 = (uint64_t)&v115[31].__m_.__opaque[48];
    else
      v47 = (uint64_t)&v115[1];
    std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map((uint64_t)__p, v47);
    *((_BYTE *)p_buf + 96) = 1;
    if (v120)
    {
      RESceneUnderstandingComponentGetComponentType();
      *(_QWORD *)uu = RESceneGetComponentsOfClass();
      *(_QWORD *)&uu[8] = v48;
      *(_QWORD *)&uu[16] = __p;
      uu[24] = 1;
      LOBYTE(v122) = 0;
      BYTE8(v122) = 0;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v49 = v122;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v50 = *(_QWORD *)uu + 8 * *(_QWORD *)&uu[8];
      *(_QWORD *)&v125 = v49;
      *((_QWORD *)&v125 + 1) = uu;
      if (v49 != v50)
      {
        do
        {
          REComponentGetEntity();
          REAnchorComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            v51 = (rf *)REAnchorComponentGetIsAnchorExternal();
            if ((_DWORD)v51)
            {
              rf::realityFusionLogObject(v51);
              v52 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                v53 = REEntityGetLocalId();
                LODWORD(buf) = 134217984;
                *(_QWORD *)((char *)&buf + 4) = v53;
                _os_log_impl(&dword_227777000, v52, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Mark SU mesh entity %llu as relocalized.", (uint8_t *)&buf, 0xCu);
              }

              REAnchorComponentSetIsAnchorExternal();
            }
          }
          REMeshComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
          v127 = 0;
          v129 = 0;
          uuid_clear((unsigned __int8 *)&buf);
          *(_QWORD *)&buf = IdentifierPtr;
          v127 = 1;
          v117 = &buf;
          v55 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&buf, (uint64_t)&std::piecewise_construct, &v117);
          v57 = v55[6];
          v56 = (std::__shared_weak_count *)v55[7];
          if (v56)
          {
            p_shared_owners = (unint64_t *)&v56->__shared_owners_;
            do
              v59 = __ldxr(p_shared_owners);
            while (__stxr(v59 + 1, p_shared_owners));
          }
          Mesh = REMeshComponentGetMesh();
          if (!*(_BYTE *)(v57 + 376))
            std::__throw_bad_optional_access[abi:ne180100]();
          if (Mesh != *(_QWORD *)(v57 + 368))
          {
            REMeshComponentSetMesh();
            if (!REMeshComponentGetMaterialCount())
              REMeshComponentAddMaterial();
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
            REMaterialParameterBlockArrayComponentGetComponentType();
            REEntityGetOrAddComponentByClass();
            BlockAtIndex = (__int128 *)REMaterialParameterBlockArrayComponentGetBlockAtIndex();
            v117 = 0;
            if (BlockAtIndex)
            {
              RERetain();
              v117 = BlockAtIndex;
            }
            else
            {
              MEMORY[0x22E29DA38](v114);
              v116 = (__int128 *)RERenderManagerMaterialParameterBlockCreateWithAsset();
              v62 = v117;
              v117 = v116;
              if (v62)
                RERelease();
              v116 = 0;
              RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(&v116);
              REMaterialParameterBlockArrayComponentSetBlockAtIndex();
            }
            REMaterialParameterBlockSetBool();
            REMaterialParameterBlockSetBool();
            if (*(_BYTE *)(v57 + 280))
              objc_msgSend(*(id *)(v57 + 256), "length");
            REMaterialParameterBlockSetBool();
            if (*(_BYTE *)(v57 + 312))
              objc_msgSend(*(id *)(v57 + 288), "length");
            REMaterialParameterBlockSetBool();
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
            RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(&v117);
            if (re::internal::enableSignposts(0, 0))
            {
              if (!*(_QWORD *)(v57 + 24))
              {
                if (*(_BYTE *)(v57 + 16))
                  v65 = *(_QWORD **)v57;
                else
                  v65 = (_QWORD *)v57;
                *(_QWORD *)(v57 + 24) = ((*v65 >> 2) + (*v65 << 6) + v65[1] + 2654435769) ^ *v65;
              }
              kdebug_trace();
            }
          }
          if (v56)
          {
            v63 = (unint64_t *)&v56->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          *(_QWORD *)&v125 = v125 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((_QWORD **)&v125 + 1), (uint64_t *)&v125);
        }
        while ((_QWORD)v125 != v50);
      }
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    *((_BYTE *)p_buf + 96) = 0;
  }
  if (*((_BYTE *)p_buf + 23))
  {
    RESceneUnderstandingComponentGetComponentType();
    v66 = RESceneGetComponentsOfClass();
    if (v67)
    {
      v68 = v66;
      opaque = v115[33].__m_.__opaque;
      v70 = &v115[1].__m_.__opaque[32];
      v71 = 8 * v67;
      do
      {
        if (RESceneUnderstandingComponentIsEntityType())
        {
          Entity = REComponentGetEntity();
          REAcousticMeshComponentGetComponentType();
          if (REEntityGetOrAddComponentByClass())
          {
            SelfEnabled = (rf *)REEntityGetSelfEnabled();
            if (*((unsigned __int8 *)p_buf + 49) != (_DWORD)SelfEnabled)
            {
              rf::realityFusionLogObject(SelfEnabled);
              v74 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                v75 = opaque;
                v76 = v70;
                v77 = *((unsigned __int8 *)p_buf + 49);
                v78 = REEntityGetName();
                *(_DWORD *)uu = 67109378;
                *(_DWORD *)&uu[4] = v77;
                *(_WORD *)&uu[8] = 2080;
                *(_QWORD *)&uu[10] = v78;
                _os_log_impl(&dword_227777000, v74, OS_LOG_TYPE_DEFAULT, "Setting enabled=%d for AcousticMeshComponent on entity: %s", uu, 0x12u);
                v70 = v76;
                opaque = v75;
              }

              MEMORY[0x22E29D4B0](Entity, *((unsigned __int8 *)p_buf + 49));
            }
            v79 = RESceneUnderstandingComponentGetIdentifierPtr();
            uu[16] = 0;
            *(_QWORD *)&uu[24] = 0;
            uuid_clear(uu);
            *(_QWORD *)uu = v79;
            uu[16] = 1;
            if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(opaque, (uint64_t)uu))
            {
              RETransformComponentGetComponentType();
              REEntityGetComponentByClass();
              RETransformComponentSetWorldMatrix4x4F();
              if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v70, (uint64_t)uu))
              {
                REAcousticMeshComponentSetLastUpdateTimestamp();
              }
              REAcousticMeshComponentSetARMesh();
              if (*((_BYTE *)p_buf + 48))
                RENetworkMarkComponentDirty();
            }
          }
        }
        v68 += 8;
        v71 -= 8;
      }
      while (v71);
    }
  }
  if (*((_BYTE *)p_buf + 17))
  {
    if (*((_BYTE *)p_buf + 97))
      v80 = (uint64_t)&v115[32].__m_.__opaque[24];
    else
      v80 = (uint64_t)&v115[1];
    std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map((uint64_t)__p, v80);
    *((_BYTE *)p_buf + 97) = 1;
    if (v120)
    {
      RESceneUnderstandingComponentGetComponentType();
      *(_QWORD *)uu = RESceneGetComponentsOfClass();
      *(_QWORD *)&uu[8] = v81;
      *(_QWORD *)&uu[16] = __p;
      uu[24] = 1;
      LOBYTE(v122) = 0;
      BYTE8(v122) = 0;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v82 = v122;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v83 = *(_QWORD *)uu + 8 * *(_QWORD *)&uu[8];
      *(_QWORD *)&buf = v82;
      *((_QWORD *)&buf + 1) = uu;
      while (v82 != v83)
      {
        REComponentGetEntity();
        REColliderComponentGetComponentType();
        if (!REEntityGetComponentByClass())
        {
          REColliderComponentGetComponentType();
          REEntityAddComponentByClass();
          REColliderComponentSetGroup();
          if (*((_BYTE *)p_buf + 48))
            RENetworkMarkComponentDirty();
        }
        if (*((_BYTE *)p_buf + 18))
        {
          RERigidBodyComponentGetComponentType();
          if (!REEntityGetComponentByClass())
          {
            RERigidBodyComponentGetComponentType();
            REEntityAddComponentByClass();
            RERigidBodyComponentSetMotionType();
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
          }
        }
        *(_QWORD *)&buf = v82 + 8;
        ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((_QWORD **)&buf + 1), (uint64_t *)&buf);
        v82 = buf;
      }
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v84 = v122;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      v85 = *(_QWORD *)uu + 8 * *(_QWORD *)&uu[8];
      *(_QWORD *)&v125 = v84;
      *((_QWORD *)&v125 + 1) = uu;
      if (v84 != v85)
      {
        do
        {
          v86 = RESceneUnderstandingComponentGetIdentifierPtr();
          v127 = 0;
          v129 = 0;
          uuid_clear((unsigned __int8 *)&buf);
          *(_QWORD *)&buf = v86;
          v127 = 1;
          v87 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(__p, (uint64_t)&buf);
          v88 = v87;
          if (!v87)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (*(_BYTE *)(v87[6] + 392))
          {
            v89 = REComponentGetEntity();
            REColliderComponentGetComponentType();
            REEntityGetComponentByClass();
            Shape = REColliderComponentGetShape();
            v91 = v88[6];
            if (!*(_BYTE *)(v91 + 392))
              goto LABEL_371;
            if (Shape == *(_QWORD *)(v91 + 384))
              goto LABEL_268;
            if (Shape)
            {
              RERetain();
              REColliderComponentSetShape();
              MEMORY[0x22E29D48C](v89);
              if (!*(_BYTE *)(v88[6] + 392))
LABEL_371:
                std::__throw_bad_optional_access[abi:ne180100]();
              REColliderComponentSetShape();
              RESceneAddEntity();
              REAnchorComponentGetComponentType();
              REEntityAddComponentByClass();
              REAnchorComponentSetAnchoredLocally();
              REAnchorComponentSetIsAnchorExternal();
              RERelease();
            }
            else
            {
              REColliderComponentSetShape();
            }
            if (*((_BYTE *)p_buf + 48))
              RENetworkMarkComponentDirty();
          }
          if (re::internal::enableSignposts(0, 0))
          {
            v92 = v88[6];
            if (!*(_QWORD *)(v92 + 24))
            {
              if (*(_BYTE *)(v92 + 16))
                v93 = *(_QWORD **)v92;
              else
                v93 = (_QWORD *)v88[6];
              *(_QWORD *)(v92 + 24) = ((*v93 >> 2) + (*v93 << 6) + v93[1] + 2654435769) ^ *v93;
            }
            kdebug_trace();
          }
LABEL_268:
          *(_QWORD *)&v125 = v84 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((_QWORD **)&v125 + 1), (uint64_t *)&v125);
          v84 = v125;
        }
        while ((_QWORD)v125 != v85);
      }
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    *((_BYTE *)p_buf + 97) = 0;
  }
  if (*((_QWORD *)p_buf + 10))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node((uint64_t)v113, *((void ***)p_buf + 9));
    *((_QWORD *)p_buf + 9) = 0;
    v94 = *((_QWORD *)p_buf + 8);
    if (v94)
    {
      for (i = 0; i != v94; ++i)
        *(_QWORD *)(*v113 + 8 * i) = 0;
    }
    *((_QWORD *)p_buf + 10) = 0;
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  std::mutex::unlock(v115);
}

void sub_2277D633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::mutex *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  std::mutex::unlock(a18);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setRigidbodyEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[18] != a2)
  {
    this[18] = a2;
    v2 = 2;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D657C(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[17] != a2)
  {
    this[17] = a2;
    v2 = 1;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D6624(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setOcclusionEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[16] != a2)
  {
    this[16] = a2;
    v2 = 0;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D66C8(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::consumer::MeshReconstructionConsumer::setMeshMaterial(uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (result[4] != a2)
  {
    result[4] = a2;
    v2 = 3;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
    v3[1] = a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(result + 7), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return result;
}

void sub_2277D676C(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::consumer::MeshReconstructionConsumer::setSyntheticMeshMaterial(uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (result[5] != a2)
  {
    result[5] = a2;
    v2 = 3;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
    v3[1] = a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(result + 7), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return result;
}

void sub_2277D6810(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setWireframeEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[19] != a2)
  {
    this[19] = a2;
    v2 = 4;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D68B8(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setLightingEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[20] != a2)
  {
    this[20] = a2;
    v2 = 5;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D6960(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setDynamicLightingEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[22] != a2)
  {
    this[22] = a2;
    v2 = 6;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D6A08(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *rf::data_flow::consumer::MeshReconstructionConsumer::setAtmosphereOcclusionEnabled(_BYTE *this, int a2)
{
  int v2;
  uint64_t (*v3[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v3[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  if (this[24] != a2)
  {
    this[24] = a2;
    v2 = 9;
    v3[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    v3[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), &v2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_2277D6AB0(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::getBoundingBox@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  RESceneUnderstandingComponentGetComponentType();
  result = RESceneGetComponentsOfClass();
  v6 = result;
  v7 = v5;
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a2 + 16) = v8;
  if (v5)
  {
    v9 = 8 * v5;
    for (i = result; ; i += 8)
    {
      result = RESceneUnderstandingComponentGetSourceType();
      if ((_DWORD)result == 1)
        break;
      v9 -= 8;
      if (!v9)
        return result;
    }
  }
  else
  {
    i = result;
  }
  v11 = v6 + 8 * v7;
  if (i != v11)
  {
    v12.i64[0] = 0x7F0000007FLL;
    v12.i64[1] = 0x7F0000007FLL;
    v17 = v12;
    v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    while (1)
    {
      result = REComponentGetEntity();
      if (a1 != 1)
        break;
      RETransformComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (result)
      {
        REColliderComponentGetComponentType();
        result = REEntityGetComponentByClass();
        if (result)
        {
          REColliderComponentGetShape();
          RECollisionShapeAssetGetCollisionShape();
          RETransformComponentGetWorldPose();
          result = RECollisionShapeGetBoundingBox();
LABEL_16:
          v16 = v17;
          v15 = v18;
          v15.i32[3] = 0;
          v13.i32[3] = 0;
          v16.i32[3] = 0;
          v14.i32[3] = 0;
          v17 = vmaxnmq_f32(v16, v14);
          v18 = vminnmq_f32(v15, v13);
          *(float32x4_t *)a2 = v18;
          *(float32x4_t *)(a2 + 16) = v17;
          goto LABEL_17;
        }
      }
      do
      {
LABEL_17:
        i += 8;
        if (i == v11)
          return result;
        result = RESceneUnderstandingComponentGetSourceType();
      }
      while ((_DWORD)result != 1);
      if (i == v11)
        return result;
    }
    if (!a1)
    {
      RETransformComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (!result)
        goto LABEL_17;
      RETransformComponentGetWorldMatrix4x4F();
      result = REEntityComputeMeshBounds();
    }
    goto LABEL_16;
  }
  return result;
}

void rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t ComponentsOfClass;
  uint64_t v6;
  uint64_t v7;
  char v8;
  rf *v9;
  char v10;
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t IdentifierPtr;
  void *v15;
  _BYTE *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  id v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  id v30;
  rf *v31;
  void *v32;
  id v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  __int128 block;
  void (*v39)(uint64_t);
  void *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  _BYTE *v45;
  uint8_t buf[16];
  __int128 v47;
  id v48;
  id v49;
  uuid_t uu;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  RESceneUnderstandingComponentGetComponentType();
  ComponentsOfClass = RESceneGetComponentsOfClass();
  v7 = v6;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = a3;
  v8 = objc_msgSend(v32, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
  v9 = (rf *)0;
  v31 = v9;
  if (v9)
    v10 = v8;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    rf::realityFusionLogObject(v9);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v31;
      _os_log_error_impl(&dword_227777000, v11, OS_LOG_TYPE_ERROR, "[MeshReconstructionConsumer::exportAcousticMeshComponentsInScene] Could not create export directory: %@", (uint8_t *)&block, 0xCu);
    }

  }
  v12 = (_BYTE *)operator new();
  *v12 = 0;
  v34 = v30;
  if (v7)
  {
    v13 = 8 * v7;
    do
    {
      IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
      v51 = 0;
      v52 = 0;
      uuid_clear(uu);
      *(_QWORD *)uu = IdentifierPtr;
      v51 = 1;
      if (RESceneUnderstandingComponentIsEntityType())
      {
        REComponentGetEntity();
        REAcousticMeshComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REAcousticMeshComponentGetARMesh();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15)
          {
            v16 = v12;
            v17 = v51;
            v18 = *(unsigned __int8 **)uu;
            LOBYTE(v47) = 0;
            *((_QWORD *)&v47 + 1) = 0;
            uuid_clear(buf);
            v19 = uu;
            if (v17)
              v19 = v18;
            *(_OWORD *)buf = *(_OWORD *)v19;
            v20 = v15;
            v48 = v20;
            v21 = v34;
            v49 = v21;
            v22 = a1[21];
            v23 = a1[19];
            *(_QWORD *)&block = MEMORY[0x24BDAC760];
            *((_QWORD *)&block + 1) = 3321888768;
            v39 = ___ZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponent_block_invoke;
            v40 = &__block_descriptor_88_ea8_32c170_ZTSZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponentEUlSB_E__e5_v8__0l;
            v41 = *(_OWORD *)buf;
            v42 = v47;
            v43 = v20;
            v44 = v21;
            v45 = v16;
            v12 = v16;
            dispatch_group_async(v22, v23, &block);

          }
          else
          {
            rf::realityFusionLogObject(0);
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_227777000, v24, OS_LOG_TYPE_ERROR, "[MeshReconstructionConsumer::exportAcousticMeshComponentsInScene]: mdlMesh is nil", buf, 2u);
            }

          }
        }
      }
      ComponentsOfClass += 8;
      v13 -= 8;
    }
    while (v13);
  }

  v25 = a1[20];
  v26 = a1[21];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 3321888768;
  v35[2] = ___ZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEE_block_invoke;
  v35[3] = &__block_descriptor_72_ea8_40c35_ZTSNSt3__18functionIFvP7NSErrorEEE_e5_v8__0l;
  v35[4] = v12;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)v36, a4);
  dispatch_group_notify(v26, v25, v35);
  v27 = v37;
  if (v37 == v36)
  {
    v28 = 4;
    v27 = v36;
    goto LABEL_25;
  }
  if (v37)
  {
    v28 = 5;
LABEL_25:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }

}

void sub_2277D7028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void ___ZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEE_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  if (!**(_BYTE **)(a1 + 32))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *MEMORY[0x24BDD0FC8];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("RealityFusion MeshReconstructionConsumer::exportAcousticMeshComponents has failure in exporting acoustic meshes. For details look for logs containing [MeshReconstructionConsumer::exportAcousticMeshComponentsInScene]"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("RealityFusion"), -1, v3);
  if (*(_QWORD *)(a1 + 32))
LABEL_5:
    MEMORY[0x22E29DD50]();
  if (*(_QWORD *)(a1 + 64))
  {
    v6 = v4;
    v5 = *(_QWORD *)(a1 + 64);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v5 + 48))(v5, &v6);

  }
}

void sub_2277D71C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c35_ZTSNSt3__18functionIFvP7NSErrorEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_ea8_40c35_ZTSNSt3__18functionIFvP7NSErrorEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void rf::data_flow::consumer::MeshReconstructionConsumer::~MeshReconstructionConsumer(id *this)
{
  *this = &off_24EFD9E98;

  RESharedPtr<REAsset>::~RESharedPtr(this + 13);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)(this + 7));
}

{
  *this = &off_24EFD9E98;

  RESharedPtr<REAsset>::~RESharedPtr(this + 13);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)(this + 7));
  JUMPOUT(0x22E29DD50);
}

uint64_t std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_2277D734C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2277D7398()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2277D7450()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

_QWORD *RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(_QWORD *a1)
{
  if (*a1)
    RERelease();
  return a1;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t IdentifierPtr;
  uint64_t v7;
  uuid_t uu;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    v4 = result;
    do
    {
      result = (_QWORD *)RESceneUnderstandingComponentGetSourceType();
      if ((_DWORD)result != 2)
      {
        v5 = (_QWORD *)v4[2];
        IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        v9 = 0;
        v10 = 0;
        uuid_clear(uu);
        *(_QWORD *)uu = IdentifierPtr;
        v9 = 1;
        result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
        {
          if (*(_BYTE *)(result[6] + 376))
            break;
        }
      }
      v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *result;
    result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((_BYTE *)v1 + 40) = 1;
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t IdentifierPtr;
  uint64_t v7;
  uuid_t uu;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    v4 = result;
    do
    {
      result = (_QWORD *)RESceneUnderstandingComponentGetSourceType();
      if ((_DWORD)result != 2)
      {
        v5 = (_QWORD *)v4[2];
        IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        v9 = 0;
        v10 = 0;
        uuid_clear(uu);
        *(_QWORD *)uu = IdentifierPtr;
        v9 = 1;
        result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
        {
          if (*(_BYTE *)(result[6] + 392))
            break;
        }
      }
      v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

_QWORD *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *result;
    result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((_BYTE *)v1 + 40) = 1;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x38uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  std::any::any[abi:ne180100](v13 + 3, (void (**)(uint64_t))(a3 + 8));
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_2277D7C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::any::reset[abi:ne180100](v1 + 3);
    operator delete(v1);
  }
}

void ___ZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponent_block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  char v9;
  rf *v10;
  NSObject *v11;
  _BYTE __p[12];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc(MEMORY[0x24BDDE6D8]);
  objc_msgSend(*(id *)(a1 + 64), "allocator");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithBufferAllocator:", v3);

  objc_msgSend(v4, "addObject:", *(_QWORD *)(a1 + 64));
  v5 = (void *)MEMORY[0x24BDD17C8];
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)(a1 + 32), __p);
  if (v13 >= 0)
    v6 = __p;
  else
    v6 = *(_BYTE **)__p;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%s.obj"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 < 0)
    operator delete(*(void **)__p);
  objc_msgSend(*(id *)(a1 + 72), "URLByAppendingPathComponent:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)__p = 0;
  v9 = objc_msgSend(v4, "exportAssetToURL:error:", v8, __p);

  if ((v9 & 1) == 0)
  {
    **(_BYTE **)(a1 + 80) = 1;
    rf::realityFusionLogObject(v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 138412290;
      *(_QWORD *)&__p[4] = 0;
      _os_log_error_impl(&dword_227777000, v11, OS_LOG_TYPE_ERROR, "[MeshReconstructionConsumer::exportAcousticMeshComponentsInScene]: error when exporting mdlAsset %@", __p, 0xCu);
    }

  }
}

void sub_2277D7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c170_ZTSZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponentEUlSB_E_(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  id result;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(id *)(a2 + 64);
  result = *(id *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_ea8_32c170_ZTSZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponentEUlSB_E_(uint64_t a1)
{

}

_QWORD *RFRayCastingServiceCreate()
{
  _QWORD *Instance;
  _QWORD *v1;
  uint64_t v2;

  if (qword_253DCA058 != -1)
    dispatch_once(&qword_253DCA058, &__block_literal_global_13);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  v1[1] = &unk_24EFD8E78;
  v1[2] = 0;
  v2 = Instance[2];
  Instance[2] = v1;
  if (v2)
    MEMORY[0x22E29DD50](v2, 0xA0C40A8488062);
  CFRetain(Instance);
  CFRelease(Instance);
  return Instance;
}

__n128 RFRayCastingServiceGetRayCastingResult@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v1 = MEMORY[0x24BDAEE00];
  v2 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  *(_OWORD *)a1 = *MEMORY[0x24BDAEE00];
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = -1073741824;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer18RayCastingConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_24[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::RayCastingConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DCA060 = 0u;
  xmmword_253DCA070 = 0u;
  xmmword_253DCA080 = 0u;
  unk_253DCA090 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DCA0A0 = 0uLL;
  unk_253DCA0B0 = 0uLL;
  *((_QWORD *)&xmmword_253DCA060 + 1) = v7;
  *(_QWORD *)&xmmword_253DCA070 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DCA080 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::finalizeCallback;
  qword_253DCA098 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DCA0A0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_14 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277D813C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::finalizeCallback(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    JUMPOUT(0x22E29DD50);
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t rf::helpers::drawAxis()
{
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  REPrimitiveRenderSetLineColor();
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  REPrimitiveRenderSetLineColor();
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  return REPrimitiveRenderSetLineColor();
}

uint64_t rf::helpers::drawAnchorCube(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v6[3];

  v3 = a3[1];
  v4 = a3[2];
  v6[0] = *a3;
  v6[1] = v3;
  v6[2] = v4;
  re::makeQuaternionFromMatrix<float>(v6);
  REPrimitiveRenderAddShape();
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawPlaneRect(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4)
{
  uint64_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  uint64_t v40;

  v4 = 0;
  v40 = *MEMORY[0x24BDAC8D0];
  v5 = (int32x4_t)vmulq_f32(*a3, *a3);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v8 = vmulq_n_f32(*a3, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v9 = a3[2];
  v10 = (int32x4_t)vmulq_f32(v9, v9);
  v23 = a3[3];
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  v13 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  v14 = vmulq_n_f32(v8, *a4 * 0.5);
  v15 = vaddq_f32(v23, v14);
  v16 = vmulq_n_f32(v13, a4[2] * 0.5);
  v17 = vsubq_f32(v23, v14);
  v21 = vaddq_f32(v16, v17);
  v22 = vaddq_f32(v16, v15);
  v19 = vsubq_f32(v15, v16);
  v20 = vsubq_f32(v17, v16);
  v24 = &v22;
  v25 = &v21;
  v26 = &v22;
  v27 = &v19;
  v34 = &v23;
  v35 = &v22;
  v28 = &v21;
  v29 = &v20;
  v30 = &v20;
  v31 = &v19;
  v32 = &v20;
  v33 = &v23;
  v36 = &v19;
  v37 = &v23;
  v38 = &v23;
  v39 = &v21;
  do
  {
    REPrimitiveRenderAddLine();
    REPrimitiveRenderSetLineColor();
    result = REPrimitiveRenderSetLineWidth();
    v4 += 16;
  }
  while (v4 != 128);
  return result;
}

uint64_t rf::helpers::drawBox(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v11[3];

  v3 = a3[1];
  v11[0] = *a3;
  v4 = a3[2];
  v11[1] = v3;
  v11[2] = v4;
  re::makeQuaternionFromMatrix<float>(v11);
  REPrimitiveRenderAddShape();
  __asm { FMOV            V0.4S, #1.0 }
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawSphere(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v6[3];

  v3 = a3[1];
  v4 = a3[2];
  v6[0] = *a3;
  v6[1] = v3;
  v6[2] = v4;
  re::makeQuaternionFromMatrix<float>(v6);
  REPrimitiveRenderAddShape();
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawBoundingBox(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4)
{
  uint64_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t result;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;

  v4 = 0;
  v62 = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = (int32x4_t)vmulq_f32(*a3, *a3);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmulq_n_f32(*a3, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v10 = (int32x4_t)vmulq_f32(v5, v5);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  v13 = vmulq_n_f32(v5, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  v15 = a3[2];
  v14 = a3[3];
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
  v19 = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  v20 = vmulq_n_f32(v9, *a4 * 0.5);
  v21 = vaddq_f32(v14, v20);
  v22 = vmulq_n_f32(v19, a4[2] * 0.5);
  v23 = vaddq_f32(v21, v22);
  v24 = vmulq_n_f32(v13, a4[1] * 0.5);
  v25 = vsubq_f32(v14, v20);
  v26 = vaddq_f32(v25, v22);
  v36 = vaddq_f32(v24, v26);
  v37 = vaddq_f32(v24, v23);
  v27 = vsubq_f32(v25, v22);
  v28 = vsubq_f32(v21, v22);
  v34 = vaddq_f32(v24, v28);
  v35 = vaddq_f32(v24, v27);
  v32 = vsubq_f32(v26, v24);
  v33 = vsubq_f32(v23, v24);
  v30 = vsubq_f32(v28, v24);
  v31 = vsubq_f32(v27, v24);
  v38 = &v37;
  v39 = &v36;
  v40 = &v37;
  v41 = &v34;
  v42 = &v36;
  v43 = &v35;
  v44 = &v35;
  v45 = &v34;
  v46 = &v33;
  v47 = &v32;
  v48 = &v33;
  v49 = &v30;
  v50 = &v32;
  v51 = &v31;
  v52 = &v31;
  v53 = &v30;
  v54 = &v37;
  v55 = &v33;
  v56 = &v36;
  v57 = &v32;
  v58 = &v34;
  v59 = &v30;
  v60 = &v35;
  v61 = &v31;
  do
  {
    REPrimitiveRenderAddLine();
    REPrimitiveRenderSetLineColor();
    result = REPrimitiveRenderSetLineWidth();
    v4 += 16;
  }
  while (v4 != 192);
  return result;
}

uint64_t re::makeQuaternionFromMatrix<float>(float32x4_t *a1)
{
  float32x4_t v1;
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unsigned __int32 v26;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v43;
  unsigned int v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;

  v1 = a1[1];
  v2 = (int32x4_t)vmulq_f32(*a1, *a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_n_f32(*a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v6 = vmulq_f32(v1, v5);
  v7 = vmulq_f32(v5, v5);
  v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
  v9 = vsubq_f32(v1, vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]/ v8));
  v10 = (int32x4_t)vmulq_f32(v9, v9);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  v11 = vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
  v12 = a1[2];
  v13 = vmulq_f32(v5, v12);
  v14 = vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]/ v8);
  v15 = vmulq_f32(v12, v11);
  v16 = vsubq_f32(v12, v14);
  v14.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
  v17 = vmulq_f32(v11, v11);
  v18 = vsubq_f32(v16, vmulq_n_f32(v11, v14.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
  v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
  v20 = (int32x4_t)vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
  v21 = (float)(v5.f32[0] + v11.f32[1]) + *(float *)&v20.i32[2];
  if (v21 >= 0.0)
  {
    v33 = sqrtf(v21 + 1.0);
    v34 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v35 = vmul_f32(v34, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v34));
    return (uint64_t)vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v11, vuzp1q_s32((int32x4_t)v11, v20)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v20, vzip2q_s32(v20, (int32x4_t)v5))), vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35)).f32[0]);
  }
  else if (v5.f32[0] < v11.f32[1] || v5.f32[0] < *(float *)&v20.i32[2])
  {
    v36 = 1.0 - v5.f32[0];
    if (v11.f32[1] >= *(float *)&v20.i32[2])
    {
      v43 = sqrtf(v11.f32[1] + (float)(v36 - *(float *)&v20.i32[2]));
      *(float *)&v44 = v43 + v43;
      v45 = vrecpe_f32((float32x2_t)v44);
      v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
      v47.i32[0] = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).u32[0];
      v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), *(float32x2_t *)v11.f32).u32[0];
      v46.i32[1] = v44;
      v47.i32[1] = 0.25;
      return (uint64_t)vmul_f32(v46, v47);
    }
    else
    {
      v37 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v36 - v11.f32[1]) + *(float *)&v20.i32[2])));
      v38 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v5, (int32x4_t)v11), *(float32x2_t *)v20.i8);
      v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
      v39.i32[0] = 2.0;
      v39.i32[0] = vmul_f32(v37, v39).u32[0];
      v40 = vrecpe_f32((float32x2_t)v39.u32[0]);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39.u32[0], v40));
      v32 = vmul_n_f32(v38, vmul_f32(v41, vrecps_f32((float32x2_t)v39.u32[0], v41)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v23 = vadd_f32(*(float32x2_t *)v5.f32, v22);
    v22.i32[0] = 2.0;
    v22.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(v5.f32[0] + (float)((float)(1.0 - v11.f32[1])- *(float *)&v20.i32[2])))), v22).u32[0];
    v22.i32[1] = v23.i32[1];
    v24 = vrecpe_f32((float32x2_t)v22.u32[0]);
    v25 = vmul_f32(v24, vrecps_f32((float32x2_t)v22.u32[0], v24));
    v26 = vmul_f32(v25, vrecps_f32((float32x2_t)v22.u32[0], v25)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26;
    return (uint64_t)vmul_f32(v22, _D5);
  }
  return (uint64_t)v32;
}

float rf::ColorPalette::setColor(_QWORD *a1, int a2, __int128 *a3, float result)
{
  __int128 v4;
  float v5;
  __int128 v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a2 >= 1 && (uint64_t)(a1[1] - *a1) >> 4 > (unint64_t)a2)
  {
    v4 = *a3;
    v5 = 1.0;
    if (COERCE_FLOAT(*a3) <= 1.0)
      LODWORD(v6) = *a3;
    else
      *(float *)&v6 = 1.0;
    if (*(float *)&v4 < 0.0)
      *(float *)&v6 = 0.0;
    if (*((float *)&v4 + 1) <= 1.0)
      LODWORD(v7) = HIDWORD(*(_QWORD *)a3);
    else
      v7 = 1.0;
    if (*((float *)&v4 + 1) >= 0.0)
      v8 = v7;
    else
      v8 = 0.0;
    *((float *)&v6 + 1) = v8;
    if (*((float *)&v4 + 2) <= 1.0)
      LODWORD(v9) = *((_QWORD *)a3 + 1);
    else
      v9 = 1.0;
    if (*((float *)&v4 + 2) >= 0.0)
      v10 = v9;
    else
      v10 = 0.0;
    *((float *)&v6 + 2) = v10;
    if (*((float *)&v4 + 3) <= 1.0)
      LODWORD(v5) = HIDWORD(*a3);
    if (*((float *)&v4 + 3) >= 0.0)
      result = v5;
    else
      result = 0.0;
    *((float *)&v6 + 3) = result;
    *(_OWORD *)(*a1 + 16 * a2) = v6;
  }
  return result;
}

uint64_t rf::ColorPalette::setColorVisibility(uint64_t this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(this + 56))
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 48);
    do
    {
      v4 = v2 >> 6;
      v5 = 1 << v2;
      if (((a2 >> v2) & 1) != 0)
        v6 = *(_QWORD *)(v3 + 8 * v4) | v5;
      else
        v6 = *(_QWORD *)(v3 + 8 * v4) & ~v5;
      *(_QWORD *)(v3 + 8 * v4) = v6;
      ++v2;
    }
    while (v2 < *(_QWORD *)(this + 56));
  }
  return this;
}

rf::ColorPaletteMaterialARKit *rf::ColorPaletteMaterialARKit::ColorPaletteMaterialARKit(rf::ColorPaletteMaterialARKit *this)
{
  char *v7;
  _OWORD v9[26];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v9[0] = xmmword_2277F2FA0;
  v9[1] = xmmword_2277F2FA0;
  v9[2] = xmmword_2277F2FB0;
  v9[3] = xmmword_2277F2FC0;
  v9[4] = xmmword_2277F2FD0;
  v9[5] = xmmword_2277F2FE0;
  v9[6] = xmmword_2277F2FF0;
  v9[7] = xmmword_2277F3000;
  v9[8] = xmmword_2277F3010;
  v9[9] = xmmword_2277F3020;
  v9[10] = xmmword_2277F3030;
  v9[11] = xmmword_2277F3040;
  v9[12] = xmmword_2277F3050;
  v9[13] = xmmword_2277F3060;
  v9[14] = xmmword_2277F3070;
  v9[15] = xmmword_2277F3080;
  v9[16] = xmmword_2277F3090;
  v9[17] = xmmword_2277F30A0;
  v9[18] = xmmword_2277F30B0;
  v9[19] = xmmword_2277F30C0;
  v9[20] = xmmword_2277F30D0;
  v9[21] = xmmword_2277F30E0;
  v9[22] = xmmword_2277F30F0;
  v9[23] = xmmword_2277F3100;
  v9[24] = xmmword_2277F3110;
  v9[25] = xmmword_2277F3120;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l((char *)this, (char *)v9, (uint64_t)v10, 0x1AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  return this;
}

void sub_2277D9088(_Unwind_Exception *a1)
{
  rf::ColorPaletteMaterialARKit *v1;

  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 << 6 < v5 || v4 > (v6 << 6) - v5)
  {
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_13;
    if ((unint64_t)(v6 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (!v8)
      {
        v11 = 0;
        v13 = 0;
        v14 = *(_QWORD *)(a1 + 8);
        goto LABEL_17;
      }
      if ((v8 & 0x8000000000000000) != 0)
LABEL_13:
        std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    v21 = 0;
    v11 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)&v21, ((v8 - 1) >> 6) + 1);
    v21 = v12;
    *v11 = 0;
    v13 = v21;
    v14 = *(_QWORD *)(a1 + 8);
LABEL_17:
    v15 = v14 + v5;
    v16 = *(_QWORD **)a1;
    if (v14 < 1)
    {
      LODWORD(v10) = 0;
      v9 = v11;
    }
    else
    {
      v17 = (unint64_t)v14 >> 6;
      if ((unint64_t)v14 >= 0x40)
      {
        v18 = v13;
        memmove(v11, *(const void **)a1, 8 * v17);
        v13 = v18;
      }
      v9 = &v11[v17];
      v10 = v14 & 0x3F;
      if (v10)
        *v9 = *v9 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v10) | v16[v17] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v10);
      v16 = *(_QWORD **)a1;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v13;
    if (v16)
      operator delete(v16);
    goto LABEL_26;
  }
  v9 = (unint64_t *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
  v10 = *(_QWORD *)(a1 + 8) & 0x3FLL;
  *(_QWORD *)(a1 + 8) = a2;
LABEL_26:
  if (a2 != v4)
  {
    if ((_DWORD)v10)
    {
      if ((64 - v10) >= v5)
        v19 = v5;
      else
        v19 = (64 - v10);
      *v9++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v19)) & (-1 << v10);
      v5 -= v19;
    }
    v20 = v5 >> 6;
    if (v5 >= 0x40)
      memset(v9, 255, 8 * v20);
    if ((v5 & 0x3F) != 0)
      v9[v20] |= 0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F);
  }
}

void sub_2277D92A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

rf::ColorPaletteClassificationARKit *rf::ColorPaletteClassificationARKit::ColorPaletteClassificationARKit(rf::ColorPaletteClassificationARKit *this)
{
  char *v7;
  _OWORD v9[42];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v9[0] = xmmword_2277F3130;
  v9[1] = xmmword_2277EE8E0;
  v9[2] = xmmword_2277F3140;
  v9[3] = xmmword_2277F3150;
  v9[4] = xmmword_2277F3160;
  v9[5] = xmmword_2277F3170;
  v9[6] = xmmword_2277F3180;
  v9[7] = xmmword_2277F3190;
  v9[8] = xmmword_2277F31A0;
  v9[9] = xmmword_2277F31B0;
  v9[10] = xmmword_2277F31C0;
  v9[11] = xmmword_2277F31D0;
  v9[12] = xmmword_2277F31E0;
  v9[13] = xmmword_2277F31F0;
  v9[14] = xmmword_2277F3200;
  v9[15] = xmmword_2277F3210;
  v9[16] = xmmword_2277F3220;
  v9[17] = xmmword_2277F3230;
  v9[18] = xmmword_2277F3240;
  v9[19] = xmmword_2277F3250;
  v9[20] = xmmword_2277F3260;
  v9[21] = xmmword_2277F3270;
  v9[22] = xmmword_2277F3280;
  v9[23] = xmmword_2277F3290;
  v9[24] = xmmword_2277F32A0;
  v9[25] = xmmword_2277F32B0;
  v9[26] = xmmword_2277F32C0;
  v9[27] = xmmword_2277F32D0;
  v9[28] = xmmword_2277F32E0;
  v9[29] = xmmword_2277F32F0;
  v9[30] = xmmword_2277F3300;
  v9[31] = xmmword_2277F3310;
  v9[32] = xmmword_2277F3320;
  v9[33] = xmmword_2277F3330;
  v9[34] = xmmword_2277F3340;
  v9[35] = xmmword_2277F3350;
  v9[36] = xmmword_2277F3360;
  v9[37] = xmmword_2277F3370;
  v9[38] = xmmword_2277F3380;
  v9[39] = xmmword_2277F3390;
  v9[40] = xmmword_2277F33A0;
  v9[41] = xmmword_2277F33B0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l((char *)this, (char *)v9, (uint64_t)v10, 0x2AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  return this;
}

void sub_2277D9500(_Unwind_Exception *a1)
{
  rf::ColorPaletteMaterialARKit *v1;

  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v1);
  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

uint64_t *RFSyntheticEnvironmentServiceCreate()
{
  uint64_t *Instance;
  _QWORD *v1;

  if (qword_253DCA0C8 != -1)
    dispatch_once(&qword_253DCA0C8, &__block_literal_global_14);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = (_QWORD *)operator new();
  *v1 = Instance;
  rf::data_flow::consumer::SyntheticEnvironmentConsumer::SyntheticEnvironmentConsumer((uint64_t)(v1 + 1));
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, (uint64_t)v1);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

uint64_t RFSyntheticEnvironmentServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t ECSManagerNullable;
  char v7;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
  v10 = ECSManagerNullable;
  v11 = v7;
  v12 = a2;
  v13 = 1;
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 8) + 16))(v5 + 8, &v9);
}

void RFSyntheticEnvironmentServiceSetFinishedLoadingCallback(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v14 = 0;
  if (v3)
  {
    v13[0] = &off_24EFD9FB0;
    v13[1] = MEMORY[0x22E29E0BC](v3);
    v14 = v13;
    v15[0] = &off_24EFD9FB0;
    v16 = v15;
    v15[1] = MEMORY[0x22E29E0BC]();
  }
  else
  {
    v16 = 0;
  }
  v6 = v5 + 176;
  if (v15 != (_QWORD *)(v5 + 176))
  {
    v7 = v16;
    v8 = *(_QWORD *)(v5 + 200);
    if (v16 == v15)
    {
      if (v8 == v6)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, v17);
        (*(void (**)(_QWORD *))(*v16 + 32))(v16);
        v16 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 200) + 24))(*(_QWORD *)(v5 + 200), v15);
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 200) + 32))(*(_QWORD *)(v5 + 200));
        *(_QWORD *)(v5 + 200) = 0;
        v16 = v15;
        (*(void (**)(_QWORD *, uint64_t))(v17[0] + 24))(v17, v5 + 176);
        (*(void (**)(_QWORD *))(v17[0] + 32))(v17);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v15[0] + 24))(v15, v5 + 176);
        (*(void (**)(_QWORD *))(*v16 + 32))(v16);
        v16 = *(_QWORD **)(v5 + 200);
      }
      *(_QWORD *)(v5 + 200) = v6;
    }
    else if (v8 == v6)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v5 + 176, v15);
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 200) + 32))(*(_QWORD *)(v5 + 200));
      *(_QWORD *)(v5 + 200) = v16;
      v16 = v15;
    }
    else
    {
      v16 = *(_QWORD **)(v5 + 200);
      *(_QWORD *)(v5 + 200) = v7;
    }
  }
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_18;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_18:
  v11 = v14;
  if (v14 == v13)
  {
    v12 = 4;
    v11 = v13;
    goto LABEL_22;
  }
  if (v14)
  {
    v12 = 5;
LABEL_22:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

}

void sub_2277D997C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer28SyntheticEnvironmentConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_25[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::SyntheticEnvironmentConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DCA0D0 = 0u;
  xmmword_253DCA0E0 = 0u;
  xmmword_253DCA0F0 = 0u;
  unk_253DCA100 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DCA110 = 0uLL;
  unk_253DCA120 = 0uLL;
  *((_QWORD *)&xmmword_253DCA0D0 + 1) = v7;
  *(_QWORD *)&xmmword_253DCA0E0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DCA0F0 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::finalizeCallback;
  qword_253DCA108 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DCA110 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_15 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277D9AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    rf::data_flow::consumer::SyntheticEnvironmentConsumer::~SyntheticEnvironmentConsumer((rf::data_flow::consumer::SyntheticEnvironmentConsumer *)(v2 + 8));
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x22E29DD50);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24EFD9FB0;
  result = MEMORY[0x22E29E0BC](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::target_type()
{
}

uint64_t *RFVFXCollisionServiceCreate()
{
  uint64_t *Instance;
  uint64_t v1;
  uint64_t v3;

  if (qword_253DCA138 != -1)
    dispatch_once(&qword_253DCA138, &__block_literal_global_15);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = Instance;
  *(_QWORD *)(v1 + 8) = &off_24EFD82C8;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 1065353216;
  v3 = 0;
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100](Instance + 2, v1);
  std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100](&v3, 0);
  if (Instance)
  {
    CFRetain(Instance);
    CFRelease(Instance);
  }
  return Instance;
}

uint64_t RFVFXCollisionServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t ECSManagerNullable;
  char v7;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    ECSManagerNullable = REECSManagerGetServiceLocator();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
  v10 = ECSManagerNullable;
  v11 = v7;
  v12 = a2;
  v13 = 1;
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(v5 + 8) + 16))(v5 + 8, &v9);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer20VFXCollisionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0;
  int v1;
  char i;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__dst[2];
  int64_t v9;

  v0 = 0;
  v1 = 1;
  for (i = 114; ; i = aStdStringViewR_26[v0++ + 51])
  {
    if (i == 91)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if (i == 93)
      break;
    if (!i)
    {
      v0 = 0;
      HIBYTE(v9) = 0;
      v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1)
    goto LABEL_9;
  if (v0 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v0 >= 0x17)
  {
    v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17)
      v5 = v0 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  v4 = __dst;
  if (v0)
LABEL_17:
    memcpy(v4, "rf::data_flow::consumer::VFXCollisionConsumer]", v0);
LABEL_18:
  *((_BYTE *)v4 + v0) = 0;
  xmmword_253DCA140 = 0u;
  xmmword_253DCA150 = 0u;
  xmmword_253DCA160 = 0u;
  unk_253DCA170 = 0u;
  v7 = __dst;
  if (v9 < 0)
    v7 = (void **)__dst[0];
  xmmword_253DCA180 = 0uLL;
  unk_253DCA190 = 0uLL;
  *((_QWORD *)&xmmword_253DCA140 + 1) = v7;
  *(_QWORD *)&xmmword_253DCA150 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::initCallback;
  *(_QWORD *)&xmmword_253DCA160 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::finalizeCallback;
  qword_253DCA178 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyFormattingDescriptionCallback;
  *(_QWORD *)&xmmword_253DCA180 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_16 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0)
    operator delete(__dst[0]);
}

void sub_2277D9F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::initCallback(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = &off_24EFD82C8;
    std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table(v2 + 32);
    JUMPOUT(0x22E29DD50);
  }
  return result;
}

void sub_2277DA724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  unint64_t *v41;
  uint64_t v42;

  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a40)

  v41 = (unint64_t *)STACK[0x568];
  if ((unint64_t *)STACK[0x568] == &STACK[0x550])
  {
    v42 = 4;
    v41 = &STACK[0x550];
  }
  else
  {
    if (!v41)
      goto LABEL_8;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_8:
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x570]);
  _Unwind_Resume(a1);
}

void std::function<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;

  v5 = a3;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v4 + 48))(v4, &v5);

}

void sub_2277DA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isInputProbe(_anonymous_namespace_ *this, ARAnchor *a2)
{
  _anonymous_namespace_ *v2;
  char isKindOfClass;

  v2 = this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_2277DA914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::createInputProbeFromARAnchor(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  rf *v12;
  rf *v13;
  NSObject *v14;
  int v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void **v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  rf *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  -[_anonymous_namespace_ identifier](v4, "identifier");
  v5 = objc_claimAutoreleasedReturnValue();
  rf::data_flow::RFUUID::copy((rf::data_flow::RFUUID *)v5, (uint64_t)v30);
  -[_anonymous_namespace_ transform](v4, "transform");
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  -[_anonymous_namespace_ extent](v4, "extent");
  v35 = v10;
  LOBYTE(v36) = 0;
  v37 = 0;
  v38 = 1065353216;

  -[_anonymous_namespace_ environmentTexture](v4, "environmentTexture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = v11 == 0;

  if ((v5 & 1) == 0)
  {
    -[_anonymous_namespace_ environmentTexture](v4, "environmentTexture");
    v12 = (rf *)objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      v13 = v36;
      v36 = v12;

    }
    else
    {
      v36 = v12;
      v37 = 1;
    }
  }
  rf::realityFusionLogObject(v12);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v30, __p);
    v15 = v25;
    v16 = (void **)__p[0];
    -[_anonymous_namespace_ environmentTexture](v4, "environmentTexture");
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v17;
    v19 = __p;
    if (v15 < 0)
      v19 = v16;
    *(_DWORD *)buf = 136315394;
    v27 = v19;
    v28 = 2048;
    v29 = v17;
    _os_log_impl(&dword_227777000, v14, OS_LOG_TYPE_DEFAULT, "RFARSessionObserver: Updating probe %s with texture %p", buf, 0x16u);

    if (v25 < 0)
      operator delete(__p[0]);
  }

  v20 = v34;
  v21 = v35;
  *(_OWORD *)(a2 + 64) = v33;
  *(_OWORD *)(a2 + 80) = v20;
  *(_OWORD *)(a2 + 96) = v21;
  v22 = v30[1];
  *(_OWORD *)a2 = v30[0];
  *(_OWORD *)(a2 + 16) = v22;
  v23 = v32;
  *(_OWORD *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + 48) = v23;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  if (v37)
  {
    *(_QWORD *)(a2 + 112) = v36;
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_QWORD *)(a2 + 128) = v38;

}

void sub_2277DAB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  void *v35;
  void *v36;

  if (a15 < 0)
    operator delete(__p);

  if (a35)
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isInputAnchor(_anonymous_namespace_ *this, ARAnchor *a2)
{
  _anonymous_namespace_ *v2;
  char isKindOfClass;
  ARAnchor *v4;
  int isInputProbe;
  uint64_t v6;

  v2 = this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
    isInputProbe = 1;
  else
  v6 = isInputProbe ^ 1u;

  return v6;
}

void sub_2277DABF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2277DB1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,char a38)
{
  unint64_t *v39;
  uint64_t v40;

  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (a38)

  v39 = (unint64_t *)STACK[0x558];
  if ((unint64_t *)STACK[0x558] == &STACK[0x540])
  {
    v40 = 4;
    v39 = &STACK[0x540];
  }
  else
  {
    if (!v39)
      goto LABEL_8;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_8:
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x560]);
  _Unwind_Resume(a1);
}

void sub_2277DB9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  unint64_t *v37;
  uint64_t v38;

  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (a36)

  v37 = (unint64_t *)STACK[0x548];
  if ((unint64_t *)STACK[0x548] == &STACK[0x530])
  {
    v38 = 4;
    v37 = &STACK[0x530];
  }
  else
  {
    if (!v37)
      goto LABEL_8;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_8:
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x550]);
  _Unwind_Resume(a1);
}

void sub_2277DBF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,void *a39)
{
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a14);
  if (a38)

  rf::data_flow::provider::InputData::~InputData(&a39);
  _Unwind_Resume(a1);
}

void sub_2277DC250(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_2277DC458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<rf::data_flow::EnvironmentProbe>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE11cache_beginEv(uint64_t a1)
{
  double result;
  __int128 v3;

  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v3 + 1) = a1 + 32;
    _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(a1, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  void *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)a2; v2 != i; *(_QWORD *)a2 = i)
  {
    objc_msgSend(***(id ***)(a2 + 8), "objectAtIndexedSubscript:", (int)i);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if ((v7 & 1) != 0)
      break;
    i = *(_QWORD *)a2 + 1;
  }
}

void sub_2277DC7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::EnvironmentProbe>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,rf::data_flow::EnvironmentProbe*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 144)
    {
      if (*(_BYTE *)(i - 24))

    }
  }
  return a1;
}

char *std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF0F0F0F0F0F0F1)
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

void `anonymous namespace'::createInputAnchorFromARAnchor(_anonymous_namespace_ *this, ARAnchor *a2)
{
  ARAnchor *v3;
  void *v4;
  float v5;
  __float2 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  float v22;
  id v23;
  void *v24;
  float v25;
  void *v26;
  float v27;
  int v28;
  int v29;
  char *v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32_t v41;
  float v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  ARAnchor *v49;
  id v50;
  void *v51;
  ARAnchor *v52;
  id v53;
  void *v54;
  float32x4_t v55;
  float v56;
  ARAnchor *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  void *v71;
  double v72;
  double v73;
  void *v74;
  double v75;
  double v76;
  void *v77;
  unsigned int v78;
  float32x4_t v79;
  double v80;
  unsigned int v81;
  float v82;
  __int128 v83;
  __int128 v84;
  float32x4_t v85;
  id v86;
  ARAnchor *v87;
  id v88;
  double v89;
  __int128 v90;
  __int128 v91;
  float32x4_t v92;
  void *v93;
  void *v94;
  __int128 v95;
  void *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  float32x4_t v100;
  id v101;
  __int128 v102;
  float32x4_t v103;
  __int128 v104;
  id v105;
  __int128 v106;
  __int128 v107;
  float32x4_t v108;
  id v109;
  float v110;
  __int128 v111;
  id v112;
  float v113;
  __int128 v114;
  id v115;
  float32x4_t v116;
  __int128 v117;
  id v118;
  __int128 v119;
  __int128 v120;
  void *v121;
  ARAnchor *v122;
  void *__p[2];
  char *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  float32x4_t v128;
  __int128 v129;
  _OWORD v130[2];
  id v131;
  _BYTE v132[24];
  _BYTE v133[24];
  __int128 v134;
  float32x4_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  __int128 v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  float32x4_t v145;
  __int128 v146;
  _BYTE v147[25];
  id v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v122 = a2;
  rf::helpers::getBaseAnchorPropertiesFromARAnchor((rf::helpers *)v122, (uint64_t)&v142);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = v122;
    -[ARAnchor planeExtent](v3, "planeExtent");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "rotationOnYAxis");
    v6 = __sincosf_stret(v5);

    -[ARAnchor center](v3, "center");
    v119 = v7;
    -[ARAnchor geometry](v3, "geometry");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "boundaryVertexCount");

    *(_OWORD *)__p = 0uLL;
    v124 = 0;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        -[ARAnchor geometry](v3, "geometry");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "boundaryVertices");
        v13 = v12;
        if (__p[1] >= v124)
        {
          v15 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          if ((unint64_t)(v15 + 1) >> 60)
            _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
          v16 = (v124 - (char *)__p[0]) >> 3;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v124 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v124, v17);
          else
            v18 = 0;
          v19 = &v18[16 * v15];
          *(_OWORD *)v19 = *(_OWORD *)(v13 + 16 * i);
          v14 = (uint64_t)(v19 + 16);
          v20 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v21 = *((_OWORD *)v20 - 1);
              v20 -= 16;
              *((_OWORD *)v19 - 1) = v21;
              v19 -= 16;
            }
            while (v20 != __p[0]);
            v20 = (char *)__p[0];
          }
          __p[0] = v19;
          v124 = &v18[16 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_OWORD *)__p[1] = *(_OWORD *)(v12 + 16 * i);
          v14 = (uint64_t)__p[1] + 16;
        }
        __p[1] = (void *)v14;

      }
    }
    v125 = v142;
    v126 = v143;
    v116 = v145;
    v127 = v144;
    v140 = v146;
    v22 = *(float *)&v147[4];
    v141 = *(_DWORD *)v147;
    v138 = *(_OWORD *)&v147[8];
    v139 = v147[24];
    v23 = v148;
    v148 = 0;
    -[ARAnchor planeExtent](v3, "planeExtent");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "width");
    v113 = v25;
    -[ARAnchor planeExtent](v3, "planeExtent");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "height");
    v110 = v27;
    v28 = -[ARAnchor alignment](v3, "alignment");
    v29 = -[ARAnchor classification](v3, "classification");
    v30 = v124;
    v124 = 0;

    v31 = vrsqrte_f32((float32x2_t)1065353216);
    v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v31, v31)));
    v43 = vmulq_n_f32((float32x4_t)xmmword_2277EE450, vmul_f32(v32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v32, v32))).f32[0]);
    v33 = vmulq_f32(v43, v43).f32[0];
    v34 = vmuls_lane_f32(v43.f32[1], *(float32x2_t *)v43.f32, 1);
    v35 = vmuls_lane_f32(v43.f32[2], v43, 2);
    v36 = vmuls_lane_f32(v43.f32[0], *(float32x2_t *)v43.f32, 1);
    v37 = vmuls_lane_f32(v43.f32[0], v43, 2);
    v32.f32[0] = vmuls_lane_f32(v43.f32[1], v43, 2);
    v38 = v6.__sinval * v43.f32[0];
    v39 = vmuls_lane_f32(v6.__sinval, *(float32x2_t *)v43.f32, 1);
    v43.f32[0] = vmuls_lane_f32(v6.__sinval, v43, 2);
    v40 = -(float)(v43.f32[0] - (float)(v36 * (float)(1.0 - v6.__cosval)));
    v41 = v43.f32[0] + (float)(v36 * (float)(1.0 - v6.__cosval));
    v42 = -(float)(v38 - (float)(v32.f32[0] * (float)(1.0 - v6.__cosval)));
    v43.i32[3] = 0;
    v43.f32[0] = v33 + (float)(v6.__cosval * (float)(1.0 - v33));
    v43.f32[1] = v41;
    HIDWORD(v45) = 0;
    HIDWORD(v44) = 0;
    *(float *)&v44 = v40;
    *((float *)&v44 + 1) = v34 + (float)(v6.__cosval * (float)(1.0 - v34));
    *((float *)&v44 + 2) = v38 + (float)(v32.f32[0] * (float)(1.0 - v6.__cosval));
    *(float *)&v45 = v39 + (float)(v37 * (float)(1.0 - v6.__cosval));
    *((float *)&v45 + 1) = v42;
    *((float *)&v45 + 2) = v35 + (float)(v6.__cosval * (float)(1.0 - v35));
    v46 = v119;
    HIDWORD(v46) = 1.0;
    *(_QWORD *)&v47 = LODWORD(v33);
    *(float *)&v47 = v113;
    *((_QWORD *)&v47 + 1) = LODWORD(v110);
    if (v29)
      goto LABEL_22;
    v55 = vmulq_f32(v116, (float32x4_t)xmmword_2277EE450);
    v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
    if (v56 > 0.70711 || v56 < -0.70711)
    {
      if (v116.f32[1] < 0.0)
      {
        v29 = 3;
        goto LABEL_22;
      }
      if (v22 < -0.5)
      {
        v29 = 2;
        goto LABEL_22;
      }
      if (v113 > 0.4 && v110 > 0.4)
      {
        v29 = 4;
        goto LABEL_22;
      }
    }
    else if (v113 > 1.0 && v110 > 1.0)
    {
      v29 = 1;
LABEL_22:
      v48 = v126;
      *(_OWORD *)this = v125;
      *((_OWORD *)this + 1) = v48;
      *((_OWORD *)this + 2) = v127;
      *((float32x4_t *)this + 3) = v116;
      *((_OWORD *)this + 4) = v140;
      *((_DWORD *)this + 20) = v141;
      *((float *)this + 21) = v22;
      *(_OWORD *)((char *)this + 88) = v138;
      *((_BYTE *)this + 104) = v139;
      *((_QWORD *)this + 14) = v23;
      v43.f32[2] = -(float)(v39 - (float)(v37 * (float)(1.0 - v6.__cosval)));
      *((float32x4_t *)this + 8) = v43;
      *((_OWORD *)this + 9) = v44;
      *((_OWORD *)this + 10) = v45;
      *((_OWORD *)this + 11) = v46;
      *((_OWORD *)this + 12) = v47;
      *((_DWORD *)this + 52) = v28;
      *((_DWORD *)this + 53) = v29;
      *(_OWORD *)((char *)this + 216) = *(_OWORD *)__p;
      *((_QWORD *)this + 29) = v30;
      *((_DWORD *)this + 64) = 1;

      goto LABEL_61;
    }
    v29 = 0;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v49 = v122;
    v129 = v146;
    v130[0] = *(_OWORD *)v147;
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
    v125 = v142;
    v126 = v143;
    v127 = v144;
    v128 = v145;
    v50 = v148;
    v148 = 0;
    v131 = v50;
    v132[0] = -[ARAnchor isDetectionOnly](v49, "isDetectionOnly");
    -[ARAnchor name](v49, "name");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if (v51)
    {
      -[ARAnchor name](v49, "name");
      v118 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v132[8], (char *)objc_msgSend(v118, "UTF8String"));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v132[8], "");
    }
    -[ARAnchor referenceImage](v49, "referenceImage");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "resourceGroupName");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    if (v71)
    {
      -[ARAnchor referenceImage](v49, "referenceImage");
      v115 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "resourceGroupName");
      v112 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v133[8], (char *)objc_msgSend(v112, "UTF8String"));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v133[8], "");
    }
    -[ARAnchor estimatedScaleFactor](v49, "estimatedScaleFactor");
    v73 = v72;
    -[ARAnchor referenceImage](v49, "referenceImage");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "physicalSize");
    v76 = v75;
    -[ARAnchor referenceImage](v49, "referenceImage");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "physicalSize");
    *(float *)&v78 = v76;
    v79.i64[0] = v78;
    *(float *)&v81 = v80;
    v79.i64[1] = v81;
    v82 = v73;
    v135 = vmulq_n_f32(v79, v82);

    if (v71)
    {

    }
    if (v51)

    v83 = v130[0];
    *((_OWORD *)this + 4) = v129;
    *((_OWORD *)this + 5) = v83;
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
    v84 = v126;
    *(_OWORD *)this = v125;
    *((_OWORD *)this + 1) = v84;
    v85 = v128;
    *((_OWORD *)this + 2) = v127;
    *((float32x4_t *)this + 3) = v85;
    v86 = v131;
    v131 = 0;
    *((_QWORD *)this + 14) = v86;
    *((_BYTE *)this + 128) = v132[0];
    *(_OWORD *)((char *)this + 136) = *(_OWORD *)&v132[8];
    *((_QWORD *)this + 19) = *(_QWORD *)v133;
    *(_QWORD *)&v132[8] = 0;
    *(_QWORD *)&v132[16] = 0;
    *(_QWORD *)v133 = 0;
    *((_OWORD *)this + 10) = *(_OWORD *)&v133[8];
    *((_QWORD *)this + 22) = v134;
    *(_QWORD *)&v133[8] = 0;
    *(_QWORD *)&v133[16] = 0;
    *(_QWORD *)&v134 = 0;
    *((float32x4_t *)this + 12) = v135;
    *((_DWORD *)this + 64) = 2;

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v52 = v122;
      v129 = v146;
      v130[0] = *(_OWORD *)v147;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
      v125 = v142;
      v126 = v143;
      v127 = v144;
      v128 = v145;
      v53 = v148;
      v148 = 0;
      v131 = v53;
      -[ARAnchor name](v52, "name");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      if (v54)
      {
        -[ARAnchor name](v52, "name");
        v115 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(v132, (char *)objc_msgSend(v115, "UTF8String"));
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v132, "");
      }
      -[ARAnchor referenceObject](v52, "referenceObject");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "resourceGroupName");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      if (v93)
      {
        -[ARAnchor referenceObject](v52, "referenceObject");
        v112 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "resourceGroupName");
        v109 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(v133, (char *)objc_msgSend(v109, "UTF8String"));
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v133, "");
      }
      v135.i8[0] = 0;
      v135.i64[1] = 0;
      uuid_clear((unsigned __int8 *)&v134);
      -[ARAnchor referenceObject](v52, "referenceObject");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "center");
      v136 = v95;
      -[ARAnchor referenceObject](v52, "referenceObject");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "extent");
      v137 = v97;

      if (v93)
      {

      }
      if (v54)

      v98 = v130[0];
      *((_OWORD *)this + 4) = v129;
      *((_OWORD *)this + 5) = v98;
      *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
      v99 = v126;
      *(_OWORD *)this = v125;
      *((_OWORD *)this + 1) = v99;
      v100 = v128;
      *((_OWORD *)this + 2) = v127;
      *((float32x4_t *)this + 3) = v100;
      v101 = v131;
      v131 = 0;
      *((_QWORD *)this + 14) = v101;
      v102 = *(_OWORD *)v132;
      *((_QWORD *)this + 18) = *(_QWORD *)&v132[16];
      *((_OWORD *)this + 8) = v102;
      memset(v132, 0, sizeof(v132));
      *((_QWORD *)this + 21) = *(_QWORD *)&v133[16];
      *(_OWORD *)((char *)this + 152) = *(_OWORD *)v133;
      memset(v133, 0, sizeof(v133));
      v103 = v135;
      *((_OWORD *)this + 11) = v134;
      *((float32x4_t *)this + 12) = v103;
      v104 = v137;
      *((_OWORD *)this + 13) = v136;
      *((_OWORD *)this + 14) = v104;
      *((_DWORD *)this + 64) = 3;

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v57 = v122;
        v129 = v146;
        v130[0] = *(_OWORD *)v147;
        *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
        v125 = v142;
        v126 = v143;
        v127 = v144;
        v128 = v145;
        v58 = v148;
        v148 = 0;
        -[ARAnchor leftEyeTransform](v57, "leftEyeTransform");
        v117 = v60;
        v120 = v59;
        v111 = v62;
        v114 = v61;
        -[ARAnchor rightEyeTransform](v57, "rightEyeTransform");
        v63 = v130[0];
        *((_OWORD *)this + 4) = v129;
        *((_OWORD *)this + 5) = v63;
        *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
        v64 = v126;
        *(_OWORD *)this = v125;
        *((_OWORD *)this + 1) = v64;
        v65 = v128;
        *((_OWORD *)this + 2) = v127;
        *((float32x4_t *)this + 3) = v65;
        *((_QWORD *)this + 14) = v58;
        *((_OWORD *)this + 8) = v120;
        *((_OWORD *)this + 9) = v117;
        *((_OWORD *)this + 10) = v114;
        *((_OWORD *)this + 11) = v111;
        *((_OWORD *)this + 12) = v66;
        *((_OWORD *)this + 13) = v67;
        *((_OWORD *)this + 14) = v68;
        *((_OWORD *)this + 15) = v69;
        *((_DWORD *)this + 64) = 4;

      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v87 = v122;
          v129 = v146;
          v130[0] = *(_OWORD *)v147;
          *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
          v125 = v142;
          v126 = v143;
          v127 = v144;
          v128 = v145;
          v88 = v148;
          v148 = 0;
          -[ARAnchor estimatedScaleFactor](v87, "estimatedScaleFactor");
          *(float *)&v89 = v89;
          v90 = v130[0];
          *((_OWORD *)this + 4) = v129;
          *((_OWORD *)this + 5) = v90;
          *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
          v91 = v126;
          *(_OWORD *)this = v125;
          *((_OWORD *)this + 1) = v91;
          v92 = v128;
          *((_OWORD *)this + 2) = v127;
          *((float32x4_t *)this + 3) = v92;
          *((_QWORD *)this + 14) = v88;
          *((_DWORD *)this + 32) = LODWORD(v89);
          *((_DWORD *)this + 64) = 5;

        }
        else
        {
          v105 = v148;
          v148 = 0;
          v106 = *(_OWORD *)v147;
          *((_OWORD *)this + 4) = v146;
          *((_OWORD *)this + 5) = v106;
          *(_OWORD *)((char *)this + 89) = *(_OWORD *)&v147[9];
          v107 = v143;
          *(_OWORD *)this = v142;
          *((_OWORD *)this + 1) = v107;
          v108 = v145;
          *((_OWORD *)this + 2) = v144;
          *((float32x4_t *)this + 3) = v108;
          *((_QWORD *)this + 14) = v105;
          *((_DWORD *)this + 64) = 0;
        }
      }
    }
  }
LABEL_61:

}

