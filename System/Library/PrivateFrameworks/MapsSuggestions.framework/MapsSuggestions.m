void sub_1A4280638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsIsInCoarseLocation()
{
  id v0;
  uint64_t v1;

  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  v0 = (id)qword_1ED22F198;
  objc_sync_enter(v0);
  v1 = _MergedGlobals_49;
  objc_sync_exit(v0);

  return v1;
}

id MapsSuggestionsFindMy.__allocating_init(fromResourceDepot:)(void *a1)
{
  objc_class *v1;
  char *v3;
  id result;
  id v5;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  result = objc_msgSend(a1, sel_oneFindMyConnector);
  if (result)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions21MapsSuggestionsFindMy__connector] = result;

    v6.receiver = v3;
    v6.super_class = v1;
    v5 = objc_msgSendSuper2(&v6, sel_init);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MapsSuggestionsFindMy.init(fromResourceDepot:)(void *a1)
{
  void *v1;
  char *v3;
  id result;
  id v5;
  objc_super v6;

  v3 = v1;
  result = objc_msgSend(a1, sel_oneFindMyConnector);
  if (result)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions21MapsSuggestionsFindMy__connector] = result;

    v6.receiver = v3;
    v6.super_class = (Class)type metadata accessor for MapsSuggestionsFindMy();
    v5 = objc_msgSendSuper2(&v6, sel_init);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MapsSuggestionsFindMy()
{
  return objc_opt_self();
}

uint64_t MapsSuggestionsFindMy.verifyFriendship(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch();
}

uint64_t sub_1A428089C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[18] + OBJC_IVAR____TtC15MapsSuggestions21MapsSuggestionsFindMy__connector);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1A428093C;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1A4280D88;
  v3[3] = &block_descriptor;
  v3[4] = v2;
  objc_msgSend(v1, sel_listOfFriendsWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_1A428093C()
{
  return swift_task_switch();
}

uint64_t sub_1A4280988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 120);
  if (qword_1EE714570 != -1)
    swift_once();
  v2 = sub_1A43AB584();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE719150);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = sub_1A43AB56C();
  v4 = sub_1A43AB71C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v37 = v35;
    *(_DWORD *)v5 = 136315394;
    v6 = swift_bridgeObjectRetain();
    v7 = MEMORY[0x1A859C598](v6, MEMORY[0x1E0DEA968]);
    v9 = v8;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = sub_1A4281D00(v7, v9, &v37);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2080;
    v10 = swift_bridgeObjectRetain();
    v11 = MEMORY[0x1A859C598](v10, MEMORY[0x1E0DEA968]);
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = sub_1A4281D00(v11, v13, &v37);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A427D000, v3, v4, "Checking %s against friends:%s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v35, -1, -1);
    MEMORY[0x1A859D2B8](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v1 + 16);
    v17 = v14 + 32;
    swift_bridgeObjectRetain();
    v18 = 0;
    v19 = (uint64_t *)(v1 + 40);
    v33 = v16;
    v34 = v15;
    v31 = (uint64_t *)(v1 + 40);
    v32 = v17;
    while (!v16)
    {
LABEL_8:
      if (++v18 == v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    v36 = v18;
    v20 = (uint64_t *)(v17 + 16 * v18);
    v21 = *v20;
    v22 = v20[1];
    sub_1A4281A54();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v19;
    v24 = v16;
    while (1)
    {
      v26 = *(v23 - 1);
      v25 = *v23;
      *(_QWORD *)(v0 + 80) = v26;
      *(_QWORD *)(v0 + 88) = v25;
      *(_QWORD *)(v0 + 120) = v21;
      *(_QWORD *)(v0 + 128) = v22;
      swift_bridgeObjectRetain();
      if ((sub_1A43AB7F4() & 1) != 0)
        break;
      v23 += 2;
      swift_bridgeObjectRelease();
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = v33;
        v15 = v34;
        v19 = v31;
        v17 = v32;
        v18 = v36;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v27 = sub_1A43AB56C();
    v28 = sub_1A43AB71C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1A427D000, v27, v28, "Verification failed", v29, 2u);
      MEMORY[0x1A859D2B8](v29, -1, -1);
    }

    v26 = 0;
    v25 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v26, v25);
}

uint64_t sub_1A4280D88(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v1 + 64) + 40) = sub_1A43AB698();
  return swift_continuation_resume();
}

uint64_t sub_1A4280EF8(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A43AB698();
  v3[4] = v5;
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_1A4280F98;
  v7[17] = v5;
  v7[18] = v6;
  return swift_task_switch();
}

uint64_t sub_1A4280F98(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a2)
  {
    v7 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void (***)(_QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, void *))v8)[2](v8, v7);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t MapsSuggestionsFindMy.location(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = a1;
  *(_QWORD *)(v2 + 200) = v1;
  return swift_task_switch();
}

uint64_t sub_1A4281060()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = objc_msgSend(*(id *)(v0 + 192), sel_stringForKey_, CFSTR("MapsSuggestionsContactLikelyAppleIDKey"));
  *(_QWORD *)(v0 + 208) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = v0 + 184;
    v4 = *(void **)(v0 + 192);
    v5 = sub_1A43AB62C();
    v7 = v6;
    if (isLikelyMeetup(v4))
    {
      if (qword_1EE714570 != -1)
        swift_once();
      v8 = sub_1A43AB584();
      __swift_project_value_buffer(v8, (uint64_t)qword_1EE719150);
      swift_bridgeObjectRetain();
      v9 = sub_1A43AB56C();
      v10 = sub_1A43AB71C();
      if (os_log_type_enabled(v9, v10))
      {
        v29 = v0 + 184;
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v30 = v12;
        *(_DWORD *)v11 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 144) = sub_1A4281D00(v5, v7, &v30);
        v13 = v0 + 144;
        sub_1A43AB7DC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1A427D000, v9, v10, "About the fetch location() for %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v12, -1, -1);
        v14 = v11;
        v3 = v0 + 184;
        MEMORY[0x1A859D2B8](v14, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();

        v13 = v0 + 144;
      }
      v27 = *(void **)(*(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC15MapsSuggestions21MapsSuggestionsFindMy__connector);
      *(_QWORD *)(v0 + 120) = v3;
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = sub_1A4281570;
      *(_QWORD *)(v0 + 176) = swift_continuation_init();
      *(_QWORD *)(v0 + 144) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 152) = 0x40000000;
      *(_QWORD *)(v0 + 160) = sub_1A4281640;
      *(_QWORD *)(v0 + 168) = &block_descriptor_36;
      objc_msgSend(v27, sel_locationFor_completionHandler_, v2, v13, v29);
    }
    else
    {
      if (qword_1EE714570 != -1)
        swift_once();
      v20 = sub_1A43AB584();
      __swift_project_value_buffer(v20, (uint64_t)qword_1EE719150);
      swift_bridgeObjectRetain();
      v21 = sub_1A43AB56C();
      v22 = sub_1A43AB71C();
      if (os_log_type_enabled(v21, v22))
      {
        v29 = v0 + 184;
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = swift_slowAlloc();
        v30 = v24;
        *(_DWORD *)v23 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 144) = sub_1A4281D00(v5, v7, &v30);
        v25 = v0 + 144;
        sub_1A43AB7DC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1A427D000, v21, v22, "About the fetch latestLocation() for %s", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v24, -1, -1);
        v26 = v23;
        v3 = v0 + 184;
        MEMORY[0x1A859D2B8](v26, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();

        v25 = v0 + 144;
      }
      v28 = *(void **)(*(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC15MapsSuggestions21MapsSuggestionsFindMy__connector);
      *(_QWORD *)(v0 + 56) = v3;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1A42815F4;
      *(_QWORD *)(v0 + 176) = swift_continuation_init();
      *(_QWORD *)(v0 + 144) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 152) = 0x40000000;
      *(_QWORD *)(v0 + 160) = sub_1A4281640;
      *(_QWORD *)(v0 + 168) = &block_descriptor_35;
      objc_msgSend(v28, sel_latestLocationFor_completionHandler_, v2, v25, v29);
    }
    return swift_continuation_await();
  }
  else
  {
    if (qword_1EE714570 != -1)
      swift_once();
    v15 = sub_1A43AB584();
    __swift_project_value_buffer(v15, (uint64_t)qword_1EE719150);
    v16 = sub_1A43AB56C();
    v17 = sub_1A43AB734();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1A427D000, v16, v17, "identifier is nil. This cannot be happening. Returning nil as location.", v18, 2u);
      MEMORY[0x1A859D2B8](v18, -1, -1);
    }

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1A4281570()
{
  return swift_task_switch();
}

uint64_t sub_1A42815BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1A42815F4()
{
  return swift_task_switch();
}

uint64_t sub_1A4281640(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  sub_1A4282728((uint64_t)&v6, v3);
  return swift_continuation_resume();
}

uint64_t sub_1A42817B8(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1A4281848;
  v8[24] = v6;
  v8[25] = v7;
  return swift_task_switch();
}

uint64_t sub_1A4281848(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  void *v5;
  uint64_t v7;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v4 = *(void **)(*v1 + 24);
  v7 = *v1;
  swift_task_dealloc();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v7 + 8))();
}

id MapsSuggestionsFindMy.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsFindMy.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsFindMy.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsFindMy();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t variable initialization expression of MapsSuggestionsEventStreamer.uniqueName()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsEventStreamer._scanTimer()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeStreamer.callBackBlock()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeStreamer.simpleCallBack()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeStreamer.tenSecondEvent()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeStreamer.alreadyStartedEvent()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeStreamer.doubleEvent()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsWalletStreamer._wallet()
{
  return 0;
}

double variable initialization expression of MapsSuggestionsWalletStreamer._keyListenerBlock@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double variable initialization expression of MapsSuggestionsWalletStreamer._passKitObserver@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of MapsSuggestionsWalletStreamer._passKitChangedCanKicker()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsEventKitStreamer._eventKit()
{
  return 0;
}

double variable initialization expression of MapsSuggestionsEventKitStreamer._keyListenerBlock@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double variable initialization expression of MapsSuggestionsEventKitStreamer._eventKitObserver@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of MapsSuggestionsEventKitStreamer._eventKitChangedCanKicker()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsRealFindMyConnector.uniqueName()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsRealFindMyConnector.findMySession()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeFindMyConnector.uniqueName()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeFindMyConnector.cachedLocation()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeFindMyConnector.refreshedLocation()
{
  return 0;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_1A4281A54()
{
  unint64_t result;

  result = qword_1EE7145A0;
  if (!qword_1EE7145A0)
  {
    result = MEMORY[0x1A859D234](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE7145A0);
  }
  return result;
}

uint64_t variable initialization expression of MapsSuggestionsContactActivity.uniqueName()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsContactActivity.contactActivityDelegate()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFakeFinanceKitConnector.orderPickups()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t variable initialization expression of MapsSuggestionsFakeFinanceKitConnector._callbackHandle()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceSource._delegate()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceSource._updateCompleteHandler()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceSource.queue()
{
  return sub_1A4281B80(0xD000000000000013, 0x80000001A43B3830);
}

uint64_t variable initialization expression of MapsSuggestionsFinanceKit.uniqueName()
{
  id v0;
  uint64_t v1;

  type metadata accessor for MapsSuggestionsFinanceKit();
  v0 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
  v1 = sub_1A43AB62C();

  return v1;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceKit._observer()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceKit._delegate()
{
  return 0;
}

uint64_t variable initialization expression of MapsSuggestionsFinanceKit._queue()
{
  return sub_1A4281B80(0xD000000000000015, 0x80000001A43B3850);
}

uint64_t sub_1A4281B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a2;
  v2 = sub_1A43AB764();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB74C();
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1A43AB5C0();
  MEMORY[0x1E0C80A78](v7);
  sub_1A4282340();
  sub_1A43AB5B4();
  v9[1] = MEMORY[0x1E0DEE9D8];
  sub_1A428237C();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECD0);
  sub_1A4282404();
  sub_1A43AB80C();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF8D0], v2);
  return sub_1A43AB794();
}

uint64_t sub_1A4281D00(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1A4281DD0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1A4282790((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1A4282790((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1A4281DD0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A43AB7E8();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1A4281F88(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1A43AB860();
  if (!v8)
  {
    sub_1A43AB8A8();
    __break(1u);
LABEL_17:
    result = sub_1A43AB8F0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1A4281F88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1A428201C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A42821F4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1A42821F4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A428201C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1A4282190(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1A43AB83C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1A43AB8A8();
      __break(1u);
LABEL_10:
      v2 = sub_1A43AB668();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1A43AB8F0();
    __break(1u);
LABEL_14:
    result = sub_1A43AB8A8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1A4282190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EAF8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A42821F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EAF8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A43AB8F0();
  __break(1u);
  return result;
}

unint64_t sub_1A4282340()
{
  unint64_t result;

  result = qword_1ED22ED00;
  if (!qword_1ED22ED00)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED22ED00);
  }
  return result;
}

unint64_t sub_1A428237C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED22ECF0;
  if (!qword_1ED22ECF0)
  {
    v1 = sub_1A43AB74C();
    result = MEMORY[0x1A859D234](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED22ECF0);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A859D21C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1A4282404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED22ECE0;
  if (!qword_1ED22ECE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED22ECD0);
    result = MEMORY[0x1A859D234](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED22ECE0);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A859D228](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1A4282498()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1EE714680 + dword_1EE714680))(v2, v3, v4);
}

uint64_t sub_1A4282508()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EE714BA8 + dword_1EE714BA8))(v2, v3, v4);
}

uint64_t sub_1A4282584(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A428287C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE714BB0 + dword_1EE714BB0))(a1, v4, v5, v6);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1A4282640()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A42826AC;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE7146A0 + dword_1EE7146A0))(v2, v3, v4);
}

uint64_t sub_1A42826AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroy_39Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A4282728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE7146C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1A4282790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1A42827E0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A4282800(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for GEOLocationCoordinate2D()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE7146D0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE7146D0);
  }
}

id TimerClass.__allocating_init(name:)()
{
  objc_class *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(v0);
  v2 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithName_, v2);

  return v3;
}

id TimerClass.init(name:)()
{
  void *v0;
  void *v1;
  id v2;
  objc_super v4;

  v1 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for TimerClass();
  v2 = objc_msgSendSuper2(&v4, sel_initWithName_, v1);

  return v2;
}

uint64_t type metadata accessor for TimerClass()
{
  return objc_opt_self();
}

id TimerClass.__allocating_init(name:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  void *v6;
  id v7;

  v5 = objc_allocWithZone(v3);
  v6 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithName_queue_, v6, a3);

  return v7;
}

id TimerClass.init(name:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  id v6;
  objc_super v8;

  v5 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for TimerClass();
  v6 = objc_msgSendSuper2(&v8, sel_initWithName_queue_, v5, a3);

  return v6;
}

id TimerClass.__allocating_init(name:queue:block:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1A4282CFC(a1, a2, a3, a4, a5, (uint64_t)sub_1A4282B78, (uint64_t)&block_descriptor_0, (SEL *)&selRef_initWithName_queue_block_);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id TimerClass.init(name:queue:block:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1A4282E48(a1, a2, a3, a4, a5, (uint64_t)sub_1A4282B78, (uint64_t)&block_descriptor_3, (SEL *)&selRef_initWithName_queue_block_);
}

id TimerClass.__allocating_init(name:queue:timerReturning:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1A4282CFC(a1, a2, a3, a4, a5, (uint64_t)sub_1A4282DE4, (uint64_t)&block_descriptor_6, (SEL *)&selRef_initWithName_queue_timerReturningBlock_);
}

id sub_1A4282CFC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  objc_class *v8;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v20[6];

  v15 = objc_allocWithZone(v8);
  v16 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v20[4] = a4;
  v20[5] = a5;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1107296256;
  v20[2] = a6;
  v20[3] = a7;
  v17 = _Block_copy(v20);
  v18 = objc_msgSend(v15, *a8, v16, a3, v17);

  _Block_release(v17);
  swift_release();
  return v18;
}

uint64_t sub_1A4282DE4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

id TimerClass.init(name:queue:timerReturning:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1A4282E48(a1, a2, a3, a4, a5, (uint64_t)sub_1A4282DE4, (uint64_t)&block_descriptor_9, (SEL *)&selRef_initWithName_queue_timerReturningBlock_);
}

id sub_1A4282E48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  void *v8;
  void *v15;
  void *v16;
  id v17;
  objc_super v19;
  _QWORD aBlock[6];

  v15 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = a6;
  aBlock[3] = a7;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for TimerClass();
  v17 = objc_msgSendSuper2(&v19, *a8, v15, a3, v16);

  swift_release();
  _Block_release(v16);

  return v17;
}

id TimerClass.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimerClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MapsSuggestionsEventStreamer.uniqueName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_uniqueName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MapsSuggestionsEventStreamer.uniqueName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_uniqueName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsEventStreamer.uniqueName.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double MapsSuggestionsEventStreamer.lookAheadPeriod.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_lookAheadPeriod);
}

double MapsSuggestionsEventStreamer.pingInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_pingInterval);
}

uint64_t MapsSuggestionsEventStreamer.notificationName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_notificationName);
  swift_bridgeObjectRetain();
  return v1;
}

char *MapsSuggestionsEventStreamer.__allocating_init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return MapsSuggestionsEventStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(a1, a2, a3, a4, a5, a6);
}

char *MapsSuggestionsEventStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  char *v6;
  char *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  id v27;
  char *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t aBlock;
  uint64_t v48;
  uint64_t (*v49)();
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;
  objc_super v53;

  v7 = v6;
  v45 = a1;
  v46 = a2;
  v12 = sub_1A43AB764();
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A43AB74C();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v15);
  v17 = sub_1A43AB5C0();
  MEMORY[0x1E0C80A78](v17);
  v18 = &v7[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_uniqueName];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer] = 0;
  v42[1] = sub_1A4289D70(0, (unint64_t *)&qword_1ED22ED00);
  aBlock = a3;
  v48 = a4;
  swift_bridgeObjectRetain();
  sub_1A43AB65C();
  v19 = v7;
  swift_bridgeObjectRelease();
  sub_1A43AB5B4();
  aBlock = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&qword_1ED22ECF0, v16, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECD0);
  sub_1A4284C58((unint64_t *)&qword_1ED22ECE0, (uint64_t *)&unk_1ED22ECD0);
  sub_1A43AB80C();
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v14, *MEMORY[0x1E0DEF8D0], v44);
  *(_QWORD *)&v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue] = sub_1A43AB794();
  *(double *)&v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_lookAheadPeriod] = a5;
  *(double *)&v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_pingInterval] = a6;
  v20 = &v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_notificationName];
  v21 = v46;
  *(_QWORD *)v20 = v45;
  *((_QWORD *)v20 + 1) = v21;
  *(_QWORD *)&v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__notifyTimers] = MEMORY[0x1E0DEE9D8];
  GEOConfigGetDouble();
  *(_QWORD *)&v19[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__delay] = v22;

  v23 = (objc_class *)type metadata accessor for MapsSuggestionsEventStreamer();
  v53.receiver = v19;
  v53.super_class = v23;
  v24 = (char *)objc_msgSendSuper2(&v53, sel_init);
  v25 = *(void **)&v24[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v24;
  v27 = objc_allocWithZone((Class)type metadata accessor for TimerClass());
  v28 = v24;
  v29 = v25;
  v30 = (void *)sub_1A43AB620();
  v51 = sub_1A4283964;
  v52 = v26;
  aBlock = MEMORY[0x1E0C809B0];
  v48 = 1107296256;
  v49 = sub_1A4282B78;
  v50 = &block_descriptor_12;
  v31 = _Block_copy(&aBlock);
  v32 = objc_msgSend(v27, sel_initWithName_queue_block_, v30, v29, v31);

  _Block_release(v31);
  swift_release();
  v33 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer;
  v34 = *(void **)&v28[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer];
  *(_QWORD *)&v28[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer] = v32;

  v35 = *(void **)&v28[v33];
  if (v35)
    objc_msgSend(v35, sel_scheduleWithTimeInterval_repeatAfter_leeway_, *(double *)&v28[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__delay], a5, 0.0);
  v36 = objc_msgSend(v28, sel_description);
  v37 = sub_1A43AB62C();
  v39 = v38;

  v40 = (uint64_t *)&v28[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_uniqueName];
  swift_beginAccess();
  *v40 = v37;
  v40[1] = v39;
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t type metadata accessor for MapsSuggestionsEventStreamer()
{
  return objc_opt_self();
}

uint64_t sub_1A4283940()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A4283964()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0xF0))();
}

uint64_t MapsSuggestionsEventStreamer.broadcastEvent(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  void *v24;
  uint64_t v25;
  char *v26;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v30 = sub_1A43AB59C();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v29 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB5C0();
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A43AB44C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v28 - v14;
  v28[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, a1, v9);
  v17(v13, a2, v9);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v11 + v18 + v19) & ~v18;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v16;
  v22 = v21 + v19;
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v23(v22, v15, v9);
  v23(v21 + v20, v13, v9);
  aBlock[4] = sub_1A42844B4;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_21;
  v24 = _Block_copy(aBlock);
  swift_retain();
  sub_1A43AB5B4();
  v34 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  v26 = v29;
  v25 = v30;
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v8, v26, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  swift_release();
  return swift_release();
}

uint64_t sub_1A4283CEC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A4283D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void *v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  char *v59;
  void *v60;
  void *v61;
  id v62;
  char *v63;
  id v64;
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD aBlock[6];

  v6 = sub_1A43AB44C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v65 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v65 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v69 = (char *)&v65 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v65 - v19;
  swift_beginAccess();
  v21 = MEMORY[0x1A859D360](a1 + 16);
  if (v21)
  {
    v22 = (char *)v21;
    if ((sub_1A43AB3F8() & 1) != 0)
    {
      v23 = MapsSuggestionsNow();
      v68 = v20;
      v24 = v23;
      sub_1A43AB428();

      v25 = v68;
      if ((sub_1A43AB3F8() & 1) != 0)
      {
        if (qword_1ED22EA30 != -1)
          swift_once();
        v26 = sub_1A43AB584();
        __swift_project_value_buffer(v26, (uint64_t)qword_1ED22ED98);
        v27 = sub_1A43AB56C();
        v28 = sub_1A43AB71C();
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v29 = 0;
          _os_log_impl(&dword_1A427D000, v27, v28, "Event is in the past. Nothing to do, returning.", v29, 2u);
          MEMORY[0x1A859D2B8](v29, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v68, v6);
      }
      else
      {
        v65 = v22;
        v38 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
        v67 = v6;
        v38(v69, a2, v6);
        v39 = v67;
        v40 = v25;
        v41 = sub_1A43AB3F8();
        v38(v16, a3, v39);
        v66 = v38;
        v38(v13, (uint64_t)v40, v39);
        if ((v41 & 1) != 0)
        {
          v42 = sub_1A43AB3EC();
          v43 = *(void (**)(char *, uint64_t))(v7 + 8);
          v43(v13, v39);
          v43(v16, v39);
          v44 = v65;
          if ((v42 & 1) != 0)
          {
            if (qword_1ED22EA30 != -1)
              swift_once();
            v45 = sub_1A43AB584();
            __swift_project_value_buffer(v45, (uint64_t)qword_1ED22ED98);
            v46 = sub_1A43AB56C();
            v47 = sub_1A43AB71C();
            if (os_log_type_enabled(v46, v47))
            {
              v48 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v48 = 0;
              _os_log_impl(&dword_1A427D000, v46, v47, "Event is ongoing, resetting start date to now", v48, 2u);
              MEMORY[0x1A859D2B8](v48, -1, -1);
            }

            v49 = v69;
            v50 = v67;
            v43(v69, v67);
            v51 = v49;
            v39 = v50;
            v52 = v50;
            v53 = v66;
            v66(v51, (uint64_t)v68, v52);
          }
          else
          {
            v53 = v66;
          }
        }
        else
        {
          v43 = *(void (**)(char *, uint64_t))(v7 + 8);
          v43(v13, v39);
          v43(v16, v39);
          v44 = v65;
          v53 = v66;
        }
        v54 = *(void **)&v44[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
        v53(v10, a3, v39);
        v55 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v56 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v56 + v55, v10, v39);
        *(_QWORD *)(v56 + ((v8 + v55 + 7) & 0xFFFFFFFFFFFFFFF8)) = v44;
        v57 = objc_allocWithZone((Class)type metadata accessor for TimerClass());
        v58 = v54;
        v59 = v44;
        v60 = (void *)sub_1A43AB620();
        aBlock[4] = sub_1A4289FA8;
        aBlock[5] = v56;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1A4282DE4;
        aBlock[3] = &block_descriptor_137;
        v61 = _Block_copy(aBlock);
        v62 = objc_msgSend(v57, sel_initWithName_queue_timerReturningBlock_, v60, v58, v61);

        _Block_release(v61);
        swift_release();
        objc_msgSend(v62, sel_scheduleWithTimeInterval_repeatAfter_leeway_, *(double *)&v59[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__delay], *(double *)&v59[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_pingInterval], 0.0);
        v63 = &v59[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__notifyTimers];
        swift_beginAccess();
        v64 = v62;
        MEMORY[0x1A859C574]();
        if (*(_QWORD *)((*(_QWORD *)v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v63 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
          sub_1A43AB6BC();
        sub_1A43AB6D4();
        sub_1A43AB6B0();
        swift_endAccess();

        v43(v69, v39);
        v43(v68, v39);
      }
    }
    else
    {
      if (qword_1ED22EA30 != -1)
        swift_once();
      v34 = sub_1A43AB584();
      __swift_project_value_buffer(v34, (uint64_t)qword_1ED22ED98);
      v35 = sub_1A43AB56C();
      v36 = sub_1A43AB728();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_1A427D000, v35, v36, "from > to. Not good.", v37, 2u);
        MEMORY[0x1A859D2B8](v37, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (qword_1ED22EA30 != -1)
      swift_once();
    v30 = sub_1A43AB584();
    __swift_project_value_buffer(v30, (uint64_t)qword_1ED22ED98);
    v31 = sub_1A43AB56C();
    v32 = sub_1A43AB728();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1A427D000, v31, v32, "self became nil. Returning, and not invalidating timers", v33, 2u);
      MEMORY[0x1A859D2B8](v33, -1, -1);
    }

  }
}

uint64_t sub_1A4284420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = sub_1A43AB44C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

void sub_1A42844B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(sub_1A43AB44C() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  sub_1A4283D10(*(_QWORD *)(v0 + 16), v0 + ((v2 + 24) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 24) & ~v2)) & ~v2));
}

uint64_t sub_1A42844F8(void *a1, NSObject *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  double v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  os_log_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  double v61;
  double v62;
  uint64_t v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  id v69;
  char *v70;
  char *v71;
  char *v72;
  os_log_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a1;
  v5 = sub_1A43AB44C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v70 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v67 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v67 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v76 = (char *)&v67 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v67 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v67 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v67 - v23;
  v25 = MapsSuggestionsNow();
  sub_1A43AB428();

  v73 = a2;
  sub_1A43AB3C8();
  v74 = a3;
  v75 = v19;
  v26 = *(double *)&a3[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_pingInterval];
  if (v27 < v26)
  {
    if (qword_1ED22EA30 != -1)
      swift_once();
    v28 = sub_1A43AB584();
    __swift_project_value_buffer(v28, (uint64_t)qword_1ED22ED98);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v22, v24, v5);
    v29 = sub_1A43AB56C();
    v30 = v6;
    v31 = sub_1A43AB71C();
    if (os_log_type_enabled(v29, v31))
    {
      v68 = v30;
      v32 = swift_slowAlloc();
      v71 = v14;
      v33 = (uint8_t *)v32;
      v34 = swift_slowAlloc();
      v72 = v11;
      v35 = v34;
      v78 = v34;
      *(_DWORD *)v33 = 136315138;
      v67 = v33 + 4;
      sub_1A4289FF8(&qword_1EE7149B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v36 = sub_1A43AB8FC();
      v77 = sub_1A4281D00(v36, v37, &v78);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease();
      v30 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v22, v5);
      _os_log_impl(&dword_1A427D000, v29, v31, "Event has ended. Canceling timer. Broadcasting notification for the last time. %s", v33, 0xCu);
      swift_arrayDestroy();
      v38 = v35;
      v11 = v72;
      MEMORY[0x1A859D2B8](v38, -1, -1);
      v39 = v33;
      v14 = v71;
      MEMORY[0x1A859D2B8](v39, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v5);
    }

    v6 = v30;
    objc_msgSend(v69, sel_unschedule);
    v19 = v75;
  }
  if (qword_1ED22EA30 != -1)
    swift_once();
  v40 = sub_1A43AB584();
  __swift_project_value_buffer(v40, (uint64_t)qword_1ED22ED98);
  v41 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v41(v19, v24, v5);
  v42 = v73;
  v41(v76, (char *)v73, v5);
  v41(v14, (char *)v42, v5);
  v41(v11, v24, v5);
  v43 = v6;
  v44 = v74;
  v45 = sub_1A43AB56C();
  v46 = sub_1A43AB71C();
  if (!os_log_type_enabled(v45, (os_log_type_t)v46))
  {
    v54 = *(void (**)(char *, uint64_t))(v43 + 8);
    v54(v14, v5);
    v54(v11, v5);

    v54(v19, v5);
    v54(v76, v5);

    goto LABEL_16;
  }
  LODWORD(v69) = v46;
  v73 = v45;
  v74 = v24;
  v47 = swift_slowAlloc();
  v68 = swift_slowAlloc();
  v78 = v68;
  *(_DWORD *)v47 = 136315906;
  v72 = v11;
  v48 = *(_QWORD *)&v44[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_notificationName];
  v49 = *(_QWORD *)&v44[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer_notificationName + 8];
  swift_bridgeObjectRetain();
  v77 = sub_1A4281D00(v48, v49, &v78);
  sub_1A43AB7DC();
  swift_bridgeObjectRelease();
  *(_WORD *)(v47 + 12) = 2080;
  v50 = v70;
  sub_1A43AB404();
  sub_1A4289FF8(&qword_1EE7149B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
  v71 = v14;
  v51 = sub_1A43AB8FC();
  v53 = v52;
  v54 = *(void (**)(char *, uint64_t))(v43 + 8);
  v54(v50, v5);
  v77 = sub_1A4281D00(v51, v53, &v78);
  v55 = v72;
  sub_1A43AB7DC();

  swift_bridgeObjectRelease();
  v54(v75, v5);

  *(_WORD *)(v47 + 22) = 2080;
  v56 = v76;
  v57 = v71;
  v58 = sub_1A43AB8FC();
  v77 = sub_1A4281D00(v58, v59, &v78);
  sub_1A43AB7DC();
  swift_bridgeObjectRelease();
  v54(v56, v5);
  *(_WORD *)(v47 + 32) = 2048;
  result = sub_1A43AB3C8();
  v62 = v61 / v26;
  if ((~*(_QWORD *)&v62 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v62 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v62 < 9.22337204e18)
  {
    v63 = (uint64_t)v62;
    v54(v57, v5);
    v54(v55, v5);

    v77 = v63;
    sub_1A43AB7DC();

    v64 = v73;
    _os_log_impl(&dword_1A427D000, v73, (os_log_type_t)v69, "Posting: %s. Next one around: %s. Will stream until: %s. Possible notifications left: %ld", (uint8_t *)v47, 0x2Au);
    v65 = v68;
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v65, -1, -1);
    MEMORY[0x1A859D2B8](v47, -1, -1);

    v24 = v74;
LABEL_16:
    v66 = sub_1A43AB644();
    notify_post((const char *)(v66 + 32));
    v54(v24, v5);
    return swift_release();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1A4284C2C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1A4284C58(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A859D234](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall MapsSuggestionsEventStreamer.rescan()()
{
  sub_1A4284E78((uint64_t)sub_1A4284E20, (uint64_t)&block_descriptor_25);
}

void sub_1A4284D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (v2)
  {
    v3 = (void *)v2;
    MapsSuggestionsEventStreamer.invalidateAllTimers()();

  }
  swift_beginAccess();
  v4 = (_QWORD *)MEMORY[0x1A859D360](v1);
  if (v4)
  {
    v5 = v4;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xF0))();

  }
}

void sub_1A4284E20()
{
  uint64_t v0;

  sub_1A4284D8C(v0);
}

Swift::Void __swiftcall MapsSuggestionsEventStreamer.invalidateAllTimers()()
{
  sub_1A4284E78((uint64_t)sub_1A428533C, (uint64_t)&block_descriptor_29);
}

uint64_t sub_1A4284E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v5 = v2;
  v6 = sub_1A43AB59C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A43AB5C0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(v5 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a1;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = a2;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1A43AB5B4();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

void sub_1A428507C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (!v2)
  {
    if (qword_1ED22EA30 != -1)
      swift_once();
    v11 = sub_1A43AB584();
    __swift_project_value_buffer(v11, (uint64_t)qword_1ED22ED98);
    v12 = sub_1A43AB56C();
    v13 = sub_1A43AB728();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1A427D000, v12, v13, "self became nil. Returning, and not invalidating timers", v14, 2u);
      MEMORY[0x1A859D2B8](v14, -1, -1);
    }

    return;
  }
  v3 = (char *)v2;
  if (qword_1ED22EA30 != -1)
    swift_once();
  v4 = sub_1A43AB584();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED22ED98);
  v5 = sub_1A43AB56C();
  v6 = sub_1A43AB71C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A427D000, v5, v6, "Inside _invalidateAllTimers.", v7, 2u);
    MEMORY[0x1A859D2B8](v7, -1, -1);
  }

  v8 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer;
  v9 = *(void **)&v3[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__scanTimer];
  if (v9)
  {
    objc_msgSend(v9, sel_unschedule);
    v10 = *(void **)&v3[v8];
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)&v3[v8] = 0;

  v15 = &v3[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__notifyTimers];
  swift_beginAccess();
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = sub_1A43AB8B4();
    if (v17)
      goto LABEL_16;
LABEL_23:
    swift_bridgeObjectRelease();
    *(_QWORD *)v15 = MEMORY[0x1E0DEE9D8];

    swift_bridgeObjectRelease();
    return;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17)
    goto LABEL_23;
LABEL_16:
  if (v17 >= 1)
  {
    for (i = 0; i != v17; ++i)
    {
      if ((v16 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x1A859C73C](i, v16);
      else
        v19 = *(id *)(v16 + 8 * i + 32);
      v20 = v19;
      objc_msgSend(v19, sel_unschedule);

    }
    goto LABEL_23;
  }
  __break(1u);
}

void sub_1A428533C()
{
  uint64_t v0;

  sub_1A428507C(v0);
}

id MapsSuggestionsEventStreamer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  MapsSuggestionsEventStreamer.invalidateAllTimers()();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsEventStreamer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id MapsSuggestionsEventStreamer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsEventStreamer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t MapsSuggestionsFakeStreamer.callBackBlock.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_callBackBlock);
  swift_beginAccess();
  v2 = *v1;
  sub_1A42855E0(*v1);
  return v2;
}

uint64_t sub_1A42855E0(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t MapsSuggestionsFakeStreamer.callBackBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_callBackBlock);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return sub_1A42856E0(v6);
}

uint64_t sub_1A42856E0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t (*MapsSuggestionsFakeStreamer.callBackBlock.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

char *MapsSuggestionsFakeStreamer.__allocating_init(lookAheadPeriod:pingInterval:notificationName:callBackBlock:simpleCallBack:tenSecondEvent:alreadyStartedEvent:doubleEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8, double a9, double a10)
{
  objc_class *v10;
  id v21;
  char *v22;

  v21 = objc_allocWithZone(v10);
  v22 = sub_1A4289868(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_1A42856E0(a3);
  return v22;
}

char *MapsSuggestionsFakeStreamer.init(lookAheadPeriod:pingInterval:notificationName:callBackBlock:simpleCallBack:tenSecondEvent:alreadyStartedEvent:doubleEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8, double a9, double a10)
{
  char *v11;

  v11 = sub_1A4289868(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_1A42856E0(a3);
  return v11;
}

Swift::Void __swiftcall MapsSuggestionsFakeStreamer.scanForStreamableEvents()()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  void (*v74)(_QWORD *);
  unsigned int v75;
  _BYTE *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t aBlock;
  uint64_t v101;
  uint64_t (*v102)();
  void *v103;
  uint64_t (*v104)();
  uint64_t v105;

  v1 = v0;
  v96 = sub_1A43AB590();
  v93 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v95 = (void (**)(char *, uint64_t))((char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_1A43AB59C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v97 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1A43AB5C0();
  v6 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1A43AB5D8();
  v9 = *(_QWORD *)(v98 - 8);
  v10 = MEMORY[0x1E0C80A78](v98);
  v94 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v71 - v12;
  v14 = sub_1A43AB44C();
  v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v16 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v71 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  if (v1[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_simpleCallBack] == 1)
  {
    v24 = (void (**)(uint64_t))&v1[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_callBackBlock];
    swift_beginAccess();
    v25 = *v24;
    if (*v24)
    {
      v26 = swift_retain();
      v25(v26);
      sub_1A42856E0((uint64_t)v25);
    }
    else
    {
      __break(1u);
    }
    return;
  }
  if (v1[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_tenSecondEvent] == 1)
  {
    v27 = v23;
    v28 = v21;
    v29 = (char *)&v71 - v22;
    sub_1A43AB440();
    sub_1A43AB404();
LABEL_8:
    sub_1A43AB404();
    MapsSuggestionsEventStreamer.broadcastEvent(from:to:)((uint64_t)v20, (uint64_t)v17);
    v30 = *(void (**)(char *, uint64_t))(v27 + 8);
    v30(v17, v28);
    v30(v20, v28);
    v30(v29, v28);
    return;
  }
  if (v1[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_alreadyStartedEvent] == 1)
  {
    v27 = v23;
    v28 = v21;
    v29 = (char *)&v71 - v22;
    sub_1A43AB440();
    sub_1A43AB410();
    goto LABEL_8;
  }
  if (v1[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_doubleEvent] == 1)
  {
    v90 = v23;
    v92 = v21;
    v31 = (char *)&v71 - v22;
    v88 = (char *)&v71 - v22;
    sub_1A43AB440();
    v83 = sub_1A4289D70(0, (unint64_t *)&qword_1ED22ED00);
    v91 = v3;
    v79 = (void (*)(_QWORD, _QWORD))sub_1A43AB770();
    v77 = v13;
    sub_1A43AB5CC();
    v72 = v8;
    sub_1A43AB5A8();
    v32 = v90;
    v89 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v33 = v92;
    v89(v20, v31, v92);
    v34 = *(unsigned __int8 *)(v32 + 80);
    v35 = v32;
    v86 = ((v34 + 24) & ~v34) + v15;
    v36 = (v34 + 24) & ~v34;
    v87 = v36;
    v85 = v34 | 7;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = v1;
    v84 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    v84(v37 + v36, v20, v33);
    v104 = sub_1A428999C;
    v105 = v37;
    aBlock = MEMORY[0x1E0C809B0];
    v101 = 1107296256;
    v102 = sub_1A4282B78;
    v103 = &block_descriptor_35_0;
    v38 = _Block_copy(&aBlock);
    v76 = v1;
    swift_release();
    aBlock = MEMORY[0x1E0DEE9D8];
    v82 = sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
    v80 = sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
    v39 = v97;
    v40 = v91;
    sub_1A43AB80C();
    v41 = v77;
    v42 = v72;
    v43 = v79;
    MEMORY[0x1A859C64C](v77, v72, v39, v38);
    _Block_release(v38);

    v78 = *(void (**)(char *, uint64_t))(v4 + 8);
    v78(v39, v40);
    v79 = *(void (**)(_QWORD, _QWORD))(v6 + 8);
    v44 = v42;
    v79(v42, v99);
    v45 = *(void (**)(char *, uint64_t))(v9 + 8);
    v46 = v98;
    v45(v41, v98);
    v47 = v45;
    v71 = v45;
    v73 = sub_1A43AB770();
    v48 = v94;
    sub_1A43AB5CC();
    v49 = v95;
    *v95 = 100;
    v75 = *MEMORY[0x1E0DEF490];
    v50 = v93;
    v74 = *(void (**)(_QWORD *))(v93 + 104);
    v51 = v96;
    v74(v49);
    MEMORY[0x1A859C4E4](v48, v49);
    v93 = *(_QWORD *)(v50 + 8);
    ((void (*)(_QWORD *, uint64_t))v93)(v49, v51);
    v47(v48, v46);
    v52 = v44;
    sub_1A43AB5A8();
    v53 = v92;
    v89(v20, v88, v92);
    v54 = swift_allocObject();
    v55 = v76;
    *(_QWORD *)(v54 + 16) = v76;
    v84(v54 + v87, v20, v53);
    v104 = sub_1A42899BC;
    v105 = v54;
    aBlock = MEMORY[0x1E0C809B0];
    v101 = 1107296256;
    v102 = sub_1A4282B78;
    v103 = &block_descriptor_41;
    v56 = _Block_copy(&aBlock);
    v76 = v55;
    swift_release();
    aBlock = MEMORY[0x1E0DEE9D8];
    v57 = v91;
    sub_1A43AB80C();
    v58 = v77;
    v59 = (void *)v73;
    MEMORY[0x1A859C64C](v77, v52, v39, v56);
    _Block_release(v56);

    v78(v39, v57);
    v79(v52, v99);
    v60 = v98;
    v61 = v71;
    v71(v58, v98);
    v83 = sub_1A43AB770();
    sub_1A43AB5CC();
    *v49 = 100;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v74)(v49, v75, v51);
    MEMORY[0x1A859C4E4](v48, v49);
    ((void (*)(_QWORD *, uint64_t))v93)(v49, v51);
    v61(v48, v60);
    v62 = v61;
    sub_1A43AB5A8();
    v63 = v88;
    v64 = v92;
    v89(v20, v88, v92);
    v65 = swift_allocObject();
    v66 = v76;
    *(_QWORD *)(v65 + 16) = v76;
    v84(v65 + v87, v20, v64);
    v104 = sub_1A4289AB8;
    v105 = v65;
    aBlock = MEMORY[0x1E0C809B0];
    v101 = 1107296256;
    v102 = sub_1A4282B78;
    v103 = &block_descriptor_47;
    v67 = _Block_copy(&aBlock);
    v68 = v66;
    swift_release();
    aBlock = MEMORY[0x1E0DEE9D8];
    v69 = v91;
    sub_1A43AB80C();
    v70 = (void *)v83;
    MEMORY[0x1A859C64C](v58, v52, v39, v67);
    _Block_release(v67);

    v78(v39, v69);
    v79(v52, v99);
    v62(v58, v98);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v64);
  }
}

uint64_t sub_1A42862D0(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, double), void (*a6)(uint64_t, double))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v11 = sub_1A43AB44C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v20 - v16;
  a5(a4, a1);
  a6(a4, a2);
  MapsSuggestionsEventStreamer.broadcastEvent(from:to:)((uint64_t)v17, (uint64_t)v15);
  v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, v11);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, v11);
}

void MapsSuggestionsFakeStreamer.__allocating_init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

void MapsSuggestionsFakeStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

uint64_t sub_1A4286438()
{
  uint64_t v0;

  return sub_1A42856E0(*(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_callBackBlock));
}

id MapsSuggestionsFakeStreamer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *MapsSuggestionsWalletStreamer.__allocating_init(resourceDepot:notificationName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return MapsSuggestionsWalletStreamer.init(resourceDepot:notificationName:)(a1, a2, a3);
}

char *MapsSuggestionsWalletStreamer.init(resourceDepot:notificationName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v7;
  char *v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  void *v46;
  uint64_t v47;

  *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet] = 0;
  v7 = &v3[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__keyListenerBlock];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v8 = &v3[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitObserver];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitChangedCanKicker] = 0;
  v9 = v3;
  GEOConfigGetDouble();
  v11 = v10;
  GEOConfigGetDouble();
  v13 = v12;
  GEOConfigGetDouble();
  v15 = v14;
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__resourceDepot] = a1;
  v44 = 0u;
  v45 = 0u;
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_1A4289AD0((uint64_t)&v44, (uint64_t)v7);
  swift_endAccess();

  v16 = MapsSuggestionsEventStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(a2, a3, 0xD00000000000001DLL, 0x80000001A43B2D30, v11, v13);
  v17 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue;
  v18 = *(void **)&v16[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
  v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v20 = objc_allocWithZone((Class)MapsSuggestionsCanKicker);
  v21 = v16;
  v22 = v18;
  swift_retain();
  v23 = (void *)sub_1A43AB620();
  v46 = sub_1A4289B18;
  v47 = v19;
  v24 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v44 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v44 + 1) = 1107296256;
  *(_QWORD *)&v45 = sub_1A4282B78;
  *((_QWORD *)&v45 + 1) = &block_descriptor_53;
  v25 = _Block_copy(&v44);
  v26 = objc_msgSend(v20, sel_initWithName_time_queue_block_, v23, v22, v25, v15);

  _Block_release(v25);
  swift_release();
  swift_release();
  v27 = *(void **)&v21[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitChangedCanKicker];
  *(_QWORD *)&v21[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitChangedCanKicker] = v26;

  v28 = *(void **)&v16[v17];
  v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v46 = sub_1A4289B30;
  v47 = v29;
  *(_QWORD *)&v44 = v24;
  *((_QWORD *)&v44 + 1) = 1107296256;
  *(_QWORD *)&v45 = sub_1A42869CC;
  *((_QWORD *)&v45 + 1) = &block_descriptor_57;
  v30 = _Block_copy(&v44);
  v31 = v28;
  swift_release();
  v32 = (id)_GEOConfigAddBlockListenerForKey();
  _Block_release(v30);

  sub_1A43AB800();
  swift_unknownObjectRelease();
  v33 = (uint64_t)&v21[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__keyListenerBlock];
  swift_beginAccess();
  sub_1A4289AD0((uint64_t)&v44, v33);
  swift_endAccess();
  sub_1A43AB62C();
  v34 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v36 = (void *)objc_opt_self();
  v37 = v34;
  v38 = objc_msgSend(v36, sel_sharedInstance);
  v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v46 = sub_1A4289B50;
  v47 = v39;
  *(_QWORD *)&v44 = v24;
  *((_QWORD *)&v44 + 1) = 1107296256;
  *(_QWORD *)&v45 = sub_1A4286A14;
  *((_QWORD *)&v45 + 1) = &block_descriptor_61;
  v40 = _Block_copy(&v44);
  swift_release();
  v41 = objc_msgSend(v35, sel_addObserverForName_object_queue_usingBlock_, v37, v38, 0, v40);
  _Block_release(v40);

  *((_QWORD *)&v45 + 1) = swift_getObjectType();
  swift_unknownObjectRelease();
  *(_QWORD *)&v44 = v41;
  v42 = (uint64_t)&v21[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitObserver];
  swift_beginAccess();
  sub_1A4289AD0((uint64_t)&v44, v42);
  swift_endAccess();
  return v21;
}

uint64_t sub_1A42869CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_1A4286A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = sub_1A43AB380();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  sub_1A43AB374();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1A4286AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *ObjCClassFromMetadata;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = sub_1A43AB5E4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = sub_1A43AB5FC();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  v7 = OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet))
  {
    sub_1A4289D70(0, &qword_1ED22EA48);
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__resourceDepot);
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    swift_unknownObjectRetain();
    v10 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initFromResourceDepot_, v8);
    swift_unknownObjectRelease();
    v11 = *(void **)(v0 + v7);
    *(_QWORD *)(v0 + v7) = v10;

  }
  if (qword_1ED22EA30 != -1)
    goto LABEL_9;
LABEL_5:
  v12 = sub_1A43AB584();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED22ED98);
  v13 = sub_1A43AB56C();
  v14 = sub_1A43AB71C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A427D000, v13, v14, "Setup Wallet.", v15, 2u);
    MEMORY[0x1A859D2B8](v15, -1, -1);
  }

}

Swift::Void __swiftcall MapsSuggestionsWalletStreamer.scanForStreamableEvents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  Class isa;
  NSObject *v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v1 = sub_1A43AB59C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A43AB5C0();
  isa = v5[-1].isa;
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A43AB44C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v29 - v13;
  if ((GEOConfigGetBOOL() & 1) != 0)
  {
    v15 = MapsSuggestionsNow();
    v31 = v4;
    v16 = v15;
    sub_1A43AB428();

    v32 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
    v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v18 = *(unsigned __int8 *)(v9 + 80);
    v30 = v2;
    v19 = v1;
    v20 = (v18 + 24) & ~v18;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v17;
    v29[1] = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v12, v8);
    aBlock[4] = sub_1A4289B7C;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A4282B78;
    aBlock[3] = &block_descriptor_68;
    v22 = _Block_copy(aBlock);
    swift_retain();
    sub_1A43AB5B4();
    v35 = MEMORY[0x1E0DEE9D8];
    sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
    sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
    v23 = v8;
    v24 = v7;
    v25 = v31;
    sub_1A43AB80C();
    MEMORY[0x1A859C67C](0, v24, v25, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v19);
    (*((void (**)(char *, NSObject *))isa + 1))(v24, v34);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v23);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1ED22EA30 != -1)
      swift_once();
    v26 = sub_1A43AB584();
    __swift_project_value_buffer(v26, (uint64_t)qword_1ED22ED98);
    v34 = sub_1A43AB56C();
    v27 = sub_1A43AB71C();
    if (os_log_type_enabled(v34, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1A427D000, v34, v27, "Returning early because the WalletStreamer is turned off", v28, 2u);
      MEMORY[0x1A859D2B8](v28, -1, -1);
    }

  }
}

void sub_1A42870EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  dispatch_semaphore_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  uint8_t *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, void *);
  void *v47;
  void *v48;
  uint64_t v49;

  v2 = sub_1A43AB59C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB5C0();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A43AB44C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = MEMORY[0x1A859D360](a1 + 16);
  if (v13)
  {
    v14 = (char *)v13;
    v40 = v3;
    sub_1A4286AC4();
    v15 = *(void **)&v14[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet];
    if (v15)
    {
      v37 = v5;
      v39 = v2;
      v16 = v15;
      v17 = dispatch_semaphore_create(0);
      sub_1A43AB3D4();
      v18 = (void *)sub_1A43AB3E0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v17;
      *(_QWORD *)(v19 + 24) = a1;
      v48 = sub_1A4289EA4;
      v49 = v19;
      v20 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v45 = 1107296256;
      v46 = sub_1A4291EF4;
      v47 = &block_descriptor_128;
      v21 = _Block_copy(&aBlock);
      v22 = v17;
      swift_retain();
      swift_release();
      v38 = v16;
      objc_msgSend(v16, sel_entriesFromPassesBefore_handler_, v18, v21);
      _Block_release(v21);

      if (qword_1ED22EA30 != -1)
        swift_once();
      v23 = sub_1A43AB584();
      __swift_project_value_buffer(v23, (uint64_t)qword_1ED22ED98);
      v24 = sub_1A43AB56C();
      v25 = sub_1A43AB71C();
      v26 = os_log_type_enabled(v24, v25);
      v27 = v37;
      if (v26)
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1A427D000, v24, v25, "Waiting to tear down Wallet.", v28, 2u);
        MEMORY[0x1A859D2B8](v28, -1, -1);
      }

      sub_1A43AB7A0();
      v29 = *(void **)&v14[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
      v48 = sub_1A4289ECC;
      v49 = a1;
      aBlock = v20;
      v45 = 1107296256;
      v46 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_1A4282B78;
      v47 = &block_descriptor_131;
      v30 = _Block_copy(&aBlock);
      swift_retain();
      v31 = v29;
      sub_1A43AB5B4();
      v43 = MEMORY[0x1E0DEE9D8];
      sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
      sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
      v32 = v39;
      sub_1A43AB80C();
      MEMORY[0x1A859C67C](0, v8, v27, v30);
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v32);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
      swift_release();
    }
    else
    {
      if (qword_1ED22EA30 != -1)
        swift_once();
      v33 = sub_1A43AB584();
      __swift_project_value_buffer(v33, (uint64_t)qword_1ED22ED98);
      v34 = sub_1A43AB56C();
      v35 = sub_1A43AB734();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_1A427D000, v34, v35, "This SHOULD NOT happen. Just initialized _wallet. How can it be nil?", v36, 2u);
        MEMORY[0x1A859D2B8](v36, -1, -1);

      }
      else
      {

      }
    }
  }
}

void sub_1A42875BC(uint64_t a1, _QWORD *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1A859D360](v5);
  if (v6)
  {
    v7 = (void *)v6;
    sub_1A4288340(a2, a3);

  }
}

void sub_1A4287658()
{
  uint64_t v0;

  sub_1A4289E38(v0 + OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__keyListenerBlock, (uint64_t *)&unk_1ED22EA38);
  swift_unknownObjectRelease();
  sub_1A4289E38(v0 + OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitObserver, (uint64_t *)&unk_1ED22EA38);

}

id MapsSuggestionsWalletStreamer.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  objc_super v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(void **)&v0[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitChangedCanKicker];
  if (v2)
    objc_msgSend(v2, sel_cancel);
  sub_1A4288340(&OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet, "Tore down Wallet.");
  v3 = (uint64_t)&v0[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__keyListenerBlock];
  swift_beginAccess();
  sub_1A4289BC8(v3, (uint64_t)&v8);
  if (v9)
  {
    sub_1A4289C10(&v8, &v10);
    __swift_project_boxed_opaque_existential_0(&v10, v11);
    sub_1A43AB914();
    GEOConfigRemoveBlockListener();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
  }
  else
  {
    sub_1A4289E38((uint64_t)&v8, (uint64_t *)&unk_1ED22EA38);
  }
  v4 = (uint64_t)&v0[OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitObserver];
  swift_beginAccess();
  sub_1A4289BC8(v4, (uint64_t)&v8);
  if (v9)
  {
    sub_1A4289C10(&v8, &v10);
    v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    __swift_project_boxed_opaque_existential_0(&v10, v11);
    objc_msgSend(v5, sel_removeObserver_, sub_1A43AB914());

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
  }
  else
  {
    sub_1A4289E38((uint64_t)&v8, (uint64_t *)&unk_1ED22EA38);
  }
  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void MapsSuggestionsWalletStreamer.__allocating_init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

void MapsSuggestionsWalletStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

char *MapsSuggestionsEventKitStreamer.__allocating_init(resourceDepot:notificationName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return MapsSuggestionsEventKitStreamer.init(resourceDepot:notificationName:)(a1, a2, a3);
}

char *MapsSuggestionsEventKitStreamer.init(resourceDepot:notificationName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v7;
  char *v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  __int128 v41;
  __int128 v42;
  void *v43;
  uint64_t v44;

  *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit] = 0;
  v7 = &v3[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__keyListenerBlock];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v8 = &v3[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitObserver];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitChangedCanKicker] = 0;
  v9 = v3;
  GEOConfigGetDouble();
  v11 = v10;
  GEOConfigGetDouble();
  v13 = v12;
  GEOConfigGetDouble();
  v15 = v14;
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__resourceDepot] = a1;
  v41 = 0u;
  v42 = 0u;
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_1A4289AD0((uint64_t)&v41, (uint64_t)v7);
  swift_endAccess();

  v16 = MapsSuggestionsEventStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(a2, a3, 0xD00000000000001FLL, 0x80000001A43B2D50, v11, v13);
  v17 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue;
  v18 = *(void **)&v16[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
  v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v20 = objc_allocWithZone((Class)MapsSuggestionsCanKicker);
  v21 = v16;
  v22 = v18;
  swift_retain();
  v23 = (void *)sub_1A43AB620();
  v43 = sub_1A4289B18;
  v44 = v19;
  v24 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v41 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v41 + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_1A4282B78;
  *((_QWORD *)&v42 + 1) = &block_descriptor_74;
  v25 = _Block_copy(&v41);
  v26 = objc_msgSend(v20, sel_initWithName_time_queue_block_, v23, v22, v25, v15);

  _Block_release(v25);
  swift_release();
  swift_release();
  v27 = *(void **)&v21[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitChangedCanKicker];
  *(_QWORD *)&v21[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitChangedCanKicker] = v26;

  v28 = *(void **)&v16[v17];
  v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v43 = sub_1A4289C44;
  v44 = v29;
  *(_QWORD *)&v41 = v24;
  *((_QWORD *)&v41 + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_1A42869CC;
  *((_QWORD *)&v42 + 1) = &block_descriptor_78;
  v30 = _Block_copy(&v41);
  v31 = v28;
  swift_release();
  v32 = (id)_GEOConfigAddBlockListenerForKey();
  _Block_release(v30);

  sub_1A43AB800();
  swift_unknownObjectRelease();
  v33 = (uint64_t)&v21[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__keyListenerBlock];
  swift_beginAccess();
  sub_1A4289AD0((uint64_t)&v41, v33);
  swift_endAccess();
  v34 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v35 = *MEMORY[0x1E0CA9F88];
  v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v43 = sub_1A4289C64;
  v44 = v36;
  *(_QWORD *)&v41 = v24;
  *((_QWORD *)&v41 + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_1A4286A14;
  *((_QWORD *)&v42 + 1) = &block_descriptor_82;
  v37 = _Block_copy(&v41);
  swift_release();
  v38 = objc_msgSend(v34, sel_addObserverForName_object_queue_usingBlock_, v35, 0, 0, v37);
  _Block_release(v37);

  *((_QWORD *)&v42 + 1) = swift_getObjectType();
  swift_unknownObjectRelease();
  *(_QWORD *)&v41 = v38;
  v39 = (uint64_t)&v21[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitObserver];
  swift_beginAccess();
  sub_1A4289AD0((uint64_t)&v41, v39);
  swift_endAccess();
  return v21;
}

void sub_1A4287E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (v2)
  {
    v3 = (void *)v2;
    MapsSuggestionsEventStreamer.rescan()();

  }
}

void sub_1A4287E90(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;

  v5 = a3 + 16;
  if (qword_1ED22EA30 != -1)
    swift_once();
  v6 = sub_1A43AB584();
  __swift_project_value_buffer(v6, (uint64_t)qword_1ED22ED98);
  v7 = sub_1A43AB56C();
  v8 = sub_1A43AB71C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1A427D000, v7, v8, a4, v9, 2u);
    MEMORY[0x1A859D2B8](v9, -1, -1);
  }

  swift_beginAccess();
  v10 = MEMORY[0x1A859D360](v5);
  if (v10)
  {
    v11 = (void *)v10;
    MapsSuggestionsEventStreamer.rescan()();

  }
}

void sub_1A4287F9C(uint64_t a1, uint64_t a2, const char *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1A859D360](v6);
  if (v7)
  {
    v8 = (char *)v7;
    if (qword_1ED22EA30 != -1)
      swift_once();
    v9 = sub_1A43AB584();
    __swift_project_value_buffer(v9, (uint64_t)qword_1ED22ED98);
    v10 = sub_1A43AB56C();
    v11 = sub_1A43AB71C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1A427D000, v10, v11, a3, v12, 2u);
      MEMORY[0x1A859D2B8](v12, -1, -1);
    }

    v13 = *(void **)&v8[*a4];
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v14, sel_kickCanBySameTime);

    }
  }
}

uint64_t sub_1A42880D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A43AB62C();
  v8 = v7;
  v9 = swift_unknownObjectRetain();
  return a5(v9, v6, v8);
}

void sub_1A4288134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *ObjCClassFromMetadata;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = sub_1A43AB5E4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = sub_1A43AB5FC();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  v7 = OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit))
  {
    sub_1A4289D70(0, (unint64_t *)&unk_1ED22EC80);
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__resourceDepot);
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    swift_unknownObjectRetain();
    v10 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initFromResourceDepot_, v8);
    swift_unknownObjectRelease();
    v11 = *(void **)(v0 + v7);
    *(_QWORD *)(v0 + v7) = v10;

  }
  if (qword_1ED22EA30 != -1)
    goto LABEL_9;
LABEL_5:
  v12 = sub_1A43AB584();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED22ED98);
  v13 = sub_1A43AB56C();
  v14 = sub_1A43AB71C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A427D000, v13, v14, "Setup EventKit.", v15, 2u);
    MEMORY[0x1A859D2B8](v15, -1, -1);
  }

}

void sub_1A4288340(_QWORD *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v5 = sub_1A43AB5E4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = sub_1A43AB5FC();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v11 = *(void **)(v2 + *a1);
    *(_QWORD *)(v2 + *a1) = 0;

    if (qword_1ED22EA30 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = sub_1A43AB584();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED22ED98);
  v13 = sub_1A43AB56C();
  v14 = sub_1A43AB71C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A427D000, v13, v14, a2, v15, 2u);
    MEMORY[0x1A859D2B8](v15, -1, -1);
  }

}

Swift::Void __swiftcall MapsSuggestionsEventKitStreamer.scanForStreamableEvents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  Class isa;
  NSObject *v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v1 = sub_1A43AB59C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A43AB5C0();
  isa = v5[-1].isa;
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A43AB44C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v29 - v13;
  if ((GEOConfigGetBOOL() & 1) != 0)
  {
    v15 = MapsSuggestionsNow();
    v31 = v4;
    v16 = v15;
    sub_1A43AB428();

    v32 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue);
    v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v18 = *(unsigned __int8 *)(v9 + 80);
    v30 = v2;
    v19 = v1;
    v20 = (v18 + 24) & ~v18;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v17;
    v29[1] = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v12, v8);
    aBlock[4] = sub_1A4289D04;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A4282B78;
    aBlock[3] = &block_descriptor_89;
    v22 = _Block_copy(aBlock);
    swift_retain();
    sub_1A43AB5B4();
    v35 = MEMORY[0x1E0DEE9D8];
    sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
    sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
    v23 = v8;
    v24 = v7;
    v25 = v31;
    sub_1A43AB80C();
    MEMORY[0x1A859C67C](0, v24, v25, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v19);
    (*((void (**)(char *, NSObject *))isa + 1))(v24, v34);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v23);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1ED22EA30 != -1)
      swift_once();
    v26 = sub_1A43AB584();
    __swift_project_value_buffer(v26, (uint64_t)qword_1ED22ED98);
    v34 = sub_1A43AB56C();
    v27 = sub_1A43AB71C();
    if (os_log_type_enabled(v34, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1A427D000, v34, v27, "Returning early because the EventKitStreamer is turned off", v28, 2u);
      MEMORY[0x1A859D2B8](v28, -1, -1);
    }

  }
}

void sub_1A42888DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  dispatch_semaphore_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  uint8_t *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, void *);
  void *v50;
  void *v51;
  uint64_t v52;

  v2 = sub_1A43AB59C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB5C0();
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A43AB44C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = MEMORY[0x1A859D360](a1 + 16);
  if (v13)
  {
    v14 = (char *)v13;
    v43 = v5;
    sub_1A4288134();
    v15 = *(void **)&v14[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit];
    if (v15)
    {
      v39 = v8;
      v41 = v3;
      v42 = v2;
      v16 = v15;
      v17 = dispatch_semaphore_create(0);
      v18 = (void *)sub_1A43AB3E0();
      sub_1A43AB3D4();
      v19 = (void *)sub_1A43AB3E0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v17;
      *(_QWORD *)(v20 + 24) = a1;
      v51 = sub_1A4289DE8;
      v52 = v20;
      v21 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v48 = 1107296256;
      v49 = sub_1A4291EF4;
      v50 = &block_descriptor_119;
      v22 = _Block_copy(&aBlock);
      v23 = v17;
      swift_retain();
      swift_release();
      v40 = v16;
      objc_msgSend(v16, sel_interestingFlightEventsFrom_to_handler_, v18, v19, v22);
      _Block_release(v22);

      if (qword_1ED22EA30 != -1)
        swift_once();
      v24 = sub_1A43AB584();
      __swift_project_value_buffer(v24, (uint64_t)qword_1ED22ED98);
      v25 = sub_1A43AB56C();
      v26 = sub_1A43AB71C();
      v27 = os_log_type_enabled(v25, v26);
      v28 = v39;
      if (v27)
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_1A427D000, v25, v26, "Waiting to tear down EventKit.", v29, 2u);
        MEMORY[0x1A859D2B8](v29, -1, -1);
      }

      sub_1A43AB7A0();
      v30 = *(void **)&v14[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsEventStreamer__queue];
      v51 = sub_1A4289E10;
      v52 = a1;
      aBlock = v21;
      v48 = 1107296256;
      v49 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_1A4282B78;
      v50 = &block_descriptor_122;
      v31 = _Block_copy(&aBlock);
      swift_retain();
      v32 = v30;
      sub_1A43AB5B4();
      v46 = MEMORY[0x1E0DEE9D8];
      sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
      sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
      v33 = v42;
      v34 = v43;
      sub_1A43AB80C();
      MEMORY[0x1A859C67C](0, v28, v34, v31);
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v33);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v45);
      swift_release();
    }
    else
    {
      if (qword_1ED22EA30 != -1)
        swift_once();
      v35 = sub_1A43AB584();
      __swift_project_value_buffer(v35, (uint64_t)qword_1ED22ED98);
      v36 = sub_1A43AB56C();
      v37 = sub_1A43AB734();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_1A427D000, v36, v37, "This SHOULD NOT happen. Just initialized _eventKit. How can it be nil?", v38, 2u);
        MEMORY[0x1A859D2B8](v38, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t sub_1A4288DBC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  id v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;

  v70 = a5;
  v72 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  v10 = MEMORY[0x1E0C80A78](v9);
  v74 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v70 - v12;
  v14 = sub_1A43AB44C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v17 = MEMORY[0x1E0C80A78](v16);
  v80 = (char *)&v70 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v70 - v19;
  if (a1)
  {
    v83 = a1;
    v78 = v13;
    v79 = (char *)&v70 - v19;
    v73 = (char *)v20;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v63 = sub_1A43AB8B4();
      swift_bridgeObjectRelease();
      if (v63 > 0)
      {
        swift_bridgeObjectRetain();
        v64 = sub_1A43AB8B4();
        if (!v64)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          return sub_1A43AB7AC();
        }
        if (v64 >= 1)
        {
          v22 = v64;
          a1 = v83;
          v13 = v78;
          v21 = v79;
          goto LABEL_5;
        }
        __break(1u);
      }
    }
    else
    {
      v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v22)
      {
        swift_bridgeObjectRetain();
LABEL_5:
        v81 = a1 & 0xC000000000000001;
        v71 = a4 + 16;
        swift_beginAccess();
        v23 = 0;
        *(_QWORD *)&v24 = 136315138;
        v76 = v24;
        v75 = MEMORY[0x1E0DEE9B8] + 8;
        v77 = v14;
        v82 = v22;
        while (1)
        {
          v26 = v81 ? (id)MEMORY[0x1A859C73C](v23, a1) : *(id *)(a1 + 8 * v23 + 32);
          v27 = v26;
          v28 = objc_msgSend(v26, sel_startTime, v70);
          if (!v28)
            break;
          v29 = v28;
          v30 = v80;
          sub_1A43AB428();

          v31 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
          v31(v13, v30, v14);
          v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
          v32(v13, 0, 1, v14);
          v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
          v34 = v33(v13, 1, v14);
          v35 = (uint64_t)v13;
          if (v34 == 1)
            goto LABEL_25;
          v31(v21, v13, v14);
          v36 = objc_msgSend(v27, sel_expires);
          if (!v36)
          {
            v39 = v74;
            v32(v74, 1, 1, v14);
LABEL_24:
            (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
            v35 = (uint64_t)v39;
LABEL_25:
            sub_1A4289E38(v35, &qword_1ED22ED60);
            if (qword_1ED22EA30 != -1)
              swift_once();
            v48 = sub_1A43AB584();
            __swift_project_value_buffer(v48, (uint64_t)qword_1ED22ED98);
            v49 = v27;
            v50 = sub_1A43AB56C();
            v51 = sub_1A43AB71C();
            v52 = os_log_type_enabled(v50, v51);
            a1 = v83;
            if (v52)
            {
              v53 = v15;
              v54 = swift_slowAlloc();
              v55 = swift_slowAlloc();
              v84 = v55;
              *(_DWORD *)v54 = v76;
              v56 = objc_msgSend(v49, sel_title);
              v57 = sub_1A43AB62C();
              v59 = v58;

              v60 = v57;
              v13 = v78;
              *(_QWORD *)(v54 + 4) = sub_1A4281D00(v60, v59, &v84);

              v21 = v79;
              a1 = v83;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1A427D000, v50, v51, "No start/end times on the entry with title:%s. Continuing.", (uint8_t *)v54, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1A859D2B8](v55, -1, -1);
              v61 = v54;
              v15 = v53;
              v14 = v77;
              MEMORY[0x1A859D2B8](v61, -1, -1);

            }
            else
            {

            }
            v25 = v82;
            goto LABEL_8;
          }
          v37 = v36;
          v38 = v80;
          sub_1A43AB428();

          v39 = v74;
          v40 = v38;
          v21 = v79;
          v31(v74, v40, v14);
          v32(v39, 0, 1, v14);
          if (v33(v39, 1, v14) == 1)
            goto LABEL_24;
          v31(v73, v39, v14);
          if (qword_1ED22EA30 != -1)
            swift_once();
          v41 = sub_1A43AB584();
          __swift_project_value_buffer(v41, (uint64_t)qword_1ED22ED98);
          v42 = sub_1A43AB56C();
          v43 = sub_1A43AB71C();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v44 = 0;
            _os_log_impl(&dword_1A427D000, v42, v43, v70, v44, 2u);
            MEMORY[0x1A859D2B8](v44, -1, -1);
          }

          v45 = MEMORY[0x1A859D360](v71);
          if (v45)
          {
            v46 = (void *)v45;
            v47 = (uint64_t)v73;
            MapsSuggestionsEventStreamer.broadcastEvent(from:to:)((uint64_t)v21, (uint64_t)v73);

            v27 = v46;
          }
          else
          {
            v47 = (uint64_t)v73;
          }
          v25 = v82;

          v62 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
          v62(v47, v14);
          v62((uint64_t)v21, v14);
          a1 = v83;
LABEL_8:
          if (v25 == ++v23)
            goto LABEL_40;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
        v35 = (uint64_t)v13;
        goto LABEL_25;
      }
    }
  }
  if (qword_1ED22EA30 != -1)
    swift_once();
  v65 = sub_1A43AB584();
  __swift_project_value_buffer(v65, (uint64_t)qword_1ED22ED98);
  v66 = sub_1A43AB56C();
  v67 = sub_1A43AB71C();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v68 = 0;
    _os_log_impl(&dword_1A427D000, v66, v67, a6, v68, 2u);
    MEMORY[0x1A859D2B8](v68, -1, -1);
  }

  return sub_1A43AB7AC();
}

void sub_1A42894B8()
{
  uint64_t v0;

  sub_1A4289E38(v0 + OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__keyListenerBlock, (uint64_t *)&unk_1ED22EA38);
  swift_unknownObjectRelease();
  sub_1A4289E38(v0 + OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitObserver, (uint64_t *)&unk_1ED22EA38);

}

id MapsSuggestionsEventKitStreamer.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  objc_super v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(void **)&v0[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitChangedCanKicker];
  if (v2)
    objc_msgSend(v2, sel_cancel);
  sub_1A4288340(&OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit, "Tore down EventKit.");
  v3 = (uint64_t)&v0[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__keyListenerBlock];
  swift_beginAccess();
  sub_1A4289BC8(v3, (uint64_t)&v8);
  if (v9)
  {
    sub_1A4289C10(&v8, &v10);
    __swift_project_boxed_opaque_existential_0(&v10, v11);
    sub_1A43AB914();
    GEOConfigRemoveBlockListener();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
  }
  else
  {
    sub_1A4289E38((uint64_t)&v8, (uint64_t *)&unk_1ED22EA38);
  }
  v4 = (uint64_t)&v0[OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitObserver];
  swift_beginAccess();
  sub_1A4289BC8(v4, (uint64_t)&v8);
  if (v9)
  {
    sub_1A4289C10(&v8, &v10);
    v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    __swift_project_boxed_opaque_existential_0(&v10, v11);
    objc_msgSend(v5, sel_removeObserver_, sub_1A43AB914());

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
  }
  else
  {
    sub_1A4289E38((uint64_t)&v8, (uint64_t *)&unk_1ED22EA38);
  }
  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void MapsSuggestionsEventKitStreamer.__allocating_init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

void sub_1A4289798()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MapsSuggestionsEventKitStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)()
{
  sub_1A4289798();
}

uint64_t sub_1A42897E8()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1ED22ED98);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED22ED98);
  return sub_1A43AB578();
}

char *sub_1A4289868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8, double a9, double a10)
{
  _BYTE *v10;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;

  v15 = (uint64_t *)&v10[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_callBackBlock];
  *v15 = 0;
  v15[1] = 0;
  v16 = OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_simpleCallBack;
  v10[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_simpleCallBack] = 0;
  v17 = OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_tenSecondEvent;
  v10[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_tenSecondEvent] = 0;
  v18 = OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_alreadyStartedEvent;
  v10[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_alreadyStartedEvent] = 0;
  v19 = OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_doubleEvent;
  v10[OBJC_IVAR____TtC15MapsSuggestions27MapsSuggestionsFakeStreamer_doubleEvent] = 0;
  swift_beginAccess();
  v20 = *v15;
  *v15 = a3;
  v15[1] = a4;
  v21 = v10;
  sub_1A42855E0(a3);
  sub_1A42856E0(v20);
  v10[v16] = a5;
  v10[v17] = a6;
  v10[v18] = a7;
  v10[v19] = a8;

  return MapsSuggestionsEventStreamer.init(lookAheadPeriod:pingInterval:notificationName:identifyingName:)(a1, a2, 0xD00000000000001BLL, 0x80000001A43B2DA0, a9, a10);
}

uint64_t sub_1A428999C()
{
  return sub_1A42899D4((void (*)(uint64_t, double))MEMORY[0x1E0CB06F0], (void (*)(uint64_t, double))MEMORY[0x1E0CB06E8], 5.0, 5.0);
}

uint64_t sub_1A42899BC()
{
  return sub_1A42899D4((void (*)(uint64_t, double))MEMORY[0x1E0CB06F0], (void (*)(uint64_t, double))MEMORY[0x1E0CB06F0], 10.0, 1.0);
}

uint64_t sub_1A42899D4(void (*a1)(uint64_t, double), void (*a2)(uint64_t, double), double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A43AB44C() - 8) + 80);
  return sub_1A42862D0(a3, a4, *(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9), a1, a2);
}

uint64_t objectdestroy_31Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A43AB44C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A4289AB8()
{
  return sub_1A42899D4((void (*)(uint64_t, double))MEMORY[0x1E0CB06E8], (void (*)(uint64_t, double))MEMORY[0x1E0CB06E8], 1.0, 11.0);
}

uint64_t sub_1A4289AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1A4289B18()
{
  uint64_t v0;

  sub_1A4287E40(v0);
}

void sub_1A4289B30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A4287E90(a1, a2, v2, "WalletStreamerEnabled Value changed. Rescanning.");
}

void sub_1A4289B50(uint64_t a1)
{
  uint64_t v1;

  sub_1A4287F9C(a1, v1, "PKPassLibraryDidChangeNotification received. Rescanning.", &OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__passKitChangedCanKicker);
}

uint64_t sub_1A4289B7C()
{
  return sub_1A4289B88((uint64_t (*)(_QWORD, uint64_t))sub_1A42870EC);
}

uint64_t sub_1A4289B88(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A43AB44C() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_1A4289BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1A4289C10(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_1A4289C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A4287E90(a1, a2, v2, "EventKitStreamerEnabled Value changed. Rescanning.");
}

void sub_1A4289C64(uint64_t a1)
{
  uint64_t v1;

  sub_1A4287F9C(a1, v1, "EKEventStoreChanged notification received. Rescanning.", &OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKitChangedCanKicker);
}

uint64_t objectdestroy_64Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A43AB44C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A4289D04()
{
  return sub_1A4289B88((uint64_t (*)(_QWORD, uint64_t))sub_1A42888DC);
}

uint64_t type metadata accessor for MapsSuggestionsFakeStreamer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MapsSuggestionsWalletStreamer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MapsSuggestionsEventKitStreamer()
{
  return objc_opt_self();
}

uint64_t sub_1A4289D70(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A4289DA8()
{
  uint64_t v0;

  return sub_1A429C684(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A4289DB0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A4289DD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1A4289DE8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A4288DBC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), "Broadcasting events from EventKit Streamer", "No interesting flight entries from EventKit");
}

void sub_1A4289E10()
{
  uint64_t v0;

  sub_1A42875BC(v0, &OBJC_IVAR____TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer__eventKit, "Tore down EventKit.");
}

uint64_t sub_1A4289E38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_115Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A4289EA4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A4288DBC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), "Broadcasting Events from Wallet Streamer", "No interesting flight entries from Wallet");
}

void sub_1A4289ECC()
{
  uint64_t v0;

  sub_1A42875BC(v0, &OBJC_IVAR____TtC15MapsSuggestions29MapsSuggestionsWalletStreamer__wallet, "Tore down Wallet.");
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1A4289F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1A43AB44C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1A4289FA8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_1A43AB44C() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1A42844F8(a1, (v1 + v4), *(char **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1A4289FF8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1A859D234](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MapsSuggestionsRealFinanceKitConnector.startObservingOrderPickups(in:callback:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EA88);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EA80);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A43AB398();
  MEMORY[0x1E0C80A78](v11);
  v12 = sub_1A43AB368();
  MEMORY[0x1E0C80A78](v12);
  v13 = sub_1A43AB44C();
  MEMORY[0x1E0C80A78](v13);
  v24 = sub_1A43AB2A8();
  v14 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9D8];
  sub_1A43AB434();
  v18 = sub_1A43AB458();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v19 = sub_1A43AB464();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 1, 1, v19);
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a3 < 9.22337204e18)
  {
    sub_1A43AB38C();
    sub_1A43AB35C();
    sub_1A43AB29C();
    sub_1A43AB290();
    sub_1A43AB284();
    v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v21;
    v22[3] = v17;
    v22[4] = v25;
    v22[5] = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    v23 = sub_1A43AB278();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v24);
    swift_release();
    swift_release();
    return v23;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A428A528(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint8_t *v37;
  uint64_t v38;
  void (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];

  v40 = a5;
  v9 = sub_1A43AB308();
  v42 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED22E9E8 != -1)
    swift_once();
  v41 = v9;
  v12 = sub_1A43AB584();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED22ED68);
  swift_bridgeObjectRetain_n();
  v13 = sub_1A43AB56C();
  v14 = sub_1A43AB71C();
  if (os_log_type_enabled(v13, v14))
  {
    v38 = a3;
    v15 = swift_slowAlloc();
    v39 = a2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v44[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v37 = v16 + 4;
    v18 = swift_bridgeObjectRetain();
    v19 = MEMORY[0x1A859C598](v18, v41);
    v21 = v20;
    swift_bridgeObjectRelease();
    v43 = sub_1A4281D00(v19, v21, v44);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    a3 = v38;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A427D000, v13, v14, "FinanceStore calling back with :%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v17, -1, -1);
    v22 = v16;
    a2 = v39;
    MEMORY[0x1A859D2B8](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = (_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v38 = a1;
    v39 = a4;
    v25 = (uint64_t)a2 + 16;
    v26 = v42;
    v27 = a1 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v28 = *(_QWORD *)(v26 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v30 = v41;
    v29(v11, v27, v41);
    while (1)
    {
      v31 = MEMORY[0x1A859D360](v25);
      if (v31)
      {
        v32 = (void *)v31;
        v33 = sub_1A428AA64();

        swift_beginAccess();
        v34 = v33;
        MEMORY[0x1A859C574]();
        if (*(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1A43AB6BC();
        sub_1A43AB6D4();
        sub_1A43AB6B0();
        swift_endAccess();

        v30 = v41;
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v30);
      v27 += v28;
      if (!--v24)
        break;
      v29(v11, v27, v30);
    }
    swift_bridgeObjectRelease();
    a4 = v39;
  }
  swift_beginAccess();
  v35 = swift_bridgeObjectRetain();
  a4(v35);
  return swift_bridgeObjectRelease();
}

id MapsSuggestionsRealFinanceKitConnector.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MapsSuggestionsRealFinanceKitConnector.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsRealFinanceKitConnector();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MapsSuggestionsRealFinanceKitConnector.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsRealFinanceKitConnector();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A428A9E4()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1ED22ED68);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED22ED68);
  return sub_1A43AB578();
}

id sub_1A428AA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v0 = sub_1A43AB350();
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v39 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v39 - v10;
  v12 = sub_1A43AB32C();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v39 - v17;
  v19 = sub_1A43AB2E4();
  v47 = v20;
  v48 = v19;
  sub_1A43AB2D8();
  v21 = sub_1A43AB314();
  v43 = v22;
  v44 = v21;
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v18, v12);
  sub_1A43AB2D8();
  v24 = sub_1A43AB320();
  v41 = v25;
  v42 = v24;
  v23(v16, v12);
  v40 = sub_1A43AB2C0();
  v26 = sub_1A43AB2CC();
  sub_1A43AB2B4();
  sub_1A43AB344();
  v27 = v46;
  v28 = *(void (**)(char *, uint64_t))(v45 + 8);
  v28(v5, v46);
  v29 = sub_1A43AB44C();
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v11, 0, 1, v29);
  sub_1A43AB2B4();
  sub_1A43AB338();
  v28(v3, v27);
  v30(v9, 0, 1, v29);
  v31 = sub_1A43AB2F0();
  v33 = v32;
  v34 = sub_1A43AB2FC();
  v36 = v35;
  v37 = objc_allocWithZone((Class)type metadata accessor for MapsSuggestionsOrderPickup());
  return MapsSuggestionsOrderPickup.init(pickupId:orderId:orderType:pickupAddress:pickupLocation:pickupStartDate:pickupEndDate:merchantDisplayName:pickupLocationDisplayName:)(v48, v47, v44, v43, v42, v41, v40, v26, (uint64_t)v11, (uint64_t)v9, v31, v33, v34, v36);
}

uint64_t _s15MapsSuggestions0aB23RealFinanceKitConnectorC19currentOrderPickups6periodSayAA0abH6PickupCGSd_tF_0(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = sub_1A43AB308();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EA88);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EA80);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A43AB398();
  MEMORY[0x1E0C80A78](v12);
  v13 = sub_1A43AB368();
  MEMORY[0x1E0C80A78](v13);
  v14 = sub_1A43AB44C();
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_1A43AB2A8();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v48 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0DEE9D8];
  sub_1A43AB434();
  v18 = sub_1A43AB458();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 1, 1, v18);
  v19 = sub_1A43AB464();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (a1 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    swift_once();
    v20 = sub_1A43AB584();
    __swift_project_value_buffer(v20, (uint64_t)qword_1ED22ED68);
    v21 = v11;
    v22 = v11;
    v23 = sub_1A43AB56C();
    v24 = sub_1A43AB728();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      v27 = v11;
      v28 = _swift_stdlib_bridgeErrorToNSError();
      v50 = v28;
      sub_1A43AB7DC();
      *v26 = v28;

      _os_log_impl(&dword_1A427D000, v23, v24, "Error:%@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v26, -1, -1);
      MEMORY[0x1A859D2B8](v25, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v48, v15);
    return v51;
  }
  if (a1 >= 9.22337204e18)
    goto LABEL_24;
  sub_1A43AB38C();
  sub_1A43AB35C();
  sub_1A43AB29C();
  sub_1A43AB290();
  sub_1A43AB284();
  v29 = sub_1A43AB26C();
  v47 = v15;
  swift_release();
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v46 = v16;
    v31 = v29 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v32 = *(_QWORD *)(v3 + 72);
    v33 = v29;
    v34 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v45 = v33;
    swift_bridgeObjectRetain();
    do
    {
      v34(v5, v31, v2);
      sub_1A428AA64();
      MEMORY[0x1A859C574]();
      if (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A43AB6BC();
      sub_1A43AB6D4();
      sub_1A43AB6B0();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v31 += v32;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    v16 = v46;
  }
  if (qword_1ED22E9E8 != -1)
    swift_once();
  v35 = sub_1A43AB584();
  __swift_project_value_buffer(v35, (uint64_t)qword_1ED22ED68);
  swift_bridgeObjectRetain();
  v36 = sub_1A43AB56C();
  v37 = sub_1A43AB71C();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v50 = v39;
    *(_DWORD *)v38 = 136315138;
    v40 = swift_bridgeObjectRetain();
    v41 = MEMORY[0x1A859C598](v40, v2);
    v43 = v42;
    swift_bridgeObjectRelease();
    v49 = sub_1A4281D00(v41, v43, &v50);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A427D000, v36, v37, "FinanceStore sync-calling back with :%s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v39, -1, -1);
    MEMORY[0x1A859D2B8](v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v48, v47);
  return v51;
}

uint64_t sub_1A428B414()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A428B438()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A428B45C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A428B490(uint64_t a1)
{
  uint64_t v1;

  return sub_1A428A528(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for MapsSuggestionsRealFinanceKitConnector()
{
  return objc_opt_self();
}

uint64_t sub_1A428B4BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A428B4E0(uint64_t a1)
{
  uint64_t v1;

  sub_1A429BCAC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t MapsSuggestionsRealFindMyConnector.uniqueName.getter()
{
  return sub_1A428E14C(&OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_uniqueName);
}

uint64_t MapsSuggestionsRealFindMyConnector.uniqueName.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A428E22C(a1, a2, &OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_uniqueName);
}

uint64_t (*MapsSuggestionsRealFindMyConnector.uniqueName.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

char *MapsSuggestionsRealFindMyConnector.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EAE0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_uniqueName];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_findMySession] = 0;
  v17.receiver = v0;
  v17.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v17, sel_init);
  v7 = sub_1A43AB704();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  v9 = (char *)v6;
  sub_1A428B928((uint64_t)v4, (uint64_t)&unk_1EE714B00, (uint64_t)v8);
  swift_release();
  v10 = objc_msgSend(v9, sel_description);
  v11 = sub_1A43AB62C();
  v13 = v12;

  v14 = (uint64_t *)&v9[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_uniqueName];
  swift_beginAccess();
  *v14 = v11;
  v14[1] = v13;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1A428B6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = sub_1A43AB470();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  sub_1A43AB47C();
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A428B748()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[4] + 104))(v0[5], *MEMORY[0x1E0D213F0], v0[3]);
  sub_1A43AB488();
  sub_1A43AB500();
  swift_allocObject();
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = v1;
  *v1 = v0;
  v1[1] = sub_1A428B7DC;
  return sub_1A43AB50C();
}

uint64_t sub_1A428B7DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A428B838()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_findMySession) = *(_QWORD *)(v0 + 64);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A428B890()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1A428B8BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A428287C;
  return sub_1A428B6C8(a1, v4, v5, v6);
}

uint64_t sub_1A428B928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A43AB704();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A43AB6F8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A4289E38(a1, &qword_1ED22EAE0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A43AB6E0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t MapsSuggestionsRealFindMyConnector.listOfFriends()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = sub_1A43AB4D0();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v3 = sub_1A43AB4A0();
  v1[10] = v3;
  v1[11] = *(_QWORD *)(v3 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A428BB3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40)
                 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_findMySession);
  *(_QWORD *)(v0 + 112) = v1;
  if (v1)
  {
    swift_retain();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_1A428BCA0;
    return sub_1A43AB4E8();
  }
  else
  {
    if (qword_1EE714570 != -1)
      swift_once();
    v4 = sub_1A43AB584();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EE719150);
    v5 = sub_1A43AB56C();
    v6 = sub_1A43AB728();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1A427D000, v5, v6, "Call to fetch list of friends from FindMy returned empty", v7, 2u);
      MEMORY[0x1A859D2B8](v7, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
  }
}

uint64_t sub_1A428BCA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1A428BD14()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 16);
  v41 = v1;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 88);
    v44 = *(_QWORD *)(v0 + 56);
    v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1A4290508(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v46 = v3;
    v48 = v0;
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v43 = *(_QWORD *)(v3 + 72);
    v5 = v50;
    do
    {
      v6 = *(_QWORD *)(v0 + 104);
      v7 = v5;
      v9 = *(_QWORD *)(v0 + 72);
      v8 = *(_QWORD *)(v0 + 80);
      v10 = *(_QWORD *)(v0 + 48);
      v42(v6, v4, v8);
      sub_1A43AB494();
      v11 = sub_1A43AB4AC();
      v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v9, v10);
      v14 = v8;
      v5 = v7;
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v6, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A4290508(0, v7[2] + 1, 1);
        v5 = v50;
      }
      v16 = v5[2];
      v15 = v5[3];
      if (v16 >= v15 >> 1)
      {
        sub_1A4290508(v15 > 1, v16 + 1, 1);
        v5 = v50;
      }
      v5[2] = v16 + 1;
      v17 = &v5[2 * v16];
      v17[4] = v11;
      v17[5] = v13;
      v4 += v43;
      --v2;
      v0 = v48;
    }
    while (v2);
    v1 = v41;
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_20;
  }
  v18 = sub_1A4290A88((uint64_t)v5);
  swift_bridgeObjectRelease();
  v49 = v18;
  v47 = *(_QWORD *)(v1 + 16);
  if (!v47)
  {
LABEL_19:
    v5 = sub_1A429068C(v18);
    swift_bridgeObjectRelease();
LABEL_20:
    if (qword_1EE714570 == -1)
      goto LABEL_21;
    goto LABEL_26;
  }
  v19 = *(_QWORD *)(v0 + 88);
  v45 = *(_QWORD *)(v0 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(v0 + 128)
                + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)));
  swift_bridgeObjectRetain();
  v20 = 0;
  while (v20 < *(_QWORD *)(v1 + 16))
  {
    v23 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, char *, _QWORD))(v19 + 16))(*(_QWORD *)(v0 + 96), (char *)v5 + *(_QWORD *)(v19 + 72) * v20, *(_QWORD *)(v0 + 80));
    sub_1A43AB494();
    v25 = sub_1A43AB4B8();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v23, v24);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = (uint64_t *)(v25 + 40);
      do
      {
        v28 = *(v27 - 1);
        v29 = *v27;
        swift_bridgeObjectRetain();
        sub_1A428FA8C((uint64_t *)&v50, v28, v29);
        swift_bridgeObjectRelease();
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    ++v20;
    v21 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v22);
    v1 = v41;
    if (v20 == v47)
    {
      swift_bridgeObjectRelease();
      v18 = v49;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_26:
  swift_once();
LABEL_21:
  v30 = sub_1A43AB584();
  __swift_project_value_buffer(v30, (uint64_t)qword_1EE719150);
  swift_bridgeObjectRetain();
  v31 = sub_1A43AB56C();
  v32 = sub_1A43AB71C();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = *(_QWORD *)(v0 + 80);
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v50 = (_QWORD *)v35;
    *(_DWORD *)v34 = 136315138;
    v36 = swift_bridgeObjectRetain();
    v37 = MEMORY[0x1A859C598](v36, v33);
    v39 = v38;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = sub_1A4281D00(v37, v39, (uint64_t *)&v50);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A427D000, v31, v32, "Friends:%s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v35, -1, -1);
    MEMORY[0x1A859D2B8](v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_1A428C1B4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  swift_release();
  if (qword_1EE714570 != -1)
    swift_once();
  v1 = *(void **)(v0 + 136);
  v2 = sub_1A43AB584();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE719150);
  v3 = v1;
  v4 = v1;
  v5 = sub_1A43AB56C();
  v6 = sub_1A43AB728();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 136);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DF0);
    v12 = sub_1A43AB638();
    *(_QWORD *)(v0 + 24) = sub_1A4281D00(v12, v13, &v15);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A427D000, v5, v6, "Fetching friends failed with error %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v10, -1, -1);
    MEMORY[0x1A859D2B8](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1A428C4F4(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1A428C554;
  return MapsSuggestionsRealFindMyConnector.listOfFriends()();
}

uint64_t sub_1A428C554()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  v3 = (void *)sub_1A43AB68C();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t MapsSuggestionsRealFindMyConnector.location(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_1A43AB44C();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v5 = sub_1A43AB560();
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B18);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A428C6B4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 56);
  v2(*(_QWORD *)(v0 + 104), 1, 1, *(_QWORD *)(v0 + 64));
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_findMySession);
  *(_QWORD *)(v0 + 112) = v3;
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B20);
    sub_1A43AB4D0();
    v4 = swift_allocObject();
    *(_QWORD *)(v0 + 120) = v4;
    *(_OWORD *)(v4 + 16) = xmmword_1A43B2E40;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1A428F7D4(MEMORY[0x1E0DEE9D8]);
    sub_1A43AB4C4();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v5;
    *v5 = v0;
    v5[1] = sub_1A428CA80;
    return sub_1A43AB4F4();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 64);
    sub_1A4289E38(*(_QWORD *)(v0 + 104), &qword_1EE714B18);
    v2(v7, 1, 1, v8);
    sub_1A4290B64(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    sub_1A4290B1C(*(_QWORD *)(v0 + 104), v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
      if (qword_1EE714570 != -1)
        swift_once();
      v12 = sub_1A43AB584();
      __swift_project_value_buffer(v12, (uint64_t)qword_1EE719150);
      v13 = sub_1A43AB56C();
      v14 = sub_1A43AB728();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1A427D000, v13, v14, "Location is nil when trying to call locations(for:reverseGeocode:)", v15, 2u);
        MEMORY[0x1A859D2B8](v15, -1, -1);
      }
      v16 = *(_QWORD *)(v0 + 104);

      sub_1A4289E38(v16, &qword_1EE714B18);
      v17 = 0;
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v0 + 80);
      v19 = *(_QWORD *)(v0 + 64);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 48);
      v22 = *(_QWORD *)(v0 + 56);
      v23 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 32))(v18, *(_QWORD *)(v0 + 88), v19);
      sub_1A43AB53C();
      v25 = v24;
      sub_1A43AB548();
      v27 = v26;
      sub_1A43AB530();
      v29 = v28;
      sub_1A43AB524();
      v31 = v30;
      sub_1A43AB518();
      v33 = v32;
      sub_1A43AB554();
      sub_1A43AB41C();
      v34 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
      v35 = (void *)sub_1A43AB3E0();
      v17 = objc_msgSend(v34, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v35, v25, v27, v29, v31, v33);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      sub_1A4289E38(v36, &qword_1EE714B18);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v17);
  }
}

uint64_t sub_1A428CA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v4 + 144) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1A428CB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1A428D0E8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  sub_1A4289E38(v1, &qword_1EE714B18);
  sub_1A4290B64(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  sub_1A4290B1C(*(_QWORD *)(v0 + 104), v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
    if (qword_1EE714570 != -1)
      swift_once();
    v5 = sub_1A43AB584();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EE719150);
    v6 = sub_1A43AB56C();
    v7 = sub_1A43AB728();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A427D000, v6, v7, "Location is nil when trying to call locations(for:reverseGeocode:)", v8, 2u);
      MEMORY[0x1A859D2B8](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 104);

    sub_1A4289E38(v9, &qword_1EE714B18);
    v10 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v11, *(_QWORD *)(v0 + 88), v12);
    sub_1A43AB53C();
    v18 = v17;
    sub_1A43AB548();
    v20 = v19;
    sub_1A43AB530();
    v22 = v21;
    sub_1A43AB524();
    v24 = v23;
    sub_1A43AB518();
    v26 = v25;
    sub_1A43AB554();
    sub_1A43AB41C();
    v27 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v28 = (void *)sub_1A43AB3E0();
    v10 = objc_msgSend(v27, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v28, v18, v20, v22, v24, v26);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    sub_1A4289E38(v30, &qword_1EE714B18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_1A428CDAC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  uint64_t v34;

  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1EE714570 != -1)
    swift_once();
  v1 = sub_1A43AB584();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EE719150);
  v2 = sub_1A43AB56C();
  v3 = sub_1A43AB728();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void **)(v0 + 136);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1A427D000, v2, v3, "Unable to fetch a location. cachedLocation failed.", v6, 2u);
    MEMORY[0x1A859D2B8](v6, -1, -1);
  }

  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 72);
  sub_1A4290B1C(*(_QWORD *)(v0 + 104), v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
    if (qword_1EE714570 != -1)
      swift_once();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EE719150);
    v10 = sub_1A43AB56C();
    v11 = sub_1A43AB728();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1A427D000, v10, v11, "Location is nil when trying to call locations(for:reverseGeocode:)", v12, 2u);
      MEMORY[0x1A859D2B8](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 104);

    sub_1A4289E38(v13, &qword_1EE714B18);
    v14 = 0;
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 56);
    v20 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v15, *(_QWORD *)(v0 + 88), v16);
    sub_1A43AB53C();
    v22 = v21;
    sub_1A43AB548();
    v24 = v23;
    sub_1A43AB530();
    v26 = v25;
    sub_1A43AB524();
    v28 = v27;
    sub_1A43AB518();
    v30 = v29;
    sub_1A43AB554();
    sub_1A43AB41C();
    v31 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v32 = (void *)sub_1A43AB3E0();
    v14 = objc_msgSend(v31, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v32, v22, v24, v26, v28, v30);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    sub_1A4289E38(v34, &qword_1EE714B18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v14);
}

uint64_t sub_1A428D0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_1A429096C(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = sub_1A43AB560();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_1A42909F4(result, v5, a1, a2);
    v7 = sub_1A43AB560();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_1A428D2B8(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A43AB62C();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1A4290FE8;
  return MapsSuggestionsRealFindMyConnector.location(for:)(v5, v7);
}

uint64_t MapsSuggestionsRealFindMyConnector.latestLocation(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_1A43AB44C();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v5 = sub_1A43AB560();
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B18);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A428D410()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 56);
  v2(*(_QWORD *)(v0 + 104), 1, 1, *(_QWORD *)(v0 + 64));
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsRealFindMyConnector_findMySession);
  *(_QWORD *)(v0 + 112) = v3;
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B20);
    sub_1A43AB4D0();
    v4 = swift_allocObject();
    *(_QWORD *)(v0 + 120) = v4;
    *(_OWORD *)(v4 + 16) = xmmword_1A43B2E40;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1A428F7D4(MEMORY[0x1E0DEE9D8]);
    sub_1A43AB4C4();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v5;
    *v5 = v0;
    v5[1] = sub_1A428D7DC;
    return sub_1A43AB4DC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 64);
    sub_1A4289E38(*(_QWORD *)(v0 + 104), &qword_1EE714B18);
    v2(v7, 1, 1, v8);
    sub_1A4290B64(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    sub_1A4290B1C(*(_QWORD *)(v0 + 104), v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
      if (qword_1EE714570 != -1)
        swift_once();
      v12 = sub_1A43AB584();
      __swift_project_value_buffer(v12, (uint64_t)qword_1EE719150);
      v13 = sub_1A43AB56C();
      v14 = sub_1A43AB728();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1A427D000, v13, v14, "Location is nil when trying to call cachedLocation(for:includeAddress:)", v15, 2u);
        MEMORY[0x1A859D2B8](v15, -1, -1);
      }
      v16 = *(_QWORD *)(v0 + 104);

      sub_1A4289E38(v16, &qword_1EE714B18);
      v17 = 0;
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v0 + 80);
      v19 = *(_QWORD *)(v0 + 64);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 48);
      v22 = *(_QWORD *)(v0 + 56);
      v23 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 32))(v18, *(_QWORD *)(v0 + 88), v19);
      sub_1A43AB53C();
      v25 = v24;
      sub_1A43AB548();
      v27 = v26;
      sub_1A43AB530();
      v29 = v28;
      sub_1A43AB524();
      v31 = v30;
      sub_1A43AB518();
      v33 = v32;
      sub_1A43AB554();
      sub_1A43AB41C();
      v34 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
      v35 = (void *)sub_1A43AB3E0();
      v17 = objc_msgSend(v34, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v35, v25, v27, v29, v31, v33);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      sub_1A4289E38(v36, &qword_1EE714B18);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v17);
  }
}

uint64_t sub_1A428D7DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v4 + 144) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1A428D860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1A428D0E8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  sub_1A4289E38(v1, &qword_1EE714B18);
  sub_1A4290B64(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  sub_1A4290B1C(*(_QWORD *)(v0 + 104), v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
    if (qword_1EE714570 != -1)
      swift_once();
    v5 = sub_1A43AB584();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EE719150);
    v6 = sub_1A43AB56C();
    v7 = sub_1A43AB728();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A427D000, v6, v7, "Location is nil when trying to call cachedLocation(for:includeAddress:)", v8, 2u);
      MEMORY[0x1A859D2B8](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 104);

    sub_1A4289E38(v9, &qword_1EE714B18);
    v10 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v11, *(_QWORD *)(v0 + 88), v12);
    sub_1A43AB53C();
    v18 = v17;
    sub_1A43AB548();
    v20 = v19;
    sub_1A43AB530();
    v22 = v21;
    sub_1A43AB524();
    v24 = v23;
    sub_1A43AB518();
    v26 = v25;
    sub_1A43AB554();
    sub_1A43AB41C();
    v27 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v28 = (void *)sub_1A43AB3E0();
    v10 = objc_msgSend(v27, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v28, v18, v20, v22, v24, v26);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    sub_1A4289E38(v30, &qword_1EE714B18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_1A428DB08()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  uint64_t v34;

  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1EE714570 != -1)
    swift_once();
  v1 = sub_1A43AB584();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EE719150);
  v2 = sub_1A43AB56C();
  v3 = sub_1A43AB728();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void **)(v0 + 136);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1A427D000, v2, v3, "Unable to fetch latestLocation(). cachedLocation failed.", v6, 2u);
    MEMORY[0x1A859D2B8](v6, -1, -1);
  }

  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 72);
  sub_1A4290B1C(*(_QWORD *)(v0 + 104), v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1A4289E38(*(_QWORD *)(v0 + 88), &qword_1EE714B18);
    if (qword_1EE714570 != -1)
      swift_once();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EE719150);
    v10 = sub_1A43AB56C();
    v11 = sub_1A43AB728();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1A427D000, v10, v11, "Location is nil when trying to call cachedLocation(for:includeAddress:)", v12, 2u);
      MEMORY[0x1A859D2B8](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 104);

    sub_1A4289E38(v13, &qword_1EE714B18);
    v14 = 0;
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 56);
    v20 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v15, *(_QWORD *)(v0 + 88), v16);
    sub_1A43AB53C();
    v22 = v21;
    sub_1A43AB548();
    v24 = v23;
    sub_1A43AB530();
    v26 = v25;
    sub_1A43AB524();
    v28 = v27;
    sub_1A43AB518();
    v30 = v29;
    sub_1A43AB554();
    sub_1A43AB41C();
    v31 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v32 = (void *)sub_1A43AB3E0();
    v14 = objc_msgSend(v31, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v32, v22, v24, v26, v28, v30);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    sub_1A4289E38(v34, &qword_1EE714B18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v14);
}

uint64_t sub_1A428DF74(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A43AB62C();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1A428E000;
  return MapsSuggestionsRealFindMyConnector.latestLocation(for:)(v5, v7);
}

uint64_t sub_1A428E000(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v4 = *(void **)(*v1 + 16);
  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v6 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v6 + 8))();
}

id sub_1A428E0CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = a1 + *a3;
  swift_beginAccess();
  if (!*(_QWORD *)(v3 + 8))
    return 0;
  swift_bridgeObjectRetain();
  v4 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t MapsSuggestionsFakeFindMyConnector.uniqueName.getter()
{
  return sub_1A428E14C(&OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_uniqueName);
}

uint64_t sub_1A428E14C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1A428E1A8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (a3)
  {
    v6 = sub_1A43AB62C();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t MapsSuggestionsFakeFindMyConnector.uniqueName.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A428E22C(a1, a2, &OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_uniqueName);
}

uint64_t sub_1A428E22C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsFakeFindMyConnector.uniqueName.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MapsSuggestionsFakeFindMyConnector.friends.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MapsSuggestionsFakeFindMyConnector.friends.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_friends);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsFakeFindMyConnector.friends.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *MapsSuggestionsFakeFindMyConnector.cachedLocation.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void MapsSuggestionsFakeFindMyConnector.cachedLocation.setter(void *a1)
{
  sub_1A428E630(a1, &OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
}

uint64_t (*MapsSuggestionsFakeFindMyConnector.cachedLocation.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A428E530(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;

  v3 = (id *)(a1 + *a3);
  swift_beginAccess();
  return *v3;
}

void *MapsSuggestionsFakeFindMyConnector.refreshedLocation.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_refreshedLocation);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_1A428E5CC(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void **v5;
  void *v6;
  id v7;

  v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a3;
  v7 = a3;

}

void MapsSuggestionsFakeFindMyConnector.refreshedLocation.setter(void *a1)
{
  sub_1A428E630(a1, &OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_refreshedLocation);
}

void sub_1A428E630(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*MapsSuggestionsFakeFindMyConnector.refreshedLocation.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id MapsSuggestionsFakeFindMyConnector.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MapsSuggestionsFakeFindMyConnector.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  void *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_uniqueName];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = (void **)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation];
  *(_QWORD *)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation] = 0;
  v4 = (void **)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_refreshedLocation];
  *(_QWORD *)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_refreshedLocation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_friends] = MEMORY[0x1E0DEE9D8];
  swift_beginAccess();
  v5 = *v3;
  *v3 = 0;
  v6 = v0;

  swift_beginAccess();
  v7 = *v4;
  *v4 = 0;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

Swift::Void __swiftcall MapsSuggestionsFakeFindMyConnector.nilCachedLocation()()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v1 = (void **)(v0 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
  swift_beginAccess();
  v2 = *v1;
  *v1 = 0;

}

Swift::Void __swiftcall MapsSuggestionsFakeFindMyConnector.setCachedLocation(_:_:)(Swift::Double a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  void **v13;
  void *v14;
  uint64_t v15;

  v3 = v2;
  v6 = sub_1A43AB44C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A43AB434();
  v10 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  v11 = (void *)sub_1A43AB3E0();
  v12 = objc_msgSend(v10, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v11, a1, a2, 0.0, 0.0, 0.0);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = (void **)(v3 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
  swift_beginAccess();
  v14 = *v13;
  *v13 = v12;

}

Swift::Void __swiftcall MapsSuggestionsFakeFindMyConnector.expireCachedLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  id v10;
  void *v11;
  id v12;
  void **v13;
  void *v14;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1A43AB44C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  sub_1A43AB434();
  sub_1A43AB3D4();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  v10 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  v11 = (void *)sub_1A43AB3E0();
  v12 = objc_msgSend(v10, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v11, 37.323, -122.0322, 0.0, 0.0, 0.0);

  v9(v8, v2);
  v13 = (void **)(v1 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
  swift_beginAccess();
  v14 = *v13;
  *v13 = v12;

}

Swift::Void __swiftcall MapsSuggestionsFakeFindMyConnector.setTestFriends()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B50);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1A43B2E50;
  *(_QWORD *)(v1 + 32) = 0x6D61786540636261;
  *(_QWORD *)(v1 + 40) = 0xEF6D6F632E656C70;
  *(_QWORD *)(v1 + 48) = 0x6D61786540696867;
  *(_QWORD *)(v1 + 56) = 0xEF6D6F632E656C70;
  *(_QWORD *)(v1 + 64) = 0x6D617865406F6E6DLL;
  *(_QWORD *)(v1 + 72) = 0xEF6D6F632E656C70;
  *(_QWORD *)(v1 + 80) = 0xD000000000000014;
  *(_QWORD *)(v1 + 88) = 0x80000001A43B4460;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_friends);
  *(_QWORD *)(v1 + 96) = 0x352D3433322D312BLL;
  *(_QWORD *)(v1 + 104) = 0xEF303139382D3736;
  swift_beginAccess();
  *v2 = v1;
  swift_bridgeObjectRelease();
}

uint64_t MapsSuggestionsFakeFindMyConnector.listOfFriends()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A428ED54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  swift_beginAccess();
  v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_1A428EECC(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 40) = a2;
  *(_QWORD *)(v2 + 48) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch();
}

uint64_t sub_1A428EF14()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;

  v2 = *(void **)(v0 + 40);
  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 48);
  swift_beginAccess();
  swift_bridgeObjectRetain();

  v3 = (void *)sub_1A43AB68C();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MapsSuggestionsFakeFindMyConnector.location(for:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A428F0F8(int a1, void *aBlock, void *a3)
{
  uint64_t v3;
  id v5;

  *(_QWORD *)(v3 + 40) = a3;
  *(_QWORD *)(v3 + 48) = _Block_copy(aBlock);
  v5 = a3;
  return swift_task_switch();
}

uint64_t MapsSuggestionsFakeFindMyConnector.latestLocation(for:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A428F15C()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  uint64_t (*v5)(void *);

  v1 = (void **)(*(_QWORD *)(v0 + 40)
               + OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation);
  swift_beginAccess();
  v2 = *v1;
  v5 = *(uint64_t (**)(void *))(v0 + 8);
  v3 = v2;
  return v5(v2);
}

uint64_t sub_1A428F2EC(int a1, void *aBlock, void *a3)
{
  uint64_t v3;
  id v5;

  *(_QWORD *)(v3 + 40) = a3;
  *(_QWORD *)(v3 + 48) = _Block_copy(aBlock);
  v5 = a3;
  return swift_task_switch();
}

uint64_t sub_1A428F338()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  char *v2;
  id *v3;
  id v4;

  v2 = *(char **)(v0 + 40);
  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 48);
  v3 = (id *)&v2[OBJC_IVAR____TtC15MapsSuggestions34MapsSuggestionsFakeFindMyConnector_cachedLocation];
  swift_beginAccess();
  v4 = *v3;

  ((void (**)(_QWORD, id))v1)[2](v1, v4);
  _Block_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id _s15MapsSuggestions0aB19RealFindMyConnectorCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A428F44C()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1EE719150);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE719150);
  return sub_1A43AB578();
}

uint64_t sub_1A428F4CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1A428287C;
  return v6();
}

uint64_t sub_1A428F520(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A428287C;
  return v7();
}

uint64_t sub_1A428F574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A43AB704();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A43AB6F8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A4289E38(a1, &qword_1ED22EAE0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A43AB6E0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A428F6C0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A4290FEC;
  return v6(a1);
}

uint64_t sub_1A428F724(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A428F788;
  return v6(a1);
}

uint64_t sub_1A428F788()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1A428F7D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714C68);
  v2 = (_QWORD *)sub_1A43AB8E4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A428F8E4(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A428F8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A43AB950();
  sub_1A43AB650();
  v4 = sub_1A43AB95C();
  return sub_1A428F948(a1, a2, v4);
}

unint64_t sub_1A428F948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1A43AB920() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1A43AB920() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1A43AB920() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1A428FA8C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1A43AB950();
  swift_bridgeObjectRetain();
  sub_1A43AB650();
  v8 = sub_1A43AB95C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1A43AB920() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1A43AB920() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1A428FF14(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1A428FC38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714C70);
  v3 = sub_1A43AB830();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1A43AB950();
      sub_1A43AB650();
      result = sub_1A43AB95C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A428FF14(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1A428FC38();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1A42900AC();
      goto LABEL_22;
    }
    sub_1A429025C();
  }
  v11 = *v4;
  sub_1A43AB950();
  sub_1A43AB650();
  result = sub_1A43AB95C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1A43AB920(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1A43AB92C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1A43AB920();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_1A42900AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714C70);
  v2 = *v0;
  v3 = sub_1A43AB824();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A429025C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714C70);
  v3 = sub_1A43AB830();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1A43AB950();
    swift_bridgeObjectRetain();
    sub_1A43AB650();
    result = sub_1A43AB95C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A4290508(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A4290524(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A4290524(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B50);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A43AB8F0();
  __break(1u);
  return result;
}

_QWORD *sub_1A429068C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B50);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1A4290770((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1A4290F48();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1A4290770(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A429096C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1A42909F4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 56);
    v7 = sub_1A43AB560();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1A4290A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1A43AB710();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1A428FA8C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1A4290B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A4290B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MapsSuggestionsRealFindMyConnector()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MapsSuggestionsFakeFindMyConnector()
{
  return objc_opt_self();
}

uint64_t sub_1A4290BF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE714B98 + dword_1EE714B98))(v2, v3, v4);
}

uint64_t sub_1A4290C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE714BB8 + dword_1EE714BB8))(a1, v4);
}

uint64_t sub_1A4290CD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE714BC8 + dword_1EE714BC8))(v2, v3, v4);
}

uint64_t sub_1A4290D50()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A42826AC;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE714BE8 + dword_1EE714BE8))(v2, v3);
}

uint64_t sub_1A4290DC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE714C08 + dword_1EE714C08))(v2, v3, v4);
}

uint64_t sub_1A4290E38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A428287C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE714C28 + dword_1EE714C28))(v2, v3, v4);
}

uint64_t objectdestroy_41Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1A4290EDC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A428287C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE714C48 + dword_1EE714C48))(v2, v3);
}

uint64_t sub_1A4290F48()
{
  return swift_release();
}

uint64_t sub_1A4290F50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A4290F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A42826AC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE714C78 + dword_1EE714C78))(a1, v4);
}

uint64_t static MapsSuggestionsContactActivityDeduper.isEnabled()()
{
  return GEOConfigGetBOOL();
}

id MapsSuggestionsContactActivityDeduper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MapsSuggestionsContactActivityDeduper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsContactActivityDeduper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MapsSuggestionsContactActivityDeduper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsContactActivityDeduper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A4291154()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1EE719168);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE719168);
  return sub_1A43AB578();
}

uint64_t _s15MapsSuggestions0aB22ContactActivityDeduperC6dedupe16byEnrichingEntry4withSbSo0abI0C_AHtF_0(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!MapsSuggestionsEntriesAreBothOfType(24, a1, a2))
    return 0;
  v4 = objc_msgSend(a1, sel_uniqueIdentifier);
  v5 = sub_1A43AB62C();
  v7 = v6;

  v8 = objc_msgSend(a2, sel_uniqueIdentifier);
  v9 = sub_1A43AB62C();
  v11 = v10;

  if (v5 == v9 && v7 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_1A43AB920();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = 0;
    if ((v13 & 1) == 0)
      return v14;
  }
  if (isSharingStopped(a2))
    return 0;
  if (isLikelyMeetup(a1) && isRecentlyShared(a2))
    return 1;
  if (qword_1EE714578 != -1)
    swift_once();
  v16 = sub_1A43AB584();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EE719168);
  v17 = a1;
  v18 = a2;
  v19 = v17;
  v20 = v18;
  v21 = sub_1A43AB56C();
  v22 = sub_1A43AB71C();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v33 = v32;
    *(_DWORD *)v23 = 136315394;
    v24 = objc_msgSend(v19, sel_title);
    v25 = sub_1A43AB62C();
    v27 = v26;

    sub_1A4281D00(v25, v27, &v33);
    sub_1A43AB7DC();

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v28 = objc_msgSend(v20, sel_title);
    v29 = sub_1A43AB62C();
    v31 = v30;

    sub_1A4281D00(v29, v31, &v33);
    sub_1A43AB7DC();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A427D000, v21, v22, "Replacing existing entry \"%s\" with \"%s\"", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v32, -1, -1);
    MEMORY[0x1A859D2B8](v23, -1, -1);

  }
  else
  {

  }
  v14 = 1;
  objc_msgSend(v19, sel_mergeFromSuggestionEntry_behavior_, v20, 1);
  return v14;
}

uint64_t type metadata accessor for MapsSuggestionsContactActivityDeduper()
{
  return objc_opt_self();
}

Swift::Bool __swiftcall MapsSuggestionsContactActivityImprover.improve(_:)(MapsSuggestionsEntry *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  GEOMapItemStorage *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  id v21;
  id v22;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  void (*v28)(char *, char *, uint64_t);
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  unint64_t v38;
  void *v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  void *v46;
  id v47;
  void *v48;
  int v49;
  void *v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A43AB44C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v57 - v12;
  if ((id)-[MapsSuggestionsEntry type](a1, sel_type) != (id)24)
    return 0;
  v14 = -[MapsSuggestionsEntry geoMapItem](a1, sel_geoMapItem);
  if (!v14)
  {
    if (qword_1EE714580 != -1)
      swift_once();
    v17 = sub_1A43AB584();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EE719180);
    v15 = sub_1A43AB56C();
    v18 = sub_1A43AB734();
    if (os_log_type_enabled(v15, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1A427D000, v15, v18, "Entry does not have a geoMapitem. This should not happen.", v19, 2u);
      MEMORY[0x1A859D2B8](v19, -1, -1);
    }
    goto LABEL_15;
  }
  v15 = v14;
  if (!-[MapsSuggestionsEntry containsKey:](a1, sel_containsKey_, CFSTR("MapsSuggestionsContactActivityKey"))
    || !-[MapsSuggestionsEntry containsKey:](a1, sel_containsKey_, CFSTR("MapsSuggestionsContactDisplayNameKey"))
    || (!isAuthorizedToUseContacts()
      ? (v16 = -[MapsSuggestionsEntry stringForKey:](a1, sel_stringForKey_, CFSTR("MapsSuggestionsContactLikelyAppleIDKey"))): (v16 = -[MapsSuggestionsEntry stringForKey:](a1, sel_stringForKey_, CFSTR("MapsSuggestionsContactDisplayNameKey"))), (v20 = v16) == 0))
  {
LABEL_15:

    return 0;
  }
  v59 = sub_1A43AB62C();

  v21 = MapsSuggestionsMapItemStreetWithNumber(v15);
  if (v21)
  {

    v22 = MapsSuggestionsMapItemStreetWithNumber(v15);
  }
  else
  {
    v22 = MapsSuggestionsMapItemAreaOfInterest(v15);
  }
  v24 = v22;
  if (v24)
  {
    v58 = sub_1A43AB62C();
    v60 = v25;

    v26 = -[MapsSuggestionsEntry dateForKey:](a1, sel_dateForKey_, CFSTR("MapsSuggestionsContactLocationTimestampKey"));
    if (v26)
    {
      v27 = v26;
      sub_1A43AB428();

      v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v28(v6, v11, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        v28(v13, v6, v7);
        v29 = (void *)sub_1A43AB3E0();
        v30 = MapsSuggestionsAgeAsStringForLocation(v29);

        if (!v30)
        {
          sub_1A43AB62C();
          v30 = (id)sub_1A43AB620();
          swift_bridgeObjectRelease();
        }
        v31 = (void *)sub_1A43AB620();
        swift_bridgeObjectRelease();
        v32 = MapsSuggestionsLocalizedAddressStringContactActivitySubTitle(v30, v31);

        v33 = sub_1A43AB62C();
        v35 = v34;

        v36 = *(void (**)(char *, uint64_t))(v8 + 8);
        v37 = v33;
        v38 = v35;
        v36(v13, v7);
        goto LABEL_27;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    sub_1A4291E94((uint64_t)v6);
  }
  v37 = 0;
  v38 = 0xE000000000000000;
LABEL_27:
  if (isRecentlyShared(a1))
  {
    v39 = (void *)sub_1A43AB620();
    v40 = MapsSuggestionsLocalizedRecentlySharedContactActivityTitle(v39);

    v60 = sub_1A43AB62C();
    v42 = v41;

  }
  else
  {
    v60 = 0;
    v42 = 0xE000000000000000;
  }
  if (isLikelyMeetup(a1))
  {
    swift_bridgeObjectRelease();
    v43 = (void *)sub_1A43AB620();
    v44 = MapsSuggestionsLocalizedLikelyMeetupContactActivityTitle(v43);

    v60 = sub_1A43AB62C();
    v42 = v45;

  }
  v46 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v47 = MapsSuggestionsLocalizedContactLocationTitle(v46);

  if (!v47)
  {
    sub_1A43AB62C();
    v47 = (id)sub_1A43AB620();
    swift_bridgeObjectRelease();
  }
  -[MapsSuggestionsEntry setString:forKey:](a1, sel_setString_forKey_, v47, CFSTR("MapsSuggestionsEntryTitleNameKey"));

  v48 = (void *)sub_1A43AB620();
  v49 = -[MapsSuggestionsBaseImprover improveMyUndecoratedTitle:forEntry:](v2, v48, a1);

  v50 = (void *)sub_1A43AB620();
  v51 = -[MapsSuggestionsBaseImprover improveMyUndecoratedSubtitle:forEntry:](v2, v50, a1);

  if (qword_1EE714580 != -1)
    swift_once();
  v52 = sub_1A43AB584();
  __swift_project_value_buffer(v52, (uint64_t)qword_1EE719180);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = sub_1A43AB56C();
  v54 = sub_1A43AB71C();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc();
    v58 = swift_slowAlloc();
    v62 = v58;
    *(_DWORD *)v55 = 67109890;
    LODWORD(v61) = v49;
    v57 = v37;
    LODWORD(v59) = v49;
    sub_1A43AB7DC();
    *(_WORD *)(v55 + 8) = 2080;
    swift_bridgeObjectRetain();
    v61 = sub_1A4281D00(v60, v42, &v62);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v55 + 18) = 1024;
    LODWORD(v61) = v51;
    LOBYTE(v49) = v59;
    sub_1A43AB7DC();
    *(_WORD *)(v55 + 24) = 2080;
    swift_bridgeObjectRetain();
    v61 = sub_1A4281D00(v57, v38, &v62);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A427D000, v53, v54, "titleImproved?:%{BOOL}d with:%s subtitleImproved?: %{BOOL}d with:%s", (uint8_t *)v55, 0x22u);
    v56 = v58;
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v56, -1, -1);
    MEMORY[0x1A859D2B8](v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  return v49 | v51;
}

uint64_t static MapsSuggestionsContactActivityImprover.isEnabled()()
{
  return GEOConfigGetBOOL();
}

id MapsSuggestionsContactActivityImprover.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MapsSuggestionsContactActivityImprover.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsContactActivityImprover();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MapsSuggestionsContactActivityImprover.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsContactActivityImprover();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A4291E14()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1EE719180);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE719180);
  return sub_1A43AB578();
}

uint64_t sub_1A4291E94(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MapsSuggestionsContactActivityImprover()
{
  return objc_opt_self();
}

uint64_t sub_1A4291EF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1A4289D70(0, (unint64_t *)&unk_1ED22ECA0);
    v4 = sub_1A43AB698();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t MapsSuggestionsContactActivity.uniqueName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_uniqueName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MapsSuggestionsContactActivity.uniqueName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_uniqueName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsContactActivity.uniqueName.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MapsSuggestionsContactActivity.contactActivityDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_contactActivityDelegate;
  swift_beginAccess();
  return MEMORY[0x1A859D360](v1);
}

uint64_t MapsSuggestionsContactActivity.contactActivityDelegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MapsSuggestionsContactActivity.contactActivityDelegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_contactActivityDelegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A859D360](v5);
  return sub_1A429230C;
}

void sub_1A429230C(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

char *MapsSuggestionsContactActivity.__allocating_init(fromResourceDepot:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MapsSuggestionsContactActivity.init(fromResourceDepot:)(a1);
}

char *MapsSuggestionsContactActivity.init(fromResourceDepot:)(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  char *result;
  objc_class *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD aBlock[6];
  objc_super v27;

  v25 = a1;
  v24 = sub_1A43AB764();
  v2 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A43AB74C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5);
  v7 = sub_1A43AB5C0();
  MEMORY[0x1E0C80A78](v7);
  v8 = &v1[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_uniqueName];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  swift_unknownObjectWeakInit();
  sub_1A4289D70(0, (unint64_t *)&qword_1ED22ED00);
  v9 = v1;
  sub_1A43AB5B4();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&qword_1ED22ECF0, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECD0);
  sub_1A429BC38((unint64_t *)&qword_1ED22ECE0, (uint64_t *)&unk_1ED22ECD0, MEMORY[0x1E0DEAF38]);
  sub_1A43AB80C();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF8D0], v24);
  v10 = v25;
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__queue] = sub_1A43AB794();
  result = (char *)objc_msgSend(v10, sel_oneBiome);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__biome] = result;
  result = (char *)objc_msgSend(v10, sel_oneContacts);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__contacts] = result;
  result = (char *)objc_msgSend(v10, sel_oneFindMy);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy] = result;
  result = (char *)objc_msgSend(v10, sel_oneNetworkRequester);
  if (result)
  {
    *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__networkRequester] = result;
    *(_QWORD *)&v9[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__cacheForMapItems] = MEMORY[0x1E0DEE9E0];

    v12 = (objc_class *)type metadata accessor for MapsSuggestionsContactActivity();
    v27.receiver = v9;
    v27.super_class = v12;
    v13 = (char *)objc_msgSendSuper2(&v27, sel_init);
    v14 = objc_msgSend(v13, sel_description);
    v15 = sub_1A43AB62C();
    v17 = v16;

    v18 = (uint64_t *)&v13[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_uniqueName];
    swift_beginAccess();
    *v18 = v15;
    v18[1] = v17;
    swift_bridgeObjectRelease();
    v19 = *(void **)&v13[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__biome];
    v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_1A4292880;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A4282B78;
    aBlock[3] = &block_descriptor_1;
    v21 = _Block_copy(aBlock);
    v22 = v19;
    swift_release();
    objc_msgSend(v22, sel_registerForUpdatesWithHandler_, v21);
    swift_unknownObjectRelease();

    _Block_release(v21);
    return v13;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MapsSuggestionsContactActivity()
{
  return objc_opt_self();
}

uint64_t sub_1A42927C8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A42927EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity_contactActivityDelegate;
    swift_beginAccess();
    v5 = (void *)MEMORY[0x1A859D360](v4);

    if (v5)
    {
      objc_msgSend(v5, sel_contactActivityUpdated);
      swift_unknownObjectRelease();
    }
  }
}

void sub_1A4292880()
{
  uint64_t v0;

  sub_1A42927EC(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1A42928D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  Class isa;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  int64_t v41;
  double v42;
  double v43;
  double v44;
  Class v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  char v52;
  int64_t v53;
  int64_t v54;
  int64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  id v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  int64_t *v68;
  uint64_t v69;
  int64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int64_t v75;
  char *v76;
  int64_t v77;
  NSObject *v78;
  unint64_t v79;
  char v80[16];
  char *v81;
  uint64_t v82;
  id v83;

  v7 = sub_1A43AB44C();
  v66 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A43AB440();
  v10 = (a1 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__cacheForMapItems);
  swift_beginAccess();
  v78 = v10;
  v71 = v9;
  v81 = v9;
  v11 = swift_bridgeObjectRetain();
  v12 = sub_1A429B748(v11, (uint64_t (*)(id, uint64_t))sub_1A429B3DC, (uint64_t)v80);
  v13 = v12;
  v14 = v3;
  if ((v12 & 0xC000000000000001) != 0)
    v15 = sub_1A43AB878();
  else
    v15 = *(_QWORD *)(v12 + 16);
  v67 = v7;
  v68 = a3;
  if (((unint64_t)v78->isa & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1A43AB878();
    swift_bridgeObjectRelease();
    if (v15 == v16)
      goto LABEL_14;
LABEL_8:
    if (qword_1ED22EAB8 != -1)
LABEL_69:
      swift_once();
    v17 = sub_1A43AB584();
    __swift_project_value_buffer(v17, (uint64_t)qword_1ED22ED80);
    v18 = sub_1A43AB56C();
    v19 = sub_1A43AB71C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1A427D000, v18, v19, "Filtered the cache of mapItems because some expired:\nBefore:\n", v20, 2u);
      MEMORY[0x1A859D2B8](v20, -1, -1);
    }

    v21 = swift_bridgeObjectRetain();
    sub_1A4293200(v21);
    swift_bridgeObjectRelease();
    v22 = sub_1A43AB56C();
    v23 = sub_1A43AB71C();
    v16 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1A427D000, v22, (os_log_type_t)v16, "After:\n", v24, 2u);
      MEMORY[0x1A859D2B8](v24, -1, -1);
    }

    sub_1A4293200(v13);
    isa = v78->isa;
    v78->isa = (Class)v13;
    v13 = (unint64_t)isa;
    goto LABEL_14;
  }
  v16 = *((_QWORD *)v78->isa + 2);
  if (v15 != v16)
    goto LABEL_8;
LABEL_14:
  swift_bridgeObjectRelease();
  v26 = v78->isa;
  if (((unint64_t)v78->isa & 0xC000000000000001) != 0)
  {
    v27 = sub_1A43AB86C();
    v76 = 0;
    v28 = 0;
    v29 = 0;
    v30 = v27 | 0x8000000000000000;
  }
  else
  {
    v31 = -1 << *((_BYTE *)v26 + 32);
    v28 = ~v31;
    v32 = *((_QWORD *)v26 + 8);
    v76 = (char *)v26 + 64;
    v33 = -v31;
    if (v33 < 64)
      v34 = ~(-1 << v33);
    else
      v34 = -1;
    v29 = v34 & v32;
    v30 = (unint64_t)v26;
  }
  v70 = v14;
  swift_bridgeObjectRetain();
  v35 = 0;
  v69 = v28;
  v74 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  v75 = (unint64_t)(v28 + 64) >> 6;
  v72 = MEMORY[0x1E0DEE9B0] + 8;
  v73 = v30;
  while (1)
  {
    while (1)
    {
      v14 = v35;
      v79 = v29;
      if ((v30 & 0x8000000000000000) != 0)
      {
        v38 = sub_1A43AB89C();
        if (!v38)
          goto LABEL_60;
        v82 = v38;
        sub_1A4289D70(0, &qword_1EE714DD0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v39 = v83;
        swift_unknownObjectRelease();
        if (!v39)
        {
LABEL_59:
          v54 = 0;
          v55 = v68;
          v56 = v67;
          v57 = v66;
          goto LABEL_67;
        }
      }
      else
      {
        if (v29)
        {
          v36 = __clz(__rbit64(v29));
          v29 &= v29 - 1;
          v37 = v36 | (v35 << 6);
        }
        else
        {
          ++v35;
          if (__OFADD__(v14, 1))
          {
            __break(1u);
            goto LABEL_69;
          }
          if (v35 >= v75)
            goto LABEL_60;
          v40 = *(_QWORD *)&v76[8 * v35];
          if (!v40)
          {
            v41 = v14 + 2;
            if (v14 + 2 >= v75)
              goto LABEL_60;
            v40 = *(_QWORD *)&v76[8 * v41];
            if (v40)
              goto LABEL_40;
            v41 = v14 + 3;
            if (v14 + 3 >= v75)
              goto LABEL_60;
            v40 = *(_QWORD *)&v76[8 * v41];
            if (v40)
              goto LABEL_40;
            v41 = v14 + 4;
            if (v14 + 4 >= v75)
              goto LABEL_60;
            v40 = *(_QWORD *)&v76[8 * v41];
            if (v40)
              goto LABEL_40;
            v41 = v14 + 5;
            if (v14 + 5 >= v75)
              goto LABEL_60;
            v40 = *(_QWORD *)&v76[8 * v41];
            if (v40)
            {
LABEL_40:
              v35 = v41;
            }
            else
            {
              v35 = v14 + 6;
              if (v14 + 6 >= v75)
                goto LABEL_60;
              v40 = *(_QWORD *)&v76[8 * v35];
              if (!v40)
              {
                v53 = v14 + 7;
                while (v75 != v53)
                {
                  v40 = *(_QWORD *)&v76[8 * v53++];
                  if (v40)
                  {
                    v35 = v53 - 1;
                    goto LABEL_41;
                  }
                }
LABEL_60:
                v54 = 0;
                v55 = v68;
                v56 = v67;
                v57 = v66;
                goto LABEL_67;
              }
            }
          }
LABEL_41:
          v29 = (v40 - 1) & v40;
          v37 = __clz(__rbit64(v40)) + (v35 << 6);
        }
        v39 = *(id *)(*(_QWORD *)(v30 + 48) + 8 * v37);
        if (!v39)
          goto LABEL_59;
      }
      objc_msgSend(a2, sel_distanceFromLocation_, v39, v66);
      v43 = v42;
      v16 = v16 & 0xFFFFFFFF00000000 | GEOConfigMapsSuggestionsDistanceThresholdForNewRevgeoRequest;
      GEOConfigGetDouble();
      if (v44 >= v43)
        break;
LABEL_22:

    }
    v45 = v78->isa;
    if (((unint64_t)v78->isa & 0xC000000000000001) != 0)
    {
      v77 = v14;
      v46 = a2;
      swift_bridgeObjectRetain();
      v47 = v39;
      v48 = sub_1A43AB884();
      if (v48)
      {
        v82 = v48;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC8);
        swift_dynamicCast();
        v13 = (unint64_t)v83;
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        a2 = v46;
        v30 = v73;
        v49 = v77;
        if (v13)
          goto LABEL_61;
      }
      else
      {

        swift_bridgeObjectRelease();
        a2 = v46;
        v30 = v73;
      }
      goto LABEL_22;
    }
    if (!*((_QWORD *)v45 + 2))
      goto LABEL_22;
    v77 = v14;
    swift_bridgeObjectRetain();
    v50 = v39;
    v51 = sub_1A429A054((uint64_t)v50);
    if ((v52 & 1) != 0)
      break;

    swift_bridgeObjectRelease();
  }
  v13 = *(_QWORD *)(*((_QWORD *)v45 + 7) + 8 * v51);
  swift_unknownObjectRetain();

  swift_bridgeObjectRelease();
  v49 = v77;
  if (!v13)
    goto LABEL_22;
LABEL_61:
  v75 = v13;
  v77 = v49;
  if (qword_1ED22EAB8 != -1)
    swift_once();
  v58 = sub_1A43AB584();
  __swift_project_value_buffer(v58, (uint64_t)qword_1ED22ED80);
  v59 = a2;
  v60 = sub_1A43AB56C();
  v61 = sub_1A43AB71C();
  v78 = v60;
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v62 = 138412290;
    v74 = (uint64_t)(v62 + 4);
    v83 = v59;
    v64 = v59;
    sub_1A43AB7DC();
    *v63 = v59;

    _os_log_impl(&dword_1A427D000, v78, v61, "Returning a cached mapItem for location:%@", v62, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v63, -1, -1);
    MEMORY[0x1A859D2B8](v62, -1, -1);
  }
  else
  {

    v39 = v59;
  }
  v55 = v68;
  v56 = v67;
  v57 = v66;

  v54 = v75;
LABEL_67:
  sub_1A4290F48();
  result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v71, v56);
  *v55 = v54;
  return result;
}

BOOL sub_1A429312C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;

  v2 = sub_1A43AB44C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, sel_timestamp);
  sub_1A43AB428();

  sub_1A43AB3C8();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  GEOConfigGetDouble();
  return v8 <= v9;
}

void sub_1A4293200(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  void *v19;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v18 = 0;
    v1 = 0;
    v2 = 0;
    v3 = sub_1A43AB86C() | 0x8000000000000000;
  }
  else
  {
    v4 = -1 << *(_BYTE *)(a1 + 32);
    v1 = ~v4;
    v18 = a1 + 64;
    v5 = -v4;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v2 = v6 & *(_QWORD *)(a1 + 64);
    v3 = a1;
  }
  swift_bridgeObjectRetain();
  v7 = 0;
  v17 = (unint64_t)(v1 + 64) >> 6;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v2)
    {
      v8 = (v2 - 1) & v2;
      v9 = __clz(__rbit64(v2)) | (v7 << 6);
      v10 = v7;
      goto LABEL_29;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v13 >= v17)
      goto LABEL_32;
    v14 = *(_QWORD *)(v18 + 8 * v13);
    v10 = v7 + 1;
    if (!v14)
    {
      v10 = v7 + 2;
      if (v7 + 2 >= v17)
        goto LABEL_32;
      v14 = *(_QWORD *)(v18 + 8 * v10);
      if (!v14)
      {
        v10 = v7 + 3;
        if (v7 + 3 >= v17)
          goto LABEL_32;
        v14 = *(_QWORD *)(v18 + 8 * v10);
        if (!v14)
        {
          v10 = v7 + 4;
          if (v7 + 4 >= v17)
            goto LABEL_32;
          v14 = *(_QWORD *)(v18 + 8 * v10);
          if (!v14)
          {
            v10 = v7 + 5;
            if (v7 + 5 >= v17)
              goto LABEL_32;
            v14 = *(_QWORD *)(v18 + 8 * v10);
            if (!v14)
            {
              v15 = v7 + 6;
              while (v17 != v15)
              {
                v14 = *(_QWORD *)(v18 + 8 * v15++);
                if (v14)
                {
                  v10 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1A4290F48();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v8 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_29:
    v16 = 8 * v9;
    v12 = *(void **)(*(_QWORD *)(v3 + 56) + v16);
    v11 = *(id *)(*(_QWORD *)(v3 + 48) + v16);
    swift_unknownObjectRetain();
    if (!v11)
      goto LABEL_32;
    while (1)
    {
      sub_1A42934DC(v11, v12);
      swift_unknownObjectRelease();

      v7 = v10;
      v2 = v8;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_1A43AB890())
      {
        sub_1A4289D70(0, &qword_1EE714DD0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v11 = v19;
        swift_unknownObjectRelease();
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC8);
        swift_dynamicCast();
        v12 = v19;
        swift_unknownObjectRelease();
        v10 = v7;
        v8 = v2;
        if (v19)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_1A42934DC(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  os_log_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  os_log_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_1A43AB584();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED22EAB8 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED22ED80);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = a1;
  swift_unknownObjectRetain_n();
  v10 = v9;
  v11 = sub_1A43AB56C();
  v12 = sub_1A43AB71C();
  if (os_log_type_enabled(v11, v12))
  {
    v28 = v11;
    v31 = v5;
    v13 = swift_slowAlloc();
    v32 = a2;
    v14 = v13;
    v15 = (_QWORD *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v33 = (uint64_t)v10;
    v34 = v30;
    *(_DWORD *)v14 = 138412546;
    v16 = v10;
    sub_1A43AB7DC();
    v29 = v15;
    *v15 = v10;
    v17 = v32;

    *(_WORD *)(v14 + 12) = 2080;
    v18 = objc_msgSend(v17, sel_name);
    if (v18)
    {
      v19 = v18;
      v20 = sub_1A43AB62C();
      v22 = v21;

      v33 = sub_1A4281D00(v20, v22, &v34);
      sub_1A43AB7DC();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      v23 = v28;
      _os_log_impl(&dword_1A427D000, v28, v12, "Location: %@, MapItem: %s", (uint8_t *)v14, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
      v24 = v29;
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v24, -1, -1);
      v25 = v30;
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v25, -1, -1);
      MEMORY[0x1A859D2B8](v14, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    }
    else
    {
      result = swift_unknownObjectRelease();
      __break(1u);
    }
  }
  else
  {

    swift_unknownObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

void sub_1A42937C0(void (*a1)(_QWORD, _QWORD), uint64_t a2, double a3, double a4)
{
  char *v4;
  char *v5;
  int BOOL;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  char *v25;
  _QWORD *v26;
  os_log_type_t v27;
  _QWORD aBlock[6];

  v5 = v4;
  BOOL = GEOConfigGetBOOL();
  v11 = CLLocationFromGEOLocationCoordinate2D(a3, a4);
  v12 = v11;
  if (BOOL)
  {
    MEMORY[0x1E0C80A78](v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DB8);
    sub_1A43AB77C();
    v13 = aBlock[0];
    if (aBlock[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC0);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1A43B2F50;
      *(_QWORD *)(v14 + 32) = v13;
      aBlock[0] = v14;
      sub_1A43AB6B0();
      swift_unknownObjectRetain();
      a1(aBlock[0], 0);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_12;
    }
    if (qword_1ED22EAB8 != -1)
      swift_once();
    v15 = sub_1A43AB584();
    __swift_project_value_buffer(v15, (uint64_t)qword_1ED22ED80);
    v16 = v12;
    v17 = sub_1A43AB56C();
    v18 = sub_1A43AB71C();
    if (os_log_type_enabled(v17, v18))
    {
      v27 = v18;
      v19 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v19 = 138412290;
      aBlock[0] = v16;
      v20 = v16;
      sub_1A43AB7DC();
      *v26 = v16;

      _os_log_impl(&dword_1A427D000, v17, v27, "Did not find a cached mapItem. About to make a network request for:%@", v19, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v26, -1, -1);
      MEMORY[0x1A859D2B8](v19, -1, -1);
    }
    else
    {

      v17 = v16;
    }

  }
  v21 = *(void **)&v5[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__networkRequester];
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = BOOL;
  *(_QWORD *)(v22 + 24) = v5;
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = a1;
  *(_QWORD *)(v22 + 48) = a2;
  aBlock[4] = sub_1A429B3B4;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4293E10;
  aBlock[3] = &block_descriptor_46;
  v23 = _Block_copy(aBlock);
  v24 = v12;
  v25 = v5;
  swift_retain();
  swift_release();
  LODWORD(v21) = objc_msgSend(v21, sel_reverseGeocodeCoordinate_shiftIfNeeded_completion_, 0, v23, a3, a4);
  _Block_release(v23);
  if (!(_DWORD)v21)
    a1(0, 0);
LABEL_12:

}

uint64_t sub_1A4293B48(uint64_t a1, uint64_t a2, char a3, char *a4, void *a5, void (*a6)(uint64_t, uint64_t))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)();
  void *v13;
  char *v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  NSObject *queue;
  _QWORD aBlock[6];

  if ((a3 & 1) == 0)
  {
    v12 = 0;
    a6(a1, a2);
    return sub_1A42856E0((uint64_t)v12);
  }
  queue = *(NSObject **)&a4[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__queue];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a1;
  v11 = swift_allocObject();
  v12 = sub_1A429BA58;
  *(_QWORD *)(v11 + 16) = sub_1A429BA58;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1A429BA74;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A429C6AC;
  aBlock[3] = &block_descriptor_55;
  v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v14 = a4;
  v15 = a5;
  swift_release();
  dispatch_sync(queue, v13);
  _Block_release(v13);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a6(a1, a2);
    return sub_1A42856E0((uint64_t)v12);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A4293CCC(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  id v10;

  if (!a3)
    goto LABEL_11;
  v5 = a3 & 0xFFFFFFFFFFFFFF8;
  if (!(a3 >> 62))
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_4;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = sub_1A43AB8B4();
  if (!result)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    swift_beginAccess();
    goto LABEL_12;
  }
LABEL_4:
  if ((a3 & 0xC000000000000001) != 0)
  {
    v8 = MEMORY[0x1A859C73C](0, a3);
LABEL_7:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v8)
    {
      v9 = a2;
      sub_1A429A6C0(v8, v9);

      return swift_endAccess();
    }
LABEL_12:
    v10 = a2;
    sub_1A429A574((unint64_t)v10);

    swift_unknownObjectRelease();
    return swift_endAccess();
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = *(_QWORD *)(a3 + 32);
    swift_unknownObjectRetain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A4293E10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC8);
    v4 = sub_1A43AB698();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1A4293E90(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAD0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_1A42937C0((void (*)(_QWORD, _QWORD))sub_1A429B2E8, v10, a2, a3);
  return swift_release();
}

uint64_t sub_1A4293F84()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAD0);
  return sub_1A43AB6EC();
}

uint64_t sub_1A4293FC8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  id v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v9 = sub_1A43AB59C();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A43AB5C0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__queue];
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a3;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a4;
  aBlock[4] = sub_1A4299B0C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_14;
  v17 = _Block_copy(aBlock);
  v18 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  v19 = a4;
  sub_1A43AB5B4();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A429BC38((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0, MEMORY[0x1E0DEAF38]);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_1A42941E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v17;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22EAE0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A43AB704();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = v13;
  v14[6] = a3;
  v14[7] = a4;
  v14[8] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  v15 = a5;
  sub_1A428B928((uint64_t)v11, (uint64_t)&unk_1EE714DA0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1A4294308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[53] = a7;
  v8[54] = a8;
  v8[51] = a5;
  v8[52] = a6;
  v8[50] = a4;
  v9 = sub_1A43AB44C();
  v8[55] = v9;
  v8[56] = *(_QWORD *)(v9 - 8);
  v8[57] = swift_task_alloc();
  return swift_task_switch();
}

id sub_1A4294370()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char **v5;
  uint64_t v6;
  id v7;
  void *v8;
  id result;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t inited;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void (*v72)(_QWORD, id);
  id v73;
  __int128 v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 400);
  *(_QWORD *)(v0 + 328) = MEMORY[0x1E0DEE9D8];
  if (v1 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    v51 = sub_1A43AB8B4();
    *(_QWORD *)(v0 + 464) = v51;
    if (v51)
    {
LABEL_3:
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      v3 = 0;
      v4 = (__int128 *)(v0 + 472);
      v5 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
      do
      {
        *v4 = v74;
        v6 = *(_QWORD *)(v0 + 400);
        if ((v6 & 0xC000000000000001) != 0)
          v7 = (id)MEMORY[0x1A859C73C](v3);
        else
          v7 = *(id *)(v6 + 8 * v3 + 32);
        v8 = v7;
        *(_QWORD *)(v0 + 488) = v7;
        *(_QWORD *)(v0 + 496) = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        result = objc_msgSend(v7, v5[64], CFSTR("MapsSuggestionsContactActivityPK"));
        if (!result)
        {
          __break(1u);
          goto LABEL_49;
        }
        v10 = result;
        v11 = sub_1A43AB62C();
        v13 = v12;

        *(_QWORD *)(v0 + 504) = v11;
        *(_QWORD *)(v0 + 512) = v13;
        if (isSharingStopped(v8))
        {
          if (qword_1ED22EAB8 != -1)
            swift_once();
          v14 = sub_1A43AB584();
          __swift_project_value_buffer(v14, (uint64_t)qword_1ED22ED80);
          swift_bridgeObjectRetain();
          v15 = sub_1A43AB56C();
          v16 = sub_1A43AB71C();
          if (os_log_type_enabled(v15, v16))
          {
            v17 = swift_slowAlloc();
            v18 = swift_slowAlloc();
            v75 = v18;
            *(_DWORD *)v17 = 136315138;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v17 + 4) = sub_1A4281D00(v11, v13, &v75);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1A427D000, v15, v16, "🚮🚮 Friendship ended with %s", (uint8_t *)v17, 0xCu);
            swift_arrayDestroy();
            v19 = v18;
            v5 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
            MEMORY[0x1A859D2B8](v19, -1, -1);
            MEMORY[0x1A859D2B8](v17, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          v20 = objc_msgSend(v8, sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllPhoneNumbersKey"));
          if (v20)
          {
            v21 = v20;
            v22 = sub_1A43AB698();

            v23 = sub_1A4298B2C(v22);
            *(_QWORD *)(v0 + 520) = v23;
            swift_bridgeObjectRelease();
            if (v23)
            {
              v24 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
              if (v24)
              {
                v45 = (void *)v24;
                v46 = *(void **)(v24 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
                *(_QWORD *)(v0 + 528) = v46;
                v46;

                v47 = (_QWORD *)swift_task_alloc();
                *(_QWORD *)(v0 + 536) = v47;
                v48 = sub_1A4294D48;
LABEL_35:
                *v47 = v0;
                v47[1] = v48;
                return (id)MapsSuggestionsFindMy.verifyFriendship(with:)(v23);
              }
              swift_bridgeObjectRelease();
            }
          }
          v25 = objc_msgSend(*(id *)(v0 + 488), sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllEmailAddressesKey"));
          if (v25)
          {
            v26 = v25;
            v27 = sub_1A43AB698();

            v23 = sub_1A4298B2C(v27);
            *(_QWORD *)(v0 + 552) = v23;
            swift_bridgeObjectRelease();
            if (v23)
            {
              v28 = *(_QWORD *)(v0 + 408);
              swift_bridgeObjectRelease();
              v29 = MEMORY[0x1A859D360](v28 + 16);
              if (v29)
              {
                v49 = (void *)v29;
                v50 = *(void **)(v29 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
                *(_QWORD *)(v0 + 560) = v50;
                v50;

                v47 = (_QWORD *)swift_task_alloc();
                *(_QWORD *)(v0 + 568) = v47;
                v48 = sub_1A4295D2C;
                goto LABEL_35;
              }
              swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();
          if (qword_1ED22EAB8 != -1)
            swift_once();
          v30 = *(void **)(v0 + 488);
          v31 = sub_1A43AB584();
          __swift_project_value_buffer(v31, (uint64_t)qword_1ED22ED80);
          v32 = v30;
          v33 = sub_1A43AB56C();
          v34 = sub_1A43AB728();
          v35 = os_log_type_enabled(v33, v34);
          v36 = *(void **)(v0 + 488);
          if (v35)
          {
            v37 = swift_slowAlloc();
            v38 = swift_slowAlloc();
            v75 = v38;
            *(_DWORD *)v37 = 136315138;
            v39 = v36;
            v40 = objc_msgSend(v39, sel_description);
            v41 = sub_1A43AB62C();
            v43 = v42;

            v5 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
            *(_QWORD *)(v37 + 4) = sub_1A4281D00(v41, v43, &v75);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A427D000, v33, v34, "❌❌ Friendship could not be verified:\n%s\nIgnoring entry.", (uint8_t *)v37, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A859D2B8](v38, -1, -1);
            MEMORY[0x1A859D2B8](v37, -1, -1);

          }
          else
          {

          }
          v74 = *v4;
        }
        v3 = *(_QWORD *)(v0 + 496);
      }
      while (v3 != *(_QWORD *)(v0 + 464));
      swift_bridgeObjectRelease();
      v44 = *(_QWORD *)(v0 + 328);
      if (v44 >> 62)
        goto LABEL_39;
      goto LABEL_31;
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 464) = v2;
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v44 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    v52 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v52)
      goto LABEL_32;
    goto LABEL_40;
  }
LABEL_31:
  if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_32:
    (*(void (**)(unint64_t, _QWORD))(v0 + 416))(v44, *(_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease();
LABEL_47:
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_40:
  result = (id)GEOErrorDomain();
  if (result)
  {
    v53 = result;
    sub_1A43AB62C();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22E9F8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A43B2E40;
    *(_QWORD *)(inited + 32) = sub_1A43AB62C();
    *(_QWORD *)(inited + 40) = v55;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000002ELL;
    *(_QWORD *)(inited + 56) = 0x80000001A43B49B0;
    sub_1A4298C70(inited);
    v56 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v57 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
    v58 = (void *)sub_1A43AB608();
    swift_bridgeObjectRelease();
    v59 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, -8, v58);

    if (qword_1ED22EAB8 != -1)
      swift_once();
    v60 = sub_1A43AB584();
    __swift_project_value_buffer(v60, (uint64_t)qword_1ED22ED80);
    v61 = v59;
    v62 = sub_1A43AB56C();
    v63 = sub_1A43AB728();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      v65 = swift_slowAlloc();
      v75 = v65;
      *(_DWORD *)v64 = 136315138;
      v66 = objc_msgSend(v61, sel_localizedDescription);
      v67 = sub_1A43AB62C();
      v69 = v68;

      *(_QWORD *)(v0 + 304) = v67;
      *(_QWORD *)(v0 + 312) = v69;
      v70 = sub_1A43AB674();
      *(_QWORD *)(v0 + 320) = sub_1A4281D00(v70, v71, &v75);
      sub_1A43AB7DC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v62, v63, "%s", v64, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v65, -1, -1);
      MEMORY[0x1A859D2B8](v64, -1, -1);

    }
    else
    {

    }
    v72 = *(void (**)(_QWORD, id))(v0 + 416);
    v73 = v61;
    v72(MEMORY[0x1E0DEE9D8], v61);

    goto LABEL_47;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1A4294D48(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)*v2;
  v3[30] = v2;
  v3[31] = a1;
  v3[32] = a2;
  v4 = (void *)v3[66];
  v3[68] = a2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

id sub_1A4294DB8()
{
  uint64_t v0;
  unint64_t v1;
  __objc2_class *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  id result;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  id v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  const __CFString *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  const __CFString *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  os_log_type_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t inited;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(_QWORD, id);
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
  if (!v1)
    goto LABEL_43;
  v3 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 584) = v1;
  *(_QWORD *)(v0 + 592) = v3;
  if (qword_1ED22EAB8 != -1)
    swift_once();
  v4 = sub_1A43AB584();
  *(_QWORD *)(v0 + 600) = __swift_project_value_buffer(v4, (uint64_t)qword_1ED22ED80);
  swift_bridgeObjectRetain_n();
  v5 = sub_1A43AB56C();
  v6 = sub_1A43AB71C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = v3;
    v9 = swift_slowAlloc();
    v118 = v9;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 392) = sub_1A4281D00(v8, v1, &v118);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A427D000, v5, v6, "✅✅ Verified friendship using ID:%s", v7, 0xCu);
    swift_arrayDestroy();
    v10 = v9;
    v3 = v8;
    MEMORY[0x1A859D2B8](v10, -1, -1);
    v11 = v7;
    v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
    MEMORY[0x1A859D2B8](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v13 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 512);
  v14 = *(void **)(v0 + 488);
  v15 = (void *)sub_1A43AB620();
  objc_msgSend(v14, sel_setString_forKey_, v15, CFSTR("MapsSuggestionsContactLikelyAppleIDKey"));

  if (v13 == v3 && v1 == v12 || (sub_1A43AB920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v115 = v3;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v16 = sub_1A43AB56C();
    v17 = sub_1A43AB71C();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 512);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 504);
      v21 = swift_slowAlloc();
      v114 = swift_slowAlloc();
      v118 = v114;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 376) = sub_1A4281D00(v20, v19, &v118);
      v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v3 = v115;
      *(_QWORD *)(v0 + 384) = sub_1A4281D00(v115, v1, &v118);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A427D000, v16, v17, "🚨🚨 Updating ContactActivityPK from %s to %s)", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v114, -1, -1);
      MEMORY[0x1A859D2B8](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v3 = v115;
    }
    v22 = *(void **)(v0 + 488);
    v23 = (void *)sub_1A43AB620();
    objc_msgSend(v22, sel_setString_forKey_, v23, CFSTR("MapsSuggestionsContactActivityPK"));

  }
  v24 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
  if (v24
    && (v25 = (void *)v24,
        v26 = *(id *)(v24 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__contacts),
        v25,
        v27 = (void *)sub_1A43AB620(),
        v28 = objc_msgSend(v26, sel_contactNameForIdentifier_, v27),
        v26,
        v27,
        v28))
  {
    v3 = sub_1A43AB62C();
    v1 = v29;

  }
  else
  {
    swift_bridgeObjectRetain_n();
    v30 = sub_1A43AB56C();
    v31 = sub_1A43AB71C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v118 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 368) = sub_1A4281D00(v3, v1, &v118);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A427D000, v30, v31, "No name. Setting Likely Apple Account to:%s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v33, -1, -1);
      MEMORY[0x1A859D2B8](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v0 + 616) = v1;
  *(_QWORD *)(v0 + 608) = v3;
  v34 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
  if (v34)
  {
    v35 = (void *)v34;
    v36 = *(void **)(v34 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
    *(_QWORD *)(v0 + 624) = v36;
    v36;

    v37 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v37;
    *v37 = v0;
    v37[1] = sub_1A4296D04;
    return (id)MapsSuggestionsFindMy.location(of:)(*(_QWORD *)(v0 + 488));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = sub_1A43AB56C();
  v40 = sub_1A43AB728();
  v41 = os_log_type_enabled(v39, v40);
  v42 = *(id *)(v0 + 488);
  if (!v41)
  {

    goto LABEL_53;
  }
  v43 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v43 = 0;
  _os_log_impl(&dword_1A427D000, v39, v40, "No Location from FindMy. Ignoring entry.", v43, 2u);
  v44 = (uint64_t)v43;
LABEL_51:
  MEMORY[0x1A859D2B8](v44, -1, -1);

  while (1)
  {
    v55 = *(_QWORD *)(v0 + 496);
    if (v55 == *(_QWORD *)(v0 + 464))
      break;
    v53 = (_OWORD *)(v0 + 472);
    v117 = *(_OWORD *)(v0 + 472);
    v51 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
    v52 = CFSTR("MapsSuggestionsContactActivityPK");
    while (1)
    {
      *v53 = v117;
      v56 = *(_QWORD *)(v0 + 400);
      if ((v56 & 0xC000000000000001) != 0)
        v57 = (char *)MEMORY[0x1A859C73C](v55);
      else
        v57 = (char *)*(id *)(v56 + 8 * v55 + 32);
      v58 = v57;
      *(_QWORD *)(v0 + 488) = v57;
      *(_QWORD *)(v0 + 496) = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
        goto LABEL_60;
      }
      result = objc_msgSend(v57, v51[64], v52);
      if (!result)
      {
        __break(1u);
        goto LABEL_73;
      }
      v59 = result;
      v60 = sub_1A43AB62C();
      v62 = v61;

      *(_QWORD *)(v0 + 504) = v60;
      *(_QWORD *)(v0 + 512) = v62;
      if (!isSharingStopped(v58))
        break;
      if (v2[68].vtable != (void *)-1)
        swift_once();
      v63 = sub_1A43AB584();
      __swift_project_value_buffer(v63, (uint64_t)qword_1ED22ED80);
      swift_bridgeObjectRetain();
      v64 = sub_1A43AB56C();
      v65 = sub_1A43AB71C();
      if (os_log_type_enabled(v64, v65))
      {
        v45 = swift_slowAlloc();
        v46 = v53;
        v47 = v52;
        v48 = v51;
        v49 = swift_slowAlloc();
        v118 = v49;
        *(_DWORD *)v45 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v45 + 4) = sub_1A4281D00(v60, v62, &v118);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1A427D000, v64, v65, "🚮🚮 Friendship ended with %s", (uint8_t *)v45, 0xCu);
        swift_arrayDestroy();
        v50 = v49;
        v51 = v48;
        v52 = v47;
        v53 = v46;
        v0 = v116;
        MEMORY[0x1A859D2B8](v50, -1, -1);
        v54 = v45;
        v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
        MEMORY[0x1A859D2B8](v54, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v55 = *(_QWORD *)(v0 + 496);
      if (v55 == *(_QWORD *)(v0 + 464))
        goto LABEL_56;
    }
    v66 = objc_msgSend(v58, sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllPhoneNumbersKey"));
    if (v66)
    {
      v67 = v66;
      v68 = sub_1A43AB698();

      v55 = sub_1A4298B2C(v68);
      *(_QWORD *)(v0 + 520) = v55;
      swift_bridgeObjectRelease();
      if (v55)
      {
        v69 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
        if (!v69)
        {
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        v90 = (void *)v69;
        v91 = *(void **)(v69 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
        *(_QWORD *)(v0 + 528) = v91;
        v91;

        v88 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 536) = v88;
        v89 = (uint64_t (*)(uint64_t, uint64_t))sub_1A4294D48;
        goto LABEL_62;
      }
    }
LABEL_43:
    v70 = objc_msgSend(*(id *)(v0 + 488), sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllEmailAddressesKey"), v114);
    if (v70)
    {
      v71 = v70;
      v72 = sub_1A43AB698();

      v55 = sub_1A4298B2C(v72);
      *(_QWORD *)(v0 + 552) = v55;
      swift_bridgeObjectRelease();
      if (v55)
      {
        v73 = *(_QWORD *)(v0 + 408);
        swift_bridgeObjectRelease();
        v57 = (char *)MEMORY[0x1A859D360](v73 + 16);
        if (v57)
        {
LABEL_60:
          v86 = v57;
          v87 = *(void **)&v57[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy];
          *(_QWORD *)(v0 + 560) = v87;
          v87;

          v88 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 568) = v88;
          v89 = sub_1A4295D2C;
LABEL_62:
          *v88 = v0;
          v88[1] = v89;
          return (id)MapsSuggestionsFindMy.verifyFriendship(with:)(v55);
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    if (v2[68].vtable != (void *)-1)
      swift_once();
    v74 = *(void **)(v0 + 488);
    v75 = sub_1A43AB584();
    __swift_project_value_buffer(v75, (uint64_t)qword_1ED22ED80);
    v76 = v74;
    v39 = sub_1A43AB56C();
    v77 = sub_1A43AB728();
    v78 = os_log_type_enabled(v39, v77);
    v42 = *(id *)(v0 + 488);
    if (v78)
    {
      v79 = swift_slowAlloc();
      v80 = swift_slowAlloc();
      v118 = v80;
      *(_DWORD *)v79 = 136315138;
      v42 = v42;
      v81 = objc_msgSend(v42, sel_description);
      v82 = sub_1A43AB62C();
      v84 = v83;

      *(_QWORD *)(v79 + 4) = sub_1A4281D00(v82, v84, &v118);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v39, v77, "❌❌ Friendship could not be verified:\n%s\nIgnoring entry.", (uint8_t *)v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v80, -1, -1);
      v44 = v79;
      goto LABEL_51;
    }

LABEL_53:
  }
LABEL_56:
  swift_bridgeObjectRelease();
  v85 = *(_QWORD *)(v0 + 328);
  if (v85 >> 62)
  {
    swift_bridgeObjectRetain();
    v92 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v92)
      goto LABEL_58;
  }
  else if (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_58:
    (*(void (**)(unint64_t, _QWORD))(v0 + 416))(v85, *(_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease();
LABEL_71:
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  result = (id)GEOErrorDomain();
  if (result)
  {
    v93 = result;
    sub_1A43AB62C();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22E9F8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A43B2E40;
    *(_QWORD *)(inited + 32) = sub_1A43AB62C();
    *(_QWORD *)(inited + 40) = v95;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000002ELL;
    *(_QWORD *)(inited + 56) = 0x80000001A43B49B0;
    sub_1A4298C70(inited);
    v96 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v97 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
    v98 = (void *)sub_1A43AB608();
    swift_bridgeObjectRelease();
    v99 = objc_msgSend(v96, sel_initWithDomain_code_userInfo_, v97, -8, v98);

    if (v2[68].vtable != (void *)-1)
      swift_once();
    v100 = sub_1A43AB584();
    __swift_project_value_buffer(v100, (uint64_t)qword_1ED22ED80);
    v101 = v99;
    v102 = sub_1A43AB56C();
    v103 = sub_1A43AB728();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      v105 = swift_slowAlloc();
      v118 = v105;
      *(_DWORD *)v104 = 136315138;
      v106 = objc_msgSend(v101, sel_localizedDescription);
      v107 = sub_1A43AB62C();
      v109 = v108;

      *(_QWORD *)(v0 + 304) = v107;
      *(_QWORD *)(v0 + 312) = v109;
      v110 = sub_1A43AB674();
      *(_QWORD *)(v0 + 320) = sub_1A4281D00(v110, v111, &v118);
      sub_1A43AB7DC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v102, v103, "%s", v104, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v105, -1, -1);
      MEMORY[0x1A859D2B8](v104, -1, -1);

    }
    else
    {

    }
    v112 = *(void (**)(_QWORD, id))(v0 + 416);
    v113 = v101;
    v112(MEMORY[0x1E0DEE9D8], v101);

    goto LABEL_71;
  }
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_1A4295D2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)*v2;
  v3[33] = v2;
  v3[34] = a1;
  v3[35] = a2;
  v4 = (void *)v3[70];
  v3[72] = a2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

id sub_1A4295D9C()
{
  uint64_t v0;
  unint64_t v1;
  __objc2_class *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  id result;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  id v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  const __CFString *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  const __CFString *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  os_log_type_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  uint64_t (*v89)();
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t inited;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(_QWORD, id);
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
  if (!v1)
    goto LABEL_47;
  v3 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 584) = v1;
  *(_QWORD *)(v0 + 592) = v3;
  if (qword_1ED22EAB8 != -1)
    swift_once();
  v4 = sub_1A43AB584();
  *(_QWORD *)(v0 + 600) = __swift_project_value_buffer(v4, (uint64_t)qword_1ED22ED80);
  swift_bridgeObjectRetain_n();
  v5 = sub_1A43AB56C();
  v6 = sub_1A43AB71C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = v3;
    v9 = swift_slowAlloc();
    v118 = v9;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 392) = sub_1A4281D00(v8, v1, &v118);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A427D000, v5, v6, "✅✅ Verified friendship using ID:%s", v7, 0xCu);
    swift_arrayDestroy();
    v10 = v9;
    v3 = v8;
    MEMORY[0x1A859D2B8](v10, -1, -1);
    v11 = v7;
    v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
    MEMORY[0x1A859D2B8](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v13 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 512);
  v14 = *(void **)(v0 + 488);
  v15 = (void *)sub_1A43AB620();
  objc_msgSend(v14, sel_setString_forKey_, v15, CFSTR("MapsSuggestionsContactLikelyAppleIDKey"));

  if (v13 == v3 && v1 == v12 || (sub_1A43AB920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v115 = v3;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v16 = sub_1A43AB56C();
    v17 = sub_1A43AB71C();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 512);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 504);
      v21 = swift_slowAlloc();
      v114 = swift_slowAlloc();
      v118 = v114;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 376) = sub_1A4281D00(v20, v19, &v118);
      v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v3 = v115;
      *(_QWORD *)(v0 + 384) = sub_1A4281D00(v115, v1, &v118);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A427D000, v16, v17, "🚨🚨 Updating ContactActivityPK from %s to %s)", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v114, -1, -1);
      MEMORY[0x1A859D2B8](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v3 = v115;
    }
    v22 = *(void **)(v0 + 488);
    v23 = (void *)sub_1A43AB620();
    objc_msgSend(v22, sel_setString_forKey_, v23, CFSTR("MapsSuggestionsContactActivityPK"));

  }
  v24 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
  if (v24
    && (v25 = (void *)v24,
        v26 = *(id *)(v24 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__contacts),
        v25,
        v27 = (void *)sub_1A43AB620(),
        v28 = objc_msgSend(v26, sel_contactNameForIdentifier_, v27),
        v26,
        v27,
        v28))
  {
    v3 = sub_1A43AB62C();
    v1 = v29;

  }
  else
  {
    swift_bridgeObjectRetain_n();
    v30 = sub_1A43AB56C();
    v31 = sub_1A43AB71C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v118 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 368) = sub_1A4281D00(v3, v1, &v118);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A427D000, v30, v31, "No name. Setting Likely Apple Account to:%s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v33, -1, -1);
      MEMORY[0x1A859D2B8](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v0 + 616) = v1;
  *(_QWORD *)(v0 + 608) = v3;
  v34 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
  if (v34)
  {
    v35 = (void *)v34;
    v36 = *(void **)(v34 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
    *(_QWORD *)(v0 + 624) = v36;
    v36;

    v37 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v37;
    *v37 = v0;
    v37[1] = sub_1A4296D04;
    return (id)MapsSuggestionsFindMy.location(of:)(*(_QWORD *)(v0 + 488));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = sub_1A43AB56C();
  v40 = sub_1A43AB728();
  v41 = os_log_type_enabled(v39, v40);
  v42 = *(id *)(v0 + 488);
  if (!v41)
  {

    goto LABEL_53;
  }
  v43 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v43 = 0;
  _os_log_impl(&dword_1A427D000, v39, v40, "No Location from FindMy. Ignoring entry.", v43, 2u);
  v44 = (uint64_t)v43;
LABEL_51:
  MEMORY[0x1A859D2B8](v44, -1, -1);

  while (1)
  {
    v55 = *(_QWORD *)(v0 + 496);
    if (v55 == *(_QWORD *)(v0 + 464))
      break;
    v53 = (_OWORD *)(v0 + 472);
    v117 = *(_OWORD *)(v0 + 472);
    v51 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
    v52 = CFSTR("MapsSuggestionsContactActivityPK");
    while (1)
    {
      *v53 = v117;
      v56 = *(_QWORD *)(v0 + 400);
      if ((v56 & 0xC000000000000001) != 0)
        v57 = (char *)MEMORY[0x1A859C73C](v55);
      else
        v57 = (char *)*(id *)(v56 + 8 * v55 + 32);
      v58 = v57;
      *(_QWORD *)(v0 + 488) = v57;
      *(_QWORD *)(v0 + 496) = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
        goto LABEL_60;
      }
      result = objc_msgSend(v57, v51[64], v52);
      if (!result)
      {
        __break(1u);
        goto LABEL_73;
      }
      v59 = result;
      v60 = sub_1A43AB62C();
      v62 = v61;

      *(_QWORD *)(v0 + 504) = v60;
      *(_QWORD *)(v0 + 512) = v62;
      if (!isSharingStopped(v58))
        break;
      if (v2[68].vtable != (void *)-1)
        swift_once();
      v63 = sub_1A43AB584();
      __swift_project_value_buffer(v63, (uint64_t)qword_1ED22ED80);
      swift_bridgeObjectRetain();
      v64 = sub_1A43AB56C();
      v65 = sub_1A43AB71C();
      if (os_log_type_enabled(v64, v65))
      {
        v45 = swift_slowAlloc();
        v46 = v53;
        v47 = v52;
        v48 = v51;
        v49 = swift_slowAlloc();
        v118 = v49;
        *(_DWORD *)v45 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v45 + 4) = sub_1A4281D00(v60, v62, &v118);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1A427D000, v64, v65, "🚮🚮 Friendship ended with %s", (uint8_t *)v45, 0xCu);
        swift_arrayDestroy();
        v50 = v49;
        v51 = v48;
        v52 = v47;
        v53 = v46;
        v0 = v116;
        MEMORY[0x1A859D2B8](v50, -1, -1);
        v54 = v45;
        v2 = &OBJC_METACLASS___MapsSuggestionsRatingRequestImprover;
        MEMORY[0x1A859D2B8](v54, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v55 = *(_QWORD *)(v0 + 496);
      if (v55 == *(_QWORD *)(v0 + 464))
        goto LABEL_56;
    }
    v66 = objc_msgSend(v58, sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllPhoneNumbersKey"));
    if (v66)
    {
      v67 = v66;
      v68 = sub_1A43AB698();

      v55 = sub_1A4298B2C(v68);
      *(_QWORD *)(v0 + 520) = v55;
      swift_bridgeObjectRelease();
      if (v55)
      {
        v57 = (char *)MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
        if (!v57)
        {
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
LABEL_60:
        v86 = v57;
        v87 = *(void **)&v57[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy];
        *(_QWORD *)(v0 + 528) = v87;
        v87;

        v88 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 536) = v88;
        v89 = sub_1A4294D48;
LABEL_62:
        *v88 = v0;
        v88[1] = v89;
        return (id)MapsSuggestionsFindMy.verifyFriendship(with:)(v55);
      }
    }
LABEL_43:
    v69 = objc_msgSend(*(id *)(v0 + 488), sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllEmailAddressesKey"), v114);
    if (v69)
    {
      v70 = v69;
      v71 = sub_1A43AB698();

      v55 = sub_1A4298B2C(v71);
      *(_QWORD *)(v0 + 552) = v55;
      swift_bridgeObjectRelease();
      if (v55)
      {
        v72 = *(_QWORD *)(v0 + 408);
        swift_bridgeObjectRelease();
        v73 = MEMORY[0x1A859D360](v72 + 16);
        if (!v73)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        v90 = (void *)v73;
        v91 = *(void **)(v73 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
        *(_QWORD *)(v0 + 560) = v91;
        v91;

        v88 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 568) = v88;
        v89 = sub_1A4295D2C;
        goto LABEL_62;
      }
    }
LABEL_47:
    swift_bridgeObjectRelease();
    if (v2[68].vtable != (void *)-1)
      swift_once();
    v74 = *(void **)(v0 + 488);
    v75 = sub_1A43AB584();
    __swift_project_value_buffer(v75, (uint64_t)qword_1ED22ED80);
    v76 = v74;
    v39 = sub_1A43AB56C();
    v77 = sub_1A43AB728();
    v78 = os_log_type_enabled(v39, v77);
    v42 = *(id *)(v0 + 488);
    if (v78)
    {
      v79 = swift_slowAlloc();
      v80 = swift_slowAlloc();
      v118 = v80;
      *(_DWORD *)v79 = 136315138;
      v42 = v42;
      v81 = objc_msgSend(v42, sel_description);
      v82 = sub_1A43AB62C();
      v84 = v83;

      *(_QWORD *)(v79 + 4) = sub_1A4281D00(v82, v84, &v118);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v39, v77, "❌❌ Friendship could not be verified:\n%s\nIgnoring entry.", (uint8_t *)v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v80, -1, -1);
      v44 = v79;
      goto LABEL_51;
    }

LABEL_53:
  }
LABEL_56:
  swift_bridgeObjectRelease();
  v85 = *(_QWORD *)(v0 + 328);
  if (v85 >> 62)
  {
    swift_bridgeObjectRetain();
    v92 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v92)
      goto LABEL_58;
  }
  else if (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_58:
    (*(void (**)(unint64_t, _QWORD))(v0 + 416))(v85, *(_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease();
LABEL_71:
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  result = (id)GEOErrorDomain();
  if (result)
  {
    v93 = result;
    sub_1A43AB62C();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22E9F8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A43B2E40;
    *(_QWORD *)(inited + 32) = sub_1A43AB62C();
    *(_QWORD *)(inited + 40) = v95;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000002ELL;
    *(_QWORD *)(inited + 56) = 0x80000001A43B49B0;
    sub_1A4298C70(inited);
    v96 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v97 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
    v98 = (void *)sub_1A43AB608();
    swift_bridgeObjectRelease();
    v99 = objc_msgSend(v96, sel_initWithDomain_code_userInfo_, v97, -8, v98);

    if (v2[68].vtable != (void *)-1)
      swift_once();
    v100 = sub_1A43AB584();
    __swift_project_value_buffer(v100, (uint64_t)qword_1ED22ED80);
    v101 = v99;
    v102 = sub_1A43AB56C();
    v103 = sub_1A43AB728();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      v105 = swift_slowAlloc();
      v118 = v105;
      *(_DWORD *)v104 = 136315138;
      v106 = objc_msgSend(v101, sel_localizedDescription);
      v107 = sub_1A43AB62C();
      v109 = v108;

      *(_QWORD *)(v0 + 304) = v107;
      *(_QWORD *)(v0 + 312) = v109;
      v110 = sub_1A43AB674();
      *(_QWORD *)(v0 + 320) = sub_1A4281D00(v110, v111, &v118);
      sub_1A43AB7DC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v102, v103, "%s", v104, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v105, -1, -1);
      MEMORY[0x1A859D2B8](v104, -1, -1);

    }
    else
    {

    }
    v112 = *(void (**)(_QWORD, id))(v0 + 416);
    v113 = v101;
    v112(MEMORY[0x1E0DEE9D8], v101);

    goto LABEL_71;
  }
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_1A4296D04(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 624);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

id sub_1A4296D68()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  void *v20;
  uint8_t *v21;
  unint64_t v22;
  double v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  uint8_t *v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  unint64_t v33;
  char **v34;
  uint64_t v35;
  char *v36;
  void *v37;
  id result;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  BOOL v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double *v77;
  _QWORD *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  void *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  BOOL v88;
  void *v89;
  void *v90;
  uint8_t *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  uint64_t (*v95)();
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t inited;
  uint64_t v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  uint64_t v106;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(_QWORD, id);
  id v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;

  v1 = *(void **)(v0 + 640);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = sub_1A43AB56C();
    v18 = sub_1A43AB728();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(void **)(v0 + 488);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1A427D000, v17, v18, "No Location from FindMy. Ignoring entry.", v21, 2u);
      MEMORY[0x1A859D2B8](v21, -1, -1);

    }
    else
    {

    }
    v4 = *(_QWORD *)(v0 + 480);
    goto LABEL_15;
  }
  v2 = v1;
  v3 = MapsSuggestionsCurrentBestLocation();
  v4 = *(_QWORD *)(v0 + 480);
  if (v3)
  {
    v5 = v3;
    objc_msgSend(v2, sel_distanceFromLocation_, v3);
    v7 = v6;
    v4 = v4 & 0xFFFFFFFF00000000 | GEOConfigMapsSuggestionsDistanceThresholdForWaldoSuggestion;
    GEOConfigGetDouble();
    if (v8 < v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v5;
      v10 = sub_1A43AB56C();
      v11 = sub_1A43AB71C();
      v12 = os_log_type_enabled(v10, v11);
      v13 = *(void **)(v0 + 488);
      if (v12)
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v123 = v2;
        v15 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v14 = 138412290;
        *(_QWORD *)(v0 + 360) = v9;
        v16 = v9;
        sub_1A43AB7DC();
        *v15 = v5;

        _os_log_impl(&dword_1A427D000, v10, v11, "currentLocation:%@ is too far for showing this Waldo Suggestion. Dropping the entry.", v14, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v15, -1, -1);
        MEMORY[0x1A859D2B8](v14, -1, -1);

      }
      else
      {

      }
LABEL_15:
      v22 = *(_QWORD *)(v0 + 472);
      goto LABEL_16;
    }
    v22 = GEOConfigMapsSuggestionsMinimumDistanceForWaldoSuggestion | ((unint64_t)*(unsigned int *)(v0 + 476) << 32);
    GEOConfigGetDouble();
    if (v7 < v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v5;
      v25 = sub_1A43AB56C();
      v26 = sub_1A43AB71C();
      v27 = os_log_type_enabled(v25, v26);
      v28 = *(void **)(v0 + 488);
      if (v27)
      {
        v121 = *(void **)(v0 + 488);
        v124 = v2;
        v29 = (uint8_t *)swift_slowAlloc();
        v120 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v29 = 138412290;
        *(_QWORD *)(v0 + 352) = v24;
        v30 = v24;
        sub_1A43AB7DC();
        *v120 = v5;

        v31 = v25;
        _os_log_impl(&dword_1A427D000, v25, v26, "currentLocation:%@ is too close for showing this Waldo Suggestion. Dropping the entry.", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714AE0);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v120, -1, -1);
        MEMORY[0x1A859D2B8](v29, -1, -1);

LABEL_53:
        goto LABEL_16;
      }

      goto LABEL_16;
    }

  }
  else
  {
    v22 = *(_QWORD *)(v0 + 472);
  }
  *(_QWORD *)(v0 + 656) = v4;
  *(_QWORD *)(v0 + 648) = v22;
  v72 = GEOLocationCoordinate2DFromCLLocationCoordinate2D(objc_msgSend(v2, sel_coordinate));
  v74 = v73;
  if (GEOCoordinateIsValid(v72, v73))
  {
    v75 = MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
    *(_QWORD *)(v0 + 664) = v75;
    if (v75)
    {
      v76 = v75;
      v77 = (double *)swift_task_alloc();
      *(_QWORD *)(v0 + 672) = v77;
      *((_QWORD *)v77 + 2) = v76;
      v77[3] = v72;
      v77[4] = v74;
      v78 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 680) = v78;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DB0);
      *v78 = v0;
      v78[1] = sub_1A4297D38;
      return (id)sub_1A43AB908();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v86 = sub_1A43AB56C();
    v87 = sub_1A43AB728();
    v88 = os_log_type_enabled(v86, v87);
    v89 = *(void **)(v0 + 640);
    v90 = *(void **)(v0 + 488);
    if (v88)
    {
      v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v91 = 0;
      _os_log_impl(&dword_1A427D000, v86, v87, "No mapItem from coordinates. Ignoring entry.", v91, 2u);
      MEMORY[0x1A859D2B8](v91, -1, -1);

    }
    else
    {

    }
    v4 = *(_QWORD *)(v0 + 656);
    v22 = *(_QWORD *)(v0 + 648);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = sub_1A43AB56C();
    v79 = sub_1A43AB728();
    v80 = os_log_type_enabled(v31, v79);
    v81 = *(void **)(v0 + 488);
    if (v80)
    {
      v122 = *(void **)(v0 + 488);
      v82 = (uint8_t *)swift_slowAlloc();
      v83 = swift_slowAlloc();
      v125 = v83;
      v124 = v2;
      *(_DWORD *)v82 = 136315138;
      *(double *)(v0 + 288) = v72;
      *(double *)(v0 + 296) = v74;
      type metadata accessor for GEOLocationCoordinate2D();
      v84 = sub_1A43AB638();
      *(_QWORD *)(v0 + 336) = sub_1A4281D00(v84, v85, &v125);
      sub_1A43AB7DC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A427D000, v31, v79, "Location is not valid:/n%s. Ignoring entry.", v82, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859D2B8](v83, -1, -1);
      MEMORY[0x1A859D2B8](v82, -1, -1);

      goto LABEL_53;
    }

  }
LABEL_16:
  v32 = *(_QWORD *)(v0 + 496);
  if (v32 == *(_QWORD *)(v0 + 464))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    v33 = *(_QWORD *)(v0 + 328);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      v98 = sub_1A43AB8B4();
      swift_bridgeObjectRelease();
      if (v98)
        goto LABEL_19;
    }
    else if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      (*(void (**)(unint64_t, _QWORD))(v0 + 416))(v33, *(_QWORD *)(v0 + 432));
      swift_bridgeObjectRelease();
LABEL_72:
      swift_task_dealloc();
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    result = (id)GEOErrorDomain();
    if (result)
    {
      v99 = result;
      sub_1A43AB62C();
      swift_bridgeObjectRelease();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22E9F8);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1A43B2E40;
      *(_QWORD *)(inited + 32) = sub_1A43AB62C();
      *(_QWORD *)(inited + 40) = v101;
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = 0xD00000000000002ELL;
      *(_QWORD *)(inited + 56) = 0x80000001A43B49B0;
      sub_1A4298C70(inited);
      v102 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v103 = (void *)sub_1A43AB620();
      swift_bridgeObjectRelease();
      v104 = (void *)sub_1A43AB608();
      swift_bridgeObjectRelease();
      v105 = objc_msgSend(v102, sel_initWithDomain_code_userInfo_, v103, -8, v104);

      if (qword_1ED22EAB8 != -1)
        swift_once();
      v106 = sub_1A43AB584();
      __swift_project_value_buffer(v106, (uint64_t)qword_1ED22ED80);
      v107 = v105;
      v108 = sub_1A43AB56C();
      v109 = sub_1A43AB728();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc();
        v111 = swift_slowAlloc();
        v125 = v111;
        *(_DWORD *)v110 = 136315138;
        v112 = objc_msgSend(v107, sel_localizedDescription);
        v113 = sub_1A43AB62C();
        v115 = v114;

        *(_QWORD *)(v0 + 304) = v113;
        *(_QWORD *)(v0 + 312) = v115;
        v116 = sub_1A43AB674();
        *(_QWORD *)(v0 + 320) = sub_1A4281D00(v116, v117, &v125);
        sub_1A43AB7DC();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A427D000, v108, v109, "%s", v110, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v111, -1, -1);
        MEMORY[0x1A859D2B8](v110, -1, -1);

      }
      else
      {

      }
      v118 = *(void (**)(_QWORD, id))(v0 + 416);
      v119 = v107;
      v118(MEMORY[0x1E0DEE9D8], v107);

      goto LABEL_72;
    }
  }
  else
  {
    v34 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
    while (1)
    {
      *(_QWORD *)(v0 + 472) = v22;
      *(_QWORD *)(v0 + 480) = v4;
      v35 = *(_QWORD *)(v0 + 400);
      if ((v35 & 0xC000000000000001) != 0)
        v36 = (char *)MEMORY[0x1A859C73C](v32);
      else
        v36 = (char *)*(id *)(v35 + 8 * v32 + 32);
      v37 = v36;
      *(_QWORD *)(v0 + 488) = v36;
      *(_QWORD *)(v0 + 496) = v32 + 1;
      if (__OFADD__(v32, 1))
      {
        __break(1u);
LABEL_61:
        v92 = v36;
        v93 = *(void **)&v36[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy];
        *(_QWORD *)(v0 + 528) = v93;
        v93;

        v94 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 536) = v94;
        v95 = sub_1A4294D48;
LABEL_63:
        *v94 = v0;
        v94[1] = v95;
        return (id)MapsSuggestionsFindMy.verifyFriendship(with:)(v32);
      }
      result = objc_msgSend(v36, v34[64], CFSTR("MapsSuggestionsContactActivityPK"));
      if (!result)
        break;
      v39 = result;
      v40 = sub_1A43AB62C();
      v42 = v41;

      *(_QWORD *)(v0 + 504) = v40;
      *(_QWORD *)(v0 + 512) = v42;
      if (isSharingStopped(v37))
      {
        if (qword_1ED22EAB8 != -1)
          swift_once();
        v43 = sub_1A43AB584();
        __swift_project_value_buffer(v43, (uint64_t)qword_1ED22ED80);
        swift_bridgeObjectRetain();
        v44 = sub_1A43AB56C();
        v45 = sub_1A43AB71C();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc();
          v47 = swift_slowAlloc();
          v125 = v47;
          *(_DWORD *)v46 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v46 + 4) = sub_1A4281D00(v40, v42, &v125);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1A427D000, v44, v45, "🚮🚮 Friendship ended with %s", (uint8_t *)v46, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A859D2B8](v47, -1, -1);
          v48 = v46;
          v34 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
          MEMORY[0x1A859D2B8](v48, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        v49 = objc_msgSend(v37, sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllPhoneNumbersKey"));
        if (v49)
        {
          v50 = v49;
          v51 = sub_1A43AB698();

          v32 = sub_1A4298B2C(v51);
          *(_QWORD *)(v0 + 520) = v32;
          swift_bridgeObjectRelease();
          if (v32)
          {
            v36 = (char *)MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
            if (v36)
              goto LABEL_61;
            swift_bridgeObjectRelease();
          }
        }
        v52 = objc_msgSend(*(id *)(v0 + 488), sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllEmailAddressesKey"), v120);
        if (v52)
        {
          v53 = v52;
          v54 = sub_1A43AB698();

          v32 = sub_1A4298B2C(v54);
          *(_QWORD *)(v0 + 552) = v32;
          swift_bridgeObjectRelease();
          if (v32)
          {
            v55 = *(_QWORD *)(v0 + 408);
            swift_bridgeObjectRelease();
            v56 = MEMORY[0x1A859D360](v55 + 16);
            if (v56)
            {
              v96 = (void *)v56;
              v97 = *(void **)(v56 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
              *(_QWORD *)(v0 + 560) = v97;
              v97;

              v94 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 568) = v94;
              v95 = sub_1A4295D2C;
              goto LABEL_63;
            }
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        if (qword_1ED22EAB8 != -1)
          swift_once();
        v57 = *(void **)(v0 + 488);
        v58 = sub_1A43AB584();
        __swift_project_value_buffer(v58, (uint64_t)qword_1ED22ED80);
        v59 = v57;
        v60 = sub_1A43AB56C();
        v61 = sub_1A43AB728();
        v62 = os_log_type_enabled(v60, v61);
        v63 = *(void **)(v0 + 488);
        if (v62)
        {
          v64 = swift_slowAlloc();
          v65 = swift_slowAlloc();
          v125 = v65;
          *(_DWORD *)v64 = 136315138;
          v66 = v63;
          v67 = objc_msgSend(v66, sel_description);
          v68 = sub_1A43AB62C();
          v70 = v69;

          v71 = v68;
          v34 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
          *(_QWORD *)(v64 + 4) = sub_1A4281D00(v71, v70, &v125);

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A427D000, v60, v61, "❌❌ Friendship could not be verified:\n%s\nIgnoring entry.", (uint8_t *)v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A859D2B8](v65, -1, -1);
          MEMORY[0x1A859D2B8](v64, -1, -1);

        }
        else
        {

        }
        v22 = *(_QWORD *)(v0 + 472);
        v4 = *(_QWORD *)(v0 + 480);
      }
      v32 = *(_QWORD *)(v0 + 496);
      if (v32 == *(_QWORD *)(v0 + 464))
        goto LABEL_17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A4297D38()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

id sub_1A4297D98()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint8_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  void *v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  char **v41;
  const __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  id result;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const __CFString *v71;
  void *v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  uint64_t (*v90)();
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t inited;
  uint64_t v96;
  id v97;
  void *v98;
  void *v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(_QWORD, id);
  id v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v1 = *(_QWORD *)(v0 + 344);
  if (!v1)
    goto LABEL_21;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = (id)sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_4;
    goto LABEL_20;
  }
  v2 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
  {
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = sub_1A43AB56C();
    v33 = sub_1A43AB728();
    v34 = os_log_type_enabled(v32, v33);
    v25 = *(void **)(v0 + 640);
    v35 = *(void **)(v0 + 488);
    if (v34)
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1A427D000, v32, v33, "No mapItem from coordinates. Ignoring entry.", v36, 2u);
      MEMORY[0x1A859D2B8](v36, -1, -1);

    }
    else
    {

    }
    goto LABEL_24;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x1A859C73C](0, v1);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_71;
    }
    v3 = *(_QWORD *)(v1 + 32);
    swift_unknownObjectRetain();
  }
  v4 = *(void **)(v0 + 640);
  v5 = *(void **)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 456);
  v117 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 408);
  swift_bridgeObjectRelease();
  v9 = v8 + 16;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 3);
  objc_msgSend(v5, sel_setNumber_forKey_, v10, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));

  v11 = objc_msgSend((id)objc_opt_self(), sel_mapItemStorageForGEOMapItem_, v3);
  objc_msgSend(v5, sel_setGeoMapItem_, v11);

  v12 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setString_forKey_, v12, CFSTR("MapsSuggestionsContactDisplayNameKey"));

  objc_msgSend(v5, sel_setLocationCoordinateKeysFromLocation_, v4);
  v13 = objc_msgSend(v4, sel_timestamp);
  sub_1A43AB428();

  v14 = (void *)sub_1A43AB3E0();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v117);
  objc_msgSend(v5, sel_setDate_forKey_, v14, CFSTR("MapsSuggestionsContactLocationTimestampKey"));

  v15 = MEMORY[0x1A859D360](v9);
  if (v15)
  {
    v16 = (void *)v15;
    v17 = *(id *)(v15 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__contacts);

    v18 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v17, sel_dataForContactWithIdentifier_, v18);

    if (v19)
    {
      v20 = *(void **)(v0 + 488);
      v21 = sub_1A43AB3BC();
      v23 = v22;

      v24 = (void *)sub_1A43AB3B0();
      objc_msgSend(v20, sel_setData_forKey_, v24, CFSTR("MapsSuggestionsContactAsDataKey"));

      sub_1A429B240(v21, v23);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(*(id *)(v0 + 488), sel_containsKey_, CFSTR("MapsSuggestionsContactAsDataKey")) & 1) != 0)
  {
    MEMORY[0x1A859C574](*(id *)(v0 + 488));
    if (*(_QWORD *)((*(_QWORD *)(v0 + 328) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 328) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_1A43AB6BC();
    v25 = *(void **)(v0 + 640);
    v26 = *(void **)(v0 + 488);
    sub_1A43AB6D4();
    sub_1A43AB6B0();

    swift_unknownObjectRelease();
  }
  else
  {
    v27 = sub_1A43AB56C();
    v28 = sub_1A43AB728();
    v29 = os_log_type_enabled(v27, v28);
    v25 = *(void **)(v0 + 640);
    v30 = *(void **)(v0 + 488);
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1A427D000, v27, v28, "Could not set CNContact as a data blob. Ignoring entry.", v31, 2u);
      MEMORY[0x1A859D2B8](v31, -1, -1);

      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
LABEL_24:

  v37 = *(_QWORD *)(v0 + 496);
  if (v37 != *(_QWORD *)(v0 + 464))
  {
    v39 = (uint64_t *)(v0 + 656);
    v40 = (uint64_t *)(v0 + 648);
    v114 = (uint64_t *)(v0 + 472);
    v115 = (uint64_t *)(v0 + 480);
    v41 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
    v42 = CFSTR("MapsSuggestionsContactActivityPK");
    v116 = v0;
    do
    {
      v43 = *v39;
      v44 = *v40;
      while (1)
      {
        *(_QWORD *)(v0 + 472) = v44;
        *(_QWORD *)(v0 + 480) = v43;
        v52 = *(_QWORD *)(v0 + 400);
        if ((v52 & 0xC000000000000001) != 0)
          v53 = (char *)MEMORY[0x1A859C73C](v37);
        else
          v53 = (char *)*(id *)(v52 + 8 * v37 + 32);
        v54 = v53;
        *(_QWORD *)(v0 + 488) = v53;
        *(_QWORD *)(v0 + 496) = v37 + 1;
        if (__OFADD__(v37, 1))
        {
          __break(1u);
          goto LABEL_58;
        }
        result = objc_msgSend(v53, v41[64], v42);
        if (!result)
        {
          __break(1u);
          goto LABEL_73;
        }
        v56 = result;
        v57 = sub_1A43AB62C();
        v59 = v58;

        *(_QWORD *)(v0 + 504) = v57;
        *(_QWORD *)(v0 + 512) = v59;
        if (!isSharingStopped(v54))
          break;
        if (qword_1ED22EAB8 != -1)
          swift_once();
        v60 = sub_1A43AB584();
        __swift_project_value_buffer(v60, (uint64_t)qword_1ED22ED80);
        swift_bridgeObjectRetain();
        v61 = sub_1A43AB56C();
        v62 = sub_1A43AB71C();
        if (os_log_type_enabled(v61, v62))
        {
          v45 = swift_slowAlloc();
          v46 = v44;
          v47 = v43;
          v48 = v42;
          v49 = swift_slowAlloc();
          v118 = v49;
          *(_DWORD *)v45 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v45 + 4) = sub_1A4281D00(v57, v59, &v118);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1A427D000, v61, v62, "🚮🚮 Friendship ended with %s", (uint8_t *)v45, 0xCu);
          swift_arrayDestroy();
          v50 = v49;
          v42 = v48;
          v43 = v47;
          v44 = v46;
          v0 = v116;
          MEMORY[0x1A859D2B8](v50, -1, -1);
          v51 = v45;
          v41 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
          MEMORY[0x1A859D2B8](v51, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v37 = *(_QWORD *)(v0 + 496);
        if (v37 == *(_QWORD *)(v0 + 464))
          goto LABEL_25;
      }
      v63 = objc_msgSend(v54, sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllPhoneNumbersKey"));
      if (v63)
      {
        v64 = v63;
        v65 = sub_1A43AB698();

        v37 = sub_1A4298B2C(v65);
        *(_QWORD *)(v0 + 520) = v37;
        swift_bridgeObjectRelease();
        if (v37)
        {
          v53 = (char *)MEMORY[0x1A859D360](*(_QWORD *)(v0 + 408) + 16);
          if (!v53)
          {
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
LABEL_58:
          v87 = v53;
          v88 = *(void **)&v53[OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy];
          *(_QWORD *)(v0 + 528) = v88;
          v88;

          v89 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 536) = v89;
          v90 = sub_1A4294D48;
LABEL_60:
          *v89 = v0;
          v89[1] = v90;
          return (id)MapsSuggestionsFindMy.verifyFriendship(with:)(v37);
        }
      }
LABEL_46:
      v66 = objc_msgSend(*(id *)(v0 + 488), sel_arrayForKey_, CFSTR("MapsSuggestionsContactAllEmailAddressesKey"));
      if (v66)
      {
        v67 = v66;
        v68 = sub_1A43AB698();

        v37 = sub_1A4298B2C(v68);
        *(_QWORD *)(v0 + 552) = v37;
        swift_bridgeObjectRelease();
        if (v37)
        {
          v69 = *(_QWORD *)(v0 + 408);
          swift_bridgeObjectRelease();
          v70 = MEMORY[0x1A859D360](v69 + 16);
          if (v70)
          {
            v91 = (void *)v70;
            v92 = *(void **)(v70 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__findMy);
            *(_QWORD *)(v0 + 560) = v92;
            v92;

            v89 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 568) = v89;
            v90 = sub_1A4295D2C;
            goto LABEL_60;
          }
          swift_bridgeObjectRelease();
        }
      }
      v71 = v42;
      swift_bridgeObjectRelease();
      if (qword_1ED22EAB8 != -1)
        swift_once();
      v72 = *(void **)(v0 + 488);
      v73 = sub_1A43AB584();
      __swift_project_value_buffer(v73, (uint64_t)qword_1ED22ED80);
      v74 = v72;
      v75 = sub_1A43AB56C();
      v76 = sub_1A43AB728();
      v77 = os_log_type_enabled(v75, v76);
      v78 = *(void **)(v0 + 488);
      if (v77)
      {
        v79 = swift_slowAlloc();
        v80 = swift_slowAlloc();
        v118 = v80;
        *(_DWORD *)v79 = 136315138;
        v81 = v78;
        v82 = objc_msgSend(v81, sel_description);
        v83 = sub_1A43AB62C();
        v85 = v84;

        v86 = v83;
        v41 = &selRef_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_;
        *(_QWORD *)(v79 + 4) = sub_1A4281D00(v86, v85, &v118);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A427D000, v75, v76, "❌❌ Friendship could not be verified:\n%s\nIgnoring entry.", (uint8_t *)v79, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v80, -1, -1);
        MEMORY[0x1A859D2B8](v79, -1, -1);

      }
      else
      {

      }
      v37 = *(_QWORD *)(v0 + 496);
      v40 = v114;
      v39 = v115;
      v42 = v71;
    }
    while (v37 != *(_QWORD *)(v0 + 464));
  }
LABEL_25:
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v0 + 328);
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    v93 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v93)
      goto LABEL_27;
  }
  else if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_27:
    (*(void (**)(unint64_t, _QWORD))(v0 + 416))(v38, *(_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease();
LABEL_68:
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  result = (id)GEOErrorDomain();
  if (result)
  {
    v94 = result;
    sub_1A43AB62C();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22E9F8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A43B2E40;
    *(_QWORD *)(inited + 32) = sub_1A43AB62C();
    *(_QWORD *)(inited + 40) = v96;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000002ELL;
    *(_QWORD *)(inited + 56) = 0x80000001A43B49B0;
    sub_1A4298C70(inited);
    v97 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v98 = (void *)sub_1A43AB620();
    swift_bridgeObjectRelease();
    v99 = (void *)sub_1A43AB608();
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v97, sel_initWithDomain_code_userInfo_, v98, -8, v99);

    if (qword_1ED22EAB8 == -1)
    {
LABEL_64:
      v100 = sub_1A43AB584();
      __swift_project_value_buffer(v100, (uint64_t)qword_1ED22ED80);
      v101 = v2;
      v102 = sub_1A43AB56C();
      v103 = sub_1A43AB728();
      if (os_log_type_enabled(v102, v103))
      {
        v104 = (uint8_t *)swift_slowAlloc();
        v105 = swift_slowAlloc();
        v118 = v105;
        *(_DWORD *)v104 = 136315138;
        v106 = objc_msgSend(v101, sel_localizedDescription);
        v107 = sub_1A43AB62C();
        v109 = v108;

        *(_QWORD *)(v0 + 304) = v107;
        *(_QWORD *)(v0 + 312) = v109;
        v110 = sub_1A43AB674();
        *(_QWORD *)(v0 + 320) = sub_1A4281D00(v110, v111, &v118);
        sub_1A43AB7DC();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A427D000, v102, v103, "%s", v104, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v105, -1, -1);
        MEMORY[0x1A859D2B8](v104, -1, -1);

      }
      else
      {

      }
      v112 = *(void (**)(_QWORD, id))(v0 + 416);
      v113 = v101;
      v112(MEMORY[0x1E0DEE9D8], v101);

      goto LABEL_68;
    }
LABEL_71:
    swift_once();
    goto LABEL_64;
  }
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_1A4298B2C(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  sub_1A4290508(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_1A4282790(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A4290508(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1A4290508(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

unint64_t sub_1A4298C70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAE8);
  v2 = sub_1A43AB8E4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A429B338(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_1A429A084(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1A4289C10(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MapsSuggestionsContactActivity.contactActivityEntries(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  dispatch_group_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  NSObject *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1A43AB59C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A43AB5C0();
  v10 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = dispatch_group_create();
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__queue);
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v13;
  v15[5] = v14;
  aBlock[4] = sub_1A429939C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_7;
  v16 = _Block_copy(aBlock);
  sub_1A42855E0(a1);
  v17 = v13;
  swift_retain();
  sub_1A43AB5B4();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A429BC38((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0, MEMORY[0x1E0DEAF38]);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v12, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  swift_release();
  return swift_release();
}

unint64_t sub_1A4298FEC(unint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, void *);
  void *v32;
  void (*v33)(unint64_t, void *);
  _QWORD *v34;

  if (result)
  {
    v6 = result;
    v7 = a4 + 16;
    v8 = swift_allocObject();
    v9 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
    v10 = (uint64_t *)(v8 + 16);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v9;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = a3;
    v12[3] = v11;
    v12[4] = v8;
    v13 = a3;
    swift_retain();
    swift_retain();
    v28 = a2;
    sub_1A42855E0(v6);
    dispatch_group_enter(v13);
    swift_beginAccess();
    v14 = MEMORY[0x1A859D360](v7);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = *(id *)(v14 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__biome);

      v33 = sub_1A429BB24;
      v34 = v12;
      aBlock = MEMORY[0x1E0C809B0];
      v30 = 1107296256;
      v31 = sub_1A4291EF4;
      v32 = &block_descriptor_70;
      v17 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v16, sel_entriesFromSmartRepliesWithCompletionHandler_, v17);
      _Block_release(v17);

    }
    dispatch_group_enter(v13);
    swift_beginAccess();
    v18 = MEMORY[0x1A859D360](v7);
    if (v18)
    {
      v19 = (void *)v18;
      v20 = *(id *)(v18 + OBJC_IVAR____TtC15MapsSuggestions30MapsSuggestionsContactActivity__biome);

      v33 = sub_1A429BB24;
      v34 = v12;
      aBlock = MEMORY[0x1E0C809B0];
      v30 = 1107296256;
      v31 = sub_1A4291EF4;
      v32 = &block_descriptor_73;
      v21 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_entriesFromFindMyWithCompletionHandler_, v21);
      _Block_release(v21);

    }
    sub_1A43AB740();
    swift_beginAccess();
    v22 = MEMORY[0x1A859D360](v7);
    if (!v22)
    {
      swift_release();
      sub_1A42856E0(v6);
      goto LABEL_13;
    }
    v23 = (void *)v22;
    swift_beginAccess();
    v24 = *v10;
    swift_beginAccess();
    v25 = *(_QWORD *)(v11 + 16);
    v26 = *(void **)(v25 + 16);
    swift_bridgeObjectRetain();
    if (v26)
    {
      swift_bridgeObjectRetain();
      result = sub_1A429AE58((unint64_t)v26);
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (result < *(_QWORD *)(v25 + 16))
      {
        v26 = *(void **)(v25 + 8 * result + 32);
        v27 = v26;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      __break(1u);
      return result;
    }
LABEL_11:
    sub_1A4293FC8(v6, v28, v24, v26);
    swift_release();
    swift_bridgeObjectRelease();

    sub_1A42856E0(v6);
LABEL_13:
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A4299360()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();

  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1A429939C()
{
  uint64_t v0;

  return sub_1A4298FEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_1A42993A8(unint64_t a1, void *a2, dispatch_group_t group, uint64_t a4)
{
  _QWORD **v7;
  _QWORD *v8;
  id v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23[3];

  if (a1)
  {
    if (a2)
    {
      v7 = (_QWORD **)(a4 + 16);
      swift_beginAccess();
      v8 = *v7;
      v9 = a2;
      swift_bridgeObjectRetain();
      v10 = a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v7 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v8 = sub_1A4299C74(0, v8[2] + 1, 1, v8);
        *v7 = v8;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        v8 = sub_1A4299C74((_QWORD *)(v12 > 1), v13 + 1, 1, v8);
        *v7 = v8;
      }
      v8[2] = v13 + 1;
      v8[v13 + 4] = a2;
      swift_endAccess();
      if (qword_1ED22EAB8 != -1)
        swift_once();
      v14 = sub_1A43AB584();
      __swift_project_value_buffer(v14, (uint64_t)qword_1ED22ED80);
      v15 = a2;
      v16 = a2;
      v17 = sub_1A43AB56C();
      v18 = sub_1A43AB728();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v20 = swift_slowAlloc();
        v23[0] = v20;
        *(_DWORD *)v19 = 136315138;
        swift_getErrorValue();
        v21 = sub_1A43AB944();
        sub_1A4281D00(v21, v22, v23);
        sub_1A43AB7DC();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A427D000, v17, v18, "New error:%s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859D2B8](v20, -1, -1);
        MEMORY[0x1A859D2B8](v19, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_beginAccess();
    sub_1A42996A8(a1);
    swift_endAccess();
    dispatch_group_leave(group);
  }
  else
  {
    dispatch_group_leave(group);
  }
}

uint64_t sub_1A42996A8(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1A859C748](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1A429AEE0(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1A43AB6B0();
  }
  __break(1u);
  return result;
}

void sub_1A42998F8(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  if (a1)
  {
    sub_1A4289D70(0, (unint64_t *)&unk_1ED22ECA0);
    v5 = (void *)sub_1A43AB68C();
  }
  if (a2)
    v6 = sub_1A43AB3A4();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);

}

id MapsSuggestionsContactActivity.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsContactActivity.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsContactActivity.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsContactActivity();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A4299AD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A4299B0C()
{
  uint64_t v0;

  return sub_1A42941E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_1A4299B1C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A4299B60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1A42826AC;
  return sub_1A4294308(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1A4299BF4()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1ED22ED80);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED22ED80);
  return sub_1A43AB578();
}

_QWORD *sub_1A4299C74(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DE8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A429BB30(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A4299D80(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE714DD8);
  v6 = sub_1A43AB8CC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      swift_unknownObjectRetain();
    }
    result = sub_1A43AB7B8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1A429A054(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A43AB7B8();
  return sub_1A429A0E8(a1, v2);
}

unint64_t sub_1A429A084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A43AB950();
  sub_1A43AB650();
  v4 = sub_1A43AB95C();
  return sub_1A429A200(a1, a2, v4);
}

unint64_t sub_1A429A0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1A4289D70(0, &qword_1EE714DD0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1A43AB7C4();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1A43AB7C4();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1A429A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A43AB920() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A43AB920() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1A429A2E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE714DD8);
  result = sub_1A43AB8E4();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v30)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v30)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v30)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v30)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v30)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = 8 * v13;
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17);
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + v17);
    swift_unknownObjectRetain();
    result = sub_1A43AB7B8();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = 8 * v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v28) = v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v28) = v18;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A429A574(unint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_1A429A054(a1);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v9 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1A429ACB0();
        v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v6 = (id)a1;
  v7 = sub_1A43AB884();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  v8 = sub_1A43AB878();
  v9 = sub_1A429A760(v5, v8);
  swift_retain();
  a1 = sub_1A429A054((uint64_t)v6);
  v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * a1);
  sub_1A429A9A0(a1, v9);
  *v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1A429A6C0(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = sub_1A43AB878();
  if (!__OFADD__(result, 1))
  {
    *v3 = sub_1A429A760(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1A429AB50(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A429A760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE714DD8);
    v2 = sub_1A43AB8D8();
    v18 = v2;
    sub_1A43AB86C();
    v3 = sub_1A43AB890();
    if (v3)
    {
      v4 = v3;
      sub_1A4289D70(0, &qword_1EE714DD0);
      do
      {
        swift_dynamicCast();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC8);
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          sub_1A4299D80(v12 + 1, 1);
          v2 = v18;
        }
        result = sub_1A43AB7B8();
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1A43AB890();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

void sub_1A429A9A0(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_1A43AB818();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v11 = sub_1A43AB7B8();

        v12 = v11 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(a2 + 48);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || v16 >= v17 + 1)
              *v16 = *v17;
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v9 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

id sub_1A429AB50(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1A429A054((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1A429ACB0();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_unknownObjectRelease();
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1A4299D80(v12, a3 & 1);
  v18 = sub_1A429A054((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1A4289D70(0, &qword_1EE714DD0);
  result = (id)sub_1A43AB938();
  __break(1u);
  return result;
}

void *sub_1A429ACB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE714DD8);
  v2 = *v0;
  v3 = sub_1A43AB8C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_unknownObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1A429AE58(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x1A859D2D0](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x1A859D2D0](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A429AEE0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1A43AB8B4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1A429BC38((unint64_t *)&unk_1EE714E00, &qword_1EE714DF8, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DF8);
          v12 = sub_1A429B0FC(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1A4289D70(0, (unint64_t *)&unk_1ED22ECA0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1A43AB8F0();
  __break(1u);
  return result;
}

void (*sub_1A429B0FC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1A429B17C(v6, a2, a3);
  return sub_1A429B150;
}

void sub_1A429B150(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1A429B17C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1A859C73C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1A429B1E8;
  }
  __break(1u);
  return result;
}

void sub_1A429B1E8(id *a1)
{

}

BOOL GEOCoordinateIsValid(double a1, double a2)
{
  _BOOL4 v2;

  v2 = a2 >= -180.0;
  if (a2 > 180.0)
    v2 = 0;
  if (a1 < -90.0)
    v2 = 0;
  return a1 <= 90.0 && v2;
}

uint64_t sub_1A429B234(uint64_t a1)
{
  uint64_t v1;

  return sub_1A4293E90(a1, *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1A429B240(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1A429B284()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAD0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1A429B2E8()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAD0);
  return sub_1A4293F84();
}

uint64_t sub_1A429B338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22EAC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A429B380()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A429B3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A4293B48(a1, a2, *(_BYTE *)(v2 + 16), *(char **)(v2 + 24), *(void **)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40));
}

uint64_t sub_1A429B3C4@<X0>(int64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1A42928D0(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

BOOL sub_1A429B3DC(void *a1)
{
  return sub_1A429312C(a1);
}

uint64_t sub_1A429B3E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(id, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v20 = (unint64_t *)result;
  v21 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v23)
      return sub_1A429A2E0(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v23)
        return sub_1A429A2E0(v20, a2, v21, a3);
      v16 = *(_QWORD *)(v22 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v23)
          return sub_1A429A2E0(v20, a2, v21, a3);
        v16 = *(_QWORD *)(v22 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    v13 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    swift_unknownObjectRetain();
    v14 = a4(v13, v12);

    result = swift_unknownObjectRelease();
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return sub_1A429A2E0(v20, a2, v21, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v23)
    return sub_1A429A2E0(v20, a2, v21, a3);
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v23)
      return sub_1A429A2E0(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1A429B5D8(uint64_t isStackAllocationSafe, uint64_t (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_1A429B3E4((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_1A429B3E4((uint64_t)v11, v8, v6, a2);
    MEMORY[0x1A859D2B8](v11, -1, -1);
  }
  return a3;
}

uint64_t sub_1A429B748(uint64_t a1, uint64_t (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1E0DEE9E0];
    v25 = MEMORY[0x1E0DEE9E0];
    sub_1A43AB86C();
    if (sub_1A43AB890())
    {
      sub_1A4289D70(0, &qword_1EE714DD0);
      do
      {
        swift_dynamicCast();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DC8);
        swift_dynamicCast();
        v7 = v23;
        swift_unknownObjectRetain();
        v8 = ((uint64_t (*)(id))a2)(v7);

        swift_unknownObjectRelease();
        if ((v8 & 1) != 0)
        {
          v9 = v25;
          v10 = *(_QWORD *)(v25 + 16);
          if (*(_QWORD *)(v25 + 24) <= v10)
          {
            v12 = v10 + 1;
            v13 = v7;
            swift_unknownObjectRetain();
            sub_1A4299D80(v12, 1);
            v9 = v25;
          }
          else
          {
            v11 = v7;
            swift_unknownObjectRetain();
          }
          result = sub_1A43AB7B8();
          v15 = v9 + 64;
          v16 = -1 << *(_BYTE *)(v9 + 32);
          v17 = result & ~v16;
          v18 = v17 >> 6;
          if (((-1 << v17) & ~*(_QWORD *)(v9 + 64 + 8 * (v17 >> 6))) != 0)
          {
            v5 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v9 + 64 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v19 = 0;
            v20 = (unint64_t)(63 - v16) >> 6;
            do
            {
              if (++v18 == v20 && (v19 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v21 = v18 == v20;
              if (v18 == v20)
                v18 = 0;
              v19 |= v21;
              v22 = *(_QWORD *)(v15 + 8 * v18);
            }
            while (v22 == -1);
            v5 = __clz(__rbit64(~v22)) + (v18 << 6);
          }
          *(_QWORD *)(v15 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
          v6 = 8 * v5;
          *(_QWORD *)(*(_QWORD *)(v9 + 48) + v6) = v7;
          *(_QWORD *)(*(_QWORD *)(v9 + 56) + v6) = v24;
          ++*(_QWORD *)(v9 + 16);
        }
        swift_unknownObjectRelease();

      }
      while (sub_1A43AB890());
      v4 = v25;
    }
    sub_1A4290F48();
  }
  else
  {
    v4 = sub_1A429B5D8(a1, a2, a3);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_1A429BA24()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A429BA58()
{
  uint64_t v0;

  return sub_1A4293CCC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1A429BA64()
{
  return swift_deallocObject();
}

uint64_t sub_1A429BA74()
{
  uint64_t v0;

  return sub_1A429C68C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1A429BA7C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A429BAA0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A42998F8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A429BAA8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1A429BACC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A429BAF0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1A429BB24(unint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A42993A8(a1, a2, *(dispatch_group_t *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1A429BB30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE714DF0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A43AB8F0();
  __break(1u);
  return result;
}

uint64_t sub_1A429BC38(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A859D234](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A429BCAC(uint64_t a1, uint64_t a2)
{
  id v3;

  type metadata accessor for MapsSuggestionsOrderPickup();
  v3 = (id)sub_1A43AB68C();
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v3);

}

uint64_t MapsSuggestionsFakeFinanceKitConnector.currentOrderPickups(period:)()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MapsSuggestionsFakeFinanceKitConnector.orderPickups.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MapsSuggestionsFakeFinanceKitConnector.orderPickups.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector_orderPickups);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsFakeFinanceKitConnector.orderPickups.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MapsSuggestionsFakeFinanceKitConnector._callbackHandle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector__callbackHandle);
  swift_beginAccess();
  v2 = *v1;
  sub_1A42855E0(*v1);
  return v2;
}

uint64_t sub_1A429C078(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for MapsSuggestionsOrderPickup();
  v2 = sub_1A43AB698();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t MapsSuggestionsFakeFinanceKitConnector._callbackHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector__callbackHandle);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return sub_1A42856E0(v6);
}

uint64_t (*MapsSuggestionsFakeFinanceKitConnector._callbackHandle.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t MapsSuggestionsFakeFinanceKitConnector.startObservingOrderPickups(in:callback:)(uint64_t a1, uint64_t a2)
{
  sub_1A429C548(a1, a2);
  return swift_unknownObjectRetain();
}

Swift::Void __swiftcall MapsSuggestionsFakeFinanceKitConnector.updatedOrders()()
{
  uint64_t v0;
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (void (**)(uint64_t))(v0
                                     + OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector__callbackHandle);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    swift_beginAccess();
    sub_1A42855E0((uint64_t)v2);
    v3 = swift_bridgeObjectRetain();
    v2(v3);
    sub_1A42856E0((uint64_t)v2);
    swift_bridgeObjectRelease();
  }
}

id MapsSuggestionsFakeFinanceKitConnector.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MapsSuggestionsFakeFinanceKitConnector.init()()
{
  char *v0;
  char *v1;
  objc_class *v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector_orderPickups] = MEMORY[0x1E0DEE9D8];
  v1 = &v0[OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector__callbackHandle];
  v2 = (objc_class *)type metadata accessor for MapsSuggestionsFakeFinanceKitConnector();
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id MapsSuggestionsFakeFinanceKitConnector.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsFakeFinanceKitConnector();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A429C548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  v3 = v2;
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC15MapsSuggestions38MapsSuggestionsFakeFinanceKitConnector__callbackHandle);
  swift_beginAccess();
  v7 = *v6;
  *v6 = a1;
  v6[1] = a2;
  swift_retain();
  sub_1A42856E0(v7);
  v8 = (void (*)(uint64_t))*v6;
  if (*v6)
  {
    swift_beginAccess();
    sub_1A42855E0((uint64_t)v8);
    v9 = swift_bridgeObjectRetain();
    v8(v9);
    sub_1A42856E0((uint64_t)v8);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t type metadata accessor for MapsSuggestionsFakeFinanceKitConnector()
{
  return objc_opt_self();
}

uint64_t sub_1A429C640()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1A429C684(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1A429C68C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1A429C6AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t MapsSuggestionsFinanceSource._delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__delegate;
  swift_beginAccess();
  return MEMORY[0x1A859D360](v1);
}

uint64_t MapsSuggestionsFinanceSource._delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MapsSuggestionsFinanceSource._delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A859D360](v5);
  return sub_1A429230C;
}

Swift::Void __swiftcall MapsSuggestionsFinanceSource.financeKitDidChange(entries:)(Swift::OpaquePointer_optional entries)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v2 = &v1[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__delegate];
  swift_beginAccess();
  v3 = MEMORY[0x1A859D360](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_1A4289D70(0, (unint64_t *)&unk_1ED22ECA0);
    swift_bridgeObjectRetain();
    v5 = (void *)sub_1A43AB68C();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v1, sel_uniqueName);
    if (!v6)
      goto LABEL_6;
    v7 = v6;
    objc_msgSend(v4, sel_addOrUpdateSuggestionEntries_source_, v5, v6);
    swift_unknownObjectRelease();

  }
  v8 = *(NSObject **)&v1[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource_queue];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1A429CA5C;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1A429CA74;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A429C6AC;
  aBlock[3] = &block_descriptor_3;
  v11 = _Block_copy(aBlock);
  v12 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return;
  __break(1u);
LABEL_6:
  __break(1u);
}

uint64_t sub_1A429C9D0(uint64_t result)
{
  uint64_t *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(result + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__updateCompleteHandler);
  v2 = *(void (**)(uint64_t))(result
                                      + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__updateCompleteHandler);
  if (v2)
  {
    v3 = swift_retain();
    v2(v3);
    sub_1A42856E0((uint64_t)v2);
    v4 = *v1;
    *v1 = 0;
    v1[1] = 0;
    return sub_1A42856E0(v4);
  }
  return result;
}

uint64_t sub_1A429CA38()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A429CA5C()
{
  uint64_t v0;

  return sub_1A429C9D0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A429CA64()
{
  return swift_deallocObject();
}

uint64_t sub_1A429CA74()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t static MapsSuggestionsFinanceSource.disposition()()
{
  return 2;
}

id sub_1A429CABC(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  objc_class *v14;
  id v15;
  id v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  objc_super v24;
  uint64_t v25;

  v22 = a1;
  v23 = a2;
  v3 = sub_1A43AB764();
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB74C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1A43AB5C0();
  MEMORY[0x1E0C80A78](v8);
  swift_unknownObjectWeakInit();
  v9 = &v2[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__updateCompleteHandler];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v19 = OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource_queue;
  v18[1] = sub_1A4289D70(0, (unint64_t *)&qword_1ED22ED00);
  v10 = v2;
  sub_1A43AB5B4();
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&qword_1ED22ECF0, v7, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECD0);
  sub_1A4284C58((unint64_t *)&qword_1ED22ECE0, (uint64_t *)&unk_1ED22ECD0);
  sub_1A43AB80C();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v5, *MEMORY[0x1E0DEF8D0], v21);
  v11 = v22;
  *(_QWORD *)&v2[v19] = sub_1A43AB794();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v12 = v23;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__financeKit] = v23;
  v13 = v12;

  v14 = (objc_class *)type metadata accessor for MapsSuggestionsFinanceSource();
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
  if (!v15)
  {
    sub_1A43AB62C();
    v15 = (id)sub_1A43AB620();
    swift_bridgeObjectRelease();
  }
  v24.receiver = v10;
  v24.super_class = v14;
  v16 = objc_msgSendSuper2(&v24, sel_initWithDelegate_name_, v11, v15);

  swift_unknownObjectRelease();
  return v16;
}

id MapsSuggestionsFinanceSource.__allocating_init(from:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A429D748(a1, a2, a3, (SEL *)&selRef_initFromResourceDepot_name_);
}

id MapsSuggestionsFinanceSource.init(from:name:)(void *a1)
{
  id result;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  swift_bridgeObjectRelease();
  result = objc_msgSend(a1, sel_oneSourceDelegate);
  if (result)
  {
    v3 = (uint64_t)result;
    result = objc_msgSend(a1, sel_oneFinanceKit);
    if (result)
    {
      v4 = result;
      v5 = objc_allocWithZone((Class)type metadata accessor for MapsSuggestionsFinanceSource());
      v6 = sub_1A429CABC(v3, v4);
      swift_unknownObjectRelease();
      swift_getObjectType();
      swift_deallocPartialClassInstance();
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MapsSuggestionsFinanceSource()
{
  return objc_opt_self();
}

Swift::Void __swiftcall MapsSuggestionsFinanceSource.start()()
{
  sub_1A429D024("start", (uint64_t)sub_1A429D93C, (uint64_t)&block_descriptor_9_0);
}

void sub_1A429CF48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  Swift::Double v5;
  id v6;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (v2)
  {
    v3 = (char *)v2;
    GEOConfigGetDouble();
    v5 = v4;
    v6 = *(id *)&v3[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__financeKit];
    MapsSuggestionsFinanceKit.startObservingForOrders(period:)(v5);

  }
}

Swift::Void __swiftcall MapsSuggestionsFinanceSource.stop()()
{
  sub_1A429D024("stop", (uint64_t)sub_1A429D944, (uint64_t)&block_descriptor_13);
}

uint64_t sub_1A429D024(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v6 = sub_1A43AB59C();
  v25 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1A43AB5C0();
  v9 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED22E9F0 != -1)
    swift_once();
  v12 = sub_1A43AB584();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED22EDF0);
  v13 = sub_1A43AB56C();
  v14 = sub_1A43AB71C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = a1;
    v17 = a3;
    v18 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A427D000, v13, v14, v16, v15, 2u);
    v19 = v18;
    a3 = v17;
    MEMORY[0x1A859D2B8](v19, -1, -1);
  }

  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a2;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = a3;
  v21 = _Block_copy(aBlock);
  swift_retain();
  sub_1A43AB5B4();
  v26 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  swift_release();
  return swift_release();
}

void sub_1A429D2D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A859D360](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(id *)(v2 + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__financeKit);
    MapsSuggestionsFinanceKit.stopObservingForOrders()();

  }
}

uint64_t MapsSuggestionsFinanceSource.updateSuggestionEntries(handler:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  double v5;
  double v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t result;
  _QWORD v13[6];

  GEOConfigGetDouble();
  v6 = v5;
  v7 = *(NSObject **)&v2[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource_queue];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_1A429D980;
  *(_QWORD *)(v9 + 24) = v8;
  v13[4] = sub_1A429DCA8;
  v13[5] = v9;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1A429C6AC;
  v13[3] = &block_descriptor_23;
  v10 = _Block_copy(v13);
  v11 = v2;
  sub_1A42855E0(a1);
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A429D9D0(v11, *(_QWORD *)&v11[OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__financeKit], v6);
    GEOConfigGetDouble();
    return swift_release();
  }
  return result;
}

BOOL MapsSuggestionsFinanceSource.canProduceEntries(of:)(uint64_t a1)
{
  return a1 == 23;
}

uint64_t MapsSuggestionsFinanceSource.remove(_:behavior:handler:)()
{
  return 0;
}

uint64_t static MapsSuggestionsFinanceSource.isEnabled()()
{
  return GEOConfigGetBOOL();
}

id MapsSuggestionsFinanceSource.__allocating_init(from:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_msgSend(objc_allocWithZone(v1), sel_initFromResourceDepot_, a1);
  swift_unknownObjectRelease();
  return v2;
}

void MapsSuggestionsFinanceSource.init(from:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsFinanceSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsFinanceSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsFinanceSource.__allocating_init(delegate:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A429D748(a1, a2, a3, (SEL *)&selRef_initWithDelegate_name_);
}

id sub_1A429D748(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_class *v4;
  id v7;
  void *v8;
  id v9;

  v7 = objc_allocWithZone(v4);
  v8 = (void *)sub_1A43AB620();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, *a4, a1, v8);

  swift_unknownObjectRelease();
  return v9;
}

void MapsSuggestionsFinanceSource.init(delegate:name:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsFinanceSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsFinanceSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A429D8BC()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1ED22EDF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED22EDF0);
  return sub_1A43AB578();
}

void sub_1A429D93C()
{
  uint64_t v0;

  sub_1A429CF48(v0);
}

void sub_1A429D944()
{
  uint64_t v0;

  sub_1A429D2D4(v0);
}

uint64_t sub_1A429D94C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A429D980()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = v0[3];
  v2 = v0[4];
  v3 = (uint64_t *)(v0[2] + OBJC_IVAR____TtC15MapsSuggestions28MapsSuggestionsFinanceSource__updateCompleteHandler);
  v4 = *v3;
  *v3 = v1;
  v3[1] = v2;
  sub_1A42855E0(v1);
  return sub_1A42856E0(v4);
}

uint64_t sub_1A429D9C0()
{
  return swift_deallocObject();
}

uint64_t sub_1A429D9D0(void *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v6 = sub_1A43AB59C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A43AB5C0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__queue);
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = &protocol witness table for MapsSuggestionsFinanceSource;
  *(double *)(v15 + 40) = a3;
  aBlock[4] = sub_1A429DC98;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_36_0;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = a1;
  sub_1A43AB5B4();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_1A429DC18()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A429DC3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1A429DC48()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A429DC6C()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A429DC98()
{
  uint64_t v0;

  return sub_1A42A0108(*(_QWORD *)(v0 + 16), *(double *)(v0 + 40), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

id MapsSuggestionsFinanceKit.__allocating_init(fromResourceDepot:)(void *a1)
{
  objc_class *v1;
  id v3;
  id result;
  id v5;
  id v6;

  v3 = objc_allocWithZone(v1);
  result = objc_msgSend(a1, sel_oneFinanceKitConnector);
  if (result)
  {
    v5 = result;
    result = objc_msgSend(a1, sel_oneNetworkRequester);
    if (result)
    {
      v6 = objc_msgSend(v3, sel_initWithConnector_requester_, v5, result);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MapsSuggestionsFinanceKit.init(fromResourceDepot:)(void *a1)
{
  void *v1;
  id result;
  id v4;
  id v5;

  result = objc_msgSend(a1, sel_oneFinanceKitConnector);
  if (result)
  {
    v4 = result;
    result = objc_msgSend(a1, sel_oneNetworkRequester);
    if (result)
    {
      v5 = objc_msgSend(v1, sel_initWithConnector_requester_, v4, result);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MapsSuggestionsFinanceKit.__allocating_init(connector:requester:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  v6 = sub_1A42A05F4(a1, a2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v6;
}

id MapsSuggestionsFinanceKit.init(connector:requester:)(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = sub_1A42A05F4(a1, a2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t MapsSuggestionsFinanceKit.uniqueName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit_uniqueName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MapsSuggestionsFinanceKit.uniqueName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit_uniqueName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MapsSuggestionsFinanceKit.uniqueName.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

BOOL MapsSuggestionsFinanceKit.canProduceEntriesOfType(type:)(uint64_t a1)
{
  return a1 == 23;
}

uint64_t sub_1A429E1A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1A43AB59C();
  v28 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A43AB5C0();
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED22EAA8 != -1)
    swift_once();
  v10 = sub_1A43AB584();
  __swift_project_value_buffer(v10, (uint64_t)qword_1ED22EDD8);
  swift_bridgeObjectRetain_n();
  v11 = sub_1A43AB56C();
  v12 = sub_1A43AB71C();
  if (os_log_type_enabled(v11, v12))
  {
    v24 = v2;
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v25 = v4;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = type metadata accessor for MapsSuggestionsOrderPickup();
    v17 = MEMORY[0x1A859C5BC](a1, v16);
    v29 = sub_1A4281D00(v17, v18, aBlock);
    sub_1A43AB7DC();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A427D000, v11, v12, "%s", v13, 0xCu);
    swift_arrayDestroy();
    v19 = v15;
    v4 = v25;
    MEMORY[0x1A859D2B8](v19, -1, -1);
    MEMORY[0x1A859D2B8](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = a1;
  aBlock[4] = (uint64_t)sub_1A42A0934;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A4282B78;
  aBlock[3] = (uint64_t)&block_descriptor_14_0;
  v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A43AB5B4();
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v9, v6, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  swift_release();
  return swift_release();
}

void sub_1A429E54C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  id v39;
  uint64_t v40;
  char *v41;
  double v42;
  id v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  id v50;
  char *v51;
  char *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint8_t *v62;
  NSObject *v63;
  os_log_type_t v64;
  const char *v65;
  uint64_t v66;
  os_log_type_t v67;
  BOOL v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  id v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t ObjectType;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  NSObject *v121;
  unint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t aBlock[10];

  v4 = sub_1A43AB44C();
  v128 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v130 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v135 = (char *)&v113 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (uint64_t)&v113 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = ((char *)&v113 - v16);
  v18 = MEMORY[0x1E0C80A78](v15);
  v124 = (uint64_t)&v113 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v113 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v125 = (uint64_t)&v113 - v24;
  MEMORY[0x1E0C80A78](v23);
  v133 = (uint64_t)&v113 - v25;
  v26 = a1 + 16;
  swift_beginAccess();
  v27 = (void *)MEMORY[0x1A859D360](a1 + 16);

  if (!v27)
    return;
  swift_beginAccess();
  v28 = MEMORY[0x1A859D360](v26);
  if (!v28)
    return;
  v29 = v28;
  if (!(a2 >> 62))
  {
    v30 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v30)
      goto LABEL_5;
LABEL_76:
    v111 = v29 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate;
    if (!MEMORY[0x1A859D360](v29 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate))
    {
LABEL_79:

      return;
    }
    v101 = *(_QWORD *)(v111 + 8);
LABEL_78:
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v101 + 8))(MEMORY[0x1E0DEE9D8], ObjectType, v101);

    swift_unknownObjectRelease();
    return;
  }
LABEL_75:
  swift_bridgeObjectRetain();
  v30 = sub_1A43AB8B4();
  swift_bridgeObjectRelease();
  if (!v30)
    goto LABEL_76;
LABEL_5:
  v31 = MapsSuggestionsCurrentBestLocation();

  if (!v31)
  {
    swift_beginAccess();
    v97 = MEMORY[0x1A859D360](v26);
    if (!v97)
      goto LABEL_79;
    v98 = (void *)v97;
    v99 = v97 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate;
    v100 = MEMORY[0x1A859D360](v97 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate);
    v101 = *(_QWORD *)(v99 + 8);

    if (!v100)
      goto LABEL_79;
    goto LABEL_78;
  }
  v123 = v17;
  v115 = v14;
  v116 = v11;
  v117 = (char *)v29;
  v32 = swift_allocObject();
  v118 = v32;
  *(_QWORD *)(v32 + 16) = MEMORY[0x1E0DEE9D8];
  v113 = v32 + 16;
  v120 = dispatch_group_create();
  v114 = OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__requester;
  v131 = a2 & 0xC000000000000001;
  v132 = a2;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  a2 = 4;
  v29 = v128;
  v126 = v22;
  v119 = v26;
  v129 = v30;
  do
  {
    if (v131)
      v33 = (char *)MEMORY[0x1A859C73C](a2 - 4, v132);
    else
      v33 = (char *)*(id *)(v132 + 8 * a2);
    v34 = v33;
    v11 = (char *)(a2 - 3);
    if (__OFADD__(a2 - 4, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    v17 = OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupAddress;
    if (*(_QWORD *)&v33[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupAddress]
      || *(_QWORD *)&v33[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupLocation])
    {
      v136 = (char *)(a2 - 3);
      v134 = &v33[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupEndDate];
      v35 = v133;
      sub_1A42A0960((uint64_t)&v33[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupEndDate], v133);
      v14 = *(_QWORD *)(v29 + 48);
      v36 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v35, 1, v4);
      sub_1A4291E94(v35);
      if (v36 == 1)
      {
        v37 = v125;
        sub_1A42A0960((uint64_t)&v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupStartDate], v125);
        v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v37, 1, v4);
        sub_1A4291E94(v37);
        if (v38 == 1)
        {

LABEL_8:
          v30 = v129;
          goto LABEL_9;
        }
      }
      v127 = &v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupStartDate];
      sub_1A42A0960((uint64_t)&v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupStartDate], (uint64_t)v22);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v14)(v22, 1, v4) == 1)
      {
        v39 = MapsSuggestionsNow();
        sub_1A43AB428();

        sub_1A4291E94((uint64_t)v22);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v135, v22, v4);
      }
      v40 = v26;
      v41 = (char *)MEMORY[0x1A859D360](v26);
      if (!v41)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        return;
      }
      v42 = *(double *)&v41[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__timeWindow];

      v43 = MapsSuggestionsNowWithOffset(v42);
      v44 = v130;
      sub_1A43AB428();

      sub_1A4289FF8(&qword_1EE714EC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
      v45 = v135;
      LOBYTE(v43) = sub_1A43AB614();
      v46 = *(void (**)(char *, uint64_t))(v29 + 8);
      v46(v44, v4);
      v46(v45, v4);
      if ((v43 & 1) == 0)
        goto LABEL_7;
      v47 = v124;
      sub_1A42A0960((uint64_t)v134, v124);
      v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v47, 1, v4);
      sub_1A4291E94(v47);
      if (v48 != 1)
      {
        v49 = (uint64_t)v123;
        sub_1A42A0960((uint64_t)v134, (uint64_t)v123);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v14)(v49, 1, v4) == 1)
          goto LABEL_82;
        v50 = MapsSuggestionsNow();
        v51 = v130;
        sub_1A43AB428();

        LOBYTE(v50) = sub_1A43AB3F8();
        v46(v51, v4);
        v46((char *)v49, v4);
        if ((v50 & 1) != 0)
        {
LABEL_7:

          v29 = v128;
          v26 = v40;
          v22 = v126;
          goto LABEL_8;
        }
      }
      v52 = &v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_orderIdentifier];
      if (!*(_QWORD *)&v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_orderIdentifier + 8])
      {
        v26 = v40;
        if (qword_1ED22EAA8 != -1)
          swift_once();
        v58 = sub_1A43AB584();
        __swift_project_value_buffer(v58, (uint64_t)qword_1ED22EDD8);
        v59 = sub_1A43AB56C();
        v60 = sub_1A43AB71C();
        v14 = v60;
        v61 = os_log_type_enabled(v59, v60);
        v22 = v126;
        v30 = v129;
        if (v61)
        {
          v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v62 = 0;
          v63 = v59;
          v64 = v14;
          v65 = "No orderIdentifier in order";
          goto LABEL_41;
        }
LABEL_42:

LABEL_43:
        v29 = v128;
LABEL_9:
        v11 = v136;
        goto LABEL_10;
      }
      v53 = objc_allocWithZone((Class)MapsSuggestionsEntry);
      v54 = (void *)sub_1A43AB620();
      v55 = objc_msgSend(v53, sel_initWithType_title_, 23, v54);

      if (!v55)
      {
        v26 = v119;
        v22 = v126;
        if (qword_1ED22EAA8 != -1)
          swift_once();
        v66 = sub_1A43AB584();
        __swift_project_value_buffer(v66, (uint64_t)qword_1ED22EDD8);
        v59 = sub_1A43AB56C();
        v67 = sub_1A43AB728();
        v14 = v67;
        v68 = os_log_type_enabled(v59, v67);
        v30 = v129;
        if (!v68)
          goto LABEL_42;
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        v63 = v59;
        v64 = v14;
        v65 = "Nil entry!";
LABEL_41:
        _os_log_impl(&dword_1A427D000, v63, v64, v65, v62, 2u);
        MEMORY[0x1A859D2B8](v62, -1, -1);

        goto LABEL_43;
      }
      if (*(_QWORD *)&v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_merchantDisplayName + 8])
      {
        v56 = v55;
        swift_bridgeObjectRetain();
        v57 = (void *)sub_1A43AB620();
        swift_bridgeObjectRelease();
      }
      else
      {
        v69 = v55;
        v57 = 0;
      }
      objc_msgSend(v55, sel_setString_forKey_, v57, CFSTR("MapsSuggestionsOrderPickupMerchant"));

      v70 = *((_QWORD *)v52 + 1);
      v121 = v17;
      if (v70)
      {
        swift_bridgeObjectRetain();
        v71 = (void *)sub_1A43AB620();
        swift_bridgeObjectRelease();
      }
      else
      {
        v71 = 0;
      }
      v30 = v129;
      objc_msgSend(v55, sel_setString_forKey_, v71, CFSTR("MapsSuggestionsOrderPickupIdentifier"));

      objc_msgSend(v55, sel_setString_forKey_, CFSTR("MapsSuggestionsOrderPickupIdentifier"), CFSTR("MapsSuggestionsPrimaryKey"));
      objc_msgSend(v55, sel_setBoolean_forKey_, 1, CFSTR("MapsSuggestionsNeedsETATrackingKey"));
      v122 = v122 & 0xFFFFFFFF00000000 | GEOConfigMapsSuggestionsInitialWeightOrderStatus;
      GEOConfigGetDouble();
      objc_msgSend(v55, sel_setWeight_);
      v72 = *(void **)&v34[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupLocation];
      if (v72)
      {
        v73 = v72;
        objc_msgSend(v55, sel_setLocationCoordinateKeysFromLocation_, v73);
        objc_msgSend(v55, sel_setBoolean_forKey_, objc_msgSend(v73, sel_referenceFrame) == 1, CFSTR("MapsSuggestionsShiftCoordinateIfNeededKey"));

      }
      v74 = *(Class *)((char *)&v121->isa + (_QWORD)v34);
      if (v74)
      {
        v75 = (void *)objc_opt_self();
        v76 = v74;
        v77 = objc_msgSend(v75, sel_stringFromPostalAddress_style_, v76, 0);
        if (!v77)
        {
          sub_1A43AB62C();
          v77 = (id)sub_1A43AB620();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v55, sel_setString_forKey_, v77, CFSTR("MapsSuggestionsDestinationAddressKey"));

      }
      v78 = v115;
      sub_1A42A0960((uint64_t)v134, v115);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v14)(v78, 1, v4) == 1)
      {
        v79 = 0;
      }
      else
      {
        v79 = (void *)sub_1A43AB3E0();
        v46((char *)v78, v4);
      }
      objc_msgSend(v55, sel_setExpires_, v79);

      v80 = (uint64_t)v116;
      sub_1A42A0960((uint64_t)v127, (uint64_t)v116);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v14)(v80, 1, v4) == 1)
      {
        v81 = 0;
      }
      else
      {
        v82 = v80;
        v81 = (void *)sub_1A43AB3E0();
        v46((char *)v82, v4);
      }
      objc_msgSend(v55, sel_setDate_forKey_, v81, CFSTR("MapsSuggestionsOrderPickupStartDate"));

      v17 = v120;
      dispatch_group_enter(v120);
      v83 = *(void **)&v117[v114];
      v84 = (_QWORD *)swift_allocObject();
      v84[2] = v17;
      v84[3] = v55;
      v84[4] = v118;
      aBlock[4] = (uint64_t)sub_1A42A09DC;
      aBlock[5] = (uint64_t)v84;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1A429F834;
      aBlock[3] = (uint64_t)&block_descriptor_35_1;
      v14 = (uint64_t)_Block_copy(aBlock);
      swift_retain();
      v85 = v55;
      swift_unknownObjectRetain();
      v86 = v17;
      swift_release();
      GEOMapItemFromMapsSuggestionsEntry(v85, v83, 1, (void *)v14);
      _Block_release((const void *)v14);

      swift_unknownObjectRelease();
      v29 = v128;
      v22 = v126;
      v11 = v136;
      v26 = v119;
    }
    else
    {

    }
LABEL_10:
    ++a2;
  }
  while (v11 != (char *)v30);
  swift_bridgeObjectRelease();
  sub_1A43AB740();
  if (qword_1ED22EAA8 != -1)
    swift_once();
  v87 = sub_1A43AB584();
  __swift_project_value_buffer(v87, (uint64_t)qword_1ED22EDD8);
  swift_retain_n();
  v88 = sub_1A43AB56C();
  v89 = sub_1A43AB71C();
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc();
    v91 = swift_slowAlloc();
    aBlock[0] = v91;
    *(_DWORD *)v90 = 136315138;
    swift_beginAccess();
    v92 = sub_1A4289D70(0, (unint64_t *)&unk_1ED22ECA0);
    v93 = swift_bridgeObjectRetain();
    v94 = MEMORY[0x1A859C598](v93, v92);
    v96 = v95;
    swift_bridgeObjectRelease();
    aBlock[9] = sub_1A4281D00(v94, v96, aBlock);
    sub_1A43AB7DC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A427D000, v88, v89, "calling Delegate with entries: %s", v90, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859D2B8](v91, -1, -1);
    MEMORY[0x1A859D2B8](v90, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v102 = v117;
  swift_beginAccess();
  v103 = MEMORY[0x1A859D360](v26);
  if (!v103)
    goto LABEL_83;
  v104 = (void *)v103;
  v105 = v103 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate;
  v106 = MEMORY[0x1A859D360](v103 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate);
  v107 = *(_QWORD *)(v105 + 8);

  if (v106)
  {
    v108 = swift_getObjectType();
    swift_beginAccess();
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 8);
    v110 = swift_bridgeObjectRetain();
    v109(v110, v108, v107);
    swift_release();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();

  }
}

void sub_1A429F510(void *a1, uint64_t a2, NSObject *a3, id a4, uint64_t a5)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  double v24;
  double v25;
  id v26;

  if (a2)
  {
    if (qword_1ED22EAA8 != -1)
      swift_once();
    v6 = sub_1A43AB584();
    __swift_project_value_buffer(v6, (uint64_t)qword_1ED22EDD8);
    v7 = sub_1A43AB56C();
    v8 = sub_1A43AB728();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1A427D000, v7, v8, "Failed to get MapItem!", v9, 2u);
      MEMORY[0x1A859D2B8](v9, -1, -1);
    }

    dispatch_group_leave(a3);
  }
  else
  {
    objc_msgSend(a4, sel_setGeoMapItem_, a1);
    v13 = objc_msgSend(a4, sel_geoMapItem);
    v14 = v13;
    if (v13)
    {
      v15 = objc_msgSend(v13, sel_name);

      if (v15)
      {
        sub_1A43AB62C();

        v14 = (void *)sub_1A43AB620();
        swift_bridgeObjectRelease();
      }
      else
      {
        v14 = 0;
      }
    }
    objc_msgSend(a4, sel_setUndecoratedSubtitle_, v14);

    v16 = MapsSuggestionsCurrentBestLocation();
    if (v16)
    {
      if (a1)
      {
        objc_msgSend(a1, sel_coordinate);
        v18 = v17;
        objc_msgSend(a1, sel_coordinate);
        v20 = v19;
      }
      else
      {
        v20 = 0.0;
        v18 = 0.0;
      }
      v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E3B8]), sel_initWithLatitude_longitude_, v18, v20);
      objc_msgSend(v16, sel_distanceFromLocation_, v22);
      v21 = v23;

    }
    else
    {
      v21 = 0.0;
    }
    GEOConfigGetDouble();
    if (v16)
    {
      objc_msgSend(a4, sel_setBoolean_forKey_, v21 < v24, CFSTR("MapsSuggestionsAlreadyThereKey"));
      GEOConfigGetDouble();
      if (v21 < v25)
      {
        swift_beginAccess();
        v26 = a4;
        MEMORY[0x1A859C574]();
        if (*(_QWORD *)((*(_QWORD *)(a5 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a5 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
          sub_1A43AB6BC();
        sub_1A43AB6D4();
        sub_1A43AB6B0();
        swift_endAccess();
      }
      dispatch_group_leave(a3);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1A429F834(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

Swift::Void __swiftcall MapsSuggestionsFinanceKit.startObservingForOrders(period:)(Swift::Double period)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1A43AB59C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v16 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A43AB5C0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__queue);
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(Swift::Double *)(v13 + 24) = period;
  aBlock[4] = sub_1A42A08D8;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_4;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1A43AB5B4();
  v17 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
}

void sub_1A429FB2C(uint64_t a1, double a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  _QWORD aBlock[6];

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (char *)MEMORY[0x1A859D360](v3);
  if (v4)
  {
    v5 = v4;
    v6 = OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__observer;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__observer])
    {

    }
    else
    {
      if (qword_1ED22EAA8 != -1)
        swift_once();
      v7 = sub_1A43AB584();
      __swift_project_value_buffer(v7, (uint64_t)qword_1ED22EDD8);
      v8 = sub_1A43AB56C();
      v9 = sub_1A43AB71C();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1A427D000, v8, v9, "Setting up FinanceKit observer", v10, 2u);
        MEMORY[0x1A859D2B8](v10, -1, -1);
      }

      v11 = *(void **)&v5[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__connector];
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v5;
      aBlock[4] = sub_1A42A0A60;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1A429C078;
      aBlock[3] = &block_descriptor_50;
      v13 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      v14 = v5;
      swift_release();
      v15 = objc_msgSend(v11, sel_startObservingOrderPickupsIn_callback_, v13, a2);
      swift_unknownObjectRelease();
      _Block_release(v13);
      *(_QWORD *)&v5[v6] = v15;

      swift_unknownObjectRelease();
    }
  }
}

Swift::Void __swiftcall MapsSuggestionsFinanceKit.stopObservingForOrders()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1A43AB59C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v13 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB5C0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__queue);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1A42A08FC;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_7_0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1A43AB5B4();
  v14 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  swift_release();
}

uint64_t sub_1A429FF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x1A859D360](v1);
  if (result)
  {
    v3 = (char *)result;
    if (qword_1ED22EAA8 != -1)
      swift_once();
    v4 = sub_1A43AB584();
    __swift_project_value_buffer(v4, (uint64_t)qword_1ED22EDD8);
    v5 = sub_1A43AB56C();
    v6 = sub_1A43AB71C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1A427D000, v5, v6, "Tearing down FinanceKit observer", v7, 2u);
      MEMORY[0x1A859D2B8](v7, -1, -1);
    }

    *(_QWORD *)&v3[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__observer] = 0;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t MapsSuggestionsFinanceKit.entriesDuringPeriod(period:delegate:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return sub_1A42A03AC(a1, v3, a3, ObjectType, a2);
}

uint64_t sub_1A42A0108(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  char *v8;
  id v9;
  uint64_t v10;

  v6 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x1A859D360](v6);
  if (result)
  {
    v8 = (char *)result;
    *(_QWORD *)(result + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate + 8) = a4;
    swift_unknownObjectWeakAssign();
    *(double *)&v8[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__timeWindow] = a2;
    v9 = objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__connector], sel_currentOrderPickupsWithPeriod_, a2);
    type metadata accessor for MapsSuggestionsOrderPickup();
    v10 = sub_1A43AB698();

    sub_1A429E1A8(v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MapsSuggestionsFinanceKit.deleteOrDeclineEntry(entry:handler:)()
{
  return 0;
}

id MapsSuggestionsFinanceKit.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsFinanceKit.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsFinanceKit.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsFinanceKit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A42A0334()
{
  uint64_t v0;

  v0 = sub_1A43AB584();
  __swift_allocate_value_buffer(v0, qword_1ED22EDD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED22EDD8);
  return sub_1A43AB578();
}

uint64_t sub_1A42A03AC(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v9 = sub_1A43AB59C();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A43AB5C0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__queue);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a1;
  *(_QWORD *)(v18 + 32) = a5;
  *(double *)(v18 + 40) = a3;
  aBlock[4] = sub_1A429DC98;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A4282B78;
  aBlock[3] = &block_descriptor_44;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  sub_1A43AB5B4();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&unk_1ED22EC90, v10, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECB0);
  sub_1A4284C58((unint64_t *)&unk_1ED22ECC0, (uint64_t *)&unk_1ED22ECB0);
  sub_1A43AB80C();
  MEMORY[0x1A859C67C](0, v16, v12, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_release();
  return swift_release();
}

id sub_1A42A05F4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *ObjCClassFromMetadata;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  uint64_t v24;

  v21 = a1;
  v22 = a2;
  v3 = sub_1A43AB764();
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A43AB74C();
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1A43AB5C0();
  MEMORY[0x1E0C80A78](v7);
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit_uniqueName];
  v18 = (objc_class *)type metadata accessor for MapsSuggestionsFinanceKit();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v10 = v2;
  v11 = objc_msgSend(ObjCClassFromMetadata, sel_description);
  v12 = sub_1A43AB62C();
  v14 = v13;

  *v8 = v12;
  v8[1] = v14;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__observer] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v15 = OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__queue;
  sub_1A4289D70(0, (unint64_t *)&qword_1ED22ED00);
  sub_1A43AB5B4();
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1A4289FF8((unint64_t *)&qword_1ED22ECF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED22ECD0);
  sub_1A4284C58((unint64_t *)&qword_1ED22ECE0, (uint64_t *)&unk_1ED22ECD0);
  sub_1A43AB80C();
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v5, *MEMORY[0x1E0DEF8D0], v20);
  *(_QWORD *)&v10[v15] = sub_1A43AB794();
  v16 = v22;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__connector] = v21;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__requester] = v16;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15MapsSuggestions25MapsSuggestionsFinanceKit__timeWindow] = 0;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  v23.receiver = v10;
  v23.super_class = v18;
  return objc_msgSendSuper2(&v23, sel_init);
}

uint64_t sub_1A42A0890()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A42A08B4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A42A08D8()
{
  uint64_t v0;

  sub_1A429FB2C(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1A42A08FC()
{
  uint64_t v0;

  return sub_1A429FF70(v0);
}

uint64_t type metadata accessor for MapsSuggestionsFinanceKit()
{
  return objc_opt_self();
}

uint64_t sub_1A42A0924()
{
  return objectdestroy_10Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void sub_1A42A0934()
{
  uint64_t v0;

  sub_1A429E54C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A42A093C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A42A0960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED22ED60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A42A09A8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1A42A09DC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A429F510(a1, a2, *(NSObject **)(v2 + 16), *(id *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1A42A09E8()
{
  return objectdestroy_10Tm((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t objectdestroy_10Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t sub_1A42A0A3C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A42A0A60(uint64_t a1)
{
  return sub_1A429E1A8(a1);
}

id MapsSuggestionsOrderPickup.__allocating_init(pickupId:orderId:orderType:pickupAddress:pickupLocation:pickupStartDate:pickupEndDate:merchantDisplayName:pickupLocationDisplayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  objc_class *v12;
  id v20;

  v20 = objc_allocWithZone(v12);
  return MapsSuggestionsOrderPickup.init(pickupId:orderId:orderType:pickupAddress:pickupLocation:pickupStartDate:pickupEndDate:merchantDisplayName:pickupLocationDisplayName:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, a12);
}

id MapsSuggestionsOrderPickup.init(pickupId:orderId:orderType:pickupAddress:pickupLocation:pickupStartDate:pickupEndDate:merchantDisplayName:pickupLocationDisplayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  id v22;
  objc_super v24;

  v17 = &v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_orderIdentifier];
  *(_QWORD *)v17 = a3;
  *((_QWORD *)v17 + 1) = a4;
  v18 = &v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_orderTypeIdentifier];
  *(_QWORD *)v18 = a5;
  *((_QWORD *)v18 + 1) = a6;
  v19 = &v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupIdentifier];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  sub_1A42A0960(a9, (uint64_t)&v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupStartDate]);
  sub_1A42A0960(a10, (uint64_t)&v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupEndDate]);
  *(_QWORD *)&v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupAddress] = a7;
  *(_QWORD *)&v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupLocation] = a8;
  v20 = &v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_merchantDisplayName];
  *(_QWORD *)v20 = a11;
  *((_QWORD *)v20 + 1) = a12;
  v21 = &v14[OBJC_IVAR____TtC15MapsSuggestions26MapsSuggestionsOrderPickup_pickupLocationDisplayName];
  *(_QWORD *)v21 = a13;
  *((_QWORD *)v21 + 1) = a14;
  v24.receiver = v14;
  v24.super_class = (Class)type metadata accessor for MapsSuggestionsOrderPickup();
  v22 = objc_msgSendSuper2(&v24, sel_init);
  sub_1A4291E94(a10);
  sub_1A4291E94(a9);
  return v22;
}

uint64_t type metadata accessor for MapsSuggestionsOrderPickup()
{
  uint64_t result;

  result = qword_1ED22EA90;
  if (!qword_1ED22EA90)
    return swift_getSingletonMetadata();
  return result;
}

id MapsSuggestionsOrderPickup.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MapsSuggestionsOrderPickup.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MapsSuggestionsOrderPickup.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapsSuggestionsOrderPickup();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A42A0E18()
{
  return type metadata accessor for MapsSuggestionsOrderPickup();
}

void sub_1A42A0E20()
{
  unint64_t v0;

  sub_1A42A0EAC();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1A42A0EAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED22EA78)
  {
    sub_1A43AB44C();
    v0 = sub_1A43AB7D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED22EA78);
  }
}

void sub_1A42A10C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42A2AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
  uint64_t v38;

  objc_destroyWeak((id *)(v38 - 176));
  _Unwind_Resume(a1);
}

void sub_1A42A3FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1A42A49A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42A5A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1A42A6F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42A7014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42A7470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id *v4;

  objc_destroyWeak(v4);
  _Unwind_Resume(a1);
}

void sub_1A42A761C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42A76F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1A42A788C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42A7918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42A7A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1A42A7BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (v4)

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void ___ZN3MSg26dispatch_sync_if_differentIU8__strongP12NSDictionaryEET_PU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFS4_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1A42A9188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t GEOMapItemsFromMapsSuggestionsEntry(void *a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, _QWORD);
  unint64_t v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  id v31;
  void (**v32)(id, void *, _QWORD);
  NSObject *v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  _BOOL4 v37;
  _BOOL4 v38;
  void *v39;
  _BOOL4 v40;
  NSObject *v41;
  void *v42;
  BOOL v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  void (**v55)(id, void *, _QWORD);
  void *v56;
  NSObject *v57;
  void *v58;
  double v59;
  double v60;
  void *v61;
  double v62;
  double v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  NSObject *v69;
  id *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  _QWORD v78[5];
  id v79;
  void *v80;
  void *v81;
  void *v82;
  _BYTE buf[48];
  _QWORD *v84;
  void (**v85)(id, void *, _QWORD);
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (!v9)
  {
    GEOFindOrCreateLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 394;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "BOOL GEOMapItemsFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong i"
                            "d<MapsSuggestionsNetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItemsFetc"
                            "hCompletion _Nonnull)";
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "nil == (completion)";
      _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires completion block", buf, 0x26u);
    }
    goto LABEL_18;
  }
  if (!v7)
  {
    GEOFindOrCreateLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 395;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "BOOL GEOMapItemsFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong i"
                            "d<MapsSuggestionsNetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItemsFetc"
                            "hCompletion _Nonnull)";
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "nil == (entry)";
      _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a suggestions entry", buf, 0x26u);
    }
    goto LABEL_18;
  }
  if (!v8)
  {
    GEOFindOrCreateLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 396;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "BOOL GEOMapItemsFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong i"
                            "d<MapsSuggestionsNetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItemsFetc"
                            "hCompletion _Nonnull)";
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = "nil == (requester)";
      _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a network requester", buf, 0x26u);
    }
    goto LABEL_18;
  }
  if ((a3 & 1) == 0)
  {
    GEOFindOrCreateLog();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v19, OS_LOG_TYPE_DEBUG, "allowNetworkRequest == NO", buf, 2u);
    }

    objc_msgSend(v7, "geoMapItem");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20 == 0;

    if (!v21)
    {
      objc_msgSend(v7, "geoMapItem");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = v22;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v82, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v9[2](v9, v23, 0);

      goto LABEL_70;
    }
    v76 = v7;
    objc_msgSend(v76, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "doubleValue");
    v26 = v25;

    objc_msgSend(v76, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "doubleValue");
    v29 = v28;

    if (objc_msgSend(v76, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
    {
      objc_msgSend(v76, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v30 = 0;
    }
    v74 = v30;
    v36 = objc_msgSend(v30, "length");
    v37 = v29 >= -180.0;
    if (v29 > 180.0)
      v37 = 0;
    if (v26 < -90.0)
      v37 = 0;
    v38 = v26 <= 90.0 && v37;
    if (objc_msgSend(v76, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
    {
      objc_msgSend(v76, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v39 = 0;
    }
    v72 = v39;
    v71 = objc_msgSend(v39, "length");
    v40 = v29 == 0.0 && v26 == 0.0;
    GEOFindOrCreateLog();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v41, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
    }

    if ((v71 == 0 || !v38) && v36 == 0 || v40)
    {
      GEOFindOrCreateLog();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)&buf[4] = v72;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v74;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v26;
        *(_WORD *)&buf[32] = 2048;
        *(double *)&buf[34] = v29;
        _os_log_impl(&dword_1A427D000, v36, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
      }
      v42 = 0;
LABEL_66:

      if (v42)
      {
        v81 = v42;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v81, 1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v9[2](v9, v47, 0);

      }
      else
      {
        v9[2](v9, 0, 0);
      }

      goto LABEL_70;
    }
    if (v38)
    {
      v43 = v36 != 0;
      v44 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v26, v29);
      v36 = v44;
      if (v43)
      {
        if (v44)
        {
LABEL_60:
          v45 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
          objc_msgSend(v45, "addFormattedAddressLine:", v74);
          -[NSObject setAddress:](v36, "setAddress:", v45);

          goto LABEL_61;
        }
LABEL_59:
        v36 = objc_alloc_init(MEMORY[0x1E0D27330]);
        goto LABEL_60;
      }
    }
    else if (v36)
    {
      goto LABEL_59;
    }
LABEL_61:
    if (v71)
      -[NSObject setName:](v36, "setName:", v72);
    objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v36);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setGeoMapItem:", v42);
    objc_msgSend(v76, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    GEOFindOrCreateLog();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v42;
      _os_log_impl(&dword_1A427D000, v46, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
    }

    goto LABEL_66;
  }
  v10 = objc_msgSend(v7, "integerForKey:", CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
  GEOFindOrCreateLog();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_DEBUG, "Current Origin for the geoMapItem on this entry is %ld", buf, 0xCu);
  }

  if (v10 - 2 >= 9)
  {
    if (v10 > 1)
    {
      GEOFindOrCreateLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 437;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "BOOL GEOMapItemsFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong"
                              " id<MapsSuggestionsNetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItems"
                              "FetchCompletion _Nonnull)";
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = "YES";
        _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsGEOMapItemOrigin!", buf, 0x26u);
      }
      goto LABEL_18;
    }
    v31 = v7;
    v77 = v8;
    v32 = v9;
    GEOFindOrCreateLog();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v33, OS_LOG_TYPE_DEBUG, "Trying to geocode the MapItems for this Entry", buf, 2u);
    }

    if (objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsMapItemHandleDataKey")))
    {
      objc_msgSend(v31, "mapItemHandleData");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E4BCDEE0;
      *(_QWORD *)&buf[32] = v31;
      *(_QWORD *)&buf[40] = v32;
      objc_msgSend(v77, "resolveMapItemHandleData:completion:", v34, buf);

      v35 = *(NSObject **)&buf[32];
LABEL_111:
      v17 = 1;
      goto LABEL_112;
    }
    if (objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsMUIDKey")))
    {
      v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0D271C0]), "initWithMUID:coordinate:", objc_msgSend(v31, "uint64ForKey:", CFSTR("MapsSuggestionsMUIDKey")), -180.0, -180.0);
      objc_msgSend(MEMORY[0x1E0D27218], "sharedService");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "defaultTraits");
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0D27218], "sharedService");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v86[0] = v35;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v86, 1);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "ticketForIdentifiers:traits:", v51, v49);
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      v78[0] = 0;
      v78[1] = v78;
      v78[2] = 0x3032000000;
      v78[3] = __Block_byref_object_copy__2;
      v78[4] = __Block_byref_object_dispose__2;
      v79 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke_141;
      *(_QWORD *)&buf[24] = &unk_1E4BCDF08;
      *(_QWORD *)&buf[40] = v32;
      *(_QWORD *)&buf[32] = v31;
      v84 = v78;
      objc_msgSend(v52, "submitWithHandler:networkActivity:", buf, 0);

      _Block_object_dispose(v78, 8);
      goto LABEL_111;
    }
    if (objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsFlightDepartureAirportCodeKey")))
    {
      objc_msgSend(v31, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureAirportCodeKey"));
      v35 = objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v31, "type") == 15)
      {
        v53 = v31;
        v54 = v77;
        v55 = v32;
        v56 = v55;
        v73 = v53;
        v75 = v54;
        if (!v35)
        {
          GEOFindOrCreateLog();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 109;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "BOOL _searchAirport(MapsSuggestionsEntry *__strong, NSString *__strong, __strong id<Ma"
                                  "psSuggestionsNetworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)";
            *(_WORD *)&buf[28] = 2082;
            *(_QWORD *)&buf[30] = "nil == (airportString)";
            _os_log_impl(&dword_1A427D000, v57, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires airport string", buf, 0x26u);
          }
          v17 = 0;
          goto LABEL_96;
        }
LABEL_79:
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___searchAirport_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E4BCDFD0;
        *(_QWORD *)&buf[40] = v55;
        *(_QWORD *)&buf[32] = v53;
        v17 = MapsSuggestionsSearchAirport(v35, v54, buf);

        v57 = *(NSObject **)&buf[40];
LABEL_96:

LABEL_112:
        goto LABEL_19;
      }

    }
    if (!objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsLatitudeKey"))
      || !objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsLongitudeKey")))
    {
      if (objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
      {
        objc_msgSend(v31, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke_149;
        *(_QWORD *)&buf[24] = &unk_1E4BCDF80;
        *(_QWORD *)&buf[32] = v65;
        *(_QWORD *)&buf[40] = v31;
        v85 = v32;
        v66 = v77;
        v84 = v66;
        v35 = v65;
        objc_msgSend(v66, "forwardGeocodeAddressString:completion:", v35, buf);

        goto LABEL_111;
      }
      if (!objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsSearchStringKey")))
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("We have neither latlong nor address nor search string!"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(id, void *, void *))v32)[2](v32, 0, v67);

        GEOFindOrCreateLog();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestions"
                               "NetworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = CFSTR("We have neither latlong nor address nor search string!");
          _os_log_impl(&dword_1A427D000, v35, OS_LOG_TYPE_ERROR, "%s failed: %@", buf, 0x16u);
        }
        goto LABEL_111;
      }
      objc_msgSend(v31, "stringForKey:", CFSTR("MapsSuggestionsSearchStringKey"));
      v35 = objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v31, "type") != 15)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke_2;
        *(_QWORD *)&buf[24] = &unk_1E4BCDEE0;
        *(_QWORD *)&buf[32] = v31;
        *(_QWORD *)&buf[40] = v32;
        objc_msgSend(v77, "searchString:maxResults:completion:", v35, 5, buf);

        goto LABEL_111;
      }
      v53 = v31;
      v54 = v77;
      v55 = v32;
      v56 = v55;
      v73 = v53;
      v75 = v54;
      if (!v35)
      {
        GEOFindOrCreateLog();
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 109;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "BOOL _searchAirport(MapsSuggestionsEntry *__strong, NSString *__strong, __strong id<Maps"
                                "SuggestionsNetworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)";
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = "nil == (airportString)";
          _os_log_impl(&dword_1A427D000, v57, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires airport string", buf, 0x26u);
        }
        v17 = 0;
        goto LABEL_96;
      }
      goto LABEL_79;
    }
    objc_msgSend(v31, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "doubleValue");
    v60 = v59;

    objc_msgSend(v31, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "doubleValue");
    v63 = v62;

    if (objc_msgSend(v31, "containsKey:", CFSTR("MapsSuggestionsShiftCoordinateIfNeededKey")))
      v64 = objc_msgSend(v31, "BOOLeanForKey:", CFSTR("MapsSuggestionsShiftCoordinateIfNeededKey"));
    else
      v64 = 1;
    if (fabs(v63 + 180.0) < 0.00000001 && fabs(v60 + 180.0) < 0.00000001)
    {
      v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid coordinate: %f,%f"), *(_QWORD *)&v60, *(_QWORD *)&v63);
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, v35);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, void *, void *))v32)[2](v32, 0, v68);

      GEOFindOrCreateLog();
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNe"
                             "tworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v35;
        _os_log_impl(&dword_1A427D000, v69, OS_LOG_TYPE_ERROR, "%s failed: %@", buf, 0x16u);
      }

      goto LABEL_111;
    }
    objc_msgSend(v31, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
    v35 = objc_claimAutoreleasedReturnValue();
    if (!v35)
      goto LABEL_106;
    if (objc_msgSend(v31, "type") == 23)
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_106:
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke_146;
        *(_QWORD *)&buf[24] = &unk_1E4BCDEE0;
        *(_QWORD *)&buf[32] = v31;
        *(_QWORD *)&buf[40] = v32;
        objc_msgSend(v77, "reverseGeocodeCoordinate:shiftIfNeeded:completion:", v64, buf, v60, v63);
        v70 = (id *)&buf[40];
LABEL_110:

        goto LABEL_111;
      }
    }
    else if (GEOConfigGetBOOL())
    {
      goto LABEL_106;
    }
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___geocodeMapItemsForEntry_block_invoke_147;
    *(_QWORD *)&buf[24] = &unk_1E4BCDF30;
    *(_QWORD *)&buf[32] = v31;
    v84 = v32;
    *(_QWORD *)&buf[40] = v77;
    objc_msgSend(*(id *)&buf[40], "placeRefinementForCoordinate:address:completion:", v35, buf, v60, v63);

    v70 = (id *)&v84;
    goto LABEL_110;
  }
  objc_msgSend(v7, "geoMapItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12 == 0;

  if (!v13)
  {
    objc_msgSend(v7, "geoMapItem");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v80, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v15, 0);

LABEL_70:
    v17 = 1;
    goto LABEL_19;
  }
  GEOFindOrCreateLog();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 431;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "BOOL GEOMapItemsFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<"
                          "MapsSuggestionsNetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItemsFetchCom"
                          "pletion _Nonnull)";
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = "nil == (entry.geoMapItem)";
    _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Entry cannot have a nil geoMapItem if it has a origin value set", buf, 0x26u);
  }
LABEL_18:

  v17 = 0;
LABEL_19:

  return v17;
}

void sub_1A42AB168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOMapItemFromMapsSuggestionsEntry(void *a1, void *a2, char a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v12[4];
  NSObject *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = v7;
  if (v7)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __GEOMapItemFromMapsSuggestionsEntry_block_invoke;
    v12[3] = &unk_1E4BCDE70;
    v13 = v7;
    v9 = GEOMapItemsFromMapsSuggestionsEntry(a1, a2, a3, v12);
    v10 = v13;
  }
  else
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      v16 = 1024;
      v17 = 445;
      v18 = 2082;
      v19 = "BOOL GEOMapItemFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<MapsSuggestions"
            "NetworkRequester> _Nonnull, BOOL, __strong MapsSuggestionsEntryMapItemFetchCompletion _Nonnull)";
      v20 = 2082;
      v21 = "nil == (completion)";
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires completion block", buf, 0x26u);
    }
    v9 = 0;
  }

  return v9;
}

id MapsSuggestionsSetLocationFromMapItem(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  void *v12;
  id v13;
  NSObject *v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v6)
  {
    objc_msgSend(v5, "setGeoMapItem:", v6);
    objc_msgSend(v5, "setMapItemHandleData:", 0);
    objc_msgSend(v6, "shortAddress");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setString:forKey:", v7, CFSTR("MapsSuggestionsDestinationAddressKey"));

    v8 = objc_alloc(MEMORY[0x1E0CB37E8]);
    objc_msgSend(v6, "coordinate");
    v9 = (void *)objc_msgSend(v8, "initWithDouble:");
    objc_msgSend(v5, "setNumber:forKey:", v9, CFSTR("MapsSuggestionsLatitudeKey"));

    v10 = objc_alloc(MEMORY[0x1E0CB37E8]);
    objc_msgSend(v6, "coordinate");
    v12 = (void *)objc_msgSend(v10, "initWithDouble:", v11);
    objc_msgSend(v5, "setNumber:forKey:", v12, CFSTR("MapsSuggestionsLongitudeKey"));

    objc_msgSend(v5, "setInteger:forKey:", a3, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    v13 = v5;
  }
  else
  {
    GEOFindOrCreateLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = 136446978;
      v17 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      v18 = 1024;
      v19 = 454;
      v20 = 2082;
      v21 = "MapsSuggestionsEntry * _Nonnull MapsSuggestionsSetLocationFromMapItem(MapsSuggestionsEntry *__strong _Nonnul"
            "l, MapsSuggestionsMapItem *__strong _Nonnull, MapsSuggestionsGEOMapItemOrigin)";
      v22 = 2082;
      v23 = "nil == (mapItem)";
      _os_log_impl(&dword_1A427D000, v14, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a mapItem", (uint8_t *)&v16, 0x26u);
    }

    v13 = 0;
  }

  return v13;
}

void ___geocodeMapItemsForEntry_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  void *v25;
  uint64_t v26;
  _BOOL4 v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  void (**v42)(_QWORD, _QWORD, _QWORD);
  id v43;
  void *v44;
  NSObject *v45;
  _BYTE buf[12];
  __int16 v47;
  _BYTE v48[28];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "count");
  if (!v6 && v7)
  {
    objc_msgSend(v5, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v9);

    objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 5, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      v34 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
      v13 = objc_claimAutoreleasedReturnValue();
      v45 = v13;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v45, 1);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v34 + 16))(v34, v35, 0);

    }
    else
    {
      GEOFindOrCreateLog();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "firstObject");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v37;
        _os_log_impl(&dword_1A427D000, v36, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      GEOFindOrCreateLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        v47 = 1024;
        *(_DWORD *)v48 = 165;
        *(_WORD *)&v48[4] = 2082;
        *(_QWORD *)&v48[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNe"
                             "tworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
        *(_WORD *)&v48[14] = 2082;
        *(_QWORD *)&v48[16] = "YES";
        _os_log_impl(&dword_1A427D000, v13, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
      }
    }
    goto LABEL_58;
  }
  if (v6)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v6, "localizedDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "Could not resolve MapItemHandle data: %@", buf, 0xCu);

    }
  }
  v43 = v5;
  v12 = *(void **)(a1 + 40);
  v13 = *(id *)(a1 + 32);
  v14 = v12;
  -[NSObject numberForKey:](v13, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "doubleValue");
  v17 = v16;

  -[NSObject numberForKey:](v13, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "doubleValue");
  v20 = v19;

  v42 = (void (**)(_QWORD, _QWORD, _QWORD))v14;
  if (-[NSObject containsKey:](v13, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
  {
    -[NSObject stringForKey:](v13, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = 0;
  }
  v22 = objc_msgSend(v21, "length");
  v23 = v20 >= -180.0;
  if (v20 > 180.0)
    v23 = 0;
  if (v17 < -90.0)
    v23 = 0;
  v24 = v17 <= 90.0 && v23;
  if (-[NSObject containsKey:](v13, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
  {
    -[NSObject stringForKey:](v13, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v25 = 0;
  }
  v44 = v25;
  v26 = objc_msgSend(v25, "length");
  v27 = v20 == 0.0 && v17 == 0.0;
  GEOFindOrCreateLog();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A427D000, v28, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
  }

  if ((((v26 == 0) | ~v24) & (v22 == 0) | v27) != 1)
  {
    v5 = v43;
    if (v24)
    {
      v32 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v17, v20);
      v29 = v32;
      if (!v22)
      {
        v31 = v42;
        goto LABEL_47;
      }
      v31 = v42;
      if (v32)
      {
LABEL_44:
        v38 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
        objc_msgSend(v38, "addFormattedAddressLine:", v21);
        -[NSObject setAddress:](v29, "setAddress:", v38);

LABEL_47:
        if (v26)
          -[NSObject setName:](v29, "setName:", v44);
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setGeoMapItem:](v13, "setGeoMapItem:", v30);
        -[NSObject setNumber:forKey:](v13, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        GEOFindOrCreateLog();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v30;
          _os_log_impl(&dword_1A427D000, v39, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
        }

        goto LABEL_52;
      }
    }
    else
    {
      v31 = v42;
      if (!v22)
      {
        v29 = 0;
        goto LABEL_47;
      }
    }
    v29 = objc_alloc_init(MEMORY[0x1E0D27330]);
    goto LABEL_44;
  }
  GEOFindOrCreateLog();
  v29 = objc_claimAutoreleasedReturnValue();
  v5 = v43;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138413058;
    *(_QWORD *)&buf[4] = v44;
    v47 = 2112;
    *(_QWORD *)v48 = v21;
    *(_WORD *)&v48[8] = 2048;
    *(double *)&v48[10] = v17;
    *(_WORD *)&v48[18] = 2048;
    *(double *)&v48[20] = v20;
    _os_log_impl(&dword_1A427D000, v29, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
  }
  v30 = 0;
  v31 = v42;
LABEL_52:

  if (v30)
  {
    *(_QWORD *)buf = v30;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v31)[2](v31, v40, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to fetch a new geoMapItem for this entry. The entry should have a latitude/longitude or an address string"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    GEOFindOrCreateLog();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl(&dword_1A427D000, v41, OS_LOG_TYPE_ERROR, "Error building a minimal mapItem, %@", buf, 0xCu);
    }

    ((void (**)(_QWORD, _QWORD, void *))v31)[2](v31, 0, v40);
  }

LABEL_58:
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void ___geocodeMapItemsForEntry_block_invoke_141(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6 && objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v9);

    objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 8, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = 0;

      v15 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
      v16 = objc_claimAutoreleasedReturnValue();
      v20 = v16;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v15 + 16))(v15, v17, 0);

    }
    else
    {
      GEOFindOrCreateLog();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "firstObject");
        v19 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v22 = v19;
        _os_log_impl(&dword_1A427D000, v18, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      GEOFindOrCreateLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v22 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        v23 = 1024;
        v24 = 195;
        v25 = 2082;
        v26 = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNetworkRequester>"
              ", __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
        v27 = 2082;
        v28 = "YES";
        _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
      }
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "localizedDescription");
      v11 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v22 = v11;
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "ticket submitWithHandler failed %@", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void ___geocodeMapItemsForEntry_block_invoke_146(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void (**v13)(id, void *, _QWORD);
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  void *v24;
  uint64_t v25;
  _BOOL4 v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  id v40;
  void *v41;
  NSObject *v42;
  _BYTE buf[12];
  __int16 v44;
  _BYTE v45[28];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v5;
      v44 = 2112;
      *(_QWORD *)v45 = v6;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "Received response. MapItems: %@, error: %@", buf, 0x16u);
    }

  }
  v8 = objc_msgSend(v5, "count");
  if (!v6 && v8)
  {
    objc_msgSend(v5, "firstObject");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v10);

    objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 3, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      v32 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
      v12 = objc_claimAutoreleasedReturnValue();
      v42 = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v32 + 16))(v32, v33, 0);

    }
    else
    {
      GEOFindOrCreateLog();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "firstObject");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v35;
        _os_log_impl(&dword_1A427D000, v34, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      GEOFindOrCreateLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        v44 = 1024;
        *(_DWORD *)v45 = 239;
        *(_WORD *)&v45[4] = 2082;
        *(_QWORD *)&v45[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNe"
                             "tworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
        *(_WORD *)&v45[14] = 2082;
        *(_QWORD *)&v45[16] = "YES";
        _os_log_impl(&dword_1A427D000, v12, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
      }
    }
    goto LABEL_60;
  }
  v40 = v6;
  v11 = *(void **)(a1 + 40);
  v12 = *(id *)(a1 + 32);
  v13 = v11;
  -[NSObject numberForKey:](v12, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "doubleValue");
  v16 = v15;

  -[NSObject numberForKey:](v12, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "doubleValue");
  v19 = v18;

  if (-[NSObject containsKey:](v12, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
  {
    -[NSObject stringForKey:](v12, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = 0;
  }
  v21 = objc_msgSend(v20, "length");
  v22 = v19 >= -180.0;
  if (v19 > 180.0)
    v22 = 0;
  if (v16 < -90.0)
    v22 = 0;
  v23 = v16 <= 90.0 && v22;
  if (-[NSObject containsKey:](v12, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
  {
    -[NSObject stringForKey:](v12, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v24 = 0;
  }
  v41 = v24;
  v25 = objc_msgSend(v24, "length");
  v26 = v19 == 0.0 && v16 == 0.0;
  GEOFindOrCreateLog();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A427D000, v27, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
  }

  if ((((v25 == 0) | ~v23) & (v21 == 0) | v26) != 1)
  {
    if (v23)
    {
      v30 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v16, v19);
      v28 = v30;
      if (!v21)
      {
        v6 = v40;
        goto LABEL_49;
      }
      v6 = v40;
      if (v30)
      {
LABEL_46:
        v36 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
        objc_msgSend(v36, "addFormattedAddressLine:", v20);
        -[NSObject setAddress:](v28, "setAddress:", v36);

LABEL_49:
        if (v25)
          -[NSObject setName:](v28, "setName:", v41);
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setGeoMapItem:](v12, "setGeoMapItem:", v29);
        -[NSObject setNumber:forKey:](v12, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        GEOFindOrCreateLog();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v29;
          _os_log_impl(&dword_1A427D000, v37, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
        }

        goto LABEL_54;
      }
    }
    else
    {
      v6 = v40;
      if (!v21)
      {
        v28 = 0;
        goto LABEL_49;
      }
    }
    v28 = objc_alloc_init(MEMORY[0x1E0D27330]);
    goto LABEL_46;
  }
  GEOFindOrCreateLog();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138413058;
    *(_QWORD *)&buf[4] = v41;
    v44 = 2112;
    *(_QWORD *)v45 = v20;
    *(_WORD *)&v45[8] = 2048;
    *(double *)&v45[10] = v16;
    *(_WORD *)&v45[18] = 2048;
    *(double *)&v45[20] = v19;
    _os_log_impl(&dword_1A427D000, v28, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
  }
  v29 = 0;
  v6 = v40;
LABEL_54:

  if (v29)
  {
    *(_QWORD *)buf = v29;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v13[2](v13, v38, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to fetch a new geoMapItem for this entry. The entry should have a latitude/longitude or an address string"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    GEOFindOrCreateLog();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl(&dword_1A427D000, v39, OS_LOG_TYPE_ERROR, "Error building a minimal mapItem, %@", buf, 0xCu);
    }

    ((void (**)(id, void *, void *))v13)[2](v13, 0, v38);
  }

LABEL_60:
}

void ___geocodeMapItemsForEntry_block_invoke_147(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void (**v13)(id, void *, _QWORD);
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  void *v24;
  uint64_t v25;
  _BOOL4 v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  NSObject *v40;
  void *v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  id v47;
  void *v48;
  _QWORD v49[4];
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  _BYTE buf[12];
  __int16 v56;
  _BYTE v57[28];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v5;
      v56 = 2112;
      *(_QWORD *)v57 = v6;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "Received response. MapItems: %@, error: %@", buf, 0x16u);
    }

  }
  v8 = objc_msgSend(v5, "count");
  if (v6 || !v8)
  {
    v47 = v6;
    v11 = *(void **)(a1 + 48);
    v12 = *(id *)(a1 + 32);
    v13 = v11;
    -[NSObject numberForKey:](v12, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "doubleValue");
    v16 = v15;

    -[NSObject numberForKey:](v12, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "doubleValue");
    v19 = v18;

    if (-[NSObject containsKey:](v12, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
    {
      -[NSObject stringForKey:](v12, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v20 = 0;
    }
    v21 = objc_msgSend(v20, "length");
    v22 = v19 >= -180.0;
    if (v19 > 180.0)
      v22 = 0;
    if (v16 < -90.0)
      v22 = 0;
    v23 = v16 <= 90.0 && v22;
    if (-[NSObject containsKey:](v12, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
    {
      -[NSObject stringForKey:](v12, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v24 = 0;
    }
    v48 = v24;
    v25 = objc_msgSend(v24, "length");
    v26 = v19 == 0.0 && v16 == 0.0;
    GEOFindOrCreateLog();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v27, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
    }

    if ((((v25 == 0) | ~v23) & (v21 == 0) | v26) == 1)
    {
      GEOFindOrCreateLog();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)&buf[4] = v48;
        v56 = 2112;
        *(_QWORD *)v57 = v20;
        *(_WORD *)&v57[8] = 2048;
        *(double *)&v57[10] = v16;
        *(_WORD *)&v57[18] = 2048;
        *(double *)&v57[20] = v19;
        _os_log_impl(&dword_1A427D000, v28, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
      }
      v29 = 0;
      v6 = v47;
LABEL_59:

      if (v29)
      {
        *(_QWORD *)buf = v29;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v13[2](v13, v45, 0);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to fetch a new geoMapItem for this entry. The entry should have a latitude/longitude or an address string"));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        GEOFindOrCreateLog();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v45;
          _os_log_impl(&dword_1A427D000, v46, OS_LOG_TYPE_ERROR, "Error building a minimal mapItem, %@", buf, 0xCu);
        }

        ((void (**)(id, void *, void *))v13)[2](v13, 0, v45);
      }

      goto LABEL_65;
    }
    if (v23)
    {
      v30 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v16, v19);
      v28 = v30;
      if (!v21)
      {
        v6 = v47;
        goto LABEL_54;
      }
      v6 = v47;
      if (v30)
      {
LABEL_48:
        v42 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
        objc_msgSend(v42, "addFormattedAddressLine:", v20);
        -[NSObject setAddress:](v28, "setAddress:", v42);

LABEL_54:
        if (v25)
          -[NSObject setName:](v28, "setName:", v48);
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setGeoMapItem:](v12, "setGeoMapItem:", v29);
        -[NSObject setNumber:forKey:](v12, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        GEOFindOrCreateLog();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v29;
          _os_log_impl(&dword_1A427D000, v44, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
        }

        goto LABEL_59;
      }
    }
    else
    {
      v6 = v47;
      if (!v21)
      {
        v28 = 0;
        goto LABEL_54;
      }
    }
    v28 = objc_alloc_init(MEMORY[0x1E0D27330]);
    goto LABEL_48;
  }
  objc_msgSend(v5, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "conformsToProtocol:", &unk_1EE733608))
  {
    MapsSuggestionsMapItemConvertIfNeeded(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v10);

  objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v31)
  {
    GEOFindOrCreateLog();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "firstObject");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v41;
      _os_log_impl(&dword_1A427D000, v40, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    GEOFindOrCreateLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      v56 = 1024;
      *(_DWORD *)v57 = 254;
      *(_WORD *)&v57[4] = 2082;
      *(_QWORD *)&v57[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNetw"
                           "orkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
      *(_WORD *)&v57[14] = 2082;
      *(_QWORD *)&v57[16] = "YES";
      _os_log_impl(&dword_1A427D000, v12, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
    }
LABEL_65:

    goto LABEL_66;
  }
  objc_msgSend(v5, "firstObject");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "_relatedPlaceLists");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v33, "count") != 1)
  {
LABEL_50:
    objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 10, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    v43 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
    v38 = (id)objc_claimAutoreleasedReturnValue();
    v54 = v38;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v54, 1);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v43 + 16))(v43, v39, 0);
    goto LABEL_51;
  }
  objc_msgSend(v33, "firstObject");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "mapIdentifiers");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v35, "count") != 1)
  {

    goto LABEL_50;
  }
  v36 = *(void **)(a1 + 40);
  objc_msgSend(v35, "firstObject");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = ___geocodeMapItemsForEntry_block_invoke_148;
  v49[3] = &unk_1E4BCDF80;
  v50 = v35;
  v53 = *(id *)(a1 + 48);
  v51 = 0;
  v52 = *(id *)(a1 + 32);
  v38 = v35;
  objc_msgSend(v36, "placeForMuid:completion:", v37, v49);

  v39 = v50;
LABEL_51:

LABEL_66:
}

void ___geocodeMapItemsForEntry_block_invoke_148(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(a1 + 32), "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v15 = v7;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "failed to get place with MUID:%@ error:%@", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(a2, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
    objc_msgSend(*(id *)(a1 + 48), "setGeoMapItem:", v9);

    objc_msgSend(*(id *)(a1 + 48), "setInteger:forKey:", 8, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    v10 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 48), "geoMapItem");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v13, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v10 + 16))(v10, v12, 0);

  }
}

void ___geocodeMapItemsForEntry_block_invoke_149(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  id v14;
  NSObject *v15;
  void (**v16)(id, void *, _QWORD);
  void *v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  id v27;
  void *v28;
  uint64_t v29;
  _BOOL4 v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  NSObject *v41;
  void *v42;
  NSObject *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  NSObject *v52;
  id v53;
  void (**v54)(id, void *, _QWORD);
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  _QWORD v61[4];
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  _BYTE buf[12];
  __int16 v70;
  _BYTE v71[28];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v5;
      v70 = 2112;
      *(_QWORD *)v71 = v6;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "Received response. MapItems: %@, error: %@", buf, 0x16u);
    }

  }
  if (v6)
  {
    v59 = v5;
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v9 = a1[4];
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v9;
    v70 = 2112;
    *(_QWORD *)v71 = v6;
    v10 = "Forward GEO for address:%@ failed with error:%@";
    v11 = v8;
    v12 = OS_LOG_TYPE_ERROR;
    v13 = 22;
    goto LABEL_10;
  }
  if (!objc_msgSend(v5, "count"))
  {
    v59 = v5;
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_11:

      v14 = a1[7];
      v15 = a1[5];
      v16 = (void (**)(id, void *, _QWORD))v14;
      -[NSObject numberForKey:](v15, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      -[NSObject numberForKey:](v15, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "doubleValue");
      v22 = v21;

      if (-[NSObject containsKey:](v15, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
      {
        -[NSObject stringForKey:](v15, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v23 = 0;
      }
      v58 = v23;
      v24 = objc_msgSend(v23, "length");
      v25 = v22 >= -180.0;
      if (v22 > 180.0)
        v25 = 0;
      if (v19 < -90.0)
        v25 = 0;
      v26 = v19 <= 90.0 && v25;
      v27 = v6;
      if (-[NSObject containsKey:](v15, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
      {
        -[NSObject stringForKey:](v15, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v28 = 0;
      }
      v60 = v28;
      v29 = objc_msgSend(v28, "length");
      v30 = v22 == 0.0 && v19 == 0.0;
      GEOFindOrCreateLog();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A427D000, v31, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
      }

      if ((((v29 == 0) | ~v26) & (v24 == 0) | v30) == 1)
      {
        GEOFindOrCreateLog();
        v32 = objc_claimAutoreleasedReturnValue();
        v6 = v27;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138413058;
          *(_QWORD *)&buf[4] = v60;
          v70 = 2112;
          v33 = v58;
          *(_QWORD *)v71 = v58;
          *(_WORD *)&v71[8] = 2048;
          *(double *)&v71[10] = v19;
          *(_WORD *)&v71[18] = 2048;
          *(double *)&v71[20] = v22;
          _os_log_impl(&dword_1A427D000, v32, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
          v34 = 0;
          v5 = v59;
        }
        else
        {
          v34 = 0;
          v5 = v59;
          v33 = v58;
        }
LABEL_59:

        if (v34)
        {
          *(_QWORD *)buf = v34;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v16[2](v16, v42, 0);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to fetch a new geoMapItem for this entry. The entry should have a latitude/longitude or an address string"));
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          GEOFindOrCreateLog();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v42;
            _os_log_impl(&dword_1A427D000, v43, OS_LOG_TYPE_ERROR, "Error building a minimal mapItem, %@", buf, 0xCu);
          }

          ((void (**)(id, void *, void *))v16)[2](v16, 0, v42);
        }

LABEL_65:
        goto LABEL_66;
      }
      v6 = v27;
      if (v26)
      {
        v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v19, v22);
        v32 = v35;
        v33 = v58;
        if (v24)
        {
          v5 = v59;
          if (v35)
            goto LABEL_43;
          goto LABEL_42;
        }
        v5 = v59;
        if (!v29)
          goto LABEL_56;
      }
      else
      {
        v5 = v59;
        v33 = v58;
        if (v24)
        {
LABEL_42:
          v32 = objc_alloc_init(MEMORY[0x1E0D27330]);
LABEL_43:
          v38 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
          objc_msgSend(v38, "addFormattedAddressLine:", v33);
          -[NSObject setAddress:](v32, "setAddress:", v38);

          if (!v29)
            goto LABEL_56;
          goto LABEL_55;
        }
        v32 = 0;
        if (!v29)
        {
LABEL_56:
          objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v32);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setGeoMapItem:](v15, "setGeoMapItem:", v34);
          -[NSObject setNumber:forKey:](v15, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
          GEOFindOrCreateLog();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v34;
            _os_log_impl(&dword_1A427D000, v41, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
          }

          goto LABEL_59;
        }
      }
LABEL_55:
      -[NSObject setName:](v32, "setName:", v60);
      goto LABEL_56;
    }
    v39 = a1[4];
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v39;
    v10 = "Forward GEO did not return a mapitem for address:%@";
    v11 = v8;
    v12 = OS_LOG_TYPE_DEBUG;
    v13 = 12;
LABEL_10:
    _os_log_impl(&dword_1A427D000, v11, v12, v10, buf, v13);
    goto LABEL_11;
  }
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "firstObject");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v36, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v37 = 0;
    }
    objc_msgSend(a1[5], "setGeoMapItem:", v37);

    objc_msgSend(a1[5], "geoMapItem");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v40)
    {
      GEOFindOrCreateLog();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "firstObject");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v45;
        _os_log_impl(&dword_1A427D000, v44, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

      }
      objc_msgSend(a1[5], "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*((void (**)(void))a1[7] + 2))();
      GEOFindOrCreateLog();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        v70 = 1024;
        *(_DWORD *)v71 = 305;
        *(_WORD *)&v71[4] = 2082;
        *(_QWORD *)&v71[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNe"
                             "tworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
        *(_WORD *)&v71[14] = 2082;
        *(_QWORD *)&v71[16] = "YES";
        _os_log_impl(&dword_1A427D000, v15, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
      }
      goto LABEL_65;
    }
    objc_msgSend(a1[5], "setInteger:forKey:", 2, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    if (objc_msgSend(a1[5], "type") == 23)
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
        goto LABEL_74;
    }
    else if ((GEOConfigGetBOOL() & 1) != 0)
    {
LABEL_74:
      GEOFindOrCreateLog();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = a1[4];
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v53;
        _os_log_impl(&dword_1A427D000, v52, OS_LOG_TYPE_DEBUG, "Returning forward GEOcoded mapitem for address:%@", buf, 0xCu);
      }

      v54 = (void (**)(id, void *, _QWORD))a1[7];
      objc_msgSend(a1[5], "geoMapItem");
      v15 = objc_claimAutoreleasedReturnValue();
      v68 = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v68, 1);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v54[2](v54, v55, 0);

      goto LABEL_65;
    }
    objc_msgSend(a1[5], "geoMapItem");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "_styleAttributes");
    v47 = objc_claimAutoreleasedReturnValue();
    if (v47)
    {
      v48 = (void *)v47;
      objc_msgSend(a1[5], "geoMapItem");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "_styleAttributes");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D270A8], "addressMarkerStyleAttributes");
      v51 = (void *)objc_claimAutoreleasedReturnValue();

      if (v50 != v51)
        goto LABEL_74;
    }
    else
    {

    }
    v56 = a1[6];
    v57 = a1[4];
    v61[0] = MEMORY[0x1E0C809B0];
    v61[1] = 3221225472;
    v61[2] = ___geocodeMapItemsForEntry_block_invoke_151;
    v61[3] = &unk_1E4BCDF58;
    v62 = v5;
    v63 = 0;
    v64 = a1[5];
    v65 = a1[4];
    v67 = a1[7];
    v66 = a1[6];
    objc_msgSend(v56, "placeRefinementForAddress:completion:", v57, v61);

  }
LABEL_66:

}

void ___geocodeMapItemsForEntry_block_invoke_151(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  void *v32;
  uint64_t v33;
  _BOOL4 v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  id v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  _QWORD v60[4];
  id v61;
  id v62;
  id v63;
  void *v64;
  _BYTE buf[12];
  __int16 v66;
  _BYTE v67[28];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v8;
      v66 = 2112;
      *(_QWORD *)v67 = v9;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "Received response. MapItems: %@, error: %@", buf, 0x16u);
    }

  }
  v10 = objc_msgSend(v5, "count");
  if (v6 || !v10)
  {
    v59 = v5;
    GEOFindOrCreateLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(a1 + 48), "geoMapItem");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "coordinate");
      v16 = v15;
      objc_msgSend(*(id *)(a1 + 48), "geoMapItem");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "coordinate");
      v18 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v16;
      v66 = 2048;
      *(_QWORD *)v67 = v19;
      *(_WORD *)&v67[8] = 2112;
      *(_QWORD *)&v67[10] = v18;
      *(_WORD *)&v67[18] = 2112;
      *(_QWORD *)&v67[20] = v6;
      _os_log_impl(&dword_1A427D000, v13, OS_LOG_TYPE_ERROR, "Failed to refine for <%.6f,%.6f> address:%@ error:%@", buf, 0x2Au);

    }
    v20 = *(void **)(a1 + 72);
    v21 = *(id *)(a1 + 48);
    v57 = v20;
    -[NSObject numberForKey:](v21, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "doubleValue");
    v24 = v23;

    -[NSObject numberForKey:](v21, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "doubleValue");
    v27 = v26;

    v58 = v6;
    if (-[NSObject containsKey:](v21, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
    {
      -[NSObject stringForKey:](v21, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v28 = 0;
    }
    v29 = objc_msgSend(v28, "length");
    v30 = v27 >= -180.0;
    if (v27 > 180.0)
      v30 = 0;
    if (v24 < -90.0)
      v30 = 0;
    v31 = v24 <= 90.0 && v30;
    if (-[NSObject containsKey:](v21, "containsKey:", CFSTR("MapsSuggestionsEntryTitleNameKey")))
    {
      -[NSObject stringForKey:](v21, "stringForKey:", CFSTR("MapsSuggestionsEntryTitleNameKey"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v32 = 0;
    }
    v33 = objc_msgSend(v32, "length", v32);
    v34 = v27 == 0.0 && v24 == 0.0;
    GEOFindOrCreateLog();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v35, OS_LOG_TYPE_DEBUG, "Attempting to build a minimal information GEOMapItem", buf, 2u);
    }

    if ((((v33 == 0) | ~v31) & (v29 == 0) | v34) == 1)
    {
      GEOFindOrCreateLog();
      v36 = objc_claimAutoreleasedReturnValue();
      v5 = v59;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138413058;
        v37 = v56;
        *(_QWORD *)&buf[4] = v56;
        v66 = 2112;
        *(_QWORD *)v67 = v28;
        *(_WORD *)&v67[8] = 2048;
        *(double *)&v67[10] = v24;
        *(_WORD *)&v67[18] = 2048;
        *(double *)&v67[20] = v27;
        _os_log_impl(&dword_1A427D000, v36, OS_LOG_TYPE_ERROR, "Failed to build a mapItem. name='%@', addressString='%@', coordinate=%.6f,%.6f", buf, 0x2Au);
        v38 = 0;
        v6 = v58;
      }
      else
      {
        v38 = 0;
        v6 = v58;
        v37 = v56;
      }
LABEL_61:

      if (v38)
      {
        *(_QWORD *)buf = v38;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = v57;
        (*((void (**)(id, void *, _QWORD))v57 + 2))(v57, v53, 0);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to fetch a new geoMapItem for this entry. The entry should have a latitude/longitude or an address string"));
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        GEOFindOrCreateLog();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v53;
          _os_log_impl(&dword_1A427D000, v55, OS_LOG_TYPE_ERROR, "Error building a minimal mapItem, %@", buf, 0xCu);
        }

        v54 = v57;
        (*((void (**)(id, _QWORD, void *))v57 + 2))(v57, 0, v53);
      }

      goto LABEL_67;
    }
    v5 = v59;
    if (v31)
    {
      v39 = objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", v24, v27);
      v36 = v39;
      v37 = v56;
      if (!v29)
      {
        v6 = v58;
        goto LABEL_56;
      }
      v6 = v58;
      if (v39)
      {
LABEL_50:
        v50 = objc_alloc_init(MEMORY[0x1E0D26EB8]);
        objc_msgSend(v50, "addFormattedAddressLine:", v28);
        -[NSObject setAddress:](v36, "setAddress:", v50);

LABEL_56:
        if (v33)
          -[NSObject setName:](v36, "setName:", v37);
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v36);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setGeoMapItem:](v21, "setGeoMapItem:", v38);
        -[NSObject setNumber:forKey:](v21, "setNumber:forKey:", &unk_1E4C09758, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        GEOFindOrCreateLog();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v38;
          _os_log_impl(&dword_1A427D000, v52, OS_LOG_TYPE_DEBUG, "Minimally built mapItem: %@", buf, 0xCu);
        }

        goto LABEL_61;
      }
    }
    else
    {
      v6 = v58;
      v37 = v56;
      if (!v29)
      {
        v36 = 0;
        goto LABEL_56;
      }
    }
    v36 = objc_alloc_init(MEMORY[0x1E0D27330]);
    goto LABEL_50;
  }
  objc_msgSend(v5, "firstObject");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "conformsToProtocol:", &unk_1EE733608))
  {
    MapsSuggestionsMapItemConvertIfNeeded(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "setGeoMapItem:", v12);

  objc_msgSend(*(id *)(a1 + 48), "geoMapItem");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v40)
  {
    GEOFindOrCreateLog();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "firstObject");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v49;
      _os_log_impl(&dword_1A427D000, v48, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 48), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    GEOFindOrCreateLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
      v66 = 1024;
      *(_DWORD *)v67 = 322;
      *(_WORD *)&v67[4] = 2082;
      *(_QWORD *)&v67[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNetw"
                           "orkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
      *(_WORD *)&v67[14] = 2082;
      *(_QWORD *)&v67[16] = "YES";
      _os_log_impl(&dword_1A427D000, v21, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
    }
LABEL_67:

    goto LABEL_68;
  }
  objc_msgSend(v5, "firstObject");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "_relatedPlaceLists");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v42, "count") != 1)
  {
LABEL_52:
    objc_msgSend(*(id *)(a1 + 48), "setInteger:forKey:", 3, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    v51 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 48), "geoMapItem");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = v44;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v64, 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v51 + 16))(v51, v47, 0);
    goto LABEL_53;
  }
  objc_msgSend(v42, "firstObject");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "mapIdentifiers");
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v44, "count") != 1)
  {

    goto LABEL_52;
  }
  v45 = *(void **)(a1 + 64);
  objc_msgSend(v44, "firstObject");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v60[0] = MEMORY[0x1E0C809B0];
  v60[1] = 3221225472;
  v60[2] = ___geocodeMapItemsForEntry_block_invoke_152;
  v60[3] = &unk_1E4BCDF30;
  v63 = *(id *)(a1 + 72);
  v61 = *(id *)(a1 + 40);
  v62 = *(id *)(a1 + 48);
  objc_msgSend(v45, "placeForMuid:completion:", v46, v60);

  v47 = v63;
LABEL_53:

LABEL_68:
}

void ___geocodeMapItemsForEntry_block_invoke_152(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), MEMORY[0x1E0C9AA60], *(_QWORD *)(a1 + 32));
  }
  else
  {
    objc_msgSend(a2, "firstObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(*(id *)(a1 + 40), "setGeoMapItem:", v5);

    v6 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 40), "geoMapItem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v6 + 16))(v6, v8, 0);

  }
}

void ___geocodeMapItemsForEntry_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  char *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  _BYTE v25[14];
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      v23 = v5;
      v24 = 2112;
      *(_QWORD *)v25 = v6;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "Received response. MapItems: %@, error: %@", buf, 0x16u);
    }

  }
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___geocodeMapItemsForEntry_block_invoke_154;
  v20[3] = &unk_1E4BCDFA8;
  v9 = v8;
  v21 = v9;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v20);
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = objc_msgSend(v10, "count");
  if (v6 || !v11)
  {
    v14 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -8, CFSTR("Search did not return any mapItems."));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v15);

  }
  else
  {
    objc_msgSend(v10, "firstObject");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v13);

    objc_msgSend(*(id *)(a1 + 32), "geoMapItem");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(*(id *)(a1 + 32), "setNumber:forKey:", &unk_1E4C09770, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      GEOFindOrCreateLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v10, "firstObject");
        v18 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v23 = v18;
        _os_log_impl(&dword_1A427D000, v17, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      GEOFindOrCreateLog();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v23 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
        v24 = 1024;
        *(_DWORD *)v25 = 369;
        *(_WORD *)&v25[4] = 2082;
        *(_QWORD *)&v25[6] = "BOOL _geocodeMapItemsForEntry(MapsSuggestionsEntry *__strong, __strong id<MapsSuggestionsNe"
                             "tworkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
        v26 = 2082;
        v27 = "YES";
        _os_log_impl(&dword_1A427D000, v19, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
      }

    }
  }

}

void ___geocodeMapItemsForEntry_block_invoke_154(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE733608))
  {
    MapsSuggestionsMapItemConvertIfNeeded(v5);
    v3 = objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)v3;
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

    }
  }

}

void ___searchAirport_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint8_t buf[4];
  _BYTE v21[14];
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6 || objc_msgSend(v5, "count") != 1)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v21 = objc_msgSend(v5, "count");
      *(_WORD *)&v21[4] = 2112;
      *(_QWORD *)&v21[6] = v6;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "Could not get airport code in %u mapItems, error: %@", buf, 0x12u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend(v5, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EE733608))
    {
      MapsSuggestionsMapItemConvertIfNeeded(v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = 0;
    }

    if ((MapsSuggestionsMapItemIsAirport(v8) & 1) != 0)
    {
      if (!MapsSuggestionsMapItemIsVenue(v8))
      {
        GEOFindOrCreateLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v8, "name");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v21 = v11;
          _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_DEBUG, "Airport '%@' is not a Venue, but that's ok", buf, 0xCu);

        }
      }
      objc_msgSend(*(id *)(a1 + 32), "setGeoMapItem:", v8);
      if (v8)
      {
        objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 4, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        v12 = *(_QWORD *)(a1 + 40);
        v19 = v8;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *, _QWORD))(v12 + 16))(v12, v13, 0);

      }
      else
      {
        GEOFindOrCreateLog();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v5, "firstObject");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v21 = v17;
          _os_log_impl(&dword_1A427D000, v16, OS_LOG_TYPE_ERROR, "Cleansed geoMapItem is nil for %@", buf, 0xCu);

        }
        objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 0, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        GEOFindOrCreateLog();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)v21 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOMapItem.m";
          *(_WORD *)&v21[8] = 1024;
          *(_DWORD *)&v21[10] = 139;
          v22 = 2082;
          v23 = "BOOL _searchAirport(MapsSuggestionsEntry *__strong, NSString *__strong, __strong id<MapsSuggestionsNetwo"
                "rkRequester>, __strong MapsSuggestionsEntryMapItemsFetchCompletion)_block_invoke";
          v24 = 2082;
          v25 = "YES";
          _os_log_impl(&dword_1A427D000, v18, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Cleansed geomapItem should never be nil", buf, 0x26u);
        }

      }
    }
    else
    {
      GEOFindOrCreateLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v8, "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v21 = v15;
        _os_log_impl(&dword_1A427D000, v14, OS_LOG_TYPE_ERROR, "Airport '%@' is not actually an Airport", buf, 0xCu);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

  }
}

void sub_1A42AF8FC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42AFACC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1A42B0360(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42B2974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42B3628(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL MapsSuggestionsEntriesAreBothOfType(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _BOOL8 v8;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
    v8 = objc_msgSend(v5, "type") == a1 && objc_msgSend(v7, "type") == a1;

  return v8;
}

uint64_t MapsSuggestionsEntriesShouldBeOfOneOfEachType(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (a1 == a2)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v14 = 136446978;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+BusinessLogic.m";
      v16 = 1024;
      v17 = 404;
      v18 = 2082;
      v19 = "BOOL MapsSuggestionsEntriesShouldBeOfOneOfEachType(MapsSuggestionsEntryType, MapsSuggestionsEntryType, MapsS"
            "uggestionsEntry *__strong _Nullable, MapsSuggestionsEntry *__strong _Nullable)";
      v20 = 2082;
      v21 = "type1 == type2";
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. The MSg entry types need to be different", (uint8_t *)&v14, 0x26u);
    }

LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v11 = 0;
  if (v7 && v8)
  {
    v13 = objc_msgSend(v7, "type");
    if (v13 != objc_msgSend(v9, "type")
      && (objc_msgSend(v7, "type") == a1 && objc_msgSend(v9, "type") == a2
       || objc_msgSend(v7, "type") == a2 && objc_msgSend(v9, "type") == a1))
    {
      v11 = 1;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_6:

  return v11;
}

BOOL MapsSuggestionsEntriesAtLeastOneIsOfType(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _BOOL8 v8;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
    v8 = objc_msgSend(v5, "type") == a1 || objc_msgSend(v7, "type") == a1;

  return v8;
}

BOOL MapsSuggestionsAtLeastOneEntryIsShortcut(void *a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  v4 = MapsSuggestionsIsShortcutEntry(a1) || MapsSuggestionsIsShortcutEntry(v3);

  return v4;
}

uint64_t MapsSuggestionsOnlyOneIsPureShortcut(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  id v6;
  unsigned int v7;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsShortcutOnlyKey")))
    v5 = objc_msgSend(v3, "BOOLeanForKey:", CFSTR("MapsSuggestionsShortcutOnlyKey"));
  else
    v5 = 0;
  v6 = v4;
  if (objc_msgSend(v6, "containsKey:", CFSTR("MapsSuggestionsShortcutOnlyKey")))
    v7 = objc_msgSend(v6, "BOOLeanForKey:", CFSTR("MapsSuggestionsShortcutOnlyKey"));
  else
    v7 = 0;

  return v5 ^ v7;
}

uint64_t MapsSuggestionsMergeAsShortcut(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  int v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  __int16 v28;
  uint8_t buf[2];
  uint8_t v30[16];

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
  v6 = objc_msgSend(v4, "containsKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
  v7 = v6;
  if ((v5 & 1) == 0 && !v6)
    goto LABEL_3;
  v9 = v5 & v6;
  v10 = v3;
  if (objc_msgSend(v10, "containsKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey"))
    && objc_msgSend(v10, "BOOLeanForKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey"))
    && ((v11 = v10, !objc_msgSend(v10, "containsKey:", CFSTR("MapsSuggestionsRoutingNotAvailableKey")))
     || (v11 = v10, !objc_msgSend(v10, "BOOLeanForKey:", CFSTR("MapsSuggestionsRoutingNotAvailableKey"))))
    || (v10,
        v11 = v4,
        objc_msgSend(v11, "containsKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey")))
    && objc_msgSend(v11, "BOOLeanForKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey"))
    && (!objc_msgSend(v11, "containsKey:", CFSTR("MapsSuggestionsRoutingNotAvailableKey"))
     || !objc_msgSend(v11, "BOOLeanForKey:", CFSTR("MapsSuggestionsRoutingNotAvailableKey"))))
  {

    objc_msgSend(v10, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsNeedsETATrackingKey"));
    objc_msgSend(v10, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsRoutingNotAvailableKey"));
  }
  else
  {

  }
  v12 = v4;
  v13 = objc_msgSend(v10, "type");
  v14 = objc_msgSend(v12, "type");

  if (MapsSuggestionsEntryTypeCouldBeShortcut(v14))
    v13 = v14;
  if (v9)
  {
    objc_msgSend(v10, "_overrideType:", v13);
    objc_msgSend(v12, "numberForKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setNumber:forKey:", v15, CFSTR("MapsSuggestionsShortcutPositionKey"));

    objc_msgSend(v10, "setIconData:", 0);
    v16 = v10;
    v17 = v12;
    v18 = objc_msgSend(v17, "containsKey:", CFSTR("MapsSuggestionsCoreRoutineCustomLabel"));
    v19 = v17;
    if ((v18 & 1) != 0
      || (v20 = objc_msgSend(v16, "containsKey:", CFSTR("MapsSuggestionsCoreRoutineCustomLabel")), v19 = v16, v20))
    {
      objc_msgSend(v19, "stringForKey:", CFSTR("MapsSuggestionsCoreRoutineCustomLabel"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = 0;
    }

    objc_msgSend(v16, "setString:forKey:", v21, CFSTR("MapsSuggestionsCoreRoutineCustomLabel"));
    if (MapsSuggestionsOnlyOneIsPureShortcut(v16, v17))
      objc_msgSend(v16, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsShortcutOnlyKey"));
    GEOFindOrCreateLog();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1A427D000, v22, OS_LOG_TYPE_DEBUG, "MergedAsShortcut: shortcut=both", v30, 2u);
    }
    goto LABEL_33;
  }
  if (((v5 ^ 1 | v7) & 1) == 0)
  {
    v22 = v10;
    -[NSObject _overrideType:](v22, "_overrideType:", v13);
    -[NSObject setNumber:forKey:](v22, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsShortcutOnlyKey"));
    -[NSObject setIconData:](v22, "setIconData:", 0);
    GEOFindOrCreateLog();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v25 = "MergedAsShortcut: shortcut=ori";
      v26 = buf;
      goto LABEL_26;
    }
LABEL_27:

LABEL_33:
    v8 = 1;
    goto LABEL_34;
  }
  if (((v5 ^ 1) & v7) != 0)
  {
    v22 = v12;
    objc_msgSend(v10, "replaceByEntry:", v22);
    objc_msgSend(v10, "_overrideType:", v13);
    -[NSObject numberForKey:](v22, "numberForKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setNumber:forKey:", v23, CFSTR("MapsSuggestionsShortcutPositionKey"));

    objc_msgSend(v10, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsShortcutOnlyKey"));
    objc_msgSend(v10, "setIconData:", 0);
    GEOFindOrCreateLog();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v28 = 0;
      v25 = "MergedAsShortcut: shortcut=new";
      v26 = (uint8_t *)&v28;
LABEL_26:
      _os_log_impl(&dword_1A427D000, v24, OS_LOG_TYPE_DEBUG, v25, v26, 2u);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
LABEL_3:
  v8 = 0;
LABEL_34:

  return v8;
}

MapsSuggestionsBlockCondition *MapsSuggestionsCondition(void *a1, void *a2)
{
  id v3;
  id v4;
  MapsSuggestionsBlockCondition *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[MapsSuggestionsBlockCondition initWithName:block:]([MapsSuggestionsBlockCondition alloc], "initWithName:block:", v4, v3);

  return v5;
}

void sub_1A42B4308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42B475C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsRoutineRelevanceScoreProvider>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI44MapsSuggestionsRoutineRelevanceScoreProviderEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsRoutineRelevanceScoreProvider]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A42B4948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42B5070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A42B55D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  id *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;

  v27 = v25;

  objc_destroyWeak((id *)(v26 - 104));
  objc_destroyWeak(v22);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42B5800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42B5BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

dispatch_queue_t *MSg::Queue::Queue(dispatch_queue_t *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_queue_t v8;
  dispatch_queue_t v9;

  v5 = a2;
  v6 = a3;
  *a1 = 0;
  v7 = objc_msgSend(v5, "copy");
  a1[1] = v7;
  v8 = dispatch_queue_create((const char *)-[NSObject UTF8String](v7, "UTF8String"), v6);
  v9 = *a1;
  *a1 = v8;

  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void ___ZNK3MSg5Queue5asyncI44MapsSuggestionsRoutineRelevanceScoreProviderEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A42B5DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isAuthorizedToUseContacts()
{
  return (unint64_t)(objc_msgSend(MEMORY[0x1E0C97298], "authorizationStatusForEntityType:", 0) - 3) < 2;
}

void sub_1A42B6800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42B6A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42B6AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MapsSuggestionsContacts;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A42B7120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42B73E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  void *v4;

  dispatch_group_leave(v3);
  _Unwind_Resume(a1);
}

void sub_1A42B77BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42B796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 72));

  _Unwind_Resume(a1);
}

void sub_1A42B7AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsContacts>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI23MapsSuggestionsContactsEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsContacts]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A42B7C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42B7CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42B7D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42B7E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42B8018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42B85A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, id *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  objc_destroyWeak(a12);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A42B8A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42B8B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42B8EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42B90C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A42B93E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A42B9700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42B9AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42B9CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42B9E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI23MapsSuggestionsContactsEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A42B9FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MapsSuggestionsBucketizedValueForType(uint64_t a1, float a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 1) > 0x26)
    v2 = 0;
  else
    v2 = qword_1A43B31D8[a1 - 1];
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
      return;
    case 7:
      fmodf(a2, 5.0);
      break;
    default:
      GEOFindOrCreateLog();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4 = 136446978;
        v5 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignalBucketizer.mm";
        v6 = 1024;
        v7 = 140;
        v8 = 2082;
        v9 = "MapsSuggestionsSignalValue MapsSuggestionsBucketizedValueForSignalWithTypeCategory(MapsSuggestionsSignalVal"
             "ue, MapsSuggestionsSignalTypeCategory)";
        v10 = 2082;
        v11 = "YES";
        _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsSignalTypeCategory!", (uint8_t *)&v4, 0x26u);
      }

      break;
  }
}

uint64_t MapsSuggestionsMapItemsAreEqual(void *a1, void *a2, int a3, int a4, int a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  void *v39;
  void *v40;
  void *v41;

  v9 = a1;
  v10 = a2;
  v11 = v10;
  if (v9 == v10)
    goto LABEL_38;
  v12 = 0;
  if (!v9 || !v10)
    goto LABEL_40;
  objc_msgSend(v9, "coordinate");
  objc_msgSend(v11, "coordinate");
  if (_MergedGlobals_27 != -1)
    dispatch_once(&_MergedGlobals_27, &__block_literal_global_2);
  GEOCalculateDistance();
  if (v13 >= *(double *)&qword_1ED22EEB0)
    goto LABEL_39;
  if (!a4)
  {
LABEL_10:
    if (a3)
      goto LABEL_11;
    goto LABEL_17;
  }
  objc_msgSend(v9, "name");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "name");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 != v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v14, "isEqualToString:", v15);

    if ((v17 & 1) == 0)
      goto LABEL_39;
    goto LABEL_10;
  }

  if (a3)
  {
LABEL_11:
    objc_msgSend(v9, "shortAddress");
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "shortAddress");
    v19 = (id)objc_claimAutoreleasedReturnValue();
    if (v18 == v19)
    {

    }
    else
    {
      v20 = v19;
      v21 = objc_msgSend(v18, "isEqualToString:", v19);

      if ((v21 & 1) == 0)
        goto LABEL_39;
    }
  }
LABEL_17:
  if (!a5)
    goto LABEL_38;
  objc_msgSend(v9, "clientAttributes");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "clientAttributes");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v22, "hasCorrectedLocationAttributes");
  v25 = v24 ^ objc_msgSend(v23, "hasCorrectedLocationAttributes");
  if ((v25 & 1) == 0 && objc_msgSend(v22, "hasCorrectedLocationAttributes"))
  {
    objc_msgSend(v22, "correctedLocationAttributes");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "correctedLocationAttributes");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v26;
    objc_msgSend(v26, "correctedCoordinate");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "coordinate");
    objc_msgSend(v27, "correctedCoordinate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "coordinate");
    if (_MergedGlobals_27 != -1)
      dispatch_once(&_MergedGlobals_27, &__block_literal_global_2);
    GEOCalculateDistance();
    v30 = v29;
    v31 = *(double *)&qword_1ED22EEB0;

    if (v30 >= v31)
    {

      goto LABEL_39;
    }
    if (a4)
    {
      objc_msgSend(v41, "customLabel");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "customLabel");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32 == v33)
        v34 = 1;
      else
        v34 = objc_msgSend(v32, "isEqualToString:", v33);

      if (!v34 || (a3 & 1) == 0)
      {
LABEL_37:

        if ((v34 & 1) != 0)
          goto LABEL_38;
LABEL_39:
        v12 = 0;
        goto LABEL_40;
      }
LABEL_33:
      objc_msgSend(v41, "correctedAddress");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "bestName");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "correctedAddress");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "bestName");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (v35 == v37)
        LOBYTE(v34) = 1;
      else
        LOBYTE(v34) = objc_msgSend(v35, "isEqualToString:", v37);

      goto LABEL_37;
    }
    if (a3)
      goto LABEL_33;

LABEL_38:
    v12 = 1;
    goto LABEL_40;
  }
  v12 = v25 ^ 1u;

LABEL_40:
  return v12;
}

id MapsSuggestionsMapItemConvertIfNeeded(void *a1)
{
  id v1;
  id v2;
  NSObject *v3;
  void *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v2 = v1;
    }
    else
    {
      v4 = (void *)MEMORY[0x1A859CDD8]();
      objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForGEOMapItem:", v1);
      v2 = (id)objc_claimAutoreleasedReturnValue();
      objc_autoreleasePoolPop(v4);
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446978;
      v7 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsMapItem.m";
      v8 = 1024;
      v9 = 106;
      v10 = 2082;
      v11 = "MapsSuggestionsMapItem * _Nonnull MapsSuggestionsMapItemConvertIfNeeded(__strong id<GEOMapItem> _Nonnull)";
      v12 = 2082;
      v13 = "nil == (mapItem)";
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a mapItem", (uint8_t *)&v6, 0x26u);
    }

    v2 = 0;
  }

  return v2;
}

id MapsSuggestionsMapItemCityName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  objc_msgSend(v1, "addressObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cityDisplayNameWithFallback:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    objc_msgSend(v1, "addressObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "address");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "structuredAddress");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "administrativeArea");
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

id MapsSuggestionsMapItemStreetName(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a1, "addressObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "address");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "structuredAddress");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "thoroughfare");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id MapsSuggestionsMapItemStreetWithNumber(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a1, "addressObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "address");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "structuredAddress");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fullThoroughfare");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id MapsSuggestionsMapItemAreaOfInterest(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a1, "addressObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "address");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "structuredAddress");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "areaOfInterests");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id MapsSuggestionsMapItemHomeWorkSchoolName(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "contactIsMe"))
  {
    v2 = objc_msgSend(v1, "contactAddressType");
    switch(v2)
    {
      case 3:
        MapsSuggestionsLocalizedSchoolString();
        v3 = objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      case 2:
        MapsSuggestionsLocalizedWorkString();
        v3 = objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      case 1:
        MapsSuggestionsLocalizedHomeString();
        v3 = objc_claimAutoreleasedReturnValue();
LABEL_9:
        v4 = (void *)v3;
        goto LABEL_10;
    }
  }
  v4 = 0;
LABEL_10:

  return v4;
}

id MapsSuggestionsMapItemWithCorrectedLocation(void *a1, double a2, double a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (v5)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0D271B8]);
    v7 = objc_alloc_init(MEMORY[0x1E0D27140]);
    objc_msgSend(v7, "setLat:", a2);
    objc_msgSend(v7, "setLng:", a3);
    objc_msgSend(v6, "setCorrectedCoordinate:", v7);
    objc_msgSend(v5, "clientAttributes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
      v10 = v8;
    else
      v10 = objc_alloc_init(MEMORY[0x1E0D271B0]);
    v13 = v10;

    objc_msgSend(v13, "setCorrectedLocationAttributes:", v6);
    objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForGEOMapItem:clientAttributes:", v5, v13);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v15 = 136446978;
      v16 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsMapItem.m";
      v17 = 1024;
      v18 = 168;
      v19 = 2082;
      v20 = "MapsSuggestionsMapItem * _Nonnull MapsSuggestionsMapItemWithCorrectedLocation(MapsSuggestionsMapItem *__stro"
            "ng _Nonnull, CLLocationCoordinate2D)";
      v21 = 2082;
      v22 = "nil == (mapItem)";
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a mapItem", (uint8_t *)&v15, 0x26u);
    }

    v12 = 0;
  }

  return v12;
}

BOOL MapsSuggestionsMapItemIsVenue(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  if (!a1)
    return 0;
  objc_msgSend(a1, "_venueInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "venueIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "venueID") != 0;

  return v3;
}

void *MapsSuggestionsMapItemIsAirport(void *result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    objc_msgSend(result, "_poiCategory");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D26798]);

    return (void *)v2;
  }
  return result;
}

void *MapsSuggestionsMapItemIsTerminal(void *result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    objc_msgSend(result, "_poiCategory");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D267A8]);

    return (void *)v2;
  }
  return result;
}

void *MapsSuggestionsMapItemIsGate(void *result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    objc_msgSend(result, "_poiCategory");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D267A0]);

    return (void *)v2;
  }
  return result;
}

void *MapsSuggestionsMapItemIsTransitStation(void *result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    objc_msgSend(result, "_poiCategory");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D26948]);

    return (void *)v2;
  }
  return result;
}

uint64_t ___sameCoordinates_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = GEOConfigGetDouble();
  qword_1ED22EEB0 = v1;
  return result;
}

void sub_1A42BAE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BB174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A42BBA88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsFlightUpdateAlreadyThere(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;
  uint8_t v13[8];
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "BOOLeanForKey:is:", CFSTR("MapsSuggestionsAlreadyThereKey"), 1);
  MapsSuggestionsCurrentBestLocation();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    GEOConfigGetDouble();
    v5 = v4;
    objc_msgSend(v3, "coordinate");
    *(_QWORD *)v13 = v6;
    v14 = v7;
    if (MapsSuggestionsCoordinateFromEntry(v1, &v12))
    {
      CLLocationCoordinate2DGetDistanceFrom();
      v2 = v8 < v5;
      objc_msgSend(v1, "setBoolean:forKey:", v2, CFSTR("MapsSuggestionsAlreadyThereKey"));
    }
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v2;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_DEBUG, "MapsSuggestionsAlreadyThereKey set to %d", buf, 8u);
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_DEBUG, "No current location, keeping what we had", v13, 2u);
    }

  }
  return v2;
}

void sub_1A42BBD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BC1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42BC7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A42BCA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BCEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id MapsSuggestionsBestFlightLeg(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  void *v12;
  BOOL v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  NSObject *v18;
  void *v20;
  void *v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint8_t v35[128];
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v21 = v3;
  if (objc_msgSend(v3, "count"))
  {
    MapsSuggestionsCurrentBestLocation();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2 * objc_msgSend(v3, "count", v20));
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      obj = v3;
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      if (v24)
      {
        v23 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v31 != v23)
              objc_enumerationMutation(obj);
            v6 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
            v26 = 0u;
            v27 = 0u;
            v28 = 0u;
            v29 = 0u;
            objc_msgSend(v6, "legs");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            if (v8)
            {
              v9 = *(_QWORD *)v27;
              do
              {
                for (j = 0; j != v8; ++j)
                {
                  if (*(_QWORD *)v27 != v9)
                    objc_enumerationMutation(v7);
                  v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * j);
                  if (objc_msgSend(v11, "status") != 5 && objc_msgSend(v11, "status") != 3)
                  {
                    MapsSuggestionsFlightDepartureTime(v11);
                    v12 = (void *)objc_claimAutoreleasedReturnValue();
                    v13 = MapsSuggestionsIsInThePast(v12);

                    if (!v13)
                    {
                      objc_msgSend(v11, "departureAirport");
                      v14 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "code");
                      v15 = (void *)objc_claimAutoreleasedReturnValue();
                      v16 = objc_msgSend(v4, "isEqualToString:", v15);

                      if ((v16 & 1) != 0)
                        -[NSObject addObject:](v5, "addObject:", v11);
                    }
                  }
                }
                v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
              }
              while (v8);
            }

          }
          v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        }
        while (v24);
      }

      if (-[NSObject count](v5, "count") != 1)
        -[NSObject sortUsingComparator:](v5, "sortUsingComparator:", &__block_literal_global_3);
      -[NSObject firstObject](v5, "firstObject");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      GEOFindOrCreateLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "No current location for resolving airports", buf, 2u);
      }
      v17 = 0;
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v18 = objc_claimAutoreleasedReturnValue();
    v20 = v18;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v37 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v38 = 1024;
      v39 = 457;
      v40 = 2082;
      v41 = "SFFlightLeg *MapsSuggestionsBestFlightLeg(NSArray<SFFlight *> *__strong _Nonnull, NSString *__strong _Nonnull)";
      v42 = 2082;
      v43 = "0u == flights.count";
      _os_log_impl(&dword_1A427D000, v18, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires at least one flight result", buf, 0x26u);
    }
    v17 = 0;
  }

  return v17;
}

void sub_1A42BD34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsUpdateEntryFromFlightLeg(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  void *v15;
  int v16;
  NSObject *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  _BYTE v29[14];
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "BOOL MapsSuggestionsUpdateEntryFromFlightLeg(MapsSuggestionsEntry *__strong _Nonnull, SFFlightLeg *__strong _Nonnull)";
      v28 = 2112;
      *(_QWORD *)v29 = v3;
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_DEBUG, "Entry Before %s: %@", buf, 0x16u);
    }

  }
  MapsSuggestionsFlightDepartureTime(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v3, "setDate:forKey:", v6, CFSTR("MapsSuggestionsFlightDepartureTimeKey"));
  MapsSuggestionsFlightStatusStringForLeg(v3, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setString:forKey:", v7, CFSTR("MapsSuggestionsFlightStatusKey"));

  objc_msgSend(v4, "departureTerminal");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "departureGate");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsFlightDepartureTerminalKey")))
  {
    objc_msgSend(v3, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureTerminalKey"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", v8);

  }
  else
  {
    v10 = 0;
  }
  if (objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsFlightDepartureGateKey")))
  {
    objc_msgSend(v3, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureGateKey"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isEqualToString:", v25);

    if ((v10 & v12 & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  objc_msgSend(v3, "setBoolean:forKey:", 0, CFSTR("MapsSuggestionsFlightMapItemIsTerminalKey"));
  objc_msgSend(v3, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsAlreadyThereKey"));
  objc_msgSend(v3, "setString:forKey:", v8, CFSTR("MapsSuggestionsFlightDepartureTerminalKey"));
  v13 = v4;
  if (!v13)
  {
    GEOFindOrCreateLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v27 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v28 = 1024;
      *(_DWORD *)v29 = 516;
      *(_WORD *)&v29[4] = 2082;
      *(_QWORD *)&v29[6] = "NSString *_MapsSuggestionsTerminalSearchString(SFFlightLeg *__strong)";
      v30 = 2082;
      v31 = "nil == (leg)";
      _os_log_impl(&dword_1A427D000, v17, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires leg", buf, 0x26u);
    }
    v21 = 0;
    goto LABEL_28;
  }
  objc_msgSend(MEMORY[0x1E0D27008], "sharedConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "countryCode");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("CN"));

  objc_msgSend(v13, "departureTerminal");
  v17 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "departureAirport");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "code");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16 && -[NSObject length](v17, "length"))
  {
    v20 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ Terminal %@"), v19, v17);
  }
  else
  {
    if (!-[NSObject length](v17, "length"))
    {
      v21 = 0;
      goto LABEL_27;
    }
    v20 = v17;
  }
  v21 = v20;
LABEL_27:

LABEL_28:
  objc_msgSend(v3, "setString:forKey:", v21, CFSTR("MapsSuggestionsFlightTerminalSearchKey"));

  MapsSuggestionsFullDepartureAirportString(v13);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setString:forKey:", v22, CFSTR("MapsSuggestionsFlightFullTargetAirportKey"));

  if ((v12 & 1) == 0)
  {
    objc_msgSend(v3, "setBoolean:forKey:", 0, CFSTR("MapsSuggestionsFlightMapItemIsGateKey"));
    objc_msgSend(v3, "setString:forKey:", v25, CFSTR("MapsSuggestionsFlightDepartureGateKey"));
  }
LABEL_30:
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  if (s_verbose)
  {
    GEOFindOrCreateLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "BOOL MapsSuggestionsUpdateEntryFromFlightLeg(MapsSuggestionsEntry *__strong _Nonnull, SFFlightLeg *__strong _Nonnull)";
      v28 = 2112;
      *(_QWORD *)v29 = v3;
      _os_log_impl(&dword_1A427D000, v23, OS_LOG_TYPE_DEBUG, "Entry After %s: %@", buf, 0x16u);
    }

  }
  return 1;
}

void sub_1A42BD8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A42BDAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A42BDBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A42BDEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BE158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id *v26;
  id *v27;
  void *v28;
  uint64_t v29;
  id *v30;

  v30 = v27;

  objc_destroyWeak(v30);
  objc_destroyWeak(v26);
  objc_destroyWeak((id *)(v29 - 104));

  _Unwind_Resume(a1);
}

void sub_1A42BE4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42BE6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsFlightDepartureTime(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _BOOL4 v16;

  v1 = a1;
  objc_msgSend(v1, "departurePublishedTime");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "departureActualTime");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "departureGateClosedTime");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "departureRunwayTime");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSince1970");
  if (v6 <= 0.0)
  {

    v2 = 0;
  }
  objc_msgSend(v3, "timeIntervalSince1970");
  if (v7 <= 0.0)
  {

    v3 = 0;
  }
  objc_msgSend(v4, "timeIntervalSince1970");
  if (v8 <= 0.0)
  {

    v9 = 0;
  }
  else
  {
    v9 = v4;
  }
  objc_msgSend(v5, "timeIntervalSince1970");
  if (v10 <= 0.0)
  {

    v11 = 0;
  }
  else
  {
    v11 = v5;
  }
  v12 = v9;
  if (v9 || (v12 = v2, !v3) || (v16 = MapsSuggestionsIsInThePast(v3), v12 = v3, !v16) || (v12 = v11) != 0)
  {
    v13 = v12;
  }
  else
  {
    MapsSuggestionsNow();
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = v13;

  return v14;
}

void sub_1A42BE824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42BE8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id MapsSuggestionsFullDepartureAirportString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "departureAirport");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "code");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "departureTerminal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length"))
    {
      if (qword_1ED22EEC0 != -1)
        dispatch_once(&qword_1ED22EEC0, &__block_literal_global_153);
      (*(void (**)(uint64_t, void *, void *))(_MergedGlobals_28 + 16))(_MergedGlobals_28, v4, v5);
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = v4;
    }
    v8 = v6;

  }
  else
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v12 = 1024;
      v13 = 493;
      v14 = 2082;
      v15 = "NSString *MapsSuggestionsFullDepartureAirportString(SFFlightLeg *__strong _Nonnull)";
      v16 = 2082;
      v17 = "nil == (leg)";
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires leg", (uint8_t *)&v10, 0x26u);
    }

    v8 = 0;
  }

  return v8;
}

void sub_1A42BEA9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42BEC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42BEC84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL MapsSuggestionsFlightLegTooEarly(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  _BOOL8 v8;
  NSObject *v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    MapsSuggestionsFlightDepartureTime(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      MapsSuggestionsNow();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "timeIntervalSinceDate:", v4);
      v6 = v5;

      GEOConfigGetDouble();
      v8 = v6 > v7;
    }
    else
    {
      v8 = 1;
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136446978;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v13 = 1024;
      v14 = 536;
      v15 = 2082;
      v16 = "BOOL MapsSuggestionsFlightLegTooEarly(SFFlightLeg *__strong _Nonnull)";
      v17 = 2082;
      v18 = "nil == (leg)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires leg", (uint8_t *)&v11, 0x26u);
    }

    v8 = 0;
  }

  return v8;
}

void sub_1A42BEE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsFlightStatusStringForLeg(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "type") != 15)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v12 = 1024;
      v13 = 549;
      v14 = 2082;
      v15 = "NSString *MapsSuggestionsFlightStatusStringForLeg(MapsSuggestionsEntry *__strong _Nonnull, SFFlightLeg *__strong _Nonnull)";
      v16 = 2082;
      v17 = "MapsSuggestionsEntryTypeTravelFlight != entry.type";
      v8 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a flight entry";
LABEL_8:
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 0x26u);
    }
LABEL_9:

    v6 = 0;
    goto LABEL_10;
  }
  if (!v4)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v12 = 1024;
      v13 = 550;
      v14 = 2082;
      v15 = "NSString *MapsSuggestionsFlightStatusStringForLeg(MapsSuggestionsEntry *__strong _Nonnull, SFFlightLeg *__strong _Nonnull)";
      v16 = 2082;
      v17 = "nil == (leg)";
      v8 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires leg";
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  MapsSuggestionsFlightDepartureTime(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setDate:forKey:", v5, CFSTR("MapsSuggestionsFlightDepartureTimeKey"));

  MapsSuggestionsFlightStatusStringForEntry(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v6;
}

void sub_1A42BF034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *MapsSuggestionsFlightStatusStringForEntry(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "type") == 15)
  {
    if (objc_msgSend(v1, "hasEssentialFlightInfo"))
    {
      objc_msgSend(v1, "dateForKey:", CFSTR("MapsSuggestionsFlightDepartureTimeKey"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (MapsSuggestionsIsToday(v2))
      {
        MapsSuggestionsNow();
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "timeIntervalSinceDate:", v3);
        v5 = v4;
        GEOConfigGetDouble();
        v7 = v6;

        if (v5 < v7)
        {
          objc_msgSend(v1, "stringForKey:", CFSTR("MapsSuggestionsFullFlightNumberKey"));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          MapsSuggestionsLocalizedFlightDepatureTodaySoonString(v8, v2);
          v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_15:
          goto LABEL_16;
        }
        MapsSuggestionsLocalizedFlightDepatureTodayString(v2);
        v11 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (!MapsSuggestionsIsTomorrow(v2))
        {
          v9 = &stru_1E4BDFC28;
          goto LABEL_15;
        }
        MapsSuggestionsLocalizedFlightDepatureTomorrowString(v2);
        v11 = objc_claimAutoreleasedReturnValue();
      }
      v9 = (__CFString *)v11;
      goto LABEL_15;
    }
    v9 = &stru_1E4BDFC28;
  }
  else
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v15 = 1024;
      v16 = 561;
      v17 = 2082;
      v18 = "NSString *MapsSuggestionsFlightStatusStringForEntry(MapsSuggestionsEntry *__strong _Nonnull)";
      v19 = 2082;
      v20 = "MapsSuggestionsEntryTypeTravelFlight != entry.type";
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a flight entry", (uint8_t *)&v13, 0x26u);
    }

    v9 = 0;
  }
LABEL_16:

  return v9;
}

void sub_1A42BF268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MapsSuggestionsSetArrivalAirportFieldsForEntry(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD);
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void (**)(_QWORD, _QWORD))v7;
  if (!v5)
  {
    GEOFindOrCreateLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v24 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
      v25 = 1024;
      v26 = 639;
      v27 = 2082;
      v28 = "void MapsSuggestionsSetArrivalAirportFieldsForEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<Map"
            "sSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsSuccessBlock _Nonnull)";
      v29 = 2082;
      v30 = "entry == nil";
      v14 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry";
      v15 = v13;
      v16 = OS_LOG_TYPE_ERROR;
      v17 = 38;
LABEL_16:
      _os_log_impl(&dword_1A427D000, v15, v16, v14, buf, v17);
    }
LABEL_17:

    v8[2](v8, 0);
    goto LABEL_18;
  }
  if (v7)
  {
    if ((objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsFlightArrivalAirportCodeKey")) & 1) != 0)
    {
      objc_msgSend(v5, "stringForKey:", CFSTR("MapsSuggestionsFlightArrivalAirportCodeKey"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __MapsSuggestionsSetArrivalAirportFieldsForEntry_block_invoke;
      v19[3] = &unk_1E4BCE528;
      v10 = v9;
      v20 = v10;
      v11 = v8;
      v22 = v11;
      v21 = v5;
      if (!MapsSuggestionsSearchAirport(v10, v6, v19))
      {
        GEOFindOrCreateLog();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A427D000, v12, OS_LOG_TYPE_ERROR, "MapsSuggestionsSearchAirport will not call back, cannot set airport arrival fields", buf, 2u);
        }

        (*((void (**)(id, _QWORD))v11 + 2))(v11, 0);
      }

      goto LABEL_18;
    }
    GEOFindOrCreateLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v14 = "Requires airport arrival code";
      v15 = v13;
      v16 = OS_LOG_TYPE_INFO;
      v17 = 2;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  GEOFindOrCreateLog();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    v24 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsFlight.mm";
    v25 = 1024;
    v26 = 640;
    v27 = 2082;
    v28 = "void MapsSuggestionsSetArrivalAirportFieldsForEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<MapsS"
          "uggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsSuccessBlock _Nonnull)";
    v29 = 2082;
    v30 = "handler == nil";
    _os_log_impl(&dword_1A427D000, v18, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a completion", buf, 0x26u);
  }

  MEMORY[0x10](0, 0);
LABEL_18:

}

void sub_1A42BF60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A42BF878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL22_MapsSuggestionsBundlePKc_block_invoke()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!qword_1ED22EEC8)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.MapsSuggestions"));
    v0 = objc_claimAutoreleasedReturnValue();
    v1 = (void *)qword_1ED22EEC8;
    qword_1ED22EEC8 = v0;

    if (!qword_1ED22EEC8)
    {
      GEOFindOrCreateLog();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v3 = 136446978;
        v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsDefines.h";
        v5 = 1024;
        v6 = 324;
        v7 = 2082;
        v8 = "NSBundle * _Nonnull _MapsSuggestionsBundle(const char * _Nonnull)_block_invoke";
        v9 = 2082;
        v10 = "nil == s_bundleWithMapsSuggestionsIdentifier";
        _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires bundleWithIdentifier:@\"com.apple.MapsSuggestions\"", (uint8_t *)&v3, 0x26u);
      }

    }
  }
}

void sub_1A42C0194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v19;

  v19 = v16;

  _Unwind_Resume(a1);
}

void sub_1A42C0358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C0464(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1A42C0584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C0890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MapsSuggestionsManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A42C0B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C0C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42C0F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C1064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C12AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A42C1410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C1740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C1998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C1C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A42C1DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C1EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C2C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A42C2F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C30DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C32F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C3438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C3650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C3804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C3A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C3B14(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42C3C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C4090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C42E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C4384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A42C44C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C4584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C4788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C4984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C5004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42C5888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1A42C5D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A42C5E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42C6380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42C669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A42C6898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42C6970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;
  void *v11;
  void *v12;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42C6BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C6D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C7000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C714C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C7314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42C74D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C76F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C7A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C7D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42C7EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A42C8C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1A42C90F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A42C97D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A42C9B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42C9D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CA00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CA13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CA264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CA2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CA4B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CA89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CAA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  _Unwind_Resume(a1);
}

void sub_1A42CAD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MSg::NotificationSender::notify(MSg::NotificationSender *this, uint64_t a2)
{
  NSObject *v4;
  MSg::NotificationSender *v5;
  int v6;
  int v8;
  MSg::NotificationSender *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = this;
    if (*((char *)this + 23) < 0)
      v5 = *(MSg::NotificationSender **)this;
    v6 = *((_DWORD *)this + 6);
    v8 = 136315650;
    v9 = v5;
    v10 = 1024;
    v11 = v6;
    v12 = 2048;
    v13 = a2;
    _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_DEBUG, "Sending Darwin notification '%s' (token %d, state %llu)", (uint8_t *)&v8, 0x1Cu);
  }

  notify_set_state(*((_DWORD *)this + 6), a2);
  if (*((char *)this + 23) < 0)
    this = *(MSg::NotificationSender **)this;
  return notify_post((const char *)this);
}

void sub_1A42CAEA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1A42CB0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CB210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CB44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CB588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CB794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CB8C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CBAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CBC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1A42CBEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CBF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZL17_sortedBySinkRankP14NSMutableArrayIP20MapsSuggestionsEntryE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a3;
  objc_msgSend(a2, "numberForKey:", CFSTR("MapsSuggestionsSinkRankKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "unsignedIntegerValue");

  objc_msgSend(v4, "numberForKey:", CFSTR("MapsSuggestionsSinkRankKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "unsignedIntegerValue");

  if (v6 <= v8)
    v9 = 0;
  else
    v9 = -1;
  if (v6 < v8)
    v10 = 1;
  else
    v10 = v9;

  return v10;
}

void sub_1A42CC1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::string *MSg::NotificationSender::NotificationSender(std::string *this, __int128 *a2)
{
  __int128 v3;
  std::string *v4;
  uint32_t v5;
  NSObject *v6;
  std::string *v7;
  int v9;
  std::string *v10;
  __int16 v11;
  uint32_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  v5 = notify_register_check((const char *)v4, (int *)&this[1]);
  if (v5)
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v7 = (std::string *)this->__r_.__value_.__r.__words[0];
      v9 = 136315394;
      v10 = v7;
      v11 = 1024;
      v12 = v5;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "Could not register %s: status %d", (uint8_t *)&v9, 0x12u);
    }

  }
  notify_set_state((int)this[1].__r_.__value_.__l.__data_, 0);
  return this;
}

void sub_1A42CC32C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4BCBFA8, MEMORY[0x1E0DE42D0]);
}

void sub_1A42CC414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t MapsSuggestionsMapsAppIsInstalled()
{
  NSObject *v0;
  id v1;
  const char *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v11 = "BOOL MapsSuggestionsMapsAppIsInstalled()";
    _os_log_impl(&dword_1A427D000, v0, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  v1 = objc_alloc(MEMORY[0x1E0CA5870]);
  v2 = (const char *)*MEMORY[0x1E0D26D08];
  v9 = 0;
  v3 = (void *)objc_msgSend(v1, "initWithBundleIdentifier:allowPlaceholder:error:", v2, 0, &v9);
  v4 = v9;
  if (v4)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v11 = v2;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "Failed making record for '%@': %@", buf, 0x16u);
    }

  }
  objc_msgSend(v3, "applicationState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isInstalled")
    && objc_msgSend(v6, "isValid")
    && (objc_msgSend(v6, "isRestricted") & 1) == 0)
  {
    v7 = objc_msgSend(v6, "isPlaceholder") ^ 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1A42CCFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL MapsSuggestionsMapsAppIsAllowedLocations()
{
  NSObject *v0;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "BOOL MapsSuggestionsMapsAppIsAllowedLocations()";
    _os_log_impl(&dword_1A427D000, v0, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v2, 0xCu);
  }

  return MapsSuggestionsIsLocationAllowedForBundleID((void *)*MEMORY[0x1E0D26D08]);
}

void sub_1A42CD11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CD190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CD450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CD4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42CD58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;

  a10.super_class = (Class)MapsSuggestionsMapsLocationAllowedTriggeringToggle;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A42CD72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsIsTrue(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = v2;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v10;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v3);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "isTrue", (_QWORD)v9) & 1) == 0)
          {
            v7 = 0;
            goto LABEL_14;
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v4)
          continue;
        break;
      }
    }
    v7 = 1;
LABEL_14:

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_1A42CD878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CD920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42CE2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42CE454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42CE650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42CE71C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42CEF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CEF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42CEFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___nearbyString_block_invoke()
{
  id v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "ShortcutTitleFormatter";
  if (qword_1ED22EF00 != -1)
    dispatch_once(&qword_1ED22EF00, block);
  v0 = (id)qword_1ED22EEF8;
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("MAPS_TRAY_NEARBY"), CFSTR("Close by<unlocalized>"), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v3, &stru_1E4BDFC28);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_MergedGlobals_30;
  _MergedGlobals_30 = v1;

}

void startEventKitStreamer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __startEventKitStreamer_block_invoke;
  block[3] = &unk_1E4BCE960;
  v17 = v7;
  v18 = v5;
  v19 = v6;
  v8 = startEventKitStreamer_s_onceToken;
  v9 = v6;
  v10 = v5;
  v11 = v7;
  v15 = v11;
  if (v8 == -1)
  {
    v12 = v11;
    v13 = v10;
    v14 = v9;
  }
  else
  {
    dispatch_once(&startEventKitStreamer_s_onceToken, block);
    v13 = v18;
    v14 = v19;
    v12 = v17;
  }

}

void __startEventKitStreamer_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = a1[4];
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_INFO, "Instanting EventKitStreamer because %@ requested it", (uint8_t *)&v6, 0xCu);
  }

  v4 = -[MapsSuggestionsEventKitStreamer initWithResourceDepot:notificationName:]([_TtC15MapsSuggestions31MapsSuggestionsEventKitStreamer alloc], "initWithResourceDepot:notificationName:", a1[5], a1[6]);
  v5 = (void *)startEventKitStreamer_s_eventKitStreamer;
  startEventKitStreamer_s_eventKitStreamer = (uint64_t)v4;

}

void startWalletStreamer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __startWalletStreamer_block_invoke;
  block[3] = &unk_1E4BCE960;
  v17 = v7;
  v18 = v5;
  v19 = v6;
  v8 = startWalletStreamer_s_onceToken;
  v9 = v6;
  v10 = v5;
  v11 = v7;
  v15 = v11;
  if (v8 == -1)
  {
    v12 = v11;
    v13 = v10;
    v14 = v9;
  }
  else
  {
    dispatch_once(&startWalletStreamer_s_onceToken, block);
    v13 = v18;
    v14 = v19;
    v12 = v17;
  }

}

void __startWalletStreamer_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _TtC15MapsSuggestions29MapsSuggestionsWalletStreamer *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = a1[4];
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_INFO, "Instanting WalletStreamer because %@ requested it", (uint8_t *)&v6, 0xCu);
  }

  v4 = -[MapsSuggestionsWalletStreamer initWithResourceDepot:notificationName:]([_TtC15MapsSuggestions29MapsSuggestionsWalletStreamer alloc], "initWithResourceDepot:notificationName:", a1[5], a1[6]);
  v5 = (void *)startWalletStreamer_s_walletStreamer;
  startWalletStreamer_s_walletStreamer = (uint64_t)v4;

}

void sub_1A42D02C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D0654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1A42D0798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1A42D087C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42D095C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D0AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42D0B60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42D0EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42D1170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A42D12C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42D1510(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, __int128 buf, __int128 a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v23;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    GEOFindOrCreateLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136446978;
      *(_QWORD *)((char *)&buf + 4) = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsETA.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 309;
      WORD1(a14) = 2082;
      *(_QWORD *)((char *)&a14 + 4) = "-[MapsSuggestionsETA initWithCoder:]";
      WORD6(a14) = 2082;
      *(_QWORD *)((char *)&a14 + 14) = "nil == (nullptr)";
      _os_log_impl(&dword_1A427D000, v23, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Could not decode MapsSuggestionsETA object", (uint8_t *)&buf, 0x26u);
    }

    objc_end_catch();
    JUMPOUT(0x1A42D14C4);
  }

  _Unwind_Resume(a1);
}

void sub_1A42D17AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D1A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A42D1B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42D1D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1A42D1DD8()
{
  JUMPOUT(0x1A42D1DCCLL);
}

BOOL isSharingStopped(void *a1)
{
  id v1;
  void *v2;
  char v3;
  _BOOL8 v4;

  v1 = a1;
  v4 = 0;
  if (objc_msgSend(v1, "containsKey:", CFSTR("MapsSuggestionsContactActivityKey")))
  {
    objc_msgSend(v1, "numberForKey:", CFSTR("MapsSuggestionsContactActivityKey"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isEqualToNumber:", &unk_1E4C09788);

    if ((v3 & 1) != 0)
      v4 = 1;
  }

  return v4;
}

BOOL isRecentlyShared(void *a1)
{
  id v1;
  void *v2;
  char v3;
  _BOOL8 v4;

  v1 = a1;
  v4 = 0;
  if (objc_msgSend(v1, "containsKey:", CFSTR("MapsSuggestionsContactActivityKey")))
  {
    objc_msgSend(v1, "numberForKey:", CFSTR("MapsSuggestionsContactActivityKey"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isEqualToNumber:", &unk_1E4C097A0);

    if ((v3 & 1) != 0)
      v4 = 1;
  }

  return v4;
}

BOOL isLikelyMeetup(void *a1)
{
  id v1;
  void *v2;
  char v3;
  _BOOL8 v4;

  v1 = a1;
  v4 = 0;
  if (objc_msgSend(v1, "containsKey:", CFSTR("MapsSuggestionsContactActivityKey")))
  {
    objc_msgSend(v1, "numberForKey:", CFSTR("MapsSuggestionsContactActivityKey"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isEqualToNumber:", &unk_1E4C097B8);

    if ((v3 & 1) != 0)
      v4 = 1;
  }

  return v4;
}

uint64_t _isLikelyMeetupThroughAppName(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  if (isLikelyMeetup(v3) && objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsOriginatingAppName")))
  {
    objc_msgSend(v3, "stringForKey:", CFSTR("MapsSuggestionsOriginatingAppName"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqualToString:", v4);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t isLikelyMeetupThroughMessages(void *a1)
{
  return _isLikelyMeetupThroughAppName(a1, CFSTR("Messages"));
}

uint64_t isLikelyMeetupThroughFindMy(void *a1)
{
  return _isLikelyMeetupThroughAppName(a1, CFSTR("FindMy"));
}

void sub_1A42D526C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42D5A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42D6C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42D6F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D711C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MSg::_RollingWindowBudgetRule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MSg::Queue::sync<BOOL>(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v4 = *a1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZNK3MSg5Queue4syncIbEET_U13block_pointerFS2_vE_block_invoke;
  v8[3] = &unk_1E4BCDE48;
  v9 = v3;
  v10 = &v11;
  v5 = v3;
  dispatch_sync(v4, v8);
  v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1A42D78E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D7B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D7F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42D8248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42D8448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void MSg::_RollingWindowBudgetRule::_prune(MSg::_RollingWindowBudgetRule *this)
{
  unint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)this + 9))
  {
    v2 = *((_QWORD *)this + 8);
    do
    {
      if (MapsSuggestionsSecondsSince(*(void **)(*(_QWORD *)(*((_QWORD *)this + 5) + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                + 8 * (v2 & 0x1FF))) < *((double *)this + 3))
        break;
      objc_release(*(id *)(*(_QWORD *)(*((_QWORD *)this + 5) + ((*((_QWORD *)this + 8) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * (*((_QWORD *)this + 8) & 0x1FFLL)));
      v3 = *((_QWORD *)this + 9) - 1;
      v2 = *((_QWORD *)this + 8) + 1;
      *((_QWORD *)this + 8) = v2;
      *((_QWORD *)this + 9) = v3;
      if (v2 >= 0x400)
      {
        operator delete(**((void ***)this + 5));
        *((_QWORD *)this + 5) += 8;
        v3 = *((_QWORD *)this + 9);
        v2 = *((_QWORD *)this + 8) - 512;
        *((_QWORD *)this + 8) = v2;
      }
    }
    while (v3);
  }
}

id std::deque<NSDate * {__strong}>::push_back(_QWORD *a1, id *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  id result;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v8 = a1[4];
  if (v7 != a1[5] + v8)
    goto LABEL_38;
  v9 = v8 >= 0x200;
  v10 = v8 - 512;
  if (v9)
  {
    a1[4] = v10;
    v13 = *(_QWORD *)v4;
    v11 = v4 + 8;
    v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1)
          v41 = 1;
        else
          v41 = (uint64_t)&v5[-*a1] >> 2;
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v41);
        v44 = &v42[8 * (v41 >> 2)];
        v45 = (uint64_t *)a1[1];
        v5 = v44;
        v46 = a1[2] - (_QWORD)v45;
        if (v46)
        {
          v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = 8 * (v46 >> 3);
          v48 = &v42[8 * (v41 >> 2)];
          do
          {
            v49 = *v45++;
            *(_QWORD *)v48 = v49;
            v48 += 8;
            v47 -= 8;
          }
          while (v47);
        }
        v50 = (char *)*a1;
        *a1 = v42;
        a1[1] = v44;
        a1[2] = v5;
        a1[3] = &v42[8 * v43];
        if (v50)
        {
          operator delete(v50);
          v5 = (char *)a1[2];
        }
      }
      else
      {
        v15 = v14 >> 3;
        v16 = v14 >> 3 < -1;
        v17 = (v14 >> 3) + 2;
        if (v16)
          v18 = v17;
        else
          v18 = v15 + 1;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v11[-8 * v20];
        v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          v5 = (char *)a1[1];
        }
        v23 = &v5[8 * v19];
        v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(_QWORD *)v5 = v12;
  }
  else
  {
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 >= (unint64_t)(v27 >> 3))
    {
      v30 = v27 >> 2;
      if (v25 == v26)
        v31 = 1;
      else
        v31 = v30;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v31);
      v34 = v33;
      v35 = operator new(0x1000uLL);
      v36 = &v32[8 * v24];
      v37 = &v32[8 * v34];
      if (v24 == v34)
      {
        v38 = 8 * v24;
        if (v6 < 1)
        {
          v76 = v35;
          v77 = v38 >> 2;
          if (v5 == v4)
            v78 = 1;
          else
            v78 = v77;
          v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v78);
          v36 = &v79[8 * (v78 >> 2)];
          v37 = &v79[8 * v80];
          if (v32)
            operator delete(v32);
          v32 = v79;
          v35 = v76;
        }
        else
        {
          v39 = v38 >> 3;
          if (v39 >= -1)
            v40 = v39 + 1;
          else
            v40 = v39 + 2;
          v36 -= 8 * (v40 >> 1);
        }
      }
      *(_QWORD *)v36 = v35;
      v5 = v36 + 8;
      for (i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v36 == v32)
        {
          if (v5 >= v37)
          {
            if (v37 == v32)
              v86 = 1;
            else
              v86 = (v37 - v32) >> 2;
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v86);
            v89 = v87;
            v36 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
            v91 = v5 - v32;
            v90 = v5 == v32;
            v5 = v36;
            if (!v90)
            {
              v5 = &v36[v91 & 0xFFFFFFFFFFFFFFF8];
              v92 = 8 * (v91 >> 3);
              v93 = v36;
              v94 = v32;
              do
              {
                v95 = *(_QWORD *)v94;
                v94 += 8;
                *(_QWORD *)v93 = v95;
                v93 += 8;
                v92 -= 8;
              }
              while (v92);
            }
            v37 = &v87[8 * v88];
            if (v32)
              operator delete(v32);
            v32 = v89;
          }
          else
          {
            v82 = (v37 - v5) >> 3;
            if (v82 >= -1)
              v83 = v82 + 1;
            else
              v83 = v82 + 2;
            v84 = v83 >> 1;
            v36 = &v32[8 * (v83 >> 1)];
            v85 = v32;
            if (v5 != v32)
            {
              memmove(v36, v32, v5 - v32);
              v85 = v5;
            }
            v5 = &v85[8 * v84];
          }
        }
        v96 = *(_QWORD *)(i - 8);
        *((_QWORD *)v36 - 1) = v96;
        v36 -= 8;
      }
      v97 = (char *)*a1;
      *a1 = v32;
      a1[1] = v36;
      a1[2] = v5;
      a1[3] = v37;
      if (v97)
      {
        operator delete(v97);
        v5 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    v28 = operator new(0x1000uLL);
    v29 = v28;
    if (v25 == v5)
    {
      if (v4 == v26)
      {
        if (v5 == v4)
          v54 = 1;
        else
          v54 = (v25 - v4) >> 2;
        v55 = 2 * v54;
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v54);
        v4 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
        v58 = (uint64_t *)a1[1];
        v59 = v4;
        v60 = a1[2] - (_QWORD)v58;
        if (v60)
        {
          v59 = &v4[v60 & 0xFFFFFFFFFFFFFFF8];
          v61 = 8 * (v60 >> 3);
          v62 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v63 = *v58++;
            *(_QWORD *)v62 = v63;
            v62 += 8;
            v61 -= 8;
          }
          while (v61);
        }
        v64 = (char *)*a1;
        *a1 = v56;
        a1[1] = v4;
        a1[2] = v59;
        a1[3] = &v56[8 * v57];
        if (v64)
        {
          operator delete(v64);
          v4 = (char *)a1[1];
        }
      }
      *((_QWORD *)v4 - 1) = v29;
      v65 = (char *)a1[1];
      v66 = (char *)a1[2];
      a1[1] = v65 - 8;
      v67 = *((_QWORD *)v65 - 1);
      a1[1] = v65;
      if (v66 == (char *)a1[3])
      {
        v68 = (uint64_t)&v65[-*a1];
        if ((unint64_t)v65 <= *a1)
        {
          if (v66 == (char *)*a1)
            v98 = 1;
          else
            v98 = (uint64_t)&v66[-*a1] >> 2;
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(v98);
          v101 = &v99[8 * (v98 >> 2)];
          v102 = (uint64_t *)a1[1];
          v66 = v101;
          v103 = a1[2] - (_QWORD)v102;
          if (v103)
          {
            v66 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = 8 * (v103 >> 3);
            v105 = &v99[8 * (v98 >> 2)];
            do
            {
              v106 = *v102++;
              *(_QWORD *)v105 = v106;
              v105 += 8;
              v104 -= 8;
            }
            while (v104);
          }
          v107 = (char *)*a1;
          *a1 = v99;
          a1[1] = v101;
          a1[2] = v66;
          a1[3] = &v99[8 * v100];
          if (v107)
          {
            operator delete(v107);
            v66 = (char *)a1[2];
          }
        }
        else
        {
          v69 = v68 >> 3;
          v16 = v68 >> 3 < -1;
          v70 = (v68 >> 3) + 2;
          if (v16)
            v71 = v70;
          else
            v71 = v69 + 1;
          v72 = -(v71 >> 1);
          v73 = v71 >> 1;
          v74 = &v65[-8 * v73];
          v75 = v66 - v65;
          if (v66 != v65)
          {
            memmove(&v65[-8 * v73], v65, v66 - v65);
            v65 = (char *)a1[1];
          }
          v66 = &v74[v75];
          a1[1] = &v65[8 * v72];
          a1[2] = &v74[v75];
        }
      }
      *(_QWORD *)v66 = v67;
    }
    else
    {
      *(_QWORD *)v5 = v28;
    }
  }
  v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    v52 = 0;
  }
  else
  {
    v51 = a1[5] + a1[4];
    v52 = (_QWORD *)(*(_QWORD *)&v4[(v51 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v51 & 0x1FF));
  }
  result = *a2;
  *v52 = result;
  ++a1[5];
  return result;
}

void sub_1A42D8AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NSDate * {__strong}*>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t std::deque<NSDate * {__strong}>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        v9 = *v7++;

        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    v13 = 512;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id *MSg::_RollingWindowBudgetRule::_RollingWindowBudgetRule(id *this, MapsSuggestionsBudget *a2, NSString *a3, void *a4, uint64_t a5)
{
  NSString *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  NSObject *v13;
  char *v14;
  void *v15;
  void **v16;
  void **v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  id *v21;
  uint64_t v22;
  id *v23;
  NSObject *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  NSObject *v31;
  id v32;
  id v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[12];
  __int16 v40;
  int v41;
  uint8_t buf[4];
  char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  objc_initWeak(this, a2);
  this[1] = (id)-[NSString copy](v9, "copy");
  this[2] = a4;
  *((double *)this + 3) = (double)a5 / 1000000000.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  WeakRetained = objc_loadWeakRetained(this);
  v11 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "q_loadStateForRuleName:", this[1]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      GEOFindOrCreateLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)this[1];
        *(_DWORD *)buf = 138412290;
        v43 = v14;
        _os_log_impl(&dword_1A427D000, v13, OS_LOG_TYPE_DEBUG, "Starting new state for RULE{%@}", buf, 0xCu);
      }

      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
    }
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("MSgRollingWindowBudgetRuleBudgetAlreadySpentKey"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void **)this[5];
    v17 = (void **)this[6];
    if (v17 == v16)
    {
      v18 = this + 9;
      v17 = (void **)this[5];
    }
    else
    {
      v18 = this + 9;
      v19 = (uint64_t)this[8];
      v20 = &v16[(unint64_t)v19 >> 9];
      v21 = (id *)((char *)*v20 + 8 * (v19 & 0x1FF));
      v22 = *(uint64_t *)((char *)v16 + ((((unint64_t)this[9] + v19) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * (((unint64_t)this[9] + v19) & 0x1FF);
      if (v21 != (id *)v22)
      {
        do
        {

          if ((char *)v21 - (_BYTE *)*v20 == 4096)
          {
            v23 = (id *)v20[1];
            ++v20;
            v21 = v23;
          }
        }
        while (v21 != (id *)v22);
        v16 = (void **)this[5];
        v17 = (void **)this[6];
      }
    }
    *v18 = 0;
    v25 = (char *)v17 - (char *)v16;
    if (v25 >= 0x11)
    {
      do
      {
        operator delete(*v16);
        v26 = this[6];
        v16 = (void **)((char *)this[5] + 8);
        this[5] = v16;
        v25 = v26 - (_BYTE *)v16;
      }
      while (v25 > 0x10);
    }
    if (v25 >> 3 == 1)
    {
      v27 = 256;
    }
    else
    {
      if (v25 >> 3 != 2)
      {
LABEL_23:
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v24 = v15;
        v28 = -[NSObject countByEnumeratingWithState:objects:count:](v24, "countByEnumeratingWithState:objects:count:", &v35, buf, 16);
        if (v28)
        {
          v29 = *(_QWORD *)v36;
          do
          {
            for (i = 0; i != v28; ++i)
            {
              if (*(_QWORD *)v36 != v29)
                objc_enumerationMutation(v24);
              *(_QWORD *)v39 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
              std::deque<NSDate * {__strong}>::push_back(this + 4, (id *)v39);
            }
            v28 = -[NSObject countByEnumeratingWithState:objects:count:](v24, "countByEnumeratingWithState:objects:count:", &v35, buf, 16);
          }
          while (v28);
        }

        GEOFindOrCreateLog();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          v32 = this[1];
          v33 = this[9];
          *(_DWORD *)v39 = 138412546;
          *(_QWORD *)&v39[4] = v32;
          v40 = 1024;
          v41 = (int)v33;
          _os_log_impl(&dword_1A427D000, v31, OS_LOG_TYPE_DEBUG, "Loading state of RULE{%@} complete, with %u spends", v39, 0x12u);
        }

        goto LABEL_33;
      }
      v27 = 512;
    }
    this[8] = (id)v27;
    goto LABEL_23;
  }
  GEOFindOrCreateLog();
  v24 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v43 = "MapsSuggestionsBudget.mm";
    v44 = 1026;
    v45 = 105;
    v46 = 2082;
    v47 = "void MSg::_RollingWindowBudgetRule::_loadState()";
    _os_log_impl(&dword_1A427D000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongDelegate went away in %{public}s", buf, 0x1Cu);
  }
  v12 = v24;
LABEL_33:

  return this;
}

void sub_1A42D90AC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  std::deque<NSDate * {__strong}>::~deque[abi:ne180100](v4);
  objc_destroyWeak(v1);

  _Unwind_Resume(a1);
}

void std::vector<MSg::_RollingWindowBudgetRule>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void MSg::_RollingWindowBudgetRule::~_RollingWindowBudgetRule(id *this)
{
  std::deque<NSDate * {__strong}>::~deque[abi:ne180100]((uint64_t)(this + 4));

  objc_destroyWeak(this);
}

uint64_t std::__split_buffer<MSg::_RollingWindowBudgetRule>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    MSg::_RollingWindowBudgetRule::~_RollingWindowBudgetRule((id *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZNK3MSg5Queue4syncIbEET_U13block_pointerFS2_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1A42D95A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42D9D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42D9EFC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42DE724(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x380], 8);
  objc_destroyWeak((id *)&STACK[0x278]);
  _Unwind_Resume(a1);
}

void sub_1A42DEED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42DF0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42DF61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42DFFE4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void ___firstLineOfString_block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

void sub_1A42E15E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1A42E197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42E2404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___defaultCachePath_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "processName");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsDefaultCachePathForProcessName(v0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_MergedGlobals_33;
  _MergedGlobals_33 = v1;

}

BOOL MapsSuggestionsMapsSyncStorageShouldServeShortcut(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "type") == 4)
  {
    v2 = 0;
  }
  else if (objc_msgSend(v1, "type") == 1)
  {
    objc_msgSend(v1, "geoMapItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3 != 0;

  }
  else
  {
    v2 = 1;
  }

  return v2;
}

void MapsSuggestionsMapsSyncSimulateCrashIfMapItemIsNil(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = a1;
  objc_msgSend(v1, "geoMapItem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {

  }
  else if (objc_msgSend(v1, "type") == 2
         || objc_msgSend(v1, "type") == 3
         || objc_msgSend(v1, "type") == 5
         || objc_msgSend(v1, "type") == 1)
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_FAULT, "MapsSuggestionsShortcut of H/W/S or MapItem type was modified or saved with nil mapItem. Simulating a crash for debugging purposes.", v4, 2u);
    }

  }
}

uint64_t MapsSuggestionsShortcutIsEqualToMapsSyncFavoriteItem(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  void *v56;
  uint64_t v57;
  int v58;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v6, "type");
  if (objc_msgSend(v5, "type") != v7)
    goto LABEL_41;
  if (a3)
  {
    objc_msgSend(v6, "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v6, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "storageIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v9, "isEqual:", v10);

      if (!v11)
        goto LABEL_41;
    }
    objc_msgSend(v5, "storageIdentifier");
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = (void *)v12;
      objc_msgSend(v6, "identifier");
      v14 = objc_claimAutoreleasedReturnValue();

      if (!v14)
        goto LABEL_42;
    }
    objc_msgSend(v5, "originatingAddressString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v5, "originatingAddressString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "originatingAddressString");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v16, "isEqualToString:", v17);

      if (!v18)
        goto LABEL_41;
    }
    objc_msgSend(v6, "originatingAddressString");
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      v20 = (void *)v19;
      objc_msgSend(v5, "originatingAddressString");
      v14 = objc_claimAutoreleasedReturnValue();

      if (!v14)
        goto LABEL_42;
    }
    objc_msgSend(v6, "shortcutIdentifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v21, "isEqualToString:", v22);

    if (!v23)
      goto LABEL_41;
  }
  objc_msgSend(v6, "mapItemStorage");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "geoMapItem");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24 != v25)
  {
    objc_msgSend(v6, "mapItemStorage");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "geoMapItem");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = MapsSuggestionsMapItemsAreEqual(v26, v27, 1, 1, 1);

    if (!v28)
      goto LABEL_41;
  }
  objc_msgSend(v6, "customName");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    objc_msgSend(v6, "customName");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "customName");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "isEqualToString:", v31);

    if (!v32)
    {
LABEL_41:
      v14 = 0;
      goto LABEL_42;
    }
  }
  objc_msgSend(v5, "customName");
  v33 = objc_claimAutoreleasedReturnValue();
  if (!v33
    || (v34 = (void *)v33,
        objc_msgSend(v6, "customName"),
        v14 = objc_claimAutoreleasedReturnValue(),
        (id)v14,
        v34,
        v14))
  {
    objc_msgSend(v6, "fetchContactHandles");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contacts");
    v36 = objc_claimAutoreleasedReturnValue();
    if (!v36)
      goto LABEL_47;
    v37 = (void *)v36;
    objc_msgSend(v5, "contacts");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "count");

    if (!v39)
      goto LABEL_47;
    v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v35, "count"));
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v41 = v35;
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    if (v42)
    {
      v43 = v42;
      v44 = *(_QWORD *)v66;
      do
      {
        v45 = 0;
        do
        {
          if (*(_QWORD *)v66 != v44)
            objc_enumerationMutation(v41);
          objc_msgSend(v40, "addObject:", *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * v45++));
        }
        while (v43 != v45);
        v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
      }
      while (v43);
    }

    v46 = objc_alloc(MEMORY[0x1E0C99E20]);
    objc_msgSend(v5, "contacts");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)objc_msgSend(v46, "initWithCapacity:", objc_msgSend(v47, "count"));

    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    objc_msgSend(v5, "contacts", 0);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)v62;
      do
      {
        v53 = 0;
        do
        {
          if (*(_QWORD *)v62 != v52)
            objc_enumerationMutation(v49);
          objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * v53), "handleValue");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "addObject:", v54);

          ++v53;
        }
        while (v51 != v53);
        v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
      }
      while (v51);
    }

    v55 = objc_msgSend(v48, "isEqualToSet:", v40);
    if (v55)
    {
LABEL_47:
      if (!v35 || !objc_msgSend(v35, "count"))
        goto LABEL_39;
      objc_msgSend(v5, "contacts");
      v14 = objc_claimAutoreleasedReturnValue();
      if (!v14)
      {
LABEL_44:

        goto LABEL_42;
      }
      objc_msgSend(v5, "contacts");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend(v56, "count");

      if (v57)
      {
LABEL_39:
        v58 = objc_msgSend(v6, "hidden");
        if (v58 == objc_msgSend(v5, "isHidden"))
        {
          v60 = objc_msgSend(v6, "source");
          v14 = objc_msgSend(v5, "source") == v60;
          goto LABEL_44;
        }
      }
    }
    v14 = 0;
    goto LABEL_44;
  }
LABEL_42:

  return v14;
}

MapsSuggestionsShortcut *MapsSuggestionsShortcutFromMSFavoriteItem(void *a1)
{
  id v1;
  MapsSuggestionsShortcut *v2;

  v1 = a1;
  v2 = -[MapsSuggestionsShortcut initWithFavoriteItem:]([MapsSuggestionsShortcut alloc], "initWithFavoriteItem:", v1);

  return v2;
}

BOOL MapsSuggestionsMapsSyncStorageShouldStoreShortcut(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "isSetupPlaceholder") && !objc_msgSend(v1, "isHidden")
    || objc_msgSend(v1, "type") == 4)
  {
    v2 = 0;
  }
  else if (objc_msgSend(v1, "type") == 1)
  {
    objc_msgSend(v1, "geoMapItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3 != 0;

  }
  else
  {
    v2 = 1;
  }

  return v2;
}

void sub_1A42E7228(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A42E79B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42E7B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42E8998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42E94CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42E98A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  void *v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A42E9A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42E9B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42E9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A42EA25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsShortcutManager>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI30MapsSuggestionsShortcutManagerEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsShortcutManager]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A42EA41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A42EA7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EAA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A42EAB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42EADAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EBFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  void *v60;
  void *v61;
  void *v62;
  void *v63;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A42EC41C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_56c16_ZTSN3MSg5QueueE(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 56) = *(id *)(a2 + 56);
  result = *(id *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_ea8_56c16_ZTSN3MSg5QueueE(uint64_t a1)
{

}

void sub_1A42EC690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A42EC8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42ECB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_48c16_ZTSN3MSg5QueueE(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 48) = *(id *)(a2 + 48);
  result = *(id *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void __destroy_helper_block_ea8_48c16_ZTSN3MSg5QueueE(uint64_t a1)
{

}

void sub_1A42ECDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42ED068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak((id *)(v21 - 88));

  _Unwind_Resume(a1);
}

void sub_1A42ED2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42ED524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A42ED5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42ED864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EDBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A42EDE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EE084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42EE62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  objc_destroyWeak((id *)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_1A42EE7B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EE8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EEA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EED54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42EEE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EF1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42EF310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EF590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EF6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EF93C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EFA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42EFD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42EFFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v22 = v20;

  _Unwind_Resume(a1);
}

void sub_1A42F0384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A42F0D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A42F101C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A42F10B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A42F11A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42F12E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42F1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A42F1598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A42F16D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A42F186C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42F19B8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 40));

  _Unwind_Resume(a1);
}

void sub_1A42F1C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL30MapsSuggestionsMyPlacesEnabledv_block_invoke()
{
  uint64_t result;

  result = MapsFeature_IsEnabled_MyPlacesFeatures();
  _MergedGlobals_35 = result;
  return result;
}

uint64_t ___ZL29_sortMapsSuggestionsShortcutsP14NSMutableArrayIP23MapsSuggestionsShortcutE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "type") == 2 || objc_msgSend(v4, "type") == 3;
  if (objc_msgSend(v5, "type") == 2)
  {
    if (!v6)
    {
      v7 = 1;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v8 = objc_msgSend(v5, "type");
  if (v8 != 3 || v6)
    v7 = -1;
  else
    v7 = 1;
  if (v8 == 3 && v6)
  {
LABEL_15:
    v10 = objc_msgSend(v4, "type");
    if (v10 == objc_msgSend(v5, "type"))
    {
      v7 = -1;
    }
    else if (objc_msgSend(v4, "type") == 2)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
  }
LABEL_20:

  return v7;
}

void sub_1A42F1E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI30MapsSuggestionsShortcutManagerEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A42F1F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A42F2B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___localizedSubtitleString_block_invoke()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD block[5];

  v0 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_5;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "CarRentalTitleFormatter";
  if (qword_1ED22EF80 != -1)
    dispatch_once(&qword_1ED22EF80, block);
  v1 = (id)qword_1ED22EF78;
  objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("MSG_ETA_WITH_TRANSPORT_MODE"), CFSTR("%@ %@<unlocalized>"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v7[0] = v0;
  v7[1] = 3221225472;
  v7[2] = ___localizedSubtitleString_block_invoke_2;
  v7[3] = &unk_1E4BCF248;
  v8 = v3;
  v4 = v3;
  v5 = _Block_copy(v7);
  v6 = (void *)_MergedGlobals_36;
  _MergedGlobals_36 = (uint64_t)v5;

}

id ___localizedSubtitleString_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  objc_class *v5;
  id v6;
  id v7;
  void *v8;

  v5 = (objc_class *)MEMORY[0x1E0CB3940];
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_msgSend([v5 alloc], "initWithFormat:", *(_QWORD *)(a1 + 32), v7, v6);

  return v8;
}

uint64_t GEOComposedWaypointFromMapsSuggestionsEntry(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v7)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_DWORD *)buf = 136446978;
    v37 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOComposedWaypoint.m";
    v38 = 1024;
    *(_DWORD *)v39 = 41;
    *(_WORD *)&v39[4] = 2082;
    *(_QWORD *)&v39[6] = "BOOL GEOComposedWaypointFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __str"
                         "ong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong GEOComposedWaypointCompletionHandler _Nonnull)";
    v40 = 2082;
    v41 = "nil == (completion)";
    v12 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a completion handler";
LABEL_13:
    _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
    goto LABEL_14;
  }
  if (!v5)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_DWORD *)buf = 136446978;
    v37 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOComposedWaypoint.m";
    v38 = 1024;
    *(_DWORD *)v39 = 42;
    *(_WORD *)&v39[4] = 2082;
    *(_QWORD *)&v39[6] = "BOOL GEOComposedWaypointFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __str"
                         "ong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong GEOComposedWaypointCompletionHandler _Nonnull)";
    v40 = 2082;
    v41 = "nil == (entry)";
    v12 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a suggestions entry";
    goto LABEL_13;
  }
  if (!v6)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v37 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+GEOComposedWaypoint.m";
      v38 = 1024;
      *(_DWORD *)v39 = 43;
      *(_WORD *)&v39[4] = 2082;
      *(_QWORD *)&v39[6] = "BOOL GEOComposedWaypointFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __s"
                           "trong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong GEOComposedWaypointCompletionHandler _Nonnull)";
      v40 = 2082;
      v41 = "nil == (requester)";
      v12 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a network requester";
      goto LABEL_13;
    }
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  objc_msgSend(v5, "geoMapItem");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsLatitudeKey"))
      && objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsLongitudeKey")))
    {
      objc_msgSend(v5, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "doubleValue");
      v16 = v15;
      objc_msgSend(v5, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      if (fabs(v19 + 180.0) >= 0.00000001 || fabs(v16 + 180.0) >= 0.00000001)
      {
        v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27168]), "initWithGEOCoordinate:", v16, v19);
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 3221225472;
        v29[2] = __GEOComposedWaypointFromMapsSuggestionsEntry_block_invoke_89;
        v29[3] = &unk_1E4BCF298;
        v30 = v5;
        v31 = v24;
        v32 = v7;
        v9 = v24;
        v10 = objc_msgSend(v6, "composedWaypointForLocation:completion:", v9, v29);

        v11 = v30;
        goto LABEL_6;
      }
      v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid coordinate: %f,%f"), *(_QWORD *)&v16, *(_QWORD *)&v19);
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, v9);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v20);

      GEOFindOrCreateLog();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v37 = "BOOL GEOComposedWaypointFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<Maps"
              "SuggestionsNetworkRequester> _Nonnull, __strong GEOComposedWaypointCompletionHandler _Nonnull)";
        v38 = 2112;
        *(_QWORD *)v39 = v9;
        _os_log_impl(&dword_1A427D000, v21, OS_LOG_TYPE_ERROR, "%s failed: %@", buf, 0x16u);
      }

    }
    else
    {
      if (objc_msgSend(v5, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
      {
        objc_msgSend(v5, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __GEOComposedWaypointFromMapsSuggestionsEntry_block_invoke_90;
        v25[3] = &unk_1E4BCF298;
        v26 = v5;
        v27 = v22;
        v28 = v7;
        v9 = v22;
        v10 = objc_msgSend(v6, "composedWaypointForAddressString:completion:", v9, v25);

        v11 = v26;
        goto LABEL_6;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("We have no mapItem, latlong or address!"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v23);

      GEOFindOrCreateLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v37 = "BOOL GEOComposedWaypointFromMapsSuggestionsEntry(MapsSuggestionsEntry *__strong _Nonnull, __strong id<Maps"
              "SuggestionsNetworkRequester> _Nonnull, __strong GEOComposedWaypointCompletionHandler _Nonnull)";
        v38 = 2112;
        *(_QWORD *)v39 = CFSTR("We have no mapItem, latlong or address!");
        _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "%s failed: %@", buf, 0x16u);
      }
    }
    v10 = 1;
    goto LABEL_15;
  }
  objc_msgSend(v5, "geoMapItem");
  v9 = objc_claimAutoreleasedReturnValue();
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __GEOComposedWaypointFromMapsSuggestionsEntry_block_invoke;
  v33[3] = &unk_1E4BCF270;
  v34 = v5;
  v35 = v7;
  v10 = objc_msgSend(v6, "composedWaypointForMapItem:completion:", v9, v33);

  v11 = v34;
LABEL_6:

LABEL_15:
  return v10;
}

id MapsSuggestionsDefaultCacheDirectory()
{
  if (qword_1ED22EF90 != -1)
    dispatch_once(&qword_1ED22EF90, &__block_literal_global_11);
  return (id)_MergedGlobals_37;
}

id MapsSuggestionsDefaultCachePathForProcessName(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD block[4];
  id v9;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MapsSuggestionsDefaultCachePathForProcessName_block_invoke;
  block[3] = &unk_1E4BCEE50;
  v9 = v1;
  v2 = qword_1ED22EFA0;
  v3 = v1;
  v4 = v3;
  if (v2 == -1)
  {
    v5 = v3;
  }
  else
  {
    dispatch_once(&qword_1ED22EFA0, block);
    v5 = v9;
  }
  v6 = (id)qword_1ED22EF98;

  return v6;
}

id MapsSuggestionsPathForSuppressedEntries()
{
  if (qword_1ED22EFB0 != -1)
    dispatch_once(&qword_1ED22EFB0, &__block_literal_global_91);
  return (id)qword_1ED22EFA8;
}

#error "1A42F56CC: call analysis failed (funcsize=71)"

void sub_1A42F955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromPPLocationCategory(unsigned int a1)
{
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 8)
    return off_1E4BCF530[(__int16)a1];
  GEOFindOrCreateLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "Location Category %d not in our switch!", (uint8_t *)v4, 8u);
  }

  return 0;
}

void sub_1A42FA94C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A42FAB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A42FABD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_1A42FB660(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1A42FC4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1A42FE34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsShortcutSplit(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, _QWORD);
  id v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  double v23;
  double v24;
  NSObject *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  NSObject *v36;
  id v37;
  void *v38;
  id v39;
  NSObject *v40;
  uint64_t v42;
  void (**v43)(_QWORD, _QWORD, _QWORD);
  void (**v44)(id, void *, _QWORD);
  id v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE buf[12];
  __int16 v54;
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void (**)(_QWORD, _QWORD, _QWORD))v10;
  if (v7 && !v8)
  {
    v43 = (void (**)(_QWORD, _QWORD, _QWORD))v10;
    v44 = v9;
    v12 = objc_msgSend(v7, "count");
    v46 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
    v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
    v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v45 = v7;
    v14 = v7;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
    if (!v15)
      goto LABEL_33;
    v16 = v15;
    v17 = *(_QWORD *)v49;
    while (1)
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v49 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v18);
        v20 = objc_msgSend(v19, "isShortcut", v42);
        v21 = v19;
        v22 = v21;
        if (v20)
        {
          if (v21)
          {
            *(_QWORD *)buf = 0;
            if (MapsSuggestionsDistanceFromHereToEntry(v21, buf))
            {
              v23 = *(double *)buf;
              GEOConfigGetDouble();
              if (v23 > v24)
              {
                v25 = v22;
                goto LABEL_21;
              }
            }

            v27 = v13;
          }
          else
          {
            GEOFindOrCreateLog();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
              v54 = 1024;
              v55 = 72;
              v56 = 2082;
              v57 = "BOOL _isNearby(MapsSuggestionsEntry *__strong)";
              v58 = 2082;
              v59 = "nil == (entry)";
              _os_log_impl(&dword_1A427D000, v25, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry", buf, 0x26u);
            }
LABEL_21:

            v27 = v47;
          }
LABEL_22:
          objc_msgSend(v27, "addObject:", v22);
          goto LABEL_27;
        }
        if (v21)
        {
          if (+[MapsSuggestionsSiri isEnabled](MapsSuggestionsSiri, "isEnabled"))
          {
            v26 = -[NSObject type](v22, "type");
            if (v26 > 0x18)
            {
              GEOFindOrCreateLog();
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
                v54 = 1024;
                v55 = 67;
                v56 = 2082;
                v57 = "BOOL _isSuggestion(MapsSuggestionsEntry *__strong)";
                v58 = 2082;
                v59 = "YES";
                _os_log_impl(&dword_1A427D000, v29, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsEntryType!", buf, 0x26u);
              }

LABEL_17:
              v27 = (void *)v46;
              goto LABEL_22;
            }
            if (((1 << v26) & 0x1B3FFB8) != 0)
              goto LABEL_17;
          }
        }
        else
        {
          GEOFindOrCreateLog();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
            v54 = 1024;
            v55 = 29;
            v56 = 2082;
            v57 = "BOOL _isSuggestion(MapsSuggestionsEntry *__strong)";
            v58 = 2082;
            v59 = "nil == (entry)";
            _os_log_impl(&dword_1A427D000, v28, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry", buf, 0x26u);
          }

        }
LABEL_27:
        ++v18;
      }
      while (v16 != v18);
      v30 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
      v16 = v30;
      if (!v30)
      {
LABEL_33:

        v31 = v13;
        v32 = v31;
        if (v31)
        {
          objc_msgSend(v31, "sortUsingComparator:", &__block_literal_global_13);
          v33 = v32;
          v11 = v43;
          v9 = v44;
          v34 = (void *)v46;
          v35 = (void *)v42;
        }
        else
        {
          GEOFindOrCreateLog();
          v36 = objc_claimAutoreleasedReturnValue();
          v11 = v43;
          v9 = v44;
          v34 = (void *)v46;
          v35 = (void *)v42;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
            v54 = 1024;
            v55 = 99;
            v56 = 2082;
            v57 = "MapsSuggestionsEntries *_orderByPositionKey(MapsSuggestionsMutableEntries *__strong)";
            v58 = 2082;
            v59 = "nil == (entries)";
            _os_log_impl(&dword_1A427D000, v36, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires entries", buf, 0x26u);
          }

        }
        objc_msgSend(v35, "addObjectsFromArray:", v32);

        v37 = v47;
        v38 = v37;
        if (v37)
        {
          objc_msgSend(v37, "sortUsingComparator:", &__block_literal_global_101);
          v39 = v38;
          v8 = 0;
          v7 = v45;
        }
        else
        {
          GEOFindOrCreateLog();
          v40 = objc_claimAutoreleasedReturnValue();
          v8 = 0;
          v7 = v45;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
            v54 = 1024;
            v55 = 128;
            v56 = 2082;
            v57 = "MapsSuggestionsEntries *_orderByDistance(MapsSuggestionsMutableEntries *__strong)";
            v58 = 2082;
            v59 = "nil == (entries)";
            _os_log_impl(&dword_1A427D000, v40, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires entries", buf, 0x26u);
          }

        }
        objc_msgSend(v35, "addObjectsFromArray:", v38);

        if (v11)
          ((void (**)(_QWORD, void *, _QWORD))v11)[2](v11, v35, 0);
        if (v9)
          v9[2](v9, v34, 0);

        goto LABEL_52;
      }
    }
  }
  if (v10)
    (*((void (**)(id, id, id))v10 + 2))(v10, v7, v8);
  if (v9)
    ((void (**)(id, void *, id))v9)[2](v9, v7, v8);
LABEL_52:

  return 1;
}

uint64_t ___orderByPositionKey_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[14];
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "integerForKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
  if (v6 == objc_msgSend(v5, "integerForKey:", CFSTR("MapsSuggestionsShortcutPositionKey")))
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v13 = 138412546;
      v14 = (const char *)v4;
      v15 = 2112;
      *(_QWORD *)v16 = v5;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_FAULT, "BUGHUNT: This should never happen but it did. Two MSg Favourites had the same position key:\na = %@\nb = %@", (uint8_t *)&v13, 0x16u);
    }

  }
  v8 = objc_msgSend(v4, "integerForKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
  v9 = objc_msgSend(v5, "integerForKey:", CFSTR("MapsSuggestionsShortcutPositionKey"));
  if (v8 == v9)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
      v15 = 1024;
      *(_DWORD *)v16 = 93;
      *(_WORD *)&v16[4] = 2082;
      *(_QWORD *)&v16[6] = "NSComparisonResult _cmpShortcut(NSInteger, NSInteger)";
      v17 = 2082;
      v18 = "a == b";
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Equal Shortcut positions cannot happen!", (uint8_t *)&v13, 0x26u);
    }

    v11 = 0;
  }
  else if ((double)v8 >= (double)v9)
  {
    v11 = 1;
  }
  else
  {
    v11 = -1;
  }

  return v11;
}

uint64_t ___orderByDistance_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  double *v5;
  NSObject *v6;
  double v7;
  double *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v12 = 0;
  v5 = (double *)&v12;
  if (!MapsSuggestionsDistanceFromHereToEntry(a2, &v12))
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
      v15 = 1024;
      v16 = 123;
      v17 = 2082;
      v18 = "CLLocationDistance _distanceForComparison(MapsSuggestionsEntry *__strong)";
      v19 = 2082;
      v20 = "YES";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Could not get a distance for an Entry", buf, 0x26u);
    }

    v5 = (double *)MEMORY[0x1E0C9E318];
  }
  v7 = *v5;
  v12 = 0;
  v8 = (double *)&v12;
  if (!MapsSuggestionsDistanceFromHereToEntry(v4, &v12))
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcutSplit.m";
      v15 = 1024;
      v16 = 123;
      v17 = 2082;
      v18 = "CLLocationDistance _distanceForComparison(MapsSuggestionsEntry *__strong)";
      v19 = 2082;
      v20 = "YES";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Could not get a distance for an Entry", buf, 0x26u);
    }

    v8 = (double *)MEMORY[0x1E0C9E318];
  }
  if (v7 >= *v8)
    v10 = 1;
  else
    v10 = -1;

  return v10;
}

void sub_1A4300490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

MapsSuggestionsMeCard *MapsSuggestionsMeCardFilter(void *a1, void *a2)
{
  id v3;
  id v4;
  MapsSuggestionsMeCard *v5;
  void *v6;
  void *v7;
  MapsSuggestionsMeCard *v8;
  NSObject *v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = [MapsSuggestionsMeCard alloc];
    objc_msgSend(v3, "shortcutsForAllIncludingHidden");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "MSg_copyIf:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[MapsSuggestionsMeCard initWithShortcuts:hasCorrected:hasGeocoded:](v5, "initWithShortcuts:hasCorrected:hasGeocoded:", v7, objc_msgSend(v3, "hasCorrected"), objc_msgSend(v3, "hasGeocoded"));

  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136446978;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsMeCard.m";
      v13 = 1024;
      v14 = 242;
      v15 = 2082;
      v16 = "MapsSuggestionsMeCard * _Nonnull MapsSuggestionsMeCardFilter(MapsSuggestionsMeCard *__strong _Nonnull, __str"
            "ong MapsSuggestionsValueSuccessBlock _Nonnull)";
      v17 = 2082;
      v18 = "nil == (predicate)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a predicate block", (uint8_t *)&v11, 0x26u);
    }

    v8 = (MapsSuggestionsMeCard *)v3;
  }

  return v8;
}

id MapsSuggestionsMeCardWithinDistance(void *a1, double a2, double a3, double a4)
{
  objc_class *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  double v15;

  v7 = (objc_class *)MEMORY[0x1E0C9E3B8];
  v8 = a1;
  v9 = (void *)objc_msgSend([v7 alloc], "initWithLatitude:longitude:", a2, a3);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MapsSuggestionsMeCardWithinDistance_block_invoke;
  v13[3] = &unk_1E4BCF798;
  v14 = v9;
  v15 = a4;
  v10 = v9;
  MapsSuggestionsMeCardFilter(v8, v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

MapsSuggestionsMeCard *MapsSuggestionsMeCardUnion(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  MapsSuggestionsMeCard *v9;
  uint64_t v10;
  uint64_t v11;
  MapsSuggestionsMeCard *v12;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    objc_msgSend(v3, "shortcutsForAllIncludingHidden");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortcutsForAllIncludingHidden");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "arrayByAddingObjectsFromArray:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v4, "shortcutsForAllIncludingHidden");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v9 = [MapsSuggestionsMeCard alloc];
  if ((objc_msgSend(v3, "hasCorrected") & 1) != 0)
    v10 = 1;
  else
    v10 = objc_msgSend(v5, "hasCorrected");
  if ((objc_msgSend(v3, "hasGeocoded") & 1) != 0)
    v11 = 1;
  else
    v11 = objc_msgSend(v5, "hasGeocoded");
  v12 = -[MapsSuggestionsMeCard initWithShortcuts:hasCorrected:hasGeocoded:](v9, "initWithShortcuts:hasCorrected:hasGeocoded:", v8, v10, v11);

  return v12;
}

void sub_1A4301E8C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void onLocaleCurrentLocaleDidChangeNotification(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  GEOFindOrCreateLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v5) = 0;
    _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_DEBUG, "LocaleCurrentLocaleDidChange tiggerd", (uint8_t *)&v5, 2u);
  }

  if (a2)
  {
    objc_msgSend(a2, "rescheduleRefreshOnlyIfAlreadyRunning");
  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446978;
      v6 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTracker.m";
      v7 = 1024;
      v8 = 65;
      v9 = 2082;
      v10 = "void onLocaleCurrentLocaleDidChangeNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, "
            "CFDictionaryRef)";
      v11 = 2082;
      v12 = "nil == (tracker)";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. tracker object is not allowed to be nil", (uint8_t *)&v5, 0x26u);
    }

  }
}

void sub_1A4302C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsTrackerIsUsableLocation(void *a1)
{
  id v1;
  void *v2;
  double v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
      dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
    if (!s_verbose)
      goto LABEL_29;
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_28;
    LOWORD(v18) = 0;
    v5 = "LOCATION not usable: got nil";
    v6 = v4;
    v7 = 2;
    goto LABEL_27;
  }
  objc_msgSend(v1, "horizontalAccuracy");
  if (v3 < 0.0)
  {
    if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
      dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
    if (!s_verbose)
      goto LABEL_29;
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
LABEL_28:

LABEL_29:
      v16 = 0;
      goto LABEL_30;
    }
    v18 = 138412290;
    v19 = v2;
    v5 = "LOCATION not usable: got invalid lateral: %@";
    goto LABEL_26;
  }
  GEOConfigGetDouble();
  v9 = v8;
  objc_msgSend(v2, "horizontalAccuracy");
  if (v10 > v9)
  {
    if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
      dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
    if (!s_verbose)
      goto LABEL_29;
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_28;
    v18 = 138412290;
    v19 = v2;
    v5 = "LOCATION not usable: not accurate enough: %@";
LABEL_26:
    v6 = v4;
    v7 = 12;
LABEL_27:
    _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v18, v7);
    goto LABEL_28;
  }
  objc_msgSend(v2, "timestamp");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNow();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceDate:", v12);
  v14 = -v13;

  GEOConfigGetDouble();
  if (v15 < v14)
  {
    if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
      dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
    if (!s_verbose)
      goto LABEL_29;
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_28;
    v18 = 138412290;
    v19 = v2;
    v5 = "LOCATION not usable: too old: %@";
    goto LABEL_26;
  }
  v16 = 1;
LABEL_30:

  return v16;
}

void sub_1A4304854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4306970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4307964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43079DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MapsSuggestionsRealInsights;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A4307D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43080E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A4308340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4308564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43087F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4308A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4308D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4309160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4309370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4309808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  void *v26;
  void *v27;
  id *v28;
  id *v29;
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A4309C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A430A30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A430A524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430A94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A430AC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430AE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430B280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A430B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1A430B71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A430BB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A430BF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430C1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430C454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A430C650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A430C970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430CC54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430CDF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430CF88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430D0AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A430F268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F2DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F3CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F448(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F4BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F5B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F628(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F6A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F718(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F794(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F884(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F8F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430F9E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FA64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FAD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FB54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FBD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FC88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FCFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FD78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FDF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FE68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FEE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FF58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A430FFD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double MapsSuggestionsDistanceToRouteConfidenceFactor()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&_MergedGlobals_38;
}

double MapsSuggestionsConfidenceDefinitelyTrue()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFC0;
}

double MapsSuggestionsConfidenceDefinitelyFalse()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFC8;
}

double MapsSuggestionsConfidenceLikelyTrue()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFD0;
}

double MapsSuggestionsConfidenceLikelyFalse()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFD8;
}

double MapsSuggestionsConfidenceDontKnow()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFE0;
}

double MapsSuggestionsConfidenceEpsilon()
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return *(double *)&qword_1ED22EFE8;
}

uint64_t MapsSuggestionsConfidenceToNSNumber()
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
}

double MapsSuggestionsBestConfidence(double a1, double a2)
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  if (*(double *)&qword_1ED22EFE0 != a1)
  {
    if (*(double *)&qword_1ED22EFE0 == a2)
    {
      return a1;
    }
    else if (a1 > a2)
    {
      return a1;
    }
  }
  return a2;
}

void MapsSuggestionsConfidenceLevelFromPrecent(double a1)
{
  if (a1 <= 0.0)
  {
    if (qword_1ED22EFF0 == -1)
      return;
    goto LABEL_5;
  }
  if (qword_1ED22EFF0 != -1)
LABEL_5:
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
}

BOOL MapsSuggestionsConfidenceIsAlmostEqual(double a1, double a2)
{
  if (qword_1ED22EFF0 != -1)
    dispatch_once(&qword_1ED22EFF0, &__block_literal_global_15);
  return vabdd_f64(a1, a2) < *(double *)&qword_1ED22EFE8;
}

uint64_t ___loadConfidenceDefaults_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  GEOConfigGetDouble();
  qword_1ED22EFC0 = v0;
  GEOConfigGetDouble();
  qword_1ED22EFC8 = v1;
  GEOConfigGetDouble();
  qword_1ED22EFD0 = v2;
  GEOConfigGetDouble();
  qword_1ED22EFD8 = v3;
  GEOConfigGetDouble();
  qword_1ED22EFE0 = v4;
  GEOConfigGetDouble();
  qword_1ED22EFE8 = v5;
  result = GEOConfigGetDouble();
  _MergedGlobals_38 = v7;
  return result;
}

void sub_1A4310BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4311874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A4311AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4311C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsCompositeTriggeringCondition>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI43MapsSuggestionsCompositeTriggeringConditionEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsCompositeTriggeringCondition]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A4311E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431205C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4312130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43122C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43124BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43125BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MapsSuggestionsCompositeTriggeringCondition;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A4312740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4312A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A4312DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void MSg::Queue::syncIfDifferent(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *label;
  void *v6;
  void (**block)(void);

  v3 = a2;
  v4 = *a1;
  block = (void (**)(void))v3;
  label = dispatch_queue_get_label(v4);
  if (label == dispatch_queue_get_label(0))
  {
    v6 = (void *)MEMORY[0x1A859CDD8]();
    block[2]();
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    dispatch_sync(v4, block);
  }

}

void sub_1A4312EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4313158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

NSObject **MSg::Queue::Queue(NSObject **a1, void *a2)
{
  NSObject *v3;
  const char *label;
  const __CFString *v5;
  NSObject *v6;

  v3 = a2;
  *a1 = v3;
  a1[1] = 0;
  label = dispatch_queue_get_label(v3);
  if (label && *label)
  {
    v5 = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", label);
    v6 = a1[1];
  }
  else
  {
    v6 = 0;
    v5 = CFSTR("MSg::Queue_unnamed");
  }
  a1[1] = v5;

  return a1;
}

void ___ZNK3MSg5Queue5asyncI43MapsSuggestionsCompositeTriggeringConditionEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4313384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4313FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1A43159E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4316E58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A43175E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A4318078(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A4318AD4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A431944C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A4319B9C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A431A2EC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A431A8F8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A431B294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A431B570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431B950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A431BE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1A431BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A431C108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1A431C178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431C238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431C298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431C30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431C38C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431C708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_1A431C82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431C8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431CA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431CB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1A431CD60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431CDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431CE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431CEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431D07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431D0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431D174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431D2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A431D3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

__CFString *MapsSuggestionsDestinationKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "containsKey:", CFSTR("MapsSuggestionsMapItemHandleDataKey")))
    {
      objc_msgSend(v2, "mapItemHandleData");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v3, "length"))
      {
        objc_msgSend(v3, "base64EncodedStringWithOptions:", 0);
        v4 = objc_claimAutoreleasedReturnValue();
LABEL_17:
        v6 = (__CFString *)v4;

        goto LABEL_18;
      }

    }
    if (objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsLatitudeKey"))
      && objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsLongitudeKey")))
    {
      v7 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v2, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (__CFString *)objc_msgSend(v7, "initWithFormat:", CFSTR("%@,%@"), v8, v9);

      if ((unint64_t)-[__CFString length](v6, "length") > 1)
        goto LABEL_18;

    }
    if (!objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsDestinationAddressKey")))
    {
LABEL_16:
      objc_msgSend(v2, "uniqueIdentifier");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "copy");
      goto LABEL_17;
    }
    objc_msgSend(v2, "stringForKey:", CFSTR("MapsSuggestionsDestinationAddressKey"));
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!-[__CFString length](v6, "length"))
    {

      goto LABEL_16;
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v13 = 1024;
      v14 = 1239;
      v15 = 2082;
      v16 = "NSString *MapsSuggestionsDestinationKey(MapsSuggestionsEntry *__strong _Nonnull)";
      v17 = 2082;
      v18 = "nil == (entry)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry", buf, 0x26u);
    }

    v6 = CFSTR("nullKey");
  }
LABEL_18:

  return v6;
}

void sub_1A431D630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431D6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A431D90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431DBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1A431DC80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431DCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431DD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431DDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431DEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431E044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431E1A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431E258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431E2C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431E5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromMapsSuggestionsEntryType(unint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t buf[4];
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 < 0x19)
    return off_1E4BCFB10[a1];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown MapsSuggestionsEntryType %u"), a1);
  GEOFindOrCreateLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v5 = v2;
    _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
  }

  return 0;
}

void sub_1A431E730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id NSStringFromMapsSuggestionsMapItem(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "coordinate");
    v5 = v4;
    objc_msgSend(v1, "coordinate");
    v7 = v6;
    objc_msgSend(v1, "shortAddress");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v2, "initWithFormat:", CFSTR("'%@' (%.5lf,%.5lf) %@"), v3, v5, v7, v8);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1A431ED34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A431EDB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431F064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431F128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431F1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431F2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431F380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A431F4D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsStringDataEncodingTypeOfString(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  NSObject *v8;
  uint8_t v10[16];

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  if (v2)
  {
    if ((objc_msgSend(v1, "hasPrefix:", CFSTR("{64}")) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v1, "hasPrefix:", CFSTR("{16}")) & 1) != 0)
    {
      v3 = 3;
    }
    else
    {
      v4 = (char *)objc_msgSend(objc_retainAutorelease(v1), "cStringUsingEncoding:", 4);
      if (v4)
      {
        if ((v2 & 1) == 0)
        {
          v3 = 4;
          v5 = MEMORY[0x1E0C80978];
          while (1)
          {
            v6 = *v4;
            if (!((v6 & 0x80000000) != 0 ? __maskrune(v6, 0x10000uLL) : *(_DWORD *)(v5 + 4 * v6 + 60) & 0x10000))
              break;
            if (!--v2)
              goto LABEL_20;
          }
        }
      }
      else
      {
        GEOFindOrCreateLog();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_1A427D000, v8, OS_LOG_TYPE_ERROR, "Read a string that could not be encoded to UTF-8", v10, 2u);
        }

      }
      v3 = 0;
    }
  }
  else
  {
    v3 = 1;
  }
LABEL_20:

  return v3;
}

void sub_1A431F630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A431FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A431FABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A431FB40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A431FD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A431FEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A432007C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSDataFromMapsSuggestionsEntries(void *a1)
{
  char *v1;
  void *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v10 = 1024;
      v11 = 928;
      v12 = 2082;
      v13 = "NSData *NSDataFromMapsSuggestionsEntries(MapsSuggestionsEntries *__strong _Nonnull)";
      v14 = 2082;
      v15 = "entries == nil";
      v4 = "At %{public}s:%d, %{public}s forbids: %{public}s. entries should not be nil";
      v5 = v3;
      v6 = 38;
      goto LABEL_7;
    }
LABEL_8:

    v2 = 0;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v1;
      v4 = "Error archiving entries %@";
      v5 = v3;
      v6 = 12;
LABEL_7:
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v8, v6);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

  return v2;
}

void sub_1A432023C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsEntriesFromNSData(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  char *v9;
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99E60]);
    v3 = objc_opt_class();
    v4 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
    v11 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v4, v1, &v11);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v11;
    if (v6 || !v5)
    {
      GEOFindOrCreateLog();
      v8 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v6, "localizedDescription");
        v9 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v13 = v9;
        _os_log_impl(&dword_1A427D000, v8, OS_LOG_TYPE_ERROR, "Error decoding MapsSuggestionsEntries - %@", buf, 0xCu);

      }
      v7 = 0;
    }
    else
    {
      v7 = v5;
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v14 = 1024;
      v15 = 941;
      v16 = 2082;
      v17 = "MapsSuggestionsEntries *MapsSuggestionsEntriesFromNSData(NSData *__strong _Nonnull)";
      v18 = 2082;
      v19 = "entriesData == nil";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. entriesData should not be nil", buf, 0x26u);
    }
    v7 = 0;
  }

  return v7;
}

void sub_1A4320484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id NSStringFromMapsSuggestionsEntry(void *a1)
{
  objc_msgSend(a1, "fullDescription");
  return (id)objc_claimAutoreleasedReturnValue();
}

__CFString *NSStringFromMapsSuggestionsEntries(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __CFString *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "count"))
    {
      v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      objc_msgSend(v3, "appendString:", CFSTR("[\n"));
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v4 = v2;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
      {
        v6 = *(_QWORD *)v12;
        do
        {
          for (i = 0; i != v5; ++i)
          {
            if (*(_QWORD *)v12 != v6)
              objc_enumerationMutation(v4);
            objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "fullDescription");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "appendFormat:", CFSTR("%@\n"), v8);

          }
          v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        }
        while (v5);
      }

      objc_msgSend(v3, "appendString:", CFSTR("]"));
      v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithString:", v3);

    }
    else
    {
      v9 = CFSTR("[]");
    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1A4320678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id NSStringFromMapsSuggestionsDistance(unint64_t a1)
{
  void *v1;

  if (a1 > 0x3E7)
    v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%.1lfkm"), (double)a1 / 1000.0);
  else
    v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%ldm"), a1);
  return v1;
}

const __CFString *NSStringFromMapsSuggestionsRemovalBehavior(unint64_t a1)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 9 && ((0x117u >> a1) & 1) != 0)
    return off_1E4BCFBD8[a1];
  GEOFindOrCreateLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
    v5 = 1024;
    v6 = 1009;
    v7 = 2082;
    v8 = "NSString *NSStringFromMapsSuggestionsRemovalBehavior(MapsSuggestionsRemovalBehavior)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v1, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsRemovalBehavior!", (uint8_t *)&v3, 0x26u);
  }

  return CFSTR("UnsupportedBehavior");
}

__CFString *NSStringFromMapsSuggestionsEntryEngagement(unint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t buf[4];
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 < 7)
    return off_1E4BCFC20[a1];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown MapsSuggestionsEntryEngagement %u"), a1);
  GEOFindOrCreateLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v5 = v2;
    _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
  }

  return 0;
}

void sub_1A4320948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MapsSuggestionsEntryTypeEnumerate(void *a1)
{
  uint64_t (**v1)(id, unint64_t);
  unint64_t v2;
  char v3;
  char v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = 0;
    do
    {
      v3 = v1[2](v1, v2);
      if (v2++ >= 0x18)
        v5 = 0;
      else
        v5 = v3;
    }
    while ((v5 & 1) != 0);
  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v9 = 1024;
      v10 = 1074;
      v11 = 2082;
      v12 = "void MapsSuggestionsEntryTypeEnumerate(__strong MapsSuggestionsEntryTypeEnumerationBlock _Nonnull)";
      v13 = 2082;
      v14 = "NULL == block";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a MapsSuggestionsEntryTypeEnumerationBlock", (uint8_t *)&v7, 0x26u);
    }

  }
}

void sub_1A4320A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MapsSuggestionsRemovalBehaviorEnumerate(void *a1)
{
  uint64_t (**v1)(id, unint64_t);
  unint64_t v2;
  char v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = 1;
    do
    {
      if (v2 > 8)
        break;
      if (((1 << v2) & 0x117) == 0)
        break;
      v3 = v1[2](v1, v2);
      v2 *= 2;
    }
    while ((v3 & 1) != 0);
  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446978;
      v6 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v7 = 1024;
      v8 = 1100;
      v9 = 2082;
      v10 = "void MapsSuggestionsRemovalBehaviorEnumerate(__strong MapsSuggestionsRemovalBehaviorEnumerationBlock _Nonnull)";
      v11 = 2082;
      v12 = "NULL == block";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a MapsSuggestionsRemovalBehaviorEnumerationBlock", (uint8_t *)&v5, 0x26u);
    }

  }
}

void sub_1A4320BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsEntryTypeFromString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
      v9 = 1024;
      v10 = 1158;
      v11 = 2082;
      v12 = "MapsSuggestionsEntryType MapsSuggestionsEntryTypeFromString(NSString *__strong _Nonnull)";
      v13 = 2082;
      v14 = "nil == (str)";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a string", buf, 0x26u);
    }
LABEL_10:

LABEL_11:
    v3 = 0;
    goto LABEL_12;
  }
  if (!objc_msgSend(v1, "length")
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("Unknown")) & 1) != 0
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeUnknown")) & 1) != 0)
  {
    goto LABEL_11;
  }
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Home")) & 1) == 0
    && (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeHome")) & 1) == 0)
  {
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Work")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeWork")) & 1) != 0)
    {
      v3 = 2;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CalendarEvent")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeCalendarEvent")) & 1) != 0)
    {
      v3 = 3;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("FrequentLocation")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeFrequentLocation")) & 1) != 0)
    {
      v3 = 4;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("RestaurantReservation")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeRestaurantReservation")) & 1) != 0)
    {
      v3 = 8;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Ridesharing")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeRidesharing")) & 1) != 0)
    {
      v3 = 9;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("ParkedCar")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeParkedCar")) & 1) != 0)
    {
      v3 = 7;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("RecentHistory")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeRecentHistory")) & 1) != 0)
    {
      v3 = 5;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("OldPreYukonFavorite")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeOldPreYukonFavorite")) & 1) != 0)
    {
      v3 = 6;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CarPlayLowEnergy")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeCarPlayLowEnergy")) & 1) != 0)
    {
      v3 = 10;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("ResumeRoute")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeResumeRoute")) & 1) != 0)
    {
      v3 = 11;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("AppConnection")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeAppConnection")) & 1) != 0)
    {
      v3 = 12;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Hotel")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeHotel")) & 1) != 0)
    {
      v3 = 13;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CarRental")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeCarRental")) & 1) != 0)
    {
      v3 = 14;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TravelFlight")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeTravelFlight")) & 1) != 0)
    {
      v3 = 15;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TicketedEvent")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeTicketedEvent")) & 1) != 0)
    {
      v3 = 16;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Portrait")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypePortrait")) & 1) != 0)
    {
      v3 = 17;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserPlace")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeUserPlace")) & 1) != 0)
    {
      v3 = 18;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("School")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeSchool")) & 1) != 0)
    {
      v3 = 19;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("VehicleSetup")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeVehicleSetup")) & 1) != 0)
    {
      v3 = 20;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("RatingRequest")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeRatingRequest")) & 1) != 0)
    {
      v3 = 21;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("FavoriteButton")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeFavoriteButton")) & 1) != 0)
    {
      v3 = 22;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("OrderStatus")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsEntryTypeOrderStatus")) & 1) != 0)
    {
      v3 = 23;
      goto LABEL_12;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown MapsSuggestionsEntryType \"%@\""), v2);
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v8 = (const char *)v4;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    goto LABEL_10;
  }
  v3 = 1;
LABEL_12:

  return v3;
}

void sub_1A4321214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double GEOConfigFromMapsSuggestionsEntryType(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  void *v3;
  NSObject *v4;
  __int128 v6;
  uint8_t buf[4];
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
      v1 = &GEOConfigMapsSuggestionsEntryTypeUnknownEnabled;
      goto LABEL_27;
    case 1:
      v1 = &GEOConfigMapsSuggestionsEntryTypeHomeEnabled;
      goto LABEL_27;
    case 2:
      v1 = &GEOConfigMapsSuggestionsEntryTypeWorkEnabled;
      goto LABEL_27;
    case 3:
      v1 = &GEOConfigMapsSuggestionsEntryTypeCalendarEventEnabled;
      goto LABEL_27;
    case 4:
      v1 = &GEOConfigMapsSuggestionsEntryTypeFrequentLocationEnabled;
      goto LABEL_27;
    case 5:
      v1 = &GEOConfigMapsSuggestionsEntryTypeRecentHistoryEnabled;
      goto LABEL_27;
    case 6:
      v1 = &GEOConfigMapsSuggestionsEntryTypeOldPreYukonFavoriteEnabled;
      goto LABEL_27;
    case 7:
      v1 = &GEOConfigMapsSuggestionsEntryTypeParkedCarEnabled;
      goto LABEL_27;
    case 8:
      v1 = &GEOConfigMapsSuggestionsEntryTypeRestaurantReservationEnabled;
      goto LABEL_27;
    case 9:
      v1 = &GEOConfigMapsSuggestionsEntryTypeRidesharingEnabled;
      goto LABEL_27;
    case 10:
      v1 = &GEOConfigMapsSuggestionsEntryTypeCarPlayLowEnergyEnabled;
      goto LABEL_27;
    case 11:
      v1 = &GEOConfigMapsSuggestionsEntryTypeResumeRouteEnabled;
      goto LABEL_27;
    case 12:
      v1 = &GEOConfigMapsSuggestionsEntryTypeAppConnectionEnabled;
      goto LABEL_27;
    case 13:
      v1 = &GEOConfigMapsSuggestionsEntryTypeHotelEnabled;
      goto LABEL_27;
    case 14:
      v1 = &GEOConfigMapsSuggestionsEntryTypeCarRentalEnabled;
      goto LABEL_27;
    case 15:
      v1 = &GEOConfigMapsSuggestionsEntryTypeTravelFlightEnabled;
      goto LABEL_27;
    case 16:
      v1 = &GEOConfigMapsSuggestionsEntryTypeTicketedEventEnabled;
      goto LABEL_27;
    case 17:
      v1 = &GEOConfigMapsSuggestionsEntryTypePortraitEnabled;
      goto LABEL_27;
    case 18:
      v1 = &GEOConfigMapsSuggestionsEntryTypeUserPlaceEnabled;
      goto LABEL_27;
    case 19:
      v1 = &GEOConfigMapsSuggestionsEntryTypeSchoolEnabled;
      goto LABEL_27;
    case 20:
      v1 = &GEOConfigMapsSuggestionsEntryTypeVehicleSetupEnabled;
      goto LABEL_27;
    case 21:
      v1 = &GEOConfigMapsSuggestionsEntryTypeRatingRequestEnabled;
      goto LABEL_27;
    case 22:
      v1 = &GEOConfigMapsSuggestionsEntryTypeFavoriteButtonEnabled;
      goto LABEL_27;
    case 23:
      v1 = &GEOConfigMapsSuggestionsEntryTypeOrderStatusEnabled;
      goto LABEL_27;
    case 24:
      v1 = &GEOConfigMapsSuggestionsEntryTypeContactActivityEnabled;
LABEL_27:
      v2 = *v1;
      break;
    default:
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown MapsSuggestionsEntryType %u"), a1);
      GEOFindOrCreateLog();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v3;
        _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
      }

      v6 = *MEMORY[0x1E0D264E8];
      *(_QWORD *)&v2 = v6;
      break;
  }
  return *(double *)&v2;
}

void sub_1A4321484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsPeriodFromEntry(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsScheduledTimeKey")))
    {
      objc_msgSend(v4, "dateForKey:", CFSTR("MapsSuggestionsScheduledTimeKey"));
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
    if (objc_msgSend(v4, "containsKey:", CFSTR("MapsSuggestionsScheduledEndTimeKey")))
    {
      objc_msgSend(v4, "dateForKey:", CFSTR("MapsSuggestionsScheduledEndTimeKey"));
      v8 = (id)objc_claimAutoreleasedReturnValue();
      if (!a2)
      {
LABEL_22:
        v7 = 0;
        if (v5 && v8)
          v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3588]), "initWithStartDate:endDate:", v5, v8);

        goto LABEL_26;
      }
    }
    else
    {
      v8 = 0;
      if (!a2)
        goto LABEL_22;
    }
    if (objc_msgSend(v4, "containsKey:", CFSTR("MapsSuggestionsEarliestTimeKey")))
    {
      objc_msgSend(v4, "dateForKey:", CFSTR("MapsSuggestionsEarliestTimeKey"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (v5)
      {
        objc_msgSend(v9, "earlierDate:", v5);
        v11 = objc_claimAutoreleasedReturnValue();

        v5 = (id)v11;
      }
      else
      {
        v5 = v9;
      }

    }
    if (objc_msgSend(v4, "containsKey:", CFSTR("MapsSuggestionsLatestTimeKey")))
    {
      objc_msgSend(v4, "dateForKey:", CFSTR("MapsSuggestionsLatestTimeKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v8)
      {
        objc_msgSend(v12, "laterDate:", v8);
        v14 = objc_claimAutoreleasedReturnValue();

        v8 = (id)v14;
      }
      else
      {
        v8 = v12;
      }

    }
    goto LABEL_22;
  }
  GEOFindOrCreateLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v16 = 136446978;
    v17 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry.mm";
    v18 = 1024;
    v19 = 1273;
    v20 = 2082;
    v21 = "MapsSuggestionsPeriod *MapsSuggestionsPeriodFromEntry(MapsSuggestionsEntry *__strong _Nonnull, BOOL)";
    v22 = 2082;
    v23 = "nil == (entry)";
    _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry", (uint8_t *)&v16, 0x26u);
  }

  v7 = 0;
LABEL_26:

  return v7;
}

void sub_1A4321728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A43218CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4321A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4321B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsCircuitBoard>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI27MapsSuggestionsCircuitBoardEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsCircuitBoard]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A4321D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4321D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4321F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4321F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4322100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4322178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A43222D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A432251C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4322708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A432294C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4322B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4322D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4322F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43231AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4323398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI27MapsSuggestionsCircuitBoardEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4323508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43247C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4324898(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1A43249E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN3MSg13dispatch_syncIbEET_PU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFS1_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1A4324C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4324EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A43250B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4325204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A432543C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4325528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4325650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4325714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A432583C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4325A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsWallet>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI21MapsSuggestionsWalletEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsWallet]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A4325BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4325D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43272AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A43277D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4327A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4327D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43281BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A432839C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4328488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4328634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43286C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A432884C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43288E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL ___ZL19_passesWithCardType17PKPaymentCardTypeP34MapsSuggestionsRealWalletConnector_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "cardType") == *(_QWORD *)(a1 + 32);
}

void ___ZNK3MSg5Queue5asyncI21MapsSuggestionsWalletEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4328A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A432954C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A43299D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1A432A920(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A432B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  id *v27;
  uint64_t v28;

  objc_destroyWeak(v27);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

uint64_t isFinanceSourceEnabled()
{
  uint64_t result;

  result = +[MapsSuggestionsFinanceSource isEnabled](_TtC15MapsSuggestions28MapsSuggestionsFinanceSource, "isEnabled");
  if ((_DWORD)result)
    return MapsFeature_IsEnabled_OrderPickup();
  return result;
}

id financeSourceFromResourceDepot(void *a1)
{
  id v1;
  _TtC15MapsSuggestions28MapsSuggestionsFinanceSource *v2;
  void *v3;
  id v4;

  v1 = a1;
  v2 = [_TtC15MapsSuggestions28MapsSuggestionsFinanceSource alloc];
  +[MapsSuggestionsFinanceSource description](_TtC15MapsSuggestions28MapsSuggestionsFinanceSource, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[MapsSuggestionsFinanceSource initFromResourceDepot:name:](v2, "initFromResourceDepot:name:", v1, v3);

  return v4;
}

void sub_1A432DA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A432DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  _Unwind_Resume(a1);
}

void sub_1A432DEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A432E018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A432ED8C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A432FBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1A433006C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4330C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A4331084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A43314F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A433181C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1A4331A20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4331C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4331E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4331F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MapsSuggestionsCompositeSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A433247C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43326E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4332984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4332AD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4332FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A43331C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43334FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4333B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4333E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433405C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4334310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43344F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43347A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433498C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4334CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4334F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433508C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4335290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL20_maxUpdateTimeInNSecv_block_invoke()
{
  uint64_t result;
  double v1;

  result = GEOConfigGetDouble();
  qword_1ED22EE50 = 1000000000 * (unint64_t)v1;
  return result;
}

uint64_t ___ZNK3MSg5Queue4syncI18MSgCallbackPromiseEET_U13block_pointerFS3_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void ___ZNK3MSg5Queue4syncIU8__strongP11objc_objectEET_U13block_pointerFS5_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZNK3MSg5Queue4syncIU8__strongP6NSDateEET_U13block_pointerFS5_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

BOOL MapsSuggestionsIsShortcutEntry(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  NSObject *v4;
  const char *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = 0;
    switch(objc_msgSend(v1, "type"))
    {
      case 0:
      case 6:
      case 7:
      case 9:
      case 10:
      case 20:
      case 21:
        goto LABEL_10;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 23:
      case 24:
        if (!objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsShortcutPositionKey")))
          goto LABEL_9;
        v3 = objc_msgSend(v2, "integerForKey:", CFSTR("MapsSuggestionsShortcutPositionKey")) >= 0;
        goto LABEL_10;
      case 18:
        if ((objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsShortcutPositionKey")) & 1) != 0)
          goto LABEL_17;
        GEOFindOrCreateLog();
        v4 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          goto LABEL_8;
        v7 = 136446978;
        v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
        v9 = 1024;
        v10 = 262;
        v11 = 2082;
        v12 = "BOOL MapsSuggestionsIsShortcutEntry(MapsSuggestionsEntry *__strong _Nonnull)";
        v13 = 2082;
        v14 = "! [entry containsKey:MapsSuggestionsShortcutPositionKey]";
        v5 = "At %{public}s:%d, %{public}s forbids: %{public}s. EntryTypeUserPlace without a shortcut position is programmer error!";
        break;
      case 22:
        if ((objc_msgSend(v2, "containsKey:", CFSTR("MapsSuggestionsShortcutPositionKey")) & 1) != 0)
        {
LABEL_17:
          v3 = 1;
          goto LABEL_10;
        }
        GEOFindOrCreateLog();
        v4 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          goto LABEL_8;
        v7 = 136446978;
        v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
        v9 = 1024;
        v10 = 258;
        v11 = 2082;
        v12 = "BOOL MapsSuggestionsIsShortcutEntry(MapsSuggestionsEntry *__strong _Nonnull)";
        v13 = 2082;
        v14 = "! [entry containsKey:MapsSuggestionsShortcutPositionKey]";
        v5 = "At %{public}s:%d, %{public}s forbids: %{public}s. EntryTypeFavoriteButton without a shortcut position is programmer error!";
        break;
      default:
        GEOFindOrCreateLog();
        v4 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          goto LABEL_8;
        v7 = 136446978;
        v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
        v9 = 1024;
        v10 = 291;
        v11 = 2082;
        v12 = "BOOL MapsSuggestionsIsShortcutEntry(MapsSuggestionsEntry *__strong _Nonnull)";
        v13 = 2082;
        v14 = "YES";
        v5 = "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsEntryType!";
        break;
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    v7 = 136446978;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
    v9 = 1024;
    v10 = 242;
    v11 = 2082;
    v12 = "BOOL MapsSuggestionsIsShortcutEntry(MapsSuggestionsEntry *__strong _Nonnull)";
    v13 = 2082;
    v14 = "nil == (entry)";
    v5 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry";
  }
  _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v7, 0x26u);
LABEL_8:

LABEL_9:
  v3 = 0;
LABEL_10:

  return v3;
}

uint64_t MapsSuggestionsEntryTypeCouldBeShortcut(unint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 0x19)
    return (0x4C0006u >> a1) & 1;
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
    v5 = 1024;
    v6 = 81;
    v7 = 2082;
    v8 = "BOOL MapsSuggestionsEntryTypeCouldBeShortcut(MapsSuggestionsEntryType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsEntryType!", (uint8_t *)&v3, 0x26u);
  }

  return 0;
}

uint64_t MapsSuggestionsEntryTypeFromShortcutType(unint64_t a1)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 7 && ((0x6Fu >> a1) & 1) != 0)
    return qword_1A43B34C8[a1];
  GEOFindOrCreateLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
    v5 = 1024;
    v6 = 102;
    v7 = 2082;
    v8 = "MapsSuggestionsEntryType MapsSuggestionsEntryTypeFromShortcutType(MapsSuggestionsShortcutType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v1, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v3, 0x26u);
  }

  return 0;
}

uint64_t MapsSuggestionsShortcutTypeFromEntryType(unint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 0x19)
    return qword_1A43B3500[a1];
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
    v5 = 1024;
    v6 = 149;
    v7 = 2082;
    v8 = "MapsSuggestionsShortcutType MapsSuggestionsShortcutTypeFromEntryType(MapsSuggestionsEntryType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsEntryType!", (uint8_t *)&v3, 0x26u);
  }

  return 0;
}

MapsSuggestionsEntry *MapsSuggestionsEntryFromShortcut(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  MapsSuggestionsEntry *v7;
  void *v8;
  MapsSuggestionsEntry *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  void *v29;
  double v30;
  _BOOL8 v31;
  uint64_t v32;
  MapsSuggestionsEntry *v33;
  MapsSuggestionsEntry *v34;
  void *v35;
  _BYTE v37[12];
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "isSetupPlaceholder");
    v6 = MapsSuggestionsEntryTypeFromShortcutType(objc_msgSend(v4, "type"));
    v7 = [MapsSuggestionsEntry alloc];
    objc_msgSend(v4, "title");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[MapsSuggestionsEntry initWithType:title:](v7, "initWithType:title:", v6, v8);

    objc_msgSend(v4, "title");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry undecoratedTitle](v9, "undecoratedTitle");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v10, "isEqualToString:", v11);

    if ((v12 & 1) == 0)
    {
      objc_msgSend(v4, "title");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[MapsSuggestionsEntry setUndecoratedTitle:](v9, "setUndecoratedTitle:", v13);

    }
    objc_msgSend(v4, "subtitle");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "length");

    if (v15)
    {
      if ((v5 & 1) != 0)
      {
        MapsSuggestionsShortcutSetupStringForType(objc_msgSend(v4, "type"), 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[MapsSuggestionsEntry setUndecoratedSubtitle:](v9, "setUndecoratedSubtitle:", v16);

      }
      else
      {
        -[MapsSuggestionsEntry setUndecoratedSubtitle:](v9, "setUndecoratedSubtitle:", CFSTR(" "));
      }
    }
    MapsSuggestionsNowWithOffset(86400.0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry setExpires:](v9, "setExpires:", v18);

    -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", CFSTR("MapsSuggestionsUserPlacePK"), CFSTR("MapsSuggestionsPrimaryKey"));
    objc_msgSend(v4, "identifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", v19, CFSTR("MapsSuggestionsUserPlacePK"));

    -[MapsSuggestionsEntry setInteger:forKey:](v9, "setInteger:forKey:", a2, CFSTR("MapsSuggestionsShortcutPositionKey"));
    -[MapsSuggestionsEntry setBoolean:forKey:](v9, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsShortcutOnlyKey"));
    -[MapsSuggestionsEntry setBoolean:forKey:](v9, "setBoolean:forKey:", v5, CFSTR("MapsSuggestionsShortcutSetupKey"));
    objc_msgSend(v4, "customName");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", v20, CFSTR("MapsSuggestionsCoreRoutineCustomLabel"));

    objc_msgSend(v4, "contacts");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry setContacts:](v9, "setContacts:", v21);

    GEOConfigGetDouble();
    -[MapsSuggestionsEntry setWeight:](v9, "setWeight:");
    objc_msgSend(v4, "title");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", v22, CFSTR("MapsSuggestionsEntryTitleNameKey"));

    -[MapsSuggestionsEntry setInteger:forKey:](v9, "setInteger:forKey:", a2, CFSTR("MapsSuggestionsOriginalPositionKey"));
    objc_msgSend(v4, "geoMapItem");
    v17 = objc_claimAutoreleasedReturnValue();
    if (!v17)
      goto LABEL_26;
    -[MapsSuggestionsEntry setGeoMapItem:](v9, "setGeoMapItem:", v17);
    -[NSObject coordinate](v17, "coordinate");
    if (v24 >= -180.0 && v24 <= 180.0 && v23 >= -90.0 && v23 <= 90.0)
    {
      v25 = (void *)MEMORY[0x1E0CB37E8];
      -[NSObject coordinate](v17, "coordinate");
      objc_msgSend(v25, "numberWithDouble:");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[MapsSuggestionsEntry setNumber:forKey:](v9, "setNumber:forKey:", v26, CFSTR("MapsSuggestionsLatitudeKey"));

      v27 = (void *)MEMORY[0x1E0CB37E8];
      -[NSObject coordinate](v17, "coordinate");
      objc_msgSend(v27, "numberWithDouble:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[MapsSuggestionsEntry setNumber:forKey:](v9, "setNumber:forKey:", v29, CFSTR("MapsSuggestionsLongitudeKey"));

      *(_QWORD *)v37 = 0;
      if (MapsSuggestionsDistanceFromHereToMapItem(v17, v37))
      {
        GEOConfigGetDouble();
        v31 = *(double *)v37 < v30;
      }
      else
      {
        v31 = 0;
      }
      -[MapsSuggestionsEntry setBoolean:forKey:](v9, "setBoolean:forKey:", v31, CFSTR("MapsSuggestionsAlreadyThereKey"));
    }
    -[MapsSuggestionsEntry setInteger:forKey:](v9, "setInteger:forKey:", 6, CFSTR("MapsSuggestionsGEOMapItemOriginKey"));
    v32 = objc_msgSend(v4, "type");
    v33 = v9;
    v34 = v33;
    if ((unint64_t)(v32 - 2) < 2)
      goto LABEL_23;
    if (v32 == 1)
    {
      -[MapsSuggestionsEntry setBoolean:forKey:](v33, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsNeedsDistanceTrackingKey"));
      -[MapsSuggestionsEntry setNumber:forKey:](v34, "setNumber:forKey:", 0, CFSTR("MapsSuggestionsNeedsETATrackingKey"));
      goto LABEL_25;
    }
    if (v32 == 5)
    {
LABEL_23:
      -[MapsSuggestionsEntry setBoolean:forKey:](v33, "setBoolean:forKey:", 1, CFSTR("MapsSuggestionsNeedsDistanceTrackingKey"));
      -[MapsSuggestionsEntry setBoolean:forKey:](v34, "setBoolean:forKey:", 0, CFSTR("MapsSuggestionsNeedsETATrackingKey"));
    }
LABEL_25:

LABEL_26:
    if (v6 == 22)
    {
      -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", CFSTR("MapsSuggestionsFavoriteButtonPK"), CFSTR("MapsSuggestionsPrimaryKey"));
      objc_msgSend(v4, "identifier");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      -[MapsSuggestionsEntry setString:forKey:](v9, "setString:forKey:", v35, CFSTR("MapsSuggestionsFavoriteButtonPK"));

    }
    goto LABEL_28;
  }
  GEOFindOrCreateLog();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v37 = 136446978;
    *(_QWORD *)&v37[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsEntry+Shortcut.m";
    v38 = 1024;
    v39 = 186;
    v40 = 2082;
    v41 = "MapsSuggestionsEntry * _Nullable MapsSuggestionsEntryFromShortcut(MapsSuggestionsShortcut *__strong _Nonnull, NSUInteger)";
    v42 = 2082;
    v43 = "nil == (shortcut)";
    _os_log_impl(&dword_1A427D000, v17, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a shortcut", v37, 0x26u);
  }
  v9 = 0;
LABEL_28:

  return v9;
}

uint64_t MapsSuggestionsEntryIsNearbyTransit(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "type") == 22)
  {
    objc_msgSend(v1, "uniqueIdentifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("NearbyTransit"));

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_1A4337654(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A4337CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A4338544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsDistanceString()
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "_navigation_localizedStringForDistance:context:extraDetail:", 2, 1);
}

void sub_1A4339108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4339F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A433A180(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A433A2FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A433A480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A433B544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433B688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A433CD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void ___firstLineOfString_block_invoke_0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

void sub_1A433E09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A433E814(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1A433EF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A433F1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A433F51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A433F658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A433F810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A433F9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A433FBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A433FDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A433FF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43402B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4340560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A4340724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43407C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A4341C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A4342228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1A4342B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A4342E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A43433C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A4343530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4343648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4343760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43438B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4343A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4343F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434415C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4344370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4344630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43448BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4344A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4344C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4344DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4344F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43451FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A4345348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43455D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4345718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A4346034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A434628C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43463E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43466F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43469A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4346AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4346D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A4346EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4347058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A43471A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434720C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4347B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A4347DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4347EFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED22EE60)
  {
    qword_1ED22EE60 = _sl_dlopen();
    if (!qword_1ED22EE60)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CARSessionStatus");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_1_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A4348340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A434841C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A4348490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4348520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4348810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4348B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4348C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4348F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A434918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A43493B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43495B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4349690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI24MapsSuggestionsObserversEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4349798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4349DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v21 - 144));

  _Unwind_Resume(a1);
}

void `anonymous namespace'::_Config::~_Config(id *this)
{

}

{

}

void `anonymous namespace'::_State::~_State(id *this)
{

}

{

}

void sub_1A434A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)MapsSuggestionsActionCircuit;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A434A368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsActionCircuit>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI28MapsSuggestionsActionCircuitEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsActionCircuit]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A434A528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A434A724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A434A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A434A924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A434AB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A434ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  id *v22;
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);

  objc_destroyWeak(v22);
  objc_destroyWeak((id *)(v24 - 88));

  _Unwind_Resume(a1);
}

void sub_1A434AFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434B0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434B274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A434B8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A434BAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434BC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MSg::Queue::syncIfDifferent<NSDictionary<NSString *,objc_object  {objcproto22MapsSuggestionsAnyJSON}*> * {__strong}>(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  void (**v5)(_QWORD);
  const char *label;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  void (**v18)(_QWORD);
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v3 = a2;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__13;
  v24 = __Block_byref_object_dispose__13;
  v25 = 0;
  v4 = *a1;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___ZNK3MSg5Queue15syncIfDifferentIU8__strongP12NSDictionaryIP8NSStringPU33objcproto22MapsSuggestionsAnyJSON11objc_objectEEET_U13block_pointerFSA_vE_block_invoke;
  v17[3] = &unk_1E4BCDE48;
  v19 = &v20;
  v5 = (void (**)(_QWORD))v3;
  v18 = v5;
  label = dispatch_queue_get_label(v4);
  v7 = dispatch_queue_get_label(0);
  if (label == v7)
  {
    v12 = (void *)MEMORY[0x1A859CDD8](v7, v8, v9, v10);
    v5[2](v5);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v21[5];
    v21[5] = v13;

    objc_autoreleasePoolPop(v12);
    v11 = v5;
  }
  else
  {
    dispatch_sync(v4, v17);
    v11 = v18;
  }
  v15 = (id)v21[5];

  _Block_object_dispose(&v20, 8);
  return v15;
}

void sub_1A434BDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A434C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  id v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, id);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI28MapsSuggestionsActionCircuitEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A434C5FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void ___ZNK3MSg5Queue15syncIfDifferentIU8__strongP12NSDictionaryIP8NSStringPU33objcproto22MapsSuggestionsAnyJSON11objc_objectEEET_U13block_pointerFSA_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1A434C878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsSignalPackFromData(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  char *v6;
  id v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v8 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v1, &v8);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v8;
    if (v3 || !v2)
    {
      GEOFindOrCreateLog();
      v5 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        -[NSObject localizedDescription](v3, "localizedDescription");
        v6 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v10 = v6;
        _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "Error decoding MapsSuggestionsSignalPack: %@", buf, 0xCu);

      }
      v4 = 0;
    }
    else
    {
      v4 = v2;
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v10 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignalPack.mm";
      v11 = 1024;
      v12 = 270;
      v13 = 2082;
      v14 = "MapsSuggestionsSignalPack *MapsSuggestionsSignalPackFromData(NSData *__strong _Nonnull)";
      v15 = 2082;
      v16 = "nil == (data)";
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires data", buf, 0x26u);
    }
    v4 = 0;
  }

  return v4;
}

void sub_1A434CAE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A434CFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

id NSDataFromMapsSuggestionsSignalPack(void *a1)
{
  char *v1;
  void *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignalPack.mm";
      v10 = 1024;
      v11 = 257;
      v12 = 2082;
      v13 = "NSData *NSDataFromMapsSuggestionsSignalPack(MapsSuggestionsSignalPack *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (signalPack)";
      v4 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires signal pack";
      v5 = v3;
      v6 = 38;
      goto LABEL_7;
    }
LABEL_8:

    v2 = 0;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v1;
      v4 = "Error archiving signal pack %@";
      v5 = v3;
      v6 = 12;
LABEL_7:
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v8, v6);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

  return v2;
}

void sub_1A434DF88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A434E570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A434E68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434E740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434E80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434E8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A434E920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsMutableSignalPackFromData(void *a1)
{
  void *v1;
  void *v2;

  MapsSuggestionsSignalPackFromData(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "mutableCopy");

  return v2;
}

void sub_1A434E9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (_QWORD *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && v28[2] == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::find<MapsSuggestionsSignalType>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (a2 >= v2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (a2 == v7)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= v2)
            v7 %= v2;
        }
        else
        {
          v7 &= v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,std::vector<float>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__deallocate_node(*(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__erase_unique<MapsSuggestionsSignalType>(_QWORD *a1, id a2)
{
  unint64_t v2;
  uint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  id *v7;
  id *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id *v13;
  id *v14;
  id **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v2 = a1[1];
  if (!v2)
    return 0;
  v4 = a2;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (a2 >= v2)
      v6 = a2 % v2;
  }
  else
  {
    v6 = ((_DWORD)v2 - 1) & a2;
  }
  v7 = *(id **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  v8 = (id *)*v7;
  if (!*v7)
    return 0;
  v9 = v2 - 1;
  while (1)
  {
    v10 = (unint64_t)v8[1];
    if (v10 == v4)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v10 >= v2)
        v10 %= v2;
    }
    else
    {
      v10 &= v9;
    }
    if (v10 != v6)
      return 0;
LABEL_17:
    v8 = (id *)*v8;
    if (!v8)
      return 0;
  }
  if (v8[2] != a2)
    goto LABEL_17;
  v13 = (id *)*v8;
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= v2)
      v10 %= v2;
  }
  else
  {
    v10 &= v9;
  }
  v14 = *(id **)(*a1 + 8 * v10);
  do
  {
    v15 = (id **)v14;
    v14 = (id *)*v14;
  }
  while (v14 != v8);
  if (v15 == a1 + 2)
    goto LABEL_37;
  v16 = (unint64_t)v15[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v16 >= v2)
      v16 %= v2;
  }
  else
  {
    v16 &= v9;
  }
  if (v16 == v10)
  {
LABEL_39:
    if (v13)
    {
      v17 = (unint64_t)v13[1];
      goto LABEL_41;
    }
  }
  else
  {
LABEL_37:
    if (!v13)
      goto LABEL_38;
    v17 = (unint64_t)v13[1];
    if (v5.u32[0] > 1uLL)
    {
      v18 = (unint64_t)v13[1];
      if (v17 >= v2)
        v18 = v17 % v2;
    }
    else
    {
      v18 = v17 & v9;
    }
    if (v18 != v10)
    {
LABEL_38:
      *(_QWORD *)(*a1 + 8 * v10) = 0;
      v13 = (id *)*v8;
      goto LABEL_39;
    }
LABEL_41:
    if (v5.u32[0] > 1uLL)
    {
      if (v17 >= v2)
        v17 %= v2;
    }
    else
    {
      v17 &= v9;
    }
    if (v17 != v10)
    {
      *(_QWORD *)(*a1 + 8 * v17) = v15;
      v13 = (id *)*v8;
    }
  }
  *v15 = v13;
  *v8 = 0;
  --a1[3];
  v11 = 1;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,void *>>>::operator()[abi:ne180100](1, v8);
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__emplace_unique_key_args<MapsSuggestionsSignalType,std::piecewise_construct_t const&,std::tuple<MapsSuggestionsSignalType const&>,std::tuple<>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (a2 >= v7)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::__unordered_map_hasher<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::hash<MapsSuggestionsSignalType>,std::equal_to<MapsSuggestionsSignalType>,true>,std::__unordered_map_equal<MapsSuggestionsSignalType,std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,std::equal_to<MapsSuggestionsSignalType>,std::hash<MapsSuggestionsSignalType>,true>,std::allocator<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A434F6A8(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType,MSg::Signal>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t MSg::fromData<unsigned char>(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  if (objc_msgSend(v3, "length") >= (unint64_t)(*a2 + 1))
  {
    v5 = objc_msgSend(objc_retainAutorelease(v3), "bytes");
    v6 = (*a2)++;
    v4 = *(unsigned __int8 *)(v5 + v6);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1A434F724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MSg::fromData<unsigned int>(void *a1, uint64_t *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  if (objc_msgSend(v3, "length") >= (unint64_t)(*a2 + 4))
  {
    v5 = objc_msgSend(objc_retainAutorelease(v3), "bytes");
    v6 = *a2;
    *a2 += 4;
    v4 = bswap32(*(_DWORD *)(v5 + v6));
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1A434F7A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::fromData<NSDate * {__strong}>(void *a1, uint64_t *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  objc_class *v6;
  double v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v3 = a1;
  v4 = objc_msgSend(v3, "length");
  v5 = *a2;
  v6 = (objc_class *)objc_opt_class();
  v7 = 0.0;
  if (v4 >= class_getInstanceSize(v6) + v5)
  {
    v8 = v3;
    if (objc_msgSend(v8, "length") >= (unint64_t)(*a2 + 8))
    {
      v9 = v8;
      if (objc_msgSend(v9, "length") >= (unint64_t)(*a2 + 8))
      {
        v10 = objc_msgSend(objc_retainAutorelease(v9), "bytes");
        v11 = *a2;
        *a2 += 8;
        v7 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v10 + v11)));
      }

    }
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1A434F89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id MSg::toData<unsigned char>(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "appendBytes:length:", a2, 1);
  return v3;
}

void sub_1A434F8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::toData<unsigned int>(void *a1, unsigned int *a2)
{
  id v3;
  unsigned int v5;

  v3 = a1;
  v5 = bswap32(*a2);
  objc_msgSend(v3, "appendBytes:length:", &v5, 4);
  return v3;
}

void sub_1A434F954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::toData<NSDate * {__strong}>(void *a1, id *a2)
{
  id v3;
  unint64_t v4;
  unint64_t v6;

  v3 = a1;
  objc_msgSend(*a2, "timeIntervalSince1970");
  v6 = bswap64(v4);
  objc_msgSend(v3, "appendBytes:length:", &v6, 8);
  return v3;
}

void sub_1A434F9B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A434FFF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A43502A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4350330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4350398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A43503EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A435054C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A43507B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4350AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4350B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4350C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A4350DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MapsSuggestionsDispatchSyncIfDifferent(NSObject *a1, void *a2)
{
  const char *label;
  void *v4;
  void (**block)(void);

  block = a2;
  label = dispatch_queue_get_label(a1);
  if (label == dispatch_queue_get_label(0))
  {
    v4 = (void *)MEMORY[0x1A859CDD8]();
    block[2]();
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    dispatch_sync(a1, block);
  }

}

void sub_1A4350E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::default_delete<MSg::Queue>::operator()[abi:ne180100](id *a1)
{

  JUMPOUT(0x1A859CACCLL);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void ___ZNK3MSg5Queue15syncIfDifferentIU8__strongP11objc_objectEET_U13block_pointerFS5_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t ___ZNK3MSg5Queue15syncIfDifferentIbEET_U13block_pointerFS2_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t shortcutTypeForRTLOIType(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 + 1) < 5)
    return qword_1A43B3690[a1 + 1];
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsRoutine.mm";
    v5 = 1024;
    v6 = 77;
    v7 = 2082;
    v8 = "MapsSuggestionsShortcutType shortcutTypeForRTLOIType(RTLocationOfInterestType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Unsupported RTLocationOfInterestType detected", (uint8_t *)&v3, 0x26u);
  }

  return 0;
}

void sub_1A4351398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A43517C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MapsSuggestionsSawHomeOrWorkOnThisDevice()
{
  if (MapsSuggestionsSawHomeOrWorkOnThisDevice::s_onceToken != -1)
    dispatch_once(&MapsSuggestionsSawHomeOrWorkOnThisDevice::s_onceToken, &__block_literal_global_25);
}

void sub_1A4351A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4351ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43521E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *MapsSuggestionsRoutineLocalizedLabelLOIType(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  __CFString *v5;

  v3 = a2;
  if (objc_msgSend(v3, "length"))
  {
    v4 = (__CFString *)v3;
LABEL_3:
    v5 = v4;
  }
  else
  {
    switch(a1)
    {
      case 0:
        MapsSuggestionsLocalizedHomeString();
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_3;
      case 1:
        MapsSuggestionsLocalizedWorkString();
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_3;
      case 2:
        MapsSuggestionsLocalizedSchoolString();
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_3;
      case 3:
        MapsSuggestionsLocalizedGymString();
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_3;
      default:
        v5 = &stru_1E4BDFC28;
        break;
    }
  }

  return v5;
}

void sub_1A435248C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43527AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1A43544E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1A4354AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4354CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4354EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4355544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A43558F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4356370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location)
{
  void *v54;

  _Unwind_Resume(a1);
}

void sub_1A43567D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43569C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4356A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4356B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A4356FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{

  _Unwind_Resume(a1);
}

void sub_1A435751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A43576F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43578C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4357A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4358018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61)
{
  void *v61;
  uint64_t v62;

  objc_destroyWeak((id *)(v62 - 160));
  _Unwind_Resume(a1);
}

void sub_1A4358458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4358650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4358820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4358978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A4358C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  id *v26;
  void *v27;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A4358F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4359380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A43595A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4359920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  id *v26;
  void *v27;
  id *v28;
  void *v29;

  objc_destroyWeak(v28);
  objc_destroyWeak(v26);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4359C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A435A148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A435A2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A435A484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A435A6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1A435A92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A435AB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435AE0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A435B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435B2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A435B52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t MSg::Queue::sync<unsigned long>(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v4 = *a1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZNK3MSg5Queue4syncImEET_U13block_pointerFS2_vE_block_invoke;
  v8[3] = &unk_1E4BCDE48;
  v9 = v3;
  v10 = &v11;
  v5 = v3;
  dispatch_sync(v4, v8);
  v6 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1A435B990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A435BA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435BD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A435BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A435C19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__329(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__330(uint64_t a1)
{

}

void sub_1A435C3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A435C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose(&a32, 8);

  _Unwind_Resume(a1);
}

void sub_1A435C97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435CBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A435CCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A435D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id _findMatchingVisit(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v24;
  NSObject *obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v24 = v4;
  if (!v4)
  {
    GEOFindOrCreateLog();
    v19 = objc_claimAutoreleasedReturnValue();
    obj = v19;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v19, OS_LOG_TYPE_ERROR, "Visits are nil", buf, 2u);
    }
    v5 = 0;
    goto LABEL_27;
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v4;
  v5 = (id)-[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v27;
LABEL_4:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v27 != v6)
        objc_enumerationMutation(obj);
      v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v7);
      objc_msgSend(v8, "placeInference");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "mapItem");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10 == 0;

      if (v11)
      {
        GEOFindOrCreateLog();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A427D000, v18, OS_LOG_TYPE_DEBUG, "LOI does not have a map item", buf, 2u);
        }

      }
      else
      {
        objc_msgSend(v9, "mapItem");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "muid");
        LODWORD(v13) = v13 == objc_msgSend(v3, "_muid");

        if ((_DWORD)v13)
        {
          GEOFindOrCreateLog();
          v20 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(v3, "name");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v31 = v21;
            _os_log_impl(&dword_1A427D000, v20, OS_LOG_TYPE_DEBUG, "Matching MUID Found for %@ in CR data", buf, 0xCu);

          }
          v5 = v8;

          break;
        }
        objc_msgSend(v9, "mapItem");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v15, "caseInsensitiveCompare:", v16) == 0;

        if (v17)
        {
          v5 = v8;

          if (!v5)
            goto LABEL_28;
          GEOFindOrCreateLog();
          obj = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(v3, "name");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v31 = v22;
            _os_log_impl(&dword_1A427D000, obj, OS_LOG_TYPE_DEBUG, "Matching Name Found for %@ in CR data", buf, 0xCu);

          }
          break;
        }
      }

      if (v5 == (id)++v7)
      {
        v5 = (id)-[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
        if (v5)
          goto LABEL_4;
        break;
      }
    }
  }
LABEL_27:

LABEL_28:
  return v5;
}

void sub_1A435DC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A435DF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A435DFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435E578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1A435E6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id *v14;
  void *v15;
  id *v16;
  void *v17;
  uint64_t v18;

  objc_destroyWeak(v16);
  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v18 - 72));
  _Unwind_Resume(a1);
}

void sub_1A435EA60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A435EC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A435ECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A435EE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A435EF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A435F22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A435F2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A435F6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A435FAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A435FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A435FFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4360150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4360540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4360968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4360E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A4361104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A43611BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A43615B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A4361804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_routineCanProduceUnknownEntriesv_block_invoke()
{
  uint64_t result;

  result = GEOConfigGetBOOL();
  _MergedGlobals_43 = result;
  return result;
}

void ___ZL18_firstLineOfStringP8NSString_block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

Class ___ZL27getMCProfileConnectionClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED22F078)
  {
    qword_1ED22F078 = _sl_dlopen();
    if (!qword_1ED22F078)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("MCProfileConnection");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ED22F070 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZNK3MSg5Queue4syncImEET_U13block_pointerFS2_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void ___ZNK3MSg5Queue5asyncI22MapsSuggestionsRoutineEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4361B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSStringFromMapsSuggestionsShortETA(double a1)
{
  void *v2;
  void *v3;

  if (_MergedGlobals_44 != -1)
    dispatch_once(&_MergedGlobals_44, &__block_literal_global_26);
  objc_msgSend((id)qword_1ED22F088, "stringFromTimeInterval:", ceil(a1 / 60.0) * 60.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR(","), &stru_1E4BDFC28);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t NSStringFromMapsSuggestionsAbbreviatedETA(double a1)
{
  if (qword_1ED22F090 != -1)
    dispatch_once(&qword_1ED22F090, &__block_literal_global_8);
  return objc_msgSend((id)qword_1ED22F098, "stringFromTimeInterval:", ceil(a1 / 60.0) * 60.0);
}

id appForBundleID(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = -[MapsSuggestionsRealAppProtectionApp _initWithBundleID:]([MapsSuggestionsRealAppProtectionApp alloc], "_initWithBundleID:", v1);

  return v2;
}

void sub_1A4362C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void ___firstLineOfString_block_invoke_1(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

void sub_1A43630C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A4363230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A43633DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A43634D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN3MSg26dispatch_sync_if_differentIbEET_PU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFS1_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN3MSg26dispatch_sync_if_differentImEET_PU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFS1_vE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1A43637E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A43638E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4363BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4363C9C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A4363DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4363F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4364118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4364260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4364540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A43646B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43648D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43649D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A4364CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A4364DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43650AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43651D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43653C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void ___ZNK3MSg5Queue4syncIU8__strongP10CLLocationEET_U13block_pointerFS5_vE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t MapsSuggestionsLoggingEnableVerbose(char a1)
{
  s_verbose = a1;
  return GEOConfigSetBOOL();
}

uint64_t MapsSuggestionsLoggingIsVerbose()
{
  if (MapsSuggestionsLoggingIsVerbose_s_onceToken != -1)
    dispatch_once(&MapsSuggestionsLoggingIsVerbose_s_onceToken, &__block_literal_global_29);
  return s_verbose;
}

void sub_1A4368CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id *v19;
  void *v20;
  id *v21;

  v21 = v19;
  objc_destroyWeak(v21);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4368F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A436932C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A4369474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  id *v16;
  void *v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4369C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v36 = v33;

  _Unwind_Resume(a1);
}

void sub_1A4369E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4369F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A436A0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A436A204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1A436A494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A436A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  void *v48;
  void *v49;

  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_1A436ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  _Unwind_Resume(a1);
}

void sub_1A436AF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A436B1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A436B3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A436B554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A436BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A436C270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A436C508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL18_firstLineOfStringP8NSString_block_invoke_0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id v7;

  v6 = a2;
  if (v6)
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v6 = v7;
    *a3 = 1;
  }

}

id MapsSuggestionsNow()
{
  id v0;
  void *v1;
  id v2;
  void *v3;

  v0 = (id)s_overriddenTime;
  v1 = v0;
  if (v0)
  {
    v2 = v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

id MapsSuggestionsFakeNow()
{
  return (id)s_overriddenTime;
}

uint64_t MapsSuggestionsRealNow()
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "date");
}

id MapsSuggestionsNowWithOffset(double a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc(MEMORY[0x1E0C99D68]);
  MapsSuggestionsNow();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithTimeInterval:sinceDate:", v3, a1);

  return v4;
}

id MapsSuggestionsTimeZone()
{
  id v0;
  void *v1;
  id v2;
  void *v3;

  v0 = (id)s_overriddenTimeZone;
  v1 = v0;
  if (v0)
  {
    v2 = v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

id MapsSuggestionsFakeTimeZone()
{
  return (id)s_overriddenTimeZone;
}

uint64_t MapsSuggestionsRealTimeZone()
{
  return objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
}

void MapsSuggestionsSetFakeTimeZone(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v5 = 138412290;
    v6 = v1;
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_DEBUG, "Overriding TimeZone to %@", (uint8_t *)&v5, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", v1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)s_overriddenTimeZone;
  s_overriddenTimeZone = v3;

}

void MapsSuggestionsSetFakeNow(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v5 = 138412290;
    v6 = v1;
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_DEBUG, "Overriding Now to %@", (uint8_t *)&v5, 0xCu);
  }

  v3 = objc_msgSend(v1, "copy");
  v4 = (void *)s_overriddenTime;
  s_overriddenTime = v3;

}

void MapsSuggestionsAdvanceNow(double a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)MEMORY[0x1E0C99D68];
  MapsSuggestionsNow();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateWithTimeInterval:sinceDate:", v4, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsSetFakeNow(v3);

}

double MapsSuggestionsSecondsTo(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    MapsSuggestionsNow();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "timeIntervalSinceDate:", v2);
    v4 = v3;

  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v9 = 1024;
      v10 = 76;
      v11 = 2082;
      v12 = "NSTimeInterval MapsSuggestionsSecondsTo(NSDate *__strong _Nonnull)";
      v13 = 2082;
      v14 = "nil == (timeInTheFuture)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v7, 0x26u);
    }

    v4 = 1.79769313e308;
  }

  return v4;
}

double MapsSuggestionsSecondsSince(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    MapsSuggestionsNow();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "timeIntervalSinceDate:", v1);
    v4 = v3;

  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v9 = 1024;
      v10 = 82;
      v11 = 2082;
      v12 = "NSTimeInterval MapsSuggestionsSecondsSince(NSDate *__strong _Nonnull)";
      v13 = 2082;
      v14 = "nil == (timeInThePast)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v7, 0x26u);
    }

    v4 = 1.79769313e308;
  }

  return v4;
}

BOOL MapsSuggestionsIsInThePast(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  _BOOL8 v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v10 = 1024;
      v11 = 88;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsIsInThePast(NSDate *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (time)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v8, 0x26u);
    }

    goto LABEL_7;
  }
  MapsSuggestionsNow();
  v2 = (id)objc_claimAutoreleasedReturnValue();

  if (v2 == v1)
  {
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  MapsSuggestionsNow();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "earlierDate:", v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4 == v1;

LABEL_8:
  return v5;
}

BOOL MapsSuggestionsIsInTheFuture(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  _BOOL8 v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v10 = 1024;
      v11 = 95;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsIsInTheFuture(NSDate *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (time)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v8, 0x26u);
    }

    goto LABEL_7;
  }
  MapsSuggestionsNow();
  v2 = (id)objc_claimAutoreleasedReturnValue();

  if (v2 == v1)
  {
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  MapsSuggestionsNow();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "laterDate:", v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4 == v1;

LABEL_8:
  return v5;
}

uint64_t MapsSuggestionsIsExactlyNow(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    MapsSuggestionsNow();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "isEqualToDate:", v2);

  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446978;
      v7 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v8 = 1024;
      v9 = 102;
      v10 = 2082;
      v11 = "BOOL MapsSuggestionsIsExactlyNow(NSDate *__strong _Nonnull)";
      v12 = 2082;
      v13 = "nil == (time)";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v6, 0x26u);
    }

    v3 = 0;
  }

  return v3;
}

BOOL MapsSuggestionsIsAboutNow(void *a1)
{
  id v1;
  void *v2;
  double v3;
  _BOOL8 v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    MapsSuggestionsNow();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "timeIntervalSinceDate:", v2);
    v4 = fabs(v3) < 1.0;

  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v9 = 1024;
      v10 = 108;
      v11 = 2082;
      v12 = "BOOL MapsSuggestionsIsAboutNow(NSDate *__strong _Nonnull)";
      v13 = 2082;
      v14 = "nil == (time)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a time", (uint8_t *)&v7, 0x26u);
    }

    v4 = 0;
  }

  return v4;
}

BOOL MapsSuggestionsIsAboutDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  double v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
    {
      objc_msgSend(v3, "timeIntervalSinceDate:", v4);
      v6 = fabs(v7) < 1.0;
    }
  }

  return v6;
}

id MapsSuggestionsShortDateFromDateAndTimeZone(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (qword_1ED22F0B8 != -1)
      dispatch_once(&qword_1ED22F0B8, &__block_literal_global_88);
    v5 = (id)qword_1ED22F0B0;
    v6 = v5;
    if (v4)
    {
      objc_msgSend(v5, "setTimeZone:", v4);
    }
    else
    {
      MapsSuggestionsTimeZone();
      v8 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setTimeZone:", v8);

      v6 = (void *)v8;
    }

    if (qword_1ED22F0B8 != -1)
      dispatch_once(&qword_1ED22F0B8, &__block_literal_global_88);
    objc_msgSend((id)qword_1ED22F0B0, "stringFromDate:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id MapsSuggestionsDateFromString(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v1 = a1;
  if (v1)
  {
    if (qword_1ED22F0C8 != -1)
      dispatch_once(&qword_1ED22F0C8, &__block_literal_global_92);
    v2 = (id)qword_1ED22F0C0;
    objc_msgSend(v2, "dateFromString:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      v5 = v3;
    }
    else
    {
      if (qword_1ED22F0D8 != -1)
        dispatch_once(&qword_1ED22F0D8, &__block_literal_global_95);
      v6 = (id)qword_1ED22F0D0;
      objc_msgSend(v6, "dateFromString:", v1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        v5 = v7;
      }
      else
      {
        if (qword_1ED22F0E8 != -1)
          dispatch_once(&qword_1ED22F0E8, &__block_literal_global_98);
        v9 = (id)qword_1ED22F0E0;
        objc_msgSend(v9, "dateFromString:", v1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        if (v10)
        {
          v12 = v10;
        }
        else
        {
          if (qword_1ED22F0F8 != -1)
            dispatch_once(&qword_1ED22F0F8, &__block_literal_global_101_0);
          objc_msgSend((id)qword_1ED22F0F0, "dateFromString:", v1);
          v12 = (id)objc_claimAutoreleasedReturnValue();
        }
        v5 = v12;

      }
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id MapsSuggestionsStringFromDate(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (qword_1ED22F0F8 != -1)
      dispatch_once(&qword_1ED22F0F8, &__block_literal_global_101_0);
    objc_msgSend((id)qword_1ED22F0F0, "stringFromDate:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t MapsSuggestionsUnixTimestampFromDate(void *a1)
{
  double v1;

  objc_msgSend(a1, "timeIntervalSince1970");
  return (uint64_t)v1;
}

id NSStringFromMapsSuggestionsEventTime(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  MapsSuggestionsTimeZone();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromMapsSuggestionsEventTimeWithTimeZone(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id NSStringFromMapsSuggestionsEventTimeWithTimeZone(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  char v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (qword_1ED22F108 != -1)
      dispatch_once(&qword_1ED22F108, &__block_literal_global_104);
    v5 = (id)qword_1ED22F100;
    objc_msgSend(v5, "setTimeStyle:", 1);
    objc_msgSend(v5, "timeZone");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToTimeZone:", v4);

    if ((v7 & 1) == 0)
      objc_msgSend(v5, "setTimeZone:", v4);
    objc_msgSend(v5, "stringFromDate:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

double MapsSuggestionsTimeSinceMidnightOfDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    MapsSuggestionsTimeZone();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "componentsInTimeZone:fromDate:", v3, v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = objc_msgSend(v4, "hour");
    v6 = objc_msgSend(v4, "minute");
    v7 = (double)v6 * 60.0 + (double)v5 * 3600.0 + (double)objc_msgSend(v4, "second");

  }
  else
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v12 = 1024;
      v13 = 265;
      v14 = 2082;
      v15 = "NSTimeInterval MapsSuggestionsTimeSinceMidnightOfDate(NSDate *__strong _Nonnull)";
      v16 = 2082;
      v17 = "nil == (date)";
      _os_log_impl(&dword_1A427D000, v8, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a date", (uint8_t *)&v10, 0x26u);
    }

    v7 = 0.0;
  }

  return v7;
}

double MapsSuggestionsTimeSinceMidnight()
{
  void *v0;
  double v1;

  MapsSuggestionsNow();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = MapsSuggestionsTimeSinceMidnightOfDate(v0);

  return v1;
}

id MapsSuggestionsPreviousMidnight()
{
  double v0;

  v0 = MapsSuggestionsTimeSinceMidnight();
  return MapsSuggestionsNowWithOffset(-v0);
}

BOOL MapsSuggestionsIsToday(void *a1)
{
  id v1;
  double v2;
  void *v3;
  double v4;
  _BOOL8 v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = MapsSuggestionsTimeSinceMidnight();
    MapsSuggestionsNowWithOffset(-v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "timeIntervalSinceDate:", v3);
    v5 = v4 < 86400.0 && v4 >= 0.0;

  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v10 = 1024;
      v11 = 294;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsIsToday(NSDate *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (date)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a date", (uint8_t *)&v8, 0x26u);
    }

    v5 = 0;
  }

  return v5;
}

BOOL MapsSuggestionsIsTomorrow(void *a1)
{
  id v1;
  double v2;
  void *v3;
  double v4;
  _BOOL8 v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = MapsSuggestionsTimeSinceMidnight();
    MapsSuggestionsNowWithOffset(-v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "timeIntervalSinceDate:", v3);
    v5 = v4 < 172800.0 && v4 >= 86400.0;

  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTime.m";
      v10 = 1024;
      v11 = 304;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsIsTomorrow(NSDate *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (date)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a date", (uint8_t *)&v8, 0x26u);
    }

    v5 = 0;
  }

  return v5;
}

id MapsSuggestionsDateIntervalFormatter()
{
  void *v0;
  void *v1;
  char v2;
  id v3;

  if (qword_1ED22F0A8 != -1)
    dispatch_once(&qword_1ED22F0A8, &__block_literal_global_30);
  objc_msgSend(MEMORY[0x1E0C99E80], "defaultTimeZone");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)_MergedGlobals_45, "timeZone");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToTimeZone:", v0);

  if ((v2 & 1) == 0)
    objc_msgSend((id)_MergedGlobals_45, "setTimeZone:", v0);
  v3 = (id)_MergedGlobals_45;

  return v3;
}

id MapsSuggestionsDateRangeStringForDates(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  MapsSuggestionsDateIntervalFormatter();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeZone");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToTimeZone:", v7);

  if ((v10 & 1) == 0)
    objc_msgSend(v8, "setTimeZone:", v7);
  objc_msgSend(v8, "stringFromDate:toDate:", v5, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t ___dateFormatterForShortDateNoYearNoTime_block_invoke()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F0B0;
  qword_1ED22F0B0 = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ED22F0B0, "setLocale:", v2);

  objc_msgSend((id)qword_1ED22F0B0, "setTimeStyle:", 0);
  objc_msgSend((id)qword_1ED22F0B0, "setDateStyle:", 1);
  return objc_msgSend((id)qword_1ED22F0B0, "setLocalizedDateFormatFromTemplate:", CFSTR("dd MMM"));
}

void ___dateFormatterWithoutTimeZone_withTimeSeparator_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F0C0;
  qword_1ED22F0C0 = (uint64_t)v0;

  objc_msgSend((id)qword_1ED22F0C0, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss"));
  v2 = (void *)qword_1ED22F0C0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)qword_1ED22F0C0;
  MapsSuggestionsTimeZone();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

void ___dateFormatterWithTimeZone_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F0D0;
  qword_1ED22F0D0 = (uint64_t)v0;

  objc_msgSend((id)qword_1ED22F0D0, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ssZZZZZ"));
  v2 = (void *)qword_1ED22F0D0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)qword_1ED22F0D0;
  MapsSuggestionsTimeZone();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

void ___dateFormatterWithTimeZoneWithSpaces_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F0E0;
  qword_1ED22F0E0 = (uint64_t)v0;

  objc_msgSend((id)qword_1ED22F0E0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss Z"));
  v2 = (void *)qword_1ED22F0E0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)qword_1ED22F0E0;
  MapsSuggestionsTimeZone();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

void ___dateFormatter_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F0F0;
  qword_1ED22F0F0 = (uint64_t)v0;

  objc_msgSend((id)qword_1ED22F0F0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
  v2 = (void *)qword_1ED22F0F0;
  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)qword_1ED22F0F0;
  MapsSuggestionsTimeZone();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

void __staticDateFormatter_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED22F100;
  qword_1ED22F100 = v0;

  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ED22F100, "setLocale:", v2);

  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ED22F100, "setCalendar:", v3);

}

void sub_1A436E650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A436EA48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_1A436EC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  NSObject *v3;

  dispatch_group_leave(v3);

  _Unwind_Resume(a1);
}

void sub_1A436EE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  NSObject *v3;

  dispatch_group_leave(v3);

  _Unwind_Resume(a1);
}

void sub_1A436EEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A436F0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A436F2CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A436FC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A436FF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t isInChina()
{
  void *v0;
  void *v1;
  uint64_t v2;

  objc_msgSend(MEMORY[0x1E0D27008], "sharedConfiguration");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "countryCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("CN"));

  return v2;
}

uint64_t MapsSuggestionsSearchAirport(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v7)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v14 = 136446978;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
      v16 = 1024;
      v17 = 74;
      v18 = 2082;
      v19 = "BOOL MapsSuggestionsSearchAirport(NSString *__strong _Nonnull, __strong id<MapsSuggestionsNetworkRequester> "
            "_Nonnull, __strong MapsSuggestionsMapItemsHandler _Nonnull)";
      v20 = 2082;
      v21 = "nil == (completion)";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a completion handler";
LABEL_9:
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v14, 0x26u);
    }
LABEL_10:

    v11 = 0;
    goto LABEL_15;
  }
  if (!v5)
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v14 = 136446978;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
      v16 = 1024;
      v17 = 75;
      v18 = 2082;
      v19 = "BOOL MapsSuggestionsSearchAirport(NSString *__strong _Nonnull, __strong id<MapsSuggestionsNetworkRequester> "
            "_Nonnull, __strong MapsSuggestionsMapItemsHandler _Nonnull)";
      v20 = 2082;
      v21 = "nil == (airportCode)";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an airportCode";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (GEOConfigGetBOOL())
  {
    v8 = objc_msgSend(v6, "searchWithAirportCode:terminal:gate:completion:", v5, 0, 0, v7);
  }
  else
  {
    v12 = *MEMORY[0x1E0D26798];
    if (qword_1ED22F118 != -1)
      dispatch_once(&qword_1ED22F118, &__block_literal_global_31);
    v8 = objc_msgSend(v6, "searchPOIWithName:ofPOICategory:withinVenue:maxResults:completion:", v5, v12, 0, _MergedGlobals_46, v7);
  }
  v11 = v8;
LABEL_15:

  return v11;
}

uint64_t MapsSuggestionsSearchTerminal(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  _BYTE v34[14];
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v10)
  {
    GEOFindOrCreateLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v32 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
      v33 = 1024;
      *(_DWORD *)v34 = 97;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "BOOL MapsSuggestionsSearchTerminal(NSString *__strong _Nonnull, MapsSuggestionsEntry *__stron"
                           "g _Nonnull, __strong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsMa"
                           "pItemsHandler _Nonnull)";
      v35 = 2082;
      v36 = "nil == (completion)";
      v14 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a completion handler";
LABEL_9:
      v15 = v12;
      v16 = 38;
LABEL_10:
      _os_log_impl(&dword_1A427D000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
    }
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  if (!v7)
  {
    GEOFindOrCreateLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v32 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
      v33 = 1024;
      *(_DWORD *)v34 = 98;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "BOOL MapsSuggestionsSearchTerminal(NSString *__strong _Nonnull, MapsSuggestionsEntry *__stron"
                           "g _Nonnull, __strong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsMa"
                           "pItemsHandler _Nonnull)";
      v35 = 2082;
      v36 = "nil == (terminal)";
      v14 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an terminal";
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (GEOConfigGetBOOL())
  {
    objc_msgSend(v8, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureAirportCodeKey"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __MapsSuggestionsSearchTerminal_block_invoke;
    v27[3] = &unk_1E4BD10E8;
    v28 = v7;
    v29 = v11;
    v30 = v10;
    v12 = v11;
    v13 = objc_msgSend(v9, "searchWithAirportCode:terminal:gate:completion:", v12, v28, 0, v27);

    goto LABEL_12;
  }
  if ((objc_msgSend(v8, "containsKey:", CFSTR("MapsSuggestionsFlightTerminalSearchKey")) & 1) == 0)
  {
    GEOFindOrCreateLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    *(_WORD *)buf = 0;
    v14 = "Entry did not contain MapsSuggestionsFlightTerminalSearchKey. Cannot get Terminal mapItem";
    v15 = v12;
    v16 = 2;
    goto LABEL_10;
  }
  objc_msgSend(v8, "geoMapItem");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "_venueInfo");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "venueIdentifier");
  v12 = objc_claimAutoreleasedReturnValue();

  if (isInChina())
  {
    v20 = objc_msgSend(objc_alloc(MEMORY[0x1E0D276D8]), "initWithVenueID:", -[NSObject venueID](v12, "venueID"));

    v12 = v20;
  }
  objc_msgSend(v8, "geoMapItem");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = MapsSuggestionsMapItemIsTerminal(v21);

  if (v22)
  {
    v23 = objc_msgSend(objc_alloc(MEMORY[0x1E0D276D8]), "initWithVenueID:", -[NSObject venueID](v12, "venueID"));

    v12 = v23;
  }
  objc_msgSend(v8, "stringForKey:", CFSTR("MapsSuggestionsFlightTerminalSearchKey"));
  v24 = (char *)objc_claimAutoreleasedReturnValue();
  GEOFindOrCreateLog();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    v32 = v24;
    v33 = 2048;
    *(_QWORD *)v34 = -[NSObject venueID](v12, "venueID");
    _os_log_impl(&dword_1A427D000, v25, OS_LOG_TYPE_DEBUG, "terminalSearchString='%@' venueID=%llu", buf, 0x16u);
  }

  v26 = *MEMORY[0x1E0D267A8];
  if (qword_1ED22F118 != -1)
    dispatch_once(&qword_1ED22F118, &__block_literal_global_31);
  v13 = objc_msgSend(v9, "searchPOIWithName:ofPOICategory:withinVenue:maxResults:completion:", v24, v26, v12, _MergedGlobals_46, v10);

LABEL_12:
  return v13;
}

uint64_t MapsSuggestionsSearchGate(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD v23[4];
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  _BYTE v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v10)
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136446978;
    v29 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
    v30 = 1024;
    *(_DWORD *)v31 = 151;
    *(_WORD *)&v31[4] = 2082;
    *(_QWORD *)&v31[6] = "BOOL MapsSuggestionsSearchGate(NSString *__strong _Nonnull, MapsSuggestionsEntry *__strong _Non"
                         "null, __strong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsMapItemsHandler _Nonnull)";
    *(_WORD *)&v31[14] = 2082;
    *(_QWORD *)&v31[16] = "nil == (completion)";
    v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a completion handler";
LABEL_14:
    _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, v15, buf, 0x26u);
    goto LABEL_15;
  }
  if (!v7)
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136446978;
    v29 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
    v30 = 1024;
    *(_DWORD *)v31 = 152;
    *(_WORD *)&v31[4] = 2082;
    *(_QWORD *)&v31[6] = "BOOL MapsSuggestionsSearchGate(NSString *__strong _Nonnull, MapsSuggestionsEntry *__strong _Non"
                         "null, __strong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsMapItemsHandler _Nonnull)";
    *(_WORD *)&v31[14] = 2082;
    *(_QWORD *)&v31[16] = "nil == (gate)";
    v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an airportCode";
    goto LABEL_14;
  }
  if (!v8)
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v29 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsAirportRequest.m";
      v30 = 1024;
      *(_DWORD *)v31 = 153;
      *(_WORD *)&v31[4] = 2082;
      *(_QWORD *)&v31[6] = "BOOL MapsSuggestionsSearchGate(NSString *__strong _Nonnull, MapsSuggestionsEntry *__strong _N"
                           "onnull, __strong id<MapsSuggestionsNetworkRequester> _Nonnull, __strong MapsSuggestionsMapIte"
                           "msHandler _Nonnull)";
      *(_WORD *)&v31[14] = 2082;
      *(_QWORD *)&v31[16] = "nil == (entry)";
      v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a entry";
      goto LABEL_14;
    }
LABEL_15:
    v13 = 0;
    goto LABEL_31;
  }
  if (GEOConfigGetBOOL())
  {
    objc_msgSend(v8, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureAirportCodeKey"));
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      objc_msgSend(v8, "stringForKey:", CFSTR("MapsSuggestionsFlightTerminalSearchKey"));
      v12 = objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 3221225472;
        v23[2] = __MapsSuggestionsSearchGate_block_invoke;
        v23[3] = &unk_1E4BD1110;
        v24 = v7;
        v25 = v11;
        v26 = v12;
        v27 = v10;
        v13 = objc_msgSend(v9, "searchWithAirportCode:terminal:gate:completion:", v25, v26, v24, v23);

        v14 = v24;
      }
      else
      {
        GEOFindOrCreateLog();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A427D000, v14, OS_LOG_TYPE_ERROR, "Entry did not contain MapsSuggestionsFlightTerminalSearchKey. Cannot get Gate mapItem", buf, 2u);
        }
        v13 = 0;
      }

    }
    else
    {
      GEOFindOrCreateLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A427D000, v12, OS_LOG_TYPE_ERROR, "Entry did not contain MapsSuggestionsFlightDepartureAirportCodeKey. Cannot get Gate mapItem", buf, 2u);
      }
      v13 = 0;
    }
  }
  else
  {
    objc_msgSend(v8, "stringForKey:", CFSTR("MapsSuggestionsFlightDepartureGateKey"));
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "geoMapItem");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "_venueInfo");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "venueIdentifier");
    v12 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "geoMapItem");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v17) = MapsSuggestionsMapItemIsGate(v18);

    if ((_DWORD)v17)
    {
      v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0D276D8]), "initWithVenueID:", -[NSObject venueID](v12, "venueID"));

      v12 = v19;
    }
    GEOFindOrCreateLog();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      v29 = (const char *)v11;
      v30 = 2048;
      *(_QWORD *)v31 = -[NSObject venueID](v12, "venueID");
      *(_WORD *)&v31[8] = 2048;
      *(_QWORD *)&v31[10] = -[NSObject featureID](v12, "featureID");
      _os_log_impl(&dword_1A427D000, v20, OS_LOG_TYPE_DEBUG, "gateSearchString='%@' venueID=%llu featureID=%llu", buf, 0x20u);
    }

    v21 = *MEMORY[0x1E0D267A0];
    if (qword_1ED22F118 != -1)
      dispatch_once(&qword_1ED22F118, &__block_literal_global_31);
    v13 = objc_msgSend(v9, "searchPOIWithName:ofPOICategory:withinVenue:maxResults:completion:", v7, v21, v12, _MergedGlobals_46, v10);
  }

LABEL_31:
  return v13;
}

void sub_1A4372BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ParkedCarLocationNameForMapItem(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v5 = v4;
  }
  else
  {
    objc_msgSend(v3, "addressObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parkingDisplayName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v7, "length"))
      v8 = v7;
    else
      v8 = 0;
    v5 = v8;

  }
  return v5;
}

void sub_1A437484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4374A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A4374C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A437557C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437588C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437592C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MapsSuggestionsRoutineSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A4375E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A437600C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43763F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A4376674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsRoutineSource>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI28MapsSuggestionsRoutineSourceEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsRoutineSource]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A4376814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4376ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A4376CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI28MapsSuggestionsRoutineSourceEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A4376E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43771C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id MapsSuggestionsShortcutUniqueIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = a1;
  if (objc_msgSend(v1, "type") == 6)
  {
    objc_msgSend(v1, "customName");
    v2 = objc_claimAutoreleasedReturnValue();
LABEL_3:
    v3 = (void *)v2;
    goto LABEL_12;
  }
  if (objc_msgSend(v1, "isSetupPlaceholder"))
  {
    NSStringFromMapsSuggestionsShortcutType(objc_msgSend(v1, "type"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByAppendingString:", CFSTR("_Setup"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_12;
  }
  objc_msgSend(v1, "geoMapItem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "geoMapItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "coordinate");
    v7 = v6;
    v9 = v8;

    v3 = 0;
    if (v9 >= -180.0 && v9 <= 180.0 && v7 >= -90.0 && v7 <= 90.0)
    {
      v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%.5f,%.5f"), (double)(5 * ((int)(v7 * 100000.0) / 5)) / 100000.0, (double)(5 * ((int)(v9 * 100000.0) / 5)) / 100000.0);
      goto LABEL_3;
    }
  }
LABEL_12:

  return v3;
}

void sub_1A437753C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *MapsSuggestionsLocalizedTitleForShortcutType(uint64_t a1)
{
  __CFString *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 5:
      MapsSuggestionsLocalizedSchoolString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      MapsSuggestionsLocalizedWorkString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      MapsSuggestionsLocalizedHomeString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      GEOFindOrCreateLog();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v4 = 136446978;
        v5 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
        v6 = 1024;
        v7 = 678;
        v8 = 2082;
        v9 = "NSString * _Nonnull MapsSuggestionsLocalizedTitleForShortcutType(MapsSuggestionsShortcutType)";
        v10 = 2082;
        v11 = "YES";
        _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v4, 0x26u);
      }

      v1 = CFSTR("UnsupportedType");
      break;
  }
  return v1;
}

id MapsSuggestionsShortcutSetupStringForType(uint64_t a1, int a2)
{
  void *v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    MapsSuggestionsLocalizedAddShortcutString();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    switch(a1)
    {
      case 5:
        MapsSuggestionsLocalizedAddYourSchoolShortcutString();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        MapsSuggestionsLocalizedAddYourWorkShortcutString();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        MapsSuggestionsLocalizedAddYourHomeShortcutString();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      default:
        GEOFindOrCreateLog();
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          v5 = 136446978;
          v6 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
          v7 = 1024;
          v8 = 630;
          v9 = 2082;
          v10 = "NSString * _Nonnull MapsSuggestionsShortcutSetupStringForType(MapsSuggestionsShortcutType, BOOL)";
          v11 = 2082;
          v12 = "YES";
          _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. No such setupShortcut possible", (uint8_t *)&v5, 0x26u);
        }

        v2 = 0;
        break;
    }
  }
  return v2;
}

const __CFString *NSStringFromMapsSuggestionsShortcutType(unint64_t a1)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 7 && ((0x6Fu >> a1) & 1) != 0)
    return off_1E4BD1230[a1];
  GEOFindOrCreateLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
    v5 = 1024;
    v6 = 580;
    v7 = 2082;
    v8 = "NSString * _Nonnull NSStringFromMapsSuggestionsShortcutType(MapsSuggestionsShortcutType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v1, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v3, 0x26u);
  }

  return CFSTR("UnsupportedType");
}

id MapsSuggestionsShortcutIdentifierForStorage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v1 = a1;
  objc_msgSend(v1, "storageIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    objc_msgSend(v1, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
LABEL_12:
      objc_msgSend(v4, "dataUsingEncoding:", 4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_geo_SHA256Hash");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "subdataWithRange:", 0, 16);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_alloc(MEMORY[0x1E0CB3A28]);
      v14 = objc_retainAutorelease(v12);
      v3 = (void *)objc_msgSend(v13, "initWithUUIDBytes:", objc_msgSend(v14, "bytes"));

      goto LABEL_13;
    }
    v5 = v1;
    objc_msgSend(v5, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v5, "identifier");
      v7 = objc_claimAutoreleasedReturnValue();
LABEL_6:
      v4 = (void *)v7;
LABEL_11:

      goto LABEL_12;
    }
    if (objc_msgSend(v5, "isSetupPlaceholder"))
    {
      NSStringFromMapsSuggestionsShortcutType(objc_msgSend(v5, "type"));
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringByAppendingString:", CFSTR("_Setup"));
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_9:
      v4 = (void *)v9;
LABEL_10:

      goto LABEL_11;
    }
    objc_msgSend(v5, "originatingAddressString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(v5, "originatingAddressString");
      v7 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
    objc_msgSend(v5, "storageIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v5, "storageIdentifier");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
    objc_msgSend(v5, "geoMapItem");

    v8 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    objc_msgSend(v5, "customName");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v5, "customName");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "appendFormat:", CFSTR("'%@'="), v19);

    }
    objc_msgSend(v5, "geoMapItem");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "shortAddress");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = objc_msgSend(v21, "length");
    if (v21 && v22)
    {
      objc_msgSend(v8, "appendString:", v21);
    }
    else
    {
      objc_msgSend(v5, "geoMapItem");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "coordinate");
      v24 = v23;
      v26 = v25;

      if (v26 < -180.0 || v26 > 180.0 || v24 < -90.0 || v24 > 90.0)
        goto LABEL_29;
      objc_msgSend(v8, "appendFormat:", CFSTR("%.6f,%.6f"), *(_QWORD *)&v24, *(_QWORD *)&v26);
    }
    v4 = (void *)objc_msgSend(v8, "copy");
LABEL_29:

    goto LABEL_10;
  }
  objc_msgSend(v1, "storageIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v3;
}

id NSDataFromMapsSuggestionsShortcuts(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  BOOL v3;
  NSObject *v4;
  NSObject *v5;
  id v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v7);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v7;
    if (v2)
      v3 = 1;
    else
      v3 = v1 == 0;
    if (v3)
    {
      v5 = v2;
      GEOFindOrCreateLog();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v9 = (const char *)v5;
        _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "Error encoding MapsSuggestionsShortcuts: %@", buf, 0xCu);
      }

    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
      v10 = 1024;
      v11 = 586;
      v12 = 2082;
      v13 = "NSData * _Nullable NSDataFromMapsSuggestionsShortcuts(MapsSuggestionsShortcuts *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (shortcuts)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Shortcuts should not be nil", buf, 0x26u);
    }
    v1 = 0;
  }

  return v1;
}

id MapsSuggestionsShortcutsFromNSData(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99E60]);
    v3 = objc_opt_class();
    v4 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
    v9 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v4, v1, &v9);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (char *)v9;
    if (v6 || !v5)
    {
      GEOFindOrCreateLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v6;
        _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_ERROR, "Error decoding MapsSuggestionsShortcuts: %@", buf, 0xCu);
      }

    }
  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
      v12 = 1024;
      v13 = 602;
      v14 = 2082;
      v15 = "MapsSuggestionsShortcuts * _Nullable MapsSuggestionsShortcutsFromNSData(NSData *__strong _Nonnull)";
      v16 = 2082;
      v17 = "nil == (shortcutsData)";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. shortcutsData should not be nil", buf, 0x26u);
    }
    v5 = 0;
  }

  return v5;
}

id MapsSuggestionsSetupShortcutForType(uint64_t a1)
{
  id v1;

  v1 = -[MapsSuggestionsShortcut initSetupPlaceholderOfType:]([MapsSuggestionsShortcut alloc], "initSetupPlaceholderOfType:", a1);
  objc_msgSend(v1, "setDerivedFromMeCard:", 1);
  return v1;
}

__CFString *MapsSuggestionsLocalizedMyTitleForShortcutType(uint64_t a1)
{
  __CFString *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 5:
      MapsSuggestionsLocalizedMySchoolString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      MapsSuggestionsLocalizedMyWorkString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      MapsSuggestionsLocalizedMyHomeString();
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      GEOFindOrCreateLog();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v4 = 136446978;
        v5 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
        v6 = 1024;
        v7 = 658;
        v8 = 2082;
        v9 = "NSString * _Nonnull MapsSuggestionsLocalizedMyTitleForShortcutType(MapsSuggestionsShortcutType)";
        v10 = 2082;
        v11 = "YES";
        _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v4, 0x26u);
      }

      v1 = CFSTR("UnsupportedType");
      break;
  }
  return v1;
}

BOOL MapsSuggestionsShortcutCouldBeBackedPlaceholder(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;
  NSObject *v5;
  void *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
      v10 = 1024;
      v11 = 683;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsShortcutCouldBeBackedPlaceholder(MapsSuggestionsShortcut *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (shortcut)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a shortcut", (uint8_t *)&v8, 0x26u);
    }

    goto LABEL_8;
  }
  if (!MapsSuggestionsShortcutTypeCouldBeBackedPlaceholder(objc_msgSend(v1, "type")))
  {
LABEL_8:
    v4 = 0;
    goto LABEL_11;
  }
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    objc_msgSend(v2, "geoMapItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v6 != 0;

  }
LABEL_11:

  return v4;
}

uint64_t MapsSuggestionsShortcutTypeCouldBeBackedPlaceholder(unint64_t a1)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 7 && ((0x6Fu >> a1) & 1) != 0)
    return (0xCu >> a1) & 1;
  GEOFindOrCreateLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
    v5 = 1024;
    v6 = 709;
    v7 = 2082;
    v8 = "BOOL MapsSuggestionsShortcutTypeCouldBeBackedPlaceholder(MapsSuggestionsShortcutType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v1, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v3, 0x26u);
  }

  return 0;
}

uint64_t MapsSuggestionsShortcutIsComplete(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446978;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
      v12 = 1024;
      v13 = 714;
      v14 = 2082;
      v15 = "BOOL MapsSuggestionsShortcutIsComplete(MapsSuggestionsShortcut *__strong _Nonnull)";
      v16 = 2082;
      v17 = "nil == (shortcut)";
      v6 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a shortcut";
      v7 = v5;
      v8 = 38;
LABEL_9:
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, v8);
    }
LABEL_10:

    v4 = 0;
    goto LABEL_11;
  }
  if ((objc_msgSend(v1, "isSetupPlaceholder") & 1) == 0)
  {
    objc_msgSend(v2, "geoMapItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      GEOFindOrCreateLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v10 = 138412290;
        v11 = (const char *)v2;
        v6 = "Incomplete Shortcut detected: %@";
        v7 = v5;
        v8 = 12;
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  v4 = 1;
LABEL_11:

  return v4;
}

id MapsSuggestionsShortcutTypeStyleAttributes(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
    case 1:
    case 6:
      goto LABEL_7;
    case 2:
      objc_msgSend(MEMORY[0x1E0D270A8], "homeStyleAttributes");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0D270A8], "workStyleAttributes");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0D270A8], "schoolStyleAttributes");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      GEOFindOrCreateLog();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v4 = 136446978;
        v5 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsShortcut.m";
        v6 = 1024;
        v7 = 744;
        v8 = 2082;
        v9 = "GEOFeatureStyleAttributes * _Nonnull MapsSuggestionsShortcutTypeStyleAttributes(MapsSuggestionsShortcutType)";
        v10 = 2082;
        v11 = "YES";
        _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsShortcutType!", (uint8_t *)&v4, 0x26u);
      }

LABEL_7:
      objc_msgSend(MEMORY[0x1E0D270A8], "addressMarkerStyleAttributes");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
  }
  return v1;
}

void sub_1A4379F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id *v32;
  id *v33;

  objc_destroyWeak(v33);

  objc_destroyWeak(v32);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A437A3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  id *v19;
  void *v20;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A437A734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437A8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437A9B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437AA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437AB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437AD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::_Config::copy(_anonymous_namespace_::_Config *this, uint64_t a2)
{
  __int128 v4;
  uint64_t result;
  uint64_t v6;

  *(_QWORD *)this = objc_msgSend(*(id *)a2, "copy");
  *((_QWORD *)this + 1) = *(id *)(a2 + 8);
  *((_QWORD *)this + 2) = *(id *)(a2 + 16);
  *((_QWORD *)this + 3) = 0;
  v4 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)this + 3) = v4;
  *((_OWORD *)this + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)this + 10) = objc_msgSend(*(id *)(a2 + 80), "mutableCopy");
  *((_QWORD *)this + 11) = objc_msgSend(*(id *)(a2 + 88), "mutableCopy");
  result = objc_msgSend(*(id *)(a2 + 96), "mutableCopy");
  v6 = *(_QWORD *)(a2 + 104);
  *((_QWORD *)this + 12) = result;
  *((_QWORD *)this + 13) = v6;
  *((_BYTE *)this + 112) = *(_BYTE *)(a2 + 112);
  return result;
}

void sub_1A437B4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::_State::copy(_anonymous_namespace_::_State *this, id *a2)
{
  uint64_t result;

  *(_QWORD *)this = objc_msgSend(*a2, "copy");
  *((_QWORD *)this + 1) = objc_msgSend(a2[1], "copy");
  *((_QWORD *)this + 2) = objc_msgSend(a2[2], "copy");
  *((_QWORD *)this + 3) = objc_msgSend(a2[3], "copy");
  *((_QWORD *)this + 4) = a2[4];
  *((_QWORD *)this + 5) = a2[5];
  result = objc_msgSend(a2[6], "copy");
  *((_QWORD *)this + 6) = result;
  return result;
}

void sub_1A437B5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A437B730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437B8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437B9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437BA94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437BC0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437BD50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437BEA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437C024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437C140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437C2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437C480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437C5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437C728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437CA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437D000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{

  _Unwind_Resume(a1);
}

void sub_1A437D9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A437DE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437DFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437E110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437E244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437E360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsEngineRunner>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI27MapsSuggestionsEngineRunnerEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsEngineRunner]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A437E4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437E618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437E8E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437EA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A437EE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437F250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A437F3D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437F528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A437FA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{

  _Unwind_Resume(a1);
}

void sub_1A437FC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI27MapsSuggestionsEngineRunnerEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A437FD50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A437FEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43800E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43803A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL30_minVisitsForProposedShortcutsv_block_invoke()
{
  uint64_t result;

  result = GEOConfigGetInteger();
  _MergedGlobals_47 = result;
  return result;
}

uint64_t ___ZL27_maxAgeForProposedShortcutsv_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = GEOConfigGetDouble();
  qword_1ED22F130 = v1;
  return result;
}

uint64_t ___visitCountLimit_block_invoke()
{
  uint64_t result;

  result = GEOConfigGetInteger();
  qword_1ED22F148 = result;
  return result;
}

void sub_1A4380B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4380C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL MapsSuggestionsIsLocationAllowedForBundleID(void *a1)
{
  id v1;
  int v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  id v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(MEMORY[0x1E0C9E3C8], "authorizationStatusForBundleIdentifier:", v1);
  GEOFindOrCreateLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315650;
    v6 = "BOOL MapsSuggestionsIsLocationAllowedForBundleID(NSString *__strong _Nonnull)";
    v7 = 2112;
    v8 = v1;
    v9 = 1024;
    v10 = v2;
    _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_DEBUG, "%s for '%@'=%d", (uint8_t *)&v5, 0x1Cu);
  }

  return (v2 - 3) < 2;
}

id MapsSuggestionsCurrentBestLocation()
{
  id v0;
  id v1;

  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  v0 = (id)qword_1ED22F198;
  objc_sync_enter(v0);
  v1 = (id)qword_1ED22F158;
  objc_sync_exit(v0);

  return v1;
}

id MapsSuggestionsMostRecentLocation()
{
  id v0;
  id v1;

  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  v0 = (id)qword_1ED22F198;
  objc_sync_enter(v0);
  v1 = (id)qword_1ED22F160;
  objc_sync_exit(v0);

  return v1;
}

void MapsSuggestionsSetMostRecentLocation(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a1;
  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  v2 = (id)qword_1ED22F198;
  objc_sync_enter(v2);
  objc_storeStrong((id *)&qword_1ED22F160, a1);
  MapsSuggestionsBestLocation((void *)qword_1ED22F158, (void *)qword_1ED22F160);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED22F158;
  qword_1ED22F158 = v3;

  objc_sync_exit(v2);
}

void sub_1A4380F94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id MapsSuggestionsBestLocation(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;

  v3 = a1;
  v4 = a2;
  if (!MapsSuggestionsIsValidLocation(v3))
  {
    v32 = v4;
LABEL_25:
    v33 = v32;
    goto LABEL_30;
  }
  if (!MapsSuggestionsIsValidLocation(v4))
  {
    v32 = v3;
    goto LABEL_25;
  }
  MapsSuggestionsNow();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "timestamp");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "timeIntervalSinceDate:", v5);
  v8 = v7;

  objc_msgSend(v4, "timestamp");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "timeIntervalSinceDate:", v5);
  v11 = v10;

  if (qword_1ED22F168 != -1)
    dispatch_once(&qword_1ED22F168, &__block_literal_global_36);
  if (v8 <= v11
    || (objc_msgSend(v3, "horizontalAccuracy"), v13 = v12, objc_msgSend(v4, "horizontalAccuracy"), v14 = v3, v13 >= v15))
  {
    if (v8 >= v11
      || (objc_msgSend(v3, "horizontalAccuracy"), v17 = v16,
                                                  objc_msgSend(v4, "horizontalAccuracy"),
                                                  v14 = v4,
                                                  v17 <= v18))
    {
      if (v8 <= v11 || (v14 = v3, *(double *)&qword_1ED22F170 >= -v11))
      {
        if (v8 >= v11 || (v14 = v4, *(double *)&qword_1ED22F170 >= -v8))
        {
          objc_msgSend(v3, "distanceFromLocation:", v4, *(double *)&qword_1ED22F170);
          v20 = v19;
          objc_msgSend(v3, "horizontalAccuracy");
          v22 = v21;
          objc_msgSend(v4, "horizontalAccuracy");
          if (v8 <= v11 || v22 <= v23 || (objc_msgSend(v4, "horizontalAccuracy"), v14 = v4, v20 >= v24))
          {
            objc_msgSend(v3, "horizontalAccuracy");
            v26 = v25;
            objc_msgSend(v4, "horizontalAccuracy");
            if (v8 >= v11 || v26 >= v27 || (objc_msgSend(v3, "horizontalAccuracy"), v14 = v3, v20 >= v28))
            {
              if (vabdd_f64(v11, v8) >= *(double *)&qword_1ED22F178)
              {
                if (v8 <= v11)
                  v14 = v4;
                else
                  v14 = v3;
              }
              else
              {
                objc_msgSend(v3, "horizontalAccuracy");
                v30 = v29;
                objc_msgSend(v4, "horizontalAccuracy");
                if (v30 >= v31)
                  v14 = v4;
                else
                  v14 = v3;
              }
            }
          }
        }
      }
    }
  }
  v33 = v14;

LABEL_30:
  return v33;
}

void MapsSuggestionsSetInCoarseLocation(char a1)
{
  id obj;

  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  obj = (id)qword_1ED22F198;
  objc_sync_enter(obj);
  _MergedGlobals_49 = a1;
  objc_sync_exit(obj);

}

void MapsSuggestionsResetCurrentLocation()
{
  void *v0;
  void *v1;
  id obj;

  if (qword_1ED22F1A0 != -1)
    dispatch_once(&qword_1ED22F1A0, &__block_literal_global_122);
  obj = (id)qword_1ED22F198;
  objc_sync_enter(obj);
  v0 = (void *)qword_1ED22F160;
  qword_1ED22F160 = 0;

  v1 = (void *)qword_1ED22F158;
  qword_1ED22F158 = 0;

  objc_sync_exit(obj);
}

BOOL MapsSuggestionsIsValidLocation(void *a1)
{
  id v1;
  void *v2;
  double v3;
  _BOOL8 v4;
  CLLocationCoordinate2D v6;

  v1 = a1;
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "horizontalAccuracy"), v3 >= 0.0))
  {
    objc_msgSend(v2, "coordinate");
    v4 = CLLocationCoordinate2DIsValid(v6);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL MapsSuggestionsIsValidVisit(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  _BOOL8 v6;
  CLLocationCoordinate2D v8;

  v1 = a1;
  v2 = v1;
  if (v1
    && objc_msgSend(v1, "hasArrivalDate")
    && (objc_msgSend(MEMORY[0x1E0C99D68], "distantPast"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "arrivalDate"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        v3,
        v3 != v4)
    && (objc_msgSend(v2, "horizontalAccuracy"), v5 >= 0.0))
  {
    objc_msgSend(v2, "coordinate");
    v6 = CLLocationCoordinate2DIsValid(v8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

BOOL MapsSuggestionsAlmostSameLocationDegree(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 0.000001;
}

BOOL MapsSuggestionsAlmostSameCoordinate(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = vabdd_f64(a1, a3) < 0.000001;
  return vabdd_f64(a2, a4) < 0.000001 && v4;
}

uint64_t MapsSuggestionsAlmostSameLocation(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
    {
      objc_msgSend(v3, "coordinate");
      v8 = v7;
      v10 = v9;
      objc_msgSend(v5, "coordinate");
      v12 = vabdd_f64(v8, v11) < 0.000001;
      v6 = vabdd_f64(v10, v13) < 0.000001 && v12;
    }
  }

  return v6;
}

uint64_t MapsSuggestionsCoordinateFromMapItem(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 136446978;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v13 = 1024;
      v14 = 215;
      v15 = 2082;
      v16 = "BOOL MapsSuggestionsCoordinateFromMapItem(MapsSuggestionsMapItem *__strong _Nonnull, CLLocationCoordinate2D * _Nonnull)";
      v17 = 2082;
      v18 = "nil == (mapItem)";
      v9 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an mapItem";
LABEL_8:
      _os_log_impl(&dword_1A427D000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v11, 0x26u);
    }
LABEL_9:

    v7 = 0;
    goto LABEL_10;
  }
  if (!a2)
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 136446978;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v13 = 1024;
      v14 = 216;
      v15 = 2082;
      v16 = "BOOL MapsSuggestionsCoordinateFromMapItem(MapsSuggestionsMapItem *__strong _Nonnull, CLLocationCoordinate2D * _Nonnull)";
      v17 = 2082;
      v18 = "NULL == outCoordinate";
      v9 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a coordinate as output parameter";
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v3, "coordinate");
  *a2 = v5;
  a2[1] = v6;
  v7 = 1;
LABEL_10:

  return v7;
}

uint64_t MapsSuggestionsCoordinateFromEntry(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  void *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v15 = 136446978;
      v16 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v17 = 1024;
      v18 = 226;
      v19 = 2082;
      v20 = "BOOL MapsSuggestionsCoordinateFromEntry(MapsSuggestionsEntry *__strong _Nonnull, CLLocationCoordinate2D * _Nonnull)";
      v21 = 2082;
      v22 = "nil == (entry)";
      v11 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry";
LABEL_12:
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v15, 0x26u);
    }
LABEL_13:

    goto LABEL_14;
  }
  if (!a2)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v15 = 136446978;
      v16 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v17 = 1024;
      v18 = 227;
      v19 = 2082;
      v20 = "BOOL MapsSuggestionsCoordinateFromEntry(MapsSuggestionsEntry *__strong _Nonnull, CLLocationCoordinate2D * _Nonnull)";
      v21 = 2082;
      v22 = "NULL == outCoordinate";
      v11 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a coordinate as output parameter";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (!objc_msgSend(v3, "containsKey:", CFSTR("MapsSuggestionsLatitudeKey"))
    || !objc_msgSend(v4, "containsKey:", CFSTR("MapsSuggestionsLongitudeKey")))
  {
    objc_msgSend(v4, "geoMapItem");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v4, "geoMapItem");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = MapsSuggestionsCoordinateFromMapItem(v13, a2);

      goto LABEL_15;
    }
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  objc_msgSend(v4, "numberForKey:", CFSTR("MapsSuggestionsLatitudeKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  *a2 = v6;

  objc_msgSend(v4, "numberForKey:", CFSTR("MapsSuggestionsLongitudeKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "doubleValue");
  a2[1] = v8;

  v9 = 1;
LABEL_15:

  return v9;
}

uint64_t MapsSuggestionsDistanceBetweenEntries(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    GEOFindOrCreateLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v17 = 136446978;
    v18 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
    v19 = 1024;
    v20 = 244;
    v21 = 2082;
    v22 = "BOOL MapsSuggestionsDistanceBetweenEntries(MapsSuggestionsEntry *__strong _Nonnull, MapsSuggestionsEntry *__st"
          "rong _Nonnull, CLLocationDistance * _Nonnull)";
    v23 = 2082;
    v24 = "nil == (a)";
    v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry A";
LABEL_19:
    _os_log_impl(&dword_1A427D000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v17, 0x26u);
    goto LABEL_20;
  }
  if (!v6)
  {
    GEOFindOrCreateLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v17 = 136446978;
    v18 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
    v19 = 1024;
    v20 = 245;
    v21 = 2082;
    v22 = "BOOL MapsSuggestionsDistanceBetweenEntries(MapsSuggestionsEntry *__strong _Nonnull, MapsSuggestionsEntry *__st"
          "rong _Nonnull, CLLocationDistance * _Nonnull)";
    v23 = 2082;
    v24 = "nil == (b)";
    v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry B";
    goto LABEL_19;
  }
  if (!a3)
  {
    GEOFindOrCreateLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = 136446978;
      v18 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v19 = 1024;
      v20 = 246;
      v21 = 2082;
      v22 = "BOOL MapsSuggestionsDistanceBetweenEntries(MapsSuggestionsEntry *__strong _Nonnull, MapsSuggestionsEntry *__"
            "strong _Nonnull, CLLocationDistance * _Nonnull)";
      v23 = 2082;
      v24 = "NULL == outDistance";
      v15 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a distance as output parameter";
      goto LABEL_19;
    }
LABEL_20:

    v12 = 0;
    goto LABEL_21;
  }
  MapsSuggestionsLocationForEntry(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsLocationForEntry(v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (!v11)
  {
    objc_msgSend(v8, "distanceFromLocation:", v9);
    *a3 = v13;
  }

LABEL_21:
  return v12;
}

id MapsSuggestionsLocationForEntry(void *a1)
{
  id v1;
  NSObject *v3;
  _BYTE v4[18];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)&v4[8] = 0;
    if (MapsSuggestionsCoordinateFromEntry(a1, v4))
    {
      v1 = objc_alloc(MEMORY[0x1E0C9E3B8]);
      return (id)objc_msgSend(v1, "initWithLatitude:longitude:", *(double *)v4, *(double *)&v4[8]);
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v4 = 136446978;
      *(_QWORD *)&v4[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      *(_WORD *)&v4[12] = 1024;
      *(_DWORD *)&v4[14] = 326;
      v5 = 2082;
      v6 = "CLLocation * _Nullable MapsSuggestionsLocationForEntry(MapsSuggestionsEntry *__strong _Nonnull)";
      v7 = 2082;
      v8 = "nil == (entry)";
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry", v4, 0x26u);
    }

  }
  return 0;
}

BOOL MapsSuggestionsDistanceFromHereToMapItem(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v15 = 1024;
      v16 = 261;
      v17 = 2082;
      v18 = "BOOL MapsSuggestionsDistanceFromHereToMapItem(MapsSuggestionsMapItem *__strong _Nonnull, CLLocationDistance * _Nonnull)";
      v19 = 2082;
      v20 = "nil == (mapItem)";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an mapItem";
LABEL_11:
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, 0x26u);
    }
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  if (!a2)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v15 = 1024;
      v16 = 262;
      v17 = 2082;
      v18 = "BOOL MapsSuggestionsDistanceFromHereToMapItem(MapsSuggestionsMapItem *__strong _Nonnull, CLLocationDistance * _Nonnull)";
      v19 = 2082;
      v20 = "NULL == outDistance";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a distance as output parameter";
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  MapsSuggestionsCurrentBestLocation();
  v4 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "Current Location is nil. Cannot calculate distance from CurrentLocation", (uint8_t *)&v13, 2u);
    }

    v5 = 0;
    goto LABEL_15;
  }
  v5 = v4;
  MapsSuggestionsLocationForMapItem(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  v8 = v6 != 0;
  if (v6)
  {
    objc_msgSend(v6, "distanceFromLocation:", v5);
    *a2 = v9;
  }

LABEL_16:
  return v8;
}

id MapsSuggestionsLocationForMapItem(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "coordinate");
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E3B8]), "initWithLatitude:longitude:", v3, v4);
  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v10 = 1024;
      v11 = 312;
      v12 = 2082;
      v13 = "CLLocation * _Nullable MapsSuggestionsLocationForMapItem(MapsSuggestionsMapItem *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (mapItem)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a mapItem", (uint8_t *)&v8, 0x26u);
    }

    v5 = 0;
  }

  return v5;
}

BOOL MapsSuggestionsDistanceFromHereToEntry(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v15 = 1024;
      v16 = 281;
      v17 = 2082;
      v18 = "BOOL MapsSuggestionsDistanceFromHereToEntry(MapsSuggestionsEntry *__strong _Nonnull, CLLocationDistance * _Nonnull)";
      v19 = 2082;
      v20 = "nil == (entry)";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an entry";
LABEL_11:
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, 0x26u);
    }
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  if (!a2)
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v15 = 1024;
      v16 = 282;
      v17 = 2082;
      v18 = "BOOL MapsSuggestionsDistanceFromHereToEntry(MapsSuggestionsEntry *__strong _Nonnull, CLLocationDistance * _Nonnull)";
      v19 = 2082;
      v20 = "NULL == outDistance";
      v10 = "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a distance as output parameter";
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  MapsSuggestionsCurrentBestLocation();
  v4 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "Current Location is nil. Cannot calculate distance from CurrentLocation", (uint8_t *)&v13, 2u);
    }

    v5 = 0;
    goto LABEL_15;
  }
  v5 = v4;
  MapsSuggestionsLocationForEntry(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  v8 = v6 != 0;
  if (v6)
  {
    objc_msgSend(v6, "distanceFromLocation:", v5);
    *a2 = v9;
  }

LABEL_16:
  return v8;
}

void MapsSuggestionsDistanceBetweenCoordinates(double a1, double a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  void *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;
  CLLocationCoordinate2D v21;

  v20 = *MEMORY[0x1E0C80C00];
  if (CLLocationCoordinate2DIsValid(*(CLLocationCoordinate2D *)&a1))
  {
    v21.latitude = a3;
    v21.longitude = a4;
    if (CLLocationCoordinate2DIsValid(v21))
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E3B8]), "initWithLatitude:longitude:", a1, a2);
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E3B8]), "initWithLatitude:longitude:", a3, a4);
      objc_msgSend(v8, "distanceFromLocation:", v9);

      return;
    }
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446978;
      v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v14 = 1024;
      v15 = 302;
      v16 = 2082;
      v17 = "CLLocationDistance MapsSuggestionsDistanceBetweenCoordinates(CLLocationCoordinate2D, CLLocationCoordinate2D)";
      v18 = 2082;
      v19 = "!CLLocationCoordinate2DIsValid(end)";
      v11 = "At %{public}s:%d, %{public}s forbids: %{public}s. End coordinate is invalid. Returning CLLocationDistanceMax.";
      goto LABEL_8;
    }
  }
  else
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446978;
      v13 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocation.m";
      v14 = 1024;
      v15 = 301;
      v16 = 2082;
      v17 = "CLLocationDistance MapsSuggestionsDistanceBetweenCoordinates(CLLocationCoordinate2D, CLLocationCoordinate2D)";
      v18 = 2082;
      v19 = "!CLLocationCoordinate2DIsValid(start)";
      v11 = "At %{public}s:%d, %{public}s forbids: %{public}s. Start coordinate is invalid. Returning CLLocationDistanceMax.";
LABEL_8:
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0x26u);
    }
  }

}

id NSDataFromCLLocationCoordinate(double a1, double a2)
{
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (CLLocationCoordinate2DIsValid(*(CLLocationCoordinate2D *)&a1))
  {
    v17[0] = CFSTR("latitude");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v17[1] = CFSTR("longitude");
    v18[0] = v4;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v18[1] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
    v6 = objc_claimAutoreleasedReturnValue();

    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, &v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v12;
    if (!v7)
    {
      GEOFindOrCreateLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%+.8f, %+.8f"), *(_QWORD *)&a1, *(_QWORD *)&a2);
        *(_DWORD *)buf = 138412546;
        v14 = v10;
        v15 = 2112;
        v16 = v8;
        _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "Error archiving coordinate %@: %@", buf, 0x16u);

      }
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "This is not a valid coordinate", buf, 2u);
    }
    v7 = 0;
  }

  return v7;
}

double CLLocationCoordinateFromNSData(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  double latitude;
  NSObject *v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  CLLocationDegrees v18;
  void *v19;
  CLLocationDegrees v20;
  CLLocationCoordinate2D v21;
  NSObject *v22;
  id v23;
  uint8_t buf[4];
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99E60]);
    v3 = objc_opt_class();
    v4 = objc_opt_class();
    v5 = objc_opt_class();
    v6 = (void *)objc_msgSend(v2, "initWithObjects:", v3, v4, v5, objc_opt_class(), 0);
    v23 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v6, v1, &v23);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v23;
    if (v8)
    {
      GEOFindOrCreateLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v25 = v8;
        _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "Error decoding CoordinateData - %@", buf, 0xCu);
      }

      latitude = *MEMORY[0x1E0C9E500];
    }
    else
    {
      latitude = *MEMORY[0x1E0C9E500];
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("latitude"));
      v13 = objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        v14 = (void *)v13;
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("longitude"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("latitude"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "doubleValue");
          v18 = v17;
          objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("longitude"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "doubleValue");
          v21 = CLLocationCoordinate2DMake(v18, v20);

          if (CLLocationCoordinate2DIsValid(v21))
          {
            latitude = v21.latitude;
          }
          else
          {
            GEOFindOrCreateLog();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v25 = v7;
              _os_log_impl(&dword_1A427D000, v22, OS_LOG_TYPE_ERROR, "Unarchived an NSDictionary but it doesn't contain valid coordinates. Dictionary: %@", buf, 0xCu);
            }

          }
        }
      }
    }

  }
  else
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "coordinateData should not be nil", buf, 2u);
    }

    latitude = *MEMORY[0x1E0C9E500];
  }

  return latitude;
}

__CFString *NSStringFromCLLocationCoordinate(double a1, double a2)
{
  __CFString *v4;
  NSObject *v5;
  uint8_t buf[16];

  if (CLLocationCoordinate2DIsValid(*(CLLocationCoordinate2D *)&a1))
  {
    v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("<%+.6f,%+.6f>"), *(_QWORD *)&a1, *(_QWORD *)&a2);
  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "This is not a valid coordinate", buf, 2u);
    }

    v4 = CFSTR("Invalid");
  }
  return v4;
}

id NSStringFromCLLocationDistance(double a1)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%f"), *(_QWORD *)&a1);
}

__CFString *NSStringFromMapsSuggestionsCurrentBestLocation()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  __CFString *v4;

  MapsSuggestionsCurrentBestLocation();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "coordinate");
    NSStringFromCLLocationCoordinate(v2, v3);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = CFSTR("<Unknown>");
  }

  return v4;
}

id CLLocationFromGEOLocationCoordinate2D(double a1, double a2)
{
  id v4;
  void *v5;
  void *v6;

  v4 = objc_alloc(MEMORY[0x1E0C9E3B8]);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v5, a1, a2, 0.0, 0.0, -1.0);

  return v6;
}

id MapsSuggestionsAgeAsStringForLocation(void *a1)
{
  id v1;
  double v2;
  id v3;
  void *v4;

  v1 = a1;
  if (qword_1ED22F188 != -1)
    dispatch_once(&qword_1ED22F188, &__block_literal_global_113);
  objc_msgSend(v1, "timeIntervalSinceNow");
  if (v2 <= -60.0)
  {
    objc_msgSend((id)qword_1ED22F180, "localizedStringFromTimeInterval:");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = (id)qword_1ED22F190;
  }
  v4 = v3;

  return v4;
}

void ___initLockIfNeeded_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0DE7910]);
  v1 = (void *)qword_1ED22F198;
  qword_1ED22F198 = (uint64_t)v0;

}

void sub_1A4383414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A43838AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4383FF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4384990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4384A34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4384C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_1A4384FB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4385298(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id MapsSuggestionsLocalizedETAFormatStringWithTime(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v5 = qword_1ED22F1C0;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (v5 != -1)
    dispatch_once(&qword_1ED22F1C0, &__block_literal_global_38);
  (*(void (**)(uint64_t, id, id, id))(_MergedGlobals_50 + 16))(_MergedGlobals_50, v8, v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id MapsSuggestionsNonNilString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  if (!v3)
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = 136446978;
      v10 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsLocalizedString.m";
      v11 = 1024;
      v12 = 364;
      v13 = 2082;
      v14 = "NSString * _Nonnull MapsSuggestionsNonNilString(NSString *__strong _Nullable, NSString *__strong _Nonnull)";
      v15 = 2082;
      v16 = "nil == (str)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Nil string caught", (uint8_t *)&v9, 0x26u);
    }

    v5 = v4;
  }
  v7 = v5;

  return v7;
}

id MapsSuggestionsLocalizedETAFormatString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F1D0;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F1D0, &__block_literal_global_12_1);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F1C8 + 16))(qword_1ED22F1C8, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedETAToHomeString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F1E0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F1E0, &__block_literal_global_18);
  (*(void (**)(uint64_t, id))(qword_1ED22F1D8 + 16))(qword_1ED22F1D8, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedETAToWorkString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F1F0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F1F0, &__block_literal_global_24);
  (*(void (**)(uint64_t, id))(qword_1ED22F1E8 + 16))(qword_1ED22F1E8, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedETAToDestinationString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F200;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F200, &__block_literal_global_29);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F1F8 + 16))(qword_1ED22F1F8, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedWalletFlightAndAirportNumberString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F208;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F208, &__block_literal_global_34);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F210 + 16))(qword_1ED22F210, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedWalletFlightAirportString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F218;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F218, &__block_literal_global_39);
  (*(void (**)(uint64_t, id))(qword_1ED22F220 + 16))(qword_1ED22F220, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedWalletFlightNumberString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F228;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F228, &__block_literal_global_44_0);
  (*(void (**)(uint64_t, id))(qword_1ED22F230 + 16))(qword_1ED22F230, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedHomeString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Home_POI"), CFSTR("Home<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedWorkString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Work_POI"), CFSTR("Work<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedSchoolString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("School_POI"), CFSTR("School<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedGymString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Gym label type [Home Work editor]"), CFSTR("Gym<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedMyHomeString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MyHome_Label"), CFSTR("My home<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedMyWorkString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MyWork_Label"), CFSTR("My work<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedMySchoolString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MySchool_Label"), CFSTR("My school<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedParkedCarString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Parked car [Widget/Proactive Tray FmC row title]"), CFSTR("Parked Car<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedParkedCarRemoveString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Remove Car [Parked Car Action Sheet]"), CFSTR("Remove Car<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedStopShowingParkedCarString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Stop Showing Parked Car [Parked Car Action Sheet]"), CFSTR("Stop Showing Parked Car<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedSiriSuggestionsString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Siri suggestion [Portrait Tray Entries]"), CFSTR("Siri suggestion<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedSiriFoundOnString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F238;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F238, &__block_literal_global_93);
  (*(void (**)(uint64_t, id))(qword_1ED22F240 + 16))(qword_1ED22F240, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedSiriFoundInString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F248;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F248, &__block_literal_global_98_0);
  (*(void (**)(uint64_t, id))(qword_1ED22F250 + 16))(qword_1ED22F250, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedFoundInAppString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_APPCONNECTION_TITLE"), CFSTR("Found in app<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedSharedByString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F258;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F258, &__block_literal_global_107);
  (*(void (**)(uint64_t, id))(qword_1ED22F260 + 16))(qword_1ED22F260, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedSharedLocationString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_APPCONNECTION_TITLE_SHARED_LOCATION"), CFSTR("Shared Location<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedSiriFoundInCalendarString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_FIM_EVENT_FOUND_BY_SIRI"), CFSTR("Siri found this in Calendar<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedAddYourHomeShortcutString()
{
  if (qword_1ED22F268 != -1)
    dispatch_once(&qword_1ED22F268, &__block_literal_global_120);
  return (id)qword_1ED22F270;
}

id MapsSuggestionsLocalizedAddYourWorkShortcutString()
{
  if (qword_1ED22F278 != -1)
    dispatch_once(&qword_1ED22F278, &__block_literal_global_125);
  return (id)qword_1ED22F280;
}

id MapsSuggestionsLocalizedAddYourSchoolShortcutString()
{
  if (qword_1ED22F288 != -1)
    dispatch_once(&qword_1ED22F288, &__block_literal_global_130);
  return (id)qword_1ED22F290;
}

id MapsSuggestionsLocalizedAddShortcutString()
{
  if (qword_1ED22F298 != -1)
    dispatch_once(&qword_1ED22F298, &__block_literal_global_135);
  return (id)qword_1ED22F2A0;
}

id MapsSuggestionsLocalizedShortcutSubString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F2A8;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F2A8, &__block_literal_global_140);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F2B0 + 16))(qword_1ED22F2B0, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedRecentlyViewedString()
{
  if (qword_1ED22F2B8 != -1)
    dispatch_once(&qword_1ED22F2B8, &__block_literal_global_147);
  return (id)qword_1ED22F2C0;
}

id MapsSuggestionsLocalizedRestaurantReservationStringConfirmed(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F2C8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F2C8, &__block_literal_global_152);
  (*(void (**)(uint64_t, id))(qword_1ED22F2D0 + 16))(qword_1ED22F2D0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedRestaurantReservationStringCancelled()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("reservation_suggestion_subtitle_denied"), CFSTR("Your reservation was denied<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedRestaurantReservationStringPending()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("reservation_suggestion_subtitle_pending"), CFSTR("Your reservation is pending<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedHotelCheckInString(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v22;

  v3 = a1;
  v4 = a2;
  if (qword_1ED22F2D8 != -1)
    dispatch_once(&qword_1ED22F2D8, &__block_literal_global_165);
  v5 = qword_1ED22F2E0;
  NSStringFromMapsSuggestionsEventTimeWithTimeZone(v3, v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  v7 = v4;
  v8 = v7;
  if (!v7)
  {
    MapsSuggestionsTimeZone();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "componentsInTimeZone:fromDate:", v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v12 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "rangeOfString:", v15);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "rangeOfString:", v17);

  if (v16 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = v11 - 12;
    if (v11 < 12)
      v19 = v11;
    if (v11 == 12)
      v19 = 12;
    if (v11)
      v11 = v19;
    else
      v11 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(v5, v22, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id MapsSuggestionsLocalizedHotelCheckOutString(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v22;

  v3 = a1;
  v4 = a2;
  if (qword_1ED22F2E8 != -1)
    dispatch_once(&qword_1ED22F2E8, &__block_literal_global_178);
  v5 = qword_1ED22F2F0;
  NSStringFromMapsSuggestionsEventTimeWithTimeZone(v3, v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  v7 = v4;
  v8 = v7;
  if (!v7)
  {
    MapsSuggestionsTimeZone();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "componentsInTimeZone:fromDate:", v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v12 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "rangeOfString:", v15);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "rangeOfString:", v17);

  if (v16 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = v11 - 12;
    if (v11 < 12)
      v19 = v11;
    if (v11 == 12)
      v19 = 12;
    if (v11)
      v11 = v19;
    else
      v11 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(v5, v22, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id MapsSuggestionsLocalizedHotelUntilCheckoutDateString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F2F8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F2F8, &__block_literal_global_189);
  (*(void (**)(uint64_t, id))(qword_1ED22F300 + 16))(qword_1ED22F300, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedParkedCarNearString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F308;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F308, &__block_literal_global_194);
  (*(void (**)(uint64_t, id))(qword_1ED22F310 + 16))(qword_1ED22F310, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedParkedCarLowerCaseNearString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F318;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F318, &__block_literal_global_199);
  (*(void (**)(uint64_t, id))(qword_1ED22F320 + 16))(qword_1ED22F320, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedSnoozeInMapsString()
{
  if (qword_1ED22F328 != -1)
    dispatch_once(&qword_1ED22F328, &__block_literal_global_204);
  return (id)qword_1ED22F330;
}

id MapsSuggestionsLocalizedHideInMapsString()
{
  if (qword_1ED22F338 != -1)
    dispatch_once(&qword_1ED22F338, &__block_literal_global_209);
  return (id)qword_1ED22F340;
}

id MapsSuggestionsLocalizedDeleteFromCalendarString()
{
  if (qword_1ED22F348 != -1)
    dispatch_once(&qword_1ED22F348, &__block_literal_global_214);
  return (id)qword_1ED22F350;
}

id MapsSuggestionsLocalizedDeclineCalendarEventString()
{
  if (qword_1ED22F358 != -1)
    dispatch_once(&qword_1ED22F358, &__block_literal_global_219);
  return (id)qword_1ED22F360;
}

id MapsSuggestionsLocalizedForgetMyVisitsString()
{
  if (qword_1ED22F368 != -1)
    dispatch_once(&qword_1ED22F368, &__block_literal_global_224);
  return (id)qword_1ED22F370;
}

id MapsSuggestionsLocalizedTitleFormatForVehicleSetup(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F378;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F378, &__block_literal_global_229);
  (*(void (**)(uint64_t, id))(qword_1ED22F380 + 16))(qword_1ED22F380, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedBackupTitleFormatForVehicleSetup()
{
  if (qword_1ED22F388 != -1)
    dispatch_once(&qword_1ED22F388, &__block_literal_global_234);
  return (id)qword_1ED22F390;
}

id MapsSuggestionsLocalizedSubtitleForVehicleSetup()
{
  if (qword_1ED22F398 != -1)
    dispatch_once(&qword_1ED22F398, &__block_literal_global_239);
  return (id)qword_1ED22F3A0;
}

id MapsSuggestionsLocalizedSubtitleForRatingRequest()
{
  if (qword_1ED22F3A8 != -1)
    dispatch_once(&qword_1ED22F3A8, &__block_literal_global_244);
  return (id)qword_1ED22F3B0;
}

uint64_t MapsSuggestionsLocalizedVisitedTimeAgo(double a1)
{
  if (qword_1ED22F3B8 != -1)
    dispatch_once(&qword_1ED22F3B8, &__block_literal_global_249);
  return (*(uint64_t (**)(double))(qword_1ED22F3C0 + 16))(a1);
}

id MapsSuggestionsLocalizedVisitedToday()
{
  if (qword_1ED22F3C8 != -1)
    dispatch_once(&qword_1ED22F3C8, &__block_literal_global_256);
  return (id)qword_1ED22F3D0;
}

id MapsSuggestionsLocalizedTitleFormatForVenueWelcomeNotification(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F3E0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F3E0, &__block_literal_global_261);
  (*(void (**)(uint64_t, id))(qword_1ED22F3D8 + 16))(qword_1ED22F3D8, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedSubtitleForVenueWelcomeNotification()
{
  if (qword_1ED22F3E8 != -1)
    dispatch_once(&qword_1ED22F3E8, &__block_literal_global_266);
  return (id)qword_1ED22F3F0;
}

id MapsSuggestionsLocalizedTitleFormatForAirportArrivalNotification(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F400;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F400, &__block_literal_global_271);
  (*(void (**)(uint64_t, id))(qword_1ED22F3F8 + 16))(qword_1ED22F3F8, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedMessageForAirportArrivalNotification()
{
  if (qword_1ED22F408 != -1)
    dispatch_once(&qword_1ED22F408, &__block_literal_global_274);
  return (id)qword_1ED22F410;
}

id MapsSuggestionsLocalizedResumeRouteString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_SUGG_TITLE_SAR"), CFSTR("Resume route<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedTitleFormatForStandardResumeRouteEntry(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F420;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F420, &__block_literal_global_283);
  (*(void (**)(uint64_t, id))(qword_1ED22F418 + 16))(qword_1ED22F418, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t MapsSuggestionsLocalizedTitleFormatForEVResumeRouteEntryWithChargePercentage(float a1)
{
  if (qword_1ED22F428 != -1)
    dispatch_once(&qword_1ED22F428, &__block_literal_global_288);
  return (*(uint64_t (**)(float))(qword_1ED22F430 + 16))(a1);
}

id MapsSuggestionsLocalizedSubtitleFormatForEVResumeRouteEntry(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F440;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F440, &__block_literal_global_300);
  (*(void (**)(uint64_t, id))(qword_1ED22F438 + 16))(qword_1ED22F438, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedSubtitleFormatForPortraitSiriSuggestionEntry()
{
  if (qword_1ED22F448 != -1)
    dispatch_once(&qword_1ED22F448, &__block_literal_global_305);
  return (id)qword_1ED22F450;
}

id MapsSuggestionsLocalizedSubtitleFormatForPortraitHomePodEntry()
{
  if (qword_1ED22F458 != -1)
    dispatch_once(&qword_1ED22F458, &__block_literal_global_310);
  return (id)qword_1ED22F460;
}

id MapsSuggestionsLocalizedNearbyTransitShortString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Nearby_Transit"), CFSTR("Transit<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedNearbyTransitShortSubtitleString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Nearby_Transit_Subtitle"), CFSTR("Nearby<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedNearbyTransitFullString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Nearby_Transit_Setup"), CFSTR("Nearby Transit<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedNearbyTransitFullSubtitleString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Nearby_Transit_Setup_Subtitle"), CFSTR("Options for all nearby departures<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedCarPlayLowEVString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Low EV Battery"), CFSTR("Low EV Battery<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedCarPlayLowFuelAndEVBatteryString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Low Fuel and EV Battery"), CFSTR("Low Fuel and EV Battery<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedCarPlayLowFuelString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Low Fuel"), CFSTR("Low Fuel<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedFindEVChargerString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Find an EV Charger"), CFSTR("Find an EV Charger<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedFindStationString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Find a Station"), CFSTR("Find a Station<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedFindStationForDieselCNGHybridString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("Find a Station (diesel, CNG, or hybrid)"), CFSTR("Find a Station<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedTicketedEvent_SectionString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F468;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F468, &__block_literal_global_353);
  (*(void (**)(uint64_t, id))(qword_1ED22F470 + 16))(qword_1ED22F470, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedTicketedEvent_SeatRowString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F478;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F478, &__block_literal_global_358);
  (*(void (**)(uint64_t, id))(qword_1ED22F480 + 16))(qword_1ED22F480, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedTicketedEvent_SeatNumberString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F488;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F488, &__block_literal_global_363);
  (*(void (**)(uint64_t, id))(qword_1ED22F490 + 16))(qword_1ED22F490, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedCalendarEventAllDayString()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_SUGGESTIONS_ALL_DAY_EVENT_STRING"), CFSTR("All day<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedCalendarEventTimeAndLocationString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F4A0;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F4A0, &__block_literal_global_372);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F498 + 16))(qword_1ED22F498, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedCalendarEventPOIAdornmentString(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  void *v23;
  id v24;

  v24 = a1;
  v3 = a2;
  if (qword_1ED22F4A8 != -1)
    dispatch_once(&qword_1ED22F4A8, &__block_literal_global_377);
  v4 = qword_1ED22F4B0;
  NSStringFromMapsSuggestionsEventTime(v3);
  v22 = objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  v7 = v5;
  v8 = v7;
  if (!v7)
  {
    MapsSuggestionsTimeZone();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar", v22);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "componentsInTimeZone:fromDate:", v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v12 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "rangeOfString:", v15);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "rangeOfString:", v17);

  if (v16 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = v11 - 12;
    if (v11 < 12)
      v19 = v11;
    if (v11 == 12)
      v19 = 12;
    if (v11)
      v11 = v19;
    else
      v11 = 12;
  }

  (*(void (**)(uint64_t, void *, id, uint64_t))(v4 + 16))(v4, v23, v24, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id MapsSuggestionsLocalizedCalendarEventPOIAdornmentAllDayString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F4C0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F4C0, &__block_literal_global_389);
  (*(void (**)(uint64_t, id))(qword_1ED22F4B8 + 16))(qword_1ED22F4B8, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedMultipointRouteStopsString(uint64_t a1)
{
  void *v1;

  if (a1 == 1)
  {
    if (qword_1ED22F4D8 != -1)
      dispatch_once(&qword_1ED22F4D8, &__block_literal_global_394);
    (*(void (**)(void))(qword_1ED22F4C8 + 16))();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (qword_1ED22F4E0 != -1)
      dispatch_once(&qword_1ED22F4E0, &__block_literal_global_400);
    (*(void (**)(uint64_t, uint64_t))(qword_1ED22F4D0 + 16))(qword_1ED22F4D0, a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

id MapsSuggestionsLocalizedTicketedEventWithTimeAndNameFormatString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F4E8;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F4E8, &__block_literal_global_406);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F4F0 + 16))(qword_1ED22F4F0, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedParkedCarAtLocationString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a1;
  v4 = a2;
  if (qword_1ED22F4F8 != -1)
    dispatch_once(&qword_1ED22F4F8, &__block_literal_global_411);
  if (objc_msgSend(v4, "length"))
    (*(void (**)(uint64_t, id, id))(qword_1ED22F508 + 16))(qword_1ED22F508, v3, v4);
  else
    (*(void (**)(uint64_t, id))(qword_1ED22F500 + 16))(qword_1ED22F500, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id MapsSuggestionsLocalizedFrequentLocationTitleString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F518;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F518, &__block_literal_global_420);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F510 + 16))(qword_1ED22F510, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedFrequentLocationNearTitleString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F528;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F528, &__block_literal_global_423);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F520 + 16))(qword_1ED22F520, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedFrequentLocationNearStreetTitleString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F538;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F538, &__block_literal_global_428);
  (*(void (**)(uint64_t, id))(qword_1ED22F530 + 16))(qword_1ED22F530, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedFlightGate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F548;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F548, &__block_literal_global_431);
  (*(void (**)(uint64_t, id))(qword_1ED22F540 + 16))(qword_1ED22F540, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedFlightDepatureTime(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  void *v23;
  id v24;

  v24 = a1;
  v3 = a2;
  if (qword_1ED22F550 != -1)
    dispatch_once(&qword_1ED22F550, &__block_literal_global_436);
  v4 = qword_1ED22F558;
  NSStringFromMapsSuggestionsEventTime(v3);
  v22 = objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  v7 = v5;
  v8 = v7;
  if (!v7)
  {
    MapsSuggestionsTimeZone();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar", v22);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "componentsInTimeZone:fromDate:", v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v12 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "rangeOfString:", v15);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "rangeOfString:", v17);

  if (v16 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = v11 - 12;
    if (v11 < 12)
      v19 = v11;
    if (v11 == 12)
      v19 = 12;
    if (v11)
      v11 = v19;
    else
      v11 = 12;
  }

  (*(void (**)(uint64_t, id, void *, uint64_t))(v4 + 16))(v4, v24, v23, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id MapsSuggestionsLocalizedFlightDepatureTodaySoonString(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  void *v23;
  id v24;

  v24 = a1;
  v3 = a2;
  if (qword_1ED22F560 != -1)
    dispatch_once(&qword_1ED22F560, &__block_literal_global_447);
  v4 = qword_1ED22F568;
  NSStringFromMapsSuggestionsEventTime(v3);
  v22 = objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  v7 = v5;
  v8 = v7;
  if (!v7)
  {
    MapsSuggestionsTimeZone();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar", v22);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "componentsInTimeZone:fromDate:", v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v12 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "rangeOfString:", v15);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "rangeOfString:", v17);

  if (v16 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = v11 - 12;
    if (v11 < 12)
      v19 = v11;
    if (v11 == 12)
      v19 = 12;
    if (v11)
      v11 = v19;
    else
      v11 = 12;
  }

  (*(void (**)(uint64_t, id, void *, uint64_t))(v4 + 16))(v4, v24, v23, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id MapsSuggestionsLocalizedFlightDepatureTodayString(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;

  v1 = a1;
  if (qword_1ED22F570 != -1)
    dispatch_once(&qword_1ED22F570, &__block_literal_global_456);
  v2 = qword_1ED22F578;
  NSStringFromMapsSuggestionsEventTime(v1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v3;
  v6 = v5;
  if (!v5)
  {
    MapsSuggestionsTimeZone();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentsInTimeZone:fromDate:", v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v10 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringFromDate:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "rangeOfString:", v13);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v12, "rangeOfString:", v15);

  if (v14 != 0x7FFFFFFFFFFFFFFFLL || v16 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v17 = v9 - 12;
    if (v9 < 12)
      v17 = v9;
    if (v9 == 12)
      v17 = 12;
    if (v9)
      v9 = v17;
    else
      v9 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v2 + 16))(v2, v20, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id MapsSuggestionsLocalizedFlightDepatureTomorrowString(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;

  v1 = a1;
  if (qword_1ED22F580 != -1)
    dispatch_once(&qword_1ED22F580, &__block_literal_global_467);
  v2 = qword_1ED22F588;
  NSStringFromMapsSuggestionsEventTime(v1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v3;
  v6 = v5;
  if (!v5)
  {
    MapsSuggestionsTimeZone();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentsInTimeZone:fromDate:", v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v10 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringFromDate:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "rangeOfString:", v13);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v12, "rangeOfString:", v15);

  if (v14 != 0x7FFFFFFFFFFFFFFFLL || v16 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v17 = v9 - 12;
    if (v9 < 12)
      v17 = v9;
    if (v9 == 12)
      v17 = 12;
    if (v9)
      v9 = v17;
    else
      v9 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v2 + 16))(v2, v20, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id MapsSuggestionsLocalizedFlightETAString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F598;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F598, &__block_literal_global_478);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F590 + 16))(qword_1ED22F590, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedContactLocationTitle(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F5A8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F5A8, &__block_literal_global_481);
  (*(void (**)(uint64_t, id))(qword_1ED22F5A0 + 16))(qword_1ED22F5A0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedRecentlySharedContactActivityTitle(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F5B8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F5B8, &__block_literal_global_486);
  (*(void (**)(uint64_t, id))(qword_1ED22F5B0 + 16))(qword_1ED22F5B0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedLikelyMeetupContactActivityTitle(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F5C8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F5C8, &__block_literal_global_491);
  (*(void (**)(uint64_t, id))(qword_1ED22F5C0 + 16))(qword_1ED22F5C0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedAddressStringContactActivitySubTitle(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = qword_1ED22F5D8;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ED22F5D8, &__block_literal_global_496);
  (*(void (**)(uint64_t, id, id))(qword_1ED22F5D0 + 16))(qword_1ED22F5D0, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id MapsSuggestionsLocalizedOrderPickupFromMerchantTitle(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ED22F5E8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED22F5E8, &__block_literal_global_501);
  (*(void (**)(uint64_t, id))(qword_1ED22F5E0 + 16))(qword_1ED22F5E0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MapsSuggestionsLocalizedOrderPickupTitle()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_SUGG_PICKUP_ORDER"), CFSTR("Pick up your order<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id MapsSuggestionsLocalizedOrderPickupReadyAt(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;

  v1 = a1;
  if (qword_1ED22F5F0 != -1)
    dispatch_once(&qword_1ED22F5F0, &__block_literal_global_510);
  v2 = qword_1ED22F5F8;
  NSStringFromMapsSuggestionsEventTime(v1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v3;
  v6 = v5;
  if (!v5)
  {
    MapsSuggestionsTimeZone();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentsInTimeZone:fromDate:", v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v10 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringFromDate:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "rangeOfString:", v13);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v12, "rangeOfString:", v15);

  if (v14 != 0x7FFFFFFFFFFFFFFFLL || v16 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v17 = v9 - 12;
    if (v9 < 12)
      v17 = v9;
    if (v9 == 12)
      v17 = 12;
    if (v9)
      v9 = v17;
    else
      v9 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v2 + 16))(v2, v20, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id MapsSuggestionsLocalizedOrderPickupReadyUntil(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v20;

  v1 = a1;
  if (qword_1ED22F600 != -1)
    dispatch_once(&qword_1ED22F600, &__block_literal_global_521);
  v2 = qword_1ED22F608;
  NSStringFromMapsSuggestionsEventTime(v1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsTimeZone();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v3;
  v6 = v5;
  if (!v5)
  {
    MapsSuggestionsTimeZone();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "autoupdatingCurrentCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentsInTimeZone:fromDate:", v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "hour");
  if (qword_1ED22F628 != -1)
    dispatch_once(&qword_1ED22F628, &__block_literal_global_542);
  v10 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringFromDate:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ED22F620, "AMSymbol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "rangeOfString:", v13);

  objc_msgSend((id)qword_1ED22F620, "PMSymbol");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v12, "rangeOfString:", v15);

  if (v14 != 0x7FFFFFFFFFFFFFFFLL || v16 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v17 = v9 - 12;
    if (v9 < 12)
      v17 = v9;
    if (v9 == 12)
      v17 = 12;
    if (v9)
      v9 = v17;
    else
      v9 = 12;
  }

  (*(void (**)(uint64_t, void *, uint64_t))(v2 + 16))(v2, v20, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id MapsSuggestionsLocalizedOrderPickupReady()
{
  void *v0;
  void *v1;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___MapsSuggestionsBundle_block_invoke_7;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = "LocalizedString";
  if (qword_1ED22F618 != -1)
    dispatch_once(&qword_1ED22F618, block);
  objc_msgSend((id)qword_1ED22F610, "localizedStringForKey:value:table:", CFSTR("MAPS_SUGG_ORDER_READY"), CFSTR("Ready<unlocalized>"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MapsSuggestionsNonNilString(v0, &stru_1E4BDFC28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void ___isSystemIn24hours_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  id v3;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED22F620;
  qword_1ED22F620 = (uint64_t)v0;

  objc_msgSend((id)qword_1ED22F620, "setTimeStyle:", 0);
  objc_msgSend((id)qword_1ED22F620, "setTimeStyle:", 1);
  v2 = (void *)qword_1ED22F620;
  objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

}

void sub_1A439194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___dateFormatter_block_invoke_0()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)_MergedGlobals_51;
  _MergedGlobals_51 = (uint64_t)v0;

  objc_msgSend((id)_MergedGlobals_51, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss Z"));
  v2 = (void *)_MergedGlobals_51;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", CFSTR("en_US"));
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)_MergedGlobals_51;
  objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

void sub_1A43944F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A4394EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A43951C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1A4395A5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t isExtensionHidden(void *a1)
{
  void *v1;
  uint64_t v2;

  appForBundleID(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isHidden");

  return v2;
}

uint64_t isExtensionLocked(void *a1)
{
  void *v1;
  uint64_t v2;

  appForBundleID(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isLocked");

  return v2;
}

__CFString *NSStringFromMapsSuggestionsJSON(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  __CFString *v9;
  NSObject *v10;
  id v12;
  uint8_t buf[4];
  id v14;
  void *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE71A7F0))
  {
    objc_msgSend(v3, "nameForJSON");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v4;
    MSg::jsonFor(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    MSg::jsonFor(v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v12 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v6, a2, &v12);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v12;
  if (v8 || !v7)
  {
    GEOFindOrCreateLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v8;
      _os_log_impl(&dword_1A427D000, v10, OS_LOG_TYPE_ERROR, "Failed to encode to JSON: %@", buf, 0xCu);
    }

    v9 = &stru_1E4BDFC28;
  }
  else
  {
    v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v7, 4);
  }

  return v9;
}

void sub_1A4397850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id MSg::jsonFor(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE71A7F0))
    {
      objc_msgSend(v2, "objectForJSON");
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = v2;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1)
    objc_msgSend(v1, "objectForJSON");
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "mutableCopy");
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZN3MSg7jsonForEP12NSDictionaryIP8NSStringPU33objcproto22MapsSuggestionsAnyJSON11objc_objectE_block_invoke;
    v7[3] = &unk_1E4BD1FF0;
    v4 = v3;
    v8 = v4;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v7);
    v5 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "mutableCopy");
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZN3MSg7jsonForEP7NSArrayIPU33objcproto22MapsSuggestionsAnyJSON11objc_objectE_block_invoke;
    v7[3] = &unk_1E4BD2018;
    v4 = v3;
    v8 = v4;
    objc_msgSend(v4, "enumerateObjectsUsingBlock:", v7);
    v5 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_1A4397914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43979BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::jsonFor(MSg *this)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", this);
}

{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", this);
}

{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", this);
}

uint64_t MSg::jsonFor(MSg *this, double a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)a2);
}

id MSg::jsonFor(MSg *this, NSDate *a2)
{
  MSg *v2;
  MSg *v3;
  void *v4;

  v2 = this;
  v3 = v2;
  if (v2)
    MapsSuggestionsStringFromDate(v2);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A4397ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::jsonFor(MSg *this, NSDateInterval *a2)
{
  MSg *v2;
  MSg *v3;
  MSg *v4;
  NSDate *v5;
  void *v6;
  MSg *v7;
  NSDate *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v2 = this;
  v3 = v2;
  if (v2)
  {
    v12[0] = CFSTR("start");
    -[MSg startDate](v2, "startDate");
    v4 = (MSg *)objc_claimAutoreleasedReturnValue();
    MSg::jsonFor(v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12[1] = CFSTR("end");
    v13[0] = v6;
    -[MSg endDate](v3, "endDate");
    v7 = (MSg *)objc_claimAutoreleasedReturnValue();
    MSg::jsonFor(v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_1A4397BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id MSg::jsonFor(MSg *this, CLLocation *a2)
{
  MSg *v2;
  MSg *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v2 = this;
  v3 = v2;
  if (v2)
  {
    v15[0] = CFSTR("coordinate");
    v4 = (void *)MEMORY[0x1E0CB37E8];
    -[MSg coordinate](v2, "coordinate");
    objc_msgSend(v4, "numberWithDouble:");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v5;
    v6 = (void *)MEMORY[0x1E0CB37E8];
    -[MSg coordinate](v3, "coordinate");
    objc_msgSend(v6, "numberWithDouble:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = CFSTR("accuracy");
    v16[0] = v9;
    v10 = (void *)MEMORY[0x1E0CB37E8];
    -[MSg horizontalAccuracy](v3, "horizontalAccuracy");
    objc_msgSend(v10, "numberWithDouble:");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16[1] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v12;
}

void sub_1A4397D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MSg::jsonFor(MSg *this, NSAttributedString *a2)
{
  void *v2;
  void *v3;

  -[MSg string](this, "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  MSg::jsonFor(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A4397DF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A4397EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN3MSg7jsonForEP12NSDictionaryIP8NSStringPU33objcproto22MapsSuggestionsAnyJSON11objc_objectE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  MSg::jsonFor(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_1A4397F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A4398014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN3MSg7jsonForEP7NSArrayIPU33objcproto22MapsSuggestionsAnyJSON11objc_objectE_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  MSg::jsonFor(a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:");

}

void sub_1A439808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id MapsSuggestionsTransportModesToNSData(uint64_t a1, uint64_t a2)
{
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NSDataToMapsSuggestionsTransportModes(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = a1;
  v4 = objc_alloc(MEMORY[0x1E0C99E60]);
  v5 = objc_opt_class();
  v6 = (void *)objc_msgSend(v4, "initWithObjects:", v5, objc_opt_class(), 0);
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v6, v3, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1A4398458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void MapsSuggestionsLogPredictedTransportModeForEntry(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  id v16;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  __CFString *v30;
  __int16 v31;
  __CFString *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if ((_DWORD)a1 == (_DWORD)a2)
  {
    GEOFindOrCreateLog();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v8, "uniqueIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromMapsSuggestionsEntryType(objc_msgSend(v8, "type"));
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "title");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v14 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v13 = off_1E4BD2060[(int)a1];
        v14 = v13;
      }
      *(_DWORD *)buf = 138413570;
      v22 = v7;
      v23 = 2112;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v12;
      v29 = 2112;
      v30 = v14;
      v31 = 2112;
      v32 = v13;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_DEBUG, "PTM in %@ for entry with ID: %@, Type: %@, Title: %@, Predicted: %@, Actual: %@", buf, 0x3Eu);

    }
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "uniqueIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromMapsSuggestionsEntryType(objc_msgSend(v8, "type"));
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "title");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v18 = off_1E4BD2060[(int)a1];
      }
      v19 = v18;
      if (a2 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a2);
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v20 = off_1E4BD2060[(int)a2];
      }
      *(_DWORD *)buf = 138413570;
      v22 = v7;
      v23 = 2112;
      v24 = v15;
      v25 = 2112;
      v26 = v16;
      v27 = 2112;
      v28 = v17;
      v29 = 2112;
      v30 = v19;
      v31 = 2112;
      v32 = v20;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "PTM difference in %@ for entry with ID: %@, Type: %@, Title: %@, Predicted: %@, Actual: %@", buf, 0x3Eu);

    }
  }

}

void sub_1A43987A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

void MapsSuggestionsLogPredictedTransportModeForMapItem(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if ((_DWORD)a1 == (_DWORD)a2)
  {
    GEOFindOrCreateLog();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_msgSend(v8, "_muid");
      objc_msgSend(v8, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v13 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12 = off_1E4BD2060[(int)a1];
        v13 = v12;
      }
      *(_DWORD *)buf = 138413314;
      v20 = v7;
      v21 = 2048;
      v22 = v10;
      v23 = 2112;
      v24 = v11;
      v25 = 2112;
      v26 = v13;
      v27 = 2112;
      v28 = v12;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_DEBUG, "PTM in %@ for MapItem with MUID: %llu, Title: %@, Predicted: %@, Actual: %@", buf, 0x34u);

    }
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v14 = objc_msgSend(v8, "_muid");
      objc_msgSend(v8, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v16 = off_1E4BD2060[(int)a1];
      }
      v17 = v16;
      if (a2 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a2);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v18 = off_1E4BD2060[(int)a2];
      }
      *(_DWORD *)buf = 138413314;
      v20 = v7;
      v21 = 2048;
      v22 = v14;
      v23 = 2112;
      v24 = v15;
      v25 = 2112;
      v26 = v17;
      v27 = 2112;
      v28 = v18;
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "PTM difference in %@ for MapItem with MUID: %llu, Title: %@, Predicted: %@, Actual: %@", buf, 0x34u);

    }
  }

}

void sub_1A4398B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void MapsSuggestionsLogPredictedTransportMode(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  __CFString *v15;
  __int16 v16;
  __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((_DWORD)a1 == (_DWORD)a2)
  {
    GEOFindOrCreateLog();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v8 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v7 = off_1E4BD2060[(int)a1];
        v8 = v7;
      }
      *(_DWORD *)buf = 138412802;
      v13 = v5;
      v14 = 2112;
      v15 = v8;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_DEBUG, "PTM in %@ Predicted: %@, Actual: %@", buf, 0x20u);

    }
  }
  else
  {
    GEOFindOrCreateLog();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (a1 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
        v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v9 = off_1E4BD2060[(int)a1];
      }
      v10 = v9;
      if (a2 >= 7)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a2);
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v11 = off_1E4BD2060[(int)a2];
      }
      *(_DWORD *)buf = 138412802;
      v13 = v5;
      v14 = 2112;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "PTM difference in %@ Predicted: %@, Actual: %@", buf, 0x20u);

    }
  }

}

void sub_1A4398DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsTransportModeForOriginAndDestinationMapItem(void *a1, CLLocationDegrees a2, CLLocationDegrees a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  double v9;
  dispatch_time_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint8_t v17[8];
  _QWORD v18[4];
  NSObject *v19;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  _BYTE buf[28];
  __int16 v27;
  const char *v28;
  uint64_t v29;
  CLLocationCoordinate2D v30;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v30.latitude = a2;
  v30.longitude = a3;
  if (!CLLocationCoordinate2DIsValid(v30))
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTransportMode.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "GEOTransportType MapsSuggestionsTransportModeForOriginAndDestinationMapItem(CLLocationCoordi"
                            "nate2D, MapsSuggestionsMapItem *__strong _Nonnull)";
      v27 = 2082;
      v28 = "!CLLocationCoordinate2DIsValid(originCoordinate)";
      v13 = "At %{public}s:%d, %{public}s forbids: %{public}s. Need a valid origin coordinate";
LABEL_13:
      v14 = v8;
      v15 = 38;
LABEL_14:
      _os_log_impl(&dword_1A427D000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    }
LABEL_15:
    v12 = 4;
    goto LABEL_16;
  }
  if (!v5)
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTransportMode.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 100;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "GEOTransportType MapsSuggestionsTransportModeForOriginAndDestinationMapItem(CLLocationCoordi"
                            "nate2D, MapsSuggestionsMapItem *__strong _Nonnull)";
      v27 = 2082;
      v28 = "nil == (destinationMapItem)";
      v13 = "At %{public}s:%d, %{public}s forbids: %{public}s. destinationMapItem should be non-nil";
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  if ((GEOConfigGetBOOL() & 1) == 0)
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v13 = "MSg Transport Mode Prediction is not enabled. Returning GEOTransportType_UNKNOWN_TRANSPORT_TYPE.";
    v14 = v8;
    v15 = 2;
    goto LABEL_14;
  }
  v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  *(_DWORD *)&buf[24] = 4;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  +[MapsSuggestionsPredictor sharedPredictor](MapsSuggestionsPredictor, "sharedPredictor");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MapsSuggestionsTransportModeForOriginAndDestinationMapItem_block_invoke;
  v18[3] = &unk_1E4BD2040;
  v20 = &v22;
  v21 = buf;
  v8 = v6;
  v19 = v8;
  objc_msgSend(v7, "predictedTransportModeForDestinationMapItem:originCoordinate:handler:", v5, v18, a2, a3);

  GEOConfigGetDouble();
  v10 = dispatch_time(0, (uint64_t)(v9 * 1000000000.0));
  dispatch_group_wait(v8, v10);
  if (!*((_BYTE *)v23 + 24))
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "MapsSuggestionsPredictor did not call back in time. destinationd is likely not running.", v17, 2u);
    }

  }
  v12 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(buf, 8);
LABEL_16:

  return v12;
}

void sub_1A43991A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsIsFeelerPipelineTransportModePredictionEnabled()
{
  return GEOConfigGetBOOL();
}

void sub_1A43994A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsTransportModeForOriginAndDestination(CLLocationDegrees a1, CLLocationDegrees a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;
  CLLocationCoordinate2D v22;

  v21 = *MEMORY[0x1E0C80C00];
  if (!CLLocationCoordinate2DIsValid(*(CLLocationCoordinate2D *)&a1))
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTransportMode.mm";
      v15 = 1024;
      v16 = 153;
      v17 = 2082;
      v18 = "GEOTransportType MapsSuggestionsTransportModeForOriginAndDestination(CLLocationCoordinate2D, CLLocationCoordinate2D)";
      v19 = 2082;
      v20 = "!CLLocationCoordinate2DIsValid(origin)";
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Need a valid origin coordinate", (uint8_t *)&v13, 0x26u);
    }
    goto LABEL_9;
  }
  v22.latitude = a3;
  v22.longitude = a4;
  if (!CLLocationCoordinate2DIsValid(v22))
  {
    GEOFindOrCreateLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsTransportMode.mm";
      v15 = 1024;
      v16 = 154;
      v17 = 2082;
      v18 = "GEOTransportType MapsSuggestionsTransportModeForOriginAndDestination(CLLocationCoordinate2D, CLLocationCoordinate2D)";
      v19 = 2082;
      v20 = "!CLLocationCoordinate2DIsValid(destination)";
      _os_log_impl(&dword_1A427D000, v11, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Need a valid destination coordinate", (uint8_t *)&v13, 0x26u);
    }
LABEL_9:

    return 4;
  }
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", a3, a4);
  objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MapsSuggestionsTransportModeForOriginAndDestinationMapItem(v9, a1, a2);

  return v10;
}

void sub_1A4399718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MapsSuggestionsLocalizedStringFromGEOTransportType(int a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t block;
  uint64_t v6;
  void (*v7)();
  void *v8;
  const char *v9;

  v1 = 0;
  switch(a1)
  {
    case 0:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_drive"), CFSTR("drive<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    case 1:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_transit"), CFSTR("by transit<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    case 2:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_walk"), CFSTR("walk<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    case 3:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_bicycling"), CFSTR("bike ride<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    case 5:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_ferry_ride"), CFSTR("ferry ride<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    case 6:
      block = MEMORY[0x1E0C809B0];
      v6 = 3221225472;
      v7 = ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0;
      v8 = &__block_descriptor_40_e5_v8__0l;
      v9 = "TransportMode";
      if (qword_1ED22F658 != -1)
        dispatch_once(&qword_1ED22F658, &block);
      objc_msgSend((id)_MergedGlobals_53, "localizedStringForKey:value:table:", CFSTR("MSg_Proactive_tray_rideshare"), CFSTR("rideshare<unlocalized>"), 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      MapsSuggestionsNonNilString(v2, &stru_1E4BDFC28);
      v3 = objc_claimAutoreleasedReturnValue();
LABEL_20:
      v1 = (void *)v3;

      break;
    default:
      return v1;
  }
  return v1;
}

void sub_1A4399B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GEOTransportTypeFromGEOTransportTypePreference(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return 0;
  else
    return dword_1A43B3170[a1 - 1];
}

uint64_t GEOTransportTypePreferenceFromGEOTransportType(int a1)
{
  if ((a1 - 1) > 5)
    return 0;
  else
    return qword_1A43B3738[a1 - 1];
}

uint64_t GEOTransportModeFromGEOTransportType(int a1)
{
  if ((a1 - 1) > 5)
    return 1;
  else
    return dword_1A43B3768[a1 - 1];
}

uint64_t GEOTransportModeForTransportTypePreference(unint64_t a1)
{
  if (a1 < 5)
    return (a1 + 1);
  else
    return 0;
}

uint64_t GEOTransportTypeFromUserPreference()
{
  unint64_t v0;

  v0 = GEOGetUserTransportTypePreference();
  if (v0 > 4)
    return 4;
  else
    return dword_1A43B3780[v0];
}

uint64_t MapsSuggestionsSetTransportationModeDebugPanelSetting()
{
  return GEOConfigSetBOOL();
}

uint64_t MapsSuggestionsGetTransportationModeDebugPanelSetting()
{
  return GEOConfigGetBOOL();
}

void ___ZL22_MapsSuggestionsBundlePKc_block_invoke_0()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!_MergedGlobals_53)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.MapsSuggestions"));
    v0 = objc_claimAutoreleasedReturnValue();
    v1 = (void *)_MergedGlobals_53;
    _MergedGlobals_53 = v0;

    if (!_MergedGlobals_53)
    {
      GEOFindOrCreateLog();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v3 = 136446978;
        v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsDefines.h";
        v5 = 1024;
        v6 = 324;
        v7 = 2082;
        v8 = "NSBundle * _Nonnull _MapsSuggestionsBundle(const char * _Nonnull)_block_invoke";
        v9 = 2082;
        v10 = "nil == s_bundleWithMapsSuggestionsIdentifier";
        _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires bundleWithIdentifier:@\"com.apple.MapsSuggestions\"", (uint8_t *)&v3, 0x26u);
      }

    }
  }
}

uint64_t GEOConfigMapsSuggestionsGetUserDefaultStringKeysForWatchSync()
{
  return MEMORY[0x1E0C9AA60];
}

uint64_t GEOConfigMapsSuggestionsGetConfigStoreStringKeysForWatchSync()
{
  return MEMORY[0x1E0C9AA60];
}

BOOL MapsSuggestionsSignalTypeEnumerate(void *a1)
{
  uint64_t (**v1)(id, unint64_t);
  unint64_t v2;
  char v3;
  char v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = 0;
    do
    {
      v3 = v1[2](v1, v2);
      if (v2++ >= 0x27)
        v5 = 0;
      else
        v5 = v3;
    }
    while ((v5 & 1) != 0);
  }
  else
  {
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignal.mm";
      v10 = 1024;
      v11 = 70;
      v12 = 2082;
      v13 = "BOOL MapsSuggestionsSignalTypeEnumerate(BOOL (^__strong _Nonnull)(MapsSuggestionsSignalType))";
      v14 = 2082;
      v15 = "nil == (block)";
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a block", (uint8_t *)&v8, 0x26u);
    }

  }
  return v1 != 0;
}

void sub_1A439C620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *NSStringFromMapsSuggestionsSignalType(unint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 < 0x28)
    return off_1E4BDF420[a1];
  GEOFindOrCreateLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136446978;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignal.mm";
    v5 = 1024;
    v6 = 126;
    v7 = 2082;
    v8 = "NSString *NSStringFromMapsSuggestionsSignalType(MapsSuggestionsSignalType)";
    v9 = 2082;
    v10 = "YES";
    _os_log_impl(&dword_1A427D000, v2, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Detected an unsupported MapsSuggestionsSignalType!", (uint8_t *)&v3, 0x26u);
  }

  return CFSTR("UnsupportedType");
}

uint64_t MapsSuggestionsSignalTypeFromNSString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsSignal.mm";
      v9 = 1024;
      v10 = 141;
      v11 = 2082;
      v12 = "MapsSuggestionsSignalType MapsSuggestionsSignalTypeFromNSString(NSString *__strong _Nonnull)";
      v13 = 2082;
      v14 = "nil == (str)";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a key string", buf, 0x26u);
    }
LABEL_10:

LABEL_11:
    v3 = 0;
    goto LABEL_12;
  }
  if (!objc_msgSend(v1, "length")
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("Unknown")) & 1) != 0
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUnknown")) & 1) != 0)
  {
    goto LABEL_11;
  }
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Temperature")) & 1) == 0
    && (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeTemperature")) & 1) == 0)
  {
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("ChanceOfPrecipitation")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeChanceOfPrecipitation")) & 1) != 0)
    {
      v3 = 7;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("ChanceOfRain")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeChanceOfRain")) & 1) != 0)
    {
      v3 = 8;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("ChanceOfSnow")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeChanceOfSnow")) & 1) != 0)
    {
      v3 = 9;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CurrentTimeOfDay")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeCurrentTimeOfDay")) & 1) != 0)
    {
      v3 = 10;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CurrentDayOfWeek")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeCurrentDayOfWeek")) & 1) != 0)
    {
      v3 = 11;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromHereToDestination")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromHereToDestination")) & 1) != 0)
    {
      v3 = 13;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromHereToOrigin")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromHereToOrigin")) & 1) != 0)
    {
      v3 = 14;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromOriginToDestination")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromOriginToDestination")) & 1) != 0)
    {
      v3 = 15;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromHereToWork")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromHereToWork")) & 1) != 0)
    {
      v3 = 17;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromHereToHome")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromHereToHome")) & 1) != 0)
    {
      v3 = 16;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("DistanceFromHereToParkedCar")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeDistanceFromHereToParkedCar")) & 1) != 0)
    {
      v3 = 18;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("SecondsUntilStart")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeSecondsUntilStart")) & 1) != 0)
    {
      v3 = 2;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("SecondsUntilEnd")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeSecondsUntilEnd")) & 1) != 0)
    {
      v3 = 3;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("StartTime")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeStartTime")) & 1) != 0)
    {
      v3 = 4;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("EndTime")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeEndTime")) & 1) != 0)
    {
      v3 = 5;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("EntryType")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeEntryType")) & 1) != 0)
    {
      v3 = 1;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserPreferenceForTransportType")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUserPreferenceForTransportType")) & 1) != 0)
    {
      v3 = 19;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("CarPlayConnected")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeCarPlayConnected")) & 1) != 0)
    {
      v3 = 20;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("MapType")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeMapType")) & 1) != 0)
    {
      v3 = 21;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TransitCurrentlyPossible")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeTransitCurrentlyPossible")) & 1) != 0)
    {
      v3 = 22;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("RidesharingAppsInstalled")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeRidesharingAppsInstalled")) & 1) != 0)
    {
      v3 = 24;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TimeSinceMapsBackgrounded")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeTimeSinceMapsBackgrounded")) & 1) != 0)
    {
      v3 = 23;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TouristBit")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeTouristBit")) & 1) != 0)
    {
      v3 = 12;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("IsRaining")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeIsRaining")) & 1) != 0)
    {
      v3 = 26;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("IsSnowing")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeIsSnowing")) & 1) != 0)
    {
      v3 = 25;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("WeatherCondition")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeWeatherCondition")) & 1) != 0)
    {
      v3 = 27;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("HasTransitPass")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeHasTransitPass")) & 1) != 0)
    {
      v3 = 28;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("IsTransitAvailableHere")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeIsTransitAvailableHere")) & 1) != 0)
    {
      v3 = 33;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("HasFavoriteTransitPOI")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeHasFavoriteTransitPOI")) & 1) != 0)
    {
      v3 = 29;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("HasFavoriteTransitLine")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeHasFavoriteTransitLine")) & 1) != 0)
    {
      v3 = 30;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("HasRecentTransitRoute")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeHasRecentTransitRoute")) & 1) != 0)
    {
      v3 = 31;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("TimeSinceLastTransitRoute")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeTimeSinceLastTransitRoute")) & 1) != 0)
    {
      v3 = 32;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserHasExpressPaymentCard")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUserHasExpressPaymentCard")) & 1) != 0)
    {
      v3 = 34;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserHasPaymentCard")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUserHasPaymentCard")) & 1) != 0)
    {
      v3 = 35;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserHasAnUpcomingTrip")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUserHasAnUpcomingTrip")) & 1) != 0)
    {
      v3 = 36;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("UserIsCurrentlyInATrip")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeUserIsCurrentlyInATrip")) & 1) != 0)
    {
      v3 = 37;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("AirQualityIndex")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeAirQualityIndex")) & 1) != 0)
    {
      v3 = 38;
      goto LABEL_12;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("IsVehicleBluetoothConnected")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("MapsSuggestionsSignalTypeIsVehicleBluetoothConnected")) & 1) != 0)
    {
      v3 = 39;
      goto LABEL_12;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown MapsSuggestionsSignalType \"%@\""), v2);
    GEOFindOrCreateLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v8 = (const char *)v4;
      _os_log_impl(&dword_1A427D000, v6, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    goto LABEL_10;
  }
  v3 = 6;
LABEL_12:

  return v3;
}

void sub_1A439D060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double MapsSuggestionsShelfLifeForSignalType()
{
  return 3600.0;
}

void sub_1A439D260(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A439D59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A439D7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A439D93C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A859CACC](v2, 0x1012C405C87E9CELL);

  _Unwind_Resume(a1);
}

void sub_1A439DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  MEMORY[0x1A859CACC](v17, 0x1092C40D553986CLL);

  _Unwind_Resume(a1);
}

void sub_1A439DBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A439DC4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MSg::NotificationReceiver>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 32);
    if (v3)
    {
      notify_cancel(v3);
      *(_DWORD *)(v2 + 32) = 0;
    }
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));

    JUMPOUT(0x1A859CACCLL);
  }
  return result;
}

void sub_1A439DDEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A439DF58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A439E0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;
  void *v17;
  uint64_t v18;

  MEMORY[0x1A859CACC](v18, 0x1092C40D553986CLL);

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A439E3B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A439E43C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsIPCProcessName(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  audit_token_t audittoken;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  audit_token_t *p_audittoken;
  __int16 v16;
  int v17;
  int buffer;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v1 = (void *)MEMORY[0x1E0C80A78](a1);
  v26 = *MEMORY[0x1E0C80C00];
  v2 = v1;
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "processIdentifier");
    v5 = proc_pidpath_audittoken(&audittoken, &buffer, 0x1000u);
    if (v5 <= 0)
    {
      GEOFindOrCreateLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        v13 = v4;
        v14 = 2048;
        p_audittoken = &audittoken;
        v16 = 1024;
        v17 = v5;
        _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "Could not find process name for PID %d with auditToken %p. length: %d", buf, 0x18u);
      }

      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown PID %d"), v4);
    }
    else
    {
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", &buffer, v5, 4);
      objc_msgSend(v6, "lastPathComponent");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    GEOFindOrCreateLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      buffer = 136446978;
      v19 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsIPC.mm";
      v20 = 1024;
      v21 = 223;
      v22 = 2082;
      v23 = "NSString *MapsSuggestionsIPCProcessName(NSXPCConnection *__strong _Nonnull)";
      v24 = 2082;
      v25 = "nil == (connection)";
      _os_log_impl(&dword_1A427D000, v8, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an XPC connection", (uint8_t *)&buffer, 0x26u);
    }

    v7 = 0;
  }

  return v7;
}

void sub_1A439E6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MapsSuggestionsIPCPeerIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueForEntitlement:", CFSTR("application-identifier"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "length"))
    {
      v4 = v3;
    }
    else
    {
      MapsSuggestionsIPCProcessName((uint64_t)v2);
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    v6 = v4;

  }
  else
  {
    GEOFindOrCreateLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446978;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsIPC.mm";
      v10 = 1024;
      v11 = 241;
      v12 = 2082;
      v13 = "NSString *MapsSuggestionsIPCPeerIdentifier(NSXPCConnection *__strong _Nonnull)";
      v14 = 2082;
      v15 = "nil == (connection)";
      _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires an XPC connection", (uint8_t *)&v8, 0x26u);
    }

    v6 = 0;
  }

  return v6;
}

void sub_1A439E844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MapsSuggestionsIPCPayloadForNSString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "hash");
  }
  else
  {
    GEOFindOrCreateLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446978;
      v7 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsIPC.mm";
      v8 = 1024;
      v9 = 255;
      v10 = 2082;
      v11 = "uint64_t MapsSuggestionsIPCPayloadForNSString(NSString *__strong _Nonnull)";
      v12 = 2082;
      v13 = "0u == string";
      _os_log_impl(&dword_1A427D000, v4, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires a peer string", (uint8_t *)&v6, 0x26u);
    }

    v3 = 0;
  }

  return v3;
}

void sub_1A439E980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::default_delete<MSg::NotificationSender>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1A859CACCLL);
}

uint64_t MSg::NotificationReceiver::NotificationReceiver(uint64_t a1, __int128 *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  char *v10;
  __int128 v11;
  NSObject *v12;
  id v13;
  _QWORD v15[4];
  id v16;
  uint64_t v17;

  v7 = a3;
  v8 = a4;
  v9 = v7;
  *(_QWORD *)a1 = v9;
  v10 = (char *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v10 = v11;
  }
  if (*(char *)(a1 + 31) < 0)
    v10 = *(char **)v10;
  v12 = *(NSObject **)a1;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN3MSg20NotificationReceiverC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvNS_12NotificationEE_block_invoke;
  v15[3] = &unk_1E4BDF5B8;
  v17 = a1;
  v13 = v8;
  v16 = v13;
  notify_register_dispatch(v10, (int *)(a1 + 32), v12, v15);

  return a1;
}

void ___ZN3MSg20NotificationReceiverC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvNS_12NotificationEE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  std::string __p;
  int v12;
  uint64_t v13;
  uint64_t state64;
  uint8_t buf[4];
  _BYTE v16[10];
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  state64 = 0;
  notify_get_state(*(_DWORD *)(v4 + 32), &state64);
  GEOFindOrCreateLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v16 = v6;
    *(_WORD *)&v16[8] = 1024;
    v17 = a2;
    v18 = 2048;
    v19 = state64;
    _os_log_impl(&dword_1A427D000, v5, OS_LOG_TYPE_DEBUG, "Received Darwin notification '%s' (token %d, state %llu)", buf, 0x1Cu);
  }

  if (*(_DWORD *)(v4 + 32) != a2)
  {
    GEOFindOrCreateLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(v4 + 32);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v16 = v8;
      *(_WORD *)&v16[4] = 1024;
      *(_DWORD *)&v16[6] = a2;
      _os_log_impl(&dword_1A427D000, v7, OS_LOG_TYPE_DEBUG, "It may not have been for us: %d != %d, continuing", buf, 0xEu);
    }

  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    if (*(char *)(v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      v10 = *(_OWORD *)(v4 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    v12 = a2;
    v13 = state64;
    (*(void (**)(uint64_t, std::string *))(v9 + 16))(v9, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1A439ECC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A439F28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_1A439F338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A439F568(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A439F808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A439F96C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A439FC0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A439FEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43A0548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Queue::async<MapsSuggestionsPortraitRelevanceScoreProvider>(NSObject **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *a1;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK3MSg5Queue5asyncI45MapsSuggestionsPortraitRelevanceScoreProviderEEvPT_U13block_pointerFvS4_E_block_invoke;
    v10[3] = &unk_1E4BCE138;
    v11 = v7;
    v12 = v6;
    dispatch_async(v8, v10);

    v9 = v11;
  }
  else
  {
    GEOFindOrCreateLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsQueue.hpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2082;
      v18 = "void MSg::Queue::async(S *, void (^__strong)(S *)) const [S = MapsSuggestionsPortraitRelevanceScoreProvider]";
      v19 = 2082;
      v20 = "nil == (callerSelf)";
      _os_log_impl(&dword_1A427D000, v9, OS_LOG_TYPE_ERROR, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires self", buf, 0x26u);
    }
  }

}

void sub_1A43A0794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A0EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1A43A1334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZNK3MSg5Queue5asyncI45MapsSuggestionsPortraitRelevanceScoreProviderEEvPT_U13block_pointerFvS4_E_block_invoke(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(id *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    GEOFindOrCreateLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A427D000, v3, OS_LOG_TYPE_ERROR, "self went away in MSg::Queue::async()", v4, 2u);
    }

  }
}

void sub_1A43A1670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A17DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43A1908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MSg::Timer::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = a2[1];
  a2[1] = 0;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  v8 = objc_msgSend((id)a2[2], "copy");
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;

  v10 = a2[3];
  a2[3] = 0;
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  v12 = a2[4];
  a2[4] = 0;
  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;

  return a1;
}

void sub_1A43A1B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43A1C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MSg::Timer::schedule(MSg::Timer *this, const Duration *a2, const Duration *a3, const Duration *a4)
{
  NSObject *v8;
  dispatch_time_t v9;
  uint64_t v10;
  void *v11;

  v8 = *((_QWORD *)this + 3);
  v9 = dispatch_walltime(0, *(_QWORD *)a2);
  dispatch_source_set_timer(v8, v9, *(_QWORD *)a4, *(_QWORD *)a3);
  MapsSuggestionsNowWithOffset((double)*(uint64_t *)a2 / 1000000000.0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v10;

}

void MSg::Timer::unschedule(MSg::Timer *this)
{
  NSObject *v2;
  void *v3;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v3 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;

  }
}

void sub_1A43A1F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MSg::Timer::Timer(uint64_t a1, void *a2, id *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;

  v7 = a2;
  v8 = a4;
  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = a3[1];
  *(_QWORD *)(a1 + 16) = objc_msgSend(v7, "copy");
  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)a1);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = 0;
  dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler(*(dispatch_source_t *)(a1 + 24), v8);
  dispatch_resume(*(dispatch_object_t *)(a1 + 24));

  return a1;
}

void MSg::Timer::~Timer(id *this)
{
  MSg::Timer::unschedule((MSg::Timer *)this);

}

void sub_1A43A21FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A24A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A43A2650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A2814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A2A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A2C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A2E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A3044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A3274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A34F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A43A5ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A43A6BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A6F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A43A72E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A73D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  id *v17;

  objc_destroyWeak(v17);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A43A75CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43A7650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A43A76C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A78B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A43A7944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A43A79A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A7ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A43A89A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A91E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43A9954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43AA070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43AA78C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43AACB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A43AB1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1A43AB26C()
{
  return MEMORY[0x1E0CAB120]();
}

uint64_t sub_1A43AB278()
{
  return MEMORY[0x1E0CAB138]();
}

uint64_t sub_1A43AB284()
{
  return MEMORY[0x1E0CAB178]();
}

uint64_t sub_1A43AB290()
{
  return MEMORY[0x1E0CAB258]();
}

uint64_t sub_1A43AB29C()
{
  return MEMORY[0x1E0CAB310]();
}

uint64_t sub_1A43AB2A8()
{
  return MEMORY[0x1E0CAB318]();
}

uint64_t sub_1A43AB2B4()
{
  return MEMORY[0x1E0CACC98]();
}

uint64_t sub_1A43AB2C0()
{
  return MEMORY[0x1E0CACCA0]();
}

uint64_t sub_1A43AB2CC()
{
  return MEMORY[0x1E0CACCA8]();
}

uint64_t sub_1A43AB2D8()
{
  return MEMORY[0x1E0CACCB0]();
}

uint64_t sub_1A43AB2E4()
{
  return MEMORY[0x1E0CACCB8]();
}

uint64_t sub_1A43AB2F0()
{
  return MEMORY[0x1E0CACCC0]();
}

uint64_t sub_1A43AB2FC()
{
  return MEMORY[0x1E0CACCC8]();
}

uint64_t sub_1A43AB308()
{
  return MEMORY[0x1E0CACCD8]();
}

uint64_t sub_1A43AB314()
{
  return MEMORY[0x1E0CAD128]();
}

uint64_t sub_1A43AB320()
{
  return MEMORY[0x1E0CAD138]();
}

uint64_t sub_1A43AB32C()
{
  return MEMORY[0x1E0CAD148]();
}

uint64_t sub_1A43AB338()
{
  return MEMORY[0x1E0CADB90]();
}

uint64_t sub_1A43AB344()
{
  return MEMORY[0x1E0CADB98]();
}

uint64_t sub_1A43AB350()
{
  return MEMORY[0x1E0CADBA0]();
}

uint64_t sub_1A43AB35C()
{
  return MEMORY[0x1E0CADC08]();
}

uint64_t sub_1A43AB368()
{
  return MEMORY[0x1E0CADC10]();
}

uint64_t sub_1A43AB374()
{
  return MEMORY[0x1E0CAE618]();
}

uint64_t sub_1A43AB380()
{
  return MEMORY[0x1E0CAE648]();
}

uint64_t sub_1A43AB38C()
{
  return MEMORY[0x1E0CAEA80]();
}

uint64_t sub_1A43AB398()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t sub_1A43AB3A4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1A43AB3B0()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1A43AB3BC()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1A43AB3C8()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t sub_1A43AB3D4()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t sub_1A43AB3E0()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1A43AB3EC()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t sub_1A43AB3F8()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t sub_1A43AB404()
{
  return MEMORY[0x1E0CB06E8]();
}

uint64_t sub_1A43AB410()
{
  return MEMORY[0x1E0CB06F0]();
}

uint64_t sub_1A43AB41C()
{
  return MEMORY[0x1E0CB07B0]();
}

uint64_t sub_1A43AB428()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1A43AB434()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1A43AB440()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1A43AB44C()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1A43AB458()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_1A43AB464()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_1A43AB470()
{
  return MEMORY[0x1E0D213F8]();
}

uint64_t sub_1A43AB47C()
{
  return MEMORY[0x1E0D21400]();
}

uint64_t sub_1A43AB488()
{
  return MEMORY[0x1E0D21408]();
}

uint64_t sub_1A43AB494()
{
  return MEMORY[0x1E0D214F0]();
}

uint64_t sub_1A43AB4A0()
{
  return MEMORY[0x1E0D21508]();
}

uint64_t sub_1A43AB4AC()
{
  return MEMORY[0x1E0D21520]();
}

uint64_t sub_1A43AB4B8()
{
  return MEMORY[0x1E0D21528]();
}

uint64_t sub_1A43AB4C4()
{
  return MEMORY[0x1E0D21530]();
}

uint64_t sub_1A43AB4D0()
{
  return MEMORY[0x1E0D21538]();
}

uint64_t sub_1A43AB4DC()
{
  return MEMORY[0x1E0D21588]();
}

uint64_t sub_1A43AB4E8()
{
  return MEMORY[0x1E0D215E8]();
}

uint64_t sub_1A43AB4F4()
{
  return MEMORY[0x1E0D21600]();
}

uint64_t sub_1A43AB500()
{
  return MEMORY[0x1E0D21610]();
}

uint64_t sub_1A43AB50C()
{
  return MEMORY[0x1E0D21620]();
}

uint64_t sub_1A43AB518()
{
  return MEMORY[0x1E0D21640]();
}

uint64_t sub_1A43AB524()
{
  return MEMORY[0x1E0D21648]();
}

uint64_t sub_1A43AB530()
{
  return MEMORY[0x1E0D21668]();
}

uint64_t sub_1A43AB53C()
{
  return MEMORY[0x1E0D21670]();
}

uint64_t sub_1A43AB548()
{
  return MEMORY[0x1E0D21678]();
}

uint64_t sub_1A43AB554()
{
  return MEMORY[0x1E0D21680]();
}

uint64_t sub_1A43AB560()
{
  return MEMORY[0x1E0D21688]();
}

uint64_t sub_1A43AB56C()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1A43AB578()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1A43AB584()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1A43AB590()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1A43AB59C()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1A43AB5A8()
{
  return MEMORY[0x1E0DEF570]();
}

uint64_t sub_1A43AB5B4()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1A43AB5C0()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1A43AB5CC()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1A43AB5D8()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1A43AB5E4()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_1A43AB5F0()
{
  return MEMORY[0x1E0DEF750]();
}

uint64_t sub_1A43AB5FC()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_1A43AB608()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1A43AB614()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1A43AB620()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1A43AB62C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1A43AB638()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1A43AB644()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1A43AB650()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1A43AB65C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1A43AB668()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1A43AB674()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1A43AB680()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1A43AB68C()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1A43AB698()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1A43AB6A4()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1A43AB6B0()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1A43AB6BC()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1A43AB6C8()
{
  return MEMORY[0x1E0DEADF0]();
}

uint64_t sub_1A43AB6D4()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1A43AB6E0()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1A43AB6EC()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1A43AB6F8()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1A43AB704()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1A43AB710()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1A43AB71C()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1A43AB728()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1A43AB734()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1A43AB740()
{
  return MEMORY[0x1E0DEF7E0]();
}

uint64_t sub_1A43AB74C()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1A43AB758()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t sub_1A43AB764()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1A43AB770()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1A43AB77C()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t sub_1A43AB788()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1A43AB794()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1A43AB7A0()
{
  return MEMORY[0x1E0DEFA68]();
}

uint64_t sub_1A43AB7AC()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1A43AB7B8()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1A43AB7C4()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1A43AB7D0()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1A43AB7DC()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1A43AB7E8()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1A43AB7F4()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_1A43AB800()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1A43AB80C()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1A43AB818()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1A43AB824()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1A43AB830()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1A43AB83C()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1A43AB848()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1A43AB854()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1A43AB860()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1A43AB86C()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1A43AB878()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_1A43AB884()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t sub_1A43AB890()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1A43AB89C()
{
  return MEMORY[0x1E0DECBC0]();
}

uint64_t sub_1A43AB8A8()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1A43AB8B4()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1A43AB8C0()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1A43AB8CC()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1A43AB8D8()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t sub_1A43AB8E4()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1A43AB8F0()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1A43AB8FC()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1A43AB908()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_1A43AB914()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1A43AB920()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1A43AB92C()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1A43AB938()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1A43AB944()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1A43AB950()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1A43AB95C()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t BMFindMyContactActivityEventTypeAsString()
{
  return MEMORY[0x1E0D01D70]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

uint64_t CLLocationCoordinate2DGetDistanceFrom()
{
  return MEMORY[0x1E0C9E2F8]();
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x1E0C9E300]((__n128)coord, *(__n128 *)&coord.longitude);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t GEOCalculateDistance()
{
  return MEMORY[0x1E0D26458]();
}

uint64_t GEOConfigGetBOOL()
{
  return MEMORY[0x1E0D26498]();
}

uint64_t GEOConfigGetDictionary()
{
  return MEMORY[0x1E0D264A8]();
}

uint64_t GEOConfigGetDouble()
{
  return MEMORY[0x1E0D264B0]();
}

uint64_t GEOConfigGetInteger()
{
  return MEMORY[0x1E0D264B8]();
}

uint64_t GEOConfigGetString()
{
  return MEMORY[0x1E0D264C8]();
}

uint64_t GEOConfigRemoveBlockListener()
{
  return MEMORY[0x1E0D264F0]();
}

uint64_t GEOConfigSetBOOL()
{
  return MEMORY[0x1E0D26508]();
}

uint64_t GEOConfigSetDictionary()
{
  return MEMORY[0x1E0D26510]();
}

uint64_t GEOConfigSetString()
{
  return MEMORY[0x1E0D26520]();
}

uint64_t GEODoesUserHaveValidAccountForMakingContributions()
{
  return MEMORY[0x1E0D26570]();
}

uint64_t GEOErrorDomain()
{
  return MEMORY[0x1E0D26578]();
}

uint64_t GEOFindOrCreateLog()
{
  return MEMORY[0x1E0D265D0]();
}

uint64_t GEOGetUserTransportTypePreference()
{
  return MEMORY[0x1E0D265F8]();
}

uint64_t GEOIsFeatureActive()
{
  return MEMORY[0x1E0D26610]();
}

uint64_t GEOMapPointForCoordinate()
{
  return MEMORY[0x1E0D26670]();
}

uint64_t GEOMapRectContainsPoint()
{
  return MEMORY[0x1E0D26690]();
}

uint64_t GEOMapRectForMapRegion()
{
  return MEMORY[0x1E0D266A8]();
}

uint64_t GEOMapRectIntersectsRect()
{
  return MEMORY[0x1E0D266B8]();
}

uint64_t GEOMapRectIsEmpty()
{
  return MEMORY[0x1E0D266C0]();
}

uint64_t IsEVRoutingSupported()
{
  return MEMORY[0x1E0DC6BC8]();
}

uint64_t MapsFeature_IsEnabled_EVRouting()
{
  return MEMORY[0x1E0D26D50]();
}

uint64_t MapsFeature_IsEnabled_LagunaBeach()
{
  return MEMORY[0x1E0D26D68]();
}

uint64_t MapsFeature_IsEnabled_MapsWally()
{
  return MEMORY[0x1E0D26D88]();
}

uint64_t MapsFeature_IsEnabled_MyPlacesFeatures()
{
  return MEMORY[0x1E0D26D90]();
}

uint64_t MapsFeature_IsEnabled_OrderPickup()
{
  return MEMORY[0x1E0D26D98]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFPreferencesGetAppBooleanValueWithContainer()
{
  return MEMORY[0x1E0C9A330]();
}

uint64_t _GEOConfigAddBlockListenerForKey()
{
  return MEMORY[0x1E0D277B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E4BCBFC0(__p);
}

uint64_t operator delete()
{
  return off_1E4BCBFC8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E4BCBFD0(__sz);
}

uint64_t operator new()
{
  return off_1E4BCBFD8();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1E0DE7AB0](cls);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_pidpath_audittoken(audit_token_t *audittoken, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C58](audittoken, buffer, *(_QWORD *)&buffersize);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

