uint64_t getEnumTagSinglePayload for MemojiDescriptor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8953))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MemojiDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 8953);
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8952) = 0;
    *(_OWORD *)(result + 8440) = 0u;
    *(_OWORD *)(result + 8424) = 0u;
    *(_OWORD *)(result + 8408) = 0u;
    *(_OWORD *)(result + 8392) = 0u;
    *(_OWORD *)(result + 8376) = 0u;
    *(_OWORD *)(result + 8360) = 0u;
    *(_OWORD *)(result + 8344) = 0u;
    *(_OWORD *)(result + 8328) = 0u;
    *(_OWORD *)(result + 8312) = 0u;
    *(_OWORD *)(result + 8296) = 0u;
    *(_OWORD *)(result + 8280) = 0u;
    *(_OWORD *)(result + 8264) = 0u;
    *(_OWORD *)(result + 8248) = 0u;
    *(_OWORD *)(result + 8232) = 0u;
    *(_OWORD *)(result + 8216) = 0u;
    *(_OWORD *)(result + 8200) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8936) = 0u;
    *(_OWORD *)(result + 8920) = 0u;
    *(_OWORD *)(result + 8904) = 0u;
    *(_OWORD *)(result + 8888) = 0u;
    *(_OWORD *)(result + 8872) = 0u;
    *(_OWORD *)(result + 8856) = 0u;
    *(_OWORD *)(result + 8840) = 0u;
    *(_OWORD *)(result + 8824) = 0u;
    *(_OWORD *)(result + 8808) = 0u;
    *(_OWORD *)(result + 8792) = 0u;
    *(_OWORD *)(result + 8776) = 0u;
    *(_OWORD *)(result + 8760) = 0u;
    *(_OWORD *)(result + 8744) = 0u;
    *(_OWORD *)(result + 8728) = 0u;
    *(_OWORD *)(result + 8712) = 0u;
    *(_OWORD *)(result + 8696) = 0u;
    *(_OWORD *)(result + 8680) = 0u;
    *(_OWORD *)(result + 8664) = 0u;
    *(_OWORD *)(result + 8648) = 0u;
    *(_OWORD *)(result + 8632) = 0u;
    *(_OWORD *)(result + 8616) = 0u;
    *(_OWORD *)(result + 8600) = 0u;
    *(_OWORD *)(result + 8584) = 0u;
    *(_OWORD *)(result + 8568) = 0u;
    *(_OWORD *)(result + 8552) = 0u;
    *(_OWORD *)(result + 8536) = 0u;
    *(_OWORD *)(result + 8520) = 0u;
    *(_OWORD *)(result + 8504) = 0u;
    *(_OWORD *)(result + 8488) = 0u;
    *(_OWORD *)(result + 8472) = 0u;
    *(_OWORD *)(result + 8456) = 0u;
    *(_OWORD *)(result + 8184) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    if (a3 >= 0x7FFFFFFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *v3 = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemojiDescriptor()
{
  return &type metadata for MemojiDescriptor;
}

_QWORD *destroy for MemojiDescriptor.CategoryDescriptor(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
  {
    swift_release();
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  if (v1[4])
  {
    swift_release();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_release();
  }
  if (v1[12])
  {
    swift_release();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_release();
  }
  if (v1[20])
  {
    swift_release();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for MemojiDescriptor.CategoryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  v13 = *(_QWORD *)(a2 + 96);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 104);
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v16 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v16;
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  }
  v18 = *(_QWORD *)(a2 + 160);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 168);
    v20 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = v19;
    *(_QWORD *)(a1 + 176) = v20;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    v21 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v21;
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  }
  return a1;
}

uint64_t assignWithCopy for MemojiDescriptor.CategoryDescriptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AD3C2B58(a1);
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (_OWORD *)(a1 + 32);
  v11 = (__int128 *)(a2 + 4);
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v12 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v12;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v13;
      swift_retain();
      swift_release();
      v14 = a2[10];
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      *(_QWORD *)(a1 + 80) = v14;
    }
    else
    {
      sub_1AD3C2B88(a1 + 32);
      v19 = *((_OWORD *)a2 + 3);
      v18 = *((_OWORD *)a2 + 4);
      v20 = *v11;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
      *(_OWORD *)(a1 + 48) = v19;
      *(_OWORD *)(a1 + 64) = v18;
      *v9 = v20;
    }
  }
  else if (v10)
  {
    v15 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = a2[7];
    v16 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v16;
    v17 = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 80) = v17;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v21 = *v11;
    v22 = *((_OWORD *)a2 + 3);
    v23 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
    *(_OWORD *)(a1 + 48) = v22;
    *(_OWORD *)(a1 + 64) = v23;
    *v9 = v21;
  }
  v24 = (_OWORD *)(a1 + 96);
  v26 = (__int128 *)(a2 + 12);
  v25 = a2[12];
  if (*(_QWORD *)(a1 + 96))
  {
    if (v25)
    {
      v27 = a2[13];
      *(_QWORD *)(a1 + 96) = v25;
      *(_QWORD *)(a1 + 104) = v27;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v28 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v28;
      swift_retain();
      swift_release();
      v29 = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_QWORD *)(a1 + 144) = v29;
    }
    else
    {
      sub_1AD3C2B88(a1 + 96);
      v34 = *((_OWORD *)a2 + 7);
      v33 = *((_OWORD *)a2 + 8);
      v35 = *v26;
      *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
      *(_OWORD *)(a1 + 112) = v34;
      *(_OWORD *)(a1 + 128) = v33;
      *v24 = v35;
    }
  }
  else if (v25)
  {
    v30 = a2[13];
    *(_QWORD *)(a1 + 96) = v25;
    *(_QWORD *)(a1 + 104) = v30;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = a2[15];
    v31 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v31;
    v32 = a2[18];
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_QWORD *)(a1 + 144) = v32;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v36 = *v26;
    v37 = *((_OWORD *)a2 + 7);
    v38 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)(a1 + 112) = v37;
    *(_OWORD *)(a1 + 128) = v38;
    *v24 = v36;
  }
  v39 = (_OWORD *)(a1 + 160);
  v41 = (__int128 *)(a2 + 20);
  v40 = a2[20];
  if (*(_QWORD *)(a1 + 160))
  {
    if (v40)
    {
      v42 = a2[21];
      *(_QWORD *)(a1 + 160) = v40;
      *(_QWORD *)(a1 + 168) = v42;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_QWORD *)(a1 + 184) = a2[23];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v43 = a2[25];
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_QWORD *)(a1 + 200) = v43;
      swift_retain();
      swift_release();
      v44 = a2[26];
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 208) = v44;
    }
    else
    {
      sub_1AD3C2B88(a1 + 160);
      v49 = *((_OWORD *)a2 + 11);
      v48 = *((_OWORD *)a2 + 12);
      v50 = *v41;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
      *(_OWORD *)(a1 + 176) = v49;
      *(_OWORD *)(a1 + 192) = v48;
      *v39 = v50;
    }
  }
  else if (v40)
  {
    v45 = a2[21];
    *(_QWORD *)(a1 + 160) = v40;
    *(_QWORD *)(a1 + 168) = v45;
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = a2[23];
    v46 = a2[25];
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = v46;
    v47 = a2[26];
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(_QWORD *)(a1 + 208) = v47;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v51 = *v41;
    v52 = *((_OWORD *)a2 + 11);
    v53 = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
    *(_OWORD *)(a1 + 176) = v52;
    *(_OWORD *)(a1 + 192) = v53;
    *v39 = v51;
  }
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for MemojiDescriptor.CategoryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_release();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1AD3C2B58(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v8;
      swift_release();
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v9;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      swift_release();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      goto LABEL_11;
    }
    sub_1AD3C2B88(a1 + 32);
  }
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
LABEL_11:
  v11 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v11;
      *(_QWORD *)(a1 + 104) = v12;
      swift_release();
      v13 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v13;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      swift_release();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      goto LABEL_16;
    }
    sub_1AD3C2B88(a1 + 96);
  }
  v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
LABEL_16:
  v15 = *(_QWORD *)(a2 + 160);
  if (!*(_QWORD *)(a1 + 160))
  {
LABEL_20:
    v18 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v18;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    return a1;
  }
  if (!v15)
  {
    sub_1AD3C2B88(a1 + 160);
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v15;
  *(_QWORD *)(a1 + 168) = v16;
  swift_release();
  v17 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v17;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for MemojiDescriptor.CategoryDescriptor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 217))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MemojiDescriptor.CategoryDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 216) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemojiDescriptor.CategoryDescriptor()
{
  return &type metadata for MemojiDescriptor.CategoryDescriptor;
}

ValueMetadata *type metadata accessor for MemojiDescriptor.CategoryDescriptor.Preset()
{
  return &type metadata for MemojiDescriptor.CategoryDescriptor.Preset;
}

uint64_t destroy for MemojiDescriptor.CategoryDescriptor.Color()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MemojiDescriptor.CategoryDescriptor.Color(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MemojiDescriptor.CategoryDescriptor.Color(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithTake for MemojiDescriptor.CategoryDescriptor.Color(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for MemojiDescriptor.CategoryDescriptor.Color()
{
  return &type metadata for MemojiDescriptor.CategoryDescriptor.Color;
}

uint64_t destroy for AvatarRecord()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for AvatarRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AvatarRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AvatarRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AvatarRecord()
{
  return &type metadata for AvatarRecord;
}

uint64_t destroy for MemojiPoster(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t result;

  if (a1[7])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
    v2 = a1[14];
    v3 = a1[16];
    v4 = a1[18];
    v5 = a1[20];
    v6 = a1[24];
    v7 = a1[26];
    v8 = a1[28];
    v9 = v2 >> 1 != 0xFFFFFFFF || (v4 | (unint64_t)v3) > 1;
    v10 = !v9 && (v6 & 0xFFFFFFFFFFFFFEFELL | v5 & 0xFFFFFFFFFFFF00FELL) == 0;
    if (!v10 || (v8 | v7) >= 2)
      sub_1AD00E8B0(a1[11], a1[12], a1[13], v2, a1[15], v3, a1[17], v4, a1[19], v5, a1[21], a1[22], a1[23], v6, a1[25], v7, a1[27], v8, a1[29],
        a1[30],
        a1[31],
        a1[32],
        a1[33],
        a1[34]);
  }
  result = sub_1AD00E8B0(a1[35], a1[36], a1[37], a1[38], a1[39], a1[40], a1[41], a1[42], a1[43], a1[44], a1[45], a1[46], a1[47], a1[48], a1[49], a1[50], a1[51], a1[52], a1[53],
             a1[54],
             a1[55],
             a1[56],
             a1[57],
             a1[58]);
  if (a1[59])
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for MemojiPoster(uint64_t a1, __int128 *a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;

  v5 = *a2;
  v6 = a2[1];
  v4 = a2 + 2;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = a1 + 32;
  v8 = *((_QWORD *)a2 + 7);
  if (v8)
  {
    v9 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v7, (uint64_t)v4);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v10 = *((_QWORD *)a2 + 14);
    v11 = *((_QWORD *)a2 + 16);
    v12 = *((_QWORD *)a2 + 18);
    v13 = *((_QWORD *)a2 + 28);
    if (v10 >> 1 != 0xFFFFFFFF
      || (v12 | (unint64_t)v11) > 1
      || a2[12] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)a2[10] & 0xFFFFFFFFFFFF00FELL
      || (v13 | *((_QWORD *)a2 + 26)) >= 2)
    {
      v27 = *((_QWORD *)a2 + 12);
      v28 = *((_QWORD *)a2 + 15);
      v49 = *((_QWORD *)a2 + 19);
      v53 = *((_QWORD *)a2 + 21);
      v59 = *((_QWORD *)a2 + 22);
      v61 = *((_QWORD *)a2 + 23);
      v63 = *((_QWORD *)a2 + 25);
      v65 = *((_QWORD *)a2 + 27);
      v67 = *((_QWORD *)a2 + 29);
      v69 = *((_QWORD *)a2 + 30);
      v71 = *((_QWORD *)a2 + 31);
      v73 = *((_QWORD *)a2 + 32);
      v75 = *((_QWORD *)a2 + 33);
      v77 = *((_QWORD *)a2 + 34);
      v55 = *((_QWORD *)a2 + 24);
      v57 = *((_QWORD *)a2 + 26);
      v29 = *((_QWORD *)a2 + 11);
      v47 = *((_QWORD *)a2 + 20);
      v30 = *((_QWORD *)a2 + 13);
      v51 = *((_QWORD *)a2 + 28);
      v31 = *((_QWORD *)a2 + 17);
      sub_1AD00FEAC(v29, v27, v30, v10, v28, v11, v31, v12, v49, v47, v53, v59, v61, v55, v63, v57, v65, v13, v67,
        v69,
        v71,
        v73,
        v75,
        v77);
      *(_QWORD *)(a1 + 88) = v29;
      *(_QWORD *)(a1 + 96) = v27;
      *(_QWORD *)(a1 + 104) = v30;
      *(_QWORD *)(a1 + 112) = v10;
      *(_QWORD *)(a1 + 120) = v28;
      *(_QWORD *)(a1 + 128) = v11;
      *(_QWORD *)(a1 + 136) = v31;
      *(_QWORD *)(a1 + 144) = v12;
      *(_QWORD *)(a1 + 152) = v49;
      *(_QWORD *)(a1 + 160) = v47;
      *(_QWORD *)(a1 + 168) = v53;
      *(_QWORD *)(a1 + 176) = v59;
      *(_QWORD *)(a1 + 184) = v61;
      *(_QWORD *)(a1 + 192) = v55;
      *(_QWORD *)(a1 + 200) = v63;
      *(_QWORD *)(a1 + 208) = v57;
      *(_QWORD *)(a1 + 216) = v65;
      *(_QWORD *)(a1 + 224) = v51;
      *(_QWORD *)(a1 + 232) = v67;
      *(_QWORD *)(a1 + 240) = v69;
      *(_QWORD *)(a1 + 248) = v71;
      *(_QWORD *)(a1 + 256) = v73;
      *(_QWORD *)(a1 + 264) = v75;
      *(_QWORD *)(a1 + 272) = v77;
    }
    else
    {
      v14 = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = v14;
      v15 = *(__int128 *)((char *)a2 + 264);
      *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
      *(_OWORD *)(a1 + 264) = v15;
      v16 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = v16;
      v17 = *(__int128 *)((char *)a2 + 200);
      *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
      *(_OWORD *)(a1 + 200) = v17;
      v18 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = v18;
      v19 = *(__int128 *)((char *)a2 + 136);
      *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 136) = v19;
    }
  }
  else
  {
    v20 = v4[13];
    *(_OWORD *)(v7 + 192) = v4[12];
    *(_OWORD *)(v7 + 208) = v20;
    *(_OWORD *)(v7 + 224) = v4[14];
    *(_QWORD *)(v7 + 240) = *((_QWORD *)v4 + 30);
    v21 = v4[9];
    *(_OWORD *)(v7 + 128) = v4[8];
    *(_OWORD *)(v7 + 144) = v21;
    v22 = v4[11];
    *(_OWORD *)(v7 + 160) = v4[10];
    *(_OWORD *)(v7 + 176) = v22;
    v23 = v4[5];
    *(_OWORD *)(v7 + 64) = v4[4];
    *(_OWORD *)(v7 + 80) = v23;
    v24 = v4[7];
    *(_OWORD *)(v7 + 96) = v4[6];
    *(_OWORD *)(v7 + 112) = v24;
    v25 = v4[1];
    *(_OWORD *)v7 = *v4;
    *(_OWORD *)(v7 + 16) = v25;
    v26 = v4[3];
    *(_OWORD *)(v7 + 32) = v4[2];
    *(_OWORD *)(v7 + 48) = v26;
  }
  v32 = *((_QWORD *)a2 + 40);
  v33 = *((_QWORD *)a2 + 41);
  v48 = *((_QWORD *)a2 + 43);
  v50 = *((_QWORD *)a2 + 44);
  v52 = *((_QWORD *)a2 + 45);
  v54 = *((_QWORD *)a2 + 46);
  v56 = *((_QWORD *)a2 + 47);
  v58 = *((_QWORD *)a2 + 48);
  v60 = *((_QWORD *)a2 + 49);
  v62 = *((_QWORD *)a2 + 50);
  v64 = *((_QWORD *)a2 + 51);
  v66 = *((_QWORD *)a2 + 52);
  v68 = *((_QWORD *)a2 + 53);
  v70 = *((_QWORD *)a2 + 54);
  v72 = *((_QWORD *)a2 + 55);
  v74 = *((_QWORD *)a2 + 56);
  v76 = *((_QWORD *)a2 + 57);
  v78 = *((_QWORD *)a2 + 58);
  v34 = *((_QWORD *)a2 + 35);
  v35 = *((_QWORD *)a2 + 36);
  v36 = *((_QWORD *)a2 + 37);
  v37 = *((_QWORD *)a2 + 38);
  v38 = *((_QWORD *)a2 + 39);
  v39 = *((_QWORD *)a2 + 42);
  sub_1AD00FEAC(v34, v35, v36, v37, v38, v32, v33, v39, v48, v50, v52, v54, v56, v58, v60, v62, v64, v66, v68,
    v70,
    v72,
    v74,
    v76,
    v78);
  *(_QWORD *)(a1 + 280) = v34;
  *(_QWORD *)(a1 + 288) = v35;
  *(_QWORD *)(a1 + 296) = v36;
  *(_QWORD *)(a1 + 304) = v37;
  *(_QWORD *)(a1 + 312) = v38;
  *(_QWORD *)(a1 + 320) = v32;
  *(_QWORD *)(a1 + 328) = v33;
  *(_QWORD *)(a1 + 336) = v39;
  *(_QWORD *)(a1 + 344) = v48;
  *(_QWORD *)(a1 + 352) = v50;
  *(_QWORD *)(a1 + 360) = v52;
  *(_QWORD *)(a1 + 368) = v54;
  *(_QWORD *)(a1 + 376) = v56;
  *(_QWORD *)(a1 + 384) = v58;
  *(_QWORD *)(a1 + 392) = v60;
  *(_QWORD *)(a1 + 400) = v62;
  *(_QWORD *)(a1 + 408) = v64;
  *(_QWORD *)(a1 + 416) = v66;
  *(_QWORD *)(a1 + 424) = v68;
  *(_QWORD *)(a1 + 432) = v70;
  *(_QWORD *)(a1 + 440) = v72;
  *(_QWORD *)(a1 + 448) = v74;
  *(_QWORD *)(a1 + 456) = v76;
  *(_QWORD *)(a1 + 464) = v78;
  v40 = *((_QWORD *)a2 + 59);
  if (v40)
  {
    v41 = *((_QWORD *)a2 + 60);
    v42 = *((_QWORD *)a2 + 61);
    *(_QWORD *)(a1 + 472) = v40;
    *(_QWORD *)(a1 + 480) = v41;
    v44 = *((_QWORD *)a2 + 62);
    v43 = *((_QWORD *)a2 + 63);
    *(_QWORD *)(a1 + 488) = v42;
    *(_QWORD *)(a1 + 496) = v44;
    *(_QWORD *)(a1 + 504) = v43;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v45 = *(__int128 *)((char *)a2 + 488);
    *(_OWORD *)(a1 + 472) = *(__int128 *)((char *)a2 + 472);
    *(_OWORD *)(a1 + 488) = v45;
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
  }
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  return a1;
}

uint64_t assignWithCopy for MemojiPoster(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = a1 + 32;
  v5 = (__int128 *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (!v6)
    {
      sub_1AD046A30((_QWORD *)(a1 + 32));
      v44 = v5[3];
      v46 = *v5;
      v45 = v5[1];
      *(_OWORD *)(v4 + 32) = v5[2];
      *(_OWORD *)(v4 + 48) = v44;
      *(_OWORD *)v4 = v46;
      *(_OWORD *)(v4 + 16) = v45;
      v47 = v5[7];
      v49 = v5[4];
      v48 = v5[5];
      *(_OWORD *)(v4 + 96) = v5[6];
      *(_OWORD *)(v4 + 112) = v47;
      *(_OWORD *)(v4 + 64) = v49;
      *(_OWORD *)(v4 + 80) = v48;
      v50 = v5[11];
      v52 = v5[8];
      v51 = v5[9];
      *(_OWORD *)(v4 + 160) = v5[10];
      *(_OWORD *)(v4 + 176) = v50;
      *(_OWORD *)(v4 + 128) = v52;
      *(_OWORD *)(v4 + 144) = v51;
      v54 = v5[13];
      v53 = v5[14];
      v55 = v5[12];
      *(_QWORD *)(v4 + 240) = *((_QWORD *)v5 + 30);
      *(_OWORD *)(v4 + 208) = v54;
      *(_OWORD *)(v4 + 224) = v53;
      *(_OWORD *)(v4 + 192) = v55;
      goto LABEL_35;
    }
    __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
    v7 = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    v8 = (_OWORD *)(a1 + 88);
    v9 = (__int128 *)(a2 + 88);
    v10 = *(_QWORD *)(a2 + 112);
    v11 = *(_QWORD *)(a2 + 128);
    v12 = *(_QWORD *)(a2 + 144);
    v13 = *(_QWORD *)(a2 + 160);
    v14 = *(_QWORD *)(a2 + 192);
    v15 = *(_QWORD *)(a2 + 208);
    v16 = *(_QWORD *)(a2 + 224);
    v20 = v10 >> 1 == 0xFFFFFFFF
       && (v12 | (unint64_t)v11) < 2
       && (v14 & 0xFFFFFFFFFFFFFEFELL | v13 & 0xFFFFFFFFFFFF00FELL) == 0
       && (v16 | v15) < 2;
    if (*(_QWORD *)(a1 + 112) >> 1 != 0xFFFFFFFFLL
      || (*(_QWORD *)(a1 + 144) | *(_QWORD *)(a1 + 128)) > 1
      || *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFF00FELL
      || (*(_QWORD *)(a1 + 224) | *(_QWORD *)(a1 + 208)) >= 2)
    {
      if (v20)
      {
        sub_1AD148B34(a1 + 88);
        v56 = *(_OWORD *)(a2 + 136);
        v58 = *v9;
        v57 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 136) = v56;
        *v8 = v58;
        *(_OWORD *)(a1 + 104) = v57;
        v59 = *(_OWORD *)(a2 + 200);
        v61 = *(_OWORD *)(a2 + 152);
        v60 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 200) = v59;
        *(_OWORD *)(a1 + 152) = v61;
        *(_OWORD *)(a1 + 168) = v60;
        v62 = *(_OWORD *)(a2 + 264);
        v64 = *(_OWORD *)(a2 + 216);
        v63 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = v62;
        *(_OWORD *)(a1 + 216) = v64;
        *(_OWORD *)(a1 + 232) = v63;
      }
      else
      {
        v144 = *(_QWORD *)(a2 + 96);
        v148 = *(_QWORD *)(a2 + 88);
        v140 = *(_QWORD *)(a2 + 104);
        v83 = *(_QWORD *)(a2 + 120);
        v84 = *(_QWORD *)(a2 + 136);
        v152 = *(_QWORD *)(a2 + 152);
        v156 = *(_QWORD *)(a2 + 168);
        v160 = *(_QWORD *)(a2 + 176);
        v164 = *(_QWORD *)(a2 + 184);
        v168 = *(_QWORD *)(a2 + 200);
        v172 = *(_QWORD *)(a2 + 216);
        v176 = *(_QWORD *)(a2 + 232);
        v180 = *(_QWORD *)(a2 + 240);
        v184 = *(_QWORD *)(a2 + 248);
        v188 = *(_QWORD *)(a2 + 256);
        v192 = *(_QWORD *)(a2 + 264);
        v196 = *(_QWORD *)(a2 + 272);
        v200 = *(_QWORD *)(a2 + 224);
        sub_1AD00FEAC(v148, v144, v140, v10, v83, v11, v84, v12, v152, v13, v156, v160, v164, v14, v168, v15, v172, v16, v176,
          v180,
          v184,
          v188,
          v192,
          v196);
        v85 = *(_QWORD *)(a1 + 88);
        v86 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 88) = v148;
        *(_QWORD *)(a1 + 96) = v144;
        v87 = *(_QWORD *)(a1 + 104);
        v88 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 104) = v140;
        *(_QWORD *)(a1 + 112) = v10;
        v89 = *(_QWORD *)(a1 + 120);
        v90 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 120) = v83;
        *(_QWORD *)(a1 + 128) = v11;
        v91 = *(_QWORD *)(a1 + 136);
        v92 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 136) = v84;
        *(_QWORD *)(a1 + 144) = v12;
        v93 = *(_OWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v152;
        *(_QWORD *)(a1 + 160) = v13;
        v94 = *(_OWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v156;
        *(_QWORD *)(a1 + 176) = v160;
        v95 = *(_OWORD *)(a1 + 184);
        *(_QWORD *)(a1 + 184) = v164;
        *(_QWORD *)(a1 + 192) = v14;
        v96 = *(_OWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 200) = v168;
        *(_QWORD *)(a1 + 208) = v15;
        v97 = *(_OWORD *)(a1 + 216);
        *(_QWORD *)(a1 + 216) = v172;
        *(_QWORD *)(a1 + 224) = v200;
        v98 = *(_OWORD *)(a1 + 232);
        *(_QWORD *)(a1 + 232) = v176;
        *(_QWORD *)(a1 + 240) = v180;
        v99 = *(_OWORD *)(a1 + 248);
        *(_QWORD *)(a1 + 248) = v184;
        *(_QWORD *)(a1 + 256) = v188;
        v100 = *(_QWORD *)(a1 + 264);
        v101 = *(_QWORD *)(a1 + 272);
        *(_QWORD *)(a1 + 264) = v192;
        *(_QWORD *)(a1 + 272) = v196;
        sub_1AD00E8B0(v85, v86, v87, v88, v89, v90, v91, v92, v93, *((uint64_t *)&v93 + 1), v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1), v96, *((uint64_t *)&v96 + 1), v97, *((unint64_t *)&v97 + 1), v98,
          *((uint64_t *)&v98 + 1),
          v99,
          *((uint64_t *)&v99 + 1),
          v100,
          v101);
      }
      goto LABEL_35;
    }
    if (v20)
    {
      v21 = *v9;
      v22 = *(_OWORD *)(a2 + 104);
      v23 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v23;
      *v8 = v21;
      *(_OWORD *)(a1 + 104) = v22;
      v24 = *(_OWORD *)(a2 + 152);
      v25 = *(_OWORD *)(a2 + 168);
      v26 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v26;
      *(_OWORD *)(a1 + 152) = v24;
      *(_OWORD *)(a1 + 168) = v25;
      v27 = *(_OWORD *)(a2 + 216);
      v28 = *(_OWORD *)(a2 + 232);
      v29 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v29;
      *(_OWORD *)(a1 + 216) = v27;
      *(_OWORD *)(a1 + 232) = v28;
      goto LABEL_35;
    }
    v145 = *(_QWORD *)(a2 + 96);
    v149 = *(_QWORD *)(a2 + 88);
    v141 = *(_QWORD *)(a2 + 104);
    v102 = *(_QWORD *)(a2 + 120);
    v103 = *(_QWORD *)(a2 + 136);
    v153 = *(_QWORD *)(a2 + 152);
    v157 = *(_QWORD *)(a2 + 168);
    v161 = *(_QWORD *)(a2 + 176);
    v165 = *(_QWORD *)(a2 + 184);
    v169 = *(_QWORD *)(a2 + 200);
    v173 = *(_QWORD *)(a2 + 216);
    v177 = *(_QWORD *)(a2 + 232);
    v181 = *(_QWORD *)(a2 + 240);
    v185 = *(_QWORD *)(a2 + 248);
    v189 = *(_QWORD *)(a2 + 256);
    v193 = *(_QWORD *)(a2 + 264);
    v197 = *(_QWORD *)(a2 + 272);
    v201 = *(_QWORD *)(a2 + 224);
    sub_1AD00FEAC(v149, v145, v141, v10, v102, v11, v103, v12, v153, v13, v157, v161, v165, v14, v169, v15, v173, v16, v177,
      v181,
      v185,
      v189,
      v193,
      v197);
    *(_QWORD *)(a1 + 88) = v149;
    *(_QWORD *)(a1 + 96) = v145;
    *(_QWORD *)(a1 + 104) = v141;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v102;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v103;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)(a1 + 152) = v153;
    *(_QWORD *)(a1 + 160) = v13;
    *(_QWORD *)(a1 + 168) = v157;
    *(_QWORD *)(a1 + 176) = v161;
    *(_QWORD *)(a1 + 184) = v165;
    *(_QWORD *)(a1 + 192) = v14;
    *(_QWORD *)(a1 + 200) = v169;
    *(_QWORD *)(a1 + 208) = v15;
    *(_QWORD *)(a1 + 216) = v173;
    *(_QWORD *)(a1 + 224) = v201;
    *(_QWORD *)(a1 + 232) = v177;
    *(_QWORD *)(a1 + 240) = v181;
    *(_QWORD *)(a1 + 248) = v185;
    *(_QWORD *)(a1 + 256) = v189;
    *(_QWORD *)(a1 + 264) = v193;
    v82 = v197;
  }
  else
  {
    if (!v6)
    {
      v65 = *v5;
      v66 = *(_OWORD *)(a2 + 48);
      v67 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v67;
      *(_OWORD *)v4 = v65;
      *(_OWORD *)(a1 + 48) = v66;
      v68 = *(_OWORD *)(a2 + 96);
      v69 = *(_OWORD *)(a2 + 112);
      v70 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v70;
      *(_OWORD *)(a1 + 96) = v68;
      *(_OWORD *)(a1 + 112) = v69;
      v71 = *(_OWORD *)(a2 + 160);
      v72 = *(_OWORD *)(a2 + 176);
      v73 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v73;
      *(_OWORD *)(a1 + 160) = v71;
      *(_OWORD *)(a1 + 176) = v72;
      v74 = *(_OWORD *)(a2 + 224);
      v75 = *(_OWORD *)(a2 + 240);
      v76 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v75;
      *(_OWORD *)(a1 + 256) = v76;
      *(_OWORD *)(a1 + 224) = v74;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
    v30 = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v30;
    v31 = *(_QWORD *)(a2 + 112);
    v32 = *(_QWORD *)(a2 + 128);
    v33 = *(_QWORD *)(a2 + 144);
    v34 = *(_QWORD *)(a2 + 208);
    if (v31 >> 1 == 0xFFFFFFFF
      && (v33 | (unint64_t)v32) <= 1
      && !(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFF00FELL)
      && (*(_QWORD *)(a2 + 224) | (unint64_t)v34) < 2)
    {
      v35 = *(_OWORD *)(a2 + 88);
      v36 = *(_OWORD *)(a2 + 104);
      v37 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v37;
      *(_OWORD *)(a1 + 88) = v35;
      *(_OWORD *)(a1 + 104) = v36;
      v38 = *(_OWORD *)(a2 + 152);
      v39 = *(_OWORD *)(a2 + 168);
      v40 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v40;
      *(_OWORD *)(a1 + 152) = v38;
      *(_OWORD *)(a1 + 168) = v39;
      v41 = *(_OWORD *)(a2 + 216);
      v42 = *(_OWORD *)(a2 + 232);
      v43 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v43;
      *(_OWORD *)(a1 + 216) = v41;
      *(_OWORD *)(a1 + 232) = v42;
      goto LABEL_35;
    }
    v77 = *(_QWORD *)(a2 + 88);
    v78 = *(_QWORD *)(a2 + 120);
    v143 = *(_QWORD *)(a2 + 152);
    v155 = *(_QWORD *)(a2 + 168);
    v159 = *(_QWORD *)(a2 + 176);
    v167 = *(_QWORD *)(a2 + 184);
    v171 = *(_QWORD *)(a2 + 200);
    v175 = *(_QWORD *)(a2 + 216);
    v179 = *(_QWORD *)(a2 + 232);
    v183 = *(_QWORD *)(a2 + 240);
    v187 = *(_QWORD *)(a2 + 248);
    v191 = *(_QWORD *)(a2 + 256);
    v195 = *(_QWORD *)(a2 + 264);
    v199 = *(_QWORD *)(a2 + 272);
    v151 = *(_QWORD *)(a2 + 192);
    v79 = *(_QWORD *)(a2 + 96);
    v163 = *(_QWORD *)(a2 + 224);
    v139 = *(_QWORD *)(a2 + 160);
    v80 = *(_QWORD *)(a2 + 104);
    v147 = *(_QWORD *)(a2 + 208);
    v81 = *(_QWORD *)(a2 + 136);
    sub_1AD00FEAC(v77, v79, v80, v31, v78, v32, v81, v33, v143, v139, v155, v159, v167, v151, v171, v34, v175, v163, v179,
      v183,
      v187,
      v191,
      v195,
      v199);
    *(_QWORD *)(a1 + 88) = v77;
    *(_QWORD *)(a1 + 96) = v79;
    *(_QWORD *)(a1 + 104) = v80;
    *(_QWORD *)(a1 + 112) = v31;
    *(_QWORD *)(a1 + 120) = v78;
    *(_QWORD *)(a1 + 128) = v32;
    *(_QWORD *)(a1 + 136) = v81;
    *(_QWORD *)(a1 + 144) = v33;
    *(_QWORD *)(a1 + 152) = v143;
    *(_QWORD *)(a1 + 160) = v139;
    *(_QWORD *)(a1 + 168) = v155;
    *(_QWORD *)(a1 + 176) = v159;
    *(_QWORD *)(a1 + 184) = v167;
    *(_QWORD *)(a1 + 192) = v151;
    *(_QWORD *)(a1 + 200) = v171;
    *(_QWORD *)(a1 + 208) = v147;
    *(_QWORD *)(a1 + 216) = v175;
    *(_QWORD *)(a1 + 224) = v163;
    *(_QWORD *)(a1 + 232) = v179;
    *(_QWORD *)(a1 + 240) = v183;
    *(_QWORD *)(a1 + 248) = v187;
    *(_QWORD *)(a1 + 256) = v191;
    *(_QWORD *)(a1 + 264) = v195;
    v82 = v199;
  }
  *(_QWORD *)(a1 + 272) = v82;
LABEL_35:
  v104 = *(_QWORD *)(a2 + 328);
  v138 = *(_QWORD *)(a2 + 336);
  v142 = *(_QWORD *)(a2 + 344);
  v146 = *(_QWORD *)(a2 + 352);
  v150 = *(_QWORD *)(a2 + 360);
  v154 = *(_QWORD *)(a2 + 368);
  v158 = *(_QWORD *)(a2 + 376);
  v162 = *(_QWORD *)(a2 + 384);
  v166 = *(_QWORD *)(a2 + 392);
  v170 = *(_QWORD *)(a2 + 400);
  v174 = *(_QWORD *)(a2 + 408);
  v178 = *(_QWORD *)(a2 + 416);
  v182 = *(_QWORD *)(a2 + 424);
  v186 = *(_QWORD *)(a2 + 432);
  v190 = *(_QWORD *)(a2 + 440);
  v194 = *(_QWORD *)(a2 + 448);
  v198 = *(_QWORD *)(a2 + 456);
  v202 = *(_QWORD *)(a2 + 464);
  v105 = *(_QWORD *)(a2 + 280);
  v106 = *(_QWORD *)(a2 + 288);
  v107 = *(_QWORD *)(a2 + 296);
  v108 = *(_QWORD *)(a2 + 304);
  v109 = *(_QWORD *)(a2 + 312);
  v110 = *(_QWORD *)(a2 + 320);
  sub_1AD00FEAC(v105, v106, v107, v108, v109, v110, v104, v138, v142, v146, v150, v154, v158, v162, v166, v170, v174, v178, v182,
    v186,
    v190,
    v194,
    v198,
    v202);
  v111 = *(_QWORD *)(a1 + 280);
  v112 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v105;
  *(_QWORD *)(a1 + 288) = v106;
  v113 = *(_QWORD *)(a1 + 296);
  v114 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v107;
  *(_QWORD *)(a1 + 304) = v108;
  v115 = *(_QWORD *)(a1 + 312);
  v116 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 312) = v109;
  *(_QWORD *)(a1 + 320) = v110;
  v117 = *(_QWORD *)(a1 + 328);
  v118 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 328) = v104;
  *(_QWORD *)(a1 + 336) = v138;
  v119 = *(_OWORD *)(a1 + 344);
  v120 = *(_OWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 344) = v142;
  *(_QWORD *)(a1 + 352) = v146;
  *(_QWORD *)(a1 + 360) = v150;
  *(_QWORD *)(a1 + 368) = v154;
  v121 = *(_OWORD *)(a1 + 376);
  v122 = *(_OWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 376) = v158;
  *(_QWORD *)(a1 + 384) = v162;
  *(_QWORD *)(a1 + 392) = v166;
  *(_QWORD *)(a1 + 400) = v170;
  v123 = *(_OWORD *)(a1 + 408);
  v124 = *(_OWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 408) = v174;
  *(_QWORD *)(a1 + 416) = v178;
  *(_QWORD *)(a1 + 424) = v182;
  *(_QWORD *)(a1 + 432) = v186;
  v125 = *(_OWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v190;
  v126 = *(_QWORD *)(a1 + 456);
  v127 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 448) = v194;
  *(_QWORD *)(a1 + 456) = v198;
  *(_QWORD *)(a1 + 464) = v202;
  sub_1AD00E8B0(v111, v112, v113, v114, v115, v116, v117, v118, v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121, *((uint64_t *)&v121 + 1), v122, *((uint64_t *)&v122 + 1), v123, *((unint64_t *)&v123 + 1), v124,
    *((uint64_t *)&v124 + 1),
    v125,
    *((uint64_t *)&v125 + 1),
    v126,
    v127);
  v128 = (_OWORD *)(a1 + 472);
  v129 = (_OWORD *)(a2 + 472);
  v130 = *(_QWORD *)(a2 + 472);
  if (*(_QWORD *)(a1 + 472))
  {
    if (v130)
    {
      v131 = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 472) = v130;
      *(_QWORD *)(a1 + 480) = v131;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1AD3CA060(a1 + 472);
      v133 = *(_QWORD *)(a2 + 504);
      v134 = *(_OWORD *)(a2 + 488);
      *v128 = *v129;
      *(_OWORD *)(a1 + 488) = v134;
      *(_QWORD *)(a1 + 504) = v133;
    }
  }
  else if (v130)
  {
    v132 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 472) = v130;
    *(_QWORD *)(a1 + 480) = v132;
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v135 = *v129;
    v136 = *(_OWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *v128 = v135;
    *(_OWORD *)(a1 + 488) = v136;
  }
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  return a1;
}

uint64_t sub_1AD3CA060(uint64_t a1)
{
  destroy for AvatarRecord();
  return a1;
}

void *__swift_memcpy513_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x201uLL);
}

uint64_t assignWithTake for MemojiPoster(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = (_OWORD *)(a1 + 264);
  v5 = a2 + 264;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = a1 + 32;
  v8 = a2 + 32;
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_13;
  if (!*(_QWORD *)(a2 + 56))
  {
    sub_1AD046A30((_QWORD *)(a1 + 32));
LABEL_13:
    v24 = *(_OWORD *)(v8 + 208);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(v8 + 192);
    *(_OWORD *)(v7 + 208) = v24;
    *(_OWORD *)(v7 + 224) = *(_OWORD *)(v8 + 224);
    *(_QWORD *)(v7 + 240) = *(_QWORD *)(v8 + 240);
    goto LABEL_14;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = a1 + 88;
  v8 = a2 + 88;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 224);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a2 + 208);
  v23 = *(_QWORD *)(a2 + 224);
  if (v10 >> 1 == 0xFFFFFFFF
    && (v12 | (unint64_t)v11) <= 1
    && !(v14 & 0xFFFFFFFFFFFFFEFELL | v13 & 0xFFFFFFFFFFFF00FELL)
    && (v16 | v15) < 2)
  {
    goto LABEL_14;
  }
  if (v17 >> 1 == 0xFFFFFFFF
    && (v19 | v18) <= 1
    && !(v21 & 0xFFFFFFFFFFFFFEFELL | v20 & 0xFFFFFFFFFFFF00FELL)
    && (v23 | v22) < 2)
  {
    sub_1AD148B34(a1 + 88);
LABEL_14:
    v25 = *(_OWORD *)(v8 + 144);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(v7 + 144) = v25;
    v26 = *(_OWORD *)(v8 + 176);
    *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
    *(_OWORD *)(v7 + 176) = v26;
    v27 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v7 + 80) = v27;
    v28 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 112) = v28;
    v29 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v29;
    v30 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 48) = v30;
    goto LABEL_15;
  }
  v59 = *(_QWORD *)(a2 + 104);
  v60 = *(_QWORD *)(a2 + 120);
  v61 = *(_QWORD *)(a2 + 136);
  v62 = *(_QWORD *)(a2 + 152);
  v63 = *(_QWORD *)(a2 + 184);
  v64 = *(_QWORD *)(a2 + 200);
  v65 = *(_QWORD *)(a2 + 216);
  v76 = *(_QWORD *)(a1 + 96);
  v77 = *(_QWORD *)(a1 + 88);
  v75 = *(_QWORD *)(a1 + 104);
  v78 = *(_QWORD *)(a1 + 120);
  v79 = *(_QWORD *)(a1 + 136);
  v66 = *(_OWORD *)(a1 + 168);
  v73 = *(_QWORD *)(a1 + 184);
  v74 = *(_QWORD *)(a1 + 152);
  v67 = *(_QWORD *)(a1 + 200);
  v68 = *(_QWORD *)(a1 + 216);
  v69 = *(_OWORD *)(a1 + 232);
  v70 = *(_OWORD *)(a1 + 248);
  v72 = *(_QWORD *)(a1 + 264);
  v71 = *(_QWORD *)(a1 + 272);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v59;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v60;
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v61;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v62;
  *(_QWORD *)(a1 + 160) = v20;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = v63;
  *(_QWORD *)(a1 + 192) = v21;
  *(_QWORD *)(a1 + 200) = v64;
  *(_QWORD *)(a1 + 208) = v22;
  *(_QWORD *)(a1 + 216) = v65;
  *(_QWORD *)(a1 + 224) = v23;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *v4 = *(_OWORD *)v5;
  sub_1AD00E8B0(v77, v76, v75, v10, v78, v11, v79, v12, v74, v13, v66, *((uint64_t *)&v66 + 1), v73, v14, v67, v15, v68, v16, v69,
    *((uint64_t *)&v69 + 1),
    v70,
    *((uint64_t *)&v70 + 1),
    v72,
    v71);
LABEL_15:
  v31 = *(_QWORD *)(a1 + 280);
  v32 = *(_QWORD *)(a1 + 288);
  v33 = *(_QWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 304);
  v35 = *(_QWORD *)(a1 + 312);
  v36 = *(_QWORD *)(a1 + 320);
  v37 = *(_QWORD *)(a1 + 328);
  v38 = *(_QWORD *)(a1 + 336);
  v39 = *(_OWORD *)(a1 + 344);
  v40 = *(_OWORD *)(a1 + 360);
  v41 = *(_OWORD *)(a1 + 376);
  v42 = *(_OWORD *)(a1 + 392);
  v43 = *(_OWORD *)(a1 + 408);
  v44 = *(_OWORD *)(a1 + 424);
  v45 = *(_OWORD *)(a1 + 440);
  v46 = *(_QWORD *)(a1 + 456);
  v47 = *(_QWORD *)(a1 + 464);
  v48 = *(_OWORD *)(v5 + 32);
  v4[1] = *(_OWORD *)(v5 + 16);
  v4[2] = v48;
  v49 = *(_OWORD *)(v5 + 64);
  v4[3] = *(_OWORD *)(v5 + 48);
  v4[4] = v49;
  v50 = *(_OWORD *)(v5 + 96);
  v4[5] = *(_OWORD *)(v5 + 80);
  v4[6] = v50;
  v51 = *(_OWORD *)(v5 + 128);
  v4[7] = *(_OWORD *)(v5 + 112);
  v4[8] = v51;
  v52 = *(_OWORD *)(v5 + 160);
  v4[9] = *(_OWORD *)(v5 + 144);
  v4[10] = v52;
  v53 = *(_OWORD *)(v5 + 192);
  v4[11] = *(_OWORD *)(v5 + 176);
  v4[12] = v53;
  sub_1AD00E8B0(v31, v32, v33, v34, v35, v36, v37, v38, v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, *((unint64_t *)&v43 + 1), v44,
    *((uint64_t *)&v44 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v46,
    v47);
  if (!*(_QWORD *)(a1 + 472))
  {
LABEL_19:
    v57 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v57;
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    goto LABEL_20;
  }
  v54 = *(_QWORD *)(a2 + 472);
  if (!v54)
  {
    sub_1AD3CA060(a1 + 472);
    goto LABEL_19;
  }
  v55 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v54;
  *(_QWORD *)(a1 + 480) = v55;
  swift_release();
  v56 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v56;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_release();
LABEL_20:
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(v5 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for MemojiPoster(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 513))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 304) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MemojiPoster(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 504) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 488) = 0u;
    *(_OWORD *)(a1 + 472) = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_BYTE *)(a1 + 512) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 513) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(a1 + 280) = 0;
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 304) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 312) = 0u;
      *(_OWORD *)(a1 + 328) = 0u;
      *(_OWORD *)(a1 + 344) = 0u;
      *(_OWORD *)(a1 + 360) = 0u;
      *(_OWORD *)(a1 + 376) = 0u;
      *(_OWORD *)(a1 + 392) = 0u;
      *(_OWORD *)(a1 + 408) = 0u;
      *(_OWORD *)(a1 + 424) = 0u;
      *(_OWORD *)(a1 + 440) = 0u;
      *(_OWORD *)(a1 + 456) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 513) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemojiPoster()
{
  return &type metadata for MemojiPoster;
}

uint64_t destroy for MonogramPoster()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MonogramPoster(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MonogramPoster(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for MonogramPoster(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramPoster(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramPoster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonogramPoster()
{
  return &type metadata for MonogramPoster;
}

unint64_t sub_1AD3CA74C()
{
  unint64_t result;

  result = qword_1EECDBCB8;
  if (!qword_1EECDBCB8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PhotosPoster.Layout.ClockIntersection, &type metadata for PhotosPoster.Layout.ClockIntersection);
    atomic_store(result, (unint64_t *)&qword_1EECDBCB8);
  }
  return result;
}

unint64_t sub_1AD3CA790()
{
  unint64_t result;

  result = qword_1EECDBCC0;
  if (!qword_1EECDBCC0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PhotosPoster.Layout.ClockLayerOrder, &type metadata for PhotosPoster.Layout.ClockLayerOrder);
    atomic_store(result, (unint64_t *)&qword_1EECDBCC0);
  }
  return result;
}

unint64_t sub_1AD3CA7D4()
{
  unint64_t result;

  result = qword_1EECDBCC8;
  if (!qword_1EECDBCC8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PhotosPoster.MediaType, &type metadata for PhotosPoster.MediaType);
    atomic_store(result, (unint64_t *)&qword_1EECDBCC8);
  }
  return result;
}

unint64_t sub_1AD3CA818()
{
  unint64_t result;

  result = qword_1EECDBCD0;
  if (!qword_1EECDBCD0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.NumberingSystem, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.NumberingSystem);
    atomic_store(result, (unint64_t *)&qword_1EECDBCD0);
  }
  return result;
}

unint64_t sub_1AD3CA85C()
{
  unint64_t result;

  result = qword_1EECDBCD8;
  if (!qword_1EECDBCD8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.TitleContentStyle.StyleType, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.TitleContentStyle.StyleType);
    atomic_store(result, (unint64_t *)&qword_1EECDBCD8);
  }
  return result;
}

unint64_t sub_1AD3CA8A0()
{
  unint64_t result;

  result = qword_1EECDBCE0;
  if (!qword_1EECDBCE0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.TitleContentStyle.TitleGradientContentStyleProperties.GradientType, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.TitleContentStyle.TitleGradientContentStyleProperties.GradientType);
    atomic_store(result, (unint64_t *)&qword_1EECDBCE0);
  }
  return result;
}

unint64_t sub_1AD3CA8E4()
{
  unint64_t result;

  result = qword_1EECDBCE8;
  if (!qword_1EECDBCE8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.TitleColor.Style, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.TitleColor.Style);
    atomic_store(result, (unint64_t *)&qword_1EECDBCE8);
  }
  return result;
}

unint64_t sub_1AD3CA928()
{
  unint64_t result;

  result = qword_1EECDBCF0;
  if (!qword_1EECDBCF0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.TitleLayout, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.TitleLayout);
    atomic_store(result, (unint64_t *)&qword_1EECDBCF0);
  }
  return result;
}

unint64_t sub_1AD3CA96C()
{
  unint64_t result;

  result = qword_1EECDBCF8;
  if (!qword_1EECDBCF8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.TitleStyleConfiguration.TitleAlignment, &type metadata for PosterArchive.Configuration.TitleStyleConfiguration.TitleAlignment);
    atomic_store(result, (unint64_t *)&qword_1EECDBCF8);
  }
  return result;
}

unint64_t sub_1AD3CA9B0()
{
  unint64_t result;

  result = qword_1EECDBD00;
  if (!qword_1EECDBD00)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PosterArchive.Configuration.SystemTimeFontConfiguration.TimeFontIdentifier, &type metadata for PosterArchive.Configuration.SystemTimeFontConfiguration.TimeFontIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EECDBD00);
  }
  return result;
}

uint64_t sub_1AD3CAA44(unsigned int a1)
{
  unsigned int v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = HIBYTE(a1);
  v3 = sub_1AD3CB150(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v5 = *((_QWORD *)v3 + 2);
  v4 = *((_QWORD *)v3 + 3);
  if (v5 >= v4 >> 1)
    v3 = sub_1AD3CB150((char *)(v4 > 1), v5 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v5 + 1;
  *(_DWORD *)&v3[4 * v5 + 32] = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1AD3CB150(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v7 = *((_QWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 3);
  if (v7 >= v6 >> 1)
    v3 = sub_1AD3CB150((char *)(v6 > 1), v7 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v7 + 1;
  *(_DWORD *)&v3[4 * v7 + 32] = BYTE2(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1AD3CB150(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v9 = *((_QWORD *)v3 + 2);
  v8 = *((_QWORD *)v3 + 3);
  if (v9 >= v8 >> 1)
    v3 = sub_1AD3CB150((char *)(v8 > 1), v9 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v9 + 1;
  *(_DWORD *)&v3[4 * v9 + 32] = BYTE1(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_1AD3CB150(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v11 = *((_QWORD *)v3 + 2);
  v10 = *((_QWORD *)v3 + 3);
  if (v11 >= v10 >> 1)
    v3 = sub_1AD3CB150((char *)(v10 > 1), v11 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v11 + 1;
  *(_DWORD *)&v3[4 * v11 + 32] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD08);
  sub_1AD3CAC70();
  sub_1AD63B7D4();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1AD3CAC70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EECDBD10;
  if (!qword_1EECDBD10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EECDBD08);
    result = MEMORY[0x1AF44BDF0](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EECDBD10);
  }
  return result;
}

_QWORD *sub_1AD3CACBC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1AD3CACE4(a1, a2, a3, a4, (uint64_t *)&unk_1ED2E7488, &qword_1ED2E7480);
}

_QWORD *sub_1AD3CACD0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1AD3CACE4(a1, a2, a3, a4, &qword_1ED2DA450, &qword_1ED2E1B30);
}

_QWORD *sub_1AD3CACE4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1AD3CBD20(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CAE10(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2078);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBE28(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD3CAF1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD40, type metadata accessor for HealthSharingSetupInvitationToken);
}

uint64_t sub_1AD3CAF30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD38, type metadata accessor for HealthSharingAuthorization);
}

uint64_t sub_1AD3CAF44(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1AD63BE1C();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1AD3CC3C0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

char *sub_1AD3CB150(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD70);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBF1C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CB25C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1AD3CC004(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CB380(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD60);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1AD3CC0F4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1AD3CB4A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD2648);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CC1E8(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1AD3CB5A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD2650);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBF1C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD3CB6B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD58, type metadata accessor for LinkPresentation.EncodedToken);
}

uint64_t sub_1AD3CB6C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD50, (uint64_t (*)(_QWORD))type metadata accessor for CloudKitSharingToken);
}

_QWORD *sub_1AD3CB6DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD48);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CC2D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CB7E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD30);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBB48(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CB8F4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD78);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBB48(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AD3CBA00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E5310);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AD3CBC30(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD3CBB0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD28, (uint64_t (*)(_QWORD))MEMORY[0x1E0D43FA0]);
}

uint64_t sub_1AD3CBB20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD20, (uint64_t (*)(_QWORD))MEMORY[0x1E0D43FC0]);
}

uint64_t sub_1AD3CBB34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1AD3CAF44(a1, a2, a3, a4, &qword_1EECDBD18, type metadata accessor for SIPResourceLists.Entry);
}

char *sub_1AD3CBB48(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CBC30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CBD20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CBE28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

char *sub_1AD3CBF1C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CC004(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CC0F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

char *sub_1AD3CC1E8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CC2D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CC3C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3CC4D8()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3CC4E0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*sub_1AD3CC4E8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CC4F8()
{
  return 0x6B6972745378616DLL;
}

uint64_t sub_1AD3CC51C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6B6972745378616DLL && a2 == 0xEE00746E756F4365)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1AD63C2A8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1AD3CC5D4()
{
  sub_1AD3CC70C();
  return sub_1AD63C560();
}

uint64_t sub_1AD3CC5FC()
{
  sub_1AD3CC70C();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3CC624(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3CC70C();
  sub_1AD63C53C();
  sub_1AD63C050();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1AD3CC70C()
{
  unint64_t result;

  result = qword_1EECDBD88;
  if (!qword_1EECDBD88)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FE3C, &type metadata for EmojiImageMetadata.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBD88);
  }
  return result;
}

uint64_t sub_1AD3CC750@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3CC70C();
  sub_1AD63C524();
  if (!v2)
  {
    v9 = sub_1AD63BF3C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AD3CC854@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD3CC750(a1, a2);
}

uint64_t sub_1AD3CC868(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3CC70C();
  sub_1AD63C53C();
  sub_1AD63C050();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1AD3CC950()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3CC958(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*sub_1AD3CC960())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CC970()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3CC99C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1AD3CC9D0())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CC9E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3CCA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*sub_1AD3CCA40())()
{
  return nullsub_1;
}

unint64_t sub_1AD3CCA50(char a1)
{
  unint64_t result;

  result = 0xD000000000000010;
  if (a1 == 1)
    return 0xD000000000000011;
  return result;
}

unint64_t sub_1AD3CCAA8()
{
  char *v0;

  return sub_1AD3CCA50(*v0);
}

uint64_t sub_1AD3CCAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD3CD3C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD3CCAD4()
{
  sub_1AD3CCC84();
  return sub_1AD63C560();
}

uint64_t sub_1AD3CCAFC()
{
  sub_1AD3CCC84();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3CCB24(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBD98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v11[2] = v1[2];
  v11[3] = v8;
  v9 = v1[3];
  v11[0] = v1[4];
  v11[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3CCC84();
  sub_1AD63C53C();
  v14 = 0;
  sub_1AD63C050();
  if (!v2)
  {
    v13 = 1;
    sub_1AD63BFD8();
    v12 = 2;
    sub_1AD63BFD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1AD3CCC84()
{
  unint64_t result;

  result = qword_1EECDBDA0;
  if (!qword_1EECDBDA0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FDEC, &type metadata for EmojiImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDA0);
  }
  return result;
}

uint64_t sub_1AD3CCCC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBDA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3CCC84();
  sub_1AD63C524();
  if (!v2)
  {
    v24 = 0;
    v9 = sub_1AD63BF3C();
    v23 = 1;
    v10 = sub_1AD63BEC4();
    v13 = v12;
    v21 = v10;
    v22 = 2;
    swift_bridgeObjectRetain();
    v14 = sub_1AD63BEC4();
    v16 = v15;
    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18 = v14;
    v17(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v19 = v21;
    *a2 = v9;
    a2[1] = v19;
    a2[2] = v13;
    a2[3] = v18;
    a2[4] = v16;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3CCEA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD3CCCC8(a1, a2);
}

uint64_t sub_1AD3CCEB8(_QWORD *a1)
{
  return sub_1AD3CCB24(a1);
}

uint64_t sub_1AD3CCECC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_1AD3CCEDC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t sub_1AD3CCEE8()
{
  unint64_t result;

  result = qword_1EECDBDB0;
  if (!qword_1EECDBDB0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FB54, &type metadata for EmojiImageMetadata.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDBDB0);
  }
  return result;
}

unint64_t sub_1AD3CCF30()
{
  unint64_t result;

  result = qword_1EECDBDB8;
  if (!qword_1EECDBDB8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FB7C, &type metadata for EmojiImageMetadata.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDBDB8);
  }
  return result;
}

unint64_t sub_1AD3CCF74(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3CCF98();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3CCF98()
{
  unint64_t result;

  result = qword_1EECDBDC0;
  if (!qword_1EECDBDC0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FBD0, &type metadata for EmojiImageMetadata);
    atomic_store(result, (unint64_t *)&qword_1EECDBDC0);
  }
  return result;
}

unint64_t sub_1AD3CCFDC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3CD008();
  result = sub_1AD3CD04C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD3CD008()
{
  unint64_t result;

  result = qword_1EECDBDC8;
  if (!qword_1EECDBDC8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FBEC, &type metadata for EmojiImageMetadata);
    atomic_store(result, (unint64_t *)&qword_1EECDBDC8);
  }
  return result;
}

unint64_t sub_1AD3CD04C()
{
  unint64_t result;

  result = qword_1EECDBDD0;
  if (!qword_1EECDBDD0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FC14, &type metadata for EmojiImageMetadata);
    atomic_store(result, (unint64_t *)&qword_1EECDBDD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmojiImageMetadata()
{
  return &type metadata for EmojiImageMetadata;
}

ValueMetadata *type metadata accessor for EmojiImageMetadata.Constraints()
{
  return &type metadata for EmojiImageMetadata.Constraints;
}

uint64_t storeEnumTagSinglePayload for EmojiImageMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AD3CD0FC + 4 * byte_1AD67FB45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AD3CD130 + 4 * asc_1AD67FB40[v4]))();
}

uint64_t sub_1AD3CD130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CD138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3CD140);
  return result;
}

uint64_t sub_1AD3CD14C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3CD154);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AD3CD158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CD160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmojiImageMetadata.CodingKeys()
{
  return &type metadata for EmojiImageMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for EmojiImageMetadata.Constraints.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AD3CD1BC + 4 * byte_1AD67FB4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AD3CD1DC + 4 * byte_1AD67FB4F[v4]))();
}

_BYTE *sub_1AD3CD1BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AD3CD1DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD3CD1E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD3CD1EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD3CD1F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD3CD1FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EmojiImageMetadata.Constraints.CodingKeys()
{
  return &type metadata for EmojiImageMetadata.Constraints.CodingKeys;
}

unint64_t sub_1AD3CD21C()
{
  unint64_t result;

  result = qword_1EECDBDD8;
  if (!qword_1EECDBDD8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FD0C, &type metadata for EmojiImageMetadata.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDD8);
  }
  return result;
}

unint64_t sub_1AD3CD264()
{
  unint64_t result;

  result = qword_1EECDBDE0;
  if (!qword_1EECDBDE0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FDC4, &type metadata for EmojiImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDE0);
  }
  return result;
}

unint64_t sub_1AD3CD2AC()
{
  unint64_t result;

  result = qword_1EECDBDE8;
  if (!qword_1EECDBDE8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FD34, &type metadata for EmojiImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDE8);
  }
  return result;
}

unint64_t sub_1AD3CD2F4()
{
  unint64_t result;

  result = qword_1EECDBDF0;
  if (!qword_1EECDBDF0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FD5C, &type metadata for EmojiImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDF0);
  }
  return result;
}

unint64_t sub_1AD3CD33C()
{
  unint64_t result;

  result = qword_1EECDBDF8;
  if (!qword_1EECDBDF8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FC7C, &type metadata for EmojiImageMetadata.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBDF8);
  }
  return result;
}

unint64_t sub_1AD3CD384()
{
  unint64_t result;

  result = qword_1EECDBE00;
  if (!qword_1EECDBE00)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD67FCA4, &type metadata for EmojiImageMetadata.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBE00);
  }
  return result;
}

uint64_t sub_1AD3CD3C8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001AD6A8E70 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AD6A8E90 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001AD6A8EB0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BlastDoor::ErrorMessage::ErrorType_optional __swiftcall ErrorMessage.ErrorType.init(rawValue:)(Swift::UInt16 rawValue)
{
  char *v1;
  char v2;

  v2 = rawValue;
  if (rawValue > 0x18Fu)
  {
    if (rawValue <= 0x1F5u)
    {
      if (rawValue == 400)
      {
        *v1 = 5;
        return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
      }
      if (rawValue == 500)
      {
        *v1 = 6;
        return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
      }
    }
    else
    {
      switch(rawValue)
      {
        case 0x1F6u:
          *v1 = 7;
          return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
        case 0x258u:
          *v1 = 8;
          return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
        case 0x259u:
          *v1 = 9;
          return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
      }
    }
    goto LABEL_23;
  }
  if (rawValue <= 0xC8u)
  {
    if (!rawValue)
    {
LABEL_24:
      *v1 = v2;
      return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
    }
    if (rawValue == 120)
    {
      *v1 = 1;
      return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
    }
LABEL_23:
    v2 = 10;
    goto LABEL_24;
  }
  if (rawValue == 201)
  {
    *v1 = 2;
    return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
  }
  if (rawValue == 202)
  {
    *v1 = 3;
    return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
  }
  if (rawValue != 250)
    goto LABEL_23;
  *v1 = 4;
  return (BlastDoor::ErrorMessage::ErrorType_optional)rawValue;
}

uint64_t ErrorMessage.ErrorType.rawValue.getter()
{
  char *v0;

  return word_1AD680076[*v0];
}

BOOL sub_1AD3CD5FC(char *a1, char *a2)
{
  return word_1AD680076[*a1] == word_1AD680076[*a2];
}

uint64_t sub_1AD3CD620()
{
  sub_1AD63C4AC();
  sub_1AD63C4D0();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD3CD66C()
{
  return sub_1AD63C4D0();
}

uint64_t sub_1AD3CD6A0()
{
  sub_1AD63C4AC();
  sub_1AD63C4D0();
  return sub_1AD63C4F4();
}

BlastDoor::ErrorMessage::ErrorType_optional sub_1AD3CD6E8(Swift::UInt16 *a1)
{
  return ErrorMessage.ErrorType.init(rawValue:)(*a1);
}

void sub_1AD3CD6F0(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_1AD680076[*v1];
}

uint64_t sub_1AD3CD708()
{
  sub_1AD3CE0E0();
  return sub_1AD63B960();
}

uint64_t sub_1AD3CD764()
{
  sub_1AD3CE0E0();
  return sub_1AD63B900();
}

uint64_t ErrorMessage.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AD00B904(v1, a1);
}

uint64_t ErrorMessage.metadata.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1AD00B950(a1, v1);
}

uint64_t (*ErrorMessage.metadata.modify())()
{
  return nullsub_1;
}

uint64_t ErrorMessage.type.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ErrorMessage();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for ErrorMessage()
{
  uint64_t result;

  result = qword_1ED2E2118;
  if (!qword_1ED2E2118)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ErrorMessage.type.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ErrorMessage();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*ErrorMessage.type.modify())(_QWORD)
{
  type metadata accessor for ErrorMessage();
  return nullsub_1;
}

uint64_t ErrorMessage.additionalInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ErrorMessage() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ErrorMessage.additionalInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ErrorMessage() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ErrorMessage.additionalInfo.modify())(_QWORD)
{
  type metadata accessor for ErrorMessage();
  return nullsub_1;
}

unint64_t sub_1AD3CD940()
{
  unint64_t result;

  result = qword_1EECDBE08;
  if (!qword_1EECDBE08)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for ErrorMessage.ErrorType, &type metadata for ErrorMessage.ErrorType);
    atomic_store(result, (unint64_t *)&qword_1EECDBE08);
  }
  return result;
}

unint64_t sub_1AD3CD984(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD2884C4();
  result = sub_1AD288508();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3CD9B0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3CD9FC(&qword_1EECDBE10, (uint64_t)&protocol conformance descriptor for ErrorMessage);
  result = sub_1AD3CD9FC(&qword_1EECDBE18, (uint64_t)&protocol conformance descriptor for ErrorMessage);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3CD9FC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ErrorMessage();
    result = MEMORY[0x1AF44BDF0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ErrorMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AD63B084();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for Metadata();
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    *(_WORD *)((char *)a1 + v8[8]) = *(_WORD *)((char *)a2 + v8[8]);
    v12 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ErrorMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Metadata();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_WORD *)(a1 + v7[8]) = *(_WORD *)(a2 + v7[8]);
  v11 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Metadata();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v12 = v7[8];
  v13 = (_BYTE *)(a1 + v12);
  v14 = (_BYTE *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Metadata();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_WORD *)(a1 + v7[8]) = *(_WORD *)(a2 + v7[8]);
  v11 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for ErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Metadata();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v11 = v7[8];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3CDE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for Metadata();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3CDF1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Metadata();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_1AD3CDF98()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Metadata();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ErrorMessage.ErrorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1AD3CE060 + 4 * byte_1AD67FE95[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1AD3CE094 + 4 * byte_1AD67FE90[v4]))();
}

uint64_t sub_1AD3CE094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CE09C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3CE0A4);
  return result;
}

uint64_t sub_1AD3CE0B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3CE0B8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1AD3CE0BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CE0C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrorMessage.ErrorType()
{
  return &type metadata for ErrorMessage.ErrorType;
}

unint64_t sub_1AD3CE0E0()
{
  unint64_t result;

  result = qword_1EECDBE20;
  if (!qword_1EECDBE20)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for ErrorMessage.ErrorType, &type metadata for ErrorMessage.ErrorType);
    atomic_store(result, (unint64_t *)&qword_1EECDBE20);
  }
  return result;
}

uint64_t sub_1AD3CE124@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AD63BE94();
  result = swift_bridgeObjectRelease();
  v4 = 4;
  if (v2 < 4)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t sub_1AD3CE17C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD3CE1A8 + 4 * byte_1AD680090[*v0]))(0x313030327061, 0xE600000000000000);
}

uint64_t sub_1AD3CE1A8()
{
  return 0x323030327061;
}

unint64_t sub_1AD3CE1B8()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1AD3CE1D4()
{
  return 0xD000000000000022;
}

void sub_1AD3CE1F4(char *a1)
{
  sub_1AD434BF4(*a1);
}

void sub_1AD3CE200()
{
  char *v0;

  sub_1AD14BEE4(*v0);
}

void sub_1AD3CE208(uint64_t a1)
{
  char *v1;

  sub_1AD14C394(a1, *v1);
}

void sub_1AD3CE210(uint64_t a1)
{
  char *v1;

  sub_1AD14D168(a1, *v1);
}

uint64_t sub_1AD3CE218@<X0>(char *a1@<X8>)
{
  return sub_1AD3CE124(a1);
}

uint64_t sub_1AD3CE224()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1AD3CE250 + 4 * byte_1AD680094[*v0]))();
}

void sub_1AD3CE250(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x323030327061;
  a1[1] = v1;
}

void sub_1AD3CE264(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x80000001AD69DCC0;
}

void sub_1AD3CE284(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000022;
  a1[1] = 0x80000001AD69DCE0;
}

uint64_t sub_1AD3CE2A8()
{
  sub_1AD3DA630();
  return sub_1AD63B924();
}

uint64_t sub_1AD3CE304()
{
  sub_1AD3DA630();
  return sub_1AD63B8C4();
}

uint64_t sub_1AD3CE350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AD0D3D2C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for IMS3GPPCharacteristic);
}

uint64_t sub_1AD3CE374(uint64_t a1)
{
  uint64_t v1;

  return sub_1AD3CE37C(a1, v1);
}

uint64_t sub_1AD3CE37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IMS3GPPCharacteristic();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1AD3CE3C0())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CE3D0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3CE3FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3CE430())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CE440@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(v1 + 40);
  return sub_1AD003E48(v2, v3);
}

__n128 sub_1AD3CE45C(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  sub_1AD003F24(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  result = v5;
  *(__n128 *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return result;
}

uint64_t (*sub_1AD3CE4B4())()
{
  return nullsub_1;
}

uint64_t sub_1AD3CE4C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GSMARCSApplicationCharacteristic(0) + 24);
  return sub_1AD3CE508(v3, a1);
}

uint64_t type metadata accessor for GSMARCSApplicationCharacteristic(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBE40);
}

uint64_t sub_1AD3CE508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3CE550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GSMARCSApplicationCharacteristic(0) + 24);
  return sub_1AD3CE580(a1, v3);
}

uint64_t sub_1AD3CE580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1AD3CE5C8())(_QWORD)
{
  type metadata accessor for GSMARCSApplicationCharacteristic(0);
  return nullsub_1;
}

uint64_t sub_1AD3CE5F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = v1 + *(int *)(type metadata accessor for GSMARCSApplicationCharacteristic(0) + 28);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v12 = *(_QWORD *)(v3 + 64);
  v13 = *(_QWORD *)(v3 + 72);
  v14 = *(_QWORD *)(v3 + 80);
  v15 = *(_QWORD *)(v3 + 88);
  v16 = *(_BYTE *)(v3 + 98);
  LOWORD(v3) = *(_WORD *)(v3 + 96);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 98) = v16;
  *(_WORD *)(a1 + 96) = v3;
  return sub_1AD3CE678(v4, v5);
}

uint64_t sub_1AD3CE678(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

__n128 sub_1AD3CE6B4(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v9 = a1[3];
  v10 = a1[2];
  v8 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_QWORD *)a1 + 11);
  v4 = *((_WORD *)a1 + 48);
  v5 = *((_BYTE *)a1 + 98);
  v6 = v1 + *(int *)(type metadata accessor for GSMARCSApplicationCharacteristic(0) + 28);
  sub_1AD3CE784(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  *(_OWORD *)v6 = v12;
  *(_OWORD *)(v6 + 16) = v11;
  *(_OWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 48) = v9;
  result = v8;
  *(__n128 *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 80) = v2;
  *(_QWORD *)(v6 + 88) = v3;
  *(_BYTE *)(v6 + 98) = v5;
  *(_WORD *)(v6 + 96) = v4;
  return result;
}

uint64_t sub_1AD3CE784(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t (*sub_1AD3CE7C0())(_QWORD)
{
  type metadata accessor for GSMARCSApplicationCharacteristic(0);
  return nullsub_1;
}

BOOL sub_1AD3CE7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v6;

  v1 = type metadata accessor for ApplicationCharacteristic(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD0D3D2C(v0, (uint64_t)v3, type metadata accessor for ApplicationCharacteristic);
  v4 = swift_getEnumCaseMultiPayload() == 2;
  sub_1AD066230((uint64_t)v3, type metadata accessor for ApplicationCharacteristic);
  return v4;
}

uint64_t type metadata accessor for ApplicationCharacteristic(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBE58);
}

unint64_t sub_1AD3CE898()
{
  unint64_t result;

  result = qword_1EECDBE28;
  if (!qword_1EECDBE28)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6800A4, &type metadata for OMADMApplicationID);
    atomic_store(result, (unint64_t *)&qword_1EECDBE28);
  }
  return result;
}

uint64_t sub_1AD3CE8DC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECD7238, type metadata accessor for IMS3GPPApplicationCharacteristic, (uint64_t)&unk_1AD652668);
  result = sub_1ACFF9724(&qword_1EECD7218, type metadata accessor for IMS3GPPApplicationCharacteristic, (uint64_t)&unk_1AD652690);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for IMS3GPPApplicationCharacteristic(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBE30);
}

uint64_t sub_1AD3CE94C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECD7230, type metadata accessor for GSMARCSApplicationCharacteristic, (uint64_t)&unk_1AD6526B8);
  result = sub_1ACFF9724(&qword_1EECD7210, type metadata accessor for GSMARCSApplicationCharacteristic, (uint64_t)&unk_1AD6526E0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3CE9A8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECD4B48, type metadata accessor for ApplicationCharacteristic, (uint64_t)&unk_1AD6571B8);
  result = sub_1ACFF9724(&qword_1EECD4BA8, type metadata accessor for ApplicationCharacteristic, (uint64_t)&unk_1AD6571E0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for OMADMApplicationID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AD3CEA50 + 4 * byte_1AD68009D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AD3CEA84 + 4 * byte_1AD680098[v4]))();
}

uint64_t sub_1AD3CEA84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CEA8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3CEA94);
  return result;
}

uint64_t sub_1AD3CEAA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3CEAA8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AD3CEAAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3CEAB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OMADMApplicationID()
{
  return &type metadata for OMADMApplicationID;
}

uint64_t sub_1AD3CEAD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unsigned int (*v60)(_QWORD *, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;

  v4 = type metadata accessor for IMS3GPPCharacteristic();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2 + 3;
    v9 = a2[4];
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 24) = *v8;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)v8;
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v11 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v12 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v13 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    v14 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = a2[20];
    v15 = a2[23];
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_QWORD *)(a1 + 184) = v15;
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    v16 = a2[27];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = v16;
    v17 = a2[29];
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_QWORD *)(a1 + 232) = v17;
    *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
    v18 = a2[32];
    *(_QWORD *)(a1 + 248) = a2[31];
    *(_QWORD *)(a1 + 256) = v18;
    v19 = a2[33];
    *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 136);
    *(_QWORD *)(a1 + 264) = v19;
    v20 = a2[36];
    *(_QWORD *)(a1 + 280) = a2[35];
    *(_QWORD *)(a1 + 288) = v20;
    v21 = a2[37];
    *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
    *(_QWORD *)(a1 + 296) = v21;
    v22 = *(int *)(v6 + 68);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = type metadata accessor for IMS3GPPExtCharacteristic();
    v59 = *(_QWORD *)(v25 - 8);
    v60 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v59 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v60(v24, 1, v25))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v61 = v25;
      v27 = v24[1];
      *v23 = *v24;
      v23[1] = v27;
      v28 = v24[3];
      v23[2] = v24[2];
      v23[3] = v28;
      *((_BYTE *)v23 + 32) = *((_BYTE *)v24 + 32);
      v29 = (int *)type metadata accessor for IMSGSMACharacteristic();
      v30 = v29[6];
      v62 = v23;
      v31 = (char *)v23 + v30;
      v32 = (char *)v24 + v30;
      v33 = sub_1AD63AF28();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v37 = v29[7];
      v38 = (char *)v62 + v37;
      v39 = (_QWORD *)((char *)v24 + v37);
      v40 = v39[1];
      *(_QWORD *)v38 = *v39;
      *((_QWORD *)v38 + 1) = v40;
      v41 = v39 + 2;
      v42 = v39[3];
      swift_retain();
      if (v42 == 1)
      {
        *((_OWORD *)v38 + 1) = *v41;
      }
      else
      {
        *((_QWORD *)v38 + 2) = *(_QWORD *)v41;
        *((_QWORD *)v38 + 3) = v42;
        swift_bridgeObjectRetain();
      }
      v43 = v29[8];
      v44 = (char *)v62 + v43;
      v45 = (_QWORD *)((char *)v24 + v43);
      v46 = v45[1];
      *(_QWORD *)v44 = *v45;
      *((_QWORD *)v44 + 1) = v46;
      v47 = v45 + 2;
      v48 = v45[3];
      swift_retain();
      if (v48 == 1)
      {
        *((_OWORD *)v44 + 1) = *v47;
      }
      else
      {
        *((_QWORD *)v44 + 2) = *(_QWORD *)v47;
        *((_QWORD *)v44 + 3) = v48;
        swift_bridgeObjectRetain();
      }
      v49 = v29[9];
      v50 = (char *)v62 + v49;
      v51 = (char *)v24 + v49;
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      v52 = v29[10];
      v53 = (char *)v62 + v52;
      v54 = (char *)v24 + v52;
      v55 = sub_1AD63B084();
      v56 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v62, 0, 1, v61);
    }
  }
  return a1;
}

uint64_t sub_1AD3CEF58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v2 = a1 + *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
  v3 = type metadata accessor for IMS3GPPExtCharacteristic();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v5 = (int *)type metadata accessor for IMSGSMACharacteristic();
    v6 = v2 + v5[6];
    v7 = sub_1AD63AF28();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = v2 + v5[7];
    swift_release();
    if (*(_QWORD *)(v9 + 24) != 1)
      swift_bridgeObjectRelease();
    v10 = v2 + v5[8];
    swift_release();
    if (*(_QWORD *)(v10 + 24) != 1)
      swift_bridgeObjectRelease();
    v11 = v2 + v5[10];
    v12 = sub_1AD63B084();
    v13 = *(_QWORD *)(v12 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  return result;
}

uint64_t sub_1AD3CF11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unsigned int (*v55)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  _QWORD *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  swift_retain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v12;
  v13 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v13;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v14 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v14;
  v15 = *(_QWORD *)(a2 + 264);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v16;
  v17 = *(_QWORD *)(a2 + 296);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v17;
  v18 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
  __dst = (_QWORD *)(a1 + v18);
  v19 = (_QWORD *)(a2 + v18);
  v20 = type metadata accessor for IMS3GPPExtCharacteristic();
  v54 = *(_QWORD *)(v20 - 8);
  v55 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v57 = v20;
  if (v55(v19, 1, v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = v19[1];
    *__dst = *v19;
    __dst[1] = v22;
    v23 = v19[3];
    __dst[2] = v19[2];
    __dst[3] = v23;
    *((_BYTE *)__dst + 32) = *((_BYTE *)v19 + 32);
    v24 = (int *)type metadata accessor for IMSGSMACharacteristic();
    v25 = v24[6];
    v26 = (char *)__dst + v25;
    v56 = v19;
    v27 = (char *)v19 + v25;
    v28 = sub_1AD63AF28();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v32 = v24[7];
    v33 = (char *)__dst + v32;
    v34 = (_QWORD *)((char *)v56 + v32);
    v35 = v34[1];
    *(_QWORD *)v33 = *v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v34 + 2;
    v37 = v34[3];
    swift_retain();
    if (v37 == 1)
    {
      *((_OWORD *)v33 + 1) = *v36;
    }
    else
    {
      *((_QWORD *)v33 + 2) = *(_QWORD *)v36;
      *((_QWORD *)v33 + 3) = v37;
      swift_bridgeObjectRetain();
    }
    v38 = v24[8];
    v39 = (char *)__dst + v38;
    v40 = (_QWORD *)((char *)v56 + v38);
    v41 = v40[1];
    *(_QWORD *)v39 = *v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = v40 + 2;
    v43 = v40[3];
    swift_retain();
    if (v43 == 1)
    {
      *((_OWORD *)v39 + 1) = *v42;
    }
    else
    {
      *((_QWORD *)v39 + 2) = *(_QWORD *)v42;
      *((_QWORD *)v39 + 3) = v43;
      swift_bridgeObjectRetain();
    }
    v44 = v24[9];
    v45 = (char *)__dst + v44;
    v46 = (char *)v56 + v44;
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v24[10];
    v48 = (char *)__dst + v47;
    v49 = (char *)v56 + v47;
    v50 = sub_1AD63B084();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v57);
  }
  return a1;
}

uint64_t sub_1AD3CF56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  int v87;
  void *__dst;
  int *v89;
  uint64_t v90;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 == 1)
  {
    sub_1AD0256E4(a1 + 24);
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_retain();
  swift_release();
  v9 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  swift_retain();
  swift_release();
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v14;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v15 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v15;
  swift_retain();
  swift_release();
  v16 = *(_QWORD *)(a2 + 264);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v16;
  v17 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v17;
  swift_retain();
  swift_release();
  v18 = *(_QWORD *)(a2 + 296);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v18;
  v19 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for IMS3GPPExtCharacteristic();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      sub_1AD066230(v20, (uint64_t (*)(_QWORD))type metadata accessor for IMS3GPPExtCharacteristic);
      goto LABEL_14;
    }
    v37 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v37;
    swift_retain();
    swift_release();
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
    v38 = (int *)type metadata accessor for IMSGSMACharacteristic();
    v39 = v38[6];
    v40 = (void *)(v20 + v39);
    v41 = (void *)(v21 + v39);
    v42 = sub_1AD63AF28();
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
    v45 = v44(v40, 1, v42);
    v46 = v44(v41, 1, v42);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(void *, void *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        goto LABEL_34;
      }
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(void *, void *, uint64_t))(v43 + 24))(v40, v41, v42);
LABEL_34:
        v69 = v38[7];
        v70 = (_QWORD *)(v20 + v69);
        v71 = v21 + v69;
        v72 = *(_QWORD *)(v21 + v69 + 8);
        *v70 = *(_QWORD *)(v21 + v69);
        v70[1] = v72;
        swift_retain();
        swift_release();
        v73 = *(_QWORD *)(v71 + 24);
        if (v70[3] == 1)
        {
          if (v73 != 1)
          {
            v70[2] = *(_QWORD *)(v71 + 16);
            v70[3] = *(_QWORD *)(v71 + 24);
            swift_bridgeObjectRetain();
            goto LABEL_41;
          }
        }
        else
        {
          if (v73 != 1)
          {
            v70[2] = *(_QWORD *)(v71 + 16);
            v70[3] = *(_QWORD *)(v71 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
LABEL_41:
            v74 = v38[8];
            v75 = (_QWORD *)(v20 + v74);
            v76 = v21 + v74;
            v77 = *(_QWORD *)(v21 + v74 + 8);
            *v75 = *(_QWORD *)(v21 + v74);
            v75[1] = v77;
            swift_retain();
            swift_release();
            v78 = *(_QWORD *)(v76 + 24);
            if (v75[3] == 1)
            {
              if (v78 != 1)
              {
                v75[2] = *(_QWORD *)(v76 + 16);
                v75[3] = *(_QWORD *)(v76 + 24);
                swift_bridgeObjectRetain();
LABEL_48:
                v79 = v38[9];
                v80 = (_BYTE *)(v20 + v79);
                v81 = (_BYTE *)(v21 + v79);
                *v80 = *v81;
                v80[1] = v81[1];
                v80[2] = v81[2];
                v80[3] = v81[3];
                v80[4] = v81[4];
                v80[5] = v81[5];
                v80[6] = v81[6];
                v80[7] = v81[7];
                v80[8] = v81[8];
                v82 = v38[10];
                v20 += v82;
                v21 += v82;
                v83 = sub_1AD63B084();
                v84 = *(_QWORD *)(v83 - 8);
                v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
                v86 = v85(v20, 1, v83);
                v87 = v85(v21, 1, v83);
                if (v86)
                {
                  if (!v87)
                  {
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v20, v21, v83);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v20, 0, 1, v83);
                    return a1;
                  }
                }
                else
                {
                  if (!v87)
                  {
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 24))(v20, v21, v83);
                    return a1;
                  }
                  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v20, v83);
                }
                v35 = &qword_1ED2E7140;
                goto LABEL_15;
              }
            }
            else
            {
              if (v78 != 1)
              {
                v75[2] = *(_QWORD *)(v76 + 16);
                v75[3] = *(_QWORD *)(v76 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                goto LABEL_48;
              }
              sub_1AD0256E4((uint64_t)(v75 + 2));
            }
            *((_OWORD *)v75 + 1) = *(_OWORD *)(v76 + 16);
            goto LABEL_48;
          }
          sub_1AD0256E4((uint64_t)(v70 + 2));
        }
        *((_OWORD *)v70 + 1) = *(_OWORD *)(v71 + 16);
        goto LABEL_41;
      }
      (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    }
    v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_34;
  }
  if (v26)
  {
LABEL_14:
    v35 = &qword_1EECD4630;
LABEL_15:
    v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    memcpy((void *)v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  v90 = v23;
  v27 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v27;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
  *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
  v28 = type metadata accessor for IMSGSMACharacteristic();
  v29 = *(int *)(v28 + 24);
  __dst = (void *)(v20 + v29);
  v89 = (int *)v28;
  v30 = (const void *)(v21 + v29);
  v31 = sub_1AD63AF28();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v33(v30, 1, v31))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
  }
  v47 = v89[7];
  v48 = v20 + v47;
  v49 = v21 + v47;
  v50 = *(_QWORD *)(v21 + v47 + 8);
  *(_QWORD *)v48 = *(_QWORD *)(v21 + v47);
  *(_QWORD *)(v48 + 8) = v50;
  v51 = *(_QWORD *)(v21 + v47 + 24);
  swift_retain();
  if (v51 == 1)
  {
    *(_OWORD *)(v48 + 16) = *(_OWORD *)(v49 + 16);
  }
  else
  {
    *(_QWORD *)(v48 + 16) = *(_QWORD *)(v49 + 16);
    *(_QWORD *)(v48 + 24) = *(_QWORD *)(v49 + 24);
    swift_bridgeObjectRetain();
  }
  v52 = v89[8];
  v53 = v20 + v52;
  v54 = v21 + v52;
  v55 = *(_QWORD *)(v21 + v52 + 8);
  *(_QWORD *)v53 = *(_QWORD *)(v21 + v52);
  *(_QWORD *)(v53 + 8) = v55;
  v56 = *(_QWORD *)(v21 + v52 + 24);
  swift_retain();
  if (v56 == 1)
  {
    *(_OWORD *)(v53 + 16) = *(_OWORD *)(v54 + 16);
  }
  else
  {
    *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
    *(_QWORD *)(v53 + 24) = *(_QWORD *)(v54 + 24);
    swift_bridgeObjectRetain();
  }
  v57 = v89[9];
  v58 = v20 + v57;
  v59 = (uint64_t *)(v21 + v57);
  v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(_QWORD *)v58 = v60;
  v61 = v89[10];
  v62 = (void *)(v20 + v61);
  v63 = (const void *)(v21 + v61);
  v64 = sub_1AD63B084();
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v62, v63, v64);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t sub_1AD3CFDB4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_OWORD *)(a1 + 258) = *(_OWORD *)(a2 + 258);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 290) = *(_OWORD *)(a2 + 290);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  v6 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for IMS3GPPExtCharacteristic();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    v13 = (int *)type metadata accessor for IMSGSMACharacteristic();
    v14 = v13[6];
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = sub_1AD63AF28();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = v13[7];
    v21 = (_OWORD *)((char *)v7 + v20);
    v22 = (_OWORD *)((char *)v8 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = v13[8];
    v25 = (_OWORD *)((char *)v7 + v24);
    v26 = (_OWORD *)((char *)v8 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = v13[9];
    v29 = (char *)v7 + v28;
    v30 = (char *)v8 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v13[10];
    v32 = (char *)v7 + v31;
    v33 = (char *)v8 + v31;
    v34 = sub_1AD63B084();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1AD3D0090(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  int v73;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = (_OWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 32) == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 == 1)
  {
    sub_1AD0256E4(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v4;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release();
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  swift_release();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  v8 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for IMS3GPPExtCharacteristic();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_1AD066230(v9, (uint64_t (*)(_QWORD))type metadata accessor for IMS3GPPExtCharacteristic);
      goto LABEL_12;
    }
    *(_OWORD *)v9 = *(_OWORD *)v10;
    swift_release();
    v26 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v9 + 24) = v26;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
    v27 = (int *)type metadata accessor for IMSGSMACharacteristic();
    v28 = v27[6];
    v29 = (void *)(v9 + v28);
    v30 = (void *)(v10 + v28);
    v31 = sub_1AD63AF28();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
    v34 = v33(v29, 1, v31);
    v35 = v33(v30, 1, v31);
    if (v34)
    {
      if (!v35)
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v29, v30, v31);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v35)
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v29, v30, v31);
LABEL_26:
        v55 = v27[7];
        v56 = v9 + v55;
        v57 = v10 + v55;
        *(_OWORD *)(v9 + v55) = *(_OWORD *)(v10 + v55);
        swift_release();
        v58 = (_QWORD *)(v57 + 16);
        if (*(_QWORD *)(v56 + 24) != 1)
        {
          v59 = *(_QWORD *)(v57 + 24);
          if (v59 != 1)
          {
            *(_QWORD *)(v56 + 16) = *v58;
            *(_QWORD *)(v56 + 24) = v59;
            swift_bridgeObjectRelease();
LABEL_31:
            v60 = v27[8];
            v61 = v9 + v60;
            v62 = v10 + v60;
            *(_OWORD *)(v9 + v60) = *(_OWORD *)(v10 + v60);
            swift_release();
            v63 = (_QWORD *)(v62 + 16);
            if (*(_QWORD *)(v61 + 24) != 1)
            {
              v64 = *(_QWORD *)(v62 + 24);
              if (v64 != 1)
              {
                *(_QWORD *)(v61 + 16) = *v63;
                *(_QWORD *)(v61 + 24) = v64;
                swift_bridgeObjectRelease();
                goto LABEL_36;
              }
              sub_1AD0256E4(v61 + 16);
            }
            *(_OWORD *)(v61 + 16) = *(_OWORD *)v63;
LABEL_36:
            v65 = v27[9];
            v66 = (_BYTE *)(v9 + v65);
            v67 = (_BYTE *)(v10 + v65);
            *v66 = *v67;
            v66[1] = v67[1];
            v66[2] = v67[2];
            v66[3] = v67[3];
            v66[4] = v67[4];
            v66[5] = v67[5];
            v66[6] = v67[6];
            v66[7] = v67[7];
            v66[8] = v67[8];
            v68 = v27[10];
            v9 += v68;
            v10 += v68;
            v69 = sub_1AD63B084();
            v70 = *(_QWORD *)(v69 - 8);
            v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
            v72 = v71(v9, 1, v69);
            v73 = v71(v10, 1, v69);
            if (v72)
            {
              if (!v73)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v9, v10, v69);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v9, 0, 1, v69);
                return a1;
              }
            }
            else
            {
              if (!v73)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 40))(v9, v10, v69);
                return a1;
              }
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v9, v69);
            }
            v24 = &qword_1ED2E7140;
            goto LABEL_13;
          }
          sub_1AD0256E4(v56 + 16);
        }
        *(_OWORD *)(v56 + 16) = *(_OWORD *)v58;
        goto LABEL_31;
      }
      (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
    }
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  if (v15)
  {
LABEL_12:
    v24 = &qword_1EECD4630;
LABEL_13:
    v25 = __swift_instantiateConcreteTypeFromMangledName(v24);
    memcpy((void *)v9, (const void *)v10, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  v16 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v16;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v17 = (int *)type metadata accessor for IMSGSMACharacteristic();
  v18 = v17[6];
  v19 = (void *)(v9 + v18);
  v20 = (const void *)(v10 + v18);
  v21 = sub_1AD63AF28();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v36 = v17[7];
  v37 = (_OWORD *)(v9 + v36);
  v38 = (_OWORD *)(v10 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = v17[8];
  v41 = (_OWORD *)(v9 + v40);
  v42 = (_OWORD *)(v10 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = v17[9];
  v45 = v9 + v44;
  v46 = v10 + v44;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = v17[10];
  v48 = (void *)(v9 + v47);
  v49 = (const void *)(v10 + v47);
  v50 = sub_1AD63B084();
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v51 + 32))(v48, v49, v50);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1AD3D0708()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3D0714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IMS3GPPCharacteristic();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1AD3D0750()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3D075C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IMS3GPPCharacteristic();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1AD3D079C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IMS3GPPCharacteristic();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD3D0804(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int *v65;
  _QWORD *v66;
  unsigned int (*v67)(_QWORD *, uint64_t, int *);
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  char *__dst;
  _QWORD *__dsta;
  void (**__dstb)(void *, const void *, uint64_t);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    else
    {
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_QWORD *)(a1 + 24) = v8;
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
      *(_DWORD *)(a1 + 37) = *(_DWORD *)((char *)a2 + 37);
      swift_bridgeObjectRetain();
    }
    v10 = *(int *)(v6 + 24);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = type metadata accessor for MessagingCharacteristic(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v144 = v14;
      v16 = type metadata accessor for StandaloneMsgCharacteristic(0);
      v17 = *(_QWORD *)(v16 - 8);
      v145 = v11;
      v146 = v13;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v19 = v12[1];
        *v11 = *v12;
        v11[1] = v19;
        v11[2] = v12[2];
        *((_BYTE *)v11 + 24) = *((_BYTE *)v12 + 24);
        v20 = v12[5];
        v11[4] = v12[4];
        v11[5] = v20;
        v11[6] = v12[6];
        *((_WORD *)v11 + 28) = *((_WORD *)v12 + 28);
        v21 = *(int *)(v16 + 24);
        v137 = (char *)v12 + v21;
        v141 = (char *)v11 + v21;
        v22 = sub_1AD63AF28();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v13 = v146;
        swift_retain();
        swift_retain();
        v23(v141, v137, v22);
        v11 = v145;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v145, 0, 1, v16);
      }
      v142 = v6;
      v24 = *(int *)(v13 + 20);
      v25 = (_QWORD *)((char *)v11 + v24);
      v26 = (_QWORD *)((char *)v12 + v24);
      v27 = (int *)type metadata accessor for ChatCharacteristic(0);
      v28 = *((_QWORD *)v27 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v30 = v26[1];
        *v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        *((_WORD *)v25 + 12) = *((_WORD *)v26 + 12);
        v31 = v27[5];
        __dst = (char *)v25 + v31;
        v138 = v28;
        v32 = (char *)v26 + v31;
        v33 = sub_1AD63AF28();
        v132 = *(_QWORD *)(v33 - 8);
        v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48);
        swift_retain();
        if (v34(v32, 1, v33))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v132 + 16))(__dst, v32, v33);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(__dst, 0, 1, v33);
        }
        v11 = v145;
        *((_BYTE *)v25 + v27[6]) = *((_BYTE *)v26 + v27[6]);
        *((_BYTE *)v25 + v27[7]) = *((_BYTE *)v26 + v27[7]);
        v36 = v27[8];
        v37 = (char *)v25 + v36;
        v38 = (char *)v26 + v36;
        v39 = *((_QWORD *)v38 + 1);
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *((_QWORD *)v37 + 1) = v39;
        *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
        v37[24] = v38[24];
        v40 = v27[9];
        v41 = (char *)v25 + v40;
        v42 = (char *)v26 + v40;
        v43 = *((_QWORD *)v42 + 1);
        *(_QWORD *)v41 = *(_QWORD *)v42;
        *((_QWORD *)v41 + 1) = v43;
        *((_QWORD *)v41 + 2) = *((_QWORD *)v42 + 2);
        v41[24] = v42[24];
        v44 = v27[10];
        v45 = (char *)v25 + v44;
        v46 = (char *)v26 + v44;
        v47 = *((_QWORD *)v46 + 1);
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *((_QWORD *)v45 + 1) = v47;
        *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
        *((_WORD *)v45 + 12) = *((_WORD *)v46 + 12);
        v48 = v27[11];
        v49 = (char *)v25 + v48;
        v50 = (char *)v26 + v48;
        v51 = *((_QWORD *)v50 + 1);
        *(_QWORD *)v49 = *(_QWORD *)v50;
        *((_QWORD *)v49 + 1) = v51;
        *((_QWORD *)v49 + 2) = *((_QWORD *)v50 + 2);
        *((_WORD *)v49 + 12) = *((_WORD *)v50 + 12);
        *((_BYTE *)v25 + v27[12]) = *((_BYTE *)v26 + v27[12]);
        v52 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v138 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v52(v25, 0, 1, v27);
        v13 = v146;
      }
      v53 = *(int *)(v13 + 24);
      v54 = (char *)v11 + v53;
      v55 = (char *)v12 + v53;
      v56 = (int *)v13;
      v57 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = v57;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
      v54[24] = v55[24];
      *((_BYTE *)v11 + v56[7]) = *((_BYTE *)v12 + v56[7]);
      *((_BYTE *)v11 + v56[8]) = *((_BYTE *)v12 + v56[8]);
      v58 = v56[9];
      v59 = (char *)v11 + v58;
      v60 = (char *)v12 + v58;
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      *((_WORD *)v59 + 12) = *((_WORD *)v60 + 12);
      *((_QWORD *)v59 + 2) = *((_QWORD *)v60 + 2);
      v62 = v56[10];
      v63 = (_QWORD *)((char *)v11 + v62);
      v64 = (_QWORD *)((char *)v12 + v62);
      v65 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      v66 = (_QWORD *)*((_QWORD *)v65 - 1);
      v67 = (unsigned int (*)(_QWORD *, uint64_t, int *))v66[6];
      swift_retain();
      swift_retain();
      if (v67(v64, 1, v65))
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        v6 = v142;
        v69 = v145;
      }
      else
      {
        __dsta = v66;
        v139 = v64[1];
        *v63 = *v64;
        v63[1] = v139;
        v63[2] = v64[2];
        *((_WORD *)v63 + 12) = *((_WORD *)v64 + 12);
        v70 = v64[5];
        v63[4] = v64[4];
        v63[5] = v70;
        v63[6] = v64[6];
        *((_BYTE *)v63 + 56) = *((_BYTE *)v64 + 56);
        *((_BYTE *)v63 + 57) = *((_BYTE *)v64 + 57);
        v71 = v65[7];
        v131 = (char *)v63 + v71;
        v133 = v63;
        v72 = (char *)v64 + v71;
        v73 = sub_1AD63AF28();
        v74 = *(_QWORD *)(v73 - 8);
        v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
        swift_retain();
        v76 = v73;
        swift_retain();
        v77 = v75(v72, 1, v73);
        v6 = v142;
        if (v77)
        {
          v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v131, v72, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v131, v72, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v131, 0, 1, v76);
        }
        v79 = v75;
        v80 = v65[8];
        v81 = (char *)v133 + v80;
        v82 = (char *)v64 + v80;
        if (v79((char *)v64 + v80, 1, v76))
        {
          v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v81, v82, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v81, 0, 1, v76);
        }
        v84 = v65[9];
        v85 = (char *)v133 + v84;
        v86 = (_QWORD *)((char *)v64 + v84);
        v87 = v86[1];
        *(_QWORD *)v85 = *v86;
        *((_QWORD *)v85 + 1) = v87;
        v88 = v86 + 2;
        v89 = v86[3];
        swift_retain();
        if (v89 == 1)
        {
          *((_OWORD *)v85 + 1) = *v88;
        }
        else
        {
          *((_QWORD *)v85 + 2) = *(_QWORD *)v88;
          *((_QWORD *)v85 + 3) = v89;
          swift_bridgeObjectRetain();
        }
        v90 = v65[10];
        v91 = (char *)v133 + v90;
        v92 = (_QWORD *)((char *)v64 + v90);
        v93 = v92[1];
        *(_QWORD *)v91 = *v92;
        *((_QWORD *)v91 + 1) = v93;
        v94 = v92 + 2;
        v95 = v92[3];
        swift_retain();
        if (v95 == 1)
        {
          *((_OWORD *)v91 + 1) = *v94;
        }
        else
        {
          *((_QWORD *)v91 + 2) = *(_QWORD *)v94;
          *((_QWORD *)v91 + 3) = v95;
          swift_bridgeObjectRetain();
        }
        v69 = v145;
        *((_BYTE *)v133 + v65[11]) = *((_BYTE *)v64 + v65[11]);
        v96 = v65[12];
        v97 = (char *)v133 + v96;
        v98 = (char *)v64 + v96;
        v99 = *((_QWORD *)v98 + 1);
        *(_QWORD *)v97 = *(_QWORD *)v98;
        *((_QWORD *)v97 + 1) = v99;
        *((_QWORD *)v97 + 2) = *((_QWORD *)v98 + 2);
        v97[24] = v98[24];
        v100 = (void (*)(_QWORD *, _QWORD, uint64_t, int *))__dsta[7];
        swift_retain();
        v100(v133, 0, 1, v65);
      }
      v101 = v146;
      v102 = *(int *)(v146 + 44);
      v103 = (char *)v69 + v102;
      v104 = (char *)v12 + v102;
      v105 = (int *)type metadata accessor for ChatbotCharacteristic(0);
      v106 = *((_QWORD *)v105 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v106 + 48))(v104, 1, v105))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v108 = sub_1AD63AF28();
        v109 = *(_QWORD *)(v108 - 8);
        v143 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
        __dstb = (void (**)(void *, const void *, uint64_t))v109;
        v140 = v106;
        if (v143(v104, 1, v108))
        {
          v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v103, v104, v108);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v103, 0, 1, v108);
        }
        v111 = v105[5];
        v112 = &v103[v111];
        v113 = &v104[v111];
        if (v143(&v104[v111], 1, v108))
        {
          v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          __dstb[2](v112, v113, v108);
          v69 = v145;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v112, 0, 1, v108);
        }
        v115 = v105[6];
        v116 = &v103[v115];
        v117 = &v104[v115];
        if (v143(&v104[v115], 1, v108))
        {
          v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        }
        else
        {
          __dstb[2](v116, v117, v108);
          v69 = v145;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v116, 0, 1, v108);
        }
        v101 = v146;
        v103[v105[7]] = v104[v105[7]];
        v103[v105[8]] = v104[v105[8]];
        v103[v105[9]] = v104[v105[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v140 + 56))(v103, 0, 1, v105);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v69, 0, 1, v101);
    }
    v119 = *(int *)(v6 + 28);
    v120 = a1 + v119;
    v121 = (uint64_t)a2 + v119;
    v122 = *(_QWORD *)(v121 + 8);
    if (v122)
    {
      *(_BYTE *)v120 = *(_BYTE *)v121;
      v123 = *(_QWORD *)(v121 + 16);
      v124 = *(_QWORD *)(v121 + 24);
      *(_QWORD *)(v120 + 8) = v122;
      *(_QWORD *)(v120 + 16) = v123;
      *(_QWORD *)(v120 + 24) = v124;
      *(_WORD *)(v120 + 32) = *(_WORD *)(v121 + 32);
      v125 = *(_QWORD *)(v121 + 48);
      *(_QWORD *)(v120 + 40) = *(_QWORD *)(v121 + 40);
      *(_QWORD *)(v120 + 48) = v125;
      *(_QWORD *)(v120 + 56) = *(_QWORD *)(v121 + 56);
      *(_WORD *)(v120 + 64) = *(_WORD *)(v121 + 64);
      v126 = *(_QWORD *)(v121 + 80);
      *(_QWORD *)(v120 + 72) = *(_QWORD *)(v121 + 72);
      *(_QWORD *)(v120 + 80) = v126;
      *(_QWORD *)(v120 + 88) = *(_QWORD *)(v121 + 88);
      *(_WORD *)(v120 + 96) = *(_WORD *)(v121 + 96);
      *(_BYTE *)(v120 + 98) = *(_BYTE *)(v121 + 98);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v127 = *(_OWORD *)(v121 + 80);
      *(_OWORD *)(v120 + 64) = *(_OWORD *)(v121 + 64);
      *(_OWORD *)(v120 + 80) = v127;
      *(_DWORD *)(v120 + 95) = *(_DWORD *)(v121 + 95);
      v128 = *(_OWORD *)(v121 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *(_OWORD *)(v120 + 16) = v128;
      v129 = *(_OWORD *)(v121 + 48);
      *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
      *(_OWORD *)(v120 + 48) = v129;
    }
  }
  return a1;
}

uint64_t sub_1AD3D1218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) != 1)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = (int *)type metadata accessor for MessagingCharacteristic(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for StandaloneMsgCharacteristic(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 1, v7))
    {
      swift_release();
      swift_release();
      v8 = v4 + *(int *)(v7 + 24);
      v9 = sub_1AD63AF28();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    }
    v10 = v4 + v5[5];
    v11 = type metadata accessor for ChatCharacteristic(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_release();
      v12 = v10 + *(int *)(v11 + 20);
      v13 = sub_1AD63AF28();
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    v15 = v4 + v5[10];
    v16 = (int *)type metadata accessor for FileTransferCharacteristic(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v16 - 1) + 48))(v15, 1, v16))
    {
      swift_release();
      swift_release();
      v17 = v15 + v16[7];
      v18 = sub_1AD63AF28();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
      if (!v20(v17, 1, v18))
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      v21 = v15 + v16[8];
      if (!v20(v21, 1, v18))
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
      v22 = v15 + v16[9];
      swift_release();
      if (*(_QWORD *)(v22 + 24) != 1)
        swift_bridgeObjectRelease();
      v23 = v15 + v16[10];
      swift_release();
      if (*(_QWORD *)(v23 + 24) != 1)
        swift_bridgeObjectRelease();
      swift_release();
    }
    v24 = v4 + v5[11];
    v25 = type metadata accessor for ChatbotCharacteristic(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
    if (!(_DWORD)result)
    {
      v26 = sub_1AD63AF28();
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
      if (!v28(v24, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
      v29 = v24 + *(int *)(v25 + 20);
      if (!v28(v29, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
      v30 = v24 + *(int *)(v25 + 24);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v28)(v30, 1, v26);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
    }
  }
  if (*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8))
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD3D15D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(_QWORD *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v96;
  char *v97;
  char *v98;
  int *v99;
  unsigned int (**v100)(const void *, uint64_t, int *);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *__dstc;
  char *__dst;
  char *__dsta;
  unsigned int (**__dstb)(const void *, uint64_t, int *);
  char *v134;
  uint64_t v135;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  unsigned int (*v137)(char *, uint64_t, uint64_t);
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
    swift_bridgeObjectRetain();
  }
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for MessagingCharacteristic(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v141 = v12;
    v14 = type metadata accessor for StandaloneMsgCharacteristic(0);
    v15 = *(_QWORD *)(v14 - 8);
    v142 = a3;
    v143 = v11;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = v10[1];
      *v9 = *v10;
      v9[1] = v17;
      v9[2] = v10[2];
      *((_BYTE *)v9 + 24) = *((_BYTE *)v10 + 24);
      v18 = v10[5];
      v9[4] = v10[4];
      v9[5] = v18;
      v9[6] = v10[6];
      *((_WORD *)v9 + 28) = *((_WORD *)v10 + 28);
      v19 = *(int *)(v14 + 24);
      __dstc = (char *)v10 + v19;
      v134 = (char *)v9 + v19;
      v20 = sub_1AD63AF28();
      v21 = v9;
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_retain();
      swift_retain();
      v22(v134, __dstc, v20);
      v9 = v21;
      v11 = v143;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
    }
    v23 = v11[5];
    v24 = (_QWORD *)((char *)v9 + v23);
    v25 = (_QWORD *)((char *)v10 + v23);
    v26 = (int *)type metadata accessor for ChatCharacteristic(0);
    v27 = *((_QWORD *)v26 - 1);
    v140 = a1;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v135 = v27;
      v138 = v9;
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v24[2] = v25[2];
      *((_WORD *)v24 + 12) = *((_WORD *)v25 + 12);
      v30 = v26[5];
      __dst = (char *)v24 + v30;
      v31 = (char *)v25 + v30;
      v32 = sub_1AD63AF28();
      v127 = *(_QWORD *)(v32 - 8);
      v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
      swift_retain();
      if (v33(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v127 + 16))(__dst, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(__dst, 0, 1, v32);
      }
      *((_BYTE *)v24 + v26[6]) = *((_BYTE *)v25 + v26[6]);
      *((_BYTE *)v24 + v26[7]) = *((_BYTE *)v25 + v26[7]);
      v35 = v26[8];
      v36 = (char *)v24 + v35;
      v37 = (char *)v25 + v35;
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      *((_QWORD *)v36 + 2) = *((_QWORD *)v37 + 2);
      v36[24] = v37[24];
      v39 = v26[9];
      v40 = (char *)v24 + v39;
      v41 = (char *)v25 + v39;
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
      v40[24] = v41[24];
      v43 = v26[10];
      v44 = (char *)v24 + v43;
      v45 = (char *)v25 + v43;
      v46 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
      *((_WORD *)v44 + 12) = *((_WORD *)v45 + 12);
      v47 = v26[11];
      v48 = (char *)v24 + v47;
      v49 = (char *)v25 + v47;
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
      *((_WORD *)v48 + 12) = *((_WORD *)v49 + 12);
      *((_BYTE *)v24 + v26[12]) = *((_BYTE *)v25 + v26[12]);
      v51 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v135 + 56);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v51(v24, 0, 1, v26);
      v9 = v138;
      v11 = v143;
    }
    v52 = v11[6];
    v53 = (char *)v9 + v52;
    v54 = (char *)v10 + v52;
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    *((_QWORD *)v53 + 2) = *((_QWORD *)v54 + 2);
    v53[24] = v54[24];
    *((_BYTE *)v9 + v11[7]) = *((_BYTE *)v10 + v11[7]);
    *((_BYTE *)v9 + v11[8]) = *((_BYTE *)v10 + v11[8]);
    v56 = v11[9];
    v57 = (char *)v9 + v56;
    v58 = (char *)v10 + v56;
    v59 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    *((_WORD *)v57 + 12) = *((_WORD *)v58 + 12);
    *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
    v60 = v11[10];
    v61 = (_QWORD *)((char *)v9 + v60);
    v62 = (_QWORD *)((char *)v10 + v60);
    v63 = type metadata accessor for FileTransferCharacteristic(0);
    v64 = *(_QWORD *)(v63 - 8);
    v65 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48);
    swift_retain();
    swift_retain();
    if (v65(v62, 1, v63))
    {
      v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      a3 = v142;
      a1 = v140;
    }
    else
    {
      v67 = v62[1];
      *v61 = *v62;
      v61[1] = v67;
      v61[2] = v62[2];
      *((_WORD *)v61 + 12) = *((_WORD *)v62 + 12);
      v126 = v64;
      v128 = v62[5];
      v61[4] = v62[4];
      v61[5] = v128;
      v61[6] = v62[6];
      *((_BYTE *)v61 + 56) = *((_BYTE *)v62 + 56);
      *((_BYTE *)v61 + 57) = *((_BYTE *)v62 + 57);
      v68 = *(int *)(v63 + 28);
      __dsta = (char *)v61 + v68;
      v69 = (char *)v62 + v68;
      v70 = sub_1AD63AF28();
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
      swift_retain();
      swift_retain();
      v136 = v72;
      v125 = v71;
      if (v72(v69, 1, v70))
      {
        v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(__dsta, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(__dsta, v69, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dsta, 0, 1, v70);
      }
      v74 = (int *)v63;
      v75 = *(int *)(v63 + 32);
      v76 = (char *)v61 + v75;
      v77 = (char *)v62 + v75;
      a1 = v140;
      v139 = v9;
      if (v136((char *)v62 + v75, 1, v70))
      {
        v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v76, v77, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v76, 0, 1, v70);
      }
      v79 = v74[9];
      v80 = (char *)v61 + v79;
      v81 = (_QWORD *)((char *)v62 + v79);
      v82 = v81[1];
      *(_QWORD *)v80 = *v81;
      *((_QWORD *)v80 + 1) = v82;
      v83 = v81 + 2;
      v84 = v81[3];
      swift_retain();
      if (v84 == 1)
      {
        *((_OWORD *)v80 + 1) = *v83;
      }
      else
      {
        *((_QWORD *)v80 + 2) = *(_QWORD *)v83;
        *((_QWORD *)v80 + 3) = v84;
        swift_bridgeObjectRetain();
      }
      v85 = v74[10];
      v86 = (char *)v61 + v85;
      v87 = (_QWORD *)((char *)v62 + v85);
      v88 = v87[1];
      *(_QWORD *)v86 = *v87;
      *((_QWORD *)v86 + 1) = v88;
      v89 = v87 + 2;
      v90 = v87[3];
      swift_retain();
      if (v90 == 1)
      {
        *((_OWORD *)v86 + 1) = *v89;
      }
      else
      {
        *((_QWORD *)v86 + 2) = *(_QWORD *)v89;
        *((_QWORD *)v86 + 3) = v90;
        swift_bridgeObjectRetain();
      }
      v9 = v139;
      *((_BYTE *)v61 + v74[11]) = *((_BYTE *)v62 + v74[11]);
      v91 = v74[12];
      v92 = (char *)v61 + v91;
      v93 = (char *)v62 + v91;
      v94 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = *(_QWORD *)v93;
      *((_QWORD *)v92 + 1) = v94;
      *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
      v92[24] = v93[24];
      v95 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v126 + 56);
      swift_retain();
      v95(v61, 0, 1, v74);
      a3 = v142;
    }
    v96 = v143[11];
    v97 = (char *)v9 + v96;
    v98 = (char *)v10 + v96;
    v99 = (int *)type metadata accessor for ChatbotCharacteristic(0);
    v100 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v99 - 1);
    if (v100[6](v98, 1, v99))
    {
      v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    else
    {
      v102 = sub_1AD63AF28();
      v103 = *(_QWORD *)(v102 - 8);
      v137 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
      v129 = v103;
      __dstb = v100;
      if (v137(v98, 1, v102))
      {
        v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v97, v98, v102);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v97, 0, 1, v102);
      }
      v105 = v99[5];
      v106 = &v97[v105];
      v107 = &v98[v105];
      if (v137(&v98[v105], 1, v102))
      {
        v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v106, v107, v102);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v106, 0, 1, v102);
      }
      v109 = v99[6];
      v110 = &v97[v109];
      v111 = &v98[v109];
      if (v137(&v98[v109], 1, v102))
      {
        v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v110, v111, v102);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v110, 0, 1, v102);
      }
      a3 = v142;
      v97[v99[7]] = v98[v99[7]];
      v97[v99[8]] = v98[v99[8]];
      v97[v99[9]] = v98[v99[9]];
      ((void (*)(char *, _QWORD, uint64_t, int *))__dstb[7])(v97, 0, 1, v99);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v141 + 56))(v9, 0, 1, v143);
  }
  v113 = *(int *)(a3 + 28);
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = *(_QWORD *)(v115 + 8);
  if (v116)
  {
    *(_BYTE *)v114 = *(_BYTE *)v115;
    v117 = *(_QWORD *)(v115 + 16);
    v118 = *(_QWORD *)(v115 + 24);
    *(_QWORD *)(v114 + 8) = v116;
    *(_QWORD *)(v114 + 16) = v117;
    *(_QWORD *)(v114 + 24) = v118;
    *(_WORD *)(v114 + 32) = *(_WORD *)(v115 + 32);
    v119 = *(_QWORD *)(v115 + 48);
    *(_QWORD *)(v114 + 40) = *(_QWORD *)(v115 + 40);
    *(_QWORD *)(v114 + 48) = v119;
    *(_QWORD *)(v114 + 56) = *(_QWORD *)(v115 + 56);
    *(_WORD *)(v114 + 64) = *(_WORD *)(v115 + 64);
    v120 = *(_QWORD *)(v115 + 80);
    *(_QWORD *)(v114 + 72) = *(_QWORD *)(v115 + 72);
    *(_QWORD *)(v114 + 80) = v120;
    *(_QWORD *)(v114 + 88) = *(_QWORD *)(v115 + 88);
    *(_WORD *)(v114 + 96) = *(_WORD *)(v115 + 96);
    *(_BYTE *)(v114 + 98) = *(_BYTE *)(v115 + 98);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v121 = *(_OWORD *)(v115 + 80);
    *(_OWORD *)(v114 + 64) = *(_OWORD *)(v115 + 64);
    *(_OWORD *)(v114 + 80) = v121;
    *(_DWORD *)(v114 + 95) = *(_DWORD *)(v115 + 95);
    v122 = *(_OWORD *)(v115 + 16);
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_OWORD *)(v114 + 16) = v122;
    v123 = *(_OWORD *)(v115 + 48);
    *(_OWORD *)(v114 + 32) = *(_OWORD *)(v115 + 32);
    *(_OWORD *)(v114 + 48) = v123;
  }
  return a1;
}

uint64_t sub_1AD3D1FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, int *);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  int *v113;
  _QWORD *v114;
  unsigned int (*v115)(_QWORD *, uint64_t, int *);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v148;
  char *v149;
  char *v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int (*v156)(char *, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(void *, uint64_t, uint64_t);
  int v182;
  size_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int (*v252)(char *, uint64_t, uint64_t);
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t (*v264)(void *, uint64_t, uint64_t);
  int v265;
  int v266;
  uint64_t v267;
  void *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  void (*v286)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v287;
  uint64_t v288;
  void *v289;
  char *v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  int *v312;
  uint64_t v313;
  uint64_t (*v314)(char *, uint64_t, int *);
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int (*v319)(char *, uint64_t, uint64_t);
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t (*v324)(char *, uint64_t, uint64_t);
  int v325;
  int v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  int v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  int v373;
  int v374;
  uint64_t v375;
  _QWORD *v376;
  void *v377;
  char *__dste;
  char *__dst;
  _QWORD *__dsta;
  char *__dstb;
  void *__dstc;
  _QWORD *__dstd;
  void *__src;
  char *__srcc;
  void *__srca;
  int *__srcb;
  int *v388;
  int *v389;
  int *v390;
  int *v391;
  int *v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 16);
  v7 = (__int128 *)(a2 + 16);
  v398 = a2;
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) == 1)
  {
    if (v8 == 1)
    {
      v9 = *v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *v6 = v9;
    }
    else
    {
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
      *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
      *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
      *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_1AD3D3C10(a1 + 16);
    v10 = *(_OWORD *)(a2 + 25);
    *v6 = *v7;
    *(_OWORD *)(a1 + 25) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
    *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
  }
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for MessagingCharacteristic(0);
  v15 = (_QWORD *)*((_QWORD *)v14 - 1);
  v16 = (uint64_t (*)(_QWORD *, uint64_t, int *))v15[6];
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v394 = a3;
      v19 = type metadata accessor for StandaloneMsgCharacteristic(0);
      v20 = *(_QWORD *)(v19 - 8);
      v393 = v12;
      __src = v15;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v13, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v38 = v13[1];
        *v12 = *v13;
        v12[1] = v38;
        v39 = v13[2];
        *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
        v12[2] = v39;
        v40 = v13[5];
        v12[4] = v13[4];
        v12[5] = v40;
        v41 = v13[6];
        *((_WORD *)v12 + 28) = *((_WORD *)v13 + 28);
        v12[6] = v41;
        v42 = *(int *)(v19 + 24);
        v43 = (char *)v12 + v42;
        __dste = (char *)v13 + v42;
        v44 = v14;
        v45 = sub_1AD63AF28();
        v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
        swift_retain();
        swift_retain();
        v47 = v45;
        v14 = v44;
        v46(v43, __dste, v47);
        v12 = v393;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v393, 0, 1, v19);
      }
      v48 = v14[5];
      v49 = (_QWORD *)((char *)v12 + v48);
      v397 = v13;
      v50 = (_QWORD *)((char *)v13 + v48);
      v51 = (int *)type metadata accessor for ChatCharacteristic(0);
      v52 = *((_QWORD *)v51 - 1);
      v388 = v14;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v52 + 48))(v50, 1, v51))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v54 = v50[1];
        *v49 = *v50;
        v49[1] = v54;
        v55 = v50[2];
        *((_WORD *)v49 + 12) = *((_WORD *)v50 + 12);
        v49[2] = v55;
        v56 = v51[5];
        __dst = (char *)v49 + v56;
        v57 = (char *)v50 + v56;
        v58 = sub_1AD63AF28();
        v59 = *(_QWORD *)(v58 - 8);
        v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
        swift_retain();
        if (v60(v57, 1, v58))
        {
          v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 16))(__dst, v57, v58);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(__dst, 0, 1, v58);
        }
        *((_BYTE *)v49 + v51[6]) = *((_BYTE *)v50 + v51[6]);
        *((_BYTE *)v49 + v51[7]) = *((_BYTE *)v50 + v51[7]);
        v79 = v51[8];
        v80 = (char *)v49 + v79;
        v81 = (char *)v50 + v79;
        v82 = *((_QWORD *)v81 + 1);
        *(_QWORD *)v80 = *(_QWORD *)v81;
        *((_QWORD *)v80 + 1) = v82;
        v83 = *((_QWORD *)v81 + 2);
        v80[24] = v81[24];
        *((_QWORD *)v80 + 2) = v83;
        v84 = v51[9];
        v85 = (char *)v49 + v84;
        v86 = (char *)v50 + v84;
        v87 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v87;
        v88 = *((_QWORD *)v86 + 2);
        v85[24] = v86[24];
        *((_QWORD *)v85 + 2) = v88;
        v89 = v51[10];
        v90 = (char *)v49 + v89;
        v91 = (char *)v50 + v89;
        v92 = *((_QWORD *)v91 + 1);
        *(_QWORD *)v90 = *(_QWORD *)v91;
        *((_QWORD *)v90 + 1) = v92;
        v93 = *((_QWORD *)v91 + 2);
        *((_WORD *)v90 + 12) = *((_WORD *)v91 + 12);
        *((_QWORD *)v90 + 2) = v93;
        v94 = v51[11];
        v95 = (char *)v49 + v94;
        v96 = (char *)v50 + v94;
        v97 = *((_QWORD *)v96 + 1);
        *(_QWORD *)v95 = *(_QWORD *)v96;
        *((_QWORD *)v95 + 1) = v97;
        v98 = *((_QWORD *)v96 + 2);
        *((_WORD *)v95 + 12) = *((_WORD *)v96 + 12);
        *((_QWORD *)v95 + 2) = v98;
        *((_BYTE *)v49 + v51[12]) = *((_BYTE *)v50 + v51[12]);
        v99 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v52 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v99(v49, 0, 1, v51);
        v14 = v388;
        v12 = v393;
      }
      v100 = v14[6];
      v101 = (char *)v12 + v100;
      v102 = (char *)v397 + v100;
      v103 = *((_QWORD *)v102 + 1);
      *(_QWORD *)v101 = *(_QWORD *)v102;
      *((_QWORD *)v101 + 1) = v103;
      v104 = *((_QWORD *)v102 + 2);
      v101[24] = v102[24];
      *((_QWORD *)v101 + 2) = v104;
      *((_BYTE *)v12 + v14[7]) = *((_BYTE *)v397 + v14[7]);
      *((_BYTE *)v12 + v14[8]) = *((_BYTE *)v397 + v14[8]);
      v105 = v14[9];
      v106 = (char *)v12 + v105;
      v107 = (char *)v397 + v105;
      v108 = *((_QWORD *)v107 + 1);
      *(_QWORD *)v106 = *(_QWORD *)v107;
      *((_QWORD *)v106 + 1) = v108;
      v109 = *((_QWORD *)v107 + 2);
      *((_WORD *)v106 + 12) = *((_WORD *)v107 + 12);
      *((_QWORD *)v106 + 2) = v109;
      v110 = v14[10];
      v111 = (_QWORD *)((char *)v12 + v110);
      v112 = (_QWORD *)((char *)v397 + v110);
      v113 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      v114 = (_QWORD *)*((_QWORD *)v113 - 1);
      v115 = (unsigned int (*)(_QWORD *, uint64_t, int *))v114[6];
      swift_retain();
      swift_retain();
      if (v115(v112, 1, v113))
      {
        v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        v376 = v114;
        v117 = v112[1];
        *v111 = *v112;
        v111[1] = v117;
        v118 = v112[2];
        *((_WORD *)v111 + 12) = *((_WORD *)v112 + 12);
        v111[2] = v118;
        v119 = v112[5];
        v111[4] = v112[4];
        v111[5] = v119;
        v120 = v112[6];
        *((_BYTE *)v111 + 56) = *((_BYTE *)v112 + 56);
        v111[6] = v120;
        *((_BYTE *)v111 + 57) = *((_BYTE *)v112 + 57);
        v121 = v113[7];
        __dstb = (char *)v111 + v121;
        v122 = (char *)v112 + v121;
        v123 = sub_1AD63AF28();
        v124 = *(_QWORD *)(v123 - 8);
        v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
        swift_retain();
        swift_retain();
        if (v125(v122, 1, v123))
        {
          v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__dstb, v122, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v124 + 16))(__dstb, v122, v123);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(__dstb, 0, 1, v123);
        }
        v127 = v124;
        v128 = v113[8];
        v129 = (char *)v111 + v128;
        v130 = (char *)v112 + v128;
        v12 = v393;
        if (v125((char *)v112 + v128, 1, v123))
        {
          v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v129, v130, v123);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v129, 0, 1, v123);
        }
        v14 = v388;
        v132 = v113[9];
        v133 = (char *)v111 + v132;
        v134 = (char *)v112 + v132;
        v135 = *(_QWORD *)((char *)v112 + v132 + 8);
        *(_QWORD *)v133 = *(_QWORD *)((char *)v112 + v132);
        *((_QWORD *)v133 + 1) = v135;
        v136 = *(_QWORD *)((char *)v112 + v132 + 24);
        swift_retain();
        if (v136 == 1)
        {
          *((_OWORD *)v133 + 1) = *((_OWORD *)v134 + 1);
        }
        else
        {
          *((_QWORD *)v133 + 2) = *((_QWORD *)v134 + 2);
          *((_QWORD *)v133 + 3) = *((_QWORD *)v134 + 3);
          swift_bridgeObjectRetain();
        }
        v137 = v113[10];
        v138 = (char *)v111 + v137;
        v139 = (char *)v112 + v137;
        v140 = *(_QWORD *)((char *)v112 + v137 + 8);
        *(_QWORD *)v138 = *(_QWORD *)((char *)v112 + v137);
        *((_QWORD *)v138 + 1) = v140;
        v141 = *(_QWORD *)((char *)v112 + v137 + 24);
        swift_retain();
        if (v141 == 1)
        {
          *((_OWORD *)v138 + 1) = *((_OWORD *)v139 + 1);
        }
        else
        {
          *((_QWORD *)v138 + 2) = *((_QWORD *)v139 + 2);
          *((_QWORD *)v138 + 3) = *((_QWORD *)v139 + 3);
          swift_bridgeObjectRetain();
        }
        *((_BYTE *)v111 + v113[11]) = *((_BYTE *)v112 + v113[11]);
        v142 = v113[12];
        v143 = (char *)v111 + v142;
        v144 = (char *)v112 + v142;
        v145 = *((_QWORD *)v144 + 1);
        *(_QWORD *)v143 = *(_QWORD *)v144;
        *((_QWORD *)v143 + 1) = v145;
        v146 = *((_QWORD *)v144 + 2);
        v143[24] = v144[24];
        *((_QWORD *)v143 + 2) = v146;
        v147 = (void (*)(_QWORD *, _QWORD, uint64_t, int *))v376[7];
        swift_retain();
        v147(v111, 0, 1, v113);
      }
      v148 = v14[11];
      v149 = (char *)v12 + v148;
      v150 = (char *)v397 + v148;
      v151 = (int *)type metadata accessor for ChatbotCharacteristic(0);
      v152 = *((_QWORD *)v151 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v152 + 48))(v150, 1, v151))
      {
        v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        v154 = sub_1AD63AF28();
        v155 = *(_QWORD *)(v154 - 8);
        v156 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48);
        if (v156(v150, 1, v154))
        {
          v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v149, v150, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v149, 0, 1, v154);
        }
        v158 = v151[5];
        v159 = &v149[v158];
        v160 = &v150[v158];
        if (v156(&v150[v158], 1, v154))
        {
          v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v159, v160, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v159, 0, 1, v154);
        }
        v162 = v151[6];
        v163 = &v149[v162];
        v164 = &v150[v162];
        if (v156(&v150[v162], 1, v154))
        {
          v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v163, v164, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v163, 0, 1, v154);
        }
        v14 = v388;
        v149[v151[7]] = v150[v151[7]];
        v149[v151[8]] = v150[v151[8]];
        v149[v151[9]] = v150[v151[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v152 + 56))(v149, 0, 1, v151);
      }
      a3 = v394;
      (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__src + 7))(v393, 0, 1, v14);
      goto LABEL_139;
    }
LABEL_14:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_139;
  }
  if (v18)
  {
    sub_1AD066230((uint64_t)v12, type metadata accessor for MessagingCharacteristic);
    goto LABEL_14;
  }
  v395 = a3;
  v23 = type metadata accessor for StandaloneMsgCharacteristic(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v12, 1, v23);
  v27 = v25(v13, 1, v23);
  v396 = v13;
  if (v26)
  {
    if (!v27)
    {
      v28 = v13[1];
      *v12 = *v13;
      v12[1] = v28;
      v29 = v13[2];
      *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
      v12[2] = v29;
      v30 = v13[5];
      v12[4] = v13[4];
      v12[5] = v30;
      v31 = v13[6];
      *((_WORD *)v12 + 28) = *((_WORD *)v13 + 28);
      v12[6] = v31;
      v32 = *(int *)(v23 + 24);
      v33 = (char *)v12 + v32;
      __srcc = (char *)v13 + v32;
      v34 = v14;
      v35 = sub_1AD63AF28();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      swift_retain();
      swift_retain();
      v37 = v35;
      v14 = v34;
      v13 = v396;
      v36(v33, __srcc, v37);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v23);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v27)
  {
    sub_1AD066230((uint64_t)v12, type metadata accessor for StandaloneMsgCharacteristic);
LABEL_25:
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_26;
  }
  v166 = v13[1];
  *v12 = *v13;
  v12[1] = v166;
  swift_retain();
  swift_release();
  v167 = v13[2];
  *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
  v12[2] = v167;
  v168 = v13[5];
  v12[4] = v13[4];
  v12[5] = v168;
  swift_retain();
  swift_release();
  v169 = v13[6];
  *((_WORD *)v12 + 28) = *((_WORD *)v13 + 28);
  v12[6] = v169;
  v170 = *(int *)(v23 + 24);
  v171 = (char *)v12 + v170;
  v172 = (char *)v13 + v170;
  v173 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 24))(v171, v172, v173);
LABEL_26:
  v63 = v14[5];
  v64 = (uint64_t)v12 + v63;
  v65 = (char *)v13 + v63;
  v66 = (int *)type metadata accessor for ChatCharacteristic(0);
  v67 = *((_QWORD *)v66 - 1);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68((uint64_t)v65, 1, v66);
  if (!v69)
  {
    if (v70)
    {
      sub_1AD066230(v64, type metadata accessor for ChatCharacteristic);
      goto LABEL_32;
    }
    v390 = v14;
    v174 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *(_QWORD *)(v64 + 8) = v174;
    swift_retain();
    swift_release();
    v175 = *((_QWORD *)v65 + 2);
    *(_WORD *)(v64 + 24) = *((_WORD *)v65 + 12);
    *(_QWORD *)(v64 + 16) = v175;
    v176 = v66[5];
    v177 = (void *)(v64 + v176);
    v178 = &v65[v176];
    v179 = sub_1AD63AF28();
    v180 = *(_QWORD *)(v179 - 8);
    v181 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v180 + 48);
    __dstc = v177;
    LODWORD(v177) = v181(v177, 1, v179);
    v182 = v181(v178, 1, v179);
    if ((_DWORD)v177)
    {
      if (!v182)
      {
        (*(void (**)(void *, char *, uint64_t))(v180 + 16))(__dstc, v178, v179);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v180 + 56))(__dstc, 0, 1, v179);
        goto LABEL_74;
      }
      v183 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
      v184 = __dstc;
    }
    else
    {
      if (!v182)
      {
        (*(void (**)(void *, char *, uint64_t))(v180 + 24))(__dstc, v178, v179);
        goto LABEL_74;
      }
      (*(void (**)(void *, uint64_t))(v180 + 8))(__dstc, v179);
      v183 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
      v184 = __dstc;
    }
    memcpy(v184, v178, v183);
LABEL_74:
    v14 = v390;
    *(_BYTE *)(v64 + v66[6]) = v65[v66[6]];
    *(_BYTE *)(v64 + v66[7]) = v65[v66[7]];
    v206 = v66[8];
    v207 = v64 + v206;
    v208 = &v65[v206];
    v209 = *(_QWORD *)&v65[v206 + 8];
    *(_QWORD *)v207 = *(_QWORD *)&v65[v206];
    *(_QWORD *)(v207 + 8) = v209;
    swift_retain();
    swift_release();
    v210 = *((_QWORD *)v208 + 2);
    *(_BYTE *)(v207 + 24) = v208[24];
    *(_QWORD *)(v207 + 16) = v210;
    v211 = v66[9];
    v212 = v64 + v211;
    v213 = &v65[v211];
    v214 = *(_QWORD *)&v65[v211 + 8];
    *(_QWORD *)v212 = *(_QWORD *)&v65[v211];
    *(_QWORD *)(v212 + 8) = v214;
    swift_retain();
    swift_release();
    v215 = *((_QWORD *)v213 + 2);
    *(_BYTE *)(v212 + 24) = v213[24];
    *(_QWORD *)(v212 + 16) = v215;
    v216 = v66[10];
    v217 = v64 + v216;
    v218 = &v65[v216];
    v219 = *(_QWORD *)&v65[v216 + 8];
    *(_QWORD *)v217 = *(_QWORD *)&v65[v216];
    *(_QWORD *)(v217 + 8) = v219;
    swift_retain();
    swift_release();
    v220 = *((_QWORD *)v218 + 2);
    *(_WORD *)(v217 + 24) = *((_WORD *)v218 + 12);
    *(_QWORD *)(v217 + 16) = v220;
    v221 = v66[11];
    v222 = v64 + v221;
    v223 = &v65[v221];
    v224 = *(_QWORD *)&v65[v221 + 8];
    *(_QWORD *)v222 = *(_QWORD *)&v65[v221];
    *(_QWORD *)(v222 + 8) = v224;
    swift_retain();
    swift_release();
    v225 = *((_QWORD *)v223 + 2);
    *(_WORD *)(v222 + 24) = *((_WORD *)v223 + 12);
    *(_QWORD *)(v222 + 16) = v225;
    *(_BYTE *)(v64 + v66[12]) = v65[v66[12]];
    goto LABEL_75;
  }
  if (v70)
  {
LABEL_32:
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
    memcpy((void *)v64, v65, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_75;
  }
  v71 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_QWORD *)(v64 + 8) = v71;
  v72 = *((_QWORD *)v65 + 2);
  *(_WORD *)(v64 + 24) = *((_WORD *)v65 + 12);
  *(_QWORD *)(v64 + 16) = v72;
  v73 = v66[5];
  __srca = (void *)(v64 + v73);
  v389 = v14;
  v74 = &v65[v73];
  v75 = sub_1AD63AF28();
  __dsta = *(_QWORD **)(v75 - 8);
  v76 = (unsigned int (*)(char *, uint64_t, uint64_t))__dsta[6];
  swift_retain();
  if (v76(v74, 1, v75))
  {
    v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(__srca, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    ((void (*)(void *, char *, uint64_t))__dsta[2])(__srca, v74, v75);
    ((void (*)(void *, _QWORD, uint64_t, uint64_t))__dsta[7])(__srca, 0, 1, v75);
  }
  *(_BYTE *)(v64 + v66[6]) = v65[v66[6]];
  *(_BYTE *)(v64 + v66[7]) = v65[v66[7]];
  v185 = v66[8];
  v186 = v64 + v185;
  v187 = &v65[v185];
  v188 = *((_QWORD *)v187 + 1);
  *(_QWORD *)v186 = *(_QWORD *)v187;
  *(_QWORD *)(v186 + 8) = v188;
  v189 = *((_QWORD *)v187 + 2);
  *(_BYTE *)(v186 + 24) = v187[24];
  *(_QWORD *)(v186 + 16) = v189;
  v190 = v66[9];
  v191 = v64 + v190;
  v192 = &v65[v190];
  v193 = *((_QWORD *)v192 + 1);
  *(_QWORD *)v191 = *(_QWORD *)v192;
  *(_QWORD *)(v191 + 8) = v193;
  v194 = *((_QWORD *)v192 + 2);
  *(_BYTE *)(v191 + 24) = v192[24];
  *(_QWORD *)(v191 + 16) = v194;
  v195 = v66[10];
  v196 = v64 + v195;
  v197 = &v65[v195];
  v198 = *((_QWORD *)v197 + 1);
  *(_QWORD *)v196 = *(_QWORD *)v197;
  *(_QWORD *)(v196 + 8) = v198;
  v199 = *((_QWORD *)v197 + 2);
  *(_WORD *)(v196 + 24) = *((_WORD *)v197 + 12);
  *(_QWORD *)(v196 + 16) = v199;
  v200 = v66[11];
  v201 = v64 + v200;
  v202 = &v65[v200];
  v203 = *((_QWORD *)v202 + 1);
  *(_QWORD *)v201 = *(_QWORD *)v202;
  *(_QWORD *)(v201 + 8) = v203;
  v204 = *((_QWORD *)v202 + 2);
  *(_WORD *)(v201 + 24) = *((_WORD *)v202 + 12);
  *(_QWORD *)(v201 + 16) = v204;
  *(_BYTE *)(v64 + v66[12]) = v65[v66[12]];
  v205 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v67 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v205(v64, 0, 1, v66);
  v14 = v389;
LABEL_75:
  v226 = v396;
  v227 = v14[6];
  v228 = (char *)v12 + v227;
  v229 = (char *)v396 + v227;
  v230 = *(_QWORD *)((char *)v396 + v227 + 8);
  *(_QWORD *)v228 = *(_QWORD *)((char *)v396 + v227);
  *((_QWORD *)v228 + 1) = v230;
  swift_retain();
  swift_release();
  v231 = *((_QWORD *)v229 + 2);
  v228[24] = v229[24];
  *((_QWORD *)v228 + 2) = v231;
  *((_BYTE *)v12 + v14[7]) = *((_BYTE *)v396 + v14[7]);
  *((_BYTE *)v12 + v14[8]) = *((_BYTE *)v396 + v14[8]);
  v232 = v14[9];
  v233 = (char *)v12 + v232;
  v234 = (char *)v396 + v232;
  v235 = *(_QWORD *)((char *)v396 + v232 + 8);
  *(_QWORD *)v233 = *(_QWORD *)((char *)v396 + v232);
  *((_QWORD *)v233 + 1) = v235;
  swift_retain();
  swift_release();
  v236 = *((_QWORD *)v234 + 2);
  *((_WORD *)v233 + 12) = *((_WORD *)v234 + 12);
  *((_QWORD *)v233 + 2) = v236;
  v237 = v14[10];
  v238 = (uint64_t)v12 + v237;
  v239 = (char *)v396 + v237;
  v240 = type metadata accessor for FileTransferCharacteristic(0);
  __dstd = *(_QWORD **)(v240 - 8);
  v241 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstd[6];
  v242 = v241(v238, 1, v240);
  __srcb = (int *)v240;
  v243 = v241((uint64_t)v239, 1, v240);
  if (!v242)
  {
    if (v243)
    {
      sub_1AD066230(v238, type metadata accessor for FileTransferCharacteristic);
      goto LABEL_81;
    }
    v392 = v14;
    v255 = *((_QWORD *)v239 + 1);
    *(_QWORD *)v238 = *(_QWORD *)v239;
    *(_QWORD *)(v238 + 8) = v255;
    swift_retain();
    swift_release();
    v256 = *((_QWORD *)v239 + 2);
    *(_WORD *)(v238 + 24) = *((_WORD *)v239 + 12);
    *(_QWORD *)(v238 + 16) = v256;
    v257 = *((_QWORD *)v239 + 5);
    *(_QWORD *)(v238 + 32) = *((_QWORD *)v239 + 4);
    *(_QWORD *)(v238 + 40) = v257;
    swift_retain();
    swift_release();
    v258 = *((_QWORD *)v239 + 6);
    *(_BYTE *)(v238 + 56) = v239[56];
    *(_QWORD *)(v238 + 48) = v258;
    *(_BYTE *)(v238 + 57) = v239[57];
    v259 = *(int *)(v240 + 28);
    v260 = (void *)(v238 + v259);
    v261 = &v239[v259];
    v262 = sub_1AD63AF28();
    v263 = *(_QWORD *)(v262 - 8);
    v264 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v263 + 48);
    v265 = v264(v260, 1, v262);
    v266 = v264(v261, 1, v262);
    if (v265)
    {
      if (!v266)
      {
        (*(void (**)(void *, char *, uint64_t))(v263 + 16))(v260, v261, v262);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v260, 0, 1, v262);
        goto LABEL_99;
      }
    }
    else
    {
      if (!v266)
      {
        (*(void (**)(void *, char *, uint64_t))(v263 + 24))(v260, v261, v262);
LABEL_99:
        v288 = __srcb[8];
        v289 = (void *)(v238 + v288);
        v290 = &v239[v288];
        v291 = v264((void *)(v238 + v288), 1, v262);
        v292 = v264(v290, 1, v262);
        if (v291)
        {
          if (!v292)
          {
            (*(void (**)(void *, char *, uint64_t))(v263 + 16))(v289, v290, v262);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v289, 0, 1, v262);
            goto LABEL_105;
          }
        }
        else
        {
          if (!v292)
          {
            (*(void (**)(void *, char *, uint64_t))(v263 + 24))(v289, v290, v262);
LABEL_105:
            v294 = __srcb[9];
            v295 = (_QWORD *)(v238 + v294);
            v296 = &v239[v294];
            v297 = *(_QWORD *)&v239[v294 + 8];
            *v295 = *(_QWORD *)&v239[v294];
            v295[1] = v297;
            swift_retain();
            swift_release();
            v298 = *((_QWORD *)v296 + 3);
            if (v295[3] == 1)
            {
              if (v298 != 1)
              {
                v295[2] = *((_QWORD *)v296 + 2);
                v295[3] = *((_QWORD *)v296 + 3);
                swift_bridgeObjectRetain();
                goto LABEL_112;
              }
            }
            else
            {
              if (v298 != 1)
              {
                v295[2] = *((_QWORD *)v296 + 2);
                v295[3] = *((_QWORD *)v296 + 3);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
LABEL_112:
                v299 = __srcb[10];
                v300 = (_QWORD *)(v238 + v299);
                v301 = &v239[v299];
                v302 = *(_QWORD *)&v239[v299 + 8];
                *v300 = *(_QWORD *)&v239[v299];
                v300[1] = v302;
                swift_retain();
                swift_release();
                v303 = *((_QWORD *)v301 + 3);
                if (v300[3] == 1)
                {
                  if (v303 != 1)
                  {
                    v300[2] = *((_QWORD *)v301 + 2);
                    v300[3] = *((_QWORD *)v301 + 3);
                    swift_bridgeObjectRetain();
LABEL_119:
                    v14 = v392;
                    v226 = v396;
                    *(_BYTE *)(v238 + __srcb[11]) = v239[__srcb[11]];
                    v304 = __srcb[12];
                    v305 = v238 + v304;
                    v306 = &v239[v304];
                    v307 = *(_QWORD *)&v239[v304 + 8];
                    *(_QWORD *)v305 = *(_QWORD *)&v239[v304];
                    *(_QWORD *)(v305 + 8) = v307;
                    swift_retain();
                    swift_release();
                    v308 = *((_QWORD *)v306 + 2);
                    *(_BYTE *)(v305 + 24) = v306[24];
                    *(_QWORD *)(v305 + 16) = v308;
                    goto LABEL_120;
                  }
                }
                else
                {
                  if (v303 != 1)
                  {
                    v300[2] = *((_QWORD *)v301 + 2);
                    v300[3] = *((_QWORD *)v301 + 3);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_119;
                  }
                  sub_1AD0256E4((uint64_t)(v300 + 2));
                }
                *((_OWORD *)v300 + 1) = *((_OWORD *)v301 + 1);
                goto LABEL_119;
              }
              sub_1AD0256E4((uint64_t)(v295 + 2));
            }
            *((_OWORD *)v295 + 1) = *((_OWORD *)v296 + 1);
            goto LABEL_112;
          }
          (*(void (**)(void *, uint64_t))(v263 + 8))(v289, v262);
        }
        v293 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v289, v290, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
        goto LABEL_105;
      }
      (*(void (**)(void *, uint64_t))(v263 + 8))(v260, v262);
    }
    v287 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
    goto LABEL_99;
  }
  if (v243)
  {
LABEL_81:
    v254 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
    memcpy((void *)v238, v239, *(_QWORD *)(*(_QWORD *)(v254 - 8) + 64));
    goto LABEL_120;
  }
  v391 = v14;
  v244 = *((_QWORD *)v239 + 1);
  *(_QWORD *)v238 = *(_QWORD *)v239;
  *(_QWORD *)(v238 + 8) = v244;
  v245 = *((_QWORD *)v239 + 2);
  *(_WORD *)(v238 + 24) = *((_WORD *)v239 + 12);
  *(_QWORD *)(v238 + 16) = v245;
  v246 = *((_QWORD *)v239 + 5);
  *(_QWORD *)(v238 + 32) = *((_QWORD *)v239 + 4);
  *(_QWORD *)(v238 + 40) = v246;
  v247 = *((_QWORD *)v239 + 6);
  *(_BYTE *)(v238 + 56) = v239[56];
  *(_QWORD *)(v238 + 48) = v247;
  *(_BYTE *)(v238 + 57) = v239[57];
  v248 = *(int *)(v240 + 28);
  v377 = (void *)(v238 + v248);
  v249 = &v239[v248];
  v250 = sub_1AD63AF28();
  v251 = *(_QWORD *)(v250 - 8);
  v252 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48);
  swift_retain();
  swift_retain();
  if (v252(v249, 1, v250))
  {
    v253 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v377, v249, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v251 + 16))(v377, v249, v250);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v377, 0, 1, v250);
  }
  v267 = __srcb[8];
  v268 = (void *)(v238 + v267);
  v269 = &v239[v267];
  if (v252(&v239[v267], 1, v250))
  {
    v270 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v251 + 16))(v268, v269, v250);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v268, 0, 1, v250);
  }
  v14 = v391;
  v271 = __srcb[9];
  v272 = v238 + v271;
  v273 = &v239[v271];
  v274 = *(_QWORD *)&v239[v271 + 8];
  *(_QWORD *)v272 = *(_QWORD *)&v239[v271];
  *(_QWORD *)(v272 + 8) = v274;
  v275 = *(_QWORD *)&v239[v271 + 24];
  swift_retain();
  if (v275 == 1)
  {
    *(_OWORD *)(v272 + 16) = *((_OWORD *)v273 + 1);
  }
  else
  {
    *(_QWORD *)(v272 + 16) = *((_QWORD *)v273 + 2);
    *(_QWORD *)(v272 + 24) = *((_QWORD *)v273 + 3);
    swift_bridgeObjectRetain();
  }
  v276 = __srcb[10];
  v277 = v238 + v276;
  v278 = &v239[v276];
  v279 = *(_QWORD *)&v239[v276 + 8];
  *(_QWORD *)v277 = *(_QWORD *)&v239[v276];
  *(_QWORD *)(v277 + 8) = v279;
  v280 = *(_QWORD *)&v239[v276 + 24];
  swift_retain();
  if (v280 == 1)
  {
    *(_OWORD *)(v277 + 16) = *((_OWORD *)v278 + 1);
  }
  else
  {
    *(_QWORD *)(v277 + 16) = *((_QWORD *)v278 + 2);
    *(_QWORD *)(v277 + 24) = *((_QWORD *)v278 + 3);
    swift_bridgeObjectRetain();
  }
  v226 = v396;
  *(_BYTE *)(v238 + __srcb[11]) = v239[__srcb[11]];
  v281 = __srcb[12];
  v282 = v238 + v281;
  v283 = &v239[v281];
  v284 = *((_QWORD *)v283 + 1);
  *(_QWORD *)v282 = *(_QWORD *)v283;
  *(_QWORD *)(v282 + 8) = v284;
  v285 = *((_QWORD *)v283 + 2);
  *(_BYTE *)(v282 + 24) = v283[24];
  *(_QWORD *)(v282 + 16) = v285;
  v286 = (void (*)(uint64_t, _QWORD, uint64_t, int *))__dstd[7];
  swift_retain();
  v286(v238, 0, 1, __srcb);
LABEL_120:
  v309 = v14[11];
  v310 = (char *)v12 + v309;
  v311 = (char *)v226 + v309;
  v312 = (int *)type metadata accessor for ChatbotCharacteristic(0);
  v313 = *((_QWORD *)v312 - 1);
  v314 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v313 + 48);
  v315 = v314(v310, 1, v312);
  v316 = v314(v311, 1, v312);
  if (!v315)
  {
    if (v316)
    {
      sub_1AD066230((uint64_t)v310, type metadata accessor for ChatbotCharacteristic);
      goto LABEL_126;
    }
    v322 = sub_1AD63AF28();
    v323 = *(_QWORD *)(v322 - 8);
    v324 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v323 + 48);
    v325 = v324(v310, 1, v322);
    v326 = v324(v311, 1, v322);
    if (v325)
    {
      if (!v326)
      {
        (*(void (**)(char *, char *, uint64_t))(v323 + 16))(v310, v311, v322);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v323 + 56))(v310, 0, 1, v322);
        goto LABEL_150;
      }
    }
    else
    {
      if (!v326)
      {
        (*(void (**)(char *, char *, uint64_t))(v323 + 24))(v310, v311, v322);
LABEL_150:
        v364 = v312[5];
        v365 = &v310[v364];
        v366 = &v311[v364];
        v367 = v324(&v310[v364], 1, v322);
        v368 = v324(v366, 1, v322);
        if (v367)
        {
          if (!v368)
          {
            (*(void (**)(char *, char *, uint64_t))(v323 + 16))(v365, v366, v322);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v323 + 56))(v365, 0, 1, v322);
            goto LABEL_156;
          }
        }
        else
        {
          if (!v368)
          {
            (*(void (**)(char *, char *, uint64_t))(v323 + 24))(v365, v366, v322);
LABEL_156:
            v370 = v312[6];
            v371 = &v310[v370];
            v372 = &v311[v370];
            v373 = v324(&v310[v370], 1, v322);
            v374 = v324(v372, 1, v322);
            if (v373)
            {
              if (!v374)
              {
                (*(void (**)(char *, char *, uint64_t))(v323 + 16))(v371, v372, v322);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v323 + 56))(v371, 0, 1, v322);
LABEL_162:
                v310[v312[7]] = v311[v312[7]];
                v310[v312[8]] = v311[v312[8]];
                v310[v312[9]] = v311[v312[9]];
                goto LABEL_127;
              }
            }
            else
            {
              if (!v374)
              {
                (*(void (**)(char *, char *, uint64_t))(v323 + 24))(v371, v372, v322);
                goto LABEL_162;
              }
              (*(void (**)(char *, uint64_t))(v323 + 8))(v371, v322);
            }
            v375 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v371, v372, *(_QWORD *)(*(_QWORD *)(v375 - 8) + 64));
            goto LABEL_162;
          }
          (*(void (**)(char *, uint64_t))(v323 + 8))(v365, v322);
        }
        v369 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v365, v366, *(_QWORD *)(*(_QWORD *)(v369 - 8) + 64));
        goto LABEL_156;
      }
      (*(void (**)(char *, uint64_t))(v323 + 8))(v310, v322);
    }
    v363 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v363 - 8) + 64));
    goto LABEL_150;
  }
  if (v316)
  {
LABEL_126:
    v321 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
    memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v321 - 8) + 64));
LABEL_127:
    a3 = v395;
    goto LABEL_139;
  }
  v317 = sub_1AD63AF28();
  v318 = *(_QWORD *)(v317 - 8);
  v319 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v318 + 48);
  if (v319(v311, 1, v317))
  {
    v320 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v320 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v318 + 16))(v310, v311, v317);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v318 + 56))(v310, 0, 1, v317);
  }
  v327 = v312[5];
  v328 = &v310[v327];
  v329 = &v311[v327];
  if (v319(&v311[v327], 1, v317))
  {
    v330 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v328, v329, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v318 + 16))(v328, v329, v317);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v318 + 56))(v328, 0, 1, v317);
  }
  v331 = v312[6];
  v332 = &v310[v331];
  v333 = &v311[v331];
  if (v319(&v311[v331], 1, v317))
  {
    v334 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v334 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v318 + 16))(v332, v333, v317);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v318 + 56))(v332, 0, 1, v317);
  }
  a3 = v395;
  v310[v312[7]] = v311[v312[7]];
  v310[v312[8]] = v311[v312[8]];
  v310[v312[9]] = v311[v312[9]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v313 + 56))(v310, 0, 1, v312);
LABEL_139:
  v335 = *(int *)(a3 + 28);
  v336 = a1 + v335;
  v337 = (__int128 *)(v398 + v335);
  v338 = *(_QWORD *)(a1 + v335 + 8);
  v339 = *(_QWORD *)(v398 + v335 + 8);
  if (v338)
  {
    if (v339)
    {
      *(_BYTE *)v336 = *(_BYTE *)v337;
      v340 = *((_QWORD *)v337 + 2);
      *(_QWORD *)(v336 + 8) = *((_QWORD *)v337 + 1);
      *(_QWORD *)(v336 + 16) = v340;
      swift_retain();
      swift_release();
      v341 = *((_QWORD *)v337 + 3);
      *(_WORD *)(v336 + 32) = *((_WORD *)v337 + 16);
      *(_QWORD *)(v336 + 24) = v341;
      v342 = *((_QWORD *)v337 + 6);
      *(_QWORD *)(v336 + 40) = *((_QWORD *)v337 + 5);
      *(_QWORD *)(v336 + 48) = v342;
      swift_retain();
      swift_release();
      v343 = *((_QWORD *)v337 + 7);
      *(_WORD *)(v336 + 64) = *((_WORD *)v337 + 32);
      *(_QWORD *)(v336 + 56) = v343;
      v344 = *((_QWORD *)v337 + 10);
      *(_QWORD *)(v336 + 72) = *((_QWORD *)v337 + 9);
      *(_QWORD *)(v336 + 80) = v344;
      swift_retain();
      swift_release();
      v345 = *((_QWORD *)v337 + 11);
      *(_WORD *)(v336 + 96) = *((_WORD *)v337 + 48);
      *(_QWORD *)(v336 + 88) = v345;
      *(_BYTE *)(v336 + 98) = *((_BYTE *)v337 + 98);
    }
    else
    {
      sub_1AD3D3C44(v336);
      v353 = v337[1];
      v352 = v337[2];
      *(_OWORD *)v336 = *v337;
      *(_OWORD *)(v336 + 16) = v353;
      *(_OWORD *)(v336 + 32) = v352;
      v355 = v337[4];
      v354 = v337[5];
      v356 = v337[3];
      *(_DWORD *)(v336 + 95) = *(_DWORD *)((char *)v337 + 95);
      *(_OWORD *)(v336 + 64) = v355;
      *(_OWORD *)(v336 + 80) = v354;
      *(_OWORD *)(v336 + 48) = v356;
    }
  }
  else if (v339)
  {
    *(_BYTE *)v336 = *(_BYTE *)v337;
    v346 = *((_QWORD *)v337 + 2);
    *(_QWORD *)(v336 + 8) = *((_QWORD *)v337 + 1);
    *(_QWORD *)(v336 + 16) = v346;
    v347 = *((_QWORD *)v337 + 3);
    *(_WORD *)(v336 + 32) = *((_WORD *)v337 + 16);
    *(_QWORD *)(v336 + 24) = v347;
    v348 = *((_QWORD *)v337 + 6);
    *(_QWORD *)(v336 + 40) = *((_QWORD *)v337 + 5);
    *(_QWORD *)(v336 + 48) = v348;
    v349 = *((_QWORD *)v337 + 7);
    *(_WORD *)(v336 + 64) = *((_WORD *)v337 + 32);
    *(_QWORD *)(v336 + 56) = v349;
    v350 = *((_QWORD *)v337 + 10);
    *(_QWORD *)(v336 + 72) = *((_QWORD *)v337 + 9);
    *(_QWORD *)(v336 + 80) = v350;
    v351 = *((_QWORD *)v337 + 11);
    *(_WORD *)(v336 + 96) = *((_WORD *)v337 + 48);
    *(_QWORD *)(v336 + 88) = v351;
    *(_BYTE *)(v336 + 98) = *((_BYTE *)v337 + 98);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v357 = *v337;
    v358 = v337[2];
    *(_OWORD *)(v336 + 16) = v337[1];
    *(_OWORD *)(v336 + 32) = v358;
    *(_OWORD *)v336 = v357;
    v359 = v337[3];
    v360 = v337[4];
    v361 = v337[5];
    *(_DWORD *)(v336 + 95) = *(_DWORD *)((char *)v337 + 95);
    *(_OWORD *)(v336 + 64) = v360;
    *(_OWORD *)(v336 + 80) = v361;
    *(_OWORD *)(v336 + 48) = v359;
  }
  return a1;
}

uint64_t sub_1AD3D3C10(uint64_t a1)
{
  destroy for SMSCTPartPlain();
  return a1;
}

uint64_t sub_1AD3D3C44(uint64_t a1)
{
  destroy for CapDiscoveryCharacteristic();
  return a1;
}

_OWORD *sub_1AD3D3C78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  int *v23;
  unsigned int (**v24)(_OWORD *, uint64_t, int *);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v100;
  _OWORD *__src;
  void *__srca;
  unsigned int (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void *__dst;
  char *__dsta;
  char *__dstb;
  unsigned int (*__dstc)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v7 = *(int *)(a3 + 24);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = (int *)type metadata accessor for MessagingCharacteristic(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v112 = v11;
    v113 = v3;
    v13 = type metadata accessor for StandaloneMsgCharacteristic(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *v8 = *v9;
      *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)v9 + 9);
      v8[2] = v9[2];
      *(_OWORD *)((char *)v8 + 42) = *(_OWORD *)((char *)v9 + 42);
      v16 = *(int *)(v13 + 24);
      v17 = (char *)v8 + v16;
      v18 = (char *)v9 + v16;
      v19 = sub_1AD63AF28();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
    }
    v20 = v10[5];
    v21 = (_OWORD *)((char *)v8 + v20);
    v22 = (_OWORD *)((char *)v9 + v20);
    v23 = (int *)type metadata accessor for ChatCharacteristic(0);
    v24 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v23 - 1);
    if (v24[6](v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      __src = v8;
      *v21 = *v22;
      *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)v22 + 10);
      v26 = v23[5];
      v105 = (char *)v21 + v26;
      __dst = v24;
      v27 = (char *)v22 + v26;
      v28 = sub_1AD63AF28();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v105, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v105, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v105, 0, 1, v28);
      }
      *((_BYTE *)v21 + v23[6]) = *((_BYTE *)v22 + v23[6]);
      *((_BYTE *)v21 + v23[7]) = *((_BYTE *)v22 + v23[7]);
      v31 = v23[8];
      v32 = (_OWORD *)((char *)v21 + v31);
      v33 = (_OWORD *)((char *)v22 + v31);
      *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v33 + 9);
      *v32 = *v33;
      v34 = v23[9];
      v35 = (_OWORD *)((char *)v21 + v34);
      v36 = (_OWORD *)((char *)v22 + v34);
      *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v36 + 9);
      *v35 = *v36;
      v37 = v23[10];
      v38 = (_OWORD *)((char *)v21 + v37);
      v39 = (_OWORD *)((char *)v22 + v37);
      *(_OWORD *)((char *)v38 + 10) = *(_OWORD *)((char *)v39 + 10);
      *v38 = *v39;
      v40 = v23[11];
      v41 = (_OWORD *)((char *)v21 + v40);
      v42 = (_OWORD *)((char *)v22 + v40);
      *v41 = *v42;
      *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)((char *)v42 + 10);
      *((_BYTE *)v21 + v23[12]) = *((_BYTE *)v22 + v23[12]);
      (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dst + 7))(v21, 0, 1, v23);
      v8 = __src;
    }
    v43 = v10[6];
    v44 = (_OWORD *)((char *)v8 + v43);
    v45 = (_OWORD *)((char *)v9 + v43);
    *v44 = *v45;
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v45 + 9);
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v46 = v10[9];
    v47 = (_OWORD *)((char *)v8 + v46);
    v48 = (_OWORD *)((char *)v9 + v46);
    *v47 = *v48;
    *(_OWORD *)((char *)v47 + 10) = *(_OWORD *)((char *)v48 + 10);
    v49 = v10[10];
    v50 = (_OWORD *)((char *)v8 + v49);
    v51 = (_OWORD *)((char *)v9 + v49);
    v52 = (int *)type metadata accessor for FileTransferCharacteristic(0);
    v53 = *((_QWORD *)v52 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      *v50 = *v51;
      *(_OWORD *)((char *)v50 + 10) = *(_OWORD *)((char *)v51 + 10);
      v50[2] = v51[2];
      *(_OWORD *)((char *)v50 + 41) = *(_OWORD *)((char *)v51 + 41);
      *((_BYTE *)v50 + 57) = *((_BYTE *)v51 + 57);
      v55 = v52[7];
      v106 = v53;
      __dsta = (char *)v50 + v55;
      v56 = (char *)v51 + v55;
      v57 = sub_1AD63AF28();
      v58 = *(_QWORD *)(v57 - 8);
      __srca = v56;
      v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
      v59 = v56;
      v60 = v57;
      v100 = v58;
      if (v103(v59, 1, v57))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(__dsta, __srca, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v58 + 32))(__dsta, __srca, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v60);
      }
      v62 = v52[8];
      __dstb = (char *)v50 + v62;
      v63 = (char *)v51 + v62;
      if (v103((char *)v51 + v62, 1, v60))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(__dstb, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v100 + 32))(__dstb, v63, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(__dstb, 0, 1, v60);
      }
      v65 = v52[9];
      v66 = (_OWORD *)((char *)v50 + v65);
      v67 = (_OWORD *)((char *)v51 + v65);
      v68 = v67[1];
      *v66 = *v67;
      v66[1] = v68;
      v69 = v52[10];
      v70 = (_OWORD *)((char *)v50 + v69);
      v71 = (_OWORD *)((char *)v51 + v69);
      v72 = v71[1];
      *v70 = *v71;
      v70[1] = v72;
      *((_BYTE *)v50 + v52[11]) = *((_BYTE *)v51 + v52[11]);
      v73 = v52[12];
      v74 = (_OWORD *)((char *)v50 + v73);
      v75 = (_OWORD *)((char *)v51 + v73);
      *v74 = *v75;
      *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)((char *)v75 + 9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v106 + 56))(v50, 0, 1, v52);
    }
    v76 = v10[11];
    v77 = (char *)v8 + v76;
    v78 = (char *)v9 + v76;
    v79 = (int *)type metadata accessor for ChatbotCharacteristic(0);
    v80 = *((_QWORD *)v79 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v80 + 48))(v78, 1, v79))
    {
      v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = sub_1AD63AF28();
      v83 = *(_QWORD *)(v82 - 8);
      __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
      v104 = v80;
      v107 = v83;
      if (__dstc(v78, 1, v82))
      {
        v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v77, v78, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v77, 0, 1, v82);
      }
      v85 = v79[5];
      v86 = &v77[v85];
      v87 = &v78[v85];
      if (__dstc(&v78[v85], 1, v82))
      {
        v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v86, v87, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v86, 0, 1, v82);
      }
      v89 = v79[6];
      v90 = &v77[v89];
      v91 = &v78[v89];
      if (__dstc(&v78[v89], 1, v82))
      {
        v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v90, v91, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v90, 0, 1, v82);
      }
      v77[v79[7]] = v78[v79[7]];
      v77[v79[8]] = v78[v79[8]];
      v77[v79[9]] = v78[v79[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v104 + 56))(v77, 0, 1, v79);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v112 + 56))(v8, 0, 1, v10);
    v3 = v113;
  }
  v93 = *(int *)(v3 + 28);
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = *((_OWORD *)v95 + 5);
  *((_OWORD *)v94 + 4) = *((_OWORD *)v95 + 4);
  *((_OWORD *)v94 + 5) = v96;
  *(_DWORD *)(v94 + 95) = *(_DWORD *)(v95 + 95);
  v97 = *((_OWORD *)v95 + 1);
  *(_OWORD *)v94 = *(_OWORD *)v95;
  *((_OWORD *)v94 + 1) = v97;
  v98 = *((_OWORD *)v95 + 3);
  *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
  *((_OWORD *)v94 + 3) = v98;
  return a1;
}

uint64_t sub_1AD3D4438(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v13)(_OWORD *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_OWORD *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  int *v48;
  uint64_t v49;
  uint64_t (*v50)(_OWORD *, uint64_t, int *);
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  int *v79;
  unsigned int (**v80)(_OWORD *, uint64_t, int *);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  __int128 v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t (*v127)(char *, uint64_t, uint64_t);
  int v128;
  size_t v129;
  void *v130;
  uint64_t v131;
  _OWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  _OWORD *v135;
  _OWORD *v136;
  uint64_t v137;
  _OWORD *v138;
  _OWORD *v139;
  uint64_t v140;
  _OWORD *v141;
  _OWORD *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  int *v153;
  uint64_t (*v154)(uint64_t, uint64_t, int *);
  int v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t (*v165)(void);
  int v166;
  size_t v167;
  void *v168;
  uint64_t v169;
  void *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  _OWORD *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  _OWORD *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  int v198;
  size_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  int *v217;
  uint64_t v218;
  uint64_t (*v219)(char *, uint64_t, int *);
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int (*v224)(char *, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t (*v229)(char *, uint64_t, uint64_t);
  int v230;
  int v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v262;
  int v263;
  unsigned int (*v264)(char *, uint64_t, uint64_t);
  void *__src;
  void *__srca;
  void (**v267)(void *, const void *, uint64_t);
  char *v268;
  void (**v269)(void *, const void *, uint64_t);
  _QWORD *v270;
  unsigned int (*v271)(char *, uint64_t, uint64_t);
  _QWORD *v272;
  char *__dst;
  _OWORD *__dsta;
  unsigned int (*__dstb)(char *, uint64_t, uint64_t);
  void *__dstc;
  char *__dstd;
  void *__dste;
  _QWORD *v279;
  _QWORD *v280;
  void *v281;
  char *v282;
  void *v283;
  _QWORD *v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  int *v289;

  v4 = a2;
  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) == 1)
    goto LABEL_4;
  v7 = v4[3];
  if (v7 == 1)
  {
    sub_1AD3D3C10(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)v4 + 1);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v4 + 25);
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 16) = *((_BYTE *)v4 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v4 + 8);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)v4 + 36);
  *(_DWORD *)(a1 + 37) = *(_DWORD *)((char *)v4 + 37);
LABEL_6:
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)((char *)v4 + v8);
  v11 = (int *)type metadata accessor for MessagingCharacteristic(0);
  v12 = (_QWORD *)*((_QWORD *)v11 - 1);
  v13 = (uint64_t (*)(_OWORD *, uint64_t, int *))v12[6];
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      v281 = v12;
      v286 = a3;
      v16 = type metadata accessor for StandaloneMsgCharacteristic(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *v9 = *v10;
        *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
        v9[2] = v10[2];
        *(_OWORD *)((char *)v9 + 42) = *(_OWORD *)((char *)v10 + 42);
        v29 = *(int *)(v16 + 24);
        v30 = (char *)v9 + v29;
        v31 = (char *)v10 + v29;
        v32 = sub_1AD63AF28();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
      }
      v33 = v11[5];
      v34 = (_OWORD *)((char *)v9 + v33);
      v35 = (_OWORD *)((char *)v10 + v33);
      v36 = (int *)type metadata accessor for ChatCharacteristic(0);
      v37 = *((_QWORD *)v36 - 1);
      v288 = v11;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v34 = *v35;
        *(_OWORD *)((char *)v34 + 10) = *(_OWORD *)((char *)v35 + 10);
        v39 = v36[5];
        __dst = (char *)v34 + v39;
        v279 = v4;
        v40 = (char *)v35 + v39;
        v41 = sub_1AD63AF28();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(__dst, v40, v41);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
        }
        *((_BYTE *)v34 + v36[6]) = *((_BYTE *)v35 + v36[6]);
        *((_BYTE *)v34 + v36[7]) = *((_BYTE *)v35 + v36[7]);
        v58 = v36[8];
        v59 = (_OWORD *)((char *)v34 + v58);
        v60 = (_OWORD *)((char *)v35 + v58);
        *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v60 + 9);
        *v59 = *v60;
        v61 = v36[9];
        v62 = (_OWORD *)((char *)v34 + v61);
        v63 = (_OWORD *)((char *)v35 + v61);
        *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v63 + 9);
        *v62 = *v63;
        v64 = v36[10];
        v65 = (_OWORD *)((char *)v34 + v64);
        v66 = (_OWORD *)((char *)v35 + v64);
        *(_OWORD *)((char *)v65 + 10) = *(_OWORD *)((char *)v66 + 10);
        *v65 = *v66;
        v67 = v36[11];
        v68 = (_OWORD *)((char *)v34 + v67);
        v69 = (_OWORD *)((char *)v35 + v67);
        *v68 = *v69;
        *(_OWORD *)((char *)v68 + 10) = *(_OWORD *)((char *)v69 + 10);
        *((_BYTE *)v34 + v36[12]) = *((_BYTE *)v35 + v36[12]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
        v4 = v279;
        v11 = v288;
      }
      v70 = v11[6];
      v71 = (_OWORD *)((char *)v9 + v70);
      v72 = (_OWORD *)((char *)v10 + v70);
      *v71 = *v72;
      *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)v72 + 9);
      *((_BYTE *)v9 + v11[7]) = *((_BYTE *)v10 + v11[7]);
      *((_BYTE *)v9 + v11[8]) = *((_BYTE *)v10 + v11[8]);
      v73 = v11[9];
      v74 = (_OWORD *)((char *)v9 + v73);
      v75 = (_OWORD *)((char *)v10 + v73);
      *v74 = *v75;
      *(_OWORD *)((char *)v74 + 10) = *(_OWORD *)((char *)v75 + 10);
      v76 = v11[10];
      v77 = (_OWORD *)((char *)v9 + v76);
      v78 = (_OWORD *)((char *)v10 + v76);
      v79 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      v80 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v79 - 1);
      if (v80[6](v78, 1, v79))
      {
        v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        *v77 = *v78;
        *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)((char *)v78 + 10);
        v77[2] = v78[2];
        *(_OWORD *)((char *)v77 + 41) = *(_OWORD *)((char *)v78 + 41);
        *((_BYTE *)v77 + 57) = *((_BYTE *)v78 + 57);
        v82 = v79[7];
        v268 = (char *)v77 + v82;
        __dsta = v9;
        v83 = (char *)v78 + v82;
        v84 = sub_1AD63AF28();
        v85 = *(_QWORD *)(v84 - 8);
        v264 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
        __src = v80;
        v262 = v85;
        if (v264(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v268, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v268, v83, v84);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v268, 0, 1, v84);
        }
        v87 = v79[8];
        v88 = (char *)v77 + v87;
        v89 = (char *)v78 + v87;
        v9 = __dsta;
        if (v264((char *)v78 + v87, 1, v84))
        {
          v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v88, v89, v84);
          v9 = __dsta;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v262 + 56))(v88, 0, 1, v84);
        }
        v11 = v288;
        v91 = v79[9];
        v92 = (_OWORD *)((char *)v77 + v91);
        v93 = (_OWORD *)((char *)v78 + v91);
        v94 = v93[1];
        *v92 = *v93;
        v92[1] = v94;
        v95 = v79[10];
        v96 = (_OWORD *)((char *)v77 + v95);
        v97 = (_OWORD *)((char *)v78 + v95);
        v98 = v97[1];
        *v96 = *v97;
        v96[1] = v98;
        *((_BYTE *)v77 + v79[11]) = *((_BYTE *)v78 + v79[11]);
        v99 = v79[12];
        v100 = (_OWORD *)((char *)v77 + v99);
        v101 = (_OWORD *)((char *)v78 + v99);
        *v100 = *v101;
        *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v101 + 9);
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__src + 7))(v77, 0, 1, v79);
      }
      v102 = v11[11];
      v103 = (char *)v9 + v102;
      v104 = (char *)v10 + v102;
      v105 = (int *)type metadata accessor for ChatbotCharacteristic(0);
      v106 = *((_QWORD *)v105 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v106 + 48))(v104, 1, v105))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v108 = sub_1AD63AF28();
        v109 = *(_QWORD *)(v108 - 8);
        __dstb = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
        v269 = (void (**)(void *, const void *, uint64_t))v109;
        if (__dstb(v104, 1, v108))
        {
          v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v103, v104, v108);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v103, 0, 1, v108);
        }
        v111 = v105[5];
        v112 = &v103[v111];
        v113 = &v104[v111];
        if (__dstb(&v104[v111], 1, v108))
        {
          v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          v269[4](v112, v113, v108);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v269[7])(v112, 0, 1, v108);
        }
        v115 = v105[6];
        v116 = &v103[v115];
        v117 = &v104[v115];
        if (__dstb(&v104[v115], 1, v108))
        {
          v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        }
        else
        {
          v269[4](v116, v117, v108);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v269[7])(v116, 0, 1, v108);
        }
        v103[v105[7]] = v104[v105[7]];
        v103[v105[8]] = v104[v105[8]];
        v103[v105[9]] = v104[v105[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v106 + 56))(v103, 0, 1, v105);
      }
      a3 = v286;
      (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))v281 + 7))(v9, 0, 1, v288);
      goto LABEL_141;
    }
LABEL_12:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_141;
  }
  if (v15)
  {
    sub_1AD066230((uint64_t)v9, type metadata accessor for MessagingCharacteristic);
    goto LABEL_12;
  }
  v287 = a3;
  v20 = type metadata accessor for StandaloneMsgCharacteristic(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v9, 1, v20);
  v24 = v22(v10, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *v9 = *v10;
      *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
      v9[2] = v10[2];
      *(_OWORD *)((char *)v9 + 42) = *(_OWORD *)((char *)v10 + 42);
      v25 = *(int *)(v20 + 24);
      v26 = (char *)v9 + v25;
      v27 = (char *)v10 + v25;
      v28 = sub_1AD63AF28();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v24)
  {
    sub_1AD066230((uint64_t)v9, type metadata accessor for StandaloneMsgCharacteristic);
LABEL_23:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_24;
  }
  *v9 = *v10;
  swift_release();
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  *((_BYTE *)v9 + 24) = *((_BYTE *)v10 + 24);
  v9[2] = v10[2];
  swift_release();
  *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
  *((_WORD *)v9 + 28) = *((_WORD *)v10 + 28);
  v119 = *(int *)(v20 + 24);
  v120 = (char *)v9 + v119;
  v121 = (char *)v10 + v119;
  v122 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 40))(v120, v121, v122);
LABEL_24:
  v289 = v11;
  v45 = v11[5];
  v46 = (_OWORD *)((char *)v9 + v45);
  v47 = (_OWORD *)((char *)v10 + v45);
  v48 = (int *)type metadata accessor for ChatCharacteristic(0);
  v49 = *((_QWORD *)v48 - 1);
  v50 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  v280 = v4;
  if (v51)
  {
    if (!v52)
    {
      *v46 = *v47;
      *(_OWORD *)((char *)v46 + 10) = *(_OWORD *)((char *)v47 + 10);
      v53 = v48[5];
      v282 = (char *)v46 + v53;
      v54 = (char *)v47 + v53;
      v55 = sub_1AD63AF28();
      v267 = *(void (***)(void *, const void *, uint64_t))(v55 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v267[6])(v54, 1, v55))
      {
        v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v282, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v267[4](v282, v54, v55);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v267[7])(v282, 0, 1, v55);
      }
      *((_BYTE *)v46 + v48[6]) = *((_BYTE *)v47 + v48[6]);
      *((_BYTE *)v46 + v48[7]) = *((_BYTE *)v47 + v48[7]);
      v131 = v48[8];
      v132 = (_OWORD *)((char *)v46 + v131);
      v133 = (_OWORD *)((char *)v47 + v131);
      *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)((char *)v133 + 9);
      *v132 = *v133;
      v134 = v48[9];
      v135 = (_OWORD *)((char *)v46 + v134);
      v136 = (_OWORD *)((char *)v47 + v134);
      *(_OWORD *)((char *)v135 + 9) = *(_OWORD *)((char *)v136 + 9);
      *v135 = *v136;
      v137 = v48[10];
      v138 = (_OWORD *)((char *)v46 + v137);
      v139 = (_OWORD *)((char *)v47 + v137);
      *(_OWORD *)((char *)v138 + 10) = *(_OWORD *)((char *)v139 + 10);
      *v138 = *v139;
      v140 = v48[11];
      v141 = (_OWORD *)((char *)v46 + v140);
      v142 = (_OWORD *)((char *)v47 + v140);
      *v141 = *v142;
      *(_OWORD *)((char *)v141 + 10) = *(_OWORD *)((char *)v142 + 10);
      *((_BYTE *)v46 + v48[12]) = *((_BYTE *)v47 + v48[12]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_61;
    }
LABEL_30:
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
LABEL_61:
    v143 = v289;
    goto LABEL_62;
  }
  if (v52)
  {
    sub_1AD066230((uint64_t)v46, type metadata accessor for ChatCharacteristic);
    goto LABEL_30;
  }
  *v46 = *v47;
  swift_release();
  *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  *((_WORD *)v46 + 12) = *((_WORD *)v47 + 12);
  v123 = v48[5];
  v124 = (char *)v46 + v123;
  v125 = (char *)v47 + v123;
  v126 = sub_1AD63AF28();
  v270 = *(_QWORD **)(v126 - 8);
  v127 = (uint64_t (*)(char *, uint64_t, uint64_t))v270[6];
  v283 = v124;
  LODWORD(v124) = v127(v124, 1, v126);
  v128 = v127(v125, 1, v126);
  if ((_DWORD)v124)
  {
    if (!v128)
    {
      ((void (*)(void *, char *, uint64_t))v270[4])(v283, v125, v126);
      ((void (*)(void *, _QWORD, uint64_t, uint64_t))v270[7])(v283, 0, 1, v126);
      goto LABEL_86;
    }
    v129 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
    v130 = v283;
  }
  else
  {
    if (!v128)
    {
      ((void (*)(void *, char *, uint64_t))v270[5])(v283, v125, v126);
      goto LABEL_86;
    }
    ((void (*)(void *, uint64_t))v270[1])(v283, v126);
    v129 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
    v130 = v283;
  }
  memcpy(v130, v125, v129);
LABEL_86:
  v143 = v289;
  *((_BYTE *)v46 + v48[6]) = *((_BYTE *)v47 + v48[6]);
  *((_BYTE *)v46 + v48[7]) = *((_BYTE *)v47 + v48[7]);
  v184 = v48[8];
  v185 = (char *)v46 + v184;
  v186 = (char *)v47 + v184;
  *(_OWORD *)((char *)v46 + v184) = *(_OWORD *)((char *)v47 + v184);
  swift_release();
  *((_QWORD *)v185 + 2) = *((_QWORD *)v186 + 2);
  v185[24] = v186[24];
  v187 = v48[9];
  v188 = (char *)v46 + v187;
  v189 = (char *)v47 + v187;
  *(_OWORD *)((char *)v46 + v187) = *(_OWORD *)((char *)v47 + v187);
  swift_release();
  *((_QWORD *)v188 + 2) = *((_QWORD *)v189 + 2);
  v188[24] = v189[24];
  v190 = v48[10];
  v191 = (char *)v46 + v190;
  v192 = (char *)v47 + v190;
  *(_OWORD *)((char *)v46 + v190) = *(_OWORD *)((char *)v47 + v190);
  swift_release();
  *((_QWORD *)v191 + 2) = *((_QWORD *)v192 + 2);
  *((_WORD *)v191 + 12) = *((_WORD *)v192 + 12);
  v193 = v48[11];
  v194 = (char *)v46 + v193;
  v195 = (char *)v47 + v193;
  *(_OWORD *)((char *)v46 + v193) = *(_OWORD *)((char *)v47 + v193);
  swift_release();
  *((_QWORD *)v194 + 2) = *((_QWORD *)v195 + 2);
  *((_WORD *)v194 + 12) = *((_WORD *)v195 + 12);
  *((_BYTE *)v46 + v48[12]) = *((_BYTE *)v47 + v48[12]);
LABEL_62:
  v144 = v143[6];
  v145 = (char *)v9 + v144;
  v146 = (char *)v10 + v144;
  *(_OWORD *)((char *)v9 + v144) = *(_OWORD *)((char *)v10 + v144);
  swift_release();
  *((_QWORD *)v145 + 2) = *((_QWORD *)v146 + 2);
  v145[24] = v146[24];
  *((_BYTE *)v9 + v143[7]) = *((_BYTE *)v10 + v143[7]);
  *((_BYTE *)v9 + v143[8]) = *((_BYTE *)v10 + v143[8]);
  v147 = v143[9];
  v148 = (char *)v9 + v147;
  v149 = (char *)v10 + v147;
  *(_OWORD *)((char *)v9 + v147) = *(_OWORD *)((char *)v10 + v147);
  swift_release();
  *((_QWORD *)v148 + 2) = *((_QWORD *)v149 + 2);
  *((_WORD *)v148 + 12) = *((_WORD *)v149 + 12);
  v150 = v143[10];
  v151 = (uint64_t)v9 + v150;
  v152 = (char *)v10 + v150;
  v153 = (int *)type metadata accessor for FileTransferCharacteristic(0);
  v284 = (_QWORD *)*((_QWORD *)v153 - 1);
  v154 = (uint64_t (*)(uint64_t, uint64_t, int *))v284[6];
  LODWORD(v148) = v154(v151, 1, v153);
  v155 = v154((uint64_t)v152, 1, v153);
  if (!(_DWORD)v148)
  {
    if (v155)
    {
      sub_1AD066230(v151, type metadata accessor for FileTransferCharacteristic);
      goto LABEL_68;
    }
    *(_OWORD *)v151 = *(_OWORD *)v152;
    swift_release();
    *(_QWORD *)(v151 + 16) = *((_QWORD *)v152 + 2);
    *(_WORD *)(v151 + 24) = *((_WORD *)v152 + 12);
    *(_OWORD *)(v151 + 32) = *((_OWORD *)v152 + 2);
    swift_release();
    *(_QWORD *)(v151 + 48) = *((_QWORD *)v152 + 6);
    *(_BYTE *)(v151 + 56) = v152[56];
    *(_BYTE *)(v151 + 57) = v152[57];
    v162 = v153[7];
    v163 = (void *)(v151 + v162);
    __dstd = &v152[v162];
    v164 = sub_1AD63AF28();
    __srca = v163;
    v272 = *(_QWORD **)(v164 - 8);
    v165 = (uint64_t (*)(void))v272[6];
    LODWORD(v163) = ((uint64_t (*)(void *, uint64_t, uint64_t))v165)(v163, 1, v164);
    v285 = (void *)v164;
    v166 = ((uint64_t (*)(char *, uint64_t, uint64_t))v165)(__dstd, 1, v164);
    if ((_DWORD)v163)
    {
      if (v166)
      {
        v167 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
        v168 = __srca;
LABEL_82:
        memcpy(v168, __dstd, v167);
        goto LABEL_88;
      }
      ((void (*)(void *, char *, uint64_t))v272[4])(__srca, __dstd, v164);
      ((void (*)(void *, _QWORD, uint64_t, uint64_t))v272[7])(__srca, 0, 1, v164);
    }
    else
    {
      if (v166)
      {
        ((void (*)(void *, uint64_t))v272[1])(__srca, v164);
        v167 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
        v168 = __srca;
        goto LABEL_82;
      }
      ((void (*)(void *, char *, uint64_t))v272[5])(__srca, __dstd, v164);
    }
LABEL_88:
    v196 = v153[8];
    v197 = &v152[v196];
    __dste = (void *)(v151 + v196);
    v263 = v165();
    v198 = ((uint64_t (*)(char *, uint64_t, void *))v165)(v197, 1, v285);
    if (v263)
    {
      if (v198)
      {
        v199 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
        v200 = __dste;
LABEL_93:
        memcpy(v200, v197, v199);
        goto LABEL_96;
      }
      ((void (*)(void *, char *, void *))v272[4])(__dste, v197, v285);
      ((void (*)(void *, _QWORD, uint64_t, void *))v272[7])(__dste, 0, 1, v285);
    }
    else
    {
      if (v198)
      {
        ((void (*)(void *, void *))v272[1])(__dste, v285);
        v199 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40) - 8) + 64);
        v200 = __dste;
        goto LABEL_93;
      }
      ((void (*)(void *, char *, void *))v272[5])(__dste, v197, v285);
    }
LABEL_96:
    v201 = v153[9];
    v202 = v151 + v201;
    v203 = &v152[v201];
    *(_OWORD *)(v151 + v201) = *(_OWORD *)&v152[v201];
    swift_release();
    v204 = v203 + 16;
    if (*(_QWORD *)(v202 + 24) != 1)
    {
      v205 = *((_QWORD *)v203 + 3);
      if (v205 != 1)
      {
        *(_QWORD *)(v202 + 16) = *v204;
        *(_QWORD *)(v202 + 24) = v205;
        swift_bridgeObjectRelease();
LABEL_101:
        v206 = v153[10];
        v207 = v151 + v206;
        v208 = &v152[v206];
        *(_OWORD *)(v151 + v206) = *(_OWORD *)&v152[v206];
        swift_release();
        v209 = v208 + 16;
        if (*(_QWORD *)(v207 + 24) != 1)
        {
          v210 = *((_QWORD *)v208 + 3);
          if (v210 != 1)
          {
            *(_QWORD *)(v207 + 16) = *v209;
            *(_QWORD *)(v207 + 24) = v210;
            swift_bridgeObjectRelease();
            goto LABEL_106;
          }
          sub_1AD0256E4(v207 + 16);
        }
        *(_OWORD *)(v207 + 16) = *(_OWORD *)v209;
LABEL_106:
        v143 = v289;
        *(_BYTE *)(v151 + v153[11]) = v152[v153[11]];
        v211 = v153[12];
        v212 = v151 + v211;
        v213 = &v152[v211];
        *(_OWORD *)(v151 + v211) = *(_OWORD *)&v152[v211];
        swift_release();
        *(_QWORD *)(v212 + 16) = *((_QWORD *)v213 + 2);
        *(_BYTE *)(v212 + 24) = v213[24];
        goto LABEL_107;
      }
      sub_1AD0256E4(v202 + 16);
    }
    *(_OWORD *)(v202 + 16) = *(_OWORD *)v204;
    goto LABEL_101;
  }
  if (v155)
  {
LABEL_68:
    v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
    memcpy((void *)v151, v152, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_107;
  }
  *(_OWORD *)v151 = *(_OWORD *)v152;
  *(_OWORD *)(v151 + 10) = *(_OWORD *)(v152 + 10);
  *(_OWORD *)(v151 + 32) = *((_OWORD *)v152 + 2);
  *(_OWORD *)(v151 + 41) = *(_OWORD *)(v152 + 41);
  *(_BYTE *)(v151 + 57) = v152[57];
  v156 = v153[7];
  __dstc = (void *)(v151 + v156);
  v157 = &v152[v156];
  v158 = sub_1AD63AF28();
  v159 = *(_QWORD *)(v158 - 8);
  v271 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48);
  if (v271(v157, 1, v158))
  {
    v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(__dstc, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v159 + 32))(__dstc, v157, v158);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v159 + 56))(__dstc, 0, 1, v158);
  }
  v169 = v153[8];
  v170 = (void *)(v151 + v169);
  v171 = &v152[v169];
  if (v271(&v152[v169], 1, v158))
  {
    v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v159 + 32))(v170, v171, v158);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v170, 0, 1, v158);
  }
  v143 = v289;
  v173 = v153[9];
  v174 = (_OWORD *)(v151 + v173);
  v175 = &v152[v173];
  v176 = *((_OWORD *)v175 + 1);
  *v174 = *(_OWORD *)v175;
  v174[1] = v176;
  v177 = v153[10];
  v178 = (_OWORD *)(v151 + v177);
  v179 = &v152[v177];
  v180 = *((_OWORD *)v179 + 1);
  *v178 = *(_OWORD *)v179;
  v178[1] = v180;
  *(_BYTE *)(v151 + v153[11]) = v152[v153[11]];
  v181 = v153[12];
  v182 = (_OWORD *)(v151 + v181);
  v183 = &v152[v181];
  *v182 = *(_OWORD *)v183;
  *(_OWORD *)((char *)v182 + 9) = *(_OWORD *)(v183 + 9);
  ((void (*)(uint64_t, _QWORD, uint64_t, int *))v284[7])(v151, 0, 1, v153);
LABEL_107:
  a3 = v287;
  v214 = v143[11];
  v215 = (char *)v9 + v214;
  v216 = (char *)v10 + v214;
  v217 = (int *)type metadata accessor for ChatbotCharacteristic(0);
  v218 = *((_QWORD *)v217 - 1);
  v219 = *(uint64_t (**)(char *, uint64_t, int *))(v218 + 48);
  v220 = v219(v215, 1, v217);
  v221 = v219(v216, 1, v217);
  if (!v220)
  {
    if (v221)
    {
      sub_1AD066230((uint64_t)v215, type metadata accessor for ChatbotCharacteristic);
      goto LABEL_113;
    }
    v227 = sub_1AD63AF28();
    v228 = *(_QWORD *)(v227 - 8);
    v229 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 48);
    v230 = v229(v215, 1, v227);
    v231 = v229(v216, 1, v227);
    if (v230)
    {
      if (!v231)
      {
        (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v215, v216, v227);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v215, 0, 1, v227);
        goto LABEL_128;
      }
    }
    else
    {
      if (!v231)
      {
        (*(void (**)(char *, char *, uint64_t))(v228 + 40))(v215, v216, v227);
LABEL_128:
        v241 = v217[5];
        v242 = &v215[v241];
        v243 = &v216[v241];
        v244 = v229(&v215[v241], 1, v227);
        v245 = v229(v243, 1, v227);
        if (v244)
        {
          if (!v245)
          {
            (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v242, v243, v227);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v242, 0, 1, v227);
            goto LABEL_134;
          }
        }
        else
        {
          if (!v245)
          {
            (*(void (**)(char *, char *, uint64_t))(v228 + 40))(v242, v243, v227);
LABEL_134:
            v247 = v217[6];
            v248 = &v215[v247];
            v249 = &v216[v247];
            v250 = v229(&v215[v247], 1, v227);
            v251 = v229(v249, 1, v227);
            if (v250)
            {
              if (!v251)
              {
                (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v248, v249, v227);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v248, 0, 1, v227);
LABEL_140:
                v215[v217[7]] = v216[v217[7]];
                v215[v217[8]] = v216[v217[8]];
                v215[v217[9]] = v216[v217[9]];
                v4 = v280;
                a3 = v287;
                goto LABEL_141;
              }
            }
            else
            {
              if (!v251)
              {
                (*(void (**)(char *, char *, uint64_t))(v228 + 40))(v248, v249, v227);
                goto LABEL_140;
              }
              (*(void (**)(char *, uint64_t))(v228 + 8))(v248, v227);
            }
            v252 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
            goto LABEL_140;
          }
          (*(void (**)(char *, uint64_t))(v228 + 8))(v242, v227);
        }
        v246 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
        goto LABEL_134;
      }
      (*(void (**)(char *, uint64_t))(v228 + 8))(v215, v227);
    }
    v240 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
    goto LABEL_128;
  }
  if (v221)
  {
LABEL_113:
    v226 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
    v4 = v280;
    goto LABEL_141;
  }
  v222 = sub_1AD63AF28();
  v223 = *(_QWORD *)(v222 - 8);
  v224 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v223 + 48);
  if (v224(v216, 1, v222))
  {
    v225 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v223 + 32))(v215, v216, v222);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v215, 0, 1, v222);
  }
  v232 = v217[5];
  v233 = &v215[v232];
  v234 = &v216[v232];
  if (v224(&v216[v232], 1, v222))
  {
    v235 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v223 + 32))(v233, v234, v222);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v233, 0, 1, v222);
  }
  v236 = v217[6];
  v237 = &v215[v236];
  v238 = &v216[v236];
  if (v224(&v216[v236], 1, v222))
  {
    v239 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v223 + 32))(v237, v238, v222);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v237, 0, 1, v222);
  }
  a3 = v287;
  v215[v217[7]] = v216[v217[7]];
  v215[v217[8]] = v216[v217[8]];
  v215[v217[9]] = v216[v217[9]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v218 + 56))(v215, 0, 1, v217);
  v4 = v280;
LABEL_141:
  v253 = *(int *)(a3 + 28);
  v254 = a1 + v253;
  v255 = (char *)v4 + v253;
  if (!*(_QWORD *)(a1 + v253 + 8))
  {
LABEL_145:
    v258 = *((_OWORD *)v255 + 5);
    *(_OWORD *)(v254 + 64) = *((_OWORD *)v255 + 4);
    *(_OWORD *)(v254 + 80) = v258;
    *(_DWORD *)(v254 + 95) = *(_DWORD *)(v255 + 95);
    v259 = *((_OWORD *)v255 + 1);
    *(_OWORD *)v254 = *(_OWORD *)v255;
    *(_OWORD *)(v254 + 16) = v259;
    v260 = *((_OWORD *)v255 + 3);
    *(_OWORD *)(v254 + 32) = *((_OWORD *)v255 + 2);
    *(_OWORD *)(v254 + 48) = v260;
    return a1;
  }
  v256 = *((_QWORD *)v255 + 1);
  if (!v256)
  {
    sub_1AD3D3C44(v254);
    goto LABEL_145;
  }
  *(_BYTE *)v254 = *v255;
  v257 = *((_QWORD *)v255 + 2);
  *(_QWORD *)(v254 + 8) = v256;
  *(_QWORD *)(v254 + 16) = v257;
  swift_release();
  *(_QWORD *)(v254 + 24) = *((_QWORD *)v255 + 3);
  *(_WORD *)(v254 + 32) = *((_WORD *)v255 + 16);
  *(_OWORD *)(v254 + 40) = *(_OWORD *)(v255 + 40);
  swift_release();
  *(_QWORD *)(v254 + 56) = *((_QWORD *)v255 + 7);
  *(_WORD *)(v254 + 64) = *((_WORD *)v255 + 32);
  *(_OWORD *)(v254 + 72) = *(_OWORD *)(v255 + 72);
  swift_release();
  *(_QWORD *)(v254 + 88) = *((_QWORD *)v255 + 11);
  *(_WORD *)(v254 + 96) = *((_WORD *)v255 + 48);
  *(_BYTE *)(v254 + 98) = v255[98];
  return a1;
}

uint64_t sub_1AD3D5C80()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3D5C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1AD3D5D0C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3D5D18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1AD3D5D90()
{
  unint64_t v0;

  sub_1AD3D5E14();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1AD3D5E14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EECDBE50)
  {
    type metadata accessor for MessagingCharacteristic(255);
    v0 = sub_1AD63BC48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EECDBE50);
  }
}

char *sub_1AD3D5E68(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, _QWORD, uint64_t, int *);
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  int *v117;
  uint64_t v118;
  unsigned int (*v119)(_QWORD *, uint64_t, int *);
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  _OWORD *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  void (*v149)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v150;
  char *v151;
  char *v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *__dst;
  unsigned int (*v183)(char *, uint64_t, uint64_t);
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  _QWORD *v193;
  unsigned int (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  int *v201;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v12;
      v13 = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      if (v13 == 1)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        a1[16] = a2[16];
        *((_QWORD *)a1 + 3) = v13;
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        a1[36] = a2[36];
        *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
        swift_bridgeObjectRetain();
      }
      v29 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
      v30 = *(int *)(v29 + 24);
      v31 = &a1[v30];
      v32 = &a2[v30];
      v33 = (int *)type metadata accessor for MessagingCharacteristic(0);
      v34 = *((_QWORD *)v33 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v195 = v34;
        v197 = v29;
        v46 = type metadata accessor for StandaloneMsgCharacteristic(0);
        v47 = *(_QWORD *)(v46 - 8);
        v201 = v33;
        v199 = v31;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v32, 1, v46))
        {
          v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v70 = *((_QWORD *)v32 + 1);
          *(_QWORD *)v31 = *(_QWORD *)v32;
          *((_QWORD *)v31 + 1) = v70;
          *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
          v31[24] = v32[24];
          v71 = *((_QWORD *)v32 + 5);
          *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
          *((_QWORD *)v31 + 5) = v71;
          *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
          *((_WORD *)v31 + 28) = *((_WORD *)v32 + 28);
          v72 = *(int *)(v46 + 24);
          v191 = &v31[v72];
          v187 = &v32[v72];
          v73 = sub_1AD63AF28();
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16);
          v33 = v201;
          swift_retain();
          swift_retain();
          v74(v191, v187, v73);
          v31 = v199;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v199, 0, 1, v46);
        }
        v75 = v33[5];
        v76 = &v31[v75];
        v77 = &v32[v75];
        v78 = (int *)type metadata accessor for ChatCharacteristic(0);
        v79 = *((_QWORD *)v78 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v79 + 48))(v77, 1, v78))
        {
          v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
          memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
          v188 = v79;
          v81 = *((_QWORD *)v77 + 1);
          *(_QWORD *)v76 = *(_QWORD *)v77;
          *((_QWORD *)v76 + 1) = v81;
          *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
          *((_WORD *)v76 + 12) = *((_WORD *)v77 + 12);
          v82 = v78[5];
          v192 = &v76[v82];
          v83 = &v77[v82];
          v84 = sub_1AD63AF28();
          v184 = *(_QWORD *)(v84 - 8);
          v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48);
          swift_retain();
          if (v85(v83, 1, v84))
          {
            v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v192, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v192, v83, v84);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v192, 0, 1, v84);
          }
          v76[v78[6]] = v77[v78[6]];
          v76[v78[7]] = v77[v78[7]];
          v87 = v78[8];
          v88 = &v76[v87];
          v89 = &v77[v87];
          v90 = *((_QWORD *)v89 + 1);
          *(_QWORD *)v88 = *(_QWORD *)v89;
          *((_QWORD *)v88 + 1) = v90;
          *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
          v88[24] = v89[24];
          v91 = v78[9];
          v92 = &v76[v91];
          v93 = &v77[v91];
          v94 = *((_QWORD *)v93 + 1);
          *(_QWORD *)v92 = *(_QWORD *)v93;
          *((_QWORD *)v92 + 1) = v94;
          *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
          v92[24] = v93[24];
          v95 = v78[10];
          v96 = &v76[v95];
          v97 = &v77[v95];
          v98 = *((_QWORD *)v97 + 1);
          *(_QWORD *)v96 = *(_QWORD *)v97;
          *((_QWORD *)v96 + 1) = v98;
          *((_QWORD *)v96 + 2) = *((_QWORD *)v97 + 2);
          *((_WORD *)v96 + 12) = *((_WORD *)v97 + 12);
          v99 = v78[11];
          v100 = &v76[v99];
          v101 = &v77[v99];
          v102 = *((_QWORD *)v101 + 1);
          *(_QWORD *)v100 = *(_QWORD *)v101;
          *((_QWORD *)v100 + 1) = v102;
          *((_QWORD *)v100 + 2) = *((_QWORD *)v101 + 2);
          *((_WORD *)v100 + 12) = *((_WORD *)v101 + 12);
          v76[v78[12]] = v77[v78[12]];
          v103 = *(void (**)(char *, _QWORD, uint64_t, int *))(v188 + 56);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v103(v76, 0, 1, v78);
          v31 = v199;
          v33 = v201;
        }
        v104 = v33[6];
        v105 = &v31[v104];
        v106 = &v32[v104];
        v107 = *((_QWORD *)v106 + 1);
        *(_QWORD *)v105 = *(_QWORD *)v106;
        *((_QWORD *)v105 + 1) = v107;
        *((_QWORD *)v105 + 2) = *((_QWORD *)v106 + 2);
        v105[24] = v106[24];
        v31[v33[7]] = v32[v33[7]];
        v31[v33[8]] = v32[v33[8]];
        v108 = v33[9];
        v109 = &v31[v108];
        v110 = &v32[v108];
        v111 = v33;
        v112 = *((_QWORD *)v110 + 1);
        *(_QWORD *)v109 = *(_QWORD *)v110;
        *((_QWORD *)v109 + 1) = v112;
        *((_WORD *)v109 + 12) = *((_WORD *)v110 + 12);
        *((_QWORD *)v109 + 2) = *((_QWORD *)v110 + 2);
        v113 = v111[10];
        v114 = v32;
        v115 = &v31[v113];
        v193 = v114;
        v116 = (_QWORD *)((char *)v114 + v113);
        v117 = (int *)type metadata accessor for FileTransferCharacteristic(0);
        v118 = *((_QWORD *)v117 - 1);
        v119 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v118 + 48);
        swift_retain();
        swift_retain();
        if (v119(v116, 1, v117))
        {
          v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
          v121 = v201;
        }
        else
        {
          v180 = v118;
          v122 = v116[1];
          *(_QWORD *)v115 = *v116;
          *((_QWORD *)v115 + 1) = v122;
          *((_QWORD *)v115 + 2) = v116[2];
          *((_WORD *)v115 + 12) = *((_WORD *)v116 + 12);
          v123 = v116[5];
          *((_QWORD *)v115 + 4) = v116[4];
          *((_QWORD *)v115 + 5) = v123;
          *((_QWORD *)v115 + 6) = v116[6];
          v115[56] = *((_BYTE *)v116 + 56);
          v115[57] = *((_BYTE *)v116 + 57);
          v124 = v117[7];
          v185 = v115;
          v189 = &v115[v124];
          v181 = (char *)v116 + v124;
          v125 = sub_1AD63AF28();
          v126 = *(_QWORD *)(v125 - 8);
          v127 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48);
          swift_retain();
          swift_retain();
          v179 = v126;
          if (v127(v181, 1, v125))
          {
            v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v189, v181, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v189, v181, v125);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v189, 0, 1, v125);
          }
          v129 = v117[8];
          v130 = (char *)v185 + v129;
          v131 = (char *)v116 + v129;
          if (v127((char *)v116 + v129, 1, v125))
          {
            v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v130, v131, v125);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v130, 0, 1, v125);
          }
          v133 = v117[9];
          v134 = (char *)v185 + v133;
          v135 = (_QWORD *)((char *)v116 + v133);
          v136 = v135[1];
          *(_QWORD *)v134 = *v135;
          *((_QWORD *)v134 + 1) = v136;
          v137 = v135 + 2;
          v138 = v135[3];
          swift_retain();
          if (v138 == 1)
          {
            *((_OWORD *)v134 + 1) = *v137;
          }
          else
          {
            *((_QWORD *)v134 + 2) = *(_QWORD *)v137;
            *((_QWORD *)v134 + 3) = v138;
            swift_bridgeObjectRetain();
          }
          v139 = v117[10];
          v140 = (char *)v185 + v139;
          v141 = (_QWORD *)((char *)v116 + v139);
          v142 = v141[1];
          *(_QWORD *)v140 = *v141;
          *((_QWORD *)v140 + 1) = v142;
          v143 = v141 + 2;
          v144 = v141[3];
          swift_retain();
          if (v144 == 1)
          {
            *((_OWORD *)v140 + 1) = *v143;
          }
          else
          {
            *((_QWORD *)v140 + 2) = *(_QWORD *)v143;
            *((_QWORD *)v140 + 3) = v144;
            swift_bridgeObjectRetain();
          }
          v31 = v199;
          v121 = v201;
          *((_BYTE *)v185 + v117[11]) = *((_BYTE *)v116 + v117[11]);
          v145 = v117[12];
          v146 = (char *)v185 + v145;
          v147 = (char *)v116 + v145;
          v148 = *((_QWORD *)v147 + 1);
          *(_QWORD *)v146 = *(_QWORD *)v147;
          *((_QWORD *)v146 + 1) = v148;
          *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
          v146[24] = v147[24];
          v149 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v180 + 56);
          swift_retain();
          v149(v185, 0, 1, v117);
        }
        v150 = v121[11];
        v151 = &v31[v150];
        v152 = (char *)v193 + v150;
        v153 = (int *)type metadata accessor for ChatbotCharacteristic(0);
        v154 = *((_QWORD *)v153 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v154 + 48))(v152, 1, v153))
        {
          v155 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
          memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        else
        {
          v156 = sub_1AD63AF28();
          v157 = *(_QWORD *)(v156 - 8);
          v194 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48);
          v186 = v154;
          v190 = v157;
          if (v194(v152, 1, v156))
          {
            v158 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v151, v152, v156);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v151, 0, 1, v156);
          }
          v159 = v153[5];
          v160 = &v151[v159];
          v161 = &v152[v159];
          if (v194(&v152[v159], 1, v156))
          {
            v162 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v160, v161, v156);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(v160, 0, 1, v156);
          }
          v163 = v153[6];
          v164 = &v151[v163];
          v165 = &v152[v163];
          if (v194(&v152[v163], 1, v156))
          {
            v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v164, v165, v156);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(v164, 0, 1, v156);
          }
          v151[v153[7]] = v152[v153[7]];
          v151[v153[8]] = v152[v153[8]];
          v151[v153[9]] = v152[v153[9]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v186 + 56))(v151, 0, 1, v153);
          v121 = v201;
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v195 + 56))(v31, 0, 1, v121);
        v29 = v197;
      }
      v167 = *(int *)(v29 + 28);
      v168 = &a1[v167];
      v169 = &a2[v167];
      v170 = *((_QWORD *)v169 + 1);
      if (v170)
      {
        *v168 = *v169;
        v171 = *((_QWORD *)v169 + 2);
        v172 = *((_QWORD *)v169 + 3);
        *((_QWORD *)v168 + 1) = v170;
        *((_QWORD *)v168 + 2) = v171;
        *((_QWORD *)v168 + 3) = v172;
        *((_WORD *)v168 + 16) = *((_WORD *)v169 + 16);
        v173 = *((_QWORD *)v169 + 6);
        *((_QWORD *)v168 + 5) = *((_QWORD *)v169 + 5);
        *((_QWORD *)v168 + 6) = v173;
        *((_QWORD *)v168 + 7) = *((_QWORD *)v169 + 7);
        *((_WORD *)v168 + 32) = *((_WORD *)v169 + 32);
        v174 = *((_QWORD *)v169 + 10);
        *((_QWORD *)v168 + 9) = *((_QWORD *)v169 + 9);
        *((_QWORD *)v168 + 10) = v174;
        *((_QWORD *)v168 + 11) = *((_QWORD *)v169 + 11);
        *((_WORD *)v168 + 48) = *((_WORD *)v169 + 48);
        v168[98] = v169[98];
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v175 = *((_OWORD *)v169 + 5);
        *((_OWORD *)v168 + 4) = *((_OWORD *)v169 + 4);
        *((_OWORD *)v168 + 5) = v175;
        *(_DWORD *)(v168 + 95) = *(_DWORD *)(v169 + 95);
        v176 = *((_OWORD *)v169 + 1);
        *(_OWORD *)v168 = *(_OWORD *)v169;
        *((_OWORD *)v168 + 1) = v176;
        v177 = *((_OWORD *)v169 + 3);
        *((_OWORD *)v168 + 2) = *((_OWORD *)v169 + 2);
        *((_OWORD *)v168 + 3) = v177;
      }
      goto LABEL_70;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v8;
      v9 = a2 + 24;
      v10 = *((_QWORD *)a2 + 4);
      swift_retain();
      if (v10 == 1)
      {
        *(_OWORD *)(a1 + 24) = *v9;
      }
      else
      {
        *((_QWORD *)a1 + 3) = *(_QWORD *)v9;
        *((_QWORD *)a1 + 4) = v10;
        swift_bridgeObjectRetain();
      }
      a1[40] = a2[40];
      v14 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v14;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      a1[72] = a2[72];
      v15 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = v15;
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      a1[104] = a2[104];
      v16 = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      *((_QWORD *)a1 + 15) = v16;
      *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
      a1[136] = a2[136];
      v17 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = v17;
      *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      v18 = *((_QWORD *)a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *((_QWORD *)a1 + 23) = v18;
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      v19 = *((_QWORD *)a2 + 27);
      *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
      *((_QWORD *)a1 + 27) = v19;
      v20 = *((_QWORD *)a2 + 29);
      *((_QWORD *)a1 + 28) = *((_QWORD *)a2 + 28);
      *((_QWORD *)a1 + 29) = v20;
      a1[240] = a2[240];
      v21 = *((_QWORD *)a2 + 32);
      *((_QWORD *)a1 + 31) = *((_QWORD *)a2 + 31);
      *((_QWORD *)a1 + 32) = v21;
      v22 = *((_QWORD *)a2 + 33);
      *((_WORD *)a1 + 136) = *((_WORD *)a2 + 136);
      *((_QWORD *)a1 + 33) = v22;
      v23 = *((_QWORD *)a2 + 36);
      *((_QWORD *)a1 + 35) = *((_QWORD *)a2 + 35);
      *((_QWORD *)a1 + 36) = v23;
      v24 = *((_QWORD *)a2 + 37);
      *((_WORD *)a1 + 152) = *((_WORD *)a2 + 152);
      *((_QWORD *)a1 + 37) = v24;
      v25 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
      __dst = &a1[v25];
      v200 = &a2[v25];
      v26 = type metadata accessor for IMS3GPPExtCharacteristic();
      v27 = *(_QWORD *)(v26 - 8);
      v183 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v198 = v26;
      if (v183(v200, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
        memcpy(__dst, v200, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v196 = v27;
        v36 = *((_QWORD *)v200 + 1);
        *(_QWORD *)__dst = *(_QWORD *)v200;
        *((_QWORD *)__dst + 1) = v36;
        v37 = *((_QWORD *)v200 + 3);
        *((_QWORD *)__dst + 2) = *((_QWORD *)v200 + 2);
        *((_QWORD *)__dst + 3) = v37;
        __dst[32] = v200[32];
        v38 = (int *)type metadata accessor for IMSGSMACharacteristic();
        v39 = v38[6];
        v40 = &__dst[v39];
        v41 = &v200[v39];
        v42 = sub_1AD63AF28();
        v43 = *(_QWORD *)(v42 - 8);
        v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v44(v41, 1, v42))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        v49 = v38[7];
        v50 = &__dst[v49];
        v51 = &v200[v49];
        v52 = *((_QWORD *)v51 + 1);
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = v52;
        v53 = v51 + 16;
        v54 = *((_QWORD *)v51 + 3);
        swift_retain();
        if (v54 == 1)
        {
          *((_OWORD *)v50 + 1) = *v53;
        }
        else
        {
          *((_QWORD *)v50 + 2) = *(_QWORD *)v53;
          *((_QWORD *)v50 + 3) = v54;
          swift_bridgeObjectRetain();
        }
        v55 = v38[8];
        v56 = &__dst[v55];
        v57 = &v200[v55];
        v58 = *((_QWORD *)v57 + 1);
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *((_QWORD *)v56 + 1) = v58;
        v59 = v57 + 16;
        v60 = *((_QWORD *)v57 + 3);
        swift_retain();
        if (v60 == 1)
        {
          *((_OWORD *)v56 + 1) = *v59;
        }
        else
        {
          *((_QWORD *)v56 + 2) = *(_QWORD *)v59;
          *((_QWORD *)v56 + 3) = v60;
          swift_bridgeObjectRetain();
        }
        v61 = v38[9];
        v62 = &__dst[v61];
        v63 = &v200[v61];
        *(_QWORD *)v62 = *(_QWORD *)v63;
        v62[8] = v63[8];
        v64 = v38[10];
        v65 = &__dst[v64];
        v66 = &v200[v64];
        v67 = sub_1AD63B084();
        v68 = *(_QWORD *)(v67 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(__dst, 0, 1, v198);
      }
LABEL_70:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_1AD3D6D04(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 24) != 1)
      swift_bridgeObjectRelease();
    v14 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
    v15 = a1 + *(int *)(v14 + 24);
    v16 = (int *)type metadata accessor for MessagingCharacteristic(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v16 - 1) + 48))(v15, 1, v16);
    if (!(_DWORD)result)
    {
      v17 = type metadata accessor for StandaloneMsgCharacteristic(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17))
      {
        swift_release();
        swift_release();
        v18 = v15 + *(int *)(v17 + 24);
        v19 = sub_1AD63AF28();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      }
      v20 = v15 + v16[5];
      v21 = type metadata accessor for ChatCharacteristic(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
      {
        swift_release();
        v22 = v20 + *(int *)(v21 + 20);
        v23 = sub_1AD63AF28();
        v24 = *(_QWORD *)(v23 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      swift_release();
      swift_release();
      v25 = v15 + v16[10];
      v26 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v26 - 1) + 48))(v25, 1, v26))
      {
        swift_release();
        swift_release();
        v27 = v25 + v26[7];
        v28 = sub_1AD63AF28();
        v29 = *(_QWORD *)(v28 - 8);
        v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
        if (!v30(v27, 1, v28))
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
        v31 = v25 + v26[8];
        if (!v30(v31, 1, v28))
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v28);
        v32 = v25 + v26[9];
        swift_release();
        if (*(_QWORD *)(v32 + 24) != 1)
          swift_bridgeObjectRelease();
        v33 = v25 + v26[10];
        swift_release();
        if (*(_QWORD *)(v33 + 24) != 1)
          swift_bridgeObjectRelease();
        swift_release();
      }
      v34 = v15 + v16[11];
      v35 = type metadata accessor for ChatbotCharacteristic(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35);
      if (!(_DWORD)result)
      {
        v36 = sub_1AD63AF28();
        v37 = *(_QWORD *)(v36 - 8);
        v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
        if (!v38(v34, 1, v36))
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v36);
        v39 = v34 + *(int *)(v35 + 20);
        if (!v38(v39, 1, v36))
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v36);
        v40 = v34 + *(int *)(v35 + 24);
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v40, 1, v36);
        if (!(_DWORD)result)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
      }
    }
    if (*(_QWORD *)(a1 + *(int *)(v14 + 28) + 8))
    {
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else if (!(_DWORD)result)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 32) != 1)
      swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v3 = a1 + *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
    v4 = type metadata accessor for IMS3GPPExtCharacteristic();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
    if (!(_DWORD)result)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v5 = (int *)type metadata accessor for IMSGSMACharacteristic();
      v6 = v3 + v5[6];
      v7 = sub_1AD63AF28();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      v9 = v3 + v5[7];
      swift_release();
      if (*(_QWORD *)(v9 + 24) != 1)
        swift_bridgeObjectRelease();
      v10 = v3 + v5[8];
      swift_release();
      if (*(_QWORD *)(v10 + 24) != 1)
        swift_bridgeObjectRelease();
      v11 = v3 + v5[10];
      v12 = sub_1AD63B084();
      v13 = *(_QWORD *)(v12 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  return result;
}

char *sub_1AD3D7274(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, _QWORD, uint64_t, int *);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  int *v115;
  uint64_t v116;
  unsigned int (*v117)(_QWORD *, uint64_t, int *);
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  _OWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v148;
  char *v149;
  char *v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *__dst;
  unsigned int (*v181)(char *, uint64_t, uint64_t);
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  unsigned int (*v192)(char *, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  int *v199;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v10;
    v11 = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
    if (v11 == 1)
    {
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      a1[16] = a2[16];
      *((_QWORD *)a1 + 3) = v11;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      a1[36] = a2[36];
      *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
      swift_bridgeObjectRetain();
    }
    v27 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
    v28 = *(int *)(v27 + 24);
    v29 = &a1[v28];
    v30 = &a2[v28];
    v31 = (int *)type metadata accessor for MessagingCharacteristic(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v193 = v32;
      v195 = v27;
      v44 = type metadata accessor for StandaloneMsgCharacteristic(0);
      v45 = *(_QWORD *)(v44 - 8);
      v199 = v31;
      v197 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v30, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v68 = *((_QWORD *)v30 + 1);
        *(_QWORD *)v29 = *(_QWORD *)v30;
        *((_QWORD *)v29 + 1) = v68;
        *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
        v29[24] = v30[24];
        v69 = *((_QWORD *)v30 + 5);
        *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
        *((_QWORD *)v29 + 5) = v69;
        *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
        *((_WORD *)v29 + 28) = *((_WORD *)v30 + 28);
        v70 = *(int *)(v44 + 24);
        v189 = &v29[v70];
        v185 = &v30[v70];
        v71 = sub_1AD63AF28();
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        v31 = v199;
        swift_retain();
        swift_retain();
        v72(v189, v185, v71);
        v29 = v197;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v197, 0, 1, v44);
      }
      v73 = v31[5];
      v74 = &v29[v73];
      v75 = &v30[v73];
      v76 = (int *)type metadata accessor for ChatCharacteristic(0);
      v77 = *((_QWORD *)v76 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v77 + 48))(v75, 1, v76))
      {
        v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        v186 = v77;
        v79 = *((_QWORD *)v75 + 1);
        *(_QWORD *)v74 = *(_QWORD *)v75;
        *((_QWORD *)v74 + 1) = v79;
        *((_QWORD *)v74 + 2) = *((_QWORD *)v75 + 2);
        *((_WORD *)v74 + 12) = *((_WORD *)v75 + 12);
        v80 = v76[5];
        v190 = &v74[v80];
        v81 = &v75[v80];
        v82 = sub_1AD63AF28();
        v182 = *(_QWORD *)(v82 - 8);
        v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48);
        swift_retain();
        if (v83(v81, 1, v82))
        {
          v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v190, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v190, v81, v82);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v190, 0, 1, v82);
        }
        v74[v76[6]] = v75[v76[6]];
        v74[v76[7]] = v75[v76[7]];
        v85 = v76[8];
        v86 = &v74[v85];
        v87 = &v75[v85];
        v88 = *((_QWORD *)v87 + 1);
        *(_QWORD *)v86 = *(_QWORD *)v87;
        *((_QWORD *)v86 + 1) = v88;
        *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
        v86[24] = v87[24];
        v89 = v76[9];
        v90 = &v74[v89];
        v91 = &v75[v89];
        v92 = *((_QWORD *)v91 + 1);
        *(_QWORD *)v90 = *(_QWORD *)v91;
        *((_QWORD *)v90 + 1) = v92;
        *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
        v90[24] = v91[24];
        v93 = v76[10];
        v94 = &v74[v93];
        v95 = &v75[v93];
        v96 = *((_QWORD *)v95 + 1);
        *(_QWORD *)v94 = *(_QWORD *)v95;
        *((_QWORD *)v94 + 1) = v96;
        *((_QWORD *)v94 + 2) = *((_QWORD *)v95 + 2);
        *((_WORD *)v94 + 12) = *((_WORD *)v95 + 12);
        v97 = v76[11];
        v98 = &v74[v97];
        v99 = &v75[v97];
        v100 = *((_QWORD *)v99 + 1);
        *(_QWORD *)v98 = *(_QWORD *)v99;
        *((_QWORD *)v98 + 1) = v100;
        *((_QWORD *)v98 + 2) = *((_QWORD *)v99 + 2);
        *((_WORD *)v98 + 12) = *((_WORD *)v99 + 12);
        v74[v76[12]] = v75[v76[12]];
        v101 = *(void (**)(char *, _QWORD, uint64_t, int *))(v186 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v101(v74, 0, 1, v76);
        v29 = v197;
        v31 = v199;
      }
      v102 = v31[6];
      v103 = &v29[v102];
      v104 = &v30[v102];
      v105 = *((_QWORD *)v104 + 1);
      *(_QWORD *)v103 = *(_QWORD *)v104;
      *((_QWORD *)v103 + 1) = v105;
      *((_QWORD *)v103 + 2) = *((_QWORD *)v104 + 2);
      v103[24] = v104[24];
      v29[v31[7]] = v30[v31[7]];
      v29[v31[8]] = v30[v31[8]];
      v106 = v31[9];
      v107 = &v29[v106];
      v108 = &v30[v106];
      v109 = v31;
      v110 = *((_QWORD *)v108 + 1);
      *(_QWORD *)v107 = *(_QWORD *)v108;
      *((_QWORD *)v107 + 1) = v110;
      *((_WORD *)v107 + 12) = *((_WORD *)v108 + 12);
      *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
      v111 = v109[10];
      v112 = v30;
      v113 = &v29[v111];
      v191 = v112;
      v114 = (_QWORD *)((char *)v112 + v111);
      v115 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      v116 = *((_QWORD *)v115 - 1);
      v117 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v116 + 48);
      swift_retain();
      swift_retain();
      if (v117(v114, 1, v115))
      {
        v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        v119 = v199;
      }
      else
      {
        v178 = v116;
        v120 = v114[1];
        *(_QWORD *)v113 = *v114;
        *((_QWORD *)v113 + 1) = v120;
        *((_QWORD *)v113 + 2) = v114[2];
        *((_WORD *)v113 + 12) = *((_WORD *)v114 + 12);
        v121 = v114[5];
        *((_QWORD *)v113 + 4) = v114[4];
        *((_QWORD *)v113 + 5) = v121;
        *((_QWORD *)v113 + 6) = v114[6];
        v113[56] = *((_BYTE *)v114 + 56);
        v113[57] = *((_BYTE *)v114 + 57);
        v122 = v115[7];
        v183 = v113;
        v187 = &v113[v122];
        v179 = (char *)v114 + v122;
        v123 = sub_1AD63AF28();
        v124 = *(_QWORD *)(v123 - 8);
        v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
        swift_retain();
        swift_retain();
        v177 = v124;
        if (v125(v179, 1, v123))
        {
          v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v187, v179, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v187, v179, v123);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v187, 0, 1, v123);
        }
        v127 = v115[8];
        v128 = (char *)v183 + v127;
        v129 = (char *)v114 + v127;
        if (v125((char *)v114 + v127, 1, v123))
        {
          v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v128, v129, v123);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v128, 0, 1, v123);
        }
        v131 = v115[9];
        v132 = (char *)v183 + v131;
        v133 = (_QWORD *)((char *)v114 + v131);
        v134 = v133[1];
        *(_QWORD *)v132 = *v133;
        *((_QWORD *)v132 + 1) = v134;
        v135 = v133 + 2;
        v136 = v133[3];
        swift_retain();
        if (v136 == 1)
        {
          *((_OWORD *)v132 + 1) = *v135;
        }
        else
        {
          *((_QWORD *)v132 + 2) = *(_QWORD *)v135;
          *((_QWORD *)v132 + 3) = v136;
          swift_bridgeObjectRetain();
        }
        v137 = v115[10];
        v138 = (char *)v183 + v137;
        v139 = (_QWORD *)((char *)v114 + v137);
        v140 = v139[1];
        *(_QWORD *)v138 = *v139;
        *((_QWORD *)v138 + 1) = v140;
        v141 = v139 + 2;
        v142 = v139[3];
        swift_retain();
        if (v142 == 1)
        {
          *((_OWORD *)v138 + 1) = *v141;
        }
        else
        {
          *((_QWORD *)v138 + 2) = *(_QWORD *)v141;
          *((_QWORD *)v138 + 3) = v142;
          swift_bridgeObjectRetain();
        }
        v29 = v197;
        v119 = v199;
        *((_BYTE *)v183 + v115[11]) = *((_BYTE *)v114 + v115[11]);
        v143 = v115[12];
        v144 = (char *)v183 + v143;
        v145 = (char *)v114 + v143;
        v146 = *((_QWORD *)v145 + 1);
        *(_QWORD *)v144 = *(_QWORD *)v145;
        *((_QWORD *)v144 + 1) = v146;
        *((_QWORD *)v144 + 2) = *((_QWORD *)v145 + 2);
        v144[24] = v145[24];
        v147 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v178 + 56);
        swift_retain();
        v147(v183, 0, 1, v115);
      }
      v148 = v119[11];
      v149 = &v29[v148];
      v150 = (char *)v191 + v148;
      v151 = (int *)type metadata accessor for ChatbotCharacteristic(0);
      v152 = *((_QWORD *)v151 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v152 + 48))(v150, 1, v151))
      {
        v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        v154 = sub_1AD63AF28();
        v155 = *(_QWORD *)(v154 - 8);
        v192 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48);
        v184 = v152;
        v188 = v155;
        if (v192(v150, 1, v154))
        {
          v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v149, v150, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v149, 0, 1, v154);
        }
        v157 = v151[5];
        v158 = &v149[v157];
        v159 = &v150[v157];
        if (v192(&v150[v157], 1, v154))
        {
          v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v158, v159, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v158, 0, 1, v154);
        }
        v161 = v151[6];
        v162 = &v149[v161];
        v163 = &v150[v161];
        if (v192(&v150[v161], 1, v154))
        {
          v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v162, v163, v154);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v162, 0, 1, v154);
        }
        v149[v151[7]] = v150[v151[7]];
        v149[v151[8]] = v150[v151[8]];
        v149[v151[9]] = v150[v151[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v184 + 56))(v149, 0, 1, v151);
        v119 = v199;
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v193 + 56))(v29, 0, 1, v119);
      v27 = v195;
    }
    v165 = *(int *)(v27 + 28);
    v166 = &a1[v165];
    v167 = &a2[v165];
    v168 = *((_QWORD *)v167 + 1);
    if (v168)
    {
      *v166 = *v167;
      v169 = *((_QWORD *)v167 + 2);
      v170 = *((_QWORD *)v167 + 3);
      *((_QWORD *)v166 + 1) = v168;
      *((_QWORD *)v166 + 2) = v169;
      *((_QWORD *)v166 + 3) = v170;
      *((_WORD *)v166 + 16) = *((_WORD *)v167 + 16);
      v171 = *((_QWORD *)v167 + 6);
      *((_QWORD *)v166 + 5) = *((_QWORD *)v167 + 5);
      *((_QWORD *)v166 + 6) = v171;
      *((_QWORD *)v166 + 7) = *((_QWORD *)v167 + 7);
      *((_WORD *)v166 + 32) = *((_WORD *)v167 + 32);
      v172 = *((_QWORD *)v167 + 10);
      *((_QWORD *)v166 + 9) = *((_QWORD *)v167 + 9);
      *((_QWORD *)v166 + 10) = v172;
      *((_QWORD *)v166 + 11) = *((_QWORD *)v167 + 11);
      *((_WORD *)v166 + 48) = *((_WORD *)v167 + 48);
      v166[98] = v167[98];
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v173 = *((_OWORD *)v167 + 5);
      *((_OWORD *)v166 + 4) = *((_OWORD *)v167 + 4);
      *((_OWORD *)v166 + 5) = v173;
      *(_DWORD *)(v166 + 95) = *(_DWORD *)(v167 + 95);
      v174 = *((_OWORD *)v167 + 1);
      *(_OWORD *)v166 = *(_OWORD *)v167;
      *((_OWORD *)v166 + 1) = v174;
      v175 = *((_OWORD *)v167 + 3);
      *((_OWORD *)v166 + 2) = *((_OWORD *)v167 + 2);
      *((_OWORD *)v166 + 3) = v175;
    }
    goto LABEL_68;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a1 + 2) = v7;
    v8 = a2 + 24;
    v9 = *((_QWORD *)a2 + 4);
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 24) = *v8;
    }
    else
    {
      *((_QWORD *)a1 + 3) = *(_QWORD *)v8;
      *((_QWORD *)a1 + 4) = v9;
      swift_bridgeObjectRetain();
    }
    a1[40] = a2[40];
    v12 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a1 + 7) = v12;
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    a1[72] = a2[72];
    v13 = *((_QWORD *)a2 + 11);
    *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
    *((_QWORD *)a1 + 11) = v13;
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    a1[104] = a2[104];
    v14 = *((_QWORD *)a2 + 15);
    *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a1 + 15) = v14;
    *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
    a1[136] = a2[136];
    v15 = *((_QWORD *)a2 + 19);
    *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a1 + 19) = v15;
    *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
    v16 = *((_QWORD *)a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *((_QWORD *)a1 + 23) = v16;
    *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
    v17 = *((_QWORD *)a2 + 27);
    *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
    *((_QWORD *)a1 + 27) = v17;
    v18 = *((_QWORD *)a2 + 29);
    *((_QWORD *)a1 + 28) = *((_QWORD *)a2 + 28);
    *((_QWORD *)a1 + 29) = v18;
    a1[240] = a2[240];
    v19 = *((_QWORD *)a2 + 32);
    *((_QWORD *)a1 + 31) = *((_QWORD *)a2 + 31);
    *((_QWORD *)a1 + 32) = v19;
    v20 = *((_QWORD *)a2 + 33);
    *((_WORD *)a1 + 136) = *((_WORD *)a2 + 136);
    *((_QWORD *)a1 + 33) = v20;
    v21 = *((_QWORD *)a2 + 36);
    *((_QWORD *)a1 + 35) = *((_QWORD *)a2 + 35);
    *((_QWORD *)a1 + 36) = v21;
    v22 = *((_QWORD *)a2 + 37);
    *((_WORD *)a1 + 152) = *((_WORD *)a2 + 152);
    *((_QWORD *)a1 + 37) = v22;
    v23 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
    __dst = &a1[v23];
    v198 = &a2[v23];
    v24 = type metadata accessor for IMS3GPPExtCharacteristic();
    v25 = *(_QWORD *)(v24 - 8);
    v181 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v196 = v24;
    if (v181(v198, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
      memcpy(__dst, v198, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v194 = v25;
      v34 = *((_QWORD *)v198 + 1);
      *(_QWORD *)__dst = *(_QWORD *)v198;
      *((_QWORD *)__dst + 1) = v34;
      v35 = *((_QWORD *)v198 + 3);
      *((_QWORD *)__dst + 2) = *((_QWORD *)v198 + 2);
      *((_QWORD *)__dst + 3) = v35;
      __dst[32] = v198[32];
      v36 = (int *)type metadata accessor for IMSGSMACharacteristic();
      v37 = v36[6];
      v38 = &__dst[v37];
      v39 = &v198[v37];
      v40 = sub_1AD63AF28();
      v41 = *(_QWORD *)(v40 - 8);
      v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v42(v39, 1, v40))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      v47 = v36[7];
      v48 = &__dst[v47];
      v49 = &v198[v47];
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      v51 = v49 + 16;
      v52 = *((_QWORD *)v49 + 3);
      swift_retain();
      if (v52 == 1)
      {
        *((_OWORD *)v48 + 1) = *v51;
      }
      else
      {
        *((_QWORD *)v48 + 2) = *(_QWORD *)v51;
        *((_QWORD *)v48 + 3) = v52;
        swift_bridgeObjectRetain();
      }
      v53 = v36[8];
      v54 = &__dst[v53];
      v55 = &v198[v53];
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = v56;
      v57 = v55 + 16;
      v58 = *((_QWORD *)v55 + 3);
      swift_retain();
      if (v58 == 1)
      {
        *((_OWORD *)v54 + 1) = *v57;
      }
      else
      {
        *((_QWORD *)v54 + 2) = *(_QWORD *)v57;
        *((_QWORD *)v54 + 3) = v58;
        swift_bridgeObjectRetain();
      }
      v59 = v36[9];
      v60 = &__dst[v59];
      v61 = &v198[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v61[8];
      v62 = v36[10];
      v63 = &__dst[v62];
      v64 = &v198[v62];
      v65 = sub_1AD63B084();
      v66 = *(_QWORD *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(__dst, 0, 1, v196);
    }
LABEL_68:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_1AD3D80E8(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t, int *);
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  int *v123;
  uint64_t v124;
  unsigned int (*v125)(_QWORD *, uint64_t, int *);
  uint64_t v126;
  int *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int (*v137)(char *, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, _QWORD, uint64_t, int *);
  uint64_t v160;
  char *v161;
  char *v162;
  int *v163;
  unsigned int (**v164)(const void *, uint64_t, int *);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  char *__dst;
  _QWORD *__dsta;
  char *__dstb;
  void (**__dstc)(void *, const void *, uint64_t);
  unsigned int (*v200)(char *, uint64_t, uint64_t);
  char *v201;
  char *v202;
  char *v203;
  unsigned int (**v204)(const void *, uint64_t, int *);
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  unsigned int (*v208)(char *, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char *v212;
  uint64_t v213;
  int *v214;

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for ApplicationCharacteristic);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      if (v9 == 1)
      {
        v10 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        *((_OWORD *)a1 + 1) = v10;
      }
      else
      {
        a1[16] = a2[16];
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        a1[33] = a2[33];
        a1[34] = a2[34];
        a1[35] = a2[35];
        a1[36] = a2[36];
        *(_DWORD *)(a1 + 37) = *(_DWORD *)(a2 + 37);
        swift_bridgeObjectRetain();
      }
      v28 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
      v29 = *(int *)(v28 + 24);
      v30 = &a1[v29];
      v31 = &a2[v29];
      v32 = (int *)type metadata accessor for MessagingCharacteristic(0);
      v33 = *((_QWORD *)v32 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v209 = v33;
        v210 = v28;
        v44 = type metadata accessor for StandaloneMsgCharacteristic(0);
        v45 = *(_QWORD *)(v44 - 8);
        v212 = v30;
        v214 = v32;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v31, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v67 = *((_QWORD *)v31 + 1);
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *((_QWORD *)v30 + 1) = v67;
          v68 = *((_QWORD *)v31 + 2);
          v30[24] = v31[24];
          *((_QWORD *)v30 + 2) = v68;
          v69 = *((_QWORD *)v31 + 5);
          *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
          *((_QWORD *)v30 + 5) = v69;
          v70 = *((_QWORD *)v31 + 6);
          *((_WORD *)v30 + 28) = *((_WORD *)v31 + 28);
          *((_QWORD *)v30 + 6) = v70;
          v71 = *(int *)(v44 + 24);
          v201 = &v31[v71];
          v205 = &v30[v71];
          v72 = sub_1AD63AF28();
          v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16);
          v32 = v214;
          swift_retain();
          swift_retain();
          v73(v205, v201, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v30, 0, 1, v44);
        }
        v74 = v32[5];
        v75 = &v30[v74];
        v76 = &v31[v74];
        v77 = (int *)type metadata accessor for ChatCharacteristic(0);
        v78 = *((_QWORD *)v77 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v78 + 48))(v76, 1, v77))
        {
          v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          v80 = *((_QWORD *)v76 + 1);
          *(_QWORD *)v75 = *(_QWORD *)v76;
          *((_QWORD *)v75 + 1) = v80;
          v81 = *((_QWORD *)v76 + 2);
          *((_WORD *)v75 + 12) = *((_WORD *)v76 + 12);
          *((_QWORD *)v75 + 2) = v81;
          v82 = v77[5];
          v202 = &v75[v82];
          v206 = v78;
          v83 = &v76[v82];
          v84 = sub_1AD63AF28();
          __dsta = *(_QWORD **)(v84 - 8);
          v85 = (unsigned int (*)(char *, uint64_t, uint64_t))__dsta[6];
          swift_retain();
          if (v85(v83, 1, v84))
          {
            v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v202, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dsta[2])(v202, v83, v84);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsta[7])(v202, 0, 1, v84);
          }
          v75[v77[6]] = v76[v77[6]];
          v75[v77[7]] = v76[v77[7]];
          v87 = v77[8];
          v88 = &v75[v87];
          v89 = &v76[v87];
          v90 = *((_QWORD *)v89 + 1);
          *(_QWORD *)v88 = *(_QWORD *)v89;
          *((_QWORD *)v88 + 1) = v90;
          v91 = *((_QWORD *)v89 + 2);
          v88[24] = v89[24];
          *((_QWORD *)v88 + 2) = v91;
          v92 = v77[9];
          v93 = &v75[v92];
          v94 = &v76[v92];
          v95 = *((_QWORD *)v94 + 1);
          *(_QWORD *)v93 = *(_QWORD *)v94;
          *((_QWORD *)v93 + 1) = v95;
          v96 = *((_QWORD *)v94 + 2);
          v93[24] = v94[24];
          *((_QWORD *)v93 + 2) = v96;
          v97 = v77[10];
          v98 = &v75[v97];
          v99 = &v76[v97];
          v100 = *((_QWORD *)v99 + 1);
          *(_QWORD *)v98 = *(_QWORD *)v99;
          *((_QWORD *)v98 + 1) = v100;
          v101 = *((_QWORD *)v99 + 2);
          *((_WORD *)v98 + 12) = *((_WORD *)v99 + 12);
          *((_QWORD *)v98 + 2) = v101;
          v102 = v77[11];
          v103 = &v75[v102];
          v104 = &v76[v102];
          v105 = *((_QWORD *)v104 + 1);
          *(_QWORD *)v103 = *(_QWORD *)v104;
          *((_QWORD *)v103 + 1) = v105;
          v106 = *((_QWORD *)v104 + 2);
          *((_WORD *)v103 + 12) = *((_WORD *)v104 + 12);
          *((_QWORD *)v103 + 2) = v106;
          v75[v77[12]] = v76[v77[12]];
          v107 = *(void (**)(char *, _QWORD, uint64_t, int *))(v206 + 56);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v107(v75, 0, 1, v77);
          v30 = v212;
          v32 = v214;
        }
        v108 = v32[6];
        v109 = &v30[v108];
        v110 = &v31[v108];
        v111 = *((_QWORD *)v110 + 1);
        *(_QWORD *)v109 = *(_QWORD *)v110;
        *((_QWORD *)v109 + 1) = v111;
        v112 = *((_QWORD *)v110 + 2);
        v109[24] = v110[24];
        *((_QWORD *)v109 + 2) = v112;
        v30[v32[7]] = v31[v32[7]];
        v30[v32[8]] = v31[v32[8]];
        v113 = v32[9];
        v114 = &v30[v113];
        v115 = &v31[v113];
        v116 = v32;
        v117 = *((_QWORD *)v115 + 1);
        *(_QWORD *)v114 = *(_QWORD *)v115;
        *((_QWORD *)v114 + 1) = v117;
        v118 = *((_QWORD *)v115 + 2);
        *((_WORD *)v114 + 12) = *((_WORD *)v115 + 12);
        *((_QWORD *)v114 + 2) = v118;
        v119 = v116[10];
        v120 = v31;
        v121 = &v30[v119];
        v207 = v120;
        v122 = (_QWORD *)((char *)v120 + v119);
        v123 = (int *)type metadata accessor for FileTransferCharacteristic(0);
        v124 = *((_QWORD *)v123 - 1);
        v125 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v124 + 48);
        swift_retain();
        swift_retain();
        if (v125(v122, 1, v123))
        {
          v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
          memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
          v128 = v212;
          v127 = v214;
          v129 = v207;
        }
        else
        {
          v193 = v124;
          v130 = v122[1];
          *(_QWORD *)v121 = *v122;
          *((_QWORD *)v121 + 1) = v130;
          v131 = v122[2];
          *((_WORD *)v121 + 12) = *((_WORD *)v122 + 12);
          *((_QWORD *)v121 + 2) = v131;
          v132 = v122[5];
          *((_QWORD *)v121 + 4) = v122[4];
          *((_QWORD *)v121 + 5) = v132;
          v133 = v122[6];
          v121[56] = *((_BYTE *)v122 + 56);
          *((_QWORD *)v121 + 6) = v133;
          v121[57] = *((_BYTE *)v122 + 57);
          v134 = v123[7];
          v195 = &v121[v134];
          __dstb = v121;
          v203 = (char *)v122 + v134;
          v135 = sub_1AD63AF28();
          v136 = *(_QWORD *)(v135 - 8);
          v137 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48);
          swift_retain();
          v138 = v135;
          swift_retain();
          v192 = v136;
          if (v137(v203, 1, v135))
          {
            v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v195, v203, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v195, v203, v135);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v195, 0, 1, v135);
          }
          v129 = v207;
          v140 = v123[8];
          v141 = &__dstb[v140];
          v142 = (char *)v122 + v140;
          if (v137((char *)v122 + v140, 1, v138))
          {
            v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v192 + 16))(v141, v142, v138);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v141, 0, 1, v138);
          }
          v144 = v123[9];
          v145 = &__dstb[v144];
          v146 = (char *)v122 + v144;
          v147 = *(_QWORD *)((char *)v122 + v144 + 8);
          *(_QWORD *)v145 = *(_QWORD *)((char *)v122 + v144);
          *((_QWORD *)v145 + 1) = v147;
          v148 = *(_QWORD *)((char *)v122 + v144 + 24);
          swift_retain();
          if (v148 == 1)
          {
            *((_OWORD *)v145 + 1) = *((_OWORD *)v146 + 1);
          }
          else
          {
            *((_QWORD *)v145 + 2) = *((_QWORD *)v146 + 2);
            *((_QWORD *)v145 + 3) = *((_QWORD *)v146 + 3);
            swift_bridgeObjectRetain();
          }
          v149 = v123[10];
          v150 = &__dstb[v149];
          v151 = (char *)v122 + v149;
          v152 = *(_QWORD *)((char *)v122 + v149 + 8);
          *(_QWORD *)v150 = *(_QWORD *)((char *)v122 + v149);
          *((_QWORD *)v150 + 1) = v152;
          v153 = *(_QWORD *)((char *)v122 + v149 + 24);
          swift_retain();
          if (v153 == 1)
          {
            *((_OWORD *)v150 + 1) = *((_OWORD *)v151 + 1);
          }
          else
          {
            *((_QWORD *)v150 + 2) = *((_QWORD *)v151 + 2);
            *((_QWORD *)v150 + 3) = *((_QWORD *)v151 + 3);
            swift_bridgeObjectRetain();
          }
          v128 = v212;
          v127 = v214;
          __dstb[v123[11]] = *((_BYTE *)v122 + v123[11]);
          v154 = v123[12];
          v155 = &__dstb[v154];
          v156 = (char *)v122 + v154;
          v157 = *((_QWORD *)v156 + 1);
          *(_QWORD *)v155 = *(_QWORD *)v156;
          *((_QWORD *)v155 + 1) = v157;
          v158 = *((_QWORD *)v156 + 2);
          v155[24] = v156[24];
          *((_QWORD *)v155 + 2) = v158;
          v159 = *(void (**)(char *, _QWORD, uint64_t, int *))(v193 + 56);
          swift_retain();
          v159(__dstb, 0, 1, v123);
        }
        v160 = v127[11];
        v161 = (char *)v128 + v160;
        v162 = (char *)v129 + v160;
        v163 = (int *)type metadata accessor for ChatbotCharacteristic(0);
        v164 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v163 - 1);
        if (v164[6](v162, 1, v163))
        {
          v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
        }
        else
        {
          v166 = sub_1AD63AF28();
          v167 = *(_QWORD *)(v166 - 8);
          v208 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
          __dstc = (void (**)(void *, const void *, uint64_t))v167;
          v204 = v164;
          if (v208(v162, 1, v166))
          {
            v168 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v161, v162, v166);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v161, 0, 1, v166);
          }
          v169 = v163[5];
          v170 = &v161[v169];
          v171 = &v162[v169];
          if (v208(&v162[v169], 1, v166))
          {
            v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            __dstc[2](v170, v171, v166);
            v128 = v212;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstc[7])(v170, 0, 1, v166);
          }
          v173 = v163[6];
          v174 = &v161[v173];
          v175 = &v162[v173];
          if (v208(&v162[v173], 1, v166))
          {
            v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
          }
          else
          {
            __dstc[2](v174, v175, v166);
            v128 = v212;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstc[7])(v174, 0, 1, v166);
          }
          v127 = v214;
          v161[v163[7]] = v162[v163[7]];
          v161[v163[8]] = v162[v163[8]];
          v161[v163[9]] = v162[v163[9]];
          ((void (*)(char *, _QWORD, uint64_t, int *))v204[7])(v161, 0, 1, v163);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v209 + 56))(v128, 0, 1, v127);
        v28 = v210;
      }
      v177 = *(int *)(v28 + 28);
      v178 = &a1[v177];
      v179 = &a2[v177];
      if (*((_QWORD *)v179 + 1))
      {
        *v178 = *v179;
        v180 = *((_QWORD *)v179 + 2);
        *((_QWORD *)v178 + 1) = *((_QWORD *)v179 + 1);
        *((_QWORD *)v178 + 2) = v180;
        v181 = *((_QWORD *)v179 + 3);
        *((_WORD *)v178 + 16) = *((_WORD *)v179 + 16);
        *((_QWORD *)v178 + 3) = v181;
        v182 = *((_QWORD *)v179 + 6);
        *((_QWORD *)v178 + 5) = *((_QWORD *)v179 + 5);
        *((_QWORD *)v178 + 6) = v182;
        v183 = *((_QWORD *)v179 + 7);
        *((_WORD *)v178 + 32) = *((_WORD *)v179 + 32);
        *((_QWORD *)v178 + 7) = v183;
        v184 = *((_QWORD *)v179 + 10);
        *((_QWORD *)v178 + 9) = *((_QWORD *)v179 + 9);
        *((_QWORD *)v178 + 10) = v184;
        v185 = *((_QWORD *)v179 + 11);
        *((_WORD *)v178 + 48) = *((_WORD *)v179 + 48);
        *((_QWORD *)v178 + 11) = v185;
        v178[98] = v179[98];
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v186 = *(_OWORD *)v179;
        v187 = *((_OWORD *)v179 + 2);
        *((_OWORD *)v178 + 1) = *((_OWORD *)v179 + 1);
        *((_OWORD *)v178 + 2) = v187;
        *(_OWORD *)v178 = v186;
        v188 = *((_OWORD *)v179 + 3);
        v189 = *((_OWORD *)v179 + 4);
        v190 = *((_OWORD *)v179 + 5);
        *(_DWORD *)(v178 + 95) = *(_DWORD *)(v179 + 95);
        *((_OWORD *)v178 + 4) = v189;
        *((_OWORD *)v178 + 5) = v190;
        *((_OWORD *)v178 + 3) = v188;
      }
      goto LABEL_69;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      v7 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v7;
      v8 = *((_QWORD *)a2 + 4);
      swift_retain();
      if (v8 == 1)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        swift_bridgeObjectRetain();
      }
      a1[40] = a2[40];
      v11 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v11;
      v12 = *((_QWORD *)a2 + 8);
      a1[72] = a2[72];
      *((_QWORD *)a1 + 8) = v12;
      v13 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = v13;
      v14 = *((_QWORD *)a2 + 12);
      a1[104] = a2[104];
      *((_QWORD *)a1 + 12) = v14;
      v15 = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      *((_QWORD *)a1 + 15) = v15;
      v16 = *((_QWORD *)a2 + 16);
      a1[136] = a2[136];
      *((_QWORD *)a1 + 16) = v16;
      v17 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = v17;
      *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
      v18 = *((_QWORD *)a2 + 23);
      *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
      *((_QWORD *)a1 + 23) = v18;
      *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
      v19 = *((_QWORD *)a2 + 26);
      *((_QWORD *)a1 + 25) = *((_QWORD *)a2 + 25);
      *((_QWORD *)a1 + 26) = v19;
      *((_QWORD *)a1 + 27) = *((_QWORD *)a2 + 27);
      *((_QWORD *)a1 + 28) = *((_QWORD *)a2 + 28);
      *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
      a1[240] = a2[240];
      v20 = *((_QWORD *)a2 + 32);
      *((_QWORD *)a1 + 31) = *((_QWORD *)a2 + 31);
      *((_QWORD *)a1 + 32) = v20;
      v21 = *((_QWORD *)a2 + 33);
      *((_WORD *)a1 + 136) = *((_WORD *)a2 + 136);
      *((_QWORD *)a1 + 33) = v21;
      v22 = *((_QWORD *)a2 + 36);
      *((_QWORD *)a1 + 35) = *((_QWORD *)a2 + 35);
      *((_QWORD *)a1 + 36) = v22;
      v23 = *((_QWORD *)a2 + 37);
      *((_WORD *)a1 + 152) = *((_WORD *)a2 + 152);
      *((_QWORD *)a1 + 37) = v23;
      v24 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
      __dst = &a1[v24];
      v25 = &a2[v24];
      v26 = type metadata accessor for IMS3GPPExtCharacteristic();
      v194 = *(_QWORD **)(v26 - 8);
      v200 = (unsigned int (*)(char *, uint64_t, uint64_t))v194[6];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v213 = v26;
      if (v200(v25, 1, v26))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v35 = *((_QWORD *)v25 + 1);
        *(_QWORD *)__dst = *(_QWORD *)v25;
        *((_QWORD *)__dst + 1) = v35;
        *((_QWORD *)__dst + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)__dst + 3) = *((_QWORD *)v25 + 3);
        __dst[32] = v25[32];
        v36 = (int *)type metadata accessor for IMSGSMACharacteristic();
        v37 = v36[6];
        v38 = &__dst[v37];
        v211 = v25;
        v39 = &v25[v37];
        v40 = sub_1AD63AF28();
        v41 = *(_QWORD *)(v40 - 8);
        v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v42(v39, 1, v40))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        v47 = v36[7];
        v48 = &__dst[v47];
        v49 = (char *)v211 + v47;
        v50 = *(_QWORD *)((char *)v211 + v47 + 8);
        *(_QWORD *)v48 = *(_QWORD *)((char *)v211 + v47);
        *((_QWORD *)v48 + 1) = v50;
        v51 = *(_QWORD *)((char *)v211 + v47 + 24);
        swift_retain();
        if (v51 == 1)
        {
          *((_OWORD *)v48 + 1) = *((_OWORD *)v49 + 1);
        }
        else
        {
          *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
          *((_QWORD *)v48 + 3) = *((_QWORD *)v49 + 3);
          swift_bridgeObjectRetain();
        }
        v52 = v36[8];
        v53 = &__dst[v52];
        v54 = (char *)v211 + v52;
        v55 = *(_QWORD *)((char *)v211 + v52 + 8);
        *(_QWORD *)v53 = *(_QWORD *)((char *)v211 + v52);
        *((_QWORD *)v53 + 1) = v55;
        v56 = *(_QWORD *)((char *)v211 + v52 + 24);
        swift_retain();
        if (v56 == 1)
        {
          *((_OWORD *)v53 + 1) = *((_OWORD *)v54 + 1);
        }
        else
        {
          *((_QWORD *)v53 + 2) = *((_QWORD *)v54 + 2);
          *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
          swift_bridgeObjectRetain();
        }
        v57 = v36[9];
        v58 = &__dst[v57];
        v59 = (char *)v211 + v57;
        v60 = *(_QWORD *)v59;
        v58[8] = v59[8];
        *(_QWORD *)v58 = v60;
        v61 = v36[10];
        v62 = &__dst[v61];
        v63 = (char *)v211 + v61;
        v64 = sub_1AD63B084();
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v62, v63, v64);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v194[7])(__dst, 0, 1, v213);
      }
LABEL_69:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1AD3D8FB4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  int *v58;
  unsigned int (**v59)(_OWORD *, uint64_t, int *);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  __int128 v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  __int128 v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  int *v110;
  unsigned int (**v111)(const void *, uint64_t, int *);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v133;
  unsigned int (*v134)(char *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *__dst;
  char *__dsta;
  unsigned int (**__dstb)(const void *, uint64_t, int *);
  int *v141;
  _BYTE *v142;
  char *__src;
  char *__srca;
  char *__srcb;
  unsigned int (*__srcc)(char *, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    v16 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
    v17 = *(int *)(v16 + 24);
    v18 = (_OWORD *)((char *)a1 + v17);
    v19 = (_OWORD *)((char *)a2 + v17);
    v20 = (int *)type metadata accessor for MessagingCharacteristic(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v147 = v21;
      v148 = v16;
      v31 = type metadata accessor for StandaloneMsgCharacteristic(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v19 + 9);
        v18[2] = v19[2];
        *(_OWORD *)((char *)v18 + 42) = *(_OWORD *)((char *)v19 + 42);
        v51 = *(int *)(v31 + 24);
        v52 = (char *)v18 + v51;
        v53 = (char *)v19 + v51;
        v54 = sub_1AD63AF28();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v31);
      }
      v55 = v20[5];
      v56 = (_OWORD *)((char *)v18 + v55);
      v57 = (_OWORD *)((char *)v19 + v55);
      v58 = (int *)type metadata accessor for ChatCharacteristic(0);
      v59 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v58 - 1);
      if (v59[6](v57, 1, v58))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        __dst = v59;
        *v56 = *v57;
        *(_OWORD *)((char *)v56 + 10) = *(_OWORD *)((char *)v57 + 10);
        v61 = v58[5];
        __src = (char *)v56 + v61;
        v62 = (char *)v57 + v61;
        v63 = sub_1AD63AF28();
        v135 = *(_QWORD *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v62, 1, v63))
        {
          v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__src, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v135 + 32))(__src, v62, v63);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(__src, 0, 1, v63);
        }
        *((_BYTE *)v56 + v58[6]) = *((_BYTE *)v57 + v58[6]);
        *((_BYTE *)v56 + v58[7]) = *((_BYTE *)v57 + v58[7]);
        v65 = v58[8];
        v66 = (_OWORD *)((char *)v56 + v65);
        v67 = (_OWORD *)((char *)v57 + v65);
        *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v67 + 9);
        *v66 = *v67;
        v68 = v58[9];
        v69 = (_OWORD *)((char *)v56 + v68);
        v70 = (_OWORD *)((char *)v57 + v68);
        *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)((char *)v70 + 9);
        *v69 = *v70;
        v71 = v58[10];
        v72 = (_OWORD *)((char *)v56 + v71);
        v73 = (_OWORD *)((char *)v57 + v71);
        *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)((char *)v73 + 10);
        *v72 = *v73;
        v74 = v58[11];
        v75 = (_OWORD *)((char *)v56 + v74);
        v76 = (_OWORD *)((char *)v57 + v74);
        *v75 = *v76;
        *(_OWORD *)((char *)v75 + 10) = *(_OWORD *)((char *)v76 + 10);
        *((_BYTE *)v56 + v58[12]) = *((_BYTE *)v57 + v58[12]);
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dst + 7))(v56, 0, 1, v58);
      }
      v77 = v20[6];
      v78 = (_OWORD *)((char *)v18 + v77);
      v79 = (_OWORD *)((char *)v19 + v77);
      *v78 = *v79;
      *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)((char *)v79 + 9);
      *((_BYTE *)v18 + v20[7]) = *((_BYTE *)v19 + v20[7]);
      *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
      v80 = v20[9];
      v81 = (_OWORD *)((char *)v18 + v80);
      v82 = (_OWORD *)((char *)v19 + v80);
      *v81 = *v82;
      *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v82 + 10);
      v83 = v20[10];
      v84 = (_OWORD *)((char *)v18 + v83);
      v85 = (_OWORD *)((char *)v19 + v83);
      v86 = (int *)type metadata accessor for FileTransferCharacteristic(0);
      v87 = *((_QWORD *)v86 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v87 + 48))(v85, 1, v86))
      {
        v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        *v84 = *v85;
        *(_OWORD *)((char *)v84 + 10) = *(_OWORD *)((char *)v85 + 10);
        v84[2] = v85[2];
        *(_OWORD *)((char *)v84 + 41) = *(_OWORD *)((char *)v85 + 41);
        *((_BYTE *)v84 + 57) = *((_BYTE *)v85 + 57);
        v89 = v86[7];
        __dsta = (char *)v84 + v89;
        v141 = v20;
        __srca = (char *)v85 + v89;
        v90 = sub_1AD63AF28();
        v91 = *(_QWORD *)(v90 - 8);
        v149 = v90;
        v134 = *(unsigned int (**)(char *, uint64_t))(v91 + 48);
        v136 = v87;
        v133 = v91;
        if (v134(__srca, 1))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__dsta, __srca, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v91 + 32))(__dsta, __srca, v149);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dsta, 0, 1, v149);
        }
        v93 = v86[8];
        __srcb = (char *)v84 + v93;
        v94 = (char *)v85 + v93;
        v20 = v141;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v134)((char *)v85 + v93, 1, v149))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(__srcb, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v133 + 32))(__srcb, v94, v149);
          v20 = v141;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(__srcb, 0, 1, v149);
        }
        v96 = v86[9];
        v97 = (_OWORD *)((char *)v84 + v96);
        v98 = (_OWORD *)((char *)v85 + v96);
        v99 = v98[1];
        *v97 = *v98;
        v97[1] = v99;
        v100 = v86[10];
        v101 = (_OWORD *)((char *)v84 + v100);
        v102 = (_OWORD *)((char *)v85 + v100);
        v103 = v102[1];
        *v101 = *v102;
        v101[1] = v103;
        *((_BYTE *)v84 + v86[11]) = *((_BYTE *)v85 + v86[11]);
        v104 = v86[12];
        v105 = (_OWORD *)((char *)v84 + v104);
        v106 = (_OWORD *)((char *)v85 + v104);
        *v105 = *v106;
        *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)((char *)v106 + 9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v136 + 56))(v84, 0, 1, v86);
      }
      v107 = v20[11];
      v150 = v18;
      v108 = (char *)v18 + v107;
      v109 = (char *)v19 + v107;
      v110 = (int *)type metadata accessor for ChatbotCharacteristic(0);
      v111 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v110 - 1);
      if (v111[6](v109, 1, v110))
      {
        v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        v142 = v108;
        v113 = sub_1AD63AF28();
        v114 = *(_QWORD *)(v113 - 8);
        __srcc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48);
        v137 = v114;
        __dstb = v111;
        if (__srcc(v109, 1, v113))
        {
          v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          v116 = v142;
          memcpy(v142, v109, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        }
        else
        {
          v116 = v142;
          (*(void (**)(_BYTE *, char *, uint64_t))(v114 + 32))(v142, v109, v113);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v142, 0, 1, v113);
        }
        v117 = v113;
        v118 = v110[5];
        v119 = &v116[v118];
        v120 = &v109[v118];
        if (__srcc(&v109[v118], 1, v117))
        {
          v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v119, v120, v117);
          v116 = v142;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v119, 0, 1, v117);
        }
        v122 = v110[6];
        v123 = &v116[v122];
        v124 = &v109[v122];
        if (__srcc(&v109[v122], 1, v117))
        {
          v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v123, v124, v117);
          v116 = v142;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v123, 0, 1, v117);
        }
        v116[v110[7]] = v109[v110[7]];
        v116[v110[8]] = v109[v110[8]];
        v116[v110[9]] = v109[v110[9]];
        ((void (*)(_BYTE *, _QWORD, uint64_t, int *))__dstb[7])(v116, 0, 1, v110);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v147 + 56))(v150, 0, 1, v20);
      v16 = v148;
    }
    v126 = *(int *)(v16 + 28);
    v127 = (char *)a1 + v126;
    v128 = (char *)a2 + v126;
    v129 = *((_OWORD *)v128 + 5);
    *((_OWORD *)v127 + 4) = *((_OWORD *)v128 + 4);
    *((_OWORD *)v127 + 5) = v129;
    *(_DWORD *)(v127 + 95) = *(_DWORD *)(v128 + 95);
    v130 = *((_OWORD *)v128 + 1);
    *(_OWORD *)v127 = *(_OWORD *)v128;
    *((_OWORD *)v127 + 1) = v130;
    v131 = *((_OWORD *)v128 + 3);
    *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
    *((_OWORD *)v127 + 3) = v131;
    goto LABEL_48;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
    a1[3] = a2[3];
    *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    a1[5] = a2[5];
    *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
    v7 = a2[7];
    *(_OWORD *)((char *)a1 + 121) = *(_OWORD *)((char *)a2 + 121);
    a1[7] = v7;
    v8 = a2[10];
    a1[9] = a2[9];
    a1[10] = v8;
    a1[11] = a2[11];
    *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)((char *)a1 + 200) = *(_OWORD *)((char *)a2 + 200);
    *(_OWORD *)((char *)a1 + 216) = *(_OWORD *)((char *)a2 + 216);
    *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
    *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
    *(_OWORD *)((char *)a1 + 258) = *(_OWORD *)((char *)a2 + 258);
    *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
    *(_OWORD *)((char *)a1 + 290) = *(_OWORD *)((char *)a2 + 290);
    *(_OWORD *)((char *)a1 + 280) = *(_OWORD *)((char *)a2 + 280);
    v9 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
    v10 = (_OWORD *)((char *)a1 + v9);
    v11 = (_OWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for IMS3GPPExtCharacteristic();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v23 = v11[1];
      *v10 = *v11;
      v10[1] = v23;
      *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
      v24 = (int *)type metadata accessor for IMSGSMACharacteristic();
      v25 = v24[6];
      v26 = (char *)v10 + v25;
      v27 = (char *)v11 + v25;
      v28 = sub_1AD63AF28();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      v34 = v24[7];
      v35 = (_OWORD *)((char *)v10 + v34);
      v36 = (_OWORD *)((char *)v11 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      v38 = v24[8];
      v39 = (_OWORD *)((char *)v10 + v38);
      v40 = (_OWORD *)((char *)v11 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = v24[9];
      v43 = (char *)v10 + v42;
      v44 = (char *)v11 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v24[10];
      v46 = (char *)v10 + v45;
      v47 = (char *)v11 + v45;
      v48 = sub_1AD63B084();
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
LABEL_48:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_1AD3D9AA4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  int *v58;
  unsigned int (**v59)(_OWORD *, uint64_t, int *);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  int *v86;
  unsigned int (**v87)(_OWORD *, uint64_t, int *);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  __int128 v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  __int128 v107;
  uint64_t v108;
  _OWORD *v109;
  _OWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int *v114;
  unsigned int (**v115)(const void *, uint64_t, int *);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v136;
  const void *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _OWORD *__src;
  unsigned int (**__srca)(const void *, uint64_t, int *);
  void *v143;
  void *v144;
  char *v145;
  char *v146;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);
  char *__dstb;
  char *__dstc;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  unsigned int (*v154)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for ApplicationCharacteristic);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      v16 = type metadata accessor for GSMARCSApplicationCharacteristic(0);
      v17 = *(int *)(v16 + 24);
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = (int *)type metadata accessor for MessagingCharacteristic(0);
      v21 = *((_QWORD *)v20 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4508);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v151 = v21;
        v152 = v16;
        v31 = type metadata accessor for StandaloneMsgCharacteristic(0);
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4800);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          *v18 = *v19;
          *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v19 + 9);
          v18[2] = v19[2];
          *(_OWORD *)((char *)v18 + 42) = *(_OWORD *)((char *)v19 + 42);
          v51 = *(int *)(v31 + 24);
          v52 = (char *)v18 + v51;
          v53 = (char *)v19 + v51;
          v54 = sub_1AD63AF28();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v31);
        }
        v55 = v20[5];
        v56 = (_OWORD *)((char *)v18 + v55);
        v57 = (_OWORD *)((char *)v19 + v55);
        v58 = (int *)type metadata accessor for ChatCharacteristic(0);
        v59 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v58 - 1);
        if (v59[6](v57, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F8);
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          *v56 = *v57;
          *(_OWORD *)((char *)v56 + 10) = *(_OWORD *)((char *)v57 + 10);
          v61 = v58[5];
          v143 = v59;
          __dst = (char *)v56 + v61;
          v62 = (char *)v57 + v61;
          v63 = sub_1AD63AF28();
          v138 = *(_QWORD *)(v63 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v62, 1, v63))
          {
            v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v138 + 32))(__dst, v62, v63);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56))(__dst, 0, 1, v63);
          }
          *((_BYTE *)v56 + v58[6]) = *((_BYTE *)v57 + v58[6]);
          *((_BYTE *)v56 + v58[7]) = *((_BYTE *)v57 + v58[7]);
          v65 = v58[8];
          v66 = (_OWORD *)((char *)v56 + v65);
          v67 = (_OWORD *)((char *)v57 + v65);
          *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v67 + 9);
          *v66 = *v67;
          v68 = v58[9];
          v69 = (_OWORD *)((char *)v56 + v68);
          v70 = (_OWORD *)((char *)v57 + v68);
          *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)((char *)v70 + 9);
          *v69 = *v70;
          v71 = v58[10];
          v72 = (_OWORD *)((char *)v56 + v71);
          v73 = (_OWORD *)((char *)v57 + v71);
          *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)((char *)v73 + 10);
          *v72 = *v73;
          v74 = v58[11];
          v75 = (_OWORD *)((char *)v56 + v74);
          v76 = (_OWORD *)((char *)v57 + v74);
          *v75 = *v76;
          *(_OWORD *)((char *)v75 + 10) = *(_OWORD *)((char *)v76 + 10);
          *((_BYTE *)v56 + v58[12]) = *((_BYTE *)v57 + v58[12]);
          (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))v143 + 7))(v56, 0, 1, v58);
        }
        v77 = v20[6];
        v78 = (_OWORD *)((char *)v18 + v77);
        v79 = (_OWORD *)((char *)v19 + v77);
        *v78 = *v79;
        *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)((char *)v79 + 9);
        *((_BYTE *)v18 + v20[7]) = *((_BYTE *)v19 + v20[7]);
        *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
        v80 = v20[9];
        v81 = (_OWORD *)((char *)v18 + v80);
        v82 = (_OWORD *)((char *)v19 + v80);
        *v81 = *v82;
        *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v82 + 10);
        v83 = v20[10];
        v84 = (_OWORD *)((char *)v18 + v83);
        v85 = (_OWORD *)((char *)v19 + v83);
        v86 = (int *)type metadata accessor for FileTransferCharacteristic(0);
        v87 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v86 - 1);
        if (v87[6](v85, 1, v86))
        {
          v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47F0);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          v153 = v20;
          *v84 = *v85;
          *(_OWORD *)((char *)v84 + 10) = *(_OWORD *)((char *)v85 + 10);
          v84[2] = v85[2];
          *(_OWORD *)((char *)v84 + 41) = *(_OWORD *)((char *)v85 + 41);
          *((_BYTE *)v84 + 57) = *((_BYTE *)v85 + 57);
          v89 = v86[7];
          v139 = (char *)v84 + v89;
          __src = v18;
          v90 = (char *)v85 + v89;
          v91 = sub_1AD63AF28();
          v92 = *(_QWORD *)(v91 - 8);
          v137 = v90;
          v93 = v90;
          v94 = v91;
          __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
          v144 = v87;
          v136 = v92;
          if (__dsta(v93, 1, v91))
          {
            v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v139, v137, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v92 + 32))(v139, v137, v94);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v139, 0, 1, v94);
          }
          v20 = v153;
          v96 = __dsta;
          v97 = v86[8];
          __dstb = (char *)v84 + v97;
          v98 = (char *)v85 + v97;
          if (v96((char *)v85 + v97, 1, v94))
          {
            v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(__dstb, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v136 + 32))(__dstb, v98, v94);
            v20 = v153;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(__dstb, 0, 1, v94);
          }
          v18 = __src;
          v100 = v86[9];
          v101 = (_OWORD *)((char *)v84 + v100);
          v102 = (_OWORD *)((char *)v85 + v100);
          v103 = v102[1];
          *v101 = *v102;
          v101[1] = v103;
          v104 = v86[10];
          v105 = (_OWORD *)((char *)v84 + v104);
          v106 = (_OWORD *)((char *)v85 + v104);
          v107 = v106[1];
          *v105 = *v106;
          v105[1] = v107;
          *((_BYTE *)v84 + v86[11]) = *((_BYTE *)v85 + v86[11]);
          v108 = v86[12];
          v109 = (_OWORD *)((char *)v84 + v108);
          v110 = (_OWORD *)((char *)v85 + v108);
          *v109 = *v110;
          *(_OWORD *)((char *)v109 + 9) = *(_OWORD *)((char *)v110 + 9);
          (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))v144 + 7))(v84, 0, 1, v86);
        }
        v111 = v20[11];
        v112 = (char *)v18 + v111;
        v113 = (char *)v19 + v111;
        v114 = (int *)type metadata accessor for ChatbotCharacteristic(0);
        v115 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v114 - 1);
        if (v115[6](v113, 1, v114))
        {
          v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD47E8);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          __dstc = v112;
          v117 = sub_1AD63AF28();
          v118 = *(_QWORD *)(v117 - 8);
          v154 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
          v140 = v118;
          __srca = v115;
          if (v154(v113, 1, v117))
          {
            v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            v120 = __dstc;
            memcpy(__dstc, v113, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
          }
          else
          {
            v120 = __dstc;
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(__dstc, v113, v117);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(__dstc, 0, 1, v117);
          }
          v121 = v117;
          v122 = v120;
          v123 = v114[5];
          v145 = &v120[v123];
          v124 = &v113[v123];
          if (v154(&v113[v123], 1, v121))
          {
            v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v145, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v145, v124, v121);
            v122 = __dstc;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v145, 0, 1, v121);
          }
          v126 = v114[6];
          v146 = &v122[v126];
          v127 = &v113[v126];
          if (v154(&v113[v126], 1, v121))
          {
            v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
            memcpy(v146, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(v140 + 32))(v146, v127);
            v122 = __dstc;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v146, 0, 1, v121);
          }
          v122[v114[7]] = v113[v114[7]];
          v122[v114[8]] = v113[v114[8]];
          v122[v114[9]] = v113[v114[9]];
          ((void (*)(char *, _QWORD, uint64_t, int *))__srca[7])(v122, 0, 1, v114);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v151 + 56))(v18, 0, 1, v20);
        v16 = v152;
      }
      v129 = *(int *)(v16 + 28);
      v130 = (char *)a1 + v129;
      v131 = (char *)a2 + v129;
      v132 = *((_OWORD *)v131 + 5);
      *((_OWORD *)v130 + 4) = *((_OWORD *)v131 + 4);
      *((_OWORD *)v130 + 5) = v132;
      *(_DWORD *)(v130 + 95) = *(_DWORD *)(v131 + 95);
      v133 = *((_OWORD *)v131 + 1);
      *(_OWORD *)v130 = *(_OWORD *)v131;
      *((_OWORD *)v130 + 1) = v133;
      v134 = *((_OWORD *)v131 + 3);
      *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
      *((_OWORD *)v130 + 3) = v134;
      goto LABEL_49;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      a1[3] = a2[3];
      *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      a1[5] = a2[5];
      *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
      v7 = a2[7];
      *(_OWORD *)((char *)a1 + 121) = *(_OWORD *)((char *)a2 + 121);
      a1[7] = v7;
      v8 = a2[10];
      a1[9] = a2[9];
      a1[10] = v8;
      a1[11] = a2[11];
      *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
      *(_OWORD *)((char *)a1 + 200) = *(_OWORD *)((char *)a2 + 200);
      *(_OWORD *)((char *)a1 + 216) = *(_OWORD *)((char *)a2 + 216);
      *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      *(_OWORD *)((char *)a1 + 258) = *(_OWORD *)((char *)a2 + 258);
      *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
      *(_OWORD *)((char *)a1 + 290) = *(_OWORD *)((char *)a2 + 290);
      *(_OWORD *)((char *)a1 + 280) = *(_OWORD *)((char *)a2 + 280);
      v9 = *(int *)(type metadata accessor for IMS3GPPCharacteristic() + 68);
      v10 = (_OWORD *)((char *)a1 + v9);
      v11 = (_OWORD *)((char *)a2 + v9);
      v12 = type metadata accessor for IMS3GPPExtCharacteristic();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4630);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v23 = v11[1];
        *v10 = *v11;
        v10[1] = v23;
        *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
        v24 = (int *)type metadata accessor for IMSGSMACharacteristic();
        v25 = v24[6];
        v26 = (char *)v10 + v25;
        v27 = (char *)v11 + v25;
        v28 = sub_1AD63AF28();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v34 = v24[7];
        v35 = (_OWORD *)((char *)v10 + v34);
        v36 = (_OWORD *)((char *)v11 + v34);
        v37 = v36[1];
        *v35 = *v36;
        v35[1] = v37;
        v38 = v24[8];
        v39 = (_OWORD *)((char *)v10 + v38);
        v40 = (_OWORD *)((char *)v11 + v38);
        v41 = v40[1];
        *v39 = *v40;
        v39[1] = v41;
        v42 = v24[9];
        v43 = (char *)v10 + v42;
        v44 = (char *)v11 + v42;
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v44[8];
        v45 = v24[10];
        v46 = (char *)v10 + v45;
        v47 = (char *)v11 + v45;
        v48 = sub_1AD63B084();
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
LABEL_49:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1AD3DA5B0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for IMS3GPPCharacteristic();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for GSMARCSApplicationCharacteristic(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1AD3DA630()
{
  unint64_t result;

  result = qword_1EECDBE68;
  if (!qword_1EECDBE68)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68010C, &type metadata for OMADMApplicationID);
    atomic_store(result, (unint64_t *)&qword_1EECDBE68);
  }
  return result;
}

uint64_t sub_1AD3DA674()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3DA67C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3DA684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_task_switch();
}

uint64_t sub_1AD3DA69C()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBE98);
  *(_QWORD *)(v0 + 64) = sub_1AD63B0A8();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1AD3DA71C;
  return sub_1AD63BC0C();
}

uint64_t sub_1AD3DA71C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1AD3DA788()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 88) = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 96) = v2;
    *(_QWORD *)(v0 + 104) = v8;
    if (v8)
      goto LABEL_3;
LABEL_8:
    v9 = *(uint64_t **)(v0 + 48);

    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9E0];
    *v9 = v2;
    v9[1] = v10;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 96) = v2;
  *(_QWORD *)(v0 + 104) = v2;
  if (!v2)
    goto LABEL_8;
LABEL_3:
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  v3 = *(_QWORD *)(v0 + 88);
  if ((v3 & 0xC000000000000001) != 0)
    v4 = (id)MEMORY[0x1AF44AA40](0);
  else
    v4 = *(id *)(v3 + 32);
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v0 + 128) = 1;
  v5 = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = sub_1AD3DA8D0;
  return sub_1AD34FEBC(v0 + 16, (uint64_t)v5);
}

uint64_t sub_1AD3DA8D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

id sub_1AD3DA948()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  id result;
  char v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = objc_msgSend(*(id *)(v0 + 120), sel_trackID);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 40) = v2;
  v7 = sub_1AD0DFB14(v4);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = (v6 & 1) == 0;
  result = (id)(v8 + v9);
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_20;
  }
  v11 = v6;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 112) + 24) >= (uint64_t)result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      result = sub_1AD440488();
  }
  else
  {
    sub_1AD43E808((uint64_t)result, isUniquelyReferenced_nonNull_native);
    result = (id)sub_1AD0DFB14(v4);
    if ((v11 & 1) != (v12 & 1))
      return (id)sub_1AD63C44C();
    v7 = (unint64_t)result;
  }
  v13 = *(_QWORD **)(v0 + 40);
  if ((v11 & 1) != 0)
  {
    v14 = v13[7] + 16 * v7;
    swift_bridgeObjectRelease();
    *(_DWORD *)v14 = v1;
    *(_QWORD *)(v14 + 8) = v3;
    goto LABEL_12;
  }
  v13[(v7 >> 6) + 8] |= 1 << v7;
  *(_DWORD *)(v13[6] + 4 * v7) = v4;
  v15 = v13[7] + 16 * v7;
  *(_DWORD *)v15 = v1;
  *(_QWORD *)(v15 + 8) = v3;
  v16 = v13[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13[2] = v18;
LABEL_12:
  v20 = *(void **)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease();

  if (v19 == v21)
  {
    v22 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD **)(v0 + 48);

    swift_bridgeObjectRelease();
    *v23 = v22;
    v23[1] = v13;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 112) = v13;
  v25 = *(_QWORD *)(v0 + 88);
  if ((v25 & 0xC000000000000001) != 0)
    result = (id)MEMORY[0x1AF44AA40](v24);
  else
    result = *(id *)(v25 + 8 * v24 + 32);
  *(_QWORD *)(v0 + 120) = result;
  *(_QWORD *)(v0 + 128) = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
    v26 = result;
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v27;
    *v27 = v0;
    v27[1] = sub_1AD3DA8D0;
    return (id)sub_1AD34FEBC(v0 + 16, (uint64_t)v26);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1AD3DAB98()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AD3DABD4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AD3DAC10(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_1AD3DAC34(a1[1], a2[1]);
  else
    return 0;
}

uint64_t sub_1AD3DAC34(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v11);
    v16 = *(_QWORD *)(v3 + 56) + 16 * v11;
    v17 = *(_DWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = sub_1AD0DFB14(v15);
    if ((v20 & 1) != 0 && *(_DWORD *)(*(_QWORD *)(a2 + 56) + 16 * v19) == v17)
    {
      swift_bridgeObjectRetain();
      v21 = swift_bridgeObjectRetain();
      v22 = sub_1AD350B2C(v21, v18);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v22)
        continue;
    }
    return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1AD3DADFC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_1AD3DAC34(a1[1], a2[1]);
  else
    return 0;
}

uint64_t sub_1AD3DAE20(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  _QWORD *v5;

  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1AD13F52C;
  v5[6] = a1;
  v5[7] = v4;
  return swift_task_switch();
}

uint64_t sub_1AD3DAE94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = v0;
  return swift_task_switch();
}

uint64_t sub_1AD3DAEF8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[18];
  v2 = *MEMORY[0x1E0C8A910];
  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_1AD3DAFD0;
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1AD3DB51C;
  v4[3] = &block_descriptor;
  v4[4] = v3;
  objc_msgSend(v1, sel_loadMetadataForFormat_completionHandler_, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_1AD3DAFD0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1AD3DB074()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v1 = (void *)objc_opt_self();
  sub_1AD3DB5B4();
  v2 = (void *)sub_1AD63B990();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_1AD63B744();
  v4 = objc_msgSend(v1, sel_metadataItemsFromArray_withKey_keySpace_, v2, v3, *MEMORY[0x1E0C8A9F0]);

  v5 = sub_1AD63B9B4();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    if (v9 >= 1)
    {
      swift_bridgeObjectRetain();
      v10 = sub_1AD63BE34();
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1AF44AA40](0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v6 = *(id *)(v5 + 32);
  }
  *(_QWORD *)(v0 + 160) = v6;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBE90);
  *(_QWORD *)(v0 + 168) = sub_1AD63B09C();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v7;
  *v7 = v0;
  v7[1] = sub_1AD3DB2A4;
  return sub_1AD63BC0C();
}

uint64_t sub_1AD3DB2A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1AD3DB35C()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 >> 60 == 15)
  {

    v2 = 0;
  }
  else
  {
    *(_DWORD *)(v0 + 192) = 0;
    v3 = *(void **)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = sub_1AD4EA5E4((_BYTE *)(v0 + 192), (_BYTE *)(v0 + 196));
    v7 = v6 & 0xFFFFFFFFFFFFFFLL;
    sub_1AD3DB778(v4, v1);
    v2 = v8;
    sub_1AD00412C(v5, v7);
    sub_1AD004118(v4, v1);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v2 & 1);
}

uint64_t sub_1AD3DB444()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1AD3DB4B0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1AD3DB51C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E5300);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_1AD3DB5B4();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_1AD63B9B4();
    return swift_continuation_throwingResume();
  }
}

unint64_t sub_1AD3DB5B4()
{
  unint64_t result;

  result = qword_1EECDBE88;
  if (!qword_1EECDBE88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EECDBE88);
  }
  return result;
}

uint64_t sub_1AD3DB5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1AD35456C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1AD3DB6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1AD63ADA8();
  v11 = result;
  if (result)
  {
    result = sub_1AD63ADCC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1AD63ADC0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1AD35456C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1AD3DB778(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1AD3DB7C4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1AD3DB7F8 + *((int *)qword_1AD3DB9D0 + (v0 >> 62))))();
}

uint64_t sub_1AD3DB808@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1AD3DB9F0(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_1AD4EA5E4(__src, &__src[a2]);
  sub_1AD63ADD8();
  swift_allocObject();
  sub_1AD63AD9C();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_1AD63AF88();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

ValueMetadata *_s9MediaInfoVMa()
{
  return &_s9MediaInfoVN;
}

void static BinaryCodable.endianness.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

BOOL static Endianness.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Endianness.hash(into:)()
{
  return sub_1AD63C4B8();
}

uint64_t Endianness.hashValue.getter()
{
  sub_1AD63C4AC();
  sub_1AD63C4B8();
  return sub_1AD63C4F4();
}

unint64_t sub_1AD3DBB38()
{
  unint64_t result;

  result = qword_1EECDBEA0;
  if (!qword_1EECDBEA0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store(result, (unint64_t *)&qword_1EECDBEA0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AD3DBBC8 + 4 * byte_1AD68034D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AD3DBBFC + 4 * asc_1AD680348[v4]))();
}

uint64_t sub_1AD3DBBFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DBC04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3DBC0CLL);
  return result;
}

uint64_t sub_1AD3DBC18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3DBC20);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AD3DBC24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DBC2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

uint64_t dispatch thunk of static BinaryCodable.endianness.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void sub_1AD3DBC50(_BYTE *a1@<X8>)
{
  static BinaryCodable.endianness.getter(a1);
}

uint64_t sub_1AD3DBC64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3DBC6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*sub_1AD3DBC94())()
{
  return nullsub_1;
}

unint64_t sub_1AD3DBCA4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD28E220();
  result = sub_1AD28E2E0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for DefaultCharacteristic()
{
  return &type metadata for DefaultCharacteristic;
}

double Handwriting.DrawingStrokePoint.location.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Handwriting.DrawingStrokePoint.location.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*Handwriting.DrawingStrokePoint.location.modify())()
{
  return nullsub_1;
}

double Handwriting.DrawingStrokePoint.force.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Handwriting.DrawingStrokePoint.force.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Handwriting.DrawingStrokePoint.force.modify())()
{
  return nullsub_1;
}

double Handwriting.DrawingStrokePoint.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void Handwriting.DrawingStrokePoint.velocity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*Handwriting.DrawingStrokePoint.velocity.modify())()
{
  return nullsub_1;
}

uint64_t Handwriting.DrawingStroke.strokePoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Handwriting.DrawingStroke.strokePoints.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Handwriting.DrawingStroke.strokePoints.modify())()
{
  return nullsub_1;
}

double Handwriting.Drawing.canvasBounds.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Handwriting.Drawing.canvasBounds.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Handwriting.Drawing.canvasBounds.modify())()
{
  return nullsub_1;
}

double Handwriting.Drawing.strokesFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Handwriting.Drawing.strokesFrame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*Handwriting.Drawing.strokesFrame.modify())()
{
  return nullsub_1;
}

uint64_t Handwriting.Drawing.strokes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Handwriting.Drawing.strokes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*Handwriting.Drawing.strokes.modify())()
{
  return nullsub_1;
}

uint64_t Handwriting.Drawing.totalPoints.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t Handwriting.Drawing.totalPoints.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*Handwriting.Drawing.totalPoints.modify())()
{
  return nullsub_1;
}

uint64_t Handwriting.sessionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AD63B084();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Handwriting.sessionIdentifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AD63B084();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*Handwriting.sessionIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t Handwriting.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Handwriting() + 20);
  v4 = sub_1AD63B03C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for Handwriting()
{
  uint64_t result;

  result = qword_1ED2E1F98;
  if (!qword_1ED2E1F98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Handwriting.creationDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Handwriting() + 20);
  v4 = sub_1AD63B03C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Handwriting.creationDate.modify())(_QWORD)
{
  type metadata accessor for Handwriting();
  return nullsub_1;
}

uint64_t Handwriting.drawing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v3 = v1 + *(int *)(type metadata accessor for Handwriting() + 24);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  return swift_bridgeObjectRetain();
}

__n128 Handwriting.drawing.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;

  v9 = a1[1];
  v10 = *a1;
  v8 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v4 = *((_QWORD *)a1 + 8);
  v5 = *((_QWORD *)a1 + 9);
  v6 = v1 + *(int *)(type metadata accessor for Handwriting() + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)v6 = v10;
  *(_OWORD *)(v6 + 16) = v9;
  result = v8;
  *(__n128 *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 48) = v2;
  *(_QWORD *)(v6 + 56) = v3;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 72) = v5;
  return result;
}

uint64_t (*Handwriting.drawing.modify())(_QWORD)
{
  type metadata accessor for Handwriting();
  return nullsub_1;
}

uint64_t sub_1AD3DC090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD291180, (uint64_t (*)(void))sub_1AD2911C4);
}

uint64_t sub_1AD3DC0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD29124C, (uint64_t (*)(void))sub_1AD291290);
}

uint64_t sub_1AD3DC0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2886E4, (uint64_t (*)(void))sub_1AD288728);
}

uint64_t sub_1AD3DC0CC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3DC118(&qword_1EECD72A8, (uint64_t)&protocol conformance descriptor for Handwriting);
  result = sub_1AD3DC118(&qword_1EECD7280, (uint64_t)&protocol conformance descriptor for Handwriting);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3DC118(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Handwriting();
    result = MEMORY[0x1AF44BDF0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Handwriting(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AD63B084();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1AD63B03C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    v16 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v16;
    v17 = *((_QWORD *)v14 + 8);
    v18 = *((_QWORD *)v14 + 9);
    *((_QWORD *)v13 + 8) = v17;
    *((_QWORD *)v13 + 9) = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Handwriting(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1AD63B03C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Handwriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1AD63B03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  v15 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v15;
  v16 = *(_QWORD *)(v13 + 64);
  v17 = *(_QWORD *)(v13 + 72);
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 72) = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Handwriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1AD63B03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  v12[4] = v13[4];
  v12[5] = v13[5];
  v12[6] = v13[6];
  v12[7] = v13[7];
  v12[8] = v13[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[9] = v13[9];
  return a1;
}

uint64_t initializeWithTake for Handwriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1AD63B03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = v13[3];
  v12[2] = v13[2];
  v12[3] = v14;
  v12[4] = v13[4];
  v15 = v13[1];
  *v12 = *v13;
  v12[1] = v15;
  return a1;
}

uint64_t assignWithTake for Handwriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v6 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1AD63B03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  v15 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v15;
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 72) = *(_QWORD *)(v13 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Handwriting()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3DC5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1AD63B084();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1AD63B03C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 64);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for Handwriting()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3DC664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1AD63B084();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1AD63B03C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 64) = (a2 - 1);
  return result;
}

uint64_t sub_1AD3DC70C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1AD63B084();
  if (v1 <= 0x3F)
  {
    result = sub_1AD63B03C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Handwriting.DrawingStrokePoint()
{
  return &type metadata for Handwriting.DrawingStrokePoint;
}

ValueMetadata *type metadata accessor for Handwriting.DrawingStroke()
{
  return &type metadata for Handwriting.DrawingStroke;
}

uint64_t destroy for Handwriting.Drawing()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Handwriting.Drawing(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Handwriting.Drawing(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  return a1;
}

uint64_t assignWithTake for Handwriting.Drawing(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Handwriting.Drawing(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Handwriting.Drawing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Handwriting.Drawing()
{
  return &type metadata for Handwriting.Drawing;
}

uint64_t sub_1AD3DC980()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double sub_1AD3DC988()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1AD3DC990()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1AD3DC998(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*sub_1AD3DC9A0())()
{
  return nullsub_1;
}

unint64_t sub_1AD3DC9B0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C616373;
  if (*v0 != 1)
    v1 = 0x746E756F4378616DLL;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1AD3DCA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD3DEF10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD3DCA30()
{
  sub_1AD3DCBDC();
  return sub_1AD63C560();
}

uint64_t sub_1AD3DCA58()
{
  sub_1AD3DCBDC();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3DCA80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBEA8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3DCBDC();
  sub_1AD63C53C();
  v12 = 0;
  sub_1AD63C050();
  if (!v2)
  {
    v11 = 1;
    sub_1AD63C038();
    v10 = 2;
    sub_1AD63C050();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1AD3DCBDC()
{
  unint64_t result;

  result = qword_1EECDBEB0;
  if (!qword_1EECDBEB0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6808AC, &type metadata for AnimatedImageFrame.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBEB0);
  }
  return result;
}

uint64_t sub_1AD3DCC20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBEB8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3DCBDC();
  sub_1AD63C524();
  if (!v2)
  {
    v14[15] = 0;
    v9 = sub_1AD63BF3C();
    v14[14] = 1;
    sub_1AD63BF24();
    v12 = v11;
    v14[13] = 2;
    v13 = sub_1AD63BF3C();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v12;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AD3DCDA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD3DCC20(a1, a2);
}

uint64_t sub_1AD3DCDB8(_QWORD *a1)
{
  return sub_1AD3DCA80(a1);
}

uint64_t sub_1AD3DCDCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(v1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v4;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1AD3DCE58(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];
  uint64_t v12;

  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v11);
  sub_1AD009758(v1, &qword_1ED2E2680);
  v3 = v11[13];
  *(_OWORD *)(v1 + 192) = v11[12];
  *(_OWORD *)(v1 + 208) = v3;
  *(_OWORD *)(v1 + 224) = v11[14];
  *(_QWORD *)(v1 + 240) = v12;
  v4 = v11[9];
  *(_OWORD *)(v1 + 128) = v11[8];
  *(_OWORD *)(v1 + 144) = v4;
  v5 = v11[11];
  *(_OWORD *)(v1 + 160) = v11[10];
  *(_OWORD *)(v1 + 176) = v5;
  v6 = v11[5];
  *(_OWORD *)(v1 + 64) = v11[4];
  *(_OWORD *)(v1 + 80) = v6;
  v7 = v11[7];
  *(_OWORD *)(v1 + 96) = v11[6];
  *(_OWORD *)(v1 + 112) = v7;
  v8 = v11[1];
  *(_OWORD *)v1 = v11[0];
  *(_OWORD *)(v1 + 16) = v8;
  v9 = v11[3];
  *(_OWORD *)(v1 + 32) = v11[2];
  *(_OWORD *)(v1 + 48) = v9;
  return sub_1AD046A30(a1);
}

uint64_t sub_1AD3DCEE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v4 = (char *)malloc(0x1F8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 62) = v2;
  result = sub_1ACFF64C0(v2, (uint64_t)(v4 + 248), &qword_1ED2E2680);
  if (*((_QWORD *)v4 + 34))
  {
    v6 = *(_OWORD *)(v4 + 456);
    *((_OWORD *)v4 + 12) = *(_OWORD *)(v4 + 440);
    *((_OWORD *)v4 + 13) = v6;
    *((_OWORD *)v4 + 14) = *(_OWORD *)(v4 + 472);
    *((_QWORD *)v4 + 30) = *((_QWORD *)v4 + 61);
    v7 = *(_OWORD *)(v4 + 392);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v4 + 376);
    *((_OWORD *)v4 + 9) = v7;
    v8 = *(_OWORD *)(v4 + 424);
    *((_OWORD *)v4 + 10) = *(_OWORD *)(v4 + 408);
    *((_OWORD *)v4 + 11) = v8;
    v9 = *(_OWORD *)(v4 + 328);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v4 + 312);
    *((_OWORD *)v4 + 5) = v9;
    v10 = *(_OWORD *)(v4 + 360);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v4 + 344);
    *((_OWORD *)v4 + 7) = v10;
    v11 = *(_OWORD *)(v4 + 264);
    *(_OWORD *)v4 = *(_OWORD *)(v4 + 248);
    *((_OWORD *)v4 + 1) = v11;
    v12 = *(_OWORD *)(v4 + 296);
    result = (uint64_t)sub_1AD146614;
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 + 280);
    *((_OWORD *)v4 + 3) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3DCF98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3DCFBC(uint64_t a1)
{
  void *v1;
  _BYTE __src[440];

  sub_1ACFF64C0(a1, (uint64_t)__src, &qword_1ED2E2FE8);
  sub_1AD009758((uint64_t)v1, &qword_1ED2E2FE8);
  memcpy(v1, __src, 0x1B8uLL);
  return sub_1AD009758(a1, &qword_1ED2E2FE8);
}

void (*sub_1AD3DD024(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x530uLL);
  *a1 = v3;
  v3[165] = v1;
  sub_1ACFF64C0(v1, (uint64_t)v3, &qword_1ED2E2FE8);
  return sub_1AD146874;
}

uint64_t sub_1AD3DD07C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 440);
}

uint64_t sub_1AD3DD08C(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 440) = result;
  *(_BYTE *)(v2 + 448) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3DD09C())()
{
  return nullsub_1;
}

void sub_1AD3DD0AC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 449);
}

_BYTE *sub_1AD3DD0B8(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 449) = *result;
  return result;
}

uint64_t (*sub_1AD3DD0C4())()
{
  return nullsub_1;
}

uint64_t sub_1AD3DD0D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 456);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3DD100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 456) = a1;
  *(_QWORD *)(v2 + 464) = a2;
  return result;
}

uint64_t (*sub_1AD3DD134())()
{
  return nullsub_1;
}

uint64_t sub_1AD3DD144()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD3DD170 + 4 * byte_1AD6805A0[*v0]))(0x6567616D69, 0xE500000000000000);
}

uint64_t sub_1AD3DD170()
{
  return 0x727544656D617266;
}

uint64_t sub_1AD3DD194()
{
  return 0x4572656B63697473;
}

uint64_t sub_1AD3DD1B8()
{
  return 0x7453657079547475;
}

uint64_t sub_1AD3DD1D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD3DF058(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD3DD1FC()
{
  sub_1AD3DD3FC();
  return sub_1AD63C560();
}

uint64_t sub_1AD3DD224()
{
  sub_1AD3DD3FC();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3DD24C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBEC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3DD3FC();
  sub_1AD63C53C();
  v10[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
  sub_1AD14794C(&qword_1ED2DACF0, (uint64_t)&unk_1AD67ACF4);
  sub_1AD63C068();
  if (!v2)
  {
    v10[14] = 1;
    sub_1AD63BFF0();
    v10[13] = *(_BYTE *)(v3 + 449);
    v10[12] = 2;
    sub_1AD13F29C();
    sub_1AD63C068();
    v10[11] = 3;
    sub_1AD63BFD8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD3DD3FC()
{
  unint64_t result;

  result = qword_1EECDBEC8;
  if (!qword_1EECDBEC8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68085C, &type metadata for AnimatedImageFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBEC8);
  }
  return result;
}

_QWORD *sub_1AD3DD440@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19[440];
  _QWORD v20[31];
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[13];
  _QWORD *v28;

  v15 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDBED0);
  v3 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v27[0]) = 0;
  sub_1AD00FD58(v27);
  sub_1AD00E830(v27, (uint64_t)&v21);
  v22 = 0;
  v23 = 1;
  memset(v20, 0, sizeof(v20));
  v25 = 0;
  v26 = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3DD3FC();
  v16 = v5;
  v6 = (uint64_t)v28;
  sub_1AD63C524();
  if (v6)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1AD009758((uint64_t)v20, &qword_1ED2E2FE8);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v28 = a1;
    v7 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
    v18 = 0;
    sub_1AD14794C(&qword_1ED2E26B0, (uint64_t)&unk_1AD67ACCC);
    v8 = v16;
    sub_1AD63BF54();
    sub_1AD147990((uint64_t)v19, (uint64_t)v20);
    v19[0] = 1;
    v22 = sub_1AD63BEDC();
    v23 = v9 & 1;
    v18 = 2;
    sub_1AD13F258();
    sub_1AD63BF54();
    v24 = v19[0];
    v19[0] = 3;
    v10 = sub_1AD63BEC4();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v8, v17);
    swift_bridgeObjectRelease();
    v25 = v10;
    v26 = v12;
    sub_1AD3DD6F0((uint64_t)v20, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    return sub_1AD3DD724(v20);
  }
}

uint64_t sub_1AD3DD6F0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnimatedImageFrame(a2, a1);
  return a2;
}

_QWORD *sub_1AD3DD724(_QWORD *a1)
{
  destroy for AnimatedImageFrame(a1);
  return a1;
}

_QWORD *sub_1AD3DD750@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD3DD440(a1, a2);
}

uint64_t sub_1AD3DD764(_QWORD *a1)
{
  return sub_1AD3DD24C(a1);
}

_QWORD *sub_1AD3DD778@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[15];
  uint64_t v23;
  _QWORD v24[31];
  __int128 v25[12];

  v13 = *a4;
  LOWORD(v25[0]) = 0;
  sub_1AD00FD58(v25);
  sub_1AD00E830(v25, a7 + 248);
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 144) = 0u;
  *(_OWORD *)(a7 + 160) = 0u;
  *(_OWORD *)(a7 + 176) = 0u;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 208) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_QWORD *)(a7 + 240) = 0;
  *(_QWORD *)(a7 + 440) = a2;
  *(_BYTE *)(a7 + 448) = a3 & 1;
  *(_QWORD *)(a7 + 456) = a5;
  *(_QWORD *)(a7 + 464) = a6;
  *(_BYTE *)(a7 + 449) = v13;
  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v24);
  sub_1AD0CFB8C((uint64_t)v24, (uint64_t)v22);
  sub_1AD009758(a7, &qword_1ED2E2680);
  v14 = v22[13];
  *(_OWORD *)(a7 + 192) = v22[12];
  *(_OWORD *)(a7 + 208) = v14;
  *(_OWORD *)(a7 + 224) = v22[14];
  *(_QWORD *)(a7 + 240) = v23;
  v15 = v22[9];
  *(_OWORD *)(a7 + 128) = v22[8];
  *(_OWORD *)(a7 + 144) = v15;
  v16 = v22[11];
  *(_OWORD *)(a7 + 160) = v22[10];
  *(_OWORD *)(a7 + 176) = v16;
  v17 = v22[5];
  *(_OWORD *)(a7 + 64) = v22[4];
  *(_OWORD *)(a7 + 80) = v17;
  v18 = v22[7];
  *(_OWORD *)(a7 + 96) = v22[6];
  *(_OWORD *)(a7 + 112) = v18;
  v19 = v22[1];
  *(_OWORD *)a7 = v22[0];
  *(_OWORD *)(a7 + 16) = v19;
  v20 = v22[3];
  *(_OWORD *)(a7 + 32) = v22[2];
  *(_OWORD *)(a7 + 48) = v20;
  sub_1AD046A30(v24);
  return sub_1AD046A30(a1);
}

uint64_t sub_1AD3DD8A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

unint64_t sub_1AD3DD8B4()
{
  unint64_t result;

  result = qword_1EECDBED8;
  if (!qword_1EECDBED8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6805B8, &type metadata for AnimatedImageFrame.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDBED8);
  }
  return result;
}

unint64_t sub_1AD3DD8FC()
{
  unint64_t result;

  result = qword_1EECDBEE0;
  if (!qword_1EECDBEE0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6805E0, &type metadata for AnimatedImageFrame.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDBEE0);
  }
  return result;
}

unint64_t sub_1AD3DD940(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3DD964();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3DD964()
{
  unint64_t result;

  result = qword_1EECDBEE8;
  if (!qword_1EECDBEE8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680634, &type metadata for AnimatedImageFrame);
    atomic_store(result, (unint64_t *)&qword_1EECDBEE8);
  }
  return result;
}

unint64_t sub_1AD3DD9A8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3DD9D4();
  result = sub_1AD3DDA18();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD3DD9D4()
{
  unint64_t result;

  result = qword_1EECDBEF0;
  if (!qword_1EECDBEF0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680650, &type metadata for AnimatedImageFrame);
    atomic_store(result, (unint64_t *)&qword_1EECDBEF0);
  }
  return result;
}

unint64_t sub_1AD3DDA18()
{
  unint64_t result;

  result = qword_1EECDBEF8;
  if (!qword_1EECDBEF8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680678, &type metadata for AnimatedImageFrame);
    atomic_store(result, (unint64_t *)&qword_1EECDBEF8);
  }
  return result;
}

uint64_t sub_1AD3DDA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(a1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v4;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3DDB04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1, a2, &qword_1ED2E2FE8);
}

uint64_t destroy for AnimatedImageFrame(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (a1[3])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v2 = a1[10];
    v3 = a1[12];
    v4 = a1[14];
    v5 = a1[16];
    v6 = a1[20];
    v7 = a1[22];
    v8 = a1[24];
    if (v2 >> 1 != 0xFFFFFFFF
      || (v4 | (unint64_t)v3) > 1
      || (v6 & 0xFFFFFFFFFFFFFEFELL | v5 & 0xFFFFFFFFFFFF00FELL) != 0
      || (v8 | v7) >= 2)
    {
      sub_1AD00E8B0(a1[7], a1[8], a1[9], v2, a1[11], v3, a1[13], v4, a1[15], v5, a1[17], a1[18], a1[19], v6, a1[21], v7, a1[23], v8, a1[25],
        a1[26],
        a1[27],
        a1[28],
        a1[29],
        a1[30]);
    }
  }
  v12 = a1[31];
  v13 = a1[32];
  v14 = a1 + 31;
  sub_1AD00E8B0(v12, v13, v14[2], v14[3], v14[4], v14[5], v14[6], v14[7], v14[8], v14[9], v14[10], v14[11], v14[12], v14[13], v14[14], v14[15], v14[16], v14[17], v14[18],
    v14[19],
    v14[20],
    v14[21],
    v14[22],
    v14[23]);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnimatedImageFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 112);
    v9 = *(_QWORD *)(a2 + 192);
    if (v6 >> 1 != 0xFFFFFFFF
      || (v8 | (unint64_t)v7) > 1
      || *(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a2 + 128) & 0xFFFFFFFFFFFF00FELL
      || (v9 | *(_QWORD *)(a2 + 176)) >= 2)
    {
      v23 = *(_QWORD *)(a2 + 64);
      v24 = *(_QWORD *)(a2 + 88);
      v40 = *(_QWORD *)(a2 + 120);
      v44 = *(_QWORD *)(a2 + 136);
      v50 = *(_QWORD *)(a2 + 144);
      v52 = *(_QWORD *)(a2 + 152);
      v54 = *(_QWORD *)(a2 + 168);
      v56 = *(_QWORD *)(a2 + 184);
      v58 = *(_QWORD *)(a2 + 200);
      v60 = *(_QWORD *)(a2 + 208);
      v62 = *(_QWORD *)(a2 + 216);
      v64 = *(_QWORD *)(a2 + 224);
      v66 = *(_QWORD *)(a2 + 232);
      v68 = *(_QWORD *)(a2 + 240);
      v46 = *(_QWORD *)(a2 + 160);
      v48 = *(_QWORD *)(a2 + 176);
      v25 = *(_QWORD *)(a2 + 56);
      v38 = *(_QWORD *)(a2 + 128);
      v26 = *(_QWORD *)(a2 + 72);
      v42 = *(_QWORD *)(a2 + 192);
      v27 = *(_QWORD *)(a2 + 104);
      sub_1AD00FEAC(v25, v23, v26, v6, v24, v7, v27, v8, v40, v38, v44, v50, v52, v46, v54, v48, v56, v9, v58,
        v60,
        v62,
        v64,
        v66,
        v68);
      *(_QWORD *)(a1 + 56) = v25;
      *(_QWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 72) = v26;
      *(_QWORD *)(a1 + 80) = v6;
      *(_QWORD *)(a1 + 88) = v24;
      *(_QWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a1 + 104) = v27;
      *(_QWORD *)(a1 + 112) = v8;
      *(_QWORD *)(a1 + 120) = v40;
      *(_QWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 136) = v44;
      *(_QWORD *)(a1 + 144) = v50;
      *(_QWORD *)(a1 + 152) = v52;
      *(_QWORD *)(a1 + 160) = v46;
      *(_QWORD *)(a1 + 168) = v54;
      *(_QWORD *)(a1 + 176) = v48;
      *(_QWORD *)(a1 + 184) = v56;
      *(_QWORD *)(a1 + 192) = v42;
      *(_QWORD *)(a1 + 200) = v58;
      *(_QWORD *)(a1 + 208) = v60;
      *(_QWORD *)(a1 + 216) = v62;
      *(_QWORD *)(a1 + 224) = v64;
      *(_QWORD *)(a1 + 232) = v66;
      *(_QWORD *)(a1 + 240) = v68;
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v10;
      v11 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v11;
      v12 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v12;
      v13 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v13;
      v14 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v14;
      v15 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v15;
    }
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v16;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v18;
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v20;
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v22;
  }
  v28 = *(_QWORD *)(a2 + 288);
  v29 = *(_QWORD *)(a2 + 296);
  v39 = *(_QWORD *)(a2 + 312);
  v41 = *(_QWORD *)(a2 + 320);
  v43 = *(_QWORD *)(a2 + 328);
  v45 = *(_QWORD *)(a2 + 336);
  v47 = *(_QWORD *)(a2 + 344);
  v49 = *(_QWORD *)(a2 + 352);
  v51 = *(_QWORD *)(a2 + 360);
  v53 = *(_QWORD *)(a2 + 368);
  v55 = *(_QWORD *)(a2 + 376);
  v57 = *(_QWORD *)(a2 + 384);
  v59 = *(_QWORD *)(a2 + 392);
  v61 = *(_QWORD *)(a2 + 400);
  v63 = *(_QWORD *)(a2 + 408);
  v65 = *(_QWORD *)(a2 + 416);
  v67 = *(_QWORD *)(a2 + 424);
  v69 = *(_QWORD *)(a2 + 432);
  v30 = *(_QWORD *)(a2 + 248);
  v31 = *(_QWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 264);
  v33 = *(_QWORD *)(a2 + 272);
  v34 = *(_QWORD *)(a2 + 280);
  v35 = *(_QWORD *)(a2 + 304);
  sub_1AD00FEAC(v30, v31, v32, v33, v34, v28, v29, v35, v39, v41, v43, v45, v47, v49, v51, v53, v55, v57, v59,
    v61,
    v63,
    v65,
    v67,
    v69);
  *(_QWORD *)(a1 + 248) = v30;
  *(_QWORD *)(a1 + 256) = v31;
  *(_QWORD *)(a1 + 264) = v32;
  *(_QWORD *)(a1 + 272) = v33;
  *(_QWORD *)(a1 + 280) = v34;
  *(_QWORD *)(a1 + 288) = v28;
  *(_QWORD *)(a1 + 296) = v29;
  *(_QWORD *)(a1 + 304) = v35;
  *(_QWORD *)(a1 + 312) = v39;
  *(_QWORD *)(a1 + 320) = v41;
  *(_QWORD *)(a1 + 328) = v43;
  *(_QWORD *)(a1 + 336) = v45;
  *(_QWORD *)(a1 + 344) = v47;
  *(_QWORD *)(a1 + 352) = v49;
  *(_QWORD *)(a1 + 360) = v51;
  *(_QWORD *)(a1 + 368) = v53;
  *(_QWORD *)(a1 + 376) = v55;
  *(_QWORD *)(a1 + 384) = v57;
  *(_QWORD *)(a1 + 392) = v59;
  *(_QWORD *)(a1 + 400) = v61;
  *(_QWORD *)(a1 + 408) = v63;
  *(_QWORD *)(a1 + 416) = v65;
  *(_QWORD *)(a1 + 424) = v67;
  *(_QWORD *)(a1 + 432) = v69;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  v36 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v36;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnimatedImageFrame(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (!v4)
    {
      v63 = *a2;
      v64 = a2[1];
      v65 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v65;
      *(_OWORD *)a1 = v63;
      *(_OWORD *)(a1 + 16) = v64;
      v66 = a2[4];
      v67 = a2[5];
      v68 = a2[7];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v68;
      *(_OWORD *)(a1 + 64) = v66;
      *(_OWORD *)(a1 + 80) = v67;
      v69 = a2[8];
      v70 = a2[9];
      v71 = a2[11];
      *(_OWORD *)(a1 + 160) = a2[10];
      *(_OWORD *)(a1 + 176) = v71;
      *(_OWORD *)(a1 + 128) = v69;
      *(_OWORD *)(a1 + 144) = v70;
      v72 = a2[12];
      v73 = a2[13];
      v74 = a2[14];
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      *(_OWORD *)(a1 + 208) = v73;
      *(_OWORD *)(a1 + 224) = v74;
      *(_OWORD *)(a1 + 192) = v72;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    v28 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 40) = v28;
    v29 = *((_QWORD *)a2 + 10);
    v30 = *((_QWORD *)a2 + 12);
    v31 = *((_QWORD *)a2 + 14);
    v32 = *((_QWORD *)a2 + 22);
    if (v29 >> 1 == 0xFFFFFFFF
      && (v31 | (unint64_t)v30) <= 1
      && !(a2[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)a2[8] & 0xFFFFFFFFFFFF00FELL)
      && (*((_QWORD *)a2 + 24) | (unint64_t)v32) < 2)
    {
      v33 = *(__int128 *)((char *)a2 + 56);
      v34 = *(__int128 *)((char *)a2 + 72);
      v35 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = v35;
      *(_OWORD *)(a1 + 56) = v33;
      *(_OWORD *)(a1 + 72) = v34;
      v36 = *(__int128 *)((char *)a2 + 120);
      v37 = *(__int128 *)((char *)a2 + 136);
      v38 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = v38;
      *(_OWORD *)(a1 + 120) = v36;
      *(_OWORD *)(a1 + 136) = v37;
      v39 = *(__int128 *)((char *)a2 + 184);
      v40 = *(__int128 *)((char *)a2 + 200);
      v41 = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = v41;
      *(_OWORD *)(a1 + 184) = v39;
      *(_OWORD *)(a1 + 200) = v40;
      goto LABEL_35;
    }
    v75 = *((_QWORD *)a2 + 7);
    v76 = *((_QWORD *)a2 + 11);
    v133 = *((_QWORD *)a2 + 15);
    v145 = *((_QWORD *)a2 + 17);
    v149 = *((_QWORD *)a2 + 18);
    v157 = *((_QWORD *)a2 + 19);
    v161 = *((_QWORD *)a2 + 21);
    v165 = *((_QWORD *)a2 + 23);
    v169 = *((_QWORD *)a2 + 25);
    v173 = *((_QWORD *)a2 + 26);
    v177 = *((_QWORD *)a2 + 27);
    v181 = *((_QWORD *)a2 + 28);
    v185 = *((_QWORD *)a2 + 29);
    v189 = *((_QWORD *)a2 + 30);
    v141 = *((_QWORD *)a2 + 20);
    v77 = *((_QWORD *)a2 + 8);
    v153 = *((_QWORD *)a2 + 24);
    v129 = *((_QWORD *)a2 + 16);
    v78 = *((_QWORD *)a2 + 9);
    v137 = *((_QWORD *)a2 + 22);
    v79 = *((_QWORD *)a2 + 13);
    sub_1AD00FEAC(v75, v77, v78, v29, v76, v30, v79, v31, v133, v129, v145, v149, v157, v141, v161, v32, v165, v153, v169,
      v173,
      v177,
      v181,
      v185,
      v189);
    *(_QWORD *)(a1 + 56) = v75;
    *(_QWORD *)(a1 + 64) = v77;
    *(_QWORD *)(a1 + 72) = v78;
    *(_QWORD *)(a1 + 80) = v29;
    *(_QWORD *)(a1 + 88) = v76;
    *(_QWORD *)(a1 + 96) = v30;
    *(_QWORD *)(a1 + 104) = v79;
    *(_QWORD *)(a1 + 112) = v31;
    *(_QWORD *)(a1 + 120) = v133;
    *(_QWORD *)(a1 + 128) = v129;
    *(_QWORD *)(a1 + 136) = v145;
    *(_QWORD *)(a1 + 144) = v149;
    *(_QWORD *)(a1 + 152) = v157;
    *(_QWORD *)(a1 + 160) = v141;
    *(_QWORD *)(a1 + 168) = v161;
    *(_QWORD *)(a1 + 176) = v137;
    *(_QWORD *)(a1 + 184) = v165;
    *(_QWORD *)(a1 + 192) = v153;
    *(_QWORD *)(a1 + 200) = v169;
    *(_QWORD *)(a1 + 208) = v173;
    *(_QWORD *)(a1 + 216) = v177;
    *(_QWORD *)(a1 + 224) = v181;
    *(_QWORD *)(a1 + 232) = v185;
    v80 = v189;
    goto LABEL_34;
  }
  if (!v4)
  {
    sub_1AD046A30((_QWORD *)a1);
    v42 = a2[3];
    v44 = *a2;
    v43 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v42;
    *(_OWORD *)a1 = v44;
    *(_OWORD *)(a1 + 16) = v43;
    v45 = a2[7];
    v47 = a2[4];
    v46 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v45;
    *(_OWORD *)(a1 + 64) = v47;
    *(_OWORD *)(a1 + 80) = v46;
    v48 = a2[11];
    v50 = a2[8];
    v49 = a2[9];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v48;
    *(_OWORD *)(a1 + 128) = v50;
    *(_OWORD *)(a1 + 144) = v49;
    v52 = a2[13];
    v51 = a2[14];
    v53 = a2[12];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(_OWORD *)(a1 + 208) = v52;
    *(_OWORD *)(a1 + 224) = v51;
    *(_OWORD *)(a1 + 192) = v53;
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v5 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = (_OWORD *)(a1 + 56);
  v7 = (__int128 *)((char *)a2 + 56);
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 12);
  v10 = *((_QWORD *)a2 + 14);
  v11 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 22);
  v14 = *((_QWORD *)a2 + 24);
  v18 = v8 >> 1 == 0xFFFFFFFF
     && (v10 | (unint64_t)v9) < 2
     && (v12 & 0xFFFFFFFFFFFFFEFELL | v11 & 0xFFFFFFFFFFFF00FELL) == 0
     && (v14 | v13) < 2;
  if (*(_QWORD *)(a1 + 80) >> 1 == 0xFFFFFFFFLL
    && (*(_QWORD *)(a1 + 112) | *(_QWORD *)(a1 + 96)) <= 1
    && !(*(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a1 + 128) & 0xFFFFFFFFFFFF00FELL)
    && (*(_QWORD *)(a1 + 192) | *(_QWORD *)(a1 + 176)) < 2)
  {
    if (v18)
    {
      v19 = *v7;
      v20 = *(__int128 *)((char *)a2 + 72);
      v21 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = v21;
      *v6 = v19;
      *(_OWORD *)(a1 + 72) = v20;
      v22 = *(__int128 *)((char *)a2 + 120);
      v23 = *(__int128 *)((char *)a2 + 136);
      v24 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = v24;
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 136) = v23;
      v25 = *(__int128 *)((char *)a2 + 184);
      v26 = *(__int128 *)((char *)a2 + 200);
      v27 = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = v27;
      *(_OWORD *)(a1 + 184) = v25;
      *(_OWORD *)(a1 + 200) = v26;
      goto LABEL_35;
    }
    v135 = *((_QWORD *)a2 + 8);
    v139 = *((_QWORD *)a2 + 7);
    v131 = *((_QWORD *)a2 + 9);
    v100 = *((_QWORD *)a2 + 11);
    v101 = *((_QWORD *)a2 + 13);
    v143 = *((_QWORD *)a2 + 15);
    v147 = *((_QWORD *)a2 + 17);
    v151 = *((_QWORD *)a2 + 18);
    v155 = *((_QWORD *)a2 + 19);
    v159 = *((_QWORD *)a2 + 21);
    v163 = *((_QWORD *)a2 + 23);
    v167 = *((_QWORD *)a2 + 25);
    v171 = *((_QWORD *)a2 + 26);
    v175 = *((_QWORD *)a2 + 27);
    v179 = *((_QWORD *)a2 + 28);
    v183 = *((_QWORD *)a2 + 29);
    v187 = *((_QWORD *)a2 + 30);
    v191 = *((_QWORD *)a2 + 24);
    sub_1AD00FEAC(v139, v135, v131, v8, v100, v9, v101, v10, v143, v11, v147, v151, v155, v12, v159, v13, v163, v14, v167,
      v171,
      v175,
      v179,
      v183,
      v187);
    *(_QWORD *)(a1 + 56) = v139;
    *(_QWORD *)(a1 + 64) = v135;
    *(_QWORD *)(a1 + 72) = v131;
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v100;
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v101;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v143;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v147;
    *(_QWORD *)(a1 + 144) = v151;
    *(_QWORD *)(a1 + 152) = v155;
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 168) = v159;
    *(_QWORD *)(a1 + 176) = v13;
    *(_QWORD *)(a1 + 184) = v163;
    *(_QWORD *)(a1 + 192) = v191;
    *(_QWORD *)(a1 + 200) = v167;
    *(_QWORD *)(a1 + 208) = v171;
    *(_QWORD *)(a1 + 216) = v175;
    *(_QWORD *)(a1 + 224) = v179;
    *(_QWORD *)(a1 + 232) = v183;
    v80 = v187;
LABEL_34:
    *(_QWORD *)(a1 + 240) = v80;
    goto LABEL_35;
  }
  if (v18)
  {
    sub_1AD148B34(a1 + 56);
    v54 = *(__int128 *)((char *)a2 + 104);
    v56 = *v7;
    v55 = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = v54;
    *v6 = v56;
    *(_OWORD *)(a1 + 72) = v55;
    v57 = *(__int128 *)((char *)a2 + 168);
    v59 = *(__int128 *)((char *)a2 + 120);
    v58 = *(__int128 *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
    *(_OWORD *)(a1 + 168) = v57;
    *(_OWORD *)(a1 + 120) = v59;
    *(_OWORD *)(a1 + 136) = v58;
    v60 = *(__int128 *)((char *)a2 + 232);
    v62 = *(__int128 *)((char *)a2 + 184);
    v61 = *(__int128 *)((char *)a2 + 200);
    *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
    *(_OWORD *)(a1 + 232) = v60;
    *(_OWORD *)(a1 + 184) = v62;
    *(_OWORD *)(a1 + 200) = v61;
  }
  else
  {
    v134 = *((_QWORD *)a2 + 8);
    v138 = *((_QWORD *)a2 + 7);
    v130 = *((_QWORD *)a2 + 9);
    v81 = *((_QWORD *)a2 + 11);
    v82 = *((_QWORD *)a2 + 13);
    v142 = *((_QWORD *)a2 + 15);
    v146 = *((_QWORD *)a2 + 17);
    v150 = *((_QWORD *)a2 + 18);
    v154 = *((_QWORD *)a2 + 19);
    v158 = *((_QWORD *)a2 + 21);
    v162 = *((_QWORD *)a2 + 23);
    v166 = *((_QWORD *)a2 + 25);
    v170 = *((_QWORD *)a2 + 26);
    v174 = *((_QWORD *)a2 + 27);
    v178 = *((_QWORD *)a2 + 28);
    v182 = *((_QWORD *)a2 + 29);
    v186 = *((_QWORD *)a2 + 30);
    v190 = *((_QWORD *)a2 + 24);
    sub_1AD00FEAC(v138, v134, v130, v8, v81, v9, v82, v10, v142, v11, v146, v150, v154, v12, v158, v13, v162, v14, v166,
      v170,
      v174,
      v178,
      v182,
      v186);
    v83 = *(_QWORD *)(a1 + 56);
    v84 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v138;
    *(_QWORD *)(a1 + 64) = v134;
    v85 = *(_QWORD *)(a1 + 72);
    v86 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = v130;
    *(_QWORD *)(a1 + 80) = v8;
    v87 = *(_QWORD *)(a1 + 88);
    v88 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v81;
    *(_QWORD *)(a1 + 96) = v9;
    v89 = *(_QWORD *)(a1 + 104);
    v90 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v82;
    *(_QWORD *)(a1 + 112) = v10;
    v91 = *(_OWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v142;
    *(_QWORD *)(a1 + 128) = v11;
    v92 = *(_OWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v146;
    *(_QWORD *)(a1 + 144) = v150;
    v93 = *(_OWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v154;
    *(_QWORD *)(a1 + 160) = v12;
    v94 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v158;
    *(_QWORD *)(a1 + 176) = v13;
    v95 = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v162;
    *(_QWORD *)(a1 + 192) = v190;
    v96 = *(_OWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v166;
    *(_QWORD *)(a1 + 208) = v170;
    v97 = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v174;
    *(_QWORD *)(a1 + 224) = v178;
    v98 = *(_QWORD *)(a1 + 232);
    v99 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = v182;
    *(_QWORD *)(a1 + 240) = v186;
    sub_1AD00E8B0(v83, v84, v85, v86, v87, v88, v89, v90, v91, *((uint64_t *)&v91 + 1), v92, *((uint64_t *)&v92 + 1), v93, *((uint64_t *)&v93 + 1), v94, *((uint64_t *)&v94 + 1), v95, *((unint64_t *)&v95 + 1), v96,
      *((uint64_t *)&v96 + 1),
      v97,
      *((uint64_t *)&v97 + 1),
      v98,
      v99);
  }
LABEL_35:
  v102 = *((_QWORD *)a2 + 36);
  v103 = *((_QWORD *)a2 + 37);
  v132 = *((_QWORD *)a2 + 39);
  v136 = *((_QWORD *)a2 + 40);
  v140 = *((_QWORD *)a2 + 41);
  v144 = *((_QWORD *)a2 + 42);
  v148 = *((_QWORD *)a2 + 43);
  v152 = *((_QWORD *)a2 + 44);
  v156 = *((_QWORD *)a2 + 45);
  v160 = *((_QWORD *)a2 + 46);
  v164 = *((_QWORD *)a2 + 47);
  v168 = *((_QWORD *)a2 + 48);
  v172 = *((_QWORD *)a2 + 49);
  v176 = *((_QWORD *)a2 + 50);
  v180 = *((_QWORD *)a2 + 51);
  v184 = *((_QWORD *)a2 + 52);
  v188 = *((_QWORD *)a2 + 53);
  v192 = *((_QWORD *)a2 + 54);
  v104 = *((_QWORD *)a2 + 31);
  v105 = *((_QWORD *)a2 + 32);
  v106 = *((_QWORD *)a2 + 33);
  v107 = *((_QWORD *)a2 + 34);
  v108 = *((_QWORD *)a2 + 35);
  v109 = *((_QWORD *)a2 + 38);
  sub_1AD00FEAC(v104, v105, v106, v107, v108, v102, v103, v109, v132, v136, v140, v144, v148, v152, v156, v160, v164, v168, v172,
    v176,
    v180,
    v184,
    v188,
    v192);
  v110 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v104;
  v111 = *(_QWORD *)(a1 + 256);
  v112 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v105;
  *(_QWORD *)(a1 + 264) = v106;
  v113 = *(_QWORD *)(a1 + 272);
  v114 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v107;
  *(_QWORD *)(a1 + 280) = v108;
  v115 = *(_QWORD *)(a1 + 288);
  v116 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v102;
  *(_QWORD *)(a1 + 296) = v103;
  v117 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v109;
  v118 = *(_OWORD *)(a1 + 312);
  v119 = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 312) = v132;
  *(_QWORD *)(a1 + 320) = v136;
  *(_QWORD *)(a1 + 328) = v140;
  *(_QWORD *)(a1 + 336) = v144;
  v120 = *(_OWORD *)(a1 + 344);
  v121 = *(_OWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 344) = v148;
  *(_QWORD *)(a1 + 352) = v152;
  *(_QWORD *)(a1 + 360) = v156;
  *(_QWORD *)(a1 + 368) = v160;
  v122 = *(_OWORD *)(a1 + 376);
  v123 = *(_OWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 376) = v164;
  *(_QWORD *)(a1 + 384) = v168;
  *(_QWORD *)(a1 + 392) = v172;
  *(_QWORD *)(a1 + 400) = v176;
  v124 = *(_OWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v180;
  v125 = *(_QWORD *)(a1 + 424);
  v126 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 416) = v184;
  *(_QWORD *)(a1 + 424) = v188;
  *(_QWORD *)(a1 + 432) = v192;
  sub_1AD00E8B0(v110, v111, v112, v113, v114, v115, v116, v117, v118, *((uint64_t *)&v118 + 1), v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121, *((uint64_t *)&v121 + 1), v122, *((unint64_t *)&v122 + 1), v123,
    *((uint64_t *)&v123 + 1),
    v124,
    *((uint64_t *)&v124 + 1),
    v125,
    v126);
  v127 = *((_QWORD *)a2 + 55);
  *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 448);
  *(_QWORD *)(a1 + 440) = v127;
  *(_BYTE *)(a1 + 449) = *((_BYTE *)a2 + 449);
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnimatedImageFrame(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_14;
  if (!*(_QWORD *)(a2 + 24))
  {
    sub_1AD046A30((_QWORD *)a1);
LABEL_14:
    v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v28;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v29;
    v30 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v30;
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    v32 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v32;
    v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    v34 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v34;
    goto LABEL_15;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 176);
  v21 = *(_QWORD *)(a2 + 192);
  if (v8 >> 1 != 0xFFFFFFFF
    || (v10 | (unint64_t)v9) > 1
    || v12 & 0xFFFFFFFFFFFFFEFELL | v11 & 0xFFFFFFFFFFFF00FELL
    || (v14 | v13) >= 2)
  {
    if (v15 >> 1 != 0xFFFFFFFF
      || (v17 | v16) > 1
      || v19 & 0xFFFFFFFFFFFFFEFELL | v18 & 0xFFFFFFFFFFFF00FELL
      || (v21 | v20) >= 2)
    {
      v59 = *(_QWORD *)(a2 + 72);
      v60 = *(_QWORD *)(a2 + 88);
      v61 = *(_QWORD *)(a2 + 104);
      v62 = *(_QWORD *)(a2 + 120);
      v63 = *(_QWORD *)(a2 + 152);
      v64 = *(_QWORD *)(a2 + 168);
      v65 = *(_QWORD *)(a2 + 184);
      v76 = *(_QWORD *)(a1 + 64);
      v77 = *(_QWORD *)(a1 + 56);
      v75 = *(_QWORD *)(a1 + 72);
      v78 = *(_QWORD *)(a1 + 88);
      v79 = *(_QWORD *)(a1 + 104);
      v66 = *(_OWORD *)(a1 + 136);
      v73 = *(_QWORD *)(a1 + 152);
      v74 = *(_QWORD *)(a1 + 120);
      v67 = *(_QWORD *)(a1 + 168);
      v68 = *(_QWORD *)(a1 + 184);
      v69 = *(_OWORD *)(a1 + 200);
      v70 = *(_OWORD *)(a1 + 216);
      v72 = *(_QWORD *)(a1 + 232);
      v71 = *(_QWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = v59;
      *(_QWORD *)(a1 + 80) = v15;
      *(_QWORD *)(a1 + 88) = v60;
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v61;
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = v62;
      *(_QWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = v63;
      *(_QWORD *)(a1 + 160) = v19;
      *(_QWORD *)(a1 + 168) = v64;
      *(_QWORD *)(a1 + 176) = v20;
      *(_QWORD *)(a1 + 184) = v65;
      *(_QWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      sub_1AD00E8B0(v77, v76, v75, v8, v78, v9, v79, v10, v74, v11, v66, *((uint64_t *)&v66 + 1), v73, v12, v67, v13, v68, v14, v69,
        *((uint64_t *)&v69 + 1),
        v70,
        *((uint64_t *)&v70 + 1),
        v72,
        v71);
      goto LABEL_15;
    }
    sub_1AD148B34(a1 + 56);
  }
  v22 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v22;
  v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v23;
  v24 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v24;
  v25 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v25;
  v26 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v26;
  v27 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v27;
LABEL_15:
  v35 = *(_QWORD *)(a1 + 248);
  v36 = *(_QWORD *)(a1 + 256);
  v37 = *(_QWORD *)(a1 + 264);
  v38 = *(_QWORD *)(a1 + 272);
  v39 = *(_QWORD *)(a1 + 280);
  v40 = *(_QWORD *)(a1 + 288);
  v41 = *(_QWORD *)(a1 + 296);
  v42 = *(_QWORD *)(a1 + 304);
  v43 = *(_OWORD *)(a1 + 312);
  v44 = *(_OWORD *)(a1 + 328);
  v45 = *(_OWORD *)(a1 + 344);
  v46 = *(_OWORD *)(a1 + 360);
  v47 = *(_OWORD *)(a1 + 376);
  v48 = *(_OWORD *)(a1 + 392);
  v49 = *(_OWORD *)(a1 + 408);
  v50 = *(_QWORD *)(a1 + 424);
  v51 = *(_QWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v52 = v5[1];
  *v4 = *v5;
  v4[1] = v52;
  v53 = v5[3];
  v4[2] = v5[2];
  v4[3] = v53;
  v54 = v5[5];
  v4[4] = v5[4];
  v4[5] = v54;
  v55 = v5[7];
  v4[6] = v5[6];
  v4[7] = v55;
  v56 = v5[9];
  v4[8] = v5[8];
  v4[9] = v56;
  v4[10] = v5[10];
  sub_1AD00E8B0(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((unint64_t *)&v47 + 1), v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    v51);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  v57 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v57;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnimatedImageFrame()
{
  return &type metadata for AnimatedImageFrame;
}

ValueMetadata *type metadata accessor for AnimatedImageFrame.Constraints()
{
  return &type metadata for AnimatedImageFrame.Constraints;
}

uint64_t storeEnumTagSinglePayload for AnimatedImageFrame.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AD3DEC14 + 4 * byte_1AD6805A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AD3DEC48 + 4 * byte_1AD6805A4[v4]))();
}

uint64_t sub_1AD3DEC48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DEC50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3DEC58);
  return result;
}

uint64_t sub_1AD3DEC64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3DEC6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AD3DEC70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DEC78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimatedImageFrame.CodingKeys()
{
  return &type metadata for AnimatedImageFrame.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AnimatedImageFrame.Constraints.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AD3DECE0 + 4 * byte_1AD6805B3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AD3DED14 + 4 * byte_1AD6805AE[v4]))();
}

uint64_t sub_1AD3DED14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DED1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3DED24);
  return result;
}

uint64_t sub_1AD3DED30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3DED38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AD3DED3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3DED44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimatedImageFrame.Constraints.CodingKeys()
{
  return &type metadata for AnimatedImageFrame.Constraints.CodingKeys;
}

unint64_t sub_1AD3DED64()
{
  unint64_t result;

  result = qword_1EECDBF00;
  if (!qword_1EECDBF00)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68077C, &type metadata for AnimatedImageFrame.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF00);
  }
  return result;
}

unint64_t sub_1AD3DEDAC()
{
  unint64_t result;

  result = qword_1EECDBF08;
  if (!qword_1EECDBF08)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680834, &type metadata for AnimatedImageFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF08);
  }
  return result;
}

unint64_t sub_1AD3DEDF4()
{
  unint64_t result;

  result = qword_1EECDBF10;
  if (!qword_1EECDBF10)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6807A4, &type metadata for AnimatedImageFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF10);
  }
  return result;
}

unint64_t sub_1AD3DEE3C()
{
  unint64_t result;

  result = qword_1EECDBF18;
  if (!qword_1EECDBF18)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6807CC, &type metadata for AnimatedImageFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF18);
  }
  return result;
}

unint64_t sub_1AD3DEE84()
{
  unint64_t result;

  result = qword_1EECDBF20;
  if (!qword_1EECDBF20)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6806EC, &type metadata for AnimatedImageFrame.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF20);
  }
  return result;
}

unint64_t sub_1AD3DEECC()
{
  unint64_t result;

  result = qword_1EECDBF28;
  if (!qword_1EECDBF28)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680714, &type metadata for AnimatedImageFrame.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDBF28);
  }
  return result;
}

uint64_t sub_1AD3DEF10(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001AD69FE30 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E756F4378616DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1AD3DF058(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6567616D69 && a2 == 0xE500000000000000;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x727544656D617266 && a2 == 0xED00006E6F697461 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4572656B63697473 && a2 == 0xED00007463656666 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7453657079547475 && a2 == 0xEC000000676E6972)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1AD3DF268()
{
  return sub_1AD3E1188((void (*)(void))sub_1AD3DF274);
}

uint64_t sub_1AD3DF274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  char *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t result;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  _OWORD v149[2];
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1AD63AF28();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EECDB370);
  MEMORY[0x1E0C80A78](v9);
  v144 = (uint64_t)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for CloudKitSharingToken();
  v143 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v12 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
  v14 = MEMORY[0x1E0C80A78](v13);
  v141 = (uint64_t)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v146 = (uint64_t)&v136 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v142 = (uint64_t)&v136 - v19;
  MEMORY[0x1E0C80A78](v18);
  v147 = (char *)&v136 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v136 - v25;
  v27 = MEMORY[0x1E0DEE9E0];
  v153 = MEMORY[0x1E0DEE9E0];
  v28 = *(_QWORD *)(v1 + 24);
  if (v28)
  {
    if (v28 == 1)
      goto LABEL_51;
    v29 = *(_QWORD *)(v1 + 16);
    v152 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v150 = v29;
    *((_QWORD *)&v150 + 1) = v28;
    sub_1AD002F7C(&v150, v149);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v148 = v27;
    sub_1AD43F448(v149, 0x6D614E656D6F486BLL, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v136 = v8;
  v137 = v6;
  v138 = v4;
  v139 = v5;
  v140 = v12;
  v31 = (int *)type metadata accessor for IDSHomeKitInvitation(0);
  v32 = v1 + v31[5];
  sub_1ACFF64C0(v32, (uint64_t)v26, (uint64_t *)&unk_1ED2E2D98);
  v33 = sub_1AD63B03C();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v26, 1, v33);
  sub_1AD009758((uint64_t)v26, (uint64_t *)&unk_1ED2E2D98);
  if (v36 != 1)
  {
    sub_1ACFF64C0(v32, (uint64_t)v24, (uint64_t *)&unk_1ED2E2D98);
    if (v35(v24, 1, v33) == 1)
    {
      sub_1AD009758((uint64_t)v24, (uint64_t *)&unk_1ED2E2D98);
      sub_1AD43D86C(0xD000000000000018, 0x80000001AD6A91E0, &v150);
      sub_1AD009758((uint64_t)&v150, &qword_1EECDC5F0);
    }
    else
    {
      v152 = v33;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v150);
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 32))(boxed_opaque_existential_0, v24, v33);
      sub_1AD002F7C(&v150, v149);
      v38 = v153;
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v148 = v38;
      sub_1AD43F448(v149, 0xD000000000000018, 0x80000001AD6A91E0, v39);
      v153 = v148;
      swift_bridgeObjectRelease();
    }
  }
  v40 = (_QWORD *)(v1 + v31[6]);
  v41 = v40[1];
  if (v41)
  {
    v43 = v40[2];
    v42 = v40[3];
    *(_QWORD *)&v150 = *v40;
    *((_QWORD *)&v150 + 1) = v41;
    v151 = v43;
    v152 = v42;
    v44 = sub_1AD3E02AC();
    v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD1D18);
    *(_QWORD *)&v150 = v44;
    sub_1AD002F7C(&v150, v149);
    v45 = v153;
    v46 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v45;
    sub_1AD43F448(v149, 0xD000000000000019, 0x80000001AD6A91C0, v46);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v47 = *(unsigned __int8 *)(v1 + v31[7]);
  if (v47 != 2)
  {
    v152 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v150) = v47 & 1;
    sub_1AD002F7C(&v150, v149);
    v48 = v153;
    v49 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v48;
    sub_1AD43F448(v149, 0xD000000000000024, 0x80000001AD6A9190, v49);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v50 = v1 + v31[8];
  if ((*(_BYTE *)(v50 + 25) & 1) != 0)
    goto LABEL_51;
  if ((*(_BYTE *)(v50 + 24) & 1) == 0)
  {
    v51 = *(_QWORD *)(v50 + 16);
    v152 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v150 = v51;
    sub_1AD002F7C(&v150, v149);
    v52 = v153;
    v53 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v52;
    sub_1AD43F448(v149, 0xD00000000000001FLL, 0x80000001AD6A9170, v53);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v54 = *(unsigned __int8 *)(v1 + v31[9]);
  if (v54 != 2)
  {
    v152 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v150) = v54 & 1;
    sub_1AD002F7C(&v150, v149);
    v55 = v153;
    v56 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v55;
    sub_1AD43F448(v149, 0xD00000000000002BLL, 0x80000001AD6A9140, v56);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v57 = (uint64_t *)(v1 + v31[10]);
  v58 = *v57;
  if (*v57 != 1)
  {
    v59 = v57[1];
    *(_QWORD *)&v150 = v58;
    *((_QWORD *)&v150 + 1) = v59;
    v60 = sub_1AD3E0408();
    v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD1D18);
    *(_QWORD *)&v150 = v60;
    sub_1AD002F7C(&v150, v149);
    v61 = v153;
    v62 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v61;
    sub_1AD43F448(v149, 0x63532E47522E4D48, 0xEE00656C75646568, v62);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v63 = v1 + v31[11];
  v64 = (uint64_t)v147;
  sub_1ACFF64C0(v63, (uint64_t)v147, &qword_1ED2E7140);
  v65 = sub_1AD63B084();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v64, 1, v65);
  sub_1AD009758(v64, &qword_1ED2E7140);
  if ((_DWORD)v68 != 1)
  {
    v69 = v63;
    v70 = v142;
    sub_1ACFF64C0(v69, v142, &qword_1ED2E7140);
    if (v67(v70, 1, v65) == 1)
    {
      __break(1u);
      goto LABEL_49;
    }
    v71 = sub_1AD63B054();
    v152 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v150 = v71;
    *((_QWORD *)&v150 + 1) = v72;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v70, v65);
    sub_1AD002F7C(&v150, v149);
    v73 = v153;
    v74 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v73;
    sub_1AD43F448(v149, 0x495555656D6F486BLL, 0xE900000000000044, v74);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v75 = v1 + v31[12];
  v76 = *(_QWORD *)(v75 + 24);
  if (v76 >> 60 == 11)
    goto LABEL_51;
  if (v76 >> 60 != 15)
  {
    v77 = *(_QWORD *)(v75 + 16);
    v152 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v150 = v77;
    *((_QWORD *)&v150 + 1) = v76;
    sub_1AD002F7C(&v150, v149);
    sub_1AD0040A0(v77, v76);
    v78 = v153;
    v79 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v78;
    sub_1AD43F448(v149, 0xD000000000000014, 0x80000001AD6A9120, v79);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v80 = v1 + v31[13];
  v81 = *(_QWORD *)(v80 + 24);
  if (v81)
  {
    if (v81 == 1)
      goto LABEL_51;
    v82 = *(_QWORD *)(v80 + 16);
    v152 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v150 = v82;
    *((_QWORD *)&v150 + 1) = v81;
    sub_1AD002F7C(&v150, v149);
    swift_bridgeObjectRetain();
    v83 = v153;
    v84 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v83;
    sub_1AD43F448(v149, 0xD000000000000019, 0x80000001AD6A9100, v84);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v85 = v1 + v31[14];
  v86 = v146;
  sub_1ACFF64C0(v85, v146, &qword_1ED2E7140);
  v68 = v67(v86, 1, v65);
  sub_1AD009758(v86, &qword_1ED2E7140);
  if ((_DWORD)v68 != 1)
  {
    v87 = v85;
    v88 = v141;
    sub_1ACFF64C0(v87, v141, &qword_1ED2E7140);
    if (v67(v88, 1, v65) != 1)
    {
      v89 = sub_1AD63B054();
      v152 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v150 = v89;
      *((_QWORD *)&v150 + 1) = v90;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v88, v65);
      sub_1AD002F7C(&v150, v149);
      v91 = v153;
      v92 = swift_isUniquelyReferenced_nonNull_native();
      v148 = v91;
      sub_1AD43F448(v149, 0xD000000000000018, 0x80000001AD6A90E0, v92);
      v153 = v148;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_31:
  v93 = v144;
  sub_1ACFF64C0(v1 + v31[15], v144, (uint64_t *)&unk_1EECDB370);
  v94 = v145;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v93, 1, v145) == 1)
  {
    sub_1AD009758(v93, (uint64_t *)&unk_1EECDB370);
    goto LABEL_35;
  }
  v95 = (uint64_t)v140;
  sub_1AD0CE1D8(v93, (uint64_t)v140);
  v96 = sub_1AD4E2BB8();
  v97 = objc_allocWithZone(MEMORY[0x1E0CB36F8]);
  v98 = (char *)v96;
  v99 = objc_msgSend(v97, sel_initRequiringSecureCoding_, 1);
  v100 = (void *)sub_1AD63B744();
  sub_1AD32F2CC(0, &qword_1EECDB010);
  objc_msgSend(v99, sel_setClassName_forClass_, v100, swift_getObjCClassFromMetadata());

  objc_msgSend(v99, sel_encodeObject_forKey_, v98, *MEMORY[0x1E0CB2CD0]);
  v147 = v98;

  v101 = *(int *)(v94 + 24);
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30);
  v68 = (uint64_t)v138;
  sub_1ACFF64C0(v95 + v101 + *(int *)(v102 + 28), (uint64_t)v138, &qword_1ED2E1A40);
  v103 = v137;
  v104 = v139;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v68, 1, v139) == 1)
  {
LABEL_50:
    sub_1AD009758(v68, &qword_1ED2E1A40);
    goto LABEL_51;
  }
  v105 = v136;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v136, v68, v104);
  v106 = sub_1AD63AE74();
  v108 = v107;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v104);
  v152 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v150 = v106;
  *((_QWORD *)&v150 + 1) = v108;
  sub_1AD002F7C(&v150, v149);
  v109 = v153;
  v110 = swift_isUniquelyReferenced_nonNull_native();
  v148 = v109;
  sub_1AD43F448(v149, 0xD00000000000001CLL, 0x80000001AD6A90A0, v110);
  v111 = v148;
  swift_bridgeObjectRelease();
  v112 = objc_msgSend(v99, sel_encodedData);
  v113 = sub_1AD63AFB8();
  v115 = v114;

  v152 = MEMORY[0x1E0CB0338];
  *(_QWORD *)&v150 = v113;
  *((_QWORD *)&v150 + 1) = v115;
  sub_1AD002F7C(&v150, v149);
  v116 = swift_isUniquelyReferenced_nonNull_native();
  v148 = v111;
  sub_1AD43F448(v149, 0xD00000000000001ELL, 0x80000001AD6A90C0, v116);
  v153 = v148;

  swift_bridgeObjectRelease();
  sub_1AD066230(v95, (uint64_t (*)(_QWORD))type metadata accessor for CloudKitSharingToken);
LABEL_35:
  v117 = v1 + v31[16];
  v118 = *(_QWORD *)(v117 + 24);
  if (v118)
  {
    if (v118 != 1)
    {
      v119 = *(_QWORD *)(v117 + 16);
      v152 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v150 = v119;
      *((_QWORD *)&v150 + 1) = v118;
      sub_1AD002F7C(&v150, v149);
      swift_bridgeObjectRetain();
      v120 = v153;
      v121 = swift_isUniquelyReferenced_nonNull_native();
      v148 = v120;
      sub_1AD43F448(v149, 0x4B4449726573556BLL, 0xEA00000000007965, v121);
      v153 = v148;
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
LABEL_51:
    result = sub_1AD63BE28();
    __break(1u);
    return result;
  }
LABEL_38:
  v122 = v1 + v31[17];
  if ((*(_BYTE *)(v122 + 25) & 1) != 0)
    goto LABEL_51;
  if ((*(_BYTE *)(v122 + 24) & 1) == 0)
  {
    v123 = *(_QWORD *)(v122 + 16);
    v152 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v150 = v123;
    sub_1AD002F7C(&v150, v149);
    v124 = v153;
    v125 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v124;
    sub_1AD43F448(v149, 0xD000000000000013, 0x80000001AD6A9080, v125);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v126 = v1 + v31[18];
  if ((*(_BYTE *)(v126 + 25) & 1) != 0)
    goto LABEL_51;
  if ((*(_BYTE *)(v126 + 24) & 1) == 0)
  {
    v127 = *(_QWORD *)(v126 + 16);
    v152 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v150 = v127;
    sub_1AD002F7C(&v150, v149);
    v128 = v153;
    v129 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v128;
    sub_1AD43F448(v149, 0xD000000000000023, 0x80000001AD6A9050, v129);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  v130 = v1 + v31[19];
  v131 = *(_QWORD *)(v130 + 24);
  if (v131 >> 60 == 11)
    goto LABEL_51;
  if (v131 >> 60 != 15)
  {
    v132 = *(_QWORD *)(v130 + 16);
    v152 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v150 = v132;
    *((_QWORD *)&v150 + 1) = v131;
    sub_1AD002F7C(&v150, v149);
    sub_1AD0040A0(v132, v131);
    v133 = v153;
    v134 = swift_isUniquelyReferenced_nonNull_native();
    v148 = v133;
    sub_1AD43F448(v149, 0xD00000000000002BLL, 0x80000001AD6A9020, v134);
    v153 = v148;
    swift_bridgeObjectRelease();
  }
  return v153;
}

uint64_t sub_1AD3E02AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  char v5;
  uint64_t result;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_1AD63BB04();
  v9 = sub_1AD32F2CC(0, &qword_1EECDABE8);
  *(_QWORD *)&v8 = v2;
  sub_1AD002F7C(&v8, v7);
  v3 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1AD43F448(v7, 0xD000000000000010, 0x80000001AD6A8FE0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC610);
    *(_QWORD *)&v8 = v1;
    sub_1AD002F7C(&v8, v7);
    swift_bridgeObjectRetain();
    v5 = swift_isUniquelyReferenced_nonNull_native();
    sub_1AD43F448(v7, 0xD00000000000001ALL, 0x80000001AD6A9000, v5);
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3E0408()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  _OWORD v54[2];

  v1 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = v0[1];
  v7 = MEMORY[0x1E0DEE9E0];
  if (*v0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
    {
      v38 = v2;
      v39 = v6;
      swift_bridgeObjectRetain();
      v9 = 0;
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v11 = *(_QWORD *)(v5 + v9 + 40);
        v12 = *(_QWORD *)(v5 + v9 + 48);
        v13 = *(_BYTE *)(v5 + v9 + 56);
        v14 = *(_BYTE *)(v5 + v9 + 57);
        v15 = *(_QWORD *)(v5 + v9 + 64);
        v16 = *(_QWORD *)(v5 + v9 + 72);
        v17 = *(_QWORD *)(v5 + v9 + 80);
        v18 = *(_BYTE *)(v5 + v9 + 88);
        v19 = *(_BYTE *)(v5 + v9 + 89);
        v20 = *(_QWORD *)(v5 + v9 + 96);
        v21 = *(_QWORD *)(v5 + v9 + 104);
        v22 = *(_QWORD *)(v5 + v9 + 112);
        v23 = *(_BYTE *)(v5 + v9 + 120);
        v24 = *(_BYTE *)(v5 + v9 + 121);
        *(_QWORD *)&v40 = *(_QWORD *)(v5 + v9 + 32);
        *((_QWORD *)&v40 + 1) = v11;
        v41 = v12;
        LOBYTE(v42) = v13;
        BYTE1(v42) = v14;
        v43 = v15;
        v44 = v16;
        v45 = v17;
        v46 = v18;
        v47 = v19;
        v48 = v20;
        v49 = v21;
        v50 = v22;
        v51 = v23;
        v52 = v24;
        swift_retain();
        swift_retain();
        swift_retain();
        v25 = sub_1AD3E0C38();
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD1D18);
        *(_QWORD *)&v40 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1AD3CAE10(0, v10[2] + 1, 1, v10);
        v27 = v10[2];
        v26 = v10[3];
        if (v27 >= v26 >> 1)
          v10 = sub_1AD3CAE10((_QWORD *)(v26 > 1), v27 + 1, 1, v10);
        v10[2] = v27 + 1;
        sub_1AD002F7C(&v40, &v10[4 * v27 + 4]);
        swift_release();
        swift_release();
        swift_release();
        v9 += 96;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      v7 = MEMORY[0x1E0DEE9E0];
      v2 = v38;
      v6 = v39;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EECDC790);
    *(_QWORD *)&v40 = v10;
    sub_1AD002F7C(&v40, v54);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v53 = v7;
    sub_1AD43F448(v54, 0xD000000000000016, 0x80000001AD6A8FC0, isUniquelyReferenced_nonNull_native);
    v7 = v53;
    swift_bridgeObjectRelease();
  }
  if (v6)
  {
    v29 = *(_QWORD *)(v6 + 16);
    if (v29)
    {
      v30 = v6 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v31 = *(_QWORD *)(v2 + 72);
      v39 = v6;
      swift_bridgeObjectRetain();
      v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        sub_1AD3E13D4(v30, (uint64_t)v4);
        v33 = sub_1AD3E0E10();
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD1D18);
        *(_QWORD *)&v40 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = sub_1AD3CAE10(0, v32[2] + 1, 1, v32);
        v35 = v32[2];
        v34 = v32[3];
        if (v35 >= v34 >> 1)
          v32 = sub_1AD3CAE10((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
        v32[2] = v35 + 1;
        sub_1AD002F7C(&v40, &v32[4 * v35 + 4]);
        sub_1AD066230((uint64_t)v4, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule);
        v30 += v31;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EECDC790);
    *(_QWORD *)&v40 = v32;
    sub_1AD002F7C(&v40, v54);
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v53 = v7;
    sub_1AD43F448(v54, 0xD000000000000016, 0x80000001AD6A8FA0, v36);
    v7 = v53;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void sub_1AD3E07D0(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25[4];
  void *v26;

  v7 = objc_allocWithZone(MEMORY[0x1E0CB3710]);
  sub_1AD0040A0(a1, a2);
  v8 = sub_1AD36E7D4();
  if (!v3)
  {
    v13 = v8;
    sub_1AD00412C(a1, a2);
    v14 = v13;
    objc_msgSend(v14, sel__enableStrictSecureDecodingMode);
    objc_msgSend(v14, sel_setDecodingFailurePolicy_, 1);
    v15 = sub_1AD32F2CC(0, &qword_1EECDB010);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v17 = (void *)sub_1AD63B744();
    objc_msgSend(v14, sel_setClass_forClassName_, ObjCClassFromMetadata, v17);

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB0B8);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1AD648160;
    *(_QWORD *)(v18 + 32) = v15;
    sub_1AD63B768();
    sub_1AD63BC24();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25[3])
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1AD4E29DC(v26, a3);
LABEL_10:

        return;
      }
    }
    else
    {
      sub_1AD009758((uint64_t)v25, &qword_1EECDC5F0);
    }
    v22 = sub_1AD63BD8C();
    swift_allocError();
    v24 = v23;
    sub_1AD63BD68();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC458], v22);
    swift_willThrow();
    goto LABEL_10;
  }
  sub_1AD00412C(a1, a2);
  v25[0] = v3;
  v9 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E5300);
  sub_1AD32F2CC(0, (unint64_t *)&qword_1EECDB380);
  if ((swift_dynamicCast() & 1) != 0)
  {

    sub_1AD0DDA60();
    swift_allocError();
    v11 = v10;
    v12 = v26;
    sub_1AD601B20(v12, 0xD000000000000014, 0x80000001AD6A8EF0, v11);
    swift_willThrow();

  }
  else
  {

    sub_1AD0DDA60();
    swift_allocError();
    v20 = v19;
    v21 = v3;
    sub_1AD6015CC(v3, 0xD000000000000014, 0x80000001AD6A8EF0, v20);
    swift_willThrow();

  }
}

uint64_t sub_1AD3E0B60()
{
  uint64_t v0;

  sub_1AD3E02AC();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E0BD4()
{
  uint64_t v0;

  sub_1AD3E0408();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E0C38()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  char v11;
  uint64_t result;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;

  if ((*(_BYTE *)(v0 + 25) & 1) != 0)
    goto LABEL_11;
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 57);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_BYTE *)(v0 + 88);
  v6 = *(_BYTE *)(v0 + 89);
  v7 = MEMORY[0x1E0DEE9E0];
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    v8 = *(_QWORD *)(v0 + 16);
    v15 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v14 = v8;
    sub_1AD002F7C(&v14, v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1AD43F448(v13, 0xD000000000000027, 0x80000001AD6A8F70, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if ((v3 & 1) != 0)
    goto LABEL_11;
  if ((v2 & 1) == 0)
  {
    v15 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v14 = v1;
    sub_1AD002F7C(&v14, v13);
    v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_1AD43F448(v13, 0xD000000000000025, 0x80000001AD6A8F40, v10);
    swift_bridgeObjectRelease();
  }
  if ((v6 & 1) != 0)
  {
LABEL_11:
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    if ((v5 & 1) == 0)
    {
      v15 = MEMORY[0x1E0DEB418];
      *(_QWORD *)&v14 = v4;
      sub_1AD002F7C(&v14, v13);
      v11 = swift_isUniquelyReferenced_nonNull_native();
      sub_1AD43F448(v13, 0xD00000000000002BLL, 0x80000001AD6A8F10, v11);
      swift_bridgeObjectRelease();
    }
    return v7;
  }
  return result;
}

uint64_t sub_1AD3E0E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27[3];
  uint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v24 - v6;
  v8 = sub_1AD63B03C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v24 - v13;
  sub_1ACFF64C0(v1, (uint64_t)v7, (uint64_t *)&unk_1ED2E2D98);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v15(v7, 1, v8) == 1)
  {
    sub_1AD009758((uint64_t)v7, (uint64_t *)&unk_1ED2E2D98);
    v16 = MEMORY[0x1E0DEE9E0];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    v28 = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_0, v14, v8);
    sub_1AD002F7C(v27, v26);
    v18 = MEMORY[0x1E0DEE9E0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v18;
    sub_1AD43F448(v26, 0x7472617453444D48, 0xEF79654B65746144, isUniquelyReferenced_nonNull_native);
    v16 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  v20 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule(0);
  sub_1ACFF64C0(v1 + *(int *)(v20 + 20), (uint64_t)v5, (uint64_t *)&unk_1ED2E2D98);
  if (v15(v5, 1, v8) == 1)
  {
    sub_1AD009758((uint64_t)v5, (uint64_t *)&unk_1ED2E2D98);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v5, v8);
    v28 = v8;
    v21 = __swift_allocate_boxed_opaque_existential_0(v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v21, v12, v8);
    sub_1AD002F7C(v27, v26);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = v16;
    sub_1AD43F448(v26, 0x6144646E45444D48, 0xED000079654B6574, v22);
    v16 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return v16;
}

uint64_t sub_1AD3E10C0()
{
  uint64_t v0;

  sub_1AD3E0C38();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E117C()
{
  return sub_1AD3E1188((void (*)(void))sub_1AD3E0E10);
}

uint64_t sub_1AD3E1188(void (*a1)(void))
{
  uint64_t v1;

  a1();
  v1 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1AD3E11D8()
{
  uint64_t v0;

  sub_1AD3E02AC();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E124C(uint64_t a1, uint64_t a2)
{
  return sub_1AD3E1384(a1, a2, (void (*)(void))sub_1AD3DF274);
}

uint64_t sub_1AD3E1258()
{
  uint64_t v0;

  sub_1AD3E0408();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E12BC()
{
  uint64_t v0;

  sub_1AD3E0C38();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E1378(uint64_t a1, uint64_t a2)
{
  return sub_1AD3E1384(a1, a2, (void (*)(void))sub_1AD3E0E10);
}

uint64_t sub_1AD3E1384(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;

  a3();
  v3 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1AD3E13D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3E141C()
{
  sub_1AD3E7D3C();
  return sub_1AD63B288();
}

uint64_t sub_1AD3E1458@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_1AD3E1474()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1AD3E147C()
{
  sub_1AD3E7CF8();
  return sub_1AD63B288();
}

uint64_t sub_1AD3E14B4()
{
  sub_1AD3E7CB4();
  return sub_1AD63B288();
}

unint64_t sub_1AD3E14EC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1AD3E8E10(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1AD3E1510@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1AD3E8E10(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1AD3E1538()
{
  sub_1AD3E7BA8();
  return sub_1AD63B288();
}

uint64_t sub_1AD3E1570()
{
  sub_1AD3E7B64();
  return sub_1AD63B288();
}

unint64_t sub_1AD3E15A8@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t *sub_1AD3E15BC@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1AD3E15D4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5CBCC60;
}

void sub_1AD3E15E4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5CCD0F8;
}

void sub_1AD3E15F4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5CBCBA8;
}

void sub_1AD3E1604(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5CBCAF0;
}

void sub_1AD3E1614(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5CBCA38;
}

uint64_t sub_1AD3E1624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED839D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED839D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD648170;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "shareURL";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "token";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E1774()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1AD63B294();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for HealthSharingSetupInvitationToken(0);
      sub_1AD63B2B8();
    }
    else if (result == 1)
    {
      type metadata accessor for HealthSharingSetupInvitationToken(0);
      sub_1AD63B2E8();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_1AD3E1840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1AD3E2770(v3, a1, a2, a3, type metadata accessor for HealthSharingSetupInvitationToken);
  if (!v4)
  {
    sub_1AD3E18B4(v3);
    return sub_1AD63B234();
  }
  return result;
}

uint64_t sub_1AD3E18B4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for HealthSharingSetupInvitationToken(0);
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_1AD0040A0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_1AD63B384();
    return sub_1AD004118(v5, v4);
  }
  return result;
}

double sub_1AD3E1950@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double result;

  sub_1AD63B240();
  v4 = *(int *)(a1 + 24);
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v5 = 0;
  v5[1] = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_1AD67A180;
  return result;
}

unint64_t sub_1AD3E198C()
{
  return 0xD000000000000021;
}

uint64_t sub_1AD3E19A8()
{
  return sub_1AD3E1774();
}

uint64_t sub_1AD3E19BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD3E1840(a1, a2, a3);
}

uint64_t sub_1AD3E19D0()
{
  sub_1ACFF9724(&qword_1EECDC148, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814A4);
  return sub_1AD63B27C();
}

uint64_t sub_1AD3E1A20@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1500, (uint64_t)qword_1EED839D8, a1);
}

uint64_t sub_1AD3E1A3C()
{
  sub_1ACFF9724(&qword_1EECDC0A8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814DC);
  return sub_1AD63B354();
}

uint64_t sub_1AD3E1A7C()
{
  sub_1ACFF9724(&qword_1EECDC0A8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814DC);
  return sub_1AD63B360();
}

uint64_t sub_1AD3E1AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED839F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED839F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD679140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "syncCircleIdentifier";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ownerParticipant";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sourceProfileIdentifier";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "shareParticipant";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ownerCloudKitEmailAddress";
  *((_QWORD *)v17 + 1) = 25;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 100;
  *(_QWORD *)v19 = "invitationToken";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E1D08()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1AD63B294();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
          type metadata accessor for HealthSharingSetupMetadata(0);
          v4 = v3;
          sub_1AD63B2E8();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          type metadata accessor for HealthSharingSetupMetadata(0);
          v4 = v3;
          sub_1AD63B2B8();
          goto LABEL_5;
        default:
          if (result != 100)
            goto LABEL_6;
          type metadata accessor for HealthSharingSetupInvitationToken(0);
          sub_1ACFF9724(&qword_1EECDC0A8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814DC);
          v4 = v3;
          sub_1AD63B300();
LABEL_5:
          v3 = v4;
LABEL_6:
          result = sub_1AD63B294();
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1AD3E1E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1AD3E27E4(v3, a1, a2, a3, type metadata accessor for HealthSharingSetupMetadata);
  if (!v4)
  {
    sub_1AD3E1FF4(v3);
    sub_1AD3E2090(v3);
    sub_1AD3E212C(v3);
    sub_1AD3E21C8(v3);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for HealthSharingSetupInvitationToken(0);
      sub_1ACFF9724(&qword_1EECDC0A8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814DC);
      sub_1AD63B3CC();
    }
    type metadata accessor for HealthSharingSetupMetadata(0);
    return sub_1AD63B234();
  }
  return result;
}

uint64_t sub_1AD3E1FF4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for HealthSharingSetupMetadata(0);
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_1AD0040A0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_1AD63B384();
    return sub_1AD004118(v5, v4);
  }
  return result;
}

uint64_t sub_1AD3E2090(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for HealthSharingSetupMetadata(0);
  v3 = a1 + *(int *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_1AD0040A0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_1AD63B384();
    return sub_1AD004118(v5, v4);
  }
  return result;
}

uint64_t sub_1AD3E212C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for HealthSharingSetupMetadata(0);
  v3 = a1 + *(int *)(result + 36);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_1AD0040A0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_1AD63B384();
    return sub_1AD004118(v5, v4);
  }
  return result;
}

uint64_t sub_1AD3E21C8(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for HealthSharingSetupMetadata(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 40) + 8))
    return sub_1AD63B3B4();
  return result;
}

double sub_1AD3E2240@<D0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double result;
  uint64_t v7;
  _QWORD *v8;

  *a2 = MEMORY[0x1E0DEE9D8];
  sub_1AD63B240();
  v4 = a1[7];
  v5 = (_QWORD *)((char *)a2 + a1[6]);
  *v5 = 0;
  v5[1] = 0;
  result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_1AD67A180;
  v7 = a1[9];
  *(_OWORD *)((char *)a2 + a1[8]) = xmmword_1AD67A180;
  *(_OWORD *)((char *)a2 + v7) = xmmword_1AD67A180;
  v8 = (_QWORD *)((char *)a2 + a1[10]);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

unint64_t sub_1AD3E22A8()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1AD3E22C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_1AD63B24C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1AD3E2304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_1AD63B24C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1AD3E2344())()
{
  return nullsub_1;
}

uint64_t sub_1AD3E2358()
{
  return sub_1AD3E1D08();
}

uint64_t sub_1AD3E236C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD3E1E80(a1, a2, a3);
}

uint64_t sub_1AD3E2380()
{
  sub_1ACFF9724(&qword_1EECDC150, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD68133C);
  return sub_1AD63B27C();
}

uint64_t sub_1AD3E23D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1508, (uint64_t)qword_1EED839F0, a1);
}

uint64_t sub_1AD3E23EC()
{
  sub_1ACFF9724(&qword_1EECDC088, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681374);
  return sub_1AD63B354();
}

uint64_t sub_1AD3E242C()
{
  sub_1ACFF9724(&qword_1EECDC088, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681374);
  return sub_1AD63B360();
}

uint64_t sub_1AD3E2480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A08);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD64CE50;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "authorizationIdentifier";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "displayName";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "displaySubtitle";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E2614()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1AD63B294();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for HealthSharingAuthorization(0);
      sub_1AD63B2E8();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_1AD3E26D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1AD3E2770(v3, a1, a2, a3, type metadata accessor for HealthSharingAuthorization);
  if (!v4)
  {
    sub_1AD3E27E4(v3, a1, a2, a3, type metadata accessor for HealthSharingAuthorization);
    sub_1AD3E2860(v3);
    return sub_1AD63B234();
  }
  return result;
}

uint64_t sub_1AD3E2770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return sub_1AD63B3B4();
  return result;
}

uint64_t sub_1AD3E27E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return sub_1AD63B3B4();
  return result;
}

uint64_t sub_1AD3E2860(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for HealthSharingAuthorization(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return sub_1AD63B3B4();
  return result;
}

uint64_t sub_1AD3E28D4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  result = sub_1AD63B240();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a2 + a1[7]);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

unint64_t sub_1AD3E2918()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1AD3E2934()
{
  return sub_1AD3E2614();
}

uint64_t sub_1AD3E2948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD3E26D8(a1, a2, a3);
}

uint64_t sub_1AD3E295C()
{
  sub_1ACFF9724(&qword_1EECDC158, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD6811D4);
  return sub_1AD63B27C();
}

uint64_t sub_1AD3E29AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1510, (uint64_t)qword_1EED83A08, a1);
}

uint64_t sub_1AD3E29C8()
{
  sub_1ACFF9724(&qword_1EECDC068, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68120C);
  return sub_1AD63B354();
}

uint64_t sub_1AD3E2A08()
{
  sub_1ACFF9724(&qword_1EECDC068, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68120C);
  return sub_1AD63B360();
}

uint64_t sub_1AD3E2A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A20);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1AD680900;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "uuid";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = sub_1AD63B3FC();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v44 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "primaryContactIdentifier";
  *(_QWORD *)(v10 + 8) = 24;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v44 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "allContactIdentifiers";
  *((_QWORD *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v44 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "firstName";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v44 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "lastName";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v44 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "type";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v44 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "direction";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v44 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "status";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v44 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "sharingSetupMetadata";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v44 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "dateModified";
  *((_QWORD *)v25 + 1) = 12;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v44 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "authorizationCategories";
  *((_QWORD *)v27 + 1) = 23;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v44 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "dateAccepted";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v44 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "dateInvited";
  *((_QWORD *)v31 + 1) = 11;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v44 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "invitationUUID";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v44 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "cloudKitIdentifier";
  *((_QWORD *)v35 + 1) = 18;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v44 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "ownerParticipant";
  *((_QWORD *)v37 + 1) = 16;
  v37[16] = 2;
  v9();
  v38 = v44 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "notificationStatus";
  *(_QWORD *)(v38 + 8) = 18;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v44 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 40;
  *(_QWORD *)v40 = "sharingAuthorizations";
  *((_QWORD *)v40 + 1) = 21;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v44 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 41;
  *(_QWORD *)v42 = "userWheelchairMode";
  *((_QWORD *)v42 + 1) = 18;
  v42[16] = 2;
  v9();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E2F28()
{
  uint64_t result;

  type metadata accessor for HealthSummarySharingEntry._StorageClass(0);
  swift_allocObject();
  result = sub_1AD3E2F64();
  qword_1EECDBF30 = result;
  return result;
}

uint64_t sub_1AD3E2F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_WORD *)(v0 + 88) = 514;
  *(_BYTE *)(v0 + 90) = 5;
  v2 = v0
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
  v3 = type metadata accessor for HealthSharingSetupMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v0
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories) = v1;
  v5 = v0
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant) = xmmword_1AD67A180;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus) = 3;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations) = v1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode) = 3;
  return v0;
}

uint64_t sub_1AD3E308C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD009758(v0+ OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata, &qword_1EECDB318);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD004118(*(_QWORD *)(v0+ OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant), *(_QWORD *)(v0+ OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant+ 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E313C()
{
  sub_1AD3E308C();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD3E315C()
{
  return type metadata accessor for HealthSummarySharingEntry._StorageClass(0);
}

uint64_t type metadata accessor for HealthSummarySharingEntry._StorageClass(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBF90);
}

void sub_1AD3E3178()
{
  unint64_t v0;

  sub_1AD3E3248();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1AD3E3248()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EECDBFA0)
  {
    type metadata accessor for HealthSharingSetupMetadata(255);
    v0 = sub_1AD63BC48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EECDBFA0);
  }
}

uint64_t type metadata accessor for HealthSharingSetupMetadata(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBFB8);
}

ValueMetadata *type metadata accessor for HealthSummarySharingEntry.WheelchairUse()
{
  return &type metadata for HealthSummarySharingEntry.WheelchairUse;
}

uint64_t *sub_1AD3E32C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AD63B24C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD3E338C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3E33F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AD3E3490(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD3E3564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD3E3608()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E3618()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for HealthSharingAuthorization(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBFA8);
}

uint64_t sub_1AD3E363C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63B24C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s9BlastDoor25HealthSummarySharingEntryV18NotificationStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AD3E36FC + 4 * byte_1AD68091A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AD3E3730 + 4 * byte_1AD680915[v4]))();
}

uint64_t sub_1AD3E3730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E3738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3E3740);
  return result;
}

uint64_t sub_1AD3E374C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3E3754);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AD3E3758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E3760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthSummarySharingEntry.NotificationStatus()
{
  return &type metadata for HealthSummarySharingEntry.NotificationStatus;
}

uint64_t storeEnumTagSinglePayload for HealthSummarySharingEntry.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AD3E37C8 + 4 * byte_1AD680924[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AD3E37FC + 4 * byte_1AD68091F[v4]))();
}

uint64_t sub_1AD3E37FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E3804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3E380CLL);
  return result;
}

uint64_t sub_1AD3E3818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3E3820);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AD3E3824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E382C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthSummarySharingEntry.Status()
{
  return &type metadata for HealthSummarySharingEntry.Status;
}

ValueMetadata *type metadata accessor for HealthSummarySharingEntry.Direction()
{
  return &type metadata for HealthSummarySharingEntry.Direction;
}

uint64_t _s9BlastDoor25HealthSummarySharingEntryV8TypeEnumOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AD3E38A8 + 4 * byte_1AD68092E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AD3E38DC + 4 * byte_1AD680929[v4]))();
}

uint64_t sub_1AD3E38DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E38E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3E38ECLL);
  return result;
}

uint64_t sub_1AD3E38F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3E3900);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AD3E3904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3E390C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthSummarySharingEntry.TypeEnum()
{
  return &type metadata for HealthSummarySharingEntry.TypeEnum;
}

uint64_t *sub_1AD3E3928(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1AD63B24C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v7 + v14;
    v19 = (_OWORD *)((char *)a2 + v14);
    v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      sub_1AD0040A0(v21, v20);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
    v22 = a3[8];
    v23 = (char *)v7 + v22;
    v24 = (char *)a2 + v22;
    v25 = *((_QWORD *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *(_QWORD *)v24;
      sub_1AD0040A0(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
    v27 = a3[9];
    v28 = (char *)v7 + v27;
    v29 = (char *)a2 + v27;
    v30 = *((_QWORD *)v29 + 1);
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    else
    {
      v31 = *(_QWORD *)v29;
      sub_1AD0040A0(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
    }
    v32 = a3[10];
    v33 = (uint64_t *)((char *)v7 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1AD3E3AB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a1 + a2[7]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_1AD00412C(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[8]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1AD00412C(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[9]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_1AD00412C(*v10, v11);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1AD3E3B80(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63B24C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (_OWORD *)((char *)a2 + v12);
  v18 = *(_QWORD *)((char *)a2 + v12 + 8);
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_1AD0040A0(v19, v18);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *((_QWORD *)v22 + 1);
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *(_QWORD *)v22;
    sub_1AD0040A0(*(_QWORD *)v22, *((_QWORD *)v22 + 1));
    *(_QWORD *)v21 = v24;
    *((_QWORD *)v21 + 1) = v23;
  }
  v25 = a3[9];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *((_QWORD *)v27 + 1);
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *(_QWORD *)v27;
    sub_1AD0040A0(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v28;
  }
  v30 = a3[10];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1AD3E3CE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63B24C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = *(_QWORD *)((char *)a2 + v13 + 8);
  if (*(_QWORD *)((char *)a1 + v13 + 8) >> 60 == 15)
  {
    if (v16 >> 60 != 15)
    {
      v17 = *v15;
      sub_1AD0040A0(v17, v16);
      *v14 = v17;
      v14[1] = v16;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)v14);
LABEL_6:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  v18 = *v15;
  sub_1AD0040A0(v18, v16);
  v19 = *v14;
  v20 = v14[1];
  *v14 = v18;
  v14[1] = v16;
  sub_1AD00412C(v19, v20);
LABEL_8:
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = *(_QWORD *)((char *)a2 + v21 + 8);
  if (*(_QWORD *)((char *)a1 + v21 + 8) >> 60 == 15)
  {
    if (v24 >> 60 != 15)
    {
      v25 = *v23;
      sub_1AD0040A0(v25, v24);
      *v22 = v25;
      v22[1] = v24;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v24 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)v22);
LABEL_13:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_15;
  }
  v26 = *v23;
  sub_1AD0040A0(v26, v24);
  v27 = *v22;
  v28 = v22[1];
  *v22 = v26;
  v22[1] = v24;
  sub_1AD00412C(v27, v28);
LABEL_15:
  v29 = a3[9];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = *(_QWORD *)((char *)a2 + v29 + 8);
  if (*(_QWORD *)((char *)a1 + v29 + 8) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      v34 = *v31;
      sub_1AD0040A0(v34, v32);
      v35 = *v30;
      v36 = v30[1];
      *v30 = v34;
      v30[1] = v32;
      sub_1AD00412C(v35, v36);
      goto LABEL_22;
    }
    sub_1AD007EC0((uint64_t)v30);
    goto LABEL_20;
  }
  if (v32 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_22;
  }
  v33 = *v31;
  sub_1AD0040A0(v33, v32);
  *v30 = v33;
  v30[1] = v32;
LABEL_22:
  v37 = a3[10];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1AD3E3F34(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63B24C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_1AD3E3FD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63B24C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (uint64_t)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a1 + v15 + 8);
  if (v18 >> 60 == 15)
    goto LABEL_4;
  v19 = *((_QWORD *)v17 + 1);
  if (v19 >> 60 == 15)
  {
    sub_1AD007EC0(v16);
LABEL_4:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_6;
  }
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v19;
  sub_1AD00412C(v20, v18);
LABEL_6:
  v21 = a3[8];
  v22 = (uint64_t)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)((char *)a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_11;
  }
  v25 = *((_QWORD *)v23 + 1);
  if (v25 >> 60 == 15)
  {
    sub_1AD007EC0(v22);
    goto LABEL_9;
  }
  v26 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v25;
  sub_1AD00412C(v26, v24);
LABEL_11:
  v27 = a3[9];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a1 + v27 + 8);
  if (v30 >> 60 != 15)
  {
    v31 = v29[1];
    if (v31 >> 60 != 15)
    {
      v32 = *v28;
      *v28 = *v29;
      v28[1] = v31;
      sub_1AD00412C(v32, v30);
      goto LABEL_16;
    }
    sub_1AD007EC0((uint64_t)v28);
  }
  *(_OWORD *)v28 = *(_OWORD *)v29;
LABEL_16:
  v33 = a3[10];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD3E4170()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E417C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1AD63B24C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1AD3E41F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1AD3E4204(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1AD63B24C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1AD3E4278()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63B24C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD3E4308(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1AD63B24C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1AD3E4390(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_1AD3E43D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_1AD3E4434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AD3E44A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD3E44FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1AD3E4560()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E456C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1AD63B24C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1AD3E45E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E45F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1AD63B24C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HealthSummarySharingEntry(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDBFC8);
}

uint64_t sub_1AD3E4680()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63B24C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1AD3E46F8()
{
  unint64_t result;

  result = qword_1EECDBFD8;
  if (!qword_1EECDBFD8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680B5C, &type metadata for HealthSummarySharingEntry.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1EECDBFD8);
  }
  return result;
}

unint64_t sub_1AD3E4740()
{
  unint64_t result;

  result = qword_1EECDBFE0;
  if (!qword_1EECDBFE0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680ADC, &type metadata for HealthSummarySharingEntry.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1EECDBFE0);
  }
  return result;
}

unint64_t sub_1AD3E4788()
{
  unint64_t result;

  result = qword_1EECDBFE8;
  if (!qword_1EECDBFE8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680B9C, &type metadata for HealthSummarySharingEntry.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1EECDBFE8);
  }
  return result;
}

unint64_t sub_1AD3E47D0()
{
  unint64_t result;

  result = qword_1EECDBFF0;
  if (!qword_1EECDBFF0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680C44, &type metadata for HealthSummarySharingEntry.Direction);
    atomic_store(result, (unint64_t *)&qword_1EECDBFF0);
  }
  return result;
}

unint64_t sub_1AD3E4818()
{
  unint64_t result;

  result = qword_1EECDBFF8;
  if (!qword_1EECDBFF8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680BC4, &type metadata for HealthSummarySharingEntry.Direction);
    atomic_store(result, (unint64_t *)&qword_1EECDBFF8);
  }
  return result;
}

unint64_t sub_1AD3E4860()
{
  unint64_t result;

  result = qword_1EECDC000;
  if (!qword_1EECDC000)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680C84, &type metadata for HealthSummarySharingEntry.Direction);
    atomic_store(result, (unint64_t *)&qword_1EECDC000);
  }
  return result;
}

unint64_t sub_1AD3E48A8()
{
  unint64_t result;

  result = qword_1EECDC008;
  if (!qword_1EECDC008)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680D2C, &type metadata for HealthSummarySharingEntry.Status);
    atomic_store(result, (unint64_t *)&qword_1EECDC008);
  }
  return result;
}

unint64_t sub_1AD3E48F0()
{
  unint64_t result;

  result = qword_1EECDC010;
  if (!qword_1EECDC010)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680CAC, &type metadata for HealthSummarySharingEntry.Status);
    atomic_store(result, (unint64_t *)&qword_1EECDC010);
  }
  return result;
}

unint64_t sub_1AD3E4938()
{
  unint64_t result;

  result = qword_1EECDC018;
  if (!qword_1EECDC018)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680D6C, &type metadata for HealthSummarySharingEntry.Status);
    atomic_store(result, (unint64_t *)&qword_1EECDC018);
  }
  return result;
}

unint64_t sub_1AD3E4980()
{
  unint64_t result;

  result = qword_1EECDC020;
  if (!qword_1EECDC020)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680E14, &type metadata for HealthSummarySharingEntry.NotificationStatus);
    atomic_store(result, (unint64_t *)&qword_1EECDC020);
  }
  return result;
}

unint64_t sub_1AD3E49C8()
{
  unint64_t result;

  result = qword_1EECDC028;
  if (!qword_1EECDC028)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680D94, &type metadata for HealthSummarySharingEntry.NotificationStatus);
    atomic_store(result, (unint64_t *)&qword_1EECDC028);
  }
  return result;
}

unint64_t sub_1AD3E4A10()
{
  unint64_t result;

  result = qword_1EECDC030;
  if (!qword_1EECDC030)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680E54, &type metadata for HealthSummarySharingEntry.NotificationStatus);
    atomic_store(result, (unint64_t *)&qword_1EECDC030);
  }
  return result;
}

unint64_t sub_1AD3E4A58()
{
  unint64_t result;

  result = qword_1EECDC038;
  if (!qword_1EECDC038)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680EFC, &type metadata for HealthSummarySharingEntry.WheelchairUse);
    atomic_store(result, (unint64_t *)&qword_1EECDC038);
  }
  return result;
}

unint64_t sub_1AD3E4AA0()
{
  unint64_t result;

  result = qword_1EECDC040;
  if (!qword_1EECDC040)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680E7C, &type metadata for HealthSummarySharingEntry.WheelchairUse);
    atomic_store(result, (unint64_t *)&qword_1EECDC040);
  }
  return result;
}

unint64_t sub_1AD3E4AE8()
{
  unint64_t result;

  result = qword_1EECDC048;
  if (!qword_1EECDC048)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680F3C, &type metadata for HealthSummarySharingEntry.WheelchairUse);
    atomic_store(result, (unint64_t *)&qword_1EECDC048);
  }
  return result;
}

uint64_t sub_1AD3E4B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for HealthSummarySharingEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HealthSummarySharingEntry._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1AD3E86B8(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  sub_1AD3E4BF8(v11, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1AD3E4BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t (*v23)();

  result = sub_1AD63B294();
  if (!v4)
  {
    v11 = MEMORY[0x1E0D3EB88];
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1AD3E4EF4();
          break;
        case 2:
          sub_1AD3E4F70();
          break;
        case 3:
          sub_1AD3E4FEC();
          break;
        case 4:
          sub_1AD3E5068();
          break;
        case 5:
          sub_1AD3E50E4();
          break;
        case 6:
          sub_1AD3E5160();
          break;
        case 7:
          sub_1AD3E51EC();
          break;
        case 8:
          sub_1AD3E5278();
          break;
        case 9:
          sub_1AD3E5304();
          break;
        case 10:
        case 12:
        case 13:
          sub_1AD3E543C();
          break;
        case 11:
          sub_1AD3E53B8();
          break;
        case 14:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid;
          goto LABEL_20;
        case 15:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier;
LABEL_20:
          v17 = (void (*)(uint64_t, uint64_t, uint64_t))v11;
          goto LABEL_22;
        case 16:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant;
          v17 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB10];
LABEL_22:
          sub_1AD3E54BC(v12, v13, v14, v15, v16, v17);
          break;
        case 17:
          v18 = a2;
          v19 = a1;
          v20 = a3;
          v21 = a4;
          v22 = &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus;
          v23 = sub_1AD3E7BA8;
          goto LABEL_26;
        case 40:
          sub_1AD3E5540();
          break;
        case 41:
          v18 = a2;
          v19 = a1;
          v20 = a3;
          v21 = a4;
          v22 = &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode;
          v23 = sub_1AD3E7B64;
LABEL_26:
          sub_1AD3E55F4(v18, v19, v20, v21, (uint64_t)v22, (void (*)(uint64_t))v23);
          break;
        default:
          break;
      }
      result = sub_1AD63B294();
    }
  }
  return result;
}

uint64_t sub_1AD3E4EF4()
{
  swift_beginAccess();
  sub_1AD63B2E8();
  return swift_endAccess();
}

uint64_t sub_1AD3E4F70()
{
  swift_beginAccess();
  sub_1AD63B2E8();
  return swift_endAccess();
}

uint64_t sub_1AD3E4FEC()
{
  swift_beginAccess();
  sub_1AD63B2D0();
  return swift_endAccess();
}

uint64_t sub_1AD3E5068()
{
  swift_beginAccess();
  sub_1AD63B2E8();
  return swift_endAccess();
}

uint64_t sub_1AD3E50E4()
{
  swift_beginAccess();
  sub_1AD63B2E8();
  return swift_endAccess();
}

uint64_t sub_1AD3E5160()
{
  swift_beginAccess();
  sub_1AD3E7D3C();
  sub_1AD63B2AC();
  return swift_endAccess();
}

uint64_t sub_1AD3E51EC()
{
  swift_beginAccess();
  sub_1AD3E7CF8();
  sub_1AD63B2AC();
  return swift_endAccess();
}

uint64_t sub_1AD3E5278()
{
  swift_beginAccess();
  sub_1AD3E7CB4();
  sub_1AD63B2AC();
  return swift_endAccess();
}

uint64_t sub_1AD3E5304()
{
  swift_beginAccess();
  type metadata accessor for HealthSharingSetupMetadata(0);
  sub_1ACFF9724(&qword_1EECDC088, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681374);
  sub_1AD63B318();
  return swift_endAccess();
}

uint64_t sub_1AD3E53B8()
{
  swift_beginAccess();
  sub_1AD63B2D0();
  return swift_endAccess();
}

uint64_t sub_1AD3E543C()
{
  swift_beginAccess();
  sub_1AD63B2DC();
  return swift_endAccess();
}

uint64_t sub_1AD3E54BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t sub_1AD3E5540()
{
  swift_beginAccess();
  type metadata accessor for HealthSharingAuthorization(0);
  sub_1ACFF9724(&qword_1EECDC068, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68120C);
  sub_1AD63B300();
  return swift_endAccess();
}

uint64_t sub_1AD3E55F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = swift_beginAccess();
  a6(v7);
  sub_1AD63B2AC();
  return swift_endAccess();
}

uint64_t sub_1AD3E5694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for HealthSummarySharingEntry(0);
  v7 = swift_retain();
  sub_1AD3E5724(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return sub_1AD63B234();
  return result;
}

uint64_t sub_1AD3E5724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = sub_1AD3E5B08(a1);
  if (!v4)
  {
    sub_1AD3E5BA4(a1);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      sub_1AD63B39C();
      swift_bridgeObjectRelease();
    }
    sub_1AD3E5C40(a1);
    sub_1AD3E5CDC(a1);
    sub_1AD3E5D78(a1);
    sub_1AD3E5E14(a1);
    sub_1AD3E5EB0(a1);
    sub_1AD3E5F48(a1);
    sub_1AD3E60C0(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified);
    v10 = a1
        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
    {
      swift_bridgeObjectRetain();
      sub_1AD63B39C();
      swift_bridgeObjectRelease();
    }
    sub_1AD3E60C0(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted);
    sub_1AD3E60C0(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited);
    sub_1AD3E614C(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
    sub_1AD3E614C(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
    sub_1AD3E61F8(a1);
    sub_1AD3E62A8(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus, (void (*)(uint64_t))sub_1AD3E7BA8);
    v11 = a1
        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      type metadata accessor for HealthSharingAuthorization(0);
      sub_1ACFF9724(&qword_1EECDC068, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68120C);
      swift_bridgeObjectRetain();
      sub_1AD63B3CC();
      swift_bridgeObjectRelease();
    }
    return sub_1AD3E62A8(a1, a2, a3, a4, &OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode, (void (*)(uint64_t))sub_1AD3E7B64);
  }
  return result;
}

uint64_t sub_1AD3E5B08(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRetain();
    sub_1AD63B3B4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD3E5BA4(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRetain();
    sub_1AD63B3B4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD3E5C40(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRetain();
    sub_1AD63B3B4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD3E5CDC(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 80))
  {
    swift_bridgeObjectRetain();
    sub_1AD63B3B4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD3E5D78(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 88) != 2)
  {
    sub_1AD3E7D3C();
    return sub_1AD63B378();
  }
  return result;
}

uint64_t sub_1AD3E5E14(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 89) != 2)
  {
    sub_1AD3E7CF8();
    return sub_1AD63B378();
  }
  return result;
}

uint64_t sub_1AD3E5EB0(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 90) != 5)
  {
    sub_1AD3E7CB4();
    return sub_1AD63B378();
  }
  return result;
}

uint64_t sub_1AD3E5F48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB318);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HealthSharingSetupMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
  swift_beginAccess();
  sub_1AD3E7BEC(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_1AD009758((uint64_t)v4, &qword_1EECDB318);
  sub_1AD3E7C34((uint64_t)v4, (uint64_t)v8);
  sub_1ACFF9724(&qword_1EECDC088, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681374);
  sub_1AD63B3E4();
  return sub_1AD3E7C78((uint64_t)v8);
}

uint64_t sub_1AD3E60C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
    return sub_1AD63B3A8();
  return result;
}

uint64_t sub_1AD3E614C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_bridgeObjectRetain();
    sub_1AD63B3B4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD3E61F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant);
  result = swift_beginAccess();
  v3 = v1[1];
  if (v3 >> 60 != 15)
  {
    v4 = *v1;
    sub_1AD0040A0(v4, v3);
    sub_1AD63B384();
    return sub_1AD004118(v4, v3);
  }
  return result;
}

uint64_t sub_1AD3E62A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t))
{
  _BYTE *v7;
  uint64_t result;

  v7 = (_BYTE *)(a1 + *a5);
  result = swift_beginAccess();
  if (*v7 != 3)
  {
    a6(result);
    return sub_1AD63B378();
  }
  return result;
}

BOOL sub_1AD3E6358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t *v44;
  char v45;
  uint64_t v46;
  double v47;
  char v48;
  uint64_t v49;
  _QWORD **v50;
  _QWORD *v51;
  _QWORD **v52;
  uint64_t v53;
  double v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  unsigned __int8 *v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;

  v4 = type metadata accessor for HealthSharingSetupMetadata(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v93 = (uint64_t *)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC160);
  MEMORY[0x1E0C80A78](v7);
  v94 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB318);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v92 - v13;
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v17 = *(_QWORD *)(a2 + 24);
  if (!v15)
  {
    if (v17)
      return 0;
    goto LABEL_8;
  }
  if (!v17)
    return 0;
  if (v16 == *(_QWORD *)(a2 + 16) && v15 == v17 || (v18 = sub_1AD63C2A8(), result = 0, (v18 & 1) != 0))
  {
LABEL_8:
    swift_beginAccess();
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    swift_beginAccess();
    v22 = *(_QWORD *)(a2 + 40);
    if (v21)
    {
      if (!v22)
        return 0;
      if (v20 != *(_QWORD *)(a2 + 32) || v21 != v22)
      {
        v23 = sub_1AD63C2A8();
        result = 0;
        if ((v23 & 1) == 0)
          return result;
      }
    }
    else if (v22)
    {
      return 0;
    }
    swift_beginAccess();
    v24 = *(_QWORD **)(a1 + 48);
    swift_beginAccess();
    if ((sub_1AD350DB4(v24, *(_QWORD **)(a2 + 48)) & 1) == 0)
      return 0;
    swift_beginAccess();
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 64);
    swift_beginAccess();
    v27 = *(_QWORD *)(a2 + 64);
    if (v26)
    {
      if (!v27)
        return 0;
      if (v25 != *(_QWORD *)(a2 + 56) || v26 != v27)
      {
        v28 = sub_1AD63C2A8();
        result = 0;
        if ((v28 & 1) == 0)
          return result;
      }
    }
    else if (v27)
    {
      return 0;
    }
    swift_beginAccess();
    v29 = *(_QWORD *)(a1 + 72);
    v30 = *(_QWORD *)(a1 + 80);
    swift_beginAccess();
    v31 = *(_QWORD *)(a2 + 80);
    if (v30)
    {
      if (!v31)
        return 0;
      if (v29 != *(_QWORD *)(a2 + 72) || v30 != v31)
      {
        v32 = sub_1AD63C2A8();
        result = 0;
        if ((v32 & 1) == 0)
          return result;
      }
    }
    else if (v31)
    {
      return 0;
    }
    swift_beginAccess();
    v33 = *(unsigned __int8 *)(a1 + 88);
    swift_beginAccess();
    v34 = *(unsigned __int8 *)(a2 + 88);
    if (v33 == 2)
    {
      if (v34 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v34 == 2 || ((v34 ^ v33) & 1) != 0)
        return result;
    }
    swift_beginAccess();
    v35 = *(unsigned __int8 *)(a1 + 89);
    swift_beginAccess();
    v36 = *(unsigned __int8 *)(a2 + 89);
    if (v35 == 2)
    {
      if (v36 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v36 == 2 || ((v36 ^ v35) & 1) != 0)
        return result;
    }
    swift_beginAccess();
    v37 = *(unsigned __int8 *)(a1 + 90);
    swift_beginAccess();
    v38 = *(unsigned __int8 *)(a2 + 90);
    if (v37 == 5)
    {
      if (v38 != 5)
        return 0;
    }
    else
    {
      result = 0;
      if (v38 == 5 || v37 != v38)
        return result;
    }
    v39 = a1
        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
    swift_beginAccess();
    sub_1AD3E7BEC(v39, (uint64_t)v14);
    v40 = a2
        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
    swift_beginAccess();
    v41 = v94;
    v42 = v94 + *(int *)(v7 + 48);
    sub_1AD3E7BEC((uint64_t)v14, v94);
    sub_1AD3E7BEC(v40, v42);
    v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v43(v41, 1, v4) == 1)
    {
      swift_retain();
      swift_retain();
      sub_1AD009758((uint64_t)v14, &qword_1EECDB318);
      if (v43(v42, 1, v4) == 1)
      {
        sub_1AD009758(v41, &qword_1EECDB318);
        goto LABEL_55;
      }
    }
    else
    {
      sub_1AD3E7BEC(v41, (uint64_t)v12);
      if (v43(v42, 1, v4) != 1)
      {
        v44 = v93;
        sub_1AD3E7C34(v42, (uint64_t)v93);
        swift_retain();
        swift_retain();
        v45 = sub_1AD3E81A4(v12, v44);
        sub_1AD3E7C78((uint64_t)v44);
        sub_1AD009758((uint64_t)v14, &qword_1EECDB318);
        sub_1AD3E7C78((uint64_t)v12);
        sub_1AD009758(v41, &qword_1EECDB318);
        if ((v45 & 1) == 0)
          goto LABEL_51;
LABEL_55:
        v46 = a1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified;
        swift_beginAccess();
        v47 = *(double *)v46;
        v48 = *(_BYTE *)(v46 + 8);
        v49 = a2
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified;
        swift_beginAccess();
        if ((v48 & 1) != 0)
        {
          if ((*(_BYTE *)(v49 + 8) & 1) == 0)
            goto LABEL_51;
        }
        else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v47 != *(double *)v49)
        {
          goto LABEL_51;
        }
        v50 = (_QWORD **)(a1
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories);
        swift_beginAccess();
        v51 = *v50;
        v52 = (_QWORD **)(a2
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories);
        swift_beginAccess();
        if ((sub_1AD350DB4(v51, *v52) & 1) == 0)
          goto LABEL_51;
        v53 = a1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted;
        swift_beginAccess();
        v54 = *(double *)v53;
        v55 = *(_BYTE *)(v53 + 8);
        v56 = a2
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted;
        swift_beginAccess();
        if ((v55 & 1) != 0)
        {
          if ((*(_BYTE *)(v56 + 8) & 1) == 0)
            goto LABEL_51;
        }
        else if ((*(_BYTE *)(v56 + 8) & 1) != 0 || v54 != *(double *)v56)
        {
          goto LABEL_51;
        }
        v57 = a1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited;
        swift_beginAccess();
        v58 = *(double *)v57;
        v59 = *(_BYTE *)(v57 + 8);
        v60 = a2
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited;
        swift_beginAccess();
        if ((v59 & 1) != 0)
        {
          if ((*(_BYTE *)(v60 + 8) & 1) == 0)
            goto LABEL_51;
        }
        else if ((*(_BYTE *)(v60 + 8) & 1) != 0 || v58 != *(double *)v60)
        {
          goto LABEL_51;
        }
        v61 = (uint64_t *)(a1
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
        swift_beginAccess();
        v62 = *v61;
        v63 = v61[1];
        v64 = (_QWORD *)(a2
                       + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
        swift_beginAccess();
        v65 = v64[1];
        if (v63)
        {
          if (!v65 || (v62 != *v64 || v63 != v65) && (sub_1AD63C2A8() & 1) == 0)
            goto LABEL_51;
        }
        else if (v65)
        {
          goto LABEL_51;
        }
        v66 = (uint64_t *)(a1
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
        swift_beginAccess();
        v67 = *v66;
        v68 = v66[1];
        v69 = (_QWORD *)(a2
                       + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
        swift_beginAccess();
        v70 = v69[1];
        if (v68)
        {
          if (!v70 || (v67 != *v69 || v68 != v70) && (sub_1AD63C2A8() & 1) == 0)
            goto LABEL_51;
        }
        else if (v70)
        {
          goto LABEL_51;
        }
        v71 = (uint64_t *)(a1
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant);
        swift_beginAccess();
        v72 = *v71;
        v73 = v71[1];
        v74 = (uint64_t *)(a2
                        + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant);
        swift_beginAccess();
        v75 = *v74;
        v76 = v74[1];
        if (v73 >> 60 == 15)
        {
          if (v76 >> 60 == 15)
          {
LABEL_91:
            v79 = (unsigned __int8 *)(a1
                                    + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus);
            swift_beginAccess();
            v80 = *v79;
            v81 = (unsigned __int8 *)(a2
                                    + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus);
            swift_beginAccess();
            v82 = *v81;
            if (v80 == 3)
            {
              if (v82 != 3)
                goto LABEL_51;
            }
            else if (v82 == 3 || v80 != v82)
            {
              goto LABEL_51;
            }
            v83 = (uint64_t *)(a1
                            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations);
            swift_beginAccess();
            v84 = *v83;
            v85 = (uint64_t *)(a2
                            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations);
            swift_beginAccess();
            v86 = *v85;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v87 = sub_1AD354030(v84, v86);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v87 & 1) != 0)
            {
              v88 = (unsigned __int8 *)(a1
                                      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode);
              swift_beginAccess();
              v89 = *v88;
              swift_release();
              v90 = (unsigned __int8 *)(a2
                                      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode);
              swift_beginAccess();
              v91 = *v90;
              swift_release();
              if (v89 != 3)
              {
                result = 0;
                if (v91 == 3 || v89 != v91)
                  return result;
                return 1;
              }
              return v91 == 3;
            }
LABEL_51:
            swift_release();
            swift_release();
            return 0;
          }
        }
        else if (v76 >> 60 != 15)
        {
          sub_1AD00408C(v72, v73);
          sub_1AD00408C(v75, v76);
          sub_1AD3DB778(v72, v73);
          v78 = v77;
          sub_1AD004118(v75, v76);
          sub_1AD004118(v72, v73);
          if ((v78 & 1) == 0)
            goto LABEL_51;
          goto LABEL_91;
        }
        sub_1AD00408C(v72, v73);
        sub_1AD00408C(v75, v76);
        sub_1AD004118(v72, v73);
        sub_1AD004118(v75, v76);
        goto LABEL_51;
      }
      swift_retain();
      swift_retain();
      sub_1AD009758((uint64_t)v14, &qword_1EECDB318);
      sub_1AD3E7C78((uint64_t)v12);
    }
    sub_1AD009758(v41, &qword_1EECDC160);
    goto LABEL_51;
  }
  return result;
}

uint64_t sub_1AD3E6DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_1AD63B240();
  v4 = *(int *)(a1 + 20);
  if (qword_1EECD1520 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_1EECDBF30;
  return swift_retain();
}

unint64_t sub_1AD3E6E48()
{
  return 0xD000000000000019;
}

uint64_t sub_1AD3E6E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD3E4B2C(a1, a2, a3);
}

uint64_t sub_1AD3E6E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD3E5694(a1, a2, a3);
}

uint64_t sub_1AD3E6E8C()
{
  sub_1ACFF9724(&qword_1EECDC118, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD6810E4);
  return sub_1AD63B27C();
}

uint64_t sub_1AD3E6EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1518, (uint64_t)qword_1EED83A20, a1);
}

uint64_t sub_1AD3E6EF8()
{
  sub_1ACFF9724(&qword_1EECDB310, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD68166C);
  return sub_1AD63B354();
}

uint64_t sub_1AD3E6F38()
{
  sub_1ACFF9724(&qword_1EECDB310, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD68166C);
  return sub_1AD63B360();
}

uint64_t sub_1AD3E6F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A38);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD648170;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Invite";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Request";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E70DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1528, (uint64_t)qword_1EED83A38, a1);
}

uint64_t sub_1AD3E70F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A50);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD648170;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Outgoing";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Incoming";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E724C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1530, (uint64_t)qword_1EED83A50, a1);
}

uint64_t sub_1AD3E7268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A68);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD67B8B0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "StatusPending";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "StatusAccepted";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "StatusDeclined";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "StatusRescinded";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "StatusRevoked";
  *(_QWORD *)(v16 + 8) = 13;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E746C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1538, (uint64_t)qword_1EED83A68, a1);
}

uint64_t sub_1AD3E7488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A80);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD64CE50;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "None";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Pending";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "Accepted";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E7618@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(&qword_1EECD1540, (uint64_t)qword_1EED83A80, a1);
}

uint64_t sub_1AD3E7634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1AD63B420();
  __swift_allocate_value_buffer(v0, qword_1EED83A98);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EED83A98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1D8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB1E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD64CE50;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NotSet";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1AD63B3FC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "No";
  *((_QWORD *)v11 + 1) = 2;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "Yes";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1AD63B408();
}

uint64_t sub_1AD3E77C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD371FF8(qword_1EECD1548, (uint64_t)qword_1EED83A98, a1);
}

uint64_t sub_1AD3E77DC()
{
  return sub_1ACFF9724(&qword_1EECDC050, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD68102C);
}

uint64_t sub_1AD3E7808()
{
  return sub_1ACFF9724(&qword_1EECDB310, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD68166C);
}

uint64_t sub_1AD3E7834()
{
  return sub_1ACFF9724(&qword_1EECDC058, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD681054);
}

uint64_t sub_1AD3E7860()
{
  return sub_1ACFF9724(&qword_1EECDC060, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68111C);
}

uint64_t sub_1AD3E788C()
{
  return sub_1ACFF9724(&qword_1EECDC068, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD68120C);
}

uint64_t sub_1AD3E78B8()
{
  return sub_1ACFF9724(&qword_1EECDC070, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD681144);
}

uint64_t sub_1AD3E78E4()
{
  return sub_1ACFF9724(&qword_1EECDC078, type metadata accessor for HealthSharingAuthorization, (uint64_t)&unk_1AD681184);
}

uint64_t sub_1AD3E7910()
{
  return sub_1ACFF9724(&qword_1EECDC080, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681284);
}

uint64_t sub_1AD3E793C()
{
  return sub_1ACFF9724(&qword_1EECDC088, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD681374);
}

uint64_t sub_1AD3E7968()
{
  return sub_1ACFF9724(&qword_1EECDC090, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD6812AC);
}

uint64_t sub_1AD3E7994()
{
  return sub_1ACFF9724(&qword_1EECDC098, type metadata accessor for HealthSharingSetupMetadata, (uint64_t)&unk_1AD6812EC);
}

uint64_t sub_1AD3E79C0()
{
  return sub_1ACFF9724(&qword_1EECDC0A0, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6813EC);
}

uint64_t type metadata accessor for HealthSharingSetupInvitationToken(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1EECDC168);
}

uint64_t sub_1AD3E7A00()
{
  return sub_1ACFF9724(&qword_1EECDC0A8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD6814DC);
}

uint64_t sub_1AD3E7A2C()
{
  return sub_1ACFF9724(&qword_1EECDC0B0, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD681414);
}

uint64_t sub_1AD3E7A58()
{
  return sub_1ACFF9724(&qword_1EECDC0B8, type metadata accessor for HealthSharingSetupInvitationToken, (uint64_t)&unk_1AD681454);
}

uint64_t sub_1AD3E7A84()
{
  return sub_1AD0D73A4(&qword_1EECDC0C0, &qword_1EECDC0C8);
}

uint64_t sub_1AD3E7AA8()
{
  return sub_1AD0D73A4(&qword_1EECDC0D0, &qword_1EECDC0D8);
}

uint64_t sub_1AD3E7ACC()
{
  return sub_1AD0D73A4(&qword_1EECDC0E0, &qword_1EECDC0E8);
}

uint64_t sub_1AD3E7AF0()
{
  return sub_1AD0D73A4(&qword_1EECDC0F0, &qword_1EECDC0F8);
}

uint64_t sub_1AD3E7B14()
{
  return sub_1AD0D73A4(&qword_1EECDC100, &qword_1EECDC108);
}

uint64_t sub_1AD3E7B38()
{
  return sub_1ACFF9724(&qword_1EECDC110, type metadata accessor for HealthSummarySharingEntry, (uint64_t)&unk_1AD681094);
}

unint64_t sub_1AD3E7B64()
{
  unint64_t result;

  result = qword_1EECDC120;
  if (!qword_1EECDC120)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680EB4, &type metadata for HealthSummarySharingEntry.WheelchairUse);
    atomic_store(result, (unint64_t *)&qword_1EECDC120);
  }
  return result;
}

unint64_t sub_1AD3E7BA8()
{
  unint64_t result;

  result = qword_1EECDC128;
  if (!qword_1EECDC128)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680DCC, &type metadata for HealthSummarySharingEntry.NotificationStatus);
    atomic_store(result, (unint64_t *)&qword_1EECDC128);
  }
  return result;
}

uint64_t sub_1AD3E7BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3E7C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HealthSharingSetupMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3E7C78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HealthSharingSetupMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AD3E7CB4()
{
  unint64_t result;

  result = qword_1EECDC130;
  if (!qword_1EECDC130)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680CE4, &type metadata for HealthSummarySharingEntry.Status);
    atomic_store(result, (unint64_t *)&qword_1EECDC130);
  }
  return result;
}

unint64_t sub_1AD3E7CF8()
{
  unint64_t result;

  result = qword_1EECDC138;
  if (!qword_1EECDC138)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680BFC, &type metadata for HealthSummarySharingEntry.Direction);
    atomic_store(result, (unint64_t *)&qword_1EECDC138);
  }
  return result;
}

unint64_t sub_1AD3E7D3C()
{
  unint64_t result;

  result = qword_1EECDC140;
  if (!qword_1EECDC140)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD680B14, &type metadata for HealthSummarySharingEntry.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1EECDC140);
  }
  return result;
}

uint64_t sub_1AD3E7D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v29[12];
  int v30;

  v4 = sub_1AD63B24C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v29[-v9];
  v11 = type metadata accessor for HealthSharingSetupInvitationToken(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_17;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (sub_1AD63C2A8() & 1) != 0))
  {
LABEL_10:
    v19 = *(int *)(v11 + 24);
    v20 = *(_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (uint64_t *)(a2 + v19);
    v23 = *v22;
    v24 = v22[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 == 15)
        goto LABEL_16;
      goto LABEL_14;
    }
    if (v24 >> 60 == 15)
    {
LABEL_14:
      sub_1AD00408C(v20, v21);
      sub_1AD00408C(v23, v24);
      sub_1AD004118(v20, v21);
      sub_1AD004118(v23, v24);
      goto LABEL_17;
    }
    sub_1AD00408C(v20, v21);
    sub_1AD00408C(v23, v24);
    sub_1AD3DB778(v20, v21);
    v30 = v25;
    sub_1AD004118(v23, v24);
    sub_1AD004118(v20, v21);
    if ((v30 & 1) != 0)
    {
LABEL_16:
      v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
      v26(v10, a1, v4);
      v26(v8, a2, v4);
      sub_1ACFF9724(&qword_1EECDAEC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v18 = sub_1AD63B738();
      v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v27(v8, v4);
      v27(v10, v4);
      return v18 & 1;
    }
LABEL_17:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1AD3E7FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;

  v4 = sub_1AD63B24C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v34 - v9;
  v11 = (int *)type metadata accessor for HealthSharingAuthorization(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_28;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_28;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (sub_1AD63C2A8() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_28;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((sub_1AD63C2A8() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_28;
    }
    v25 = v11[7];
    v26 = (_QWORD *)(a1 + v25);
    v27 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (_QWORD *)(a2 + v25);
    v29 = v28[1];
    if (v27)
    {
      if (v29)
      {
        if (*v26 != *v28 || v27 != v29)
        {
          v18 = 0;
          if ((sub_1AD63C2A8() & 1) == 0)
            return v18 & 1;
        }
LABEL_30:
        v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v32(v10, a1, v4);
        v32(v8, a2, v4);
        sub_1ACFF9724(&qword_1EECDAEC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v18 = sub_1AD63B738();
        v33 = *(void (**)(char *, uint64_t))(v5 + 8);
        v33(v8, v4);
        v33(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v29)
    {
      goto LABEL_30;
    }
LABEL_28:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1AD3E81A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  char v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v4 = sub_1AD63B24C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v45 - v9;
  v11 = (int *)type metadata accessor for HealthSharingSetupMetadata(0);
  v12 = v11[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_25;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_25;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (sub_1AD63C2A8() & 1) != 0))
  {
LABEL_10:
    v45 = v5;
    v46 = v4;
    v19 = v11[7];
    v20 = *(uint64_t *)((char *)a1 + v19);
    v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = *v22;
    v24 = v22[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 != 15)
        goto LABEL_24;
    }
    else
    {
      if (v24 >> 60 == 15)
        goto LABEL_24;
      sub_1AD00408C(v20, v21);
      sub_1AD00408C(v23, v24);
      sub_1AD3DB778(v20, v21);
      v26 = v25;
      sub_1AD004118(v23, v24);
      sub_1AD004118(v20, v21);
      if ((v26 & 1) == 0)
        goto LABEL_25;
    }
    v27 = v11[8];
    v20 = *(uint64_t *)((char *)a1 + v27);
    v21 = *(uint64_t *)((char *)a1 + v27 + 8);
    v28 = (uint64_t *)((char *)a2 + v27);
    v23 = *v28;
    v24 = v28[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 != 15)
        goto LABEL_24;
LABEL_20:
      v31 = v11[9];
      v20 = *(uint64_t *)((char *)a1 + v31);
      v21 = *(uint64_t *)((char *)a1 + v31 + 8);
      v32 = (uint64_t *)((char *)a2 + v31);
      v23 = *v32;
      v24 = v32[1];
      if (v21 >> 60 == 15)
      {
        if (v24 >> 60 == 15)
          goto LABEL_28;
      }
      else if (v24 >> 60 != 15)
      {
        sub_1AD00408C(v20, v21);
        sub_1AD00408C(v23, v24);
        sub_1AD3DB778(v20, v21);
        v35 = v34;
        sub_1AD004118(v23, v24);
        sub_1AD004118(v20, v21);
        if ((v35 & 1) == 0)
          goto LABEL_25;
LABEL_28:
        v36 = v11[10];
        v37 = (uint64_t *)((char *)a1 + v36);
        v38 = *(uint64_t *)((char *)a1 + v36 + 8);
        v39 = (uint64_t *)((char *)a2 + v36);
        v40 = v39[1];
        if (v38)
        {
          v42 = v45;
          v41 = v46;
          if (!v40)
            goto LABEL_25;
          if (*v37 != *v39 || v38 != v40)
          {
            v18 = 0;
            if ((sub_1AD63C2A8() & 1) == 0)
              return v18 & 1;
          }
        }
        else
        {
          v42 = v45;
          v41 = v46;
          if (v40)
            goto LABEL_25;
        }
        if ((sub_1AD350FF8(*a1, *a2) & 1) != 0)
        {
          v43 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
          v43(v10, (char *)a1 + v11[5], v41);
          v43(v8, (char *)a2 + v11[5], v41);
          sub_1ACFF9724(&qword_1EECDAEC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v18 = sub_1AD63B738();
          v44 = *(void (**)(char *, uint64_t))(v42 + 8);
          v44(v8, v41);
          v44(v10, v41);
          return v18 & 1;
        }
        goto LABEL_25;
      }
LABEL_24:
      sub_1AD00408C(v20, v21);
      sub_1AD00408C(v23, v24);
      sub_1AD004118(v20, v21);
      sub_1AD004118(v23, v24);
      goto LABEL_25;
    }
    if (v24 >> 60 == 15)
      goto LABEL_24;
    sub_1AD00408C(v20, v21);
    sub_1AD00408C(v23, v24);
    sub_1AD3DB778(v20, v21);
    v30 = v29;
    sub_1AD004118(v23, v24);
    sub_1AD004118(v20, v21);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_25:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1AD3E8550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_1AD63B24C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for HealthSummarySharingEntry(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), v14 = sub_1AD3E6358(v12, v13), swift_release(), swift_release(), v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_1ACFF9724(&qword_1EECDAEC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = sub_1AD63B738();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1AD3E86B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE *v60;
  _BYTE *v61;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  _BYTE *v76;
  _QWORD *v77;
  _BYTE *v78;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB318);
  MEMORY[0x1E0C80A78](v3);
  v69 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v1 + 72) = 0u;
  v63 = (_QWORD *)(v1 + 72);
  *(_OWORD *)(v1 + 56) = 0u;
  *(_WORD *)(v1 + 88) = 514;
  v64 = (_BYTE *)(v1 + 88);
  v65 = v1 + 89;
  *(_BYTE *)(v1 + 90) = 5;
  v6 = v1
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
  v66 = (_BYTE *)(v1 + 90);
  v67 = v1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
  v7 = type metadata accessor for HealthSharingSetupMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified;
  v68 = v1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v70 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories) = v5;
  v9 = v1
     + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted;
  v71 = v1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited;
  v72 = v1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
  v73 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
  v74 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
  *v12 = 0;
  v12[1] = 0;
  v75 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant) = xmmword_1AD67A180;
  v76 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus) = 3;
  v77 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations) = v5;
  v78 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode) = 3;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v14;
  *(_QWORD *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v16;
  *(_QWORD *)(v1 + 40) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v19;
  *(_QWORD *)(v1 + 64) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v22 = v63;
  swift_beginAccess();
  *v22 = v21;
  *(_QWORD *)(v1 + 80) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v20) = *(_BYTE *)(a1 + 88);
  v23 = v64;
  swift_beginAccess();
  *v23 = v20;
  swift_beginAccess();
  LOBYTE(v20) = *(_BYTE *)(a1 + 89);
  swift_beginAccess();
  *(_BYTE *)(v1 + 89) = v20;
  swift_beginAccess();
  LOBYTE(v20) = *(_BYTE *)(a1 + 90);
  v24 = v66;
  swift_beginAccess();
  *v24 = v20;
  v25 = a1
      + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingSetupMetadata;
  swift_beginAccess();
  v26 = v25;
  v27 = v69;
  sub_1AD3E7BEC(v26, v69);
  v28 = v67;
  swift_beginAccess();
  sub_1AD382AA4(v27, v28);
  swift_endAccess();
  v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateModified);
  swift_beginAccess();
  v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  v31 = v68;
  swift_beginAccess();
  *(_QWORD *)v31 = v30;
  *(_BYTE *)(v31 + 8) = (_BYTE)v29;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__authorizationCategories);
  swift_beginAccess();
  v33 = *v32;
  v34 = v70;
  swift_beginAccess();
  *v34 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateAccepted);
  swift_beginAccess();
  v36 = *v35;
  LOBYTE(v35) = *((_BYTE *)v35 + 8);
  v37 = v71;
  swift_beginAccess();
  *(_QWORD *)v37 = v36;
  *(_BYTE *)(v37 + 8) = (_BYTE)v35;
  v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__dateInvited);
  swift_beginAccess();
  v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  v40 = v72;
  swift_beginAccess();
  *(_QWORD *)v40 = v39;
  *(_BYTE *)(v40 + 8) = (_BYTE)v38;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__invitationUuid);
  swift_beginAccess();
  v43 = *v41;
  v42 = v41[1];
  v44 = v73;
  swift_beginAccess();
  *v44 = v43;
  v44[1] = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__cloudKitIdentifier);
  swift_beginAccess();
  v47 = *v45;
  v46 = v45[1];
  v48 = v74;
  swift_beginAccess();
  *v48 = v47;
  v48[1] = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__ownerParticipant);
  swift_beginAccess();
  v51 = *v49;
  v50 = v49[1];
  v52 = v75;
  swift_beginAccess();
  v53 = *v52;
  v54 = v52[1];
  *v52 = v51;
  v52[1] = v50;
  sub_1AD00408C(v51, v50);
  sub_1AD004118(v53, v54);
  v55 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__notificationStatus);
  swift_beginAccess();
  LOBYTE(v55) = *v55;
  v56 = v76;
  swift_beginAccess();
  *v56 = (_BYTE)v55;
  v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__sharingAuthorizations);
  swift_beginAccess();
  v58 = *v57;
  v59 = v77;
  swift_beginAccess();
  *v59 = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV9BlastDoor25HealthSummarySharingEntryP33_DEAEB66CBC3E1B66E4C8080B1AEAC45D13_StorageClass__userWheelchairMode);
  swift_beginAccess();
  LOBYTE(v60) = *v60;
  v61 = v78;
  swift_beginAccess();
  *v61 = (_BYTE)v60;
  return v1;
}

unint64_t sub_1AD3E8E10(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t *sub_1AD3E8E20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AD63B24C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (_OWORD *)((char *)a2 + v9);
    v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)v13 = *v14;
    }
    else
    {
      v17 = *(_QWORD *)v14;
      sub_1AD0040A0(v17, v15);
      *(_QWORD *)v13 = v17;
      *((_QWORD *)v13 + 1) = v15;
    }
  }
  return a1;
}

uint64_t sub_1AD3E8EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_1AD00412C(*v6, v7);
  return result;
}

uint64_t sub_1AD3E8F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = *(_QWORD *)(v13 + 8);
  swift_bridgeObjectRetain();
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v15 = *(_QWORD *)v13;
    sub_1AD0040A0(v15, v14);
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v14;
  }
  return a1;
}

uint64_t sub_1AD3E9000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *(_QWORD *)(a2 + v10 + 8);
  if (*(_QWORD *)(a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_1AD0040A0(v15, v13);
      v16 = *v11;
      v17 = v11[1];
      *v11 = v15;
      v11[1] = v13;
      sub_1AD00412C(v16, v17);
      return a1;
    }
    sub_1AD007EC0((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    return a1;
  }
  v14 = *v12;
  sub_1AD0040A0(v14, v13);
  *v11 = v14;
  v11[1] = v13;
  return a1;
}

uint64_t sub_1AD3E90FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = sub_1AD63B24C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      v17 = *v13;
      *v13 = *v14;
      v13[1] = v16;
      sub_1AD00412C(v17, v15);
      return a1;
    }
    sub_1AD007EC0((uint64_t)v13);
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  return a1;
}

uint64_t sub_1AD3E91B8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E91C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3E91D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63B24C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD3E9268()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v1 = (_QWORD *)v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v30 - v6;
  v34 = MEMORY[0x1E0DEE9E0];
  if ((*(_BYTE *)(v0 + 25) & 1) != 0)
    goto LABEL_16;
  v8 = *(_BYTE *)(v0 + 24);
  v9 = MEMORY[0x1E0DEE9E0];
  if ((v8 & 1) == 0)
  {
    v10 = v1[2];
    v33 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v32 = v10;
    sub_1AD002F7C(&v32, v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = v9;
    sub_1AD43F448(v31, 0x646E616D6D6F63, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v9 = v30;
    v34 = v30;
    swift_bridgeObjectRelease();
  }
  v12 = v1[7];
  if (v12)
  {
    if (v12 != 1)
    {
      v13 = v1[6];
      v33 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v32 = v13;
      *((_QWORD *)&v32 + 1) = v12;
      sub_1AD002F7C(&v32, v31);
      swift_bridgeObjectRetain();
      v14 = swift_isUniquelyReferenced_nonNull_native();
      v30 = v9;
      sub_1AD43F448(v31, 0x746E65696C63, 0xE600000000000000, v14);
      v34 = v30;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
LABEL_16:
    result = sub_1AD63BE28();
    __break(1u);
    return result;
  }
LABEL_7:
  v15 = type metadata accessor for IDSSampleMessage(0);
  v16 = (uint64_t)v1 + *(int *)(v15 + 24);
  sub_1AD0E48B8(v16, (uint64_t)v7);
  v17 = sub_1AD63B03C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v7, 1, v17);
  sub_1AD009758((uint64_t)v7, (uint64_t *)&unk_1ED2E2D98);
  if (v20 != 1)
  {
    sub_1AD0E48B8(v16, (uint64_t)v5);
    if (v19(v5, 1, v17) == 1)
    {
      sub_1AD009758((uint64_t)v5, (uint64_t *)&unk_1ED2E2D98);
      sub_1AD43D86C(1702125924, 0xE400000000000000, &v32);
      sub_1AD009758((uint64_t)&v32, &qword_1EECDC5F0);
    }
    else
    {
      v33 = v17;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v32);
      (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 32))(boxed_opaque_existential_0, v5, v17);
      sub_1AD002F7C(&v32, v31);
      v22 = v34;
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v30 = v22;
      sub_1AD43F448(v31, 1702125924, 0xE400000000000000, v23);
      v34 = v30;
      swift_bridgeObjectRelease();
    }
  }
  v24 = (char *)v1 + *(int *)(v15 + 28);
  if ((v24[25] & 1) != 0)
    goto LABEL_16;
  if ((v24[24] & 1) != 0)
    return v34;
  v25 = *((_QWORD *)v24 + 2);
  v33 = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v32 = v25;
  sub_1AD002F7C(&v32, v31);
  v26 = v34;
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v30 = v26;
  sub_1AD43F448(v31, 0x6E6F6973726576, 0xE700000000000000, v27);
  v28 = v30;
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1AD3E95E4()
{
  uint64_t v0;

  sub_1AD3E9268();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E9634()
{
  uint64_t v0;

  sub_1AD3E9268();
  v0 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD3E9688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];

  v1 = v0;
  v2 = type metadata accessor for IDSSampleMessage(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for IDSSampleMessageType(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD3E97D8(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1AD3E981C((uint64_t)v7, (uint64_t)v4);
    sub_1AD3E9268();
    sub_1AD066230((uint64_t)v4, type metadata accessor for IDSSampleMessage);
  }
  else
  {
    v10[15] = *v7;
    sub_1AD002C18();
  }
  v8 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t type metadata accessor for IDSSampleMessage(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E1998);
}

uint64_t type metadata accessor for IDSSampleMessageType(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E19C8);
}

uint64_t sub_1AD3E97D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IDSSampleMessageType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3E981C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IDSSampleMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3E9864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];

  v1 = v0;
  v2 = type metadata accessor for IDSSampleMessage(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for IDSSampleMessageType(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD3E97D8(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1AD3E981C((uint64_t)v7, (uint64_t)v4);
    sub_1AD3E9268();
    sub_1AD066230((uint64_t)v4, type metadata accessor for IDSSampleMessage);
  }
  else
  {
    v10[15] = *v7;
    sub_1AD002C18();
  }
  v8 = sub_1AD63B678();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1AD3E998C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECD7098, type metadata accessor for IDSSampleMessage, (uint64_t)&unk_1AD650F98);
  result = sub_1ACFF9724(&qword_1EECD7060, type metadata accessor for IDSSampleMessage, (uint64_t)&unk_1AD650FC0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3E99E8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECD3730, type metadata accessor for IDSSampleMessageType, (uint64_t)&unk_1AD6570C8);
  result = sub_1ACFF9724(&qword_1EECD3740, type metadata accessor for IDSSampleMessageType, (uint64_t)&unk_1AD6570F0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3E9A44(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECDC178, type metadata accessor for IDSSampleMessageResult, (uint64_t)&unk_1AD650FE8);
  result = sub_1ACFF9724(&qword_1EECDC180, type metadata accessor for IDSSampleMessageResult, (uint64_t)&unk_1AD651010);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for IDSSampleMessageResult(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E19D8);
}

uint64_t sub_1AD3E9AB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = v5;
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    v10 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v10;
    v11 = a2 + 6;
    v12 = a2[7];
    swift_retain();
    swift_retain();
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 48) = *v11;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)v11;
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRetain();
    }
    v13 = *(int *)(a3 + 24);
    v14 = (void *)(a1 + v13);
    v15 = (char *)a2 + v13;
    v16 = sub_1AD63B03C();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = *(int *)(a3 + 28);
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v22;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_WORD *)(v20 + 24) = *(_WORD *)(v21 + 24);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1AD3E9C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 56) != 1)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1AD63B03C();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_release();
}

uint64_t sub_1AD3E9CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 48) = *v8;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)v8;
    *(_QWORD *)(a1 + 56) = v9;
    swift_bridgeObjectRetain();
  }
  v10 = *(int *)(a3 + 24);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = sub_1AD63B03C();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_WORD *)(v17 + 24) = *(_WORD *)(v18 + 24);
  swift_retain();
  return a1;
}

uint64_t sub_1AD3E9E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain();
  swift_release();
  v9 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) == 1)
  {
    if (v9 != 1)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 == 1)
  {
    sub_1AD009758(a1 + 48, &qword_1ED2E3198);
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v10 = *(int *)(a3 + 24);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_1AD63B03C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_13;
  }
  if (v17)
  {
LABEL_13:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v19 = *(int *)(a3 + 28);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a2 + v19 + 8);
  *(_QWORD *)v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(v20 + 8) = v22;
  swift_retain();
  swift_release();
  v23 = *(_QWORD *)(v21 + 16);
  *(_WORD *)(v20 + 24) = *(_WORD *)(v21 + 24);
  *(_QWORD *)(v20 + 16) = v23;
  return a1;
}

_OWORD *sub_1AD3EA004(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 10) = *(_OWORD *)((char *)a2 + 10);
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1AD63B03C();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  *v14 = *v15;
  *(_OWORD *)((char *)v14 + 10) = *(_OWORD *)((char *)v15 + 10);
  return a1;
}

uint64_t sub_1AD3EA0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v6 = (_OWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 56) == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 == 1)
  {
    sub_1AD009758(a1 + 48, &qword_1ED2E3198);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1AD63B03C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_11;
  }
  if (v15)
  {
LABEL_11:
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_12:
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)v19;
  swift_release();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  *(_WORD *)(v18 + 24) = *(_WORD *)(v19 + 24);
  return a1;
}

uint64_t sub_1AD3EA2B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3EA2BC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1AD3EA33C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1AD3EA348(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1AD3EA3C0()
{
  unint64_t v0;

  sub_1AD0E67F0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *sub_1AD3EA43C(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v7;
    a1[2] = *((_QWORD *)a2 + 2);
    *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = a2 + 48;
    v10 = *((_QWORD *)a2 + 7);
    swift_retain();
    swift_retain();
    if (v10 == 1)
    {
      *((_OWORD *)a1 + 3) = *v9;
    }
    else
    {
      a1[6] = *(_QWORD *)v9;
      a1[7] = v10;
      swift_bridgeObjectRetain();
    }
    v12 = type metadata accessor for IDSSampleMessage(0);
    v13 = *(int *)(v12 + 24);
    v14 = (char *)a1 + v13;
    v15 = &a2[v13];
    v16 = sub_1AD63B03C();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = *(int *)(v12 + 28);
    v20 = (char *)a1 + v19;
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *((_WORD *)v20 + 12) = *((_WORD *)v21 + 12);
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_1AD3EA5F4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_release();
    swift_release();
    if (*(_QWORD *)(a1 + 56) != 1)
      swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(type metadata accessor for IDSSampleMessage(0) + 24);
    v4 = sub_1AD63B03C();
    v5 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1AD3EA6B8(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    a1[2] = *((_QWORD *)a2 + 2);
    *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
    v7 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v7;
    v8 = a2 + 48;
    v9 = *((_QWORD *)a2 + 7);
    swift_retain();
    swift_retain();
    if (v9 == 1)
    {
      *((_OWORD *)a1 + 3) = *v8;
    }
    else
    {
      a1[6] = *(_QWORD *)v8;
      a1[7] = v9;
      swift_bridgeObjectRetain();
    }
    v10 = type metadata accessor for IDSSampleMessage(0);
    v11 = *(int *)(v10 + 24);
    v12 = (char *)a1 + v11;
    v13 = &a2[v11];
    v14 = sub_1AD63B03C();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = *(int *)(v10 + 28);
    v18 = (char *)a1 + v17;
    v19 = &a2[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
    *((_WORD *)v18 + 12) = *((_WORD *)v19 + 12);
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1AD3EA848(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for IDSSampleMessageType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[2];
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      a1[2] = v7;
      v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      v9 = a2[7];
      swift_retain();
      swift_retain();
      if (v9 == 1)
      {
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      }
      else
      {
        a1[6] = a2[6];
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
      }
      v10 = type metadata accessor for IDSSampleMessage(0);
      v11 = *(int *)(v10 + 24);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_1AD63B03C();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = *(int *)(v10 + 28);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v20;
      v21 = *((_QWORD *)v19 + 2);
      *((_WORD *)v18 + 12) = *((_WORD *)v19 + 12);
      *((_QWORD *)v18 + 2) = v21;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *sub_1AD3EA9F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for IDSSampleMessageType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      *(_OWORD *)((char *)a1 + 10) = *(_OWORD *)((char *)a2 + 10);
      v6 = a2[3];
      a1[2] = a2[2];
      a1[3] = v6;
      v7 = type metadata accessor for IDSSampleMessage(0);
      v8 = *(int *)(v7 + 24);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_1AD63B03C();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v14 = *(int *)(v7 + 28);
      v15 = (_OWORD *)((char *)a1 + v14);
      v16 = (_OWORD *)((char *)a2 + v14);
      *v15 = *v16;
      *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v16 + 10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1AD3EAB4C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IDSSampleMessage(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *sub_1AD3EABBC(_QWORD *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = *(_QWORD *)(type metadata accessor for IDSSampleMessageType(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    a1[2] = *((_QWORD *)a2 + 2);
    *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
    v7 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v7;
    v8 = a2 + 48;
    v9 = *((_QWORD *)a2 + 7);
    swift_retain();
    swift_retain();
    if (v9 == 1)
    {
      *((_OWORD *)a1 + 3) = *v8;
    }
    else
    {
      a1[6] = *(_QWORD *)v8;
      a1[7] = v9;
      swift_bridgeObjectRetain();
    }
    v11 = type metadata accessor for IDSSampleMessage(0);
    v12 = *(int *)(v11 + 24);
    v13 = (char *)a1 + v12;
    v14 = &a2[v12];
    v15 = sub_1AD63B03C();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = *(int *)(v11 + 28);
    v19 = (char *)a1 + v18;
    v20 = &a2[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    *((_WORD *)v19 + 12) = *((_WORD *)v20 + 12);
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v4 + 64));
  }
  return a1;
}

uint64_t sub_1AD3EAD7C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for IDSSampleMessageType(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_release();
    swift_release();
    if (*(_QWORD *)(a1 + 56) != 1)
      swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(type metadata accessor for IDSSampleMessage(0) + 24);
    v4 = sub_1AD63B03C();
    v5 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1AD3EAE50(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = type metadata accessor for IDSSampleMessageType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v5;
    a1[2] = *((_QWORD *)a2 + 2);
    *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
    v6 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v6;
    v7 = a2 + 48;
    v8 = *((_QWORD *)a2 + 7);
    swift_retain();
    swift_retain();
    if (v8 == 1)
    {
      *((_OWORD *)a1 + 3) = *v7;
    }
    else
    {
      a1[6] = *(_QWORD *)v7;
      a1[7] = v8;
      swift_bridgeObjectRetain();
    }
    v9 = type metadata accessor for IDSSampleMessage(0);
    v10 = *(int *)(v9 + 24);
    v11 = (char *)a1 + v10;
    v12 = &a2[v10];
    v13 = sub_1AD63B03C();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v16 = *(int *)(v9 + 28);
    v17 = (char *)a1 + v16;
    v18 = &a2[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
    *((_WORD *)v17 + 12) = *((_WORD *)v18 + 12);
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1AD3EAFE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for IDSSampleMessageType);
    v4 = type metadata accessor for IDSSampleMessageType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      v6 = a2[2];
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      a1[2] = v6;
      v7 = a2[5];
      a1[4] = a2[4];
      a1[5] = v7;
      v8 = a2[7];
      swift_retain();
      swift_retain();
      if (v8 == 1)
      {
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      }
      else
      {
        a1[6] = a2[6];
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
      }
      v9 = type metadata accessor for IDSSampleMessage(0);
      v10 = *(int *)(v9 + 24);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_1AD63B03C();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v16 = *(int *)(v9 + 28);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v19;
      v20 = *((_QWORD *)v18 + 2);
      *((_WORD *)v17 + 12) = *((_WORD *)v18 + 12);
      *((_QWORD *)v17 + 2) = v20;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *sub_1AD3EB19C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;

  v4 = type metadata accessor for IDSSampleMessageType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    *(_OWORD *)((char *)a1 + 10) = *(_OWORD *)((char *)a2 + 10);
    v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = type metadata accessor for IDSSampleMessage(0);
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1AD63B03C();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v13 = *(int *)(v6 + 28);
    v14 = (_OWORD *)((char *)a1 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    *v14 = *v15;
    *(_OWORD *)((char *)v14 + 10) = *(_OWORD *)((char *)v15 + 10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1AD3EB2E4(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;

  if (a1 != a2)
  {
    sub_1AD066230((uint64_t)a1, type metadata accessor for IDSSampleMessageType);
    v4 = type metadata accessor for IDSSampleMessageType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      *(_OWORD *)((char *)a1 + 10) = *(_OWORD *)((char *)a2 + 10);
      v5 = a2[3];
      a1[2] = a2[2];
      a1[3] = v5;
      v6 = type metadata accessor for IDSSampleMessage(0);
      v7 = *(int *)(v6 + 24);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_1AD63B03C();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v13 = *(int *)(v6 + 28);
      v14 = (_OWORD *)((char *)a1 + v13);
      v15 = (_OWORD *)((char *)a2 + v13);
      *v14 = *v15;
      *(_OWORD *)((char *)v14 + 10) = *(_OWORD *)((char *)v15 + 10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1AD3EB444()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3EB450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IDSSampleMessageType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1AD3EB48C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3EB498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IDSSampleMessageType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1AD3EB4D8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IDSSampleMessageType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD3EB540@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EB574(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[1].n128_i64[0];
  v6 = v1[1].n128_i64[1];
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EB5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3EB644@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EB674(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EB6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

double sub_1AD3EB73C@<D0>(uint64_t (**a1)()@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E19F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD648160;
  *(_QWORD *)(inited + 32) = sub_1AD2F521C;
  *(_QWORD *)(inited + 40) = 0;
  sub_1AD280838((_QWORD *)inited, a1);
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v3 + 32) = sub_1AD2F521C;
  *(_QWORD *)(v3 + 40) = 0;
  sub_1AD280838((_QWORD *)v3, a1 + 4);
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v4 + 32) = sub_1AD2F521C;
  *(_QWORD *)(v4 + 40) = 0;
  sub_1AD280838((_QWORD *)v4, a1 + 8);
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v5 + 32) = sub_1AD2F521C;
  *(_QWORD *)(v5 + 40) = 0;
  sub_1AD280838((_QWORD *)v5, a1 + 12);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v6 + 32) = sub_1AD2F521C;
  *(_QWORD *)(v6 + 40) = 0;
  sub_1AD280838((_QWORD *)v6, a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A10);
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD648160;
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v8 + 32) = sub_1AD2F5220;
  *(_QWORD *)(v8 + 40) = 0;
  v9 = sub_1AD281264(v8);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2020);
  swift_arrayDestroy();
  *(_QWORD *)(v7 + 32) = sub_1AD0097FC;
  *(_QWORD *)(v7 + 40) = v10;
  sub_1AD2807A4((_QWORD *)v7, (uint64_t)(a1 + 20));
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_1AD648160;
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v12 + 32) = sub_1AD2F521C;
  *(_QWORD *)(v12 + 40) = 0;
  v13 = sub_1AD281264(v12);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  swift_setDeallocating();
  swift_arrayDestroy();
  *(_QWORD *)(v11 + 32) = sub_1AD00988C;
  *(_QWORD *)(v11 + 40) = v14;
  return sub_1AD2807A4((_QWORD *)v11, (uint64_t)(a1 + 24));
}

uint64_t sub_1AD3EB9C4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EB9F4(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBA44@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v4 = v1[6];
  v3 = v1[7];
  *a1 = v1[4];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EBA74(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u64[0] = v3;
  v1[3].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBAC4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[9];
  v4 = v1[10];
  v3 = v1[11];
  *a1 = v1[8];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EBAF4(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[4] = *a1;
  v1[5].n128_u64[0] = v3;
  v1[5].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBB44@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[13];
  v4 = v1[14];
  v3 = v1[15];
  *a1 = v1[12];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EBB74(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[6] = *a1;
  v1[7].n128_u64[0] = v3;
  v1[7].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBBC4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[17];
  v4 = v1[18];
  v3 = v1[19];
  *a1 = v1[16];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EBBF4(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[8] = *a1;
  v1[9].n128_u64[0] = v3;
  v1[9].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBC44@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[20];
  v2 = v1[21];
  v4 = v1[22];
  v5 = v1[23];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EBC78(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[11].n128_i64[0];
  v6 = v1[11].n128_i64[1];
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  v1[10] = *a1;
  v1[11].n128_u64[0] = v3;
  v1[11].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBCCC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[24];
  v2 = v1[25];
  v4 = v1[26];
  v5 = v1[27];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EBD00(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[13].n128_i64[0];
  v6 = v1[13].n128_i64[1];
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  v1[12] = *a1;
  v1[13].n128_u64[0] = v3;
  v1[13].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EBD54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EBDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EBE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EBEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EBF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EBFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 184) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3EC028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 216) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 208);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3EC0A4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EC0D4(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EC124@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v4 = v1[6];
  v3 = v1[7];
  *a1 = v1[4];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EC154(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u64[0] = v3;
  v1[3].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EC1A4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[9];
  v4 = v1[10];
  v3 = v1[11];
  *a1 = v1[8];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3EC1D4(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[4] = *a1;
  v1[5].n128_u64[0] = v3;
  v1[5].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EC224@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[12];
  v2 = v1[13];
  v4 = v1[14];
  v5 = v1[15];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EC258(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[7].n128_i64[0];
  v6 = v1[7].n128_i64[1];
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  v1[6] = *a1;
  v1[7].n128_u64[0] = v3;
  v1[7].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EC2AC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[16];
  v2 = v1[17];
  v4 = v1[18];
  v5 = v1[19];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EC2E0(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[9].n128_i64[0];
  v6 = v1[9].n128_i64[1];
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  v1[8] = *a1;
  v1[9].n128_u64[0] = v3;
  v1[9].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3EC334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EC3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EC424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EC49C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 120) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3EC518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 152) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3EC594@<X0>(uint64_t (**a1)(uint64_t)@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A18);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD648170;
  v3 = sub_1AD043FDC((uint64_t)&unk_1E5CB8868);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_arrayDestroy();
  *(_QWORD *)(inited + 32) = sub_1AD28D484;
  *(_QWORD *)(inited + 40) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2438);
  v5 = swift_initStackObject();
  *(_QWORD *)(v5 + 32) = 0x64756F6C6369;
  *(_OWORD *)(v5 + 16) = xmmword_1AD648160;
  *(_QWORD *)(v5 + 40) = 0xE600000000000000;
  *(_QWORD *)(v5 + 48) = &unk_1E5CB8838;
  v6 = sub_1AD0440D4(v5);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2610);
  swift_arrayDestroy();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(inited + 48) = sub_1AD32DFD8;
  *(_QWORD *)(inited + 56) = v7;
  return sub_1AD2809E4((_QWORD *)inited, a1);
}

uint64_t sub_1AD3EC6E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, (uint64_t *)&unk_1ED2E1A30);
}

uint64_t sub_1AD3EC704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1ACFF64C0(a1, (uint64_t)v5, (uint64_t *)&unk_1ED2E1A30);
  sub_1AD326FE8((uint64_t)v5, v1);
  return sub_1AD009758(a1, (uint64_t *)&unk_1ED2E1A30);
}

uint64_t sub_1AD3EC790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30);
  sub_1ACFF64C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1ED2E1A40);
  v7 = sub_1AD63AF28();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  sub_1AD009758((uint64_t)v5, &qword_1ED2E1A40);
  result = sub_1AD63BE28();
  __break(1u);
  return result;
}

uint64_t sub_1AD3EC8A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_1AD3EC8B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t sub_1AD3EC8C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t sub_1AD3EC8D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t LinkAttribute.init(range:link:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for LinkAttribute(0) + 20);
  v6 = sub_1AD63AF28();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t type metadata accessor for LinkAttribute(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E24C0);
}

uint64_t LinkIsRichLinkAttribute.init(range:isRichLink:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_1AD3EC948@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[7];
  v2 = v1[8];
  v4 = v1[9];
  v5 = v1[10];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3EC97C(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(_QWORD *)(v1 + 72) = v3;
  *(_QWORD *)(v1 + 80) = v4;
  return result;
}

uint64_t sub_1AD3EC9D0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[51];
  v4 = v1[52];
  v3 = v1[53];
  *a1 = v1[50];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3ECA00(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[25] = *a1;
  v1[26].n128_u64[0] = v3;
  v1[26].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3ECA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 80) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3ECACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 424))
  {
    v1 = *(_QWORD *)(v0 + 416);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD3ECB44())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECB54@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if ((unint64_t)(result + 1) < 3)
    v2 = result + 1;
  *a2 = v2;
  return result;
}

uint64_t sub_1AD3ECB6C()
{
  unsigned __int8 *v0;

  return *v0 - 1;
}

uint64_t sub_1AD3ECB78@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_1AD3ECB54(*a1, a2);
}

uint64_t sub_1AD3ECB80()
{
  sub_1AD3F4774();
  return sub_1AD63B930();
}

uint64_t sub_1AD3ECBDC()
{
  sub_1AD3F4774();
  return sub_1AD63B8D0();
}

uint64_t (*sub_1AD3ECC28())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECC38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  if ((unint64_t)(a3 + 1) >= 3)
  {
    sub_1AD0DDA60();
    swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000024;
    *(_QWORD *)(v4 + 8) = 0x80000001AD6A9570;
    strcpy((char *)(v4 + 16), "InvalidValue");
    *(_BYTE *)(v4 + 29) = 0;
    *(_WORD *)(v4 + 30) = -5120;
    *(_QWORD *)(v4 + 32) = 0xD00000000000001DLL;
    *(_QWORD *)(v4 + 40) = 0x80000001AD69CC60;
    return swift_willThrow();
  }
  else
  {
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = a2;
    *(_BYTE *)(a4 + 16) = a3 + 1;
  }
  return result;
}

uint64_t sub_1AD3ECCEC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3ECCF4(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3ECCFC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECD0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1AD3ECD14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*sub_1AD3ECD1C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECD2C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*sub_1AD3ECD34())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECD44())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECD54())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECD64())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECD74()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3ECD7C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3ECD84())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECD94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3ECDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1AD3ECDF4())()
{
  return nullsub_1;
}

unint64_t sub_1AD3ECE04@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 13;
  if (result < 0xD)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t sub_1AD3ECE18()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_1AD3ECE20@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_1AD3ECE04(*a1, a2);
}

uint64_t sub_1AD3ECE28()
{
  sub_1AD3F4730();
  return sub_1AD63B93C();
}

uint64_t sub_1AD3ECE84()
{
  sub_1AD3F4730();
  return sub_1AD63B8DC();
}

uint64_t (*sub_1AD3ECED0())()
{
  return nullsub_1;
}

void sub_1AD3ECEE0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *sub_1AD3ECEEC(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*sub_1AD3ECEF8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ECF08@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  if ((unint64_t)(a3 - 1) < 0xC)
    v4 = a3;
  else
    v4 = 0;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t sub_1AD3ECF20()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3ECF28(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3ECF30())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECF40())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECF50())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ECF60())()
{
  return nullsub_1;
}

uint64_t LinkAttribute.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LinkAttribute.range.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*LinkAttribute.range.modify())()
{
  return nullsub_1;
}

uint64_t LinkAttribute.link.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LinkAttribute(0) + 20);
  v4 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LinkAttribute.link.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LinkAttribute(0) + 20);
  v4 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LinkAttribute.link.modify())(_QWORD)
{
  type metadata accessor for LinkAttribute(0);
  return nullsub_1;
}

uint64_t LinkIsRichLinkAttribute.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LinkIsRichLinkAttribute.range.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*LinkIsRichLinkAttribute.range.modify())()
{
  return nullsub_1;
}

uint64_t LinkIsRichLinkAttribute.isRichLink.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t LinkIsRichLinkAttribute.isRichLink.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*LinkIsRichLinkAttribute.isRichLink.modify())()
{
  return nullsub_1;
}

uint64_t sub_1AD3ED088()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3ED0B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3ED0E8())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ED0FC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3019A4;
  }
  return result;
}

void (*sub_1AD3ED188(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD301A68;
}

uint64_t sub_1AD3ED1EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3ED218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_1AD3ED24C())()
{
  return nullsub_1;
}

uint64_t (*sub_1AD3ED260(_QWORD *a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3A4C30;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3ED2E8(_QWORD *a1))(uint64_t **, char)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  *v3 = *v1;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3A4C98;
}

uint64_t (*sub_1AD3ED350(_QWORD *a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3A4C30;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3ED3D8(_QWORD *a1))(uint64_t **, char)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  *v3 = *v1;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3A4C98;
}

uint64_t sub_1AD3ED43C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    *a2 = *(_QWORD *)(a1 + 48);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED4A4(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3ED4C4(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)();

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 56);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 48);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3ED54C;
  }
  else
  {
    result = (uint64_t (*)())sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED550(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  a2[4] = v4;
  a2[5] = v3;
  a2[6] = v6;
  a2[7] = v5;
  return result;
}

uint64_t (*sub_1AD3ED5BC(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  *v3 = v1[4];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3ED620;
}

uint64_t sub_1AD3ED624@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    *a2 = *(_QWORD *)(a1 + 80);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED68C(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3ED6AC(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)();

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 80);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3ED734;
  }
  else
  {
    result = (uint64_t (*)())sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED738(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  a2[8] = v4;
  a2[9] = v3;
  a2[10] = v6;
  a2[11] = v5;
  return result;
}

uint64_t (*sub_1AD3ED7A4(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[9];
  v6 = v1[10];
  v5 = v1[11];
  *v3 = v1[8];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3ED808;
}

uint64_t sub_1AD3ED80C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    *a2 = *(_QWORD *)(a1 + 112);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED874(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3ED894(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 120);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 112);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3ED91C;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3ED91C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3ED980(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  a2[12] = v4;
  a2[13] = v3;
  a2[14] = v6;
  a2[15] = v5;
  return result;
}

void (*sub_1AD3ED9EC(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[13];
  v6 = v1[14];
  v5 = v1[15];
  *v3 = v1[12];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3EDA50;
}

void sub_1AD3EDA50(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v4[12] = v6;
    v4[13] = v5;
    v4[14] = v7;
    v4[15] = v3;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[12] = v6;
    v4[13] = v5;
    v4[14] = v7;
    v4[15] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EDAF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
  {
    *a2 = *(_QWORD *)(a1 + 144);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EDB60(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3EDB80(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 152);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 144);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EDC08;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EDC08(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EDC6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  a2[16] = v4;
  a2[17] = v3;
  a2[18] = v6;
  a2[19] = v5;
  return result;
}

void (*sub_1AD3EDCD8(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[17];
  v6 = v1[18];
  v5 = v1[19];
  *v3 = v1[16];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3EDD3C;
}

void sub_1AD3EDD3C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v4[16] = v6;
    v4[17] = v5;
    v4[18] = v7;
    v4[19] = v3;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[16] = v6;
    v4[17] = v5;
    v4[18] = v7;
    v4[19] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EDDE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 184);
  if (v3 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 176);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3EDE50(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3EDE70(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 184);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 176);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EDEFC;
  }
  return result;
}

uint64_t sub_1AD3EDEFC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EDF60(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[22];
  v8 = a2[23];
  swift_retain();
  sub_1AD003E48(v5, v6);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  a2[20] = v4;
  a2[21] = v3;
  a2[22] = v5;
  a2[23] = v6;
  return result;
}

void (*sub_1AD3EDFD4(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[20];
  v4 = v1[21];
  v6 = v1[22];
  v7 = v1[23];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD3EE038;
}

void sub_1AD3EE038(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = v4[22];
  v9 = v4[23];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1AD003E48(v7, v3);
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[20] = v6;
    v4[21] = v5;
    v4[22] = v7;
    v4[23] = v3;
    v10 = v2[2];
    v11 = v2[3];
    swift_release();
    sub_1AD003F24(v10, v11);
  }
  else
  {
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[20] = v6;
    v4[21] = v5;
    v4[22] = v7;
    v4[23] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EE0F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 216);
  if (v3 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 208);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3EE164(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3EE184(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 216);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 208);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EE210;
  }
  return result;
}

uint64_t sub_1AD3EE210(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EE274(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[26];
  v8 = a2[27];
  swift_retain();
  sub_1AD003E48(v5, v6);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  a2[24] = v4;
  a2[25] = v3;
  a2[26] = v5;
  a2[27] = v6;
  return result;
}

void (*sub_1AD3EE2E8(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[24];
  v4 = v1[25];
  v6 = v1[26];
  v7 = v1[27];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD3EE34C;
}

void sub_1AD3EE34C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = v4[26];
  v9 = v4[27];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1AD003E48(v7, v3);
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[24] = v6;
    v4[25] = v5;
    v4[26] = v7;
    v4[27] = v3;
    v10 = v2[2];
    v11 = v2[3];
    swift_release();
    sub_1AD003F24(v10, v11);
  }
  else
  {
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[24] = v6;
    v4[25] = v5;
    v4[26] = v7;
    v4[27] = v3;
  }
  free(v2);
}

uint64_t (*sub_1AD3EE410(_QWORD *a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3A4C30;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3EE498(_QWORD *a1))(uint64_t **, char)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  *v3 = *v1;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3A4C98;
}

uint64_t sub_1AD3EE4FC(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3EE51C(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)();

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 56);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 48);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3ED54C;
  }
  else
  {
    result = (uint64_t (*)())sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EE5A4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1AD3EE608(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  *v3 = v1[4];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3ED620;
}

void sub_1AD3EE66C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v4[4] = v6;
    v4[5] = v5;
    v4[6] = v7;
    v4[7] = v3;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[4] = v6;
    v4[5] = v5;
    v4[6] = v7;
    v4[7] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EE714(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3EE734(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)();

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 80);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3ED734;
  }
  else
  {
    result = (uint64_t (*)())sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EE7BC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1AD3EE820(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[9];
  v6 = v1[10];
  v5 = v1[11];
  *v3 = v1[8];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3ED808;
}

void sub_1AD3EE884(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v4[8] = v6;
    v4[9] = v5;
    v4[10] = v7;
    v4[11] = v3;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[8] = v6;
    v4[9] = v5;
    v4[10] = v7;
    v4[11] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EE92C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 120);
  if (v3 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 112);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3EE998(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3EE9B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 120);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 112);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EEA44;
  }
  return result;
}

uint64_t sub_1AD3EEA44(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EEAA8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[14];
  v8 = a2[15];
  swift_retain();
  sub_1AD003E48(v5, v6);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  a2[12] = v4;
  a2[13] = v3;
  a2[14] = v5;
  a2[15] = v6;
  return result;
}

void (*sub_1AD3EEB1C(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[12];
  v4 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD3EEB80;
}

void sub_1AD3EEB80(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = v4[14];
  v9 = v4[15];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1AD003E48(v7, v3);
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[12] = v6;
    v4[13] = v5;
    v4[14] = v7;
    v4[15] = v3;
    v10 = v2[2];
    v11 = v2[3];
    swift_release();
    sub_1AD003F24(v10, v11);
  }
  else
  {
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[12] = v6;
    v4[13] = v5;
    v4[14] = v7;
    v4[15] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EEC40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 152);
  if (v3 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 144);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3EECAC(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3EECCC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 152);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 144);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EED58;
  }
  return result;
}

uint64_t sub_1AD3EED58(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EEDBC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[18];
  v8 = a2[19];
  swift_retain();
  sub_1AD003E48(v5, v6);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  a2[16] = v4;
  a2[17] = v3;
  a2[18] = v5;
  a2[19] = v6;
  return result;
}

void (*sub_1AD3EEE30(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[16];
  v4 = v1[17];
  v6 = v1[18];
  v7 = v1[19];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD3EEE94;
}

void sub_1AD3EEE94(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = v4[18];
  v9 = v4[19];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1AD003E48(v7, v3);
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[16] = v6;
    v4[17] = v5;
    v4[18] = v7;
    v4[19] = v3;
    v10 = v2[2];
    v11 = v2[3];
    swift_release();
    sub_1AD003F24(v10, v11);
  }
  else
  {
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[16] = v6;
    v4[17] = v5;
    v4[18] = v7;
    v4[19] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EEF54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t sub_1AD3EEF60(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = result;
  *(_BYTE *)(v2 + 168) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EEF70())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EEF80()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t sub_1AD3EEF8C(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = result;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EEF9C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EEFAC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_1AD3EEFB8(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = result;
  *(_BYTE *)(v2 + 200) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EEFC8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EEFD8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t sub_1AD3EEFE4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 208) = result;
  *(_QWORD *)(v3 + 216) = a2;
  *(_BYTE *)(v3 + 224) = a3 & 1;
  return result;
}

uint64_t (*sub_1AD3EEFF4())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF004()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_1AD3EF010(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 232) = result;
  *(_BYTE *)(v2 + 240) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EF020())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF030()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 248);
}

uint64_t sub_1AD3EF044(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 248) = result;
  *(_BYTE *)(v2 + 256) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EF05C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF06C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 257);
}

uint64_t sub_1AD3EF074(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 257) = result;
  return result;
}

uint64_t (*sub_1AD3EF07C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF08C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 264);
}

uint64_t sub_1AD3EF09C(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 264) = result;
  *(_BYTE *)(v2 + 272) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EF0AC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF0BC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1AD3EF0C4(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3EF0CC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF0DC(uint64_t a1)
{
  uint64_t (**v1)(char *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v3 = sub_1AD63AF28();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v7(v6, a1, v3);
  if (((*v1)(v6) & 1) != 0)
  {
    v8 = (uint64_t)v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
    sub_1AD009758(v8, &qword_1ED2E1A40);
    v7((char *)v8, (uint64_t)v6, v3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    v9 = *(void (**)(char *, uint64_t))(v4 + 8);
    v9(v6, v3);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1, v3);
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v11 = 0x6E776F6E6B6E753CLL;
    v11[1] = 0xE90000000000003ELL;
    v11[2] = 0xD00000000000001CLL;
    v11[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3EF260(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  void (*result)(uint64_t *, char);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = sub_1AD63AF28();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1ACFF64C0(v1 + v10, (uint64_t)v5, &qword_1ED2E1A40);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1AD009758((uint64_t)v5, &qword_1ED2E1A40);
    result = (void (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
    return sub_1AD34B3CC;
  }
  return result;
}

void (*sub_1AD3EF3B8(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) - 8) + 64);
  a1[1] = (uint64_t)malloc(v3);
  a1[2] = (uint64_t)malloc(v3);
  v4 = malloc(v3);
  a1[3] = (uint64_t)v4;
  sub_1ACFF64C0(v1, (uint64_t)v4, (uint64_t *)&unk_1ED2E1A30);
  return sub_1AD34B700;
}

uint64_t sub_1AD3EF43C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for FileTransferAttribute.AttachmentInfo(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E1FD8);
}

uint64_t sub_1AD3EF48C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1AD3EF4D0())(_QWORD)
{
  type metadata accessor for FileTransferAttribute.AttachmentInfo(0);
  return nullsub_1;
}

uint64_t sub_1AD3EF4F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3EF534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1AD3EF578())(_QWORD)
{
  type metadata accessor for FileTransferAttribute.AttachmentInfo(0);
  return nullsub_1;
}

uint64_t sub_1AD3EF5A0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 28));
}

uint64_t sub_1AD3EF5C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FileTransferAttribute.AttachmentInfo(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1AD3EF5EC())(_QWORD)
{
  type metadata accessor for FileTransferAttribute.AttachmentInfo(0);
  return nullsub_1;
}

uint64_t sub_1AD3EF614()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3EF650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FileTransferAttribute.AttachmentInfo(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1AD3EF694())(_QWORD)
{
  type metadata accessor for FileTransferAttribute.AttachmentInfo(0);
  return nullsub_1;
}

double sub_1AD3EF6BC()
{
  uint64_t v0;

  return *(double *)v0;
}

void sub_1AD3EF6C4(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*sub_1AD3EF6CC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF6DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3EF6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1AD3EF70C())()
{
  return nullsub_1;
}

__n128 sub_1AD3EF71C@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 sub_1AD3EF730(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*sub_1AD3EF744())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF754()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_1AD3EF75C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*sub_1AD3EF764())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF774(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3EF794(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 80);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 72);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EF820;
  }
  return result;
}

uint64_t sub_1AD3EF820(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

void (*sub_1AD3EF884(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[7];
  v4 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD0044F0;
}

uint64_t sub_1AD3EF8E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3EF914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*sub_1AD3EF948())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF958()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t sub_1AD3EF964(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*sub_1AD3EF974())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EF984@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[288];

  sub_1AD29ADF4((const void *)(v1 + 120), v4);
  sub_1AD29ADF4(v4, a1);
  return sub_1AD29AE30((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1AD29AEB4);
}

void *sub_1AD3EF9D0(const void *a1)
{
  uint64_t v1;
  _BYTE v3[280];
  _BYTE v4[288];

  sub_1AD29ADF4(a1, v3);
  sub_1AD29ADF4((const void *)(v1 + 120), v4);
  sub_1AD29AE30((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1AD282E20);
  return sub_1AD29ADF4(v3, (void *)(v1 + 120));
}

uint64_t (*sub_1AD3EFA24())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EFA34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 424);
  if (v3)
  {
    *a2 = *(_QWORD *)(a1 + 416);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EFA9C(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD3EFABC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 424);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 416);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3EFB44;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3EFB44(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3EFBA8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  a2[50] = v4;
  a2[51] = v3;
  a2[52] = v6;
  a2[53] = v5;
  return result;
}

void (*sub_1AD3EFC14(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[51];
  v6 = v1[52];
  v5 = v1[53];
  *v3 = v1[50];
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD3EFC78;
}

void sub_1AD3EFC78(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v4[50] = v6;
    v4[51] = v5;
    v4[52] = v7;
    v4[53] = v3;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[50] = v6;
    v4[51] = v5;
    v4[52] = v7;
    v4[53] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3EFD20()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3EFD28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*sub_1AD3EFD50())()
{
  return nullsub_1;
}

uint64_t sub_1AD3EFD60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3EFD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1AD3EFDC0())()
{
  return nullsub_1;
}

unint64_t sub_1AD3EFDD4()
{
  unint64_t result;

  result = qword_1EECDC188;
  if (!qword_1EECDC188)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6818A0, &type metadata for BaseWritingDirectionAttribute.WritingDirection);
    atomic_store(result, (unint64_t *)&qword_1EECDC188);
  }
  return result;
}

uint64_t sub_1AD3EFE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD29A8B0, (uint64_t (*)(void))sub_1AD29A8F4);
}

unint64_t sub_1AD3EFE2C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3EFE50();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3EFE50()
{
  unint64_t result;

  result = qword_1ED2E1FA8;
  if (!qword_1ED2E1FA8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6819E8, &type metadata for BaseWritingDirectionAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FA8);
  }
  return result;
}

unint64_t sub_1AD3EFE94(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3EFEB8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3EFEB8()
{
  unint64_t result;

  result = qword_1ED2E1FB0;
  if (!qword_1ED2E1FB0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681A04, &type metadata for BaseWritingDirectionAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FB0);
  }
  return result;
}

uint64_t sub_1AD3EFEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD283618, (uint64_t (*)(void))sub_1AD283B10);
}

unint64_t sub_1AD3EFF10(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3EFF34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3EFF34()
{
  unint64_t result;

  result = qword_1ED2E1FB8;
  if (!qword_1ED2E1FB8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681A4C, &type metadata for MessagePartAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FB8);
  }
  return result;
}

unint64_t sub_1AD3EFF78(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3EFF9C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3EFF9C()
{
  unint64_t result;

  result = qword_1ED2E1FC0;
  if (!qword_1ED2E1FC0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681A68, &type metadata for MessagePartAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FC0);
  }
  return result;
}

uint64_t sub_1AD3EFFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD283590, (uint64_t (*)(void))sub_1AD283ACC);
}

unint64_t sub_1AD3EFFF4(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0018();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0018()
{
  unint64_t result;

  result = qword_1ED2E2608;
  if (!qword_1ED2E2608)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681AB0, &type metadata for BreadcrumbTextOptionFlagsAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2608);
  }
  return result;
}

unint64_t sub_1AD3F005C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0080();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0080()
{
  unint64_t result;

  result = qword_1ED2E2600;
  if (!qword_1ED2E2600)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681ACC, &type metadata for BreadcrumbTextOptionFlagsAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2600);
  }
  return result;
}

uint64_t sub_1AD3F00C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD283508, (uint64_t (*)(void))sub_1AD283A88);
}

unint64_t sub_1AD3F00D8(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F00FC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F00FC()
{
  unint64_t result;

  result = qword_1ED2E25E0;
  if (!qword_1ED2E25E0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681B14, &type metadata for BreadcrumbTextMarkerAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E25E0);
  }
  return result;
}

unint64_t sub_1AD3F0140(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0164();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0164()
{
  unint64_t result;

  result = qword_1ED2E25D8;
  if (!qword_1ED2E25D8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681B30, &type metadata for BreadcrumbTextMarkerAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E25D8);
  }
  return result;
}

uint64_t sub_1AD3F01A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD283480, (uint64_t (*)(void))sub_1AD283A44);
}

unint64_t sub_1AD3F01BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F01E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F01E0()
{
  unint64_t result;

  result = qword_1ED2E24F0;
  if (!qword_1ED2E24F0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681B78, &type metadata for MentionAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E24F0);
  }
  return result;
}

unint64_t sub_1AD3F0224(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0248();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0248()
{
  unint64_t result;

  result = qword_1ED2E24E8;
  if (!qword_1ED2E24E8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681B94, &type metadata for MentionAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E24E8);
  }
  return result;
}

uint64_t sub_1AD3F028C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2833F8, (uint64_t (*)(void))sub_1AD283A00);
}

unint64_t sub_1AD3F02A4()
{
  unint64_t result;

  result = qword_1EECDC190;
  if (!qword_1EECDC190)
  {
    result = MEMORY[0x1AF44BDF0]("ъe8 ", &type metadata for TextEffectAttribute.TextEffectType);
    atomic_store(result, (unint64_t *)&qword_1EECDC190);
  }
  return result;
}

uint64_t sub_1AD3F02E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD29AA8C, (uint64_t (*)(void))sub_1AD29AAD0);
}

unint64_t sub_1AD3F02FC(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0320();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0320()
{
  unint64_t result;

  result = qword_1ED2E2540;
  if (!qword_1ED2E2540)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681CF8, &type metadata for TextEffectAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2540);
  }
  return result;
}

unint64_t sub_1AD3F0364(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0388();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0388()
{
  unint64_t result;

  result = qword_1ED2E2538;
  if (!qword_1ED2E2538)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681D14, &type metadata for TextEffectAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2538);
  }
  return result;
}

uint64_t sub_1AD3F03CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28334C, (uint64_t (*)(void))sub_1AD2839BC);
}

unint64_t sub_1AD3F03E0(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0404();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0404()
{
  unint64_t result;

  result = qword_1ED2E2518;
  if (!qword_1ED2E2518)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681D5C, &type metadata for TextBoldAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2518);
  }
  return result;
}

unint64_t sub_1AD3F0448(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F046C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F046C()
{
  unint64_t result;

  result = qword_1ED2E2510;
  if (!qword_1ED2E2510)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681D78, &type metadata for TextBoldAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2510);
  }
  return result;
}

uint64_t sub_1AD3F04B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2832C4, (uint64_t (*)(void))sub_1AD283978);
}

unint64_t sub_1AD3F04C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F04E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F04E8()
{
  unint64_t result;

  result = qword_1ED2E2568;
  if (!qword_1ED2E2568)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681DC0, &type metadata for TextItalicAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2568);
  }
  return result;
}

unint64_t sub_1AD3F052C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0550();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0550()
{
  unint64_t result;

  result = qword_1ED2E2560;
  if (!qword_1ED2E2560)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681DDC, &type metadata for TextItalicAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2560);
  }
  return result;
}

uint64_t sub_1AD3F0594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28323C, (uint64_t (*)(void))sub_1AD283934);
}

unint64_t sub_1AD3F05A8(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F05CC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F05CC()
{
  unint64_t result;

  result = qword_1ED2E2590;
  if (!qword_1ED2E2590)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681E24, &type metadata for TextUnderlineAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2590);
  }
  return result;
}

unint64_t sub_1AD3F0610(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0634();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0634()
{
  unint64_t result;

  result = qword_1ED2E2588;
  if (!qword_1ED2E2588)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681E40, &type metadata for TextUnderlineAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2588);
  }
  return result;
}

uint64_t sub_1AD3F0678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2831B4, (uint64_t (*)(void))sub_1AD2838F0);
}

unint64_t sub_1AD3F068C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F06B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F06B0()
{
  unint64_t result;

  result = qword_1ED2E25B8;
  if (!qword_1ED2E25B8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681E88, &type metadata for TextStrikethroughAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E25B8);
  }
  return result;
}

unint64_t sub_1AD3F06F4(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0718();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0718()
{
  unint64_t result;

  result = qword_1ED2E25B0;
  if (!qword_1ED2E25B0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681EA4, &type metadata for TextStrikethroughAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E25B0);
  }
  return result;
}

uint64_t sub_1AD3F075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28312C, (uint64_t (*)(void))sub_1AD2838AC);
}

uint64_t sub_1AD3F0770(uint64_t a1)
{
  uint64_t result;

  result = sub_1ACFF9724(&qword_1ED2E24B8, type metadata accessor for LinkAttribute, (uint64_t)&protocol conformance descriptor for LinkAttribute);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AD3F07AC(uint64_t a1)
{
  uint64_t result;

  result = sub_1ACFF9724(&qword_1ED2E24B0, type metadata accessor for LinkAttribute, (uint64_t)&protocol conformance descriptor for LinkAttribute);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AD3F07E8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1ED2E24A0, type metadata accessor for LinkAttribute, (uint64_t)&protocol conformance descriptor for LinkAttribute);
  result = sub_1ACFF9724(&qword_1ED2E2498, type metadata accessor for LinkAttribute, (uint64_t)&protocol conformance descriptor for LinkAttribute);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD3F0844(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0868();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0868()
{
  unint64_t result;

  result = qword_1ED2E2480;
  if (!qword_1ED2E2480)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for LinkIsRichLinkAttribute, &type metadata for LinkIsRichLinkAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2480);
  }
  return result;
}

unint64_t sub_1AD3F08AC(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F08D0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F08D0()
{
  unint64_t result;

  result = qword_1ED2E2478;
  if (!qword_1ED2E2478)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for LinkIsRichLinkAttribute, &type metadata for LinkIsRichLinkAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E2478);
  }
  return result;
}

uint64_t sub_1AD3F0914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2830A4, (uint64_t (*)(void))sub_1AD283868);
}

uint64_t sub_1AD3F0928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A0E54, (uint64_t (*)(void))sub_1AD2A0C10);
}

uint64_t sub_1AD3F093C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A0C98, (uint64_t (*)(void))sub_1AD2A0B34);
}

uint64_t sub_1AD3F0950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A0D18, (uint64_t (*)(void))sub_1AD2A0B78);
}

uint64_t sub_1AD3F0964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A0DD4, (uint64_t (*)(void))sub_1AD2A0BCC);
}

uint64_t sub_1AD3F0978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28C5F8, (uint64_t (*)(void))sub_1AD28C63C);
}

uint64_t sub_1AD3F098C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD29ADB0, (uint64_t (*)(void))sub_1AD29B31C);
}

uint64_t sub_1AD3F09A0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1ED2DA3D0, type metadata accessor for FileTransferAttribute.AttachmentInfo, (uint64_t)&unk_1AD653068);
  result = sub_1ACFF9724(&qword_1ED2DA778, type metadata accessor for FileTransferAttribute.AttachmentInfo, (uint64_t)&unk_1AD653090);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3F09FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD29AD6C, (uint64_t (*)(void))sub_1AD29B2D8);
}

unint64_t sub_1AD3F0A10(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0A34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0A34()
{
  unint64_t result;

  result = qword_1ED2E1FC8;
  if (!qword_1ED2E1FC8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD682104, &type metadata for FileTransferAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FC8);
  }
  return result;
}

unint64_t sub_1AD3F0A78(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD3F0A9C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD3F0A9C()
{
  unint64_t result;

  result = qword_1ED2E1FD0;
  if (!qword_1ED2E1FD0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD682120, &type metadata for FileTransferAttribute);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FD0);
  }
  return result;
}

uint64_t sub_1AD3F0AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28301C, (uint64_t (*)(void))sub_1AD283824);
}

uint64_t sub_1AD3F0AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD283FA0, (uint64_t (*)(void))sub_1AD284110);
}

uint64_t sub_1AD3F0B0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F0B48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F0B88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0BC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0BFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0C38@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0C70(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0CAC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[5];
  v5 = a1[6];
  v4 = a1[7];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0CE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0D20@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[8];
  v3 = a1[9];
  v5 = a1[10];
  v4 = a1[11];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0D58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0D94@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[12];
  v3 = a1[13];
  v5 = a1[14];
  v4 = a1[15];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0DCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0E08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[16];
  v3 = a1[17];
  v5 = a1[18];
  v4 = a1[19];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0E40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F0E7C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[21];
  v3 = a1[22];
  v4 = a1[23];
  *a2 = a1[20];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F0EBC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F0EF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[25];
  v3 = a1[26];
  v4 = a1[27];
  *a2 = a1[24];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F0F38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0F74@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F0FAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F0FE8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[5];
  v5 = a1[6];
  v4 = a1[7];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F1020(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F105C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[8];
  v3 = a1[9];
  v5 = a1[10];
  v4 = a1[11];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F1094(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F10D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[13];
  v3 = a1[14];
  v4 = a1[15];
  *a2 = a1[12];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F1110(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F114C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[17];
  v3 = a1[18];
  v4 = a1[19];
  *a2 = a1[16];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F1190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1, a2, (uint64_t *)&unk_1ED2E1A30);
}

uint64_t sub_1AD3F11B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F11F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  *a2 = a1[7];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t sub_1AD3F1234(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3F1270@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[50];
  v3 = a1[51];
  v5 = a1[52];
  v4 = a1[53];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F12A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for BaseWritingDirectionAttribute(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseWritingDirectionAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseWritingDirectionAttribute()
{
  return &type metadata for BaseWritingDirectionAttribute;
}

uint64_t storeEnumTagSinglePayload for BaseWritingDirectionAttribute.WritingDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AD3F1390 + 4 * byte_1AD68188F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AD3F13C4 + 4 * asc_1AD68188A[v4]))();
}

uint64_t sub_1AD3F13C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F13CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3F13D4);
  return result;
}

uint64_t sub_1AD3F13E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3F13E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AD3F13EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F13F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BaseWritingDirectionAttribute.WritingDirection()
{
  return &type metadata for BaseWritingDirectionAttribute.WritingDirection;
}

ValueMetadata *type metadata accessor for MessagePartAttribute()
{
  return &type metadata for MessagePartAttribute;
}

ValueMetadata *type metadata accessor for BreadcrumbTextOptionFlagsAttribute()
{
  return &type metadata for BreadcrumbTextOptionFlagsAttribute;
}

ValueMetadata *type metadata accessor for BreadcrumbTextMarkerAttribute()
{
  return &type metadata for BreadcrumbTextMarkerAttribute;
}

uint64_t destroy for MentionAttribute()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9BlastDoor29BreadcrumbTextMarkerAttributeVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s9BlastDoor29BreadcrumbTextMarkerAttributeVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9BlastDoor29BreadcrumbTextMarkerAttributeVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MentionAttribute()
{
  return &type metadata for MentionAttribute;
}

uint64_t getEnumTagSinglePayload for TextEffectAttribute(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 0xD;
  v5 = v3 - 13;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 244;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 12;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEffectAttribute()
{
  return &type metadata for TextEffectAttribute;
}

uint64_t storeEnumTagSinglePayload for TextEffectAttribute.TextEffectType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1AD3F160C + 4 * byte_1AD681899[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1AD3F1640 + 4 * byte_1AD681894[v4]))();
}

uint64_t sub_1AD3F1640(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F1648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3F1650);
  return result;
}

uint64_t sub_1AD3F165C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3F1664);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1AD3F1668(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F1670(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextEffectAttribute.TextEffectType()
{
  return &type metadata for TextEffectAttribute.TextEffectType;
}

ValueMetadata *type metadata accessor for TextBoldAttribute()
{
  return &type metadata for TextBoldAttribute;
}

ValueMetadata *type metadata accessor for TextItalicAttribute()
{
  return &type metadata for TextItalicAttribute;
}

ValueMetadata *type metadata accessor for TextUnderlineAttribute()
{
  return &type metadata for TextUnderlineAttribute;
}

ValueMetadata *type metadata accessor for TextStrikethroughAttribute()
{
  return &type metadata for TextStrikethroughAttribute;
}

uint64_t *initializeBufferWithCopyOfBuffer for LinkAttribute(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1AD63AF28();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for LinkAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for LinkAttribute(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for LinkAttribute(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for LinkAttribute(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for LinkAttribute(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1AD63AF28();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkAttribute()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F1910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for LinkAttribute()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1AD3F19A0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63AF28();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkIsRichLinkAttribute()
{
  return &type metadata for LinkIsRichLinkAttribute;
}

ValueMetadata *type metadata accessor for GeneralAttachmentInfo()
{
  return &type metadata for GeneralAttachmentInfo;
}

uint64_t destroy for AudioMessageAttachmentInfo(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 24) != 1)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AudioMessageAttachmentInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_retain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AudioMessageAttachmentInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  if (a1[3] != 1)
  {
    if (v5 != 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1AD009758((uint64_t)(a1 + 2), &qword_1ED2E3198);
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_8;
  }
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AudioMessageAttachmentInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = (_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 16) = *v4;
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1AD009758(a1 + 16, &qword_1ED2E3198);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
LABEL_6:
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AudioMessageAttachmentInfo()
{
  return &type metadata for AudioMessageAttachmentInfo;
}

ValueMetadata *type metadata accessor for LivePhotoAttachmentInfo()
{
  return &type metadata for LivePhotoAttachmentInfo;
}

uint64_t destroy for EmojiImageAttachmentInfo(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 184) != 1)
    swift_bridgeObjectRelease();
  swift_release();
  result = *(_QWORD *)(a1 + 216);
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for EmojiImageAttachmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v9;
  v10 = (_OWORD *)(a2 + 176);
  v11 = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 176) = *v10;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)v10;
    *(_QWORD *)(a1 + 184) = v11;
    swift_bridgeObjectRetain();
  }
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v12;
  v13 = (_OWORD *)(a2 + 208);
  v14 = *(_QWORD *)(a2 + 216);
  swift_retain();
  if (v14 == 1)
  {
    *(_OWORD *)(a1 + 208) = *v13;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)v13;
    *(_QWORD *)(a1 + 216) = v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for EmojiImageAttachmentInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a2[13];
  a1[12] = a2[12];
  a1[13] = v7;
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = a2[17];
  a1[16] = a2[16];
  a1[17] = v8;
  swift_retain();
  swift_release();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a2[21];
  a1[20] = a2[20];
  a1[21] = v9;
  swift_retain();
  swift_release();
  v10 = a2[23];
  if (a1[23] == 1)
  {
    if (v10 != 1)
    {
      a1[22] = a2[22];
      a1[23] = a2[23];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 == 1)
  {
    sub_1AD009758((uint64_t)(a1 + 22), &qword_1ED2E3198);
LABEL_6:
    *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
    goto LABEL_8;
  }
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v11 = a2[25];
  a1[24] = a2[24];
  a1[25] = v11;
  swift_retain();
  swift_release();
  v12 = a2[27];
  if (a1[27] != 1)
  {
    if (v12 != 1)
    {
      a1[26] = a2[26];
      a1[27] = a2[27];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1AD009758((uint64_t)(a1 + 26), &qword_1ED2E3198);
    goto LABEL_13;
  }
  if (v12 == 1)
  {
LABEL_13:
    *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
    return a1;
  }
  a1[26] = a2[26];
  a1[27] = a2[27];
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for EmojiImageAttachmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
  v9 = (_OWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 184) == 1)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 184);
  if (v10 == 1)
  {
    sub_1AD009758(a1 + 176, &qword_1ED2E3198);
LABEL_4:
    *(_OWORD *)(a1 + 176) = *v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_release();
  v11 = (_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 216) != 1)
  {
    v12 = *(_QWORD *)(a2 + 216);
    if (v12 != 1)
    {
      *(_QWORD *)(a1 + 208) = *v11;
      *(_QWORD *)(a1 + 216) = v12;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1AD009758(a1 + 208, &qword_1ED2E3198);
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudKitUserIdentityLookupInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudKitUserIdentityLookupInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmojiImageAttachmentInfo()
{
  return &type metadata for EmojiImageAttachmentInfo;
}

uint64_t destroy for StickerAttachmentInfo(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 120) != 1)
    swift_bridgeObjectRelease();
  swift_release();
  result = *(_QWORD *)(a1 + 152);
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for StickerAttachmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = (_OWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 112) = *v8;
  }
  else
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)v8;
    *(_QWORD *)(a1 + 120) = v9;
    swift_bridgeObjectRetain();
  }
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = (_OWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  swift_retain();
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 144) = *v11;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)v11;
    *(_QWORD *)(a1 + 152) = v12;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v13 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v13;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  return a1;
}

uint64_t assignWithCopy for StickerAttachmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120) == 1)
  {
    if (v8 != 1)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 == 1)
  {
    sub_1AD009758(a1 + 112, &qword_1ED2E3198);
LABEL_6:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152) != 1)
  {
    if (v10 != 1)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_1AD009758(a1 + 144, &qword_1ED2E3198);
    goto LABEL_13;
  }
  if (v10 == 1)
  {
LABEL_13:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
LABEL_15:
  v11 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v14;
  v15 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v15;
  v16 = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v16;
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  v17 = *(_QWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v17;
  return a1;
}

void *__swift_memcpy273_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x111uLL);
}

uint64_t assignWithTake for StickerAttachmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  v7 = (_OWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 120) == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 120);
  if (v8 == 1)
  {
    sub_1AD009758(a1 + 112, &qword_1ED2E3198);
LABEL_4:
    *(_OWORD *)(a1 + 112) = *v7;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  v9 = (_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 152) != 1)
  {
    v10 = *(_QWORD *)(a2 + 152);
    if (v10 != 1)
    {
      *(_QWORD *)(a1 + 144) = *v9;
      *(_QWORD *)(a1 + 152) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1AD009758(a1 + 144, &qword_1ED2E3198);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v9;
LABEL_11:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v11 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for StickerAttachmentInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 273))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StickerAttachmentInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 272) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 273) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 273) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StickerAttachmentInfo()
{
  return &type metadata for StickerAttachmentInfo;
}

uint64_t destroy for FileTransferAttribute(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;

  swift_bridgeObjectRelease();
  swift_release();
  if (a1[10] != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1[15];
  v3 = a1[16];
  v4 = a1 + 15;
  v6 = *((_OWORD *)v4 + 14);
  v7 = *((_OWORD *)v4 + 15);
  sub_1AD282E20(v2, v3, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], v4[8], v4[9], v4[10], v4[11], v4[12], v4[13], v4[14], v4[15], v4[16], v4[17], v4[18],
    v4[19],
    v4[20],
    v4[21],
    v4[22],
    v4[23],
    v4[24],
    v4[25],
    v4[26],
    v4[27],
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v4[32],
    v4[33],
    *((_BYTE *)v4 + 272));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FileTransferAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  v6 = (_OWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 72) = *v6;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v6;
    *(_QWORD *)(a1 + 80) = v7;
    swift_bridgeObjectRetain();
  }
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v27 = *(_QWORD *)(a2 + 128);
  v28 = *(_QWORD *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 144);
  v26 = *(_QWORD *)(a2 + 136);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a2 + 168);
  v46 = *(_QWORD *)(a2 + 192);
  v47 = *(_QWORD *)(a2 + 184);
  v44 = *(_QWORD *)(a2 + 208);
  v45 = *(_QWORD *)(a2 + 200);
  v42 = *(_QWORD *)(a2 + 224);
  v43 = *(_QWORD *)(a2 + 216);
  v40 = *(_QWORD *)(a2 + 240);
  v41 = *(_QWORD *)(a2 + 232);
  v38 = *(_QWORD *)(a2 + 256);
  v39 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 272);
  v37 = *(_QWORD *)(a2 + 264);
  v34 = *(_QWORD *)(a2 + 288);
  v35 = *(_QWORD *)(a2 + 280);
  v32 = *(_QWORD *)(a2 + 304);
  v33 = *(_QWORD *)(a2 + 296);
  v30 = *(_QWORD *)(a2 + 320);
  v31 = *(_QWORD *)(a2 + 312);
  v9 = *(_QWORD *)(a2 + 336);
  v29 = *(_QWORD *)(a2 + 328);
  v10 = *(_QWORD *)(a2 + 344);
  v11 = *(_QWORD *)(a2 + 352);
  v12 = *(_QWORD *)(a2 + 360);
  v13 = *(_QWORD *)(a2 + 368);
  v15 = *(_QWORD *)(a2 + 376);
  v14 = *(_QWORD *)(a2 + 384);
  v16 = *(_BYTE *)(a2 + 392);
  swift_bridgeObjectRetain();
  sub_1AD29AEB4(v28, v27, v26, v25, v24, v23, v22, v21, v47, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37,
    v36,
    v35,
    v34,
    v33,
    v32,
    v31,
    v30,
    v29,
    v9,
    v10,
    v11,
    v12,
    v13,
    v15,
    v14,
    v16);
  *(_QWORD *)(a1 + 120) = v28;
  *(_QWORD *)(a1 + 128) = v27;
  *(_QWORD *)(a1 + 136) = v26;
  *(_QWORD *)(a1 + 144) = v25;
  *(_QWORD *)(a1 + 152) = v24;
  *(_QWORD *)(a1 + 160) = v23;
  *(_QWORD *)(a1 + 168) = v22;
  *(_QWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 184) = v47;
  *(_QWORD *)(a1 + 192) = v46;
  *(_QWORD *)(a1 + 200) = v45;
  *(_QWORD *)(a1 + 208) = v44;
  *(_QWORD *)(a1 + 216) = v43;
  *(_QWORD *)(a1 + 224) = v42;
  *(_QWORD *)(a1 + 232) = v41;
  *(_QWORD *)(a1 + 240) = v40;
  *(_QWORD *)(a1 + 248) = v39;
  *(_QWORD *)(a1 + 256) = v38;
  *(_QWORD *)(a1 + 264) = v37;
  *(_QWORD *)(a1 + 272) = v36;
  *(_QWORD *)(a1 + 280) = v35;
  *(_QWORD *)(a1 + 288) = v34;
  *(_QWORD *)(a1 + 296) = v33;
  *(_QWORD *)(a1 + 304) = v32;
  *(_QWORD *)(a1 + 312) = v31;
  *(_QWORD *)(a1 + 320) = v30;
  *(_QWORD *)(a1 + 328) = v29;
  *(_QWORD *)(a1 + 336) = v9;
  *(_QWORD *)(a1 + 344) = v10;
  *(_QWORD *)(a1 + 352) = v11;
  *(_QWORD *)(a1 + 360) = v12;
  *(_QWORD *)(a1 + 368) = v13;
  *(_QWORD *)(a1 + 376) = v15;
  *(_QWORD *)(a1 + 384) = v14;
  *(_BYTE *)(a1 + 392) = v16;
  v17 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v17;
  v18 = *(_QWORD *)(a2 + 416);
  v19 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = v18;
  *(_QWORD *)(a1 + 424) = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FileTransferAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) != 1)
  {
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1AD009758(a1 + 72, &qword_1ED2E3198);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v7;
  v66 = *(_QWORD *)(a2 + 128);
  v67 = *(_QWORD *)(a2 + 120);
  v64 = *(_QWORD *)(a2 + 144);
  v65 = *(_QWORD *)(a2 + 136);
  v62 = *(_QWORD *)(a2 + 160);
  v63 = *(_QWORD *)(a2 + 152);
  v60 = *(_QWORD *)(a2 + 176);
  v61 = *(_QWORD *)(a2 + 168);
  v41 = *(_QWORD *)(a2 + 184);
  v42 = *(_QWORD *)(a2 + 192);
  v43 = *(_QWORD *)(a2 + 200);
  v44 = *(_QWORD *)(a2 + 208);
  v45 = *(_QWORD *)(a2 + 216);
  v46 = *(_QWORD *)(a2 + 224);
  v47 = *(_QWORD *)(a2 + 232);
  v48 = *(_QWORD *)(a2 + 240);
  v8 = *(_QWORD *)(a2 + 264);
  v49 = *(_QWORD *)(a2 + 248);
  v50 = *(_QWORD *)(a2 + 256);
  v9 = *(_QWORD *)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 288);
  v12 = *(_QWORD *)(a2 + 296);
  v13 = *(_QWORD *)(a2 + 304);
  v14 = *(_QWORD *)(a2 + 312);
  v15 = *(_QWORD *)(a2 + 320);
  v51 = *(_QWORD *)(a2 + 328);
  v52 = *(_QWORD *)(a2 + 336);
  v53 = *(_QWORD *)(a2 + 344);
  v54 = *(_QWORD *)(a2 + 352);
  v55 = *(_QWORD *)(a2 + 360);
  v56 = *(_QWORD *)(a2 + 368);
  v57 = *(_QWORD *)(a2 + 376);
  v58 = *(_QWORD *)(a2 + 384);
  v59 = *(_BYTE *)(a2 + 392);
  sub_1AD29AEB4(v67, v66, v65, v64, v63, v62, v61, v60, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v8,
    v9,
    v10,
    v11,
    v12,
    v13,
    v14,
    v15,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59);
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v67;
  v17 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v66;
  *(_QWORD *)(a1 + 136) = v65;
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v64;
  *(_QWORD *)(a1 + 152) = v63;
  v21 = *(_QWORD *)(a1 + 160);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v62;
  *(_QWORD *)(a1 + 168) = v61;
  v23 = *(_OWORD *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v60;
  *(_QWORD *)(a1 + 184) = v41;
  v25 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v42;
  *(_QWORD *)(a1 + 200) = v43;
  v26 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v44;
  *(_QWORD *)(a1 + 216) = v45;
  v27 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v46;
  *(_QWORD *)(a1 + 232) = v47;
  v28 = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v48;
  *(_QWORD *)(a1 + 248) = v49;
  *(_QWORD *)(a1 + 256) = v50;
  v29 = *(_OWORD *)(a1 + 264);
  v30 = *(_OWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 264) = v8;
  *(_QWORD *)(a1 + 272) = v9;
  *(_QWORD *)(a1 + 280) = v10;
  *(_QWORD *)(a1 + 288) = v11;
  v31 = *(_OWORD *)(a1 + 296);
  v32 = *(_OWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 296) = v12;
  *(_QWORD *)(a1 + 304) = v13;
  *(_QWORD *)(a1 + 312) = v14;
  *(_QWORD *)(a1 + 320) = v15;
  v33 = *(_OWORD *)(a1 + 328);
  v34 = *(_OWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 328) = v51;
  *(_QWORD *)(a1 + 336) = v52;
  *(_QWORD *)(a1 + 344) = v53;
  *(_QWORD *)(a1 + 352) = v54;
  v35 = *(_OWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v55;
  v36 = *(_QWORD *)(a1 + 376);
  v37 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 368) = v56;
  *(_QWORD *)(a1 + 376) = v57;
  *(_QWORD *)(a1 + 384) = v58;
  v38 = *(_BYTE *)(a1 + 392);
  *(_BYTE *)(a1 + 392) = v59;
  sub_1AD282E20(v16, v17, v18, v19, v20, v21, v22, v24, v23, *((uint64_t *)&v23 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    v37,
    v38);
  v39 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v39;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy432_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t assignWithTake for FileTransferAttribute(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  v6 = (_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 80) != 1)
  {
    v7 = *(_QWORD *)(a2 + 80);
    if (v7 != 1)
    {
      *(_QWORD *)(a1 + 72) = *v6;
      *(_QWORD *)(a1 + 80) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1AD009758(a1 + 72, &qword_1ED2E3198);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
LABEL_6:
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = *(_BYTE *)(a2 + 392);
  v10 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_OWORD *)(a1 + 184);
  v19 = *(_OWORD *)(a1 + 200);
  v20 = *(_OWORD *)(a1 + 216);
  v21 = *(_OWORD *)(a1 + 232);
  v22 = *(_OWORD *)(a1 + 248);
  v23 = *(_OWORD *)(a1 + 264);
  v24 = *(_OWORD *)(a1 + 280);
  v25 = *(_OWORD *)(a1 + 296);
  v26 = *(_OWORD *)(a1 + 312);
  v27 = *(_OWORD *)(a1 + 328);
  v28 = *(_OWORD *)(a1 + 344);
  v29 = *(_OWORD *)(a1 + 360);
  v30 = *(_QWORD *)(a1 + 376);
  v31 = *(_QWORD *)(a1 + 384);
  v32 = *(_BYTE *)(a1 + 392);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v33 = v5[1];
  *v4 = *v5;
  v4[1] = v33;
  v34 = v5[3];
  v4[2] = v5[2];
  v4[3] = v34;
  v35 = v5[5];
  v4[4] = v5[4];
  v4[5] = v35;
  v36 = v5[7];
  v4[6] = v5[6];
  v4[7] = v36;
  *(_BYTE *)(a1 + 392) = v9;
  sub_1AD282E20(v10, v11, v12, v13, v14, v15, v16, v17, v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    v31,
    v32);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  swift_release();
  v37 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileTransferAttribute(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 432))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileTransferAttribute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 424) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 432) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 432) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FileTransferAttribute()
{
  return &type metadata for FileTransferAttribute;
}

void destroy for FileTransferAttribute.AttachmentSubtype(uint64_t a1)
{
  __int128 v1;
  __int128 v2;

  v1 = *(_OWORD *)(a1 + 224);
  v2 = *(_OWORD *)(a1 + 240);
  sub_1AD282E20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v1,
    *((uint64_t *)&v1 + 1),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_BYTE *)(a1 + 272));
}

uint64_t initializeWithCopy for FileTransferAttribute.AttachmentSubtype(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;

  v3 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  v34 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 256);
  v37 = *(_QWORD *)(a2 + 264);
  v38 = *(_BYTE *)(a2 + 272);
  v4 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  sub_1AD29AEB4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v30;
  *(_QWORD *)(a1 + 216) = v31;
  *(_QWORD *)(a1 + 224) = v32;
  *(_QWORD *)(a1 + 232) = v33;
  *(_QWORD *)(a1 + 240) = v34;
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v36;
  *(_QWORD *)(a1 + 264) = v37;
  *(_BYTE *)(a1 + 272) = v38;
  return a1;
}

uint64_t assignWithCopy for FileTransferAttribute.AttachmentSubtype(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = *(_QWORD *)a2;
  v61 = *(_QWORD *)(a2 + 8);
  v58 = *(_QWORD *)(a2 + 24);
  v59 = *(_QWORD *)(a2 + 16);
  v56 = *(_QWORD *)(a2 + 40);
  v57 = *(_QWORD *)(a2 + 32);
  v55 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v39 = *(_QWORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 104);
  v41 = *(_QWORD *)(a2 + 112);
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a2 + 192);
  v44 = *(_QWORD *)(a2 + 136);
  v45 = *(_QWORD *)(a2 + 200);
  v46 = *(_QWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 216);
  v48 = *(_QWORD *)(a2 + 224);
  v49 = *(_QWORD *)(a2 + 232);
  v50 = *(_QWORD *)(a2 + 240);
  v51 = *(_QWORD *)(a2 + 248);
  v52 = *(_QWORD *)(a2 + 256);
  v53 = *(_QWORD *)(a2 + 264);
  v54 = *(_BYTE *)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 56);
  sub_1AD29AEB4(*(_QWORD *)a2, v61, v59, v58, v57, v56, v55, v11, v10, v36, v37, v38, v39, v40, v41, v42, v43, v44, v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v60;
  *(_QWORD *)(a1 + 8) = v61;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v59;
  *(_QWORD *)(a1 + 24) = v58;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v57;
  *(_QWORD *)(a1 + 40) = v56;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v38;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v42;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v43;
  *(_QWORD *)(a1 + 136) = v44;
  *(_QWORD *)(a1 + 144) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 176) = v7;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v45;
  *(_QWORD *)(a1 + 208) = v46;
  *(_QWORD *)(a1 + 216) = v47;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v48;
  *(_QWORD *)(a1 + 232) = v49;
  *(_QWORD *)(a1 + 240) = v50;
  *(_QWORD *)(a1 + 248) = v51;
  v32 = *(_QWORD *)(a1 + 256);
  v33 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v52;
  *(_QWORD *)(a1 + 264) = v53;
  v34 = *(_BYTE *)(a1 + 272);
  *(_BYTE *)(a1 + 272) = v54;
  sub_1AD282E20(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    v33,
    v34);
  return a1;
}

uint64_t assignWithTake for FileTransferAttribute.AttachmentSubtype(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = *(_BYTE *)(a2 + 272);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a1 + 224);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_QWORD *)(a1 + 256);
  v26 = *(_QWORD *)(a1 + 264);
  v27 = *(_BYTE *)(a1 + 272);
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v28;
  v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v29;
  v30 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v30;
  v31 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v31;
  v32 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v32;
  v33 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v33;
  v34 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v34;
  v35 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v35;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = v4;
  sub_1AD282E20(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    v26,
    v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileTransferAttribute.AttachmentSubtype(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 273))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 224) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FileTransferAttribute.AttachmentSubtype(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 272) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 273) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_OWORD *)(result + 192) = 0u;
      *(_OWORD *)(result + 208) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 224) = 2 * -a2;
      *(_OWORD *)(result + 248) = 0u;
      *(_OWORD *)(result + 232) = 0u;
      result += 232;
      *(_OWORD *)(result + 25) = 0u;
      return result;
    }
    *(_BYTE *)(result + 273) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1AD3F3C88(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(result + 240) & 1;
  v3 = *(_QWORD *)(result + 256) & 0x101;
  v4 = *(_BYTE *)(result + 272) & 1 | (32 * a2);
  *(_QWORD *)(result + 224) &= 1uLL;
  *(_QWORD *)(result + 240) = v2;
  *(_QWORD *)(result + 256) = v3;
  *(_BYTE *)(result + 272) = v4;
  return result;
}

ValueMetadata *type metadata accessor for FileTransferAttribute.AttachmentSubtype()
{
  return &type metadata for FileTransferAttribute.AttachmentSubtype;
}

_QWORD *sub_1AD3F3CD4(_QWORD *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    swift_retain();
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1AD63AF28();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = a3[5];
    v16 = a3[6];
    v17 = (_QWORD *)((char *)a1 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)((char *)a1 + v16);
    v21 = (uint64_t *)((char *)a2 + v16);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD3F3E34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v2 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v3 = sub_1AD63AF28();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1AD3F3EE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1AD63AF28();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[5];
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (_QWORD *)((char *)a1 + v14);
  v19 = (_QWORD *)((char *)a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1AD3F4014(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1AD63AF28();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[5];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1AD3F41D8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63AF28();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_OWORD *sub_1AD3F42D8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AD63AF28();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[5];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[6];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD3F4460()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F446C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1AD3F44F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F44FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A20);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_1AD3F457C()
{
  unint64_t v0;

  sub_1AD32DF60(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for FileTransferAttribute.ImageInfo()
{
  return &type metadata for FileTransferAttribute.ImageInfo;
}

uint64_t destroy for _AttributedString()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9BlastDoor17_AttributedStringVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _AttributedString(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for _AttributedString(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _AttributedString()
{
  return &type metadata for _AttributedString;
}

unint64_t sub_1AD3F4730()
{
  unint64_t result;

  result = qword_1EECDC198;
  if (!qword_1EECDC198)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681C18, &type metadata for TextEffectAttribute.TextEffectType);
    atomic_store(result, (unint64_t *)&qword_1EECDC198);
  }
  return result;
}

unint64_t sub_1AD3F4774()
{
  unint64_t result;

  result = qword_1ED2E1FF0;
  if (!qword_1ED2E1FF0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD681908, &type metadata for BaseWritingDirectionAttribute.WritingDirection);
    atomic_store(result, (unint64_t *)&qword_1ED2E1FF0);
  }
  return result;
}

uint64_t sub_1AD3F47B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AD3F4858@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[8];
  v3 = v1[9];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD3F4888(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(_QWORD *)(v1 + 72) = v3;
  return result;
}

uint64_t sub_1AD3F48CC()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 72))
    return swift_bridgeObjectRetain();
  result = sub_1AD63BE28();
  __break(1u);
  return result;
}

uint64_t sub_1AD3F4928@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[3];
  v2 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD003E48(v4, v5);
}

__n128 sub_1AD3F495C(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  swift_release();
  sub_1AD003F24(v5, v6);
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(_QWORD *)(v1 + 40) = v3;
  *(_QWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t sub_1AD3F49B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 48) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain();
    return v1;
  }
  return result;
}

uint64_t sub_1AD3F4A2C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_1AD3F4A68(a1, &v5);
  v4 = v5;
  if (v5 == 21)
    v4 = 0;
  *a2 = v4;
  return result;
}

uint64_t sub_1AD3F4A68@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (result > 2999)
  {
    switch(result)
    {
      case 3000:
        *a2 = 13;
        break;
      case 3001:
        *a2 = 14;
        break;
      case 3002:
        *a2 = 15;
        break;
      case 3003:
        *a2 = 16;
        break;
      case 3004:
        *a2 = 17;
        break;
      case 3005:
        *a2 = 18;
        break;
      case 3006:
        *a2 = 19;
        break;
      case 3007:
        *a2 = 20;
        break;
      default:
LABEL_27:
        *a2 = 21;
        break;
    }
  }
  else
  {
    switch(result)
    {
      case 2000:
        *a2 = 5;
        break;
      case 2001:
        *a2 = 6;
        break;
      case 2002:
        *a2 = 7;
        break;
      case 2003:
        *a2 = 8;
        break;
      case 2004:
        *a2 = 9;
        break;
      case 2005:
        *a2 = 10;
        break;
      case 2006:
        *a2 = 11;
        break;
      case 2007:
        *a2 = 12;
        break;
      default:
        v2 = 0;
        v3 = 3;
        switch(result)
        {
          case 0:
            goto LABEL_25;
          case 1:
            v2 = 1;
            goto LABEL_25;
          case 2:
            v2 = 2;
LABEL_25:
            v3 = v2;
            goto LABEL_26;
          case 3:
LABEL_26:
            *a2 = v3;
            break;
          default:
            if (result != 1000)
              goto LABEL_27;
            *a2 = 4;
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1AD3F4BD8()
{
  char *v0;

  return qword_1AD6829B8[*v0];
}

BOOL sub_1AD3F4BEC(char *a1, char *a2)
{
  return qword_1AD6829B8[*a1] == qword_1AD6829B8[*a2];
}

uint64_t sub_1AD3F4C10()
{
  sub_1AD63C4AC();
  sub_1AD63C4B8();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD3F4C5C()
{
  return sub_1AD63C4B8();
}

uint64_t sub_1AD3F4C90()
{
  sub_1AD63C4AC();
  sub_1AD63C4B8();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD3F4CD8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_1AD3F4A68(*a1, a2);
}

void sub_1AD3F4CE0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1AD6829B8[*v1];
}

uint64_t sub_1AD3F4CF8()
{
  sub_1AD3F65BC();
  return sub_1AD63B930();
}

uint64_t sub_1AD3F4D54()
{
  sub_1AD3F65BC();
  return sub_1AD63B8D0();
}

void sub_1AD3F4DA0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *sub_1AD3F4DAC(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*sub_1AD3F4DB8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F4DC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F4DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1AD3F4E28())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F4E38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F4E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*sub_1AD3F4E98())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F4EA8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1AD3F4EB0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*sub_1AD3F4EB8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F4EC8()
{
  return _s9BlastDoor10TapMessageV4tapsSayAA06SingleC0VGvs_0();
}

uint64_t (*sub_1AD3F4EE8(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(_QWORD *, char);

  a1[1] = v1;
  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
  {
    *a1 = v3;
    swift_bridgeObjectRetain();
    return sub_1AD0E2C1C;
  }
  else
  {
    result = (uint64_t (*)(_QWORD *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD3F4F6C(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[8];
  v4 = v1[9];
  *a1 = v1[7];
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD0E2D88;
}

unint64_t sub_1AD3F4FBC@<X0>(unint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = 0;
  if ((a2 & 1) == 0 && result <= 0xA)
    v3 = byte_1AD682A60[result];
  *a3 = v3;
  return result;
}

unint64_t sub_1AD3F4FE0@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result > 0xA)
    *a2 = 11;
  else
    *a2 = byte_1AD682A60[result];
  return result;
}

uint64_t sub_1AD3F5008()
{
  char *v0;

  return qword_1AD682A70[*v0];
}

BOOL sub_1AD3F501C(char *a1, char *a2)
{
  return qword_1AD682A70[*a1] == qword_1AD682A70[*a2];
}

uint64_t sub_1AD3F5040()
{
  sub_1AD63C4AC();
  sub_1AD63C4B8();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD3F508C()
{
  return sub_1AD63C4B8();
}

uint64_t sub_1AD3F50C0()
{
  sub_1AD63C4AC();
  sub_1AD63C4B8();
  return sub_1AD63C4F4();
}

unint64_t sub_1AD3F5108@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1AD3F4FE0(*a1, a2);
}

void sub_1AD3F5110(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1AD682A70[*v1];
}

uint64_t sub_1AD3F5128()
{
  sub_1AD3F6578();
  return sub_1AD63B930();
}

uint64_t sub_1AD3F5184()
{
  sub_1AD3F6578();
  return sub_1AD63B8D0();
}

void sub_1AD3F51D0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *sub_1AD3F51DC(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*sub_1AD3F51E8())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F51F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F5224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1AD3F5258())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F5268@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 40);
    a2[1] = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3F52D4(uint64_t a1, uint64_t a2)
{
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3F52F4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 48);
  if (v3 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 40);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD3F5380;
  }
  return result;
}

uint64_t sub_1AD3F5380(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(*a1, v2);
  swift_bridgeObjectRetain();
  _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3F53E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[5];
  v8 = a2[6];
  swift_retain();
  sub_1AD003E48(v5, v6);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  a2[3] = v4;
  a2[4] = v3;
  a2[5] = v5;
  a2[6] = v6;
  return result;
}

void (*sub_1AD3F5458(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD003E48(v6, v7);
  return sub_1AD3F54BC;
}

void sub_1AD3F54BC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (_QWORD *)(*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = v4[5];
  v9 = v4[6];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1AD003E48(v7, v3);
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[3] = v6;
    v4[4] = v5;
    v4[5] = v7;
    v4[6] = v3;
    v10 = v2[2];
    v11 = v2[3];
    swift_release();
    sub_1AD003F24(v10, v11);
  }
  else
  {
    swift_release();
    sub_1AD003F24(v8, v9);
    v4[3] = v6;
    v4[4] = v5;
    v4[5] = v7;
    v4[6] = v3;
  }
  free(v2);
}

uint64_t sub_1AD3F557C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F55A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*sub_1AD3F55DC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F55EC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[17];
  v10 = v1[18];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_1AD0E3030(v2, v3, v4, v5, v6, v7, v8);
}

__n128 sub_1AD3F5634(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v7 = *a1;
  v5 = a1[2];
  v6 = a1[1];
  v4 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  sub_1AD0E3108(v1[10], v1[11], v1[12], v1[13], v1[14], v1[15], v1[16]);
  *((_OWORD *)v1 + 5) = v7;
  *((_OWORD *)v1 + 6) = v6;
  result = v4;
  *((_OWORD *)v1 + 7) = v5;
  *((__n128 *)v1 + 8) = v4;
  v1[18] = v2;
  return result;
}

uint64_t (*sub_1AD3F56AC())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F56BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F56E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t (*sub_1AD3F571C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F572C()
{
  sub_1AD63BD38();
  sub_1AD63B810();
  sub_1AD63B810();
  sub_1AD63B810();
  sub_1AD63BE04();
  sub_1AD63B810();
  swift_bridgeObjectRetain();
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  sub_1AD63B810();
  return 0;
}

unint64_t sub_1AD3F5844()
{
  unint64_t result;

  result = qword_1EECDC1A0;
  if (!qword_1EECDC1A0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6825C8, &type metadata for TapBack.AssociatedMessageType);
    atomic_store(result, (unint64_t *)&qword_1EECDC1A0);
  }
  return result;
}

uint64_t sub_1AD3F5888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28D3D0, (uint64_t (*)(void))sub_1AD28D424);
}

unint64_t sub_1AD3F58A0()
{
  unint64_t result;

  result = qword_1EECDC1A8;
  if (!qword_1EECDC1A8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6826E4, &type metadata for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType);
    atomic_store(result, (unint64_t *)&qword_1EECDC1A8);
  }
  return result;
}

uint64_t sub_1AD3F58E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD294214, (uint64_t (*)(void))sub_1AD294258);
}

uint64_t sub_1AD3F58F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2881C8, (uint64_t (*)(void))sub_1AD288370);
}

uint64_t sub_1AD3F590C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A2EFC, (uint64_t (*)(void))sub_1AD2A2D64);
}

uint64_t sub_1AD3F5928()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return _s9BlastDoor10TapMessageV4tapsSayAA06SingleC0VGvs_0(v0);
}

uint64_t sub_1AD3F5950@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[7];
  v3 = a1[8];
  v4 = a1[9];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3F5988(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v1, v2);
}

uint64_t sub_1AD3F59C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  *a2 = a1[3];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD003E48(v3, v4);
}

uint64_t destroy for TapBack(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
  {
    swift_bridgeObjectRelease();
    swift_release();
    if (*(_QWORD *)(a1 + 128) != 1)
      swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TapBack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v8;
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a1 + 112) = v9;
    v10 = (_OWORD *)(a2 + 120);
    v11 = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 120) = *v10;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)v10;
      *(_QWORD *)(a1 + 128) = v11;
      swift_bridgeObjectRetain();
    }
    v14 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v13 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
  }
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TapBack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 80);
  v6 = (_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v7)
    {
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v8;
      swift_retain();
      swift_release();
      v9 = *(_QWORD *)(a2 + 128);
      if (*(_QWORD *)(a1 + 128) == 1)
      {
        if (v9 != 1)
        {
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
LABEL_17:
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      else
      {
        if (v9 != 1)
        {
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        sub_1AD0256E4(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      goto LABEL_17;
    }
    sub_1AD0E3B7C(a1 + 80);
    *v5 = *v6;
    v13 = *(_OWORD *)(a2 + 112);
    v12 = *(_OWORD *)(a2 + 128);
    v14 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 128) = v12;
    *(_OWORD *)(a1 + 96) = v14;
  }
  else if (v7)
  {
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    v11 = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
  }
  else
  {
    *v5 = *v6;
    v15 = *(_OWORD *)(a2 + 96);
    v16 = *(_OWORD *)(a2 + 112);
    v17 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 96) = v15;
  }
LABEL_18:
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TapBack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
  {
    v6 = *(_QWORD *)(a2 + 104);
    if (v6)
    {
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      v7 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v6;
      *(_QWORD *)(a1 + 112) = v8;
      swift_release();
      v9 = (_QWORD *)(a2 + 120);
      if (*(_QWORD *)(a1 + 128) != 1)
      {
        v10 = *(_QWORD *)(a2 + 128);
        if (v10 != 1)
        {
          *(_QWORD *)(a1 + 120) = *v9;
          *(_QWORD *)(a1 + 128) = v10;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        sub_1AD0256E4(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)v9;
LABEL_10:
      v13 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1AD0E3B7C(a1 + 80);
  }
  v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v12;
LABEL_11:
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TapBack(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TapBack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TapBack()
{
  return &type metadata for TapBack;
}

uint64_t getEnumTagSinglePayload for TapBack.AssociatedMessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TapBack.AssociatedMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_1AD3F60FC + 4 * byte_1AD6825B9[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_1AD3F6130 + 4 * byte_1AD6825B4[v4]))();
}

uint64_t sub_1AD3F6130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F6138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3F6140);
  return result;
}

uint64_t sub_1AD3F614C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3F6154);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_1AD3F6158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F6160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapBack.AssociatedMessageType()
{
  return &type metadata for TapBack.AssociatedMessageType;
}

uint64_t destroy for TapBack.MessageSummaryInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 48) != 1)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TapBack.MessageSummaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 40) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TapBack.MessageSummaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1AD0256E4(a1 + 40);
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TapBack.MessageSummaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = (_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 40) = *v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1AD0256E4(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TapBack.MessageSummaryInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TapBack.MessageSummaryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TapBack.MessageSummaryInfo()
{
  return &type metadata for TapBack.MessageSummaryInfo;
}

uint64_t storeEnumTagSinglePayload for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1AD3F64F8 + 4 * byte_1AD6825C3[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1AD3F652C + 4 * byte_1AD6825BE[v4]))();
}

uint64_t sub_1AD3F652C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F6534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3F653CLL);
  return result;
}

uint64_t sub_1AD3F6548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3F6550);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1AD3F6554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F655C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType()
{
  return &type metadata for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType;
}

unint64_t sub_1AD3F6578()
{
  unint64_t result;

  result = qword_1EECDC1B0;
  if (!qword_1EECDC1B0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68274C, &type metadata for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType);
    atomic_store(result, (unint64_t *)&qword_1EECDC1B0);
  }
  return result;
}

unint64_t sub_1AD3F65BC()
{
  unint64_t result;

  result = qword_1EECDC1B8;
  if (!qword_1EECDC1B8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD682630, &type metadata for TapBack.AssociatedMessageType);
    atomic_store(result, (unint64_t *)&qword_1EECDC1B8);
  }
  return result;
}

uint64_t sub_1AD3F6600()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F662C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3F6660())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6670()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F669C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1AD3F66D0())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F66E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F670C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_1AD3F6740())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6750()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F677C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*sub_1AD3F67B0())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F67C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F67EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*sub_1AD3F6820())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6830()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F685C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*sub_1AD3F6890())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F68A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3F68CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*sub_1AD3F6900())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 sub_1AD3F69B0(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = a1[1];
  v10 = *a1;
  v7 = a1[3];
  v8 = a1[2];
  v5 = (__n128)a1[5];
  v6 = a1[4];
  v2 = *((_QWORD *)a1 + 12);
  v3 = *((_QWORD *)a1 + 13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v10;
  *(_OWORD *)(v1 + 16) = v9;
  *(_OWORD *)(v1 + 32) = v8;
  *(_OWORD *)(v1 + 48) = v7;
  result = v5;
  *(_OWORD *)(v1 + 64) = v6;
  *(__n128 *)(v1 + 80) = v5;
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = v3;
  return result;
}

uint64_t (*sub_1AD3F6A90())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD286E04, (uint64_t (*)(void))sub_1AD286E48);
}

uint64_t sub_1AD3F6AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD3F6AC8, (uint64_t (*)(void))sub_1AD3F6B0C);
}

unint64_t sub_1AD3F6AC8()
{
  unint64_t result;

  result = qword_1EECDC1C0;
  if (!qword_1EECDC1C0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD650368, &type metadata for ContactMessage);
    atomic_store(result, (unint64_t *)&qword_1EECDC1C0);
  }
  return result;
}

unint64_t sub_1AD3F6B0C()
{
  unint64_t result;

  result = qword_1EECDC1C8;
  if (!qword_1EECDC1C8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD650390, &type metadata for ContactMessage);
    atomic_store(result, (unint64_t *)&qword_1EECDC1C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactMessage()
{
  return &type metadata for ContactMessage;
}

uint64_t _s9BlastDoor14ContactMessageV11ContactInfoVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9BlastDoor14ContactMessageV11ContactInfoVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s9BlastDoor14ContactMessageV11ContactInfoVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s9BlastDoor14ContactMessageV11ContactInfoVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9BlastDoor14ContactMessageV11ContactInfoVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1AD3F6E54(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactMessage.ContactInfo()
{
  return &type metadata for ContactMessage.ContactInfo;
}

uint64_t sub_1AD3F6EC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AD00B904(v1, a1);
}

uint64_t sub_1AD3F6ECC(uint64_t a1)
{
  uint64_t v1;

  return sub_1AD00B950(a1, v1);
}

uint64_t (*sub_1AD3F6ED4())()
{
  return nullsub_1;
}

uint64_t sub_1AD3F6EE4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3F6F6C(&qword_1EECDC1D0, (uint64_t)&unk_1AD650408);
  result = sub_1AD3F6F6C(&qword_1EECDC1D8, (uint64_t)&unk_1AD650430);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for DeliveredQuietlyReceipt()
{
  uint64_t result;

  result = qword_1ED2E2228;
  if (!qword_1ED2E2228)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1AD3F6F6C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DeliveredQuietlyReceipt();
    result = MEMORY[0x1AF44BDF0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD3F6FAC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F6FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Metadata();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1AD3F6FF4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD3F7000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Metadata();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

unint64_t sub_1AD3F7040(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD3F706C();
  result = sub_1AD3F70B0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD3F706C()
{
  unint64_t result;

  result = qword_1ED2E2208;
  if (!qword_1ED2E2208)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD650C28, &type metadata for IDSCommandWebTunnelResponse);
    atomic_store(result, (unint64_t *)&qword_1ED2E2208);
  }
  return result;
}

unint64_t sub_1AD3F70B0()
{
  unint64_t result;

  result = qword_1ED2E2278;
  if (!qword_1ED2E2278)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD650C50, &type metadata for IDSCommandWebTunnelResponse);
    atomic_store(result, (unint64_t *)&qword_1ED2E2278);
  }
  return result;
}

uint64_t destroy for IDSCommandWebTunnelResponse(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a1[4];
  if (v2 >> 60 != 15)
    sub_1AD00412C(a1[3], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[14] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = a1[26];
  if (v3 >> 60 != 15)
    sub_1AD00412C(a1[25], v3);
  swift_bridgeObjectRelease();
  v4 = a1[30];
  if (v4 >> 60 != 15)
    sub_1AD00412C(a1[29], v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSCommandWebTunnelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (uint64_t *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_1AD0040A0(*v5, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    v11 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v11;
    v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v12;
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    v15 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v15;
    v16 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v16;
    v17 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v17;
    v18 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v19 = (uint64_t *)(a2 + 200);
  v20 = *(_QWORD *)(a2 + 208);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_1AD0040A0(*v19, *(_QWORD *)(a2 + 208));
    *(_QWORD *)(a1 + 200) = v21;
    *(_QWORD *)(a1 + 208) = v20;
  }
  v22 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v22;
  v23 = (_OWORD *)(a2 + 232);
  v24 = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 232) = *v23;
  }
  else
  {
    v25 = *(_QWORD *)v23;
    sub_1AD0040A0(v25, v24);
    *(_QWORD *)(a1 + 232) = v25;
    *(_QWORD *)(a1 + 240) = v24;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v26 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v26;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSCommandWebTunnelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 24);
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      v8 = *v6;
      sub_1AD0040A0(*v6, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 24);
LABEL_6:
    *v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v9 = *v6;
  sub_1AD0040A0(*v6, *(_QWORD *)(a2 + 32));
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v7;
  sub_1AD00412C(v10, v11);
LABEL_8:
  v12 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = (_OWORD *)(a1 + 104);
  v15 = (_OWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112) == 1)
  {
    if (v16 == 1)
    {
      v17 = *(_OWORD *)(a2 + 120);
      *v14 = *v15;
      *(_OWORD *)(a1 + 120) = v17;
      v18 = *(_OWORD *)(a2 + 136);
      v19 = *(_OWORD *)(a2 + 152);
      v20 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 136) = v18;
      *(_OWORD *)(a1 + 152) = v19;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v16 == 1)
  {
    sub_1AD3F77C0(a1 + 104);
    v21 = *(_OWORD *)(a2 + 120);
    *v14 = *v15;
    *(_OWORD *)(a1 + 120) = v21;
    v22 = *(_OWORD *)(a2 + 184);
    v24 = *(_OWORD *)(a2 + 136);
    v23 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v22;
    *(_OWORD *)(a1 + 136) = v24;
    *(_OWORD *)(a1 + 152) = v23;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v25 = (uint64_t *)(a2 + 200);
  v26 = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 208) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      sub_1AD0040A0(*v25, *(_QWORD *)(a2 + 208));
      *(_QWORD *)(a1 + 200) = v27;
      *(_QWORD *)(a1 + 208) = v26;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 200);
LABEL_20:
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v25;
    goto LABEL_22;
  }
  v28 = *v25;
  sub_1AD0040A0(*v25, *(_QWORD *)(a2 + 208));
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v28;
  *(_QWORD *)(a1 + 208) = v26;
  sub_1AD00412C(v29, v30);
LABEL_22:
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = (uint64_t *)(a2 + 232);
  v32 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      v34 = *v31;
      sub_1AD0040A0(*v31, *(_QWORD *)(a2 + 240));
      v35 = *(_QWORD *)(a1 + 232);
      v36 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 232) = v34;
      *(_QWORD *)(a1 + 240) = v32;
      sub_1AD00412C(v35, v36);
      goto LABEL_29;
    }
    sub_1AD007EC0(a1 + 232);
    goto LABEL_27;
  }
  if (v32 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v31;
    goto LABEL_29;
  }
  v33 = *v31;
  sub_1AD0040A0(*v31, *(_QWORD *)(a2 + 240));
  *(_QWORD *)(a1 + 232) = v33;
  *(_QWORD *)(a1 + 240) = v32;
LABEL_29:
  v37 = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v37;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD3F77C0(uint64_t a1)
{
  destroy for MessagesAppBalloon.Layout();
  return a1;
}

uint64_t assignWithTake for IDSCommandWebTunnelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_OWORD *)(a1 + 24);
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 24);
LABEL_4:
    *v5 = *v6;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 32) = v8;
  sub_1AD00412C(v9, v7);
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 112) == 1)
  {
LABEL_9:
    v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v13;
    v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(a2 + 112);
  if (v12 == 1)
  {
    sub_1AD3F77C0(a1 + 104);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v20;
  swift_bridgeObjectRelease();
LABEL_11:
  v21 = (_OWORD *)(a2 + 200);
  v22 = *(_QWORD *)(a1 + 208);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 200) = *v21;
    goto LABEL_16;
  }
  v23 = *(_QWORD *)(a2 + 208);
  if (v23 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 200);
    goto LABEL_14;
  }
  v24 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)v21;
  *(_QWORD *)(a1 + 208) = v23;
  sub_1AD00412C(v24, v22);
LABEL_16:
  v25 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v25;
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)(a2 + 232);
  v27 = *(_QWORD *)(a1 + 240);
  if (v27 >> 60 != 15)
  {
    v28 = *(_QWORD *)(a2 + 240);
    if (v28 >> 60 != 15)
    {
      v29 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = *v26;
      *(_QWORD *)(a1 + 240) = v28;
      sub_1AD00412C(v29, v27);
      goto LABEL_21;
    }
    sub_1AD007EC0(a1 + 232);
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)v26;
LABEL_21:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v30 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSCommandWebTunnelResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 280))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSCommandWebTunnelResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponse()
{
  return &type metadata for IDSCommandWebTunnelResponse;
}

BlastDoor::ImageHeader_optional __swiftcall ImageHeader.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  BlastDoor::ImageHeader_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1AD63C434();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 2;
  switch(v3)
  {
    case 0:
      goto LABEL_3;
    case 1:
      v5 = 1;
LABEL_3:
      v6 = v5;
      break;
    case 2:
      break;
    case 3:
      v6 = 3;
      break;
    case 4:
      v6 = 4;
      break;
    case 5:
      v6 = 5;
      break;
    case 6:
      v6 = 6;
      break;
    case 7:
      v6 = 7;
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    default:
      v6 = 20;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t ImageHeader.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD3F7C7C + 4 * byte_1AD682C24[*v0]))(0x6C7070612E6D6F63, 0xED00007874612E65);
}

uint64_t sub_1AD3F7C7C()
{
  return 0x612E63696C627570;
}

uint64_t sub_1AD3F7D30()
{
  return 0x682E63696C627570;
}

unint64_t sub_1AD3F7D54()
{
  return 0xD000000000000010;
}

uint64_t sub_1AD3F7D70()
{
  return 0x6A2E63696C627570;
}

uint64_t sub_1AD3F7DC4()
{
  return 0x702E63696C627570;
}

uint64_t sub_1AD3F7DE4()
{
  return 0x772E63696C627570;
}

uint64_t sub_1AD3F7E04()
{
  return 0x742E63696C627570;
}

uint64_t sub_1AD3F7E24()
{
  return 0x622E63696C627570;
}

uint64_t sub_1AD3F7E44()
{
  return 0x672E63696C627570;
}

unint64_t sub_1AD3F7E60()
{
  return 0xD000000000000019;
}

uint64_t sub_1AD3F7E9C()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1AD3F7EB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AD4360F0(*a1, *a2);
}

unint64_t sub_1AD3F7EC4()
{
  unint64_t result;

  result = qword_1EECDC1E0;
  if (!qword_1EECDC1E0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for ImageHeader, &type metadata for ImageHeader);
    atomic_store(result, (unint64_t *)&qword_1EECDC1E0);
  }
  return result;
}

uint64_t sub_1AD3F7F08()
{
  sub_1AD63C4AC();
  ImageHeader.rawValue.getter();
  sub_1AD63B7F8();
  swift_bridgeObjectRelease();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD3F7F6C()
{
  ImageHeader.rawValue.getter();
  sub_1AD63B7F8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3F7FBC()
{
  sub_1AD63C4AC();
  ImageHeader.rawValue.getter();
  sub_1AD63B7F8();
  swift_bridgeObjectRelease();
  return sub_1AD63C4F4();
}

BlastDoor::ImageHeader_optional sub_1AD3F801C(Swift::String *a1)
{
  return ImageHeader.init(rawValue:)(*a1);
}

uint64_t sub_1AD3F8028@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ImageHeader.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for ImageHeader(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1AD3F8098 + 4 * byte_1AD682C3D[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1AD3F80CC + 4 * byte_1AD682C38[v4]))();
}

uint64_t sub_1AD3F80CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F80D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD3F80DCLL);
  return result;
}

uint64_t sub_1AD3F80E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD3F80F0);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1AD3F80F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD3F80FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageHeader()
{
  return &type metadata for ImageHeader;
}

double sub_1AD3F8118@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC1E8);
  v2 = swift_allocObject();
  *(_QWORD *)&result = 15;
  *(_OWORD *)(v2 + 16) = xmmword_1AD6830E0;
  *(_QWORD *)(v2 + 32) = &unk_1E5CB33A0;
  *(_QWORD *)(v2 + 40) = &unk_1E5CB3170;
  *(_QWORD *)(v2 + 48) = &unk_1E5CB3238;
  *(_QWORD *)(v2 + 56) = &unk_1E5CB3260;
  *(_QWORD *)(v2 + 64) = &unk_1E5CB3288;
  *(_QWORD *)(v2 + 72) = &unk_1E5CB32B0;
  *(_QWORD *)(v2 + 80) = &unk_1E5CB32D8;
  *(_QWORD *)(v2 + 88) = &unk_1E5CB3300;
  *(_QWORD *)(v2 + 96) = &unk_1E5CB3328;
  *(_QWORD *)(v2 + 104) = &unk_1E5CB3350;
  *(_QWORD *)(v2 + 112) = &unk_1E5CB3378;
  *(_QWORD *)(v2 + 120) = &unk_1E5CB3198;
  *(_QWORD *)(v2 + 128) = &unk_1E5CB31C0;
  *(_QWORD *)(v2 + 136) = &unk_1E5CB31E8;
  *(_QWORD *)(v2 + 144) = &unk_1E5CB3210;
  *(_BYTE *)a1 = 10;
  *(_QWORD *)(a1 + 8) = v2;
  return result;
}

void sub_1AD3F81FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_1AD3F8248()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  _BOOL8 result;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;

  if (BYTE6(v2) >= 0xCuLL)
  {
    sub_1AD0040A0(v1, v2);
    sub_1AD589660(4, v1, v2);
    if (!*(_QWORD *)(v0 + 16))
    {
      __break(1u);
      JUMPOUT(0x1AD3F84A0);
    }
    v10 = swift_bridgeObjectRetain();
    sub_1AD5897DC(v10, v20, v21);
    v12 = v11;
    swift_bridgeObjectRelease();
    sub_1AD00412C(v20, v21);
    if ((v12 & 1) != 0)
    {
      v13 = sub_1AD63AF94();
      if (*(_QWORD *)(v0 + 16) < 2uLL)
      {
        __break(1u);
        JUMPOUT(0x1AD3F84ACLL);
      }
      v15 = v13;
      v16 = v14;
      v17 = swift_bridgeObjectRetain();
      sub_1AD5897DC(v17, v15, v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      sub_1AD00412C(v15, v16);
      if ((v19 & 1) != 0)
        return 1;
    }
    return 0;
  }
  v3 = sub_1AD63BB64();
  if (qword_1ED2E7540[0] != -1)
    swift_once();
  v4 = qword_1ED2E7530;
  result = os_log_type_enabled((os_log_t)qword_1ED2E7530, v3);
  if (result)
  {
    swift_bridgeObjectRetain_n();
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v20 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = ImageHeader.rawValue.getter();
    sub_1AD43D1D0(v8, v9, &v20);
    sub_1AD63BC60();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACFC8000, v4, v3, "%{public}s header validation failed because the data wasn't log enough", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44BED4](v7, -1, -1);
    MEMORY[0x1AF44BED4](v6, -1, -1);
    return 0;
  }
  return result;
}

double sub_1AD3F84BC@<D0>(uint64_t a1@<X8>)
{
  return sub_1AD3F855C((uint64_t)&unk_1E5CB6188, (uint64_t)&unk_1E5CB6160, 13, a1);
}

double sub_1AD3F84D8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC1E8);
  v2 = swift_allocObject();
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v2 + 16) = xmmword_1AD64CE50;
  *(_QWORD *)(v2 + 32) = &unk_1E5CB5C08;
  *(_QWORD *)(v2 + 40) = &unk_1E5CB5BE0;
  *(_QWORD *)(v2 + 48) = &unk_1E5CCD120;
  *(_BYTE *)a1 = 14;
  *(_QWORD *)(a1 + 8) = v2;
  return result;
}

double sub_1AD3F8544@<D0>(uint64_t a1@<X8>)
{
  return sub_1AD3F855C((uint64_t)&unk_1E5CB2EB0, (uint64_t)&unk_1E5CB2E88, 16, a1);
}

double sub_1AD3F855C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC1E8);
  v8 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v8 + 16) = xmmword_1AD648170;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  *(_BYTE *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v8;
  return result;
}

ValueMetadata *type metadata accessor for JPEGXLContainerHeaderValidator()
{
  return &type metadata for JPEGXLContainerHeaderValidator;
}

ValueMetadata *type metadata accessor for JPEGXLCodeStreamHeaderValidator()
{
  return &type metadata for JPEGXLCodeStreamHeaderValidator;
}

ValueMetadata *type metadata accessor for GIFHeaderValidator()
{
  return &type metadata for GIFHeaderValidator;
}

ValueMetadata *type metadata accessor for BMPHeaderValidator()
{
  return &type metadata for BMPHeaderValidator;
}

ValueMetadata *type metadata accessor for TIFFHeaderValidator()
{
  return &type metadata for TIFFHeaderValidator;
}

ValueMetadata *type metadata accessor for WEBPHeaderValidator()
{
  return &type metadata for WEBPHeaderValidator;
}

ValueMetadata *type metadata accessor for PNGHeaderValidator()
{
  return &type metadata for PNGHeaderValidator;
}

ValueMetadata *type metadata accessor for JPEGHeaderValidator()
{
  return &type metadata for JPEGHeaderValidator;
}

ValueMetadata *type metadata accessor for MPOHeaderValidator()
{
  return &type metadata for MPOHeaderValidator;
}

ValueMetadata *type metadata accessor for JPEGEXTHeaderValidator()
{
  return &type metadata for JPEGEXTHeaderValidator;
}

ValueMetadata *type metadata accessor for HEIFJPEGHeaderValidator()
{
  return &type metadata for HEIFJPEGHeaderValidator;
}

ValueMetadata *type metadata accessor for HEIFHeaderValidator()
{
  return &type metadata for HEIFHeaderValidator;
}

ValueMetadata *type metadata accessor for AVISHeaderValidator()
{
  return &type metadata for AVISHeaderValidator;
}

ValueMetadata *type metadata accessor for AVIFHeaderValidator()
{
  return &type metadata for AVIFHeaderValidator;
}

ValueMetadata *type metadata accessor for MIF1HeaderValidator()
{
  return &type metadata for MIF1HeaderValidator;
}

ValueMetadata *type metadata accessor for MSF1HeaderValidator()
{
  return &type metadata for MSF1HeaderValidator;
}

ValueMetadata *type metadata accessor for HEICHeaderValidator()
{
  return &type metadata for HEICHeaderValidator;
}

ValueMetadata *type metadata accessor for AVCIHeaderValidator()
{
  return &type metadata for AVCIHeaderValidator;
}

ValueMetadata *type metadata accessor for ATXHeaderValidator()
{
  return &type metadata for ATXHeaderValidator;
}

uint64_t sub_1AD3F870C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  __int128 v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1AD00FA24((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_1AD43F93C(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AD3FA4E4(a1);
    sub_1AD43DA48(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_1AD3FA4E4((uint64_t)v9);
  }
}

uint64_t sub_1AD3F87C8(_xpc_connection_s *a1)
{
  _QWORD *v2;
  uint64_t result;
  NSObject *v4;
  void *v5;
  _QWORD v6[4];
  _QWORD aBlock[6];

  if (qword_1ED2E2C40 != -1)
    swift_once();
  v2 = off_1ED2E2C30;
  swift_getObjectType();
  result = sub_1AD0E1E64();
  if (result == 12)
  {
    MEMORY[0x1E0C80A78](result);
    v6[2] = v2;
    v6[3] = a1;
    if (*((_BYTE *)v2 + 40) == 1)
    {
      v4 = v2[2];
      v2 = (_QWORD *)swift_allocObject();
      v2[2] = sub_1AD3FA524;
      v2[3] = v6;
      a1 = (_xpc_connection_s *)swift_allocObject();
      *((_QWORD *)a1 + 2) = sub_1AD3FA5A0;
      *((_QWORD *)a1 + 3) = v2;
      aBlock[4] = sub_1AD3FA5A0;
      aBlock[5] = a1;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1AD3F94A8;
      aBlock[3] = &block_descriptor_14;
      v5 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      dispatch_sync(v4, v5);
      _Block_release(v5);
      LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((v4 & 1) == 0)
        return result;
      __break(1u);
    }
    return sub_1AD3F9108((uint64_t)v2, a1);
  }
  return result;
}

unint64_t sub_1AD3F8978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t result;

  sub_1AD3F8EBC();
  v0 = sub_1AD63BBB8();
  type metadata accessor for BlastDoorServer();
  v1 = swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v1 + 40) = 1;
  result = sub_1AD4397D4(v2);
  *(_QWORD *)(v1 + 48) = result;
  *(_QWORD *)(v1 + 16) = v0;
  *(_QWORD *)(v1 + 24) = 0;
  off_1ED2E2C30 = (_UNKNOWN *)v1;
  return result;
}

uint64_t static BlastDoorServer.service.getter()
{
  if (qword_1ED2E2C40 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1AD3F8A20(_xpc_connection_s *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 32) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 48) = sub_1AD4397D4(v5);
  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  if (a1)
  {
    *(_BYTE *)(v2 + 40) = 0;
    v6 = swift_allocObject();
    swift_weakInit();
    v10[4] = sub_1AD3FA578;
    v10[5] = v6;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_1AD608798;
    v10[3] = &block_descriptor_26;
    v7 = _Block_copy(v10);
    swift_unknownObjectRetain_n();
    v8 = a2;
    swift_release();
    xpc_connection_set_event_handler(a1, v7);
    swift_unknownObjectRelease();

    _Block_release(v7);
    swift_unknownObjectRelease();
  }
  return v2;
}

uint64_t sub_1AD3F8B34(_xpc_connection_s *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    swift_getObjectType();
    v4 = sub_1AD0E1E64();
    if (v4 != 12)
      return swift_release();
    MEMORY[0x1E0C80A78](v4);
    v9[2] = v3;
    v9[3] = a1;
    if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    {
      v5 = *(NSObject **)(v3 + 16);
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = sub_1AD3FA5A4;
      *(_QWORD *)(v6 + 24) = v9;
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = sub_1AD3FA5A0;
      *(_QWORD *)(v7 + 24) = v6;
      aBlock[4] = sub_1AD3FA5A0;
      aBlock[5] = v7;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1AD3F94A8;
      aBlock[3] = &block_descriptor_38;
      v8 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      dispatch_sync(v5, v8);
      _Block_release(v8);
      LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      result = swift_release();
      if ((v5 & 1) == 0)
        return result;
      __break(1u);
      return swift_release();
    }
    sub_1AD3F9108(v3, a1);
    return swift_release();
  }
  return result;
}

uint64_t BlastDoorServer.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _xpc_connection_s *v7;
  _QWORD v9[2];

  v0 = sub_1AD63BBAC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1AD63BBA0();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1AD63B60C();
  MEMORY[0x1E0C80A78](v5);
  sub_1AD3F8EBC();
  sub_1AD63B600();
  v9[1] = MEMORY[0x1E0DEE9D8];
  sub_1AD3F8EF8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC1F8);
  sub_1AD3F8F40();
  sub_1AD63BCD8();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  v6 = sub_1AD63BBC4();
  v7 = xpc_connection_create(0, v6);
  type metadata accessor for BlastDoorServer();
  swift_allocObject();
  return sub_1AD3F8A20(v7, v6);
}

unint64_t sub_1AD3F8EBC()
{
  unint64_t result;

  result = qword_1ED2E2CC8;
  if (!qword_1ED2E2CC8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED2E2CC8);
  }
  return result;
}

unint64_t sub_1AD3F8EF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EECDC1F0;
  if (!qword_1EECDC1F0)
  {
    v1 = sub_1AD63BBA0();
    result = MEMORY[0x1AF44BDF0](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1EECDC1F0);
  }
  return result;
}

unint64_t sub_1AD3F8F40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EECDC200;
  if (!qword_1EECDC200)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EECDC1F8);
    result = MEMORY[0x1AF44BDF0](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EECDC200);
  }
  return result;
}

uint64_t type metadata accessor for BlastDoorServer()
{
  return objc_opt_self();
}

void sub_1AD3F8FAC(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _xpc_connection_s *v7;

  v2 = *a1;
  sub_1AD63BB64();
  if (qword_1ED2E7540[0] != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E7340);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1AD648160;
  if (v2 == 2)
  {
    v4 = 0xE300000000000000;
    v5 = 7104878;
  }
  else
  {
    v5 = sub_1AD63B7A4();
    v4 = v6;
  }
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v3 + 64) = sub_1AD0469B8();
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v4;
  sub_1AD63B48C();
  swift_bridgeObjectRelease();
  v7 = *(_xpc_connection_s **)(v1 + 24);
  if (!v7)
  {
    sub_1AD144AC4();
    xpc_main((xpc_connection_handler_t)sub_1AD3F90E0);
  }
  xpc_connection_activate(v7);
}

uint64_t sub_1AD3F90E0()
{
  _xpc_connection_s *v0;

  v0 = (_xpc_connection_s *)swift_unknownObjectRetain();
  sub_1AD3F87C8(v0);
  return swift_unknownObjectRelease();
}

uint64_t sub_1AD3F9108(uint64_t a1, _xpc_connection_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pid_t pid;
  __int128 v15;
  uint64_t v16;
  _xpc_connection_s *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 aBlock;
  __int128 v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1920);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2DAE40);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClientConnection();
  v11 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v11 + 72) = MEMORY[0x1E0DEE9E0];
  v12 = v11 + OBJC_IVAR____TtC9BlastDoor16ClientConnection_clientConnectionQueue;
  v13 = sub_1AD63BA2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF07B8], v4);
  swift_retain();
  swift_unknownObjectRetain();
  sub_1AD39C898((uint64_t)v10, (uint64_t)v7, v12);
  swift_weakAssign();
  *(_QWORD *)(v11 + 24) = a2;
  aBlock = 0u;
  v26 = 0u;
  swift_unknownObjectRetain();
  xpc_connection_get_audit_token();
  pid = xpc_connection_get_pid(a2);
  v15 = v26;
  *(_OWORD *)(v11 + 32) = aBlock;
  *(_OWORD *)(v11 + 48) = v15;
  *(_DWORD *)(v11 + 64) = pid;
  swift_release();
  swift_unknownObjectRelease();
  swift_beginAccess();
  v16 = swift_retain();
  MEMORY[0x1AF44A674](v16);
  if (*(_QWORD *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1AD63B9D8();
  sub_1AD63B9F0();
  sub_1AD63B9CC();
  swift_endAccess();
  v17 = *(_xpc_connection_s **)(v11 + 24);
  v18 = swift_allocObject();
  swift_weakInit();
  v27 = sub_1AD3FA570;
  v28 = v18;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v26 = sub_1AD608798;
  *((_QWORD *)&v26 + 1) = &block_descriptor_20;
  v19 = _Block_copy(&aBlock);
  swift_release();
  xpc_connection_set_event_handler(v17, v19);
  _Block_release(v19);
  xpc_connection_activate(v17);
  sub_1AD63BB64();
  if (qword_1ED2E7540[0] != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E7340);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1AD648160;
  *(_QWORD *)&aBlock = v11;
  swift_retain();
  v21 = sub_1AD63B7A4();
  v23 = v22;
  *(_QWORD *)(v20 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v20 + 64) = sub_1AD0469B8();
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 40) = v23;
  sub_1AD63B48C();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3F94A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t BlastDoorServer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BlastDoorServer.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD3F9538(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t isEscapingClosureAtFileLocation;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  _QWORD aBlock[6];

  isEscapingClosureAtFileLocation = v1;
  v29[3] = result;
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v4 = *(NSObject **)(v1 + 16);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_1AD3F9DA0;
    *(_QWORD *)(v5 + 24) = v29;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1AD3FA0B0;
    *(_QWORD *)(v6 + 24) = v5;
    aBlock[4] = sub_1AD3FA0B0;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1AD3F94A8;
    aBlock[3] = &block_descriptor_0;
    v7 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v4, v7);
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return result;
    __break(1u);
  }
  v8 = result;
  v9 = (unint64_t *)(isEscapingClosureAtFileLocation + 32);
  swift_beginAccess();
  v10 = *(_QWORD *)(isEscapingClosureAtFileLocation + 32);
  if (v10 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    v11 = sub_1AD63BE34();
    if (!v11)
      goto LABEL_16;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_16;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    v15 = MEMORY[0x1AF44AA40](0, v10);
    swift_unknownObjectRelease();
    if (v15 != v8)
    {
LABEL_8:
      if (v11 != 1)
      {
        v12 = 5;
        do
        {
          v13 = v12 - 4;
          if ((v10 & 0xC000000000000001) != 0)
          {
            v2 = MEMORY[0x1AF44AA40](v12 - 4, v10);
            swift_unknownObjectRelease();
            if (v2 == v8)
              goto LABEL_18;
          }
          else if (*(_QWORD *)(v10 + 8 * v12) == v8)
          {
LABEL_18:
            result = swift_bridgeObjectRelease();
            goto LABEL_25;
          }
          v14 = v12 - 3;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
            goto LABEL_20;
          }
          ++v12;
        }
        while (v14 != v11);
      }
LABEL_16:
      swift_bridgeObjectRelease();
      if (*v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v13 = sub_1AD63BE34();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      goto LABEL_28;
    }
  }
  else if (*(_QWORD *)(v10 + 32) != v8)
  {
    goto LABEL_8;
  }
  result = swift_bridgeObjectRelease();
  v13 = 0;
LABEL_25:
  v2 = v13 + 1;
  if (__OFADD__(v13, 1))
    goto LABEL_34;
  if (*v9 >> 62)
    goto LABEL_35;
  if (v2 == *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
LABEL_28:
      v8 = *v9;
      if (*v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v16 = sub_1AD63BE34();
        swift_bridgeObjectRelease();
        if (v16 >= v13)
        {
LABEL_30:
          sub_1AD3F9DA8(v13, v16);
          return swift_endAccess();
        }
      }
      else
      {
        v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v16 >= v13)
          goto LABEL_30;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      v17 = sub_1AD63BE34();
      result = swift_bridgeObjectRelease();
    }
    while (v2 == v17);
  }
  v18 = v13 + 5;
  while (1)
  {
    v19 = v18 - 4;
    v20 = *v9;
    if ((*v9 & 0xC000000000000001) != 0)
    {
      v28 = MEMORY[0x1AF44AA40](v18 - 4);
      result = swift_unknownObjectRelease();
      if (v28 == v8)
        goto LABEL_61;
LABEL_41:
      if (v19 == v13)
      {
LABEL_60:
        if (__OFADD__(v13++, 1))
          goto LABEL_74;
        goto LABEL_61;
      }
      v21 = *v9;
      if ((*v9 & 0xC000000000000001) != 0)
      {
        result = MEMORY[0x1AF44AA40](v13, *v9);
        v22 = result;
        v21 = *v9;
        if ((*v9 & 0xC000000000000001) == 0)
        {
LABEL_46:
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_77;
          if (v19 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_78;
          v23 = *(_QWORD *)(v21 + 8 * v18);
          swift_retain();
          goto LABEL_49;
        }
      }
      else
      {
        if (v13 < 0)
          goto LABEL_75;
        if ((unint64_t)v13 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_76;
        v22 = *(_QWORD *)(v21 + 8 * v13 + 32);
        result = swift_retain();
        if ((v21 & 0xC000000000000001) == 0)
          goto LABEL_46;
      }
      v23 = MEMORY[0x1AF44AA40](v18 - 4, v21);
      v21 = *v9;
LABEL_49:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v9 = v21;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v21 & 0x8000000000000000) != 0
        || (v21 & 0x4000000000000000) != 0)
      {
        sub_1AD48AD50(v21);
      }
      *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20) = v23;
      swift_release();
      sub_1AD63B9CC();
      v25 = *v9;
      result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v9 = v25;
      if (!(_DWORD)result || (v25 & 0x8000000000000000) != 0 || (v25 & 0x4000000000000000) != 0)
        sub_1AD48AD50(v25);
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_79;
      if (v19 >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_80;
      *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 8 * v18) = v22;
      swift_release();
      result = sub_1AD63B9CC();
      goto LABEL_60;
    }
    if ((v19 & 0x8000000000000000) != 0)
      break;
    if (v19 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_72;
    if (*(_QWORD *)(v20 + 8 * v18) != v8)
      goto LABEL_41;
LABEL_61:
    v2 = v18 - 3;
    if (__OFADD__(v19, 1))
      goto LABEL_73;
    if (*v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v27 = sub_1AD63BE34();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v27 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v18;
    if (v2 == v27)
      goto LABEL_28;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
  return result;
}

uint64_t sub_1AD3F9A88(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v4 = (unint64_t *)(a1 + 32);
  swift_beginAccess();
  swift_retain();
  v5 = sub_1AD3FA1CC(v4, a2);
  result = swift_release();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1AD63BE34();
    result = swift_bridgeObjectRelease();
    if (v8 >= v5)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8 >= v5)
    {
LABEL_3:
      sub_1AD3F9DA8(v5, v8);
      return swift_endAccess();
    }
  }
  __break(1u);
  return result;
}

uint64_t BlastDoorServer.register<A, B>(unpacker:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD6372A4, (uint64_t)&off_1E5CB3C08);
}

{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredFileUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD63A410, (uint64_t)&off_1E5CBA120);
}

{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredContextualUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD63A410, (uint64_t)&off_1E5CBFE60);
}

{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredContextualFileUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD63A410, (uint64_t)&off_1E5CC14E0);
}

{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredContextualFileAsyncUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD63A410, (uint64_t)&off_1E5CC26C8);
}

{
  return sub_1AD3F9C08(a1, a2, a3, a4, a5, (uint64_t)type metadata accessor for RegisteredContextualFileSessionUnpacker, (void (*)(char *, uint64_t, uint64_t))sub_1AD63A410, (uint64_t)&off_1E5CC29A8);
}

uint64_t sub_1AD3F9C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_0;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30[5];

  v29 = a8;
  v28[1] = a4;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v18(0, v16, v17);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v28 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  a7(v15, a3, a5);
  v30[0] = a2;
  swift_getMetatypeMetadata();
  v23 = sub_1AD63B798();
  v25 = v24;
  v30[3] = v19;
  v30[4] = v29;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v30);
  (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(boxed_opaque_existential_0, v22, v19);
  swift_beginAccess();
  sub_1AD3F870C((uint64_t)v30, v23, v25);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

_xpc_connection_s *BlastDoorServer.endpoint.getter()
{
  uint64_t v0;
  _xpc_connection_s *result;

  result = *(_xpc_connection_s **)(v0 + 24);
  if (result)
    return xpc_endpoint_create(result);
  __break(1u);
  return result;
}

uint64_t method lookup function for BlastDoorServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BlastDoorServer.resume(sandboxID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_1AD3F9DA0()
{
  uint64_t v0;

  return sub_1AD3F9A88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1AD3F9DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = sub_1AD63BE34();
  swift_bridgeObjectRelease();
  if (v21 < v2)
    goto LABEL_31;
LABEL_4:
  v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v7 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62)
    goto LABEL_34;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 - v6;
  if (__OFADD__(v7, v5))
    goto LABEL_36;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x1AF44AA4C](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ClientConnection();
  swift_arrayDestroy();
  if (!v5)
    return sub_1AD63B9CC();
  if (!(*v3 >> 62))
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = sub_1AD63BE34();
  swift_bridgeObjectRelease();
  v16 = v22 - v2;
  if (__OFSUB__(v22, v2))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v17[8 * v16])
      memmove(v14, v17, 8 * v16);
    if (!(*v3 >> 62))
    {
      v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v18 + v5;
      if (!__OFADD__(v18, v5))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v19;
        return sub_1AD63B9CC();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
    v19 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_1AD63BE64();
  __break(1u);
  return result;
}

uint64_t sub_1AD3FA0A0()
{
  return swift_deallocObject();
}

uint64_t sub_1AD3FA0B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1AD3FA0D0()
{
  return swift_deallocObject();
}

uint64_t sub_1AD3FA0E0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x1AF44AA40](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    v4 = sub_1AD63BE34();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1AD3FA1CC(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = sub_1AD3FA0E0(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v22 = sub_1AD63BE34();
      swift_bridgeObjectRelease();
      if (v9 != v22)
        goto LABEL_6;
    }
    else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v6 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v9 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_46;
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = sub_1AD63BE34();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18)
          return v6;
      }
      v19 = MEMORY[0x1AF44AA40](i - 4);
      swift_unknownObjectRelease();
      if (v19 == a2)
        goto LABEL_31;
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1))
          goto LABEL_47;
        goto LABEL_31;
      }
      v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x1AF44AA40](v6, *a1);
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v14 = *(_QWORD *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v13 = *(_QWORD *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = MEMORY[0x1AF44AA40](i - 4, v9);
      v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        sub_1AD48AD50(v9);
      }
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      sub_1AD63B9CC();
      v9 = *a1;
      v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
        sub_1AD48AD50(v9);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      sub_1AD63B9CC();
      goto LABEL_30;
    }
    return v6;
  }
  v20 = *a1;
  if (!(v20 >> 62))
    return *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v23 = sub_1AD63BE34();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1AD3FA4E4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2D20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD3FA524()
{
  uint64_t v0;

  return sub_1AD3F9108(*(_QWORD *)(v0 + 16), *(_xpc_connection_s **)(v0 + 24));
}

uint64_t sub_1AD3FA52C()
{
  return swift_deallocObject();
}

uint64_t sub_1AD3FA53C()
{
  return swift_deallocObject();
}

uint64_t sub_1AD3FA54C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD3FA570(uint64_t a1)
{
  return sub_1AD4863E4(a1);
}

uint64_t sub_1AD3FA578(_xpc_connection_s *a1)
{
  return sub_1AD3F8B34(a1);
}

uint64_t sub_1AD3FA580()
{
  return swift_deallocObject();
}

uint64_t sub_1AD3FA590()
{
  return swift_deallocObject();
}

double sub_1AD3FA5CC@<D0>(uint64_t a1@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  double result;
  __int128 v5[12];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E19F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD648160;
  v3 = swift_allocObject();
  strcpy((char *)(v3 + 16), "NickNameImage");
  *(_WORD *)(v3 + 30) = -4864;
  *(_QWORD *)(inited + 32) = sub_1AD411ACC;
  *(_QWORD *)(inited + 40) = v3;
  swift_retain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = sub_1AD411ACC;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  LOWORD(v5[0]) = 0;
  sub_1AD00FD58(v5);
  sub_1AD00E830(v5, a1 + 280);
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  return result;
}

uint64_t AvatarImage.$imageName.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 AvatarImage.$imageName.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

_QWORD *AvatarImage.image.setter(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];
  uint64_t v12;

  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v11);
  sub_1AD009758(v1 + 32, &qword_1ED2E2680);
  v3 = v11[13];
  *(_OWORD *)(v1 + 224) = v11[12];
  *(_OWORD *)(v1 + 240) = v3;
  *(_OWORD *)(v1 + 256) = v11[14];
  *(_QWORD *)(v1 + 272) = v12;
  v4 = v11[9];
  *(_OWORD *)(v1 + 160) = v11[8];
  *(_OWORD *)(v1 + 176) = v4;
  v5 = v11[11];
  *(_OWORD *)(v1 + 192) = v11[10];
  *(_OWORD *)(v1 + 208) = v5;
  v6 = v11[5];
  *(_OWORD *)(v1 + 96) = v11[4];
  *(_OWORD *)(v1 + 112) = v6;
  v7 = v11[7];
  *(_OWORD *)(v1 + 128) = v11[6];
  *(_OWORD *)(v1 + 144) = v7;
  v8 = v11[1];
  *(_OWORD *)(v1 + 32) = v11[0];
  *(_OWORD *)(v1 + 48) = v8;
  v9 = v11[3];
  *(_OWORD *)(v1 + 64) = v11[2];
  *(_OWORD *)(v1 + 80) = v9;
  return sub_1AD046A30(a1);
}

uint64_t AvatarImage.$image.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE __src[440];

  sub_1ACFF64C0(a1, (uint64_t)__src, &qword_1ED2E2FE8);
  v3 = (void *)(v1 + 32);
  sub_1AD009758((uint64_t)v3, &qword_1ED2E2FE8);
  memcpy(v3, __src, 0x1B8uLL);
  return sub_1AD009758(a1, &qword_1ED2E2FE8);
}

uint64_t AvatarImage.imageName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t AvatarImage.$image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1 + 32, a1, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3FA8D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for Wallpaper(0) + 20));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  swift_retain();
  return sub_1AD003E48(v5, v6);
}

uint64_t type metadata accessor for Wallpaper(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2DAB68);
}

__n128 sub_1AD3FA938(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = (__n128 *)(v1 + *(int *)(type metadata accessor for Wallpaper(0) + 20));
  v6 = v5[1].n128_i64[0];
  v7 = v5[1].n128_i64[1];
  swift_release();
  sub_1AD003F24(v6, v7);
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u64[0] = v3;
  v5[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3FA99C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for Wallpaper(0) + 28));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  swift_retain();
  return sub_1AD003E48(v5, v6);
}

__n128 sub_1AD3FA9EC(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = (__n128 *)(v1 + *(int *)(type metadata accessor for Wallpaper(0) + 28));
  v6 = v5[1].n128_i64[0];
  v7 = v5[1].n128_i64[1];
  swift_release();
  sub_1AD003F24(v6, v7);
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u64[0] = v3;
  v5[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD3FAA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0 + *(int *)(type metadata accessor for Wallpaper(0) + 20);
  if (*(_QWORD *)(v1 + 24) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
    return v2;
  }
  return result;
}

uint64_t sub_1AD3FAADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0 + *(int *)(type metadata accessor for Wallpaper(0) + 28);
  if (*(_QWORD *)(v1 + 24) == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
    return v2;
  }
  return result;
}

_QWORD *sub_1AD3FAB68(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];
  uint64_t v12;

  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v11);
  sub_1AD009758(v1, &qword_1ED2E2680);
  v3 = v11[13];
  *(_OWORD *)(v1 + 192) = v11[12];
  *(_OWORD *)(v1 + 208) = v3;
  *(_OWORD *)(v1 + 224) = v11[14];
  *(_QWORD *)(v1 + 240) = v12;
  v4 = v11[9];
  *(_OWORD *)(v1 + 128) = v11[8];
  *(_OWORD *)(v1 + 144) = v4;
  v5 = v11[11];
  *(_OWORD *)(v1 + 160) = v11[10];
  *(_OWORD *)(v1 + 176) = v5;
  v6 = v11[5];
  *(_OWORD *)(v1 + 64) = v11[4];
  *(_OWORD *)(v1 + 80) = v6;
  v7 = v11[7];
  *(_OWORD *)(v1 + 96) = v11[6];
  *(_OWORD *)(v1 + 112) = v7;
  v8 = v11[1];
  *(_OWORD *)v1 = v11[0];
  *(_OWORD *)(v1 + 16) = v8;
  v9 = v11[3];
  *(_OWORD *)(v1 + 32) = v11[2];
  *(_OWORD *)(v1 + 48) = v9;
  return sub_1AD046A30(a1);
}

uint64_t sub_1AD3FABF4(uint64_t a1)
{
  void *v1;
  _BYTE __src[440];

  sub_1ACFF64C0(a1, (uint64_t)__src, &qword_1ED2E2FE8);
  sub_1AD009758((uint64_t)v1, &qword_1ED2E2FE8);
  memcpy(v1, __src, 0x1B8uLL);
  return sub_1AD009758(a1, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3FAC5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3FAC80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return swift_retain();
}

__n128 sub_1AD3FAC9C(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u8[8];
  swift_release();
  result = *a1;
  v1[1] = *a1;
  v1[2].n128_u64[0] = v3;
  v1[2].n128_u8[8] = v4;
  return result;
}

uint64_t sub_1AD3FACE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return swift_retain();
}

__n128 sub_1AD3FACFC(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u8[8];
  swift_release();
  result = *a1;
  v1[3] = *a1;
  v1[4].n128_u64[0] = v3;
  v1[4].n128_u8[8] = v4;
  return result;
}

uint64_t sub_1AD3FAD40()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FADA0()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FAE00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1AD0040A0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_1AD3FAE30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3FAE5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1AD00408C(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_1AD3FAE8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1AD00408C(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_1AD3FAEBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1AD00408C(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t sub_1AD3FAEEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3FAF1C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t sub_1AD3FAF24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD3FAF54
                                                            + 4 * asc_1AD6831A0[a1]))(0x79656B6E6ELL, 0xE500000000000000);
}

uint64_t sub_1AD3FAF54()
{
  return 0x615464726F636572;
}

unint64_t sub_1AD3FAF70()
{
  return 0xD000000000000010;
}

unint64_t sub_1AD3FAF8C()
{
  return 0xD000000000000016;
}

uint64_t sub_1AD3FAFF8()
{
  unsigned __int8 *v0;

  return sub_1AD3FAF24(*v0);
}

uint64_t sub_1AD3FB000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD4115A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD3FB024()
{
  sub_1AD3FB324();
  return sub_1AD63C560();
}

uint64_t sub_1AD3FB04C()
{
  sub_1AD3FB324();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3FB074(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v28 = v1[3];
  v29 = v9;
  v10 = v1[4];
  v26 = v1[5];
  v27 = v10;
  v11 = v1[6];
  v24 = v1[7];
  v25 = v11;
  v12 = v1[9];
  v22 = v1[8];
  v23 = v12;
  v13 = v1[11];
  v20 = v1[10];
  v21 = v13;
  v34 = *((unsigned __int8 *)v1 + 96);
  v19[3] = *((unsigned __int8 *)v1 + 97);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3FB324();
  sub_1AD63C53C();
  v31 = v7;
  v32 = v8;
  v35 = 0;
  sub_1AD00FDFC();
  v14 = v30;
  sub_1AD63C068();
  if (!v14)
  {
    v16 = v26;
    v15 = v27;
    v17 = v25;
    LOBYTE(v31) = 1;
    sub_1AD63C020();
    v31 = v15;
    v32 = v16;
    v35 = 2;
    sub_1AD63C014();
    v31 = v17;
    v32 = v24;
    v35 = 3;
    sub_1AD63C014();
    v31 = v22;
    v32 = v23;
    v35 = 4;
    sub_1AD63C014();
    v31 = v20;
    v32 = v21;
    v33 = v34;
    v35 = 5;
    sub_1AD2F75DC();
    sub_1AD63C068();
    LOBYTE(v31) = 6;
    sub_1AD63C02C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AD3FB324()
{
  unint64_t result;

  result = qword_1EECDC210;
  if (!qword_1EECDC210)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6837C0, &type metadata for Nickname.Context.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC210);
  }
  return result;
}

uint64_t sub_1AD3FB368@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  int v54;
  char v55;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC218);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3FB324();
  sub_1AD63C524();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v50 = a2;
  v55 = 0;
  sub_1AD00F97C();
  sub_1AD63BF54();
  v9 = v51;
  v10 = v52;
  LOBYTE(v51) = 1;
  sub_1AD0040A0(v9, v52);
  v11 = sub_1AD63BF0C();
  v13 = v12;
  v46 = v11;
  v48 = v9;
  v49 = v10;
  v55 = 2;
  swift_bridgeObjectRetain();
  v47 = 0;
  sub_1AD63BF00();
  v47 = v13;
  v15 = v51;
  v16 = v52;
  v55 = 3;
  sub_1AD00408C(v51, v52);
  sub_1AD63BF00();
  v38 = v16;
  v40 = v15;
  v18 = v51;
  v17 = v52;
  v55 = 4;
  sub_1AD00408C(v51, v52);
  v37 = 0;
  sub_1AD63BF00();
  v39 = v17;
  v41 = v18;
  v19 = v51;
  v20 = v52;
  v55 = 5;
  sub_1AD00408C(v51, v52);
  sub_1AD00F8A8();
  sub_1AD63BF54();
  v44 = v20;
  v45 = v19;
  v21 = v51;
  v54 = v53;
  LOBYTE(v51) = 6;
  v42 = v52;
  swift_retain();
  v43 = v21;
  swift_bridgeObjectRetain();
  v22 = sub_1AD63BF18();
  v23 = v41;
  LOBYTE(v13) = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LODWORD(v37) = v13 & 1;
  v24 = v48;
  v25 = v20;
  v26 = v49;
  sub_1AD0040A0(v48, v49);
  v27 = v17;
  swift_bridgeObjectRetain();
  v28 = v38;
  sub_1AD00408C(v40, v38);
  sub_1AD00408C(v23, v17);
  v29 = v45;
  sub_1AD00408C(v45, v25);
  sub_1AD004118(v29, v25);
  sub_1AD004118(v23, v27);
  v30 = v40;
  sub_1AD004118(v40, v28);
  v31 = v47;
  swift_bridgeObjectRelease();
  sub_1AD00412C(v24, v26);
  v32 = v50;
  *v50 = v24;
  v32[1] = v26;
  v32[2] = v46;
  v32[3] = v31;
  v32[4] = v30;
  v32[5] = v28;
  v32[6] = v23;
  v32[7] = v27;
  v34 = v44;
  v33 = v45;
  v32[8] = v45;
  v32[9] = v34;
  v35 = v42;
  v32[10] = v43;
  v32[11] = v35;
  *((_BYTE *)v32 + 96) = v54;
  *((_BYTE *)v32 + 97) = v37;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1AD00412C(v24, v26);
  swift_bridgeObjectRelease();
  sub_1AD004118(v40, v28);
  sub_1AD004118(v41, v39);
  sub_1AD004118(v33, v34);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD3FB9FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD3FB368(a1, a2);
}

uint64_t sub_1AD3FBA10(_QWORD *a1)
{
  return sub_1AD3FB074(a1);
}

uint64_t sub_1AD3FBA24()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3FBA50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1AD3FBA84())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FBA94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3FBAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1AD3FBAF4())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FBB04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1 + 32, a1, &qword_1EECDC220);
}

uint64_t sub_1AD3FBB28(uint64_t a1)
{
  uint64_t v1;

  return sub_1ACFF6540(a1, v1 + 32, &qword_1EECDC220);
}

uint64_t (*sub_1AD3FBB48())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FBB58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Nickname(0);
  return sub_1ACFF64C0(v1 + *(int *)(v3 + 28), a1, &qword_1EECDC228);
}

uint64_t type metadata accessor for Nickname(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2DAB58);
}

uint64_t sub_1AD3FBBA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Nickname(0);
  return sub_1ACFF6540(a1, v1 + *(int *)(v3 + 28), &qword_1EECDC228);
}

uint64_t (*sub_1AD3FBBE4())(_QWORD)
{
  type metadata accessor for Nickname(0);
  return nullsub_1;
}

uint64_t sub_1AD3FBC0C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for Nickname(0) + 32));
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD3FBC40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(v1 + *(int *)(type metadata accessor for Nickname(0) + 32));
  result = swift_bridgeObjectRelease();
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t (*sub_1AD3FBC80())(_QWORD)
{
  type metadata accessor for Nickname(0);
  return nullsub_1;
}

uint64_t sub_1AD3FBCA8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD3FBCDC + 4 * byte_1AD6831A7[*v0]))(0x6D614E7473726966, 0xE900000000000065);
}

uint64_t sub_1AD3FBCDC()
{
  return 0x656D614E7473616CLL;
}

uint64_t sub_1AD3FBCF4()
{
  return 0x726174617661;
}

uint64_t sub_1AD3FBD08()
{
  return 0x657061706C6C6177;
}

uint64_t sub_1AD3FBD20()
{
  return 0x736E756F6E6F7270;
}

uint64_t sub_1AD3FBD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD411860(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD3FBD5C()
{
  sub_1AD3FBFAC();
  return sub_1AD63C560();
}

uint64_t sub_1AD3FBD84()
{
  sub_1AD3FBFAC();
  return sub_1AD63C56C();
}

uint64_t sub_1AD3FBDAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC230);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD3FBFAC();
  sub_1AD63C53C();
  LOBYTE(v12) = 0;
  sub_1AD63BFD8();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_1AD63BFD8();
    LOBYTE(v12) = 2;
    sub_1AD3FBFF0();
    sub_1AD63C014();
    v9 = type metadata accessor for Nickname(0);
    LOBYTE(v12) = 3;
    type metadata accessor for Wallpaper(0);
    sub_1ACFF9724(&qword_1EECDC248, type metadata accessor for Wallpaper, (uint64_t)&unk_1AD651560);
    sub_1AD63C014();
    v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_1AD3FC034();
    sub_1AD63C014();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD3FBFAC()
{
  unint64_t result;

  result = qword_1EECDC238;
  if (!qword_1EECDC238)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683770, &type metadata for Nickname.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC238);
  }
  return result;
}

unint64_t sub_1AD3FBFF0()
{
  unint64_t result;

  result = qword_1EECDC240;
  if (!qword_1EECDC240)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for AvatarImage, &type metadata for AvatarImage);
    atomic_store(result, (unint64_t *)&qword_1EECDC240);
  }
  return result;
}

unint64_t sub_1AD3FC034()
{
  unint64_t result;

  result = qword_1EECDC250;
  if (!qword_1EECDC250)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&qword_1EECDC250);
  }
  return result;
}

uint64_t sub_1AD3FC078@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[60];
  char v39;

  v30 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
  MEMORY[0x1E0C80A78](v3);
  v34 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC258);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Nickname(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 2) = 0u;
  v32 = v10 + 32;
  *((_QWORD *)v10 + 62) = 0;
  *((_OWORD *)v10 + 29) = 0u;
  *((_OWORD *)v10 + 30) = 0u;
  *((_OWORD *)v10 + 27) = 0u;
  *((_OWORD *)v10 + 28) = 0u;
  *((_OWORD *)v10 + 25) = 0u;
  *((_OWORD *)v10 + 26) = 0u;
  *((_OWORD *)v10 + 23) = 0u;
  *((_OWORD *)v10 + 24) = 0u;
  *((_OWORD *)v10 + 21) = 0u;
  *((_OWORD *)v10 + 22) = 0u;
  *((_OWORD *)v10 + 19) = 0u;
  *((_OWORD *)v10 + 20) = 0u;
  *((_OWORD *)v10 + 17) = 0u;
  *((_OWORD *)v10 + 18) = 0u;
  *((_OWORD *)v10 + 15) = 0u;
  *((_OWORD *)v10 + 16) = 0u;
  *((_OWORD *)v10 + 13) = 0u;
  *((_OWORD *)v10 + 14) = 0u;
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  *((_OWORD *)v10 + 9) = 0u;
  *((_OWORD *)v10 + 10) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v11 = (uint64_t)&v10[*(int *)(v8 + 28)];
  v12 = type metadata accessor for Wallpaper(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v31 = v11;
  v13(v11, 1, 1, v12);
  v14 = &v10[*(int *)(v7 + 32)];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1AD3FBFAC();
  v16 = v6;
  v17 = v37;
  sub_1AD63C524();
  if (!v17)
  {
    v37 = v12;
    v29 = v14;
    v19 = (uint64_t)v34;
    v18 = v35;
    v20 = (uint64_t)v32;
    v21 = v33;
    LOBYTE(v38[0]) = 0;
    *(_QWORD *)v10 = sub_1AD63BEC4();
    *((_QWORD *)v10 + 1) = v22;
    LOBYTE(v38[0]) = 1;
    *((_QWORD *)v10 + 2) = sub_1AD63BEC4();
    *((_QWORD *)v10 + 3) = v23;
    v39 = 2;
    sub_1AD3FC404();
    sub_1AD63BF00();
    sub_1ACFF6540((uint64_t)v38, v20, &qword_1EECDC220);
    LOBYTE(v38[0]) = 3;
    sub_1ACFF9724(&qword_1EECDC268, type metadata accessor for Wallpaper, (uint64_t)&unk_1AD651538);
    sub_1AD63BF00();
    sub_1ACFF6540(v19, v31, &qword_1EECDC228);
    v39 = 4;
    sub_1AD3FC448();
    sub_1AD63BF00();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
    v25 = v38[0];
    v26 = v38[1];
    v27 = v29;
    swift_bridgeObjectRelease();
    *(_QWORD *)v27 = v25;
    *((_QWORD *)v27 + 1) = v26;
    sub_1AD3FC48C((uint64_t)v10, v30);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return sub_1AD066230((uint64_t)v10, type metadata accessor for Nickname);
}

unint64_t sub_1AD3FC404()
{
  unint64_t result;

  result = qword_1EECDC260;
  if (!qword_1EECDC260)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for AvatarImage, &type metadata for AvatarImage);
    atomic_store(result, (unint64_t *)&qword_1EECDC260);
  }
  return result;
}

unint64_t sub_1AD3FC448()
{
  unint64_t result;

  result = qword_1EECDC270;
  if (!qword_1EECDC270)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&qword_1EECDC270);
  }
  return result;
}

uint64_t sub_1AD3FC48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Nickname(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD3FC4D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD3FC078(a1, a2);
}

uint64_t sub_1AD3FC4E4(_QWORD *a1)
{
  return sub_1AD3FBDAC(a1);
}

uint64_t (*AvatarImage.imageName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD34BDE0;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

void (*AvatarImage.$imageName.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  *v3 = *v1;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD34BF10;
}

uint64_t AvatarImage.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(v1 + 32, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v4;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AvatarImage.image.modify(_QWORD *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = (char *)malloc(0x1F8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 62) = v1;
  result = sub_1ACFF64C0(v1 + 32, (uint64_t)(v3 + 248), &qword_1ED2E2680);
  if (*((_QWORD *)v3 + 34))
  {
    v5 = *(_OWORD *)(v3 + 456);
    *((_OWORD *)v3 + 12) = *(_OWORD *)(v3 + 440);
    *((_OWORD *)v3 + 13) = v5;
    *((_OWORD *)v3 + 14) = *(_OWORD *)(v3 + 472);
    *((_QWORD *)v3 + 30) = *((_QWORD *)v3 + 61);
    v6 = *(_OWORD *)(v3 + 392);
    *((_OWORD *)v3 + 8) = *(_OWORD *)(v3 + 376);
    *((_OWORD *)v3 + 9) = v6;
    v7 = *(_OWORD *)(v3 + 424);
    *((_OWORD *)v3 + 10) = *(_OWORD *)(v3 + 408);
    *((_OWORD *)v3 + 11) = v7;
    v8 = *(_OWORD *)(v3 + 328);
    *((_OWORD *)v3 + 4) = *(_OWORD *)(v3 + 312);
    *((_OWORD *)v3 + 5) = v8;
    v9 = *(_OWORD *)(v3 + 360);
    *((_OWORD *)v3 + 6) = *(_OWORD *)(v3 + 344);
    *((_OWORD *)v3 + 7) = v9;
    v10 = *(_OWORD *)(v3 + 264);
    *(_OWORD *)v3 = *(_OWORD *)(v3 + 248);
    *((_OWORD *)v3 + 1) = v10;
    v11 = *(_OWORD *)(v3 + 296);
    result = (uint64_t)sub_1AD3AA16C;
    *((_OWORD *)v3 + 2) = *(_OWORD *)(v3 + 280);
    *((_OWORD *)v3 + 3) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*AvatarImage.$image.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x530uLL);
  *a1 = v3;
  v3[165] = v1;
  sub_1ACFF64C0(v1 + 32, (uint64_t)v3, &qword_1ED2E2FE8);
  return sub_1AD3AA348;
}

BlastDoor::WallpaperType __swiftcall WallpaperType.init(_:)(Swift::String a1)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  char *v4;
  BlastDoor::WallpaperType result;
  char v6;
  char v7;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = v1;
  if (a1._countAndFlagsBits == 0xD00000000000002ELL && a1._object == (void *)0x80000001AD69DBE0
    || (sub_1AD63C2A8() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v6 = 0;
  }
  else if (countAndFlagsBits == 0xD000000000000028 && object == (void *)0x80000001AD69DC10
         || (sub_1AD63C2A8() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v6 = 1;
  }
  else if (countAndFlagsBits == 0xD00000000000002CLL && object == (void *)0x80000001AD69DC40)
  {
    result = swift_bridgeObjectRelease();
    v6 = 2;
  }
  else
  {
    v7 = sub_1AD63C2A8();
    result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      v6 = 2;
    else
      v6 = 3;
  }
  *v4 = v6;
  return result;
}

BlastDoor::WallpaperType_optional __swiftcall WallpaperType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (BlastDoor::WallpaperType_optional)rawValue;
}

uint64_t WallpaperType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BlastDoor::WallpaperType_optional sub_1AD3FC8DC(Swift::Int *a1)
{
  return WallpaperType.init(rawValue:)(*a1);
}

uint64_t sub_1AD3FC8E4()
{
  sub_1AD411A84();
  return sub_1AD63B930();
}

uint64_t sub_1AD3FC940()
{
  sub_1AD411A84();
  return sub_1AD63B8D0();
}

uint64_t sub_1AD3FC98C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(v1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v4;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FCA18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v4 = (char *)malloc(0x1F8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 62) = v2;
  result = sub_1ACFF64C0(v2, (uint64_t)(v4 + 248), &qword_1ED2E2680);
  if (*((_QWORD *)v4 + 34))
  {
    v6 = *(_OWORD *)(v4 + 456);
    *((_OWORD *)v4 + 12) = *(_OWORD *)(v4 + 440);
    *((_OWORD *)v4 + 13) = v6;
    *((_OWORD *)v4 + 14) = *(_OWORD *)(v4 + 472);
    *((_QWORD *)v4 + 30) = *((_QWORD *)v4 + 61);
    v7 = *(_OWORD *)(v4 + 392);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v4 + 376);
    *((_OWORD *)v4 + 9) = v7;
    v8 = *(_OWORD *)(v4 + 424);
    *((_OWORD *)v4 + 10) = *(_OWORD *)(v4 + 408);
    *((_OWORD *)v4 + 11) = v8;
    v9 = *(_OWORD *)(v4 + 328);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v4 + 312);
    *((_OWORD *)v4 + 5) = v9;
    v10 = *(_OWORD *)(v4 + 360);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v4 + 344);
    *((_OWORD *)v4 + 7) = v10;
    v11 = *(_OWORD *)(v4 + 264);
    *(_OWORD *)v4 = *(_OWORD *)(v4 + 248);
    *((_OWORD *)v4 + 1) = v11;
    v12 = *(_OWORD *)(v4 + 296);
    result = (uint64_t)sub_1AD146614;
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 + 280);
    *((_OWORD *)v4 + 3) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*sub_1AD3FCACC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x530uLL);
  *a1 = v3;
  v3[165] = v1;
  sub_1ACFF64C0(v1, (uint64_t)v3, &qword_1ED2E2FE8);
  return sub_1AD146874;
}

uint64_t sub_1AD3FCB24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1EECD3A20);
}

uint64_t sub_1AD3FCB48(uint64_t a1)
{
  uint64_t v1;

  return sub_1ACFF6540(a1, v1, &qword_1EECD3A20);
}

uint64_t (*sub_1AD3FCB68())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FCB78()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD3FCBA4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(result + 40) & 1) != 0)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(result + 32);
  }
  return result;
}

uint64_t sub_1AD3FCC08(double a1)
{
  uint64_t v1;
  uint64_t (*v3)(double *);
  uint64_t result;
  _QWORD *v5;
  double v6;

  v3 = *(uint64_t (**)(double *))(v1 + 16);
  v6 = a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(double *)(v1 + 32) = a1;
    *(_BYTE *)(v1 + 40) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD3FCCDC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*result)(uint64_t *);

  a1[1] = v1;
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    result = (uint64_t (*)(uint64_t *))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 32);
    return sub_1AD3FCD50;
  }
  return result;
}

uint64_t sub_1AD3FCD50(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;

  v1 = a1[1];
  v2 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v6 = *a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v1 + 32) = v2;
    *(_BYTE *)(v1 + 40) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3FCE24(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  *v3 = *(_QWORD *)(v1 + 16);
  v3[1] = v4;
  v3[2] = v5;
  *((_BYTE *)v3 + 24) = v6;
  swift_retain();
  return sub_1AD3FCE88;
}

void sub_1AD3FCE88(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a1;
  v3 = (*a1)[4];
  v5 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = *((_BYTE *)*a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v3 + 16) = v5;
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = v6;
    *(_BYTE *)(v3 + 40) = v7;
    swift_release();
  }
  else
  {
    swift_release();
    *(_QWORD *)(v3 + 16) = v5;
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = v6;
    *(_BYTE *)(v3 + 40) = v7;
  }
  free(v2);
}

uint64_t sub_1AD3FCF14@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(result + 72) & 1) != 0)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(result + 64);
  }
  return result;
}

uint64_t sub_1AD3FCF78(double a1)
{
  uint64_t v1;
  uint64_t (*v3)(double *);
  uint64_t result;
  _QWORD *v5;
  double v6;

  v3 = *(uint64_t (**)(double *))(v1 + 48);
  v6 = a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(double *)(v1 + 64) = a1;
    *(_BYTE *)(v1 + 72) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD3FD04C(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*result)(uint64_t *);

  a1[1] = v1;
  if ((*(_BYTE *)(v1 + 72) & 1) != 0)
  {
    result = (uint64_t (*)(uint64_t *))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 64);
    return sub_1AD3FD0C0;
  }
  return result;
}

uint64_t sub_1AD3FD0C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;

  v1 = a1[1];
  v2 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(v1 + 48);
  v6 = *a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v1 + 64) = v2;
    *(_BYTE *)(v1 + 72) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void (*sub_1AD3FD194(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_BYTE *)(v1 + 72);
  *v3 = *(_QWORD *)(v1 + 48);
  v3[1] = v4;
  v3[2] = v5;
  *((_BYTE *)v3 + 24) = v6;
  swift_retain();
  return sub_1AD3FD1F8;
}

void sub_1AD3FD1F8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a1;
  v3 = (*a1)[4];
  v5 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = *((_BYTE *)*a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v3 + 48) = v5;
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v6;
    *(_BYTE *)(v3 + 72) = v7;
    swift_release();
  }
  else
  {
    swift_release();
    *(_QWORD *)(v3 + 48) = v5;
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v6;
    *(_BYTE *)(v3 + 72) = v7;
  }
  free(v2);
}

__n128 sub_1AD3FD284@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 80);
  v3 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1AD3FD290(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 96) = v3;
  return result;
}

uint64_t (*sub_1AD3FD29C())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FD2AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

void sub_1AD3FD2B4(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 113);
}

__n128 sub_1AD3FD2C0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 152);
  result = *(__n128 *)(v1 + 120);
  v4 = *(_OWORD *)(v1 + 136);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 sub_1AD3FD2D8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 120) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 136) = v4;
  *(_BYTE *)(v1 + 152) = v2;
  return result;
}

uint64_t (*sub_1AD3FD2F0())()
{
  return nullsub_1;
}

uint64_t sub_1AD3FD300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1 + *(int *)(type metadata accessor for Wallpaper(0) + 20);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3FD388(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  type metadata accessor for Wallpaper(0);
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v2, v1);
}

uint64_t sub_1AD3FD3D4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Wallpaper(0);
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3FD418(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*result)(uint64_t *, char);

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Wallpaper(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = v1 + v3;
  v5 = *(_QWORD *)(v4 + 24);
  if (v5 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    swift_bridgeObjectRetain();
    return sub_1AD14196C;
  }
  return result;
}

uint64_t sub_1AD3FD4B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for Wallpaper(0) + 20));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  *a2 = *v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  swift_retain();
  return sub_1AD003E48(v5, v6);
}

uint64_t sub_1AD3FD50C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Wallpaper(0) + 20));
  v7 = v6[2];
  v8 = v6[3];
  swift_retain();
  sub_1AD003E48(v4, v5);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  *v6 = v3;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v5;
  return result;
}

void (*sub_1AD3FD590(_QWORD *a1))(uint64_t **, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(int *)(type metadata accessor for Wallpaper(0) + 20);
  *((_DWORD *)v3 + 10) = v4;
  v5 = (_QWORD *)(v1 + v4);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  *v3 = *v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  swift_retain();
  sub_1AD003E48(v7, v8);
  return sub_1AD141B74;
}

uint64_t sub_1AD3FD608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Wallpaper(0);
  return sub_1ACFF64C0(v1 + *(int *)(v3 + 24), a1, &qword_1EECD3A30);
}

uint64_t sub_1AD3FD644@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1 + *(int *)(type metadata accessor for Wallpaper(0) + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 == 1)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD3FD6CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  type metadata accessor for Wallpaper(0);
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(v2, v1);
}

uint64_t sub_1AD3FD718(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Wallpaper(0);
  return _s9BlastDoor11CPIMMessageV15NamespaceHeaderV10namePrefixSSSgvs_0(a1, a2);
}

uint64_t (*sub_1AD3FD75C(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*result)(uint64_t *, char);

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Wallpaper(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = v1 + v3;
  v5 = *(_QWORD *)(v4 + 24);
  if (v5 == 1)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    swift_bridgeObjectRetain();
    return sub_1AD14196C;
  }
  return result;
}

uint64_t sub_1AD3FD7FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for Wallpaper(0) + 28));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  *a2 = *v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  swift_retain();
  return sub_1AD003E48(v5, v6);
}

uint64_t sub_1AD3FD850(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Wallpaper(0) + 28));
  v7 = v6[2];
  v8 = v6[3];
  swift_retain();
  sub_1AD003E48(v4, v5);
  swift_release();
  result = sub_1AD003F24(v7, v8);
  *v6 = v3;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v5;
  return result;
}

void (*sub_1AD3FD8D4(_QWORD *a1))(uint64_t **, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(int *)(type metadata accessor for Wallpaper(0) + 28);
  *((_DWORD *)v3 + 10) = v4;
  v5 = (_QWORD *)(v1 + v4);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  *v3 = *v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  swift_retain();
  sub_1AD003E48(v7, v8);
  return sub_1AD141B74;
}

uint64_t sub_1AD3FD94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Wallpaper(0);
  return sub_1ACFF64C0(v1 + *(int *)(v3 + 32), a1, &qword_1EECD3A30);
}

uint64_t sub_1AD3FD988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Wallpaper(0);
  return sub_1ACFF6540(a1, v1 + *(int *)(v3 + 32), &qword_1EECD3A30);
}

uint64_t (*sub_1AD3FD9C4())(_QWORD)
{
  type metadata accessor for Wallpaper(0);
  return nullsub_1;
}

uint64_t sub_1AD3FD9EC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Wallpaper(0) + 36));
}

uint64_t *sub_1AD3FDA0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5[20];

  v3 = type metadata accessor for Wallpaper(0);
  sub_1AD3FDA5C(v1 + *(int *)(v3 + 40), (uint64_t)v5);
  sub_1AD3FDA5C((uint64_t)v5, a1);
  return sub_1AD3FDAA4(v5);
}

uint64_t sub_1AD3FDA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1AD3FDAA4(uint64_t *a1)
{
  sub_1AD28AC58(*a1, a1[1]);
  return a1;
}

uint64_t sub_1AD3FDB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v20 = a7[1];
  v21 = *a7;
  v15 = type metadata accessor for Nickname(0);
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_OWORD *)(a8 + 160) = 0u;
  *(_OWORD *)(a8 + 176) = 0u;
  *(_OWORD *)(a8 + 192) = 0u;
  *(_OWORD *)(a8 + 208) = 0u;
  *(_OWORD *)(a8 + 224) = 0u;
  *(_OWORD *)(a8 + 240) = 0u;
  *(_OWORD *)(a8 + 256) = 0u;
  *(_OWORD *)(a8 + 272) = 0u;
  *(_OWORD *)(a8 + 288) = 0u;
  *(_OWORD *)(a8 + 304) = 0u;
  *(_OWORD *)(a8 + 320) = 0u;
  *(_OWORD *)(a8 + 336) = 0u;
  *(_OWORD *)(a8 + 352) = 0u;
  *(_OWORD *)(a8 + 368) = 0u;
  *(_OWORD *)(a8 + 384) = 0u;
  *(_OWORD *)(a8 + 400) = 0u;
  *(_OWORD *)(a8 + 416) = 0u;
  *(_OWORD *)(a8 + 432) = 0u;
  *(_OWORD *)(a8 + 448) = 0u;
  *(_OWORD *)(a8 + 464) = 0u;
  *(_OWORD *)(a8 + 480) = 0u;
  *(_QWORD *)(a8 + 496) = 0;
  *(_OWORD *)(a8 + 32) = 0u;
  v16 = a8 + *(int *)(v15 + 28);
  v17 = type metadata accessor for Wallpaper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)(a8 + *(int *)(v15 + 32));
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  sub_1ACFF6540(a5, a8 + 32, &qword_1EECDC220);
  sub_1ACFF6540(a6, v16, &qword_1EECDC228);
  result = swift_bridgeObjectRelease();
  *v18 = v21;
  v18[1] = v20;
  return result;
}

uint64_t sub_1AD3FDC44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  char v15;

  v13 = *a12;
  v14 = a12[1];
  v15 = *((_BYTE *)a12 + 16);
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = v13;
  *(_QWORD *)(a9 + 88) = v14;
  *(_BYTE *)(a9 + 96) = v15;
  *(_BYTE *)(a9 + 97) = a13;
  return result;
}

_QWORD *AvatarImage.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t inited;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *result;
  _QWORD *v18;
  _OWORD v19[15];
  uint64_t v20;
  _QWORD v21[32];
  __int128 v22[12];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E19F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD648160;
  v9 = swift_allocObject();
  strcpy((char *)(v9 + 16), "NickNameImage");
  *(_WORD *)(v9 + 30) = -4864;
  *(_QWORD *)(inited + 32) = sub_1AD3FDF24;
  *(_QWORD *)(inited + 40) = v9;
  swift_retain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = sub_1AD3FDF24;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  LOWORD(v22[0]) = 0;
  sub_1AD00FD58(v22);
  sub_1AD00E830(v22, a4 + 280);
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_QWORD *)(a4 + 272) = 0;
  if (*(_QWORD *)(v9 + 16) == a1 && *(_QWORD *)(v9 + 24) == a2 || (sub_1AD63C2A8() & 1) != 0)
  {
    *(_QWORD *)(a4 + 16) = a1;
    *(_QWORD *)(a4 + 24) = a2;
    sub_1AD0CFB8C((uint64_t)a3, (uint64_t)v21);
    sub_1AD0CFB8C((uint64_t)v21, (uint64_t)v19);
    sub_1AD009758(a4 + 32, &qword_1ED2E2680);
    v10 = v19[13];
    *(_OWORD *)(a4 + 224) = v19[12];
    *(_OWORD *)(a4 + 240) = v10;
    *(_OWORD *)(a4 + 256) = v19[14];
    *(_QWORD *)(a4 + 272) = v20;
    v11 = v19[9];
    *(_OWORD *)(a4 + 160) = v19[8];
    *(_OWORD *)(a4 + 176) = v11;
    v12 = v19[11];
    *(_OWORD *)(a4 + 192) = v19[10];
    *(_OWORD *)(a4 + 208) = v12;
    v13 = v19[5];
    *(_OWORD *)(a4 + 96) = v19[4];
    *(_OWORD *)(a4 + 112) = v13;
    v14 = v19[7];
    *(_OWORD *)(a4 + 128) = v19[6];
    *(_OWORD *)(a4 + 144) = v14;
    v15 = v19[1];
    *(_OWORD *)(a4 + 32) = v19[0];
    *(_OWORD *)(a4 + 48) = v15;
    v16 = v19[3];
    *(_OWORD *)(a4 + 64) = v19[2];
    *(_OWORD *)(a4 + 80) = v16;
    sub_1AD046A30(v21);
    return sub_1AD046A30(a3);
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v18 = 0x6E776F6E6B6E753CLL;
    v18[1] = 0xE90000000000003ELL;
    v18[2] = 0xD00000000000001CLL;
    v18[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = (_QWORD *)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FDED0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1AD63C2A8();
}

uint64_t sub_1AD3FDF00()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AD3FDF24(_QWORD *a1)
{
  uint64_t v1;

  return sub_1AD3FDED0(a1, (_QWORD *)(v1 + 16));
}

unint64_t sub_1AD3FDF30()
{
  unint64_t result;

  result = qword_1EECDC278;
  if (!qword_1EECDC278)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6831CC, &type metadata for Nickname.Context);
    atomic_store(result, (unint64_t *)&qword_1EECDC278);
  }
  return result;
}

unint64_t sub_1AD3FDF78()
{
  unint64_t result;

  result = qword_1EECDC280;
  if (!qword_1EECDC280)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6831F4, &type metadata for Nickname.Context);
    atomic_store(result, (unint64_t *)&qword_1EECDC280);
  }
  return result;
}

uint64_t sub_1AD3FDFBC(uint64_t a1)
{
  uint64_t result;

  result = sub_1ACFF9724(&qword_1EECDC288, type metadata accessor for Nickname, (uint64_t)&unk_1AD683248);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AD3FDFF8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECDC290, type metadata accessor for Nickname, (uint64_t)&unk_1AD683264);
  result = sub_1ACFF9724(&qword_1EECDC298, type metadata accessor for Nickname, (uint64_t)&unk_1AD68328C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3FE054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD3FC404, (uint64_t (*)(void))sub_1AD3FBFF0);
}

unint64_t sub_1AD3FE06C()
{
  unint64_t result;

  result = qword_1EECDC2A0;
  if (!qword_1EECDC2A0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for WallpaperType, &type metadata for WallpaperType);
    atomic_store(result, (unint64_t *)&qword_1EECDC2A0);
  }
  return result;
}

uint64_t sub_1AD3FE0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD292B00, (uint64_t (*)(void))sub_1AD292BAC);
}

uint64_t sub_1AD3FE0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28ABD0, (uint64_t (*)(void))sub_1AD28AD4C);
}

uint64_t sub_1AD3FE0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD28AC14, (uint64_t (*)(void))sub_1AD28AD90);
}

uint64_t sub_1AD3FE0EC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1EECDC268, type metadata accessor for Wallpaper, (uint64_t)&unk_1AD651538);
  result = sub_1ACFF9724(&qword_1EECDC248, type metadata accessor for Wallpaper, (uint64_t)&unk_1AD651560);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD3FE14C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD3FE188@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD3FE1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(a1 + 32, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v4;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FE268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1 + 32, a2, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3FE290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(a1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v4;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD3FE338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1, a2, &qword_1ED2E2FE8);
}

uint64_t sub_1AD3FE360(double *a1)
{
  return sub_1AD0037A8(*a1);
}

uint64_t sub_1AD3FE384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  return swift_retain();
}

uint64_t sub_1AD3FE3A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  return result;
}

uint64_t sub_1AD3FE400(double *a1)
{
  return sub_1AD0037A8(*a1);
}

uint64_t sub_1AD3FE424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  return swift_retain();
}

uint64_t sub_1AD3FE444(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = v5;
  *(_BYTE *)(a2 + 72) = v6;
  return result;
}

uint64_t sub_1AD3FE4BC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  int v73;
  __int128 v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _OWORD *v112;
  _OWORD *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  _OWORD *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  _QWORD *v187;
  uint64_t v188;
  _OWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _OWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  unint64_t v376;
  unint64_t v377;
  int *v378;
  uint64_t v379;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v25 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v379 = v6;
    if (v9)
    {
      v10 = v3[5];
      v11 = v3[6];
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v10;
      v12 = v3[7];
      *(_QWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 56) = v12;
      v13 = v3[11];
      swift_retain();
      swift_bridgeObjectRetain();
      if (v13)
      {
        v14 = v3[12];
        *(_QWORD *)(a1 + 88) = v13;
        *(_QWORD *)(a1 + 96) = v14;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 64, (uint64_t)(v3 + 8), v13);
        *(_QWORD *)(a1 + 104) = v3[13];
        *(_BYTE *)(a1 + 112) = *((_BYTE *)v3 + 112);
        v15 = v3[18];
        v16 = v3[20];
        v17 = v3[22];
        v18 = v3[32];
        if (v15 >> 1 != 0xFFFFFFFF
          || (v17 | (unint64_t)v16) > 1
          || v3[28] & 0xFFFFFFFFFFFFFEFELL | v3[24] & 0xFFFFFFFFFFFF00FELL
          || (v18 | v3[30]) >= 2)
        {
          v33 = v3[16];
          v34 = v3[17];
          v273 = v3[23];
          v305 = v3[25];
          v321 = v3[26];
          v329 = v3[27];
          v337 = v3[29];
          v345 = v3[31];
          v353 = v3[33];
          v360 = v3[34];
          v367 = v3[35];
          v370 = v3[36];
          v373 = v3[37];
          v376 = v3[38];
          v281 = v3[24];
          v35 = v3[15];
          v313 = v3[30];
          v289 = v3[28];
          v36 = v3[19];
          v297 = v3[32];
          v37 = v3[21];
          sub_1AD00FEAC(v35, v33, v34, v15, v36, v16, v37, v17, v273, v281, v305, v321, v329, v289, v337, v313, v345, v18, v353,
            v360,
            v367,
            v370,
            v373,
            v376);
          *(_QWORD *)(a1 + 120) = v35;
          *(_QWORD *)(a1 + 128) = v33;
          *(_QWORD *)(a1 + 136) = v34;
          *(_QWORD *)(a1 + 144) = v15;
          *(_QWORD *)(a1 + 152) = v36;
          *(_QWORD *)(a1 + 160) = v16;
          *(_QWORD *)(a1 + 168) = v37;
          *(_QWORD *)(a1 + 176) = v17;
          *(_QWORD *)(a1 + 184) = v273;
          *(_QWORD *)(a1 + 192) = v281;
          *(_QWORD *)(a1 + 200) = v305;
          *(_QWORD *)(a1 + 208) = v321;
          *(_QWORD *)(a1 + 216) = v329;
          *(_QWORD *)(a1 + 224) = v289;
          *(_QWORD *)(a1 + 232) = v337;
          *(_QWORD *)(a1 + 240) = v313;
          *(_QWORD *)(a1 + 248) = v345;
          *(_QWORD *)(a1 + 256) = v297;
          *(_QWORD *)(a1 + 264) = v353;
          *(_QWORD *)(a1 + 272) = v360;
          *(_QWORD *)(a1 + 280) = v367;
          *(_QWORD *)(a1 + 288) = v370;
          *(_QWORD *)(a1 + 296) = v373;
          *(_QWORD *)(a1 + 304) = v376;
        }
        else
        {
          v19 = *(_OWORD *)(v3 + 33);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(v3 + 31);
          *(_OWORD *)(a1 + 264) = v19;
          v20 = *(_OWORD *)(v3 + 37);
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(v3 + 35);
          *(_OWORD *)(a1 + 296) = v20;
          v21 = *(_OWORD *)(v3 + 25);
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(v3 + 23);
          *(_OWORD *)(a1 + 200) = v21;
          v22 = *(_OWORD *)(v3 + 29);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(v3 + 27);
          *(_OWORD *)(a1 + 232) = v22;
          v23 = *(_OWORD *)(v3 + 17);
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(v3 + 15);
          *(_OWORD *)(a1 + 136) = v23;
          v24 = *(_OWORD *)(v3 + 21);
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(v3 + 19);
          *(_OWORD *)(a1 + 168) = v24;
        }
      }
      else
      {
        v26 = *((_OWORD *)v3 + 17);
        *(_OWORD *)(a1 + 256) = *((_OWORD *)v3 + 16);
        *(_OWORD *)(a1 + 272) = v26;
        *(_OWORD *)(a1 + 288) = *((_OWORD *)v3 + 18);
        *(_QWORD *)(a1 + 304) = v3[38];
        v27 = *((_OWORD *)v3 + 13);
        *(_OWORD *)(a1 + 192) = *((_OWORD *)v3 + 12);
        *(_OWORD *)(a1 + 208) = v27;
        v28 = *((_OWORD *)v3 + 15);
        *(_OWORD *)(a1 + 224) = *((_OWORD *)v3 + 14);
        *(_OWORD *)(a1 + 240) = v28;
        v29 = *((_OWORD *)v3 + 9);
        *(_OWORD *)(a1 + 128) = *((_OWORD *)v3 + 8);
        *(_OWORD *)(a1 + 144) = v29;
        v30 = *((_OWORD *)v3 + 11);
        *(_OWORD *)(a1 + 160) = *((_OWORD *)v3 + 10);
        *(_OWORD *)(a1 + 176) = v30;
        v31 = *((_OWORD *)v3 + 5);
        *(_OWORD *)(a1 + 64) = *((_OWORD *)v3 + 4);
        *(_OWORD *)(a1 + 80) = v31;
        v32 = *((_OWORD *)v3 + 7);
        *(_OWORD *)(a1 + 96) = *((_OWORD *)v3 + 6);
        *(_OWORD *)(a1 + 112) = v32;
      }
      v38 = v3[44];
      v39 = v3[45];
      v274 = v3[47];
      v282 = v3[48];
      v290 = v3[49];
      v298 = v3[50];
      v306 = v3[51];
      v314 = v3[52];
      v322 = v3[53];
      v330 = v3[54];
      v338 = v3[55];
      v346 = v3[56];
      v354 = v3[57];
      v361 = v3[58];
      v368 = v3[59];
      v371 = v3[60];
      v374 = v3[61];
      v377 = v3[62];
      v40 = v3[39];
      v41 = v3[40];
      v42 = v3[41];
      v43 = v3[42];
      v44 = v3[43];
      v45 = v3[46];
      sub_1AD00FEAC(v40, v41, v42, v43, v44, v38, v39, v45, v274, v282, v290, v298, v306, v314, v322, v330, v338, v346, v354,
        v361,
        v368,
        v371,
        v374,
        v377);
      *(_QWORD *)(a1 + 312) = v40;
      *(_QWORD *)(a1 + 320) = v41;
      *(_QWORD *)(a1 + 328) = v42;
      *(_QWORD *)(a1 + 336) = v43;
      *(_QWORD *)(a1 + 344) = v44;
      *(_QWORD *)(a1 + 352) = v38;
      *(_QWORD *)(a1 + 360) = v39;
      *(_QWORD *)(a1 + 368) = v45;
      *(_QWORD *)(a1 + 376) = v274;
      *(_QWORD *)(a1 + 384) = v282;
      *(_QWORD *)(a1 + 392) = v290;
      *(_QWORD *)(a1 + 400) = v298;
      *(_QWORD *)(a1 + 408) = v306;
      *(_QWORD *)(a1 + 416) = v314;
      *(_QWORD *)(a1 + 424) = v322;
      *(_QWORD *)(a1 + 432) = v330;
      *(_QWORD *)(a1 + 440) = v338;
      *(_QWORD *)(a1 + 448) = v346;
      *(_QWORD *)(a1 + 456) = v354;
      *(_QWORD *)(a1 + 464) = v361;
      *(_QWORD *)(a1 + 472) = v368;
      *(_QWORD *)(a1 + 480) = v371;
      *(_QWORD *)(a1 + 488) = v374;
      v6 = v379;
      *(_QWORD *)(a1 + 496) = v377;
    }
    else
    {
      memcpy((void *)(a1 + 32), v3 + 4, 0x1D8uLL);
    }
    v46 = *(int *)(v6 + 28);
    v47 = (_OWORD *)(a1 + v46);
    v48 = (_OWORD *)((char *)v3 + v46);
    v49 = (int *)type metadata accessor for Wallpaper(0);
    v50 = *((_QWORD *)v49 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v52 = (int *)type metadata accessor for PosterArchive();
      v53 = *((_QWORD *)v52 - 1);
      v271 = v3;
      v272 = a1;
      v375 = v47;
      v378 = v49;
      v372 = v50;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v53 + 48))(v48, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v55 = *((_QWORD *)v48 + 23);
        v362 = v53;
        if (v55)
        {
          *v47 = *v48;
          *((_WORD *)v47 + 8) = *((_WORD *)v48 + 8);
          *((_BYTE *)v47 + 18) = *((_BYTE *)v48 + 18);
          v56 = *((_QWORD *)v48 + 9);
          v57 = *(_OWORD *)((char *)v48 + 40);
          *(_OWORD *)((char *)v47 + 24) = *(_OWORD *)((char *)v48 + 24);
          *(_OWORD *)((char *)v47 + 40) = v57;
          if (v56 == 1)
          {
            *(_OWORD *)((char *)v47 + 56) = *(_OWORD *)((char *)v48 + 56);
            *((_QWORD *)v47 + 9) = *((_QWORD *)v48 + 9);
          }
          else
          {
            *((_BYTE *)v47 + 56) = *((_BYTE *)v48 + 56);
            *((_QWORD *)v47 + 8) = *((_QWORD *)v48 + 8);
            *((_QWORD *)v47 + 9) = v56;
            swift_bridgeObjectRetain();
          }
          v64 = *((_QWORD *)v48 + 11);
          if (v64 == 1)
          {
            v65 = v48[8];
            v47[7] = v48[7];
            v47[8] = v65;
            v47[9] = v48[9];
            v66 = v48[6];
            v47[5] = v48[5];
            v47[6] = v66;
          }
          else
          {
            *((_BYTE *)v47 + 80) = *((_BYTE *)v48 + 80);
            *((_QWORD *)v47 + 11) = v64;
            v47[6] = v48[6];
            *((_BYTE *)v47 + 112) = *((_BYTE *)v48 + 112);
            *((_QWORD *)v47 + 15) = *((_QWORD *)v48 + 15);
            v67 = v48[9];
            v47[8] = v48[8];
            v47[9] = v67;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *((_WORD *)v47 + 80) = *((_WORD *)v48 + 80);
          *((_QWORD *)v47 + 21) = *((_QWORD *)v48 + 21);
          *((_BYTE *)v47 + 176) = *((_BYTE *)v48 + 176);
          v68 = *((_QWORD *)v48 + 24);
          *((_QWORD *)v47 + 23) = v55;
          *((_QWORD *)v47 + 24) = v68;
          v69 = (_OWORD *)((char *)v48 + 200);
          v70 = *((_QWORD *)v48 + 26);
          swift_retain();
          if (v70 == 1)
          {
            *(_OWORD *)((char *)v47 + 200) = *v69;
          }
          else
          {
            *((_QWORD *)v47 + 25) = *(_QWORD *)v69;
            *((_QWORD *)v47 + 26) = v70;
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          v58 = v48[11];
          v47[10] = v48[10];
          v47[11] = v58;
          v47[12] = v48[12];
          *((_QWORD *)v47 + 26) = *((_QWORD *)v48 + 26);
          v59 = v48[7];
          v47[6] = v48[6];
          v47[7] = v59;
          v60 = v48[9];
          v47[8] = v48[8];
          v47[9] = v60;
          v61 = v48[3];
          v47[2] = v48[2];
          v47[3] = v61;
          v62 = v48[5];
          v47[4] = v48[4];
          v47[5] = v62;
          v63 = v48[1];
          *v47 = *v48;
          v47[1] = v63;
        }
        *((_WORD *)v47 + 108) = *((_WORD *)v48 + 108);
        v71 = v47 + 14;
        v72 = v48 + 14;
        v73 = *((unsigned __int8 *)v48 + 768);
        if (v73 == 2)
        {
          v90 = v48[15];
          *v71 = *v72;
          v47[15] = v90;
          v91 = v48[17];
          v47[16] = v48[16];
          v47[17] = v91;
          v92 = *((_QWORD *)v48 + 37);
          *((_QWORD *)v47 + 36) = *((_QWORD *)v48 + 36);
          *((_QWORD *)v47 + 37) = v92;
          *((_BYTE *)v47 + 304) = *((_BYTE *)v48 + 304);
          *((_BYTE *)v47 + 768) = 2;
          swift_bridgeObjectRetain();
        }
        else if (v73 == 1)
        {
          v74 = v48[15];
          *v71 = *v72;
          v47[15] = v74;
          v75 = v47 + 16;
          v76 = v48 + 16;
          v77 = *((_QWORD *)v48 + 35);
          v355 = v52;
          if (v77)
          {
            v78 = *((_QWORD *)v48 + 36);
            *((_QWORD *)v47 + 35) = v77;
            *((_QWORD *)v47 + 36) = v78;
            (**(void (***)(_OWORD *, _OWORD *))(v77 - 8))(v75, v76);
            *((_QWORD *)v47 + 37) = *((_QWORD *)v48 + 37);
            *((_BYTE *)v47 + 304) = *((_BYTE *)v48 + 304);
            v79 = *((_QWORD *)v48 + 42);
            v80 = *((_QWORD *)v48 + 44);
            v81 = *((_QWORD *)v48 + 46);
            v82 = *((_QWORD *)v48 + 54);
            v83 = *((_QWORD *)v48 + 56);
            if (v79 >> 1 != 0xFFFFFFFF
              || (v81 | (unint64_t)v80) > 1
              || v48[26] & 0xFFFFFFFFFFFFFEFELL | v48[24] & 0xFFFFFFFFFFFF00FELL
              || (v83 | v82) >= 2)
            {
              v122 = *((_QWORD *)v48 + 41);
              v123 = *((_QWORD *)v48 + 43);
              v253 = *((_QWORD *)v48 + 47);
              v265 = *((_QWORD *)v48 + 49);
              v275 = *((_QWORD *)v48 + 50);
              v283 = *((_QWORD *)v48 + 51);
              v291 = *((_QWORD *)v48 + 53);
              v299 = *((_QWORD *)v48 + 55);
              v307 = *((_QWORD *)v48 + 57);
              v315 = *((_QWORD *)v48 + 58);
              v323 = *((_QWORD *)v48 + 59);
              v331 = *((_QWORD *)v48 + 60);
              v339 = *((_QWORD *)v48 + 61);
              v347 = *((_QWORD *)v48 + 62);
              v124 = *((_QWORD *)v48 + 39);
              v245 = *((_QWORD *)v48 + 54);
              v248 = *((_QWORD *)v48 + 48);
              v125 = *((_QWORD *)v48 + 40);
              v243 = *((_QWORD *)v48 + 52);
              v126 = *((_QWORD *)v48 + 45);
              v259 = *((_QWORD *)v48 + 56);
              sub_1AD00FEAC(v124, v125, v122, v79, v123, v80, v126, v81, v253, v248, v265, v275, v283, v243, v291, v82, v299, v83, v307,
                v315,
                v323,
                v331,
                v339,
                v347);
              *((_QWORD *)v47 + 39) = v124;
              *((_QWORD *)v47 + 40) = v125;
              *((_QWORD *)v47 + 41) = v122;
              *((_QWORD *)v47 + 42) = v79;
              *((_QWORD *)v47 + 43) = v123;
              *((_QWORD *)v47 + 44) = v80;
              *((_QWORD *)v47 + 45) = v126;
              *((_QWORD *)v47 + 46) = v81;
              *((_QWORD *)v47 + 47) = v253;
              *((_QWORD *)v47 + 48) = v248;
              *((_QWORD *)v47 + 49) = v265;
              *((_QWORD *)v47 + 50) = v275;
              *((_QWORD *)v47 + 51) = v283;
              *((_QWORD *)v47 + 52) = v243;
              *((_QWORD *)v47 + 53) = v291;
              *((_QWORD *)v47 + 54) = v245;
              *((_QWORD *)v47 + 55) = v299;
              *((_QWORD *)v47 + 56) = v259;
              *((_QWORD *)v47 + 57) = v307;
              *((_QWORD *)v47 + 58) = v315;
              *((_QWORD *)v47 + 59) = v323;
              *((_QWORD *)v47 + 60) = v331;
              *((_QWORD *)v47 + 61) = v339;
              *((_QWORD *)v47 + 62) = v347;
            }
            else
            {
              v84 = *(_OWORD *)((char *)v48 + 456);
              *(_OWORD *)((char *)v47 + 440) = *(_OWORD *)((char *)v48 + 440);
              *(_OWORD *)((char *)v47 + 456) = v84;
              v85 = *(_OWORD *)((char *)v48 + 488);
              *(_OWORD *)((char *)v47 + 472) = *(_OWORD *)((char *)v48 + 472);
              *(_OWORD *)((char *)v47 + 488) = v85;
              v86 = *(_OWORD *)((char *)v48 + 392);
              *(_OWORD *)((char *)v47 + 376) = *(_OWORD *)((char *)v48 + 376);
              *(_OWORD *)((char *)v47 + 392) = v86;
              v87 = *(_OWORD *)((char *)v48 + 424);
              *(_OWORD *)((char *)v47 + 408) = *(_OWORD *)((char *)v48 + 408);
              *(_OWORD *)((char *)v47 + 424) = v87;
              v88 = *(_OWORD *)((char *)v48 + 328);
              *(_OWORD *)((char *)v47 + 312) = *(_OWORD *)((char *)v48 + 312);
              *(_OWORD *)((char *)v47 + 328) = v88;
              v89 = *(_OWORD *)((char *)v48 + 360);
              *(_OWORD *)((char *)v47 + 344) = *(_OWORD *)((char *)v48 + 344);
              *(_OWORD *)((char *)v47 + 360) = v89;
            }
          }
          else
          {
            v115 = v48[29];
            v47[28] = v48[28];
            v47[29] = v115;
            v47[30] = v48[30];
            *((_QWORD *)v47 + 62) = *((_QWORD *)v48 + 62);
            v116 = v48[25];
            v47[24] = v48[24];
            v47[25] = v116;
            v117 = v48[27];
            v47[26] = v48[26];
            v47[27] = v117;
            v118 = v48[21];
            v47[20] = v48[20];
            v47[21] = v118;
            v119 = v48[23];
            v47[22] = v48[22];
            v47[23] = v119;
            v120 = v48[17];
            *v75 = *v76;
            v47[17] = v120;
            v121 = v48[19];
            v47[18] = v48[18];
            v47[19] = v121;
          }
          v127 = *((_QWORD *)v48 + 63);
          v128 = *((_QWORD *)v48 + 64);
          v244 = *((_QWORD *)v48 + 71);
          v246 = *((_QWORD *)v48 + 72);
          v249 = *((_QWORD *)v48 + 73);
          v254 = *((_QWORD *)v48 + 74);
          v260 = *((_QWORD *)v48 + 75);
          v266 = *((_QWORD *)v48 + 76);
          v276 = *((_QWORD *)v48 + 77);
          v284 = *((_QWORD *)v48 + 78);
          v292 = *((_QWORD *)v48 + 79);
          v300 = *((_QWORD *)v48 + 80);
          v308 = *((_QWORD *)v48 + 81);
          v316 = *((_QWORD *)v48 + 82);
          v324 = *((_QWORD *)v48 + 83);
          v332 = *((_QWORD *)v48 + 84);
          v340 = *((_QWORD *)v48 + 85);
          v348 = *((_QWORD *)v48 + 86);
          v129 = *((_QWORD *)v48 + 65);
          v130 = *((_QWORD *)v48 + 66);
          v131 = *((_QWORD *)v48 + 67);
          v132 = *((_QWORD *)v48 + 68);
          v133 = *((_QWORD *)v48 + 69);
          v134 = *((_QWORD *)v48 + 70);
          sub_1AD00FEAC(v127, v128, v129, v130, v131, v132, v133, v134, v244, v246, v249, v254, v260, v266, v276, v284, v292, v300, v308,
            v316,
            v324,
            v332,
            v340,
            v348);
          *((_QWORD *)v47 + 63) = v127;
          *((_QWORD *)v47 + 64) = v128;
          *((_QWORD *)v47 + 65) = v129;
          *((_QWORD *)v47 + 66) = v130;
          *((_QWORD *)v47 + 67) = v131;
          *((_QWORD *)v47 + 68) = v132;
          *((_QWORD *)v47 + 69) = v133;
          *((_QWORD *)v47 + 70) = v134;
          *((_QWORD *)v47 + 71) = v244;
          *((_QWORD *)v47 + 72) = v246;
          *((_QWORD *)v47 + 73) = v249;
          *((_QWORD *)v47 + 74) = v254;
          *((_QWORD *)v47 + 75) = v260;
          *((_QWORD *)v47 + 76) = v266;
          *((_QWORD *)v47 + 77) = v276;
          *((_QWORD *)v47 + 78) = v284;
          *((_QWORD *)v47 + 79) = v292;
          *((_QWORD *)v47 + 80) = v300;
          *((_QWORD *)v47 + 81) = v308;
          *((_QWORD *)v47 + 82) = v316;
          *((_QWORD *)v47 + 83) = v324;
          *((_QWORD *)v47 + 84) = v332;
          *((_QWORD *)v47 + 85) = v340;
          *((_QWORD *)v47 + 86) = v348;
          v135 = *((_QWORD *)v48 + 87);
          if (v135)
          {
            v136 = *((_QWORD *)v48 + 88);
            *((_QWORD *)v47 + 87) = v135;
            *((_QWORD *)v47 + 88) = v136;
            *((_QWORD *)v47 + 89) = *((_QWORD *)v48 + 89);
            *((_QWORD *)v47 + 90) = *((_QWORD *)v48 + 90);
            *((_QWORD *)v47 + 91) = *((_QWORD *)v48 + 91);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            v137 = *(_OWORD *)((char *)v48 + 712);
            *(_OWORD *)((char *)v47 + 696) = *(_OWORD *)((char *)v48 + 696);
            *(_OWORD *)((char *)v47 + 712) = v137;
            *((_QWORD *)v47 + 91) = *((_QWORD *)v48 + 91);
          }
          v3 = v271;
          a1 = v272;
          v49 = v378;
          v52 = v355;
          *((_BYTE *)v47 + 736) = *((_BYTE *)v48 + 736);
          *((_BYTE *)v47 + 768) = 1;
        }
        else
        {
          *((_WORD *)v47 + 112) = *((_WORD *)v48 + 112);
          v93 = *((_QWORD *)v48 + 30);
          *((_QWORD *)v47 + 29) = *((_QWORD *)v48 + 29);
          *((_QWORD *)v47 + 30) = v93;
          v94 = *((_QWORD *)v48 + 32);
          *((_QWORD *)v47 + 31) = *((_QWORD *)v48 + 31);
          *((_QWORD *)v47 + 32) = v94;
          *((_BYTE *)v47 + 264) = *((_BYTE *)v48 + 264);
          v95 = *((_QWORD *)v48 + 35);
          *((_QWORD *)v47 + 34) = *((_QWORD *)v48 + 34);
          *((_QWORD *)v47 + 35) = v95;
          v96 = v48 + 18;
          v97 = *((_QWORD *)v48 + 37);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v97 == 1)
          {
            v47[18] = *v96;
          }
          else
          {
            *((_QWORD *)v47 + 36) = *(_QWORD *)v96;
            *((_QWORD *)v47 + 37) = v97;
            swift_bridgeObjectRetain();
          }
          v98 = *((_QWORD *)v48 + 39);
          *((_QWORD *)v47 + 38) = *((_QWORD *)v48 + 38);
          *((_QWORD *)v47 + 39) = v98;
          v99 = *((_QWORD *)v48 + 41);
          *((_QWORD *)v47 + 40) = *((_QWORD *)v48 + 40);
          *((_QWORD *)v47 + 41) = v99;
          v100 = *((_QWORD *)v48 + 43);
          *((_QWORD *)v47 + 42) = *((_QWORD *)v48 + 42);
          *((_QWORD *)v47 + 43) = v100;
          v101 = v48[29];
          v47[28] = v48[28];
          v47[29] = v101;
          v47[30] = v48[30];
          *((_WORD *)v47 + 248) = *((_WORD *)v48 + 248);
          v102 = v48[25];
          v47[24] = v48[24];
          v47[25] = v102;
          v103 = v48[27];
          v47[26] = v48[26];
          v47[27] = v103;
          v104 = v48[23];
          v47[22] = v48[22];
          v47[23] = v104;
          *((_WORD *)v47 + 249) = *((_WORD *)v48 + 249);
          *((_QWORD *)v47 + 63) = *((_QWORD *)v48 + 63);
          *((_BYTE *)v47 + 512) = *((_BYTE *)v48 + 512);
          v105 = *(_OWORD *)((char *)v48 + 696);
          *(_OWORD *)((char *)v47 + 680) = *(_OWORD *)((char *)v48 + 680);
          *(_OWORD *)((char *)v47 + 696) = v105;
          *(_OWORD *)((char *)v47 + 712) = *(_OWORD *)((char *)v48 + 712);
          *((_WORD *)v47 + 364) = *((_WORD *)v48 + 364);
          v106 = *(_OWORD *)((char *)v48 + 632);
          *(_OWORD *)((char *)v47 + 616) = *(_OWORD *)((char *)v48 + 616);
          *(_OWORD *)((char *)v47 + 632) = v106;
          v107 = *(_OWORD *)((char *)v48 + 664);
          *(_OWORD *)((char *)v47 + 648) = *(_OWORD *)((char *)v48 + 648);
          *(_OWORD *)((char *)v47 + 664) = v107;
          v108 = *(_OWORD *)((char *)v48 + 568);
          *(_OWORD *)((char *)v47 + 552) = *(_OWORD *)((char *)v48 + 552);
          *(_OWORD *)((char *)v47 + 568) = v108;
          v109 = *(_OWORD *)((char *)v48 + 600);
          *(_OWORD *)((char *)v47 + 584) = *(_OWORD *)((char *)v48 + 584);
          *(_OWORD *)((char *)v47 + 600) = v109;
          v110 = *(_OWORD *)((char *)v48 + 536);
          *(_OWORD *)((char *)v47 + 520) = *(_OWORD *)((char *)v48 + 520);
          *(_OWORD *)((char *)v47 + 536) = v110;
          *((_BYTE *)v47 + 730) = *((_BYTE *)v48 + 730);
          v111 = *((_QWORD *)v48 + 93);
          *((_QWORD *)v47 + 92) = *((_QWORD *)v48 + 92);
          *((_QWORD *)v47 + 93) = v111;
          v112 = v48 + 47;
          v113 = v47;
          v114 = *((_QWORD *)v48 + 95);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v114 == 1)
          {
            v113[47] = *v112;
          }
          else
          {
            *((_QWORD *)v113 + 94) = *(_QWORD *)v112;
            *((_QWORD *)v113 + 95) = v114;
            swift_bridgeObjectRetain();
          }
          v47 = v113;
          v49 = v378;
          *((_BYTE *)v113 + 768) = 0;
        }
        v138 = v52[6];
        v139 = (char *)v47 + v138;
        v140 = (char *)v48 + v138;
        v141 = sub_1AD63B084();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
        *(_QWORD *)((char *)v47 + v52[7]) = *(_QWORD *)((char *)v48 + v52[7]);
        *(_QWORD *)((char *)v47 + v52[8]) = *(_QWORD *)((char *)v48 + v52[8]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v362 + 56))(v47, 0, 1, v52);
      }
      v142 = v49[5];
      v143 = (char *)v47 + v142;
      v144 = (_QWORD *)((char *)v48 + v142);
      v145 = v144[1];
      *(_QWORD *)v143 = *v144;
      *((_QWORD *)v143 + 1) = v145;
      v146 = v144 + 2;
      v147 = v144[3];
      swift_retain();
      if (v147 == 1)
      {
        *((_OWORD *)v143 + 1) = *v146;
      }
      else
      {
        *((_QWORD *)v143 + 2) = *(_QWORD *)v146;
        *((_QWORD *)v143 + 3) = v147;
        swift_bridgeObjectRetain();
      }
      v148 = v49[6];
      v149 = (char *)v47 + v148;
      v150 = (_QWORD *)((char *)v48 + v148);
      if (*(_QWORD *)((char *)v48 + v148 + 272) >> 1 != 0xFFFFFFFFLL
        || (v150[38] | v150[36]) > 1
        || v150[44] & 0xFFFFFFFFFFFFFEFELL | v150[40] & 0xFFFFFFFFFFFF00FELL
        || (v150[48] | v150[46]) >= 2)
      {
        v151 = v150[3];
        v369 = v48;
        if (v151)
        {
          v152 = v150[4];
          *((_QWORD *)v149 + 3) = v151;
          *((_QWORD *)v149 + 4) = v152;
          (**(void (***)(void *, _QWORD *))(v151 - 8))(v149, v150);
          *((_QWORD *)v149 + 5) = v150[5];
          v149[48] = *((_BYTE *)v150 + 48);
          v153 = v150[10];
          v154 = v150[12];
          v155 = v150[14];
          v156 = v150[22];
          v157 = v150[24];
          if (v153 >> 1 != 0xFFFFFFFF
            || (v155 | (unint64_t)v154) > 1
            || v150[20] & 0xFFFFFFFFFFFFFEFELL | v150[16] & 0xFFFFFFFFFFFF00FELL
            || (v157 | v156) >= 2)
          {
            v171 = v150[8];
            v172 = v150[13];
            v261 = v150[15];
            v267 = v150[17];
            v293 = v150[18];
            v301 = v150[19];
            v309 = v150[21];
            v317 = v150[23];
            v325 = v150[25];
            v333 = v150[26];
            v341 = v150[27];
            v349 = v150[28];
            v356 = v150[29];
            v363 = v150[30];
            v277 = v150[20];
            v285 = v150[24];
            v173 = v150[7];
            v250 = v150[16];
            v255 = v150[22];
            v174 = v150[9];
            v175 = v150[11];
            sub_1AD00FEAC(v173, v171, v174, v153, v175, v154, v172, v155, v261, v250, v267, v293, v301, v277, v309, v156, v317, v157, v325,
              v333,
              v341,
              v349,
              v356,
              v363);
            *((_QWORD *)v149 + 7) = v173;
            *((_QWORD *)v149 + 8) = v171;
            *((_QWORD *)v149 + 9) = v174;
            *((_QWORD *)v149 + 10) = v153;
            *((_QWORD *)v149 + 11) = v175;
            *((_QWORD *)v149 + 12) = v154;
            *((_QWORD *)v149 + 13) = v172;
            *((_QWORD *)v149 + 14) = v155;
            *((_QWORD *)v149 + 15) = v261;
            *((_QWORD *)v149 + 16) = v250;
            *((_QWORD *)v149 + 17) = v267;
            *((_QWORD *)v149 + 18) = v293;
            *((_QWORD *)v149 + 19) = v301;
            *((_QWORD *)v149 + 20) = v277;
            *((_QWORD *)v149 + 21) = v309;
            *((_QWORD *)v149 + 22) = v255;
            *((_QWORD *)v149 + 23) = v317;
            *((_QWORD *)v149 + 24) = v285;
            *((_QWORD *)v149 + 25) = v325;
            *((_QWORD *)v149 + 26) = v333;
            *((_QWORD *)v149 + 27) = v341;
            *((_QWORD *)v149 + 28) = v349;
            *((_QWORD *)v149 + 29) = v356;
            *((_QWORD *)v149 + 30) = v363;
          }
          else
          {
            v158 = *(_OWORD *)(v150 + 25);
            *(_OWORD *)(v149 + 184) = *(_OWORD *)(v150 + 23);
            *(_OWORD *)(v149 + 200) = v158;
            v159 = *(_OWORD *)(v150 + 29);
            *(_OWORD *)(v149 + 216) = *(_OWORD *)(v150 + 27);
            *(_OWORD *)(v149 + 232) = v159;
            v160 = *(_OWORD *)(v150 + 17);
            *(_OWORD *)(v149 + 120) = *(_OWORD *)(v150 + 15);
            *(_OWORD *)(v149 + 136) = v160;
            v161 = *(_OWORD *)(v150 + 21);
            *(_OWORD *)(v149 + 152) = *(_OWORD *)(v150 + 19);
            *(_OWORD *)(v149 + 168) = v161;
            v162 = *(_OWORD *)(v150 + 9);
            *(_OWORD *)(v149 + 56) = *(_OWORD *)(v150 + 7);
            *(_OWORD *)(v149 + 72) = v162;
            v163 = *(_OWORD *)(v150 + 13);
            *(_OWORD *)(v149 + 88) = *(_OWORD *)(v150 + 11);
            *(_OWORD *)(v149 + 104) = v163;
          }
        }
        else
        {
          v164 = *((_OWORD *)v150 + 13);
          *((_OWORD *)v149 + 12) = *((_OWORD *)v150 + 12);
          *((_OWORD *)v149 + 13) = v164;
          *((_OWORD *)v149 + 14) = *((_OWORD *)v150 + 14);
          *((_QWORD *)v149 + 30) = v150[30];
          v165 = *((_OWORD *)v150 + 9);
          *((_OWORD *)v149 + 8) = *((_OWORD *)v150 + 8);
          *((_OWORD *)v149 + 9) = v165;
          v166 = *((_OWORD *)v150 + 11);
          *((_OWORD *)v149 + 10) = *((_OWORD *)v150 + 10);
          *((_OWORD *)v149 + 11) = v166;
          v167 = *((_OWORD *)v150 + 5);
          *((_OWORD *)v149 + 4) = *((_OWORD *)v150 + 4);
          *((_OWORD *)v149 + 5) = v167;
          v168 = *((_OWORD *)v150 + 7);
          *((_OWORD *)v149 + 6) = *((_OWORD *)v150 + 6);
          *((_OWORD *)v149 + 7) = v168;
          v169 = *((_OWORD *)v150 + 1);
          *(_OWORD *)v149 = *(_OWORD *)v150;
          *((_OWORD *)v149 + 1) = v169;
          v170 = *((_OWORD *)v150 + 3);
          *((_OWORD *)v149 + 2) = *((_OWORD *)v150 + 2);
          *((_OWORD *)v149 + 3) = v170;
        }
        v176 = v150[32];
        v177 = v150[34];
        v256 = v150[40];
        v262 = v150[41];
        v268 = v150[42];
        v278 = v150[43];
        v286 = v150[44];
        v294 = v150[45];
        v302 = v150[46];
        v310 = v150[47];
        v318 = v150[48];
        v326 = v150[49];
        v334 = v150[50];
        v342 = v150[51];
        v350 = v150[52];
        v357 = v150[53];
        v364 = v150[54];
        v178 = v150[39];
        v179 = v150[31];
        v180 = v150[33];
        v181 = v150[35];
        v182 = v150[36];
        v183 = v150[37];
        v184 = v150[38];
        sub_1AD00FEAC(v179, v176, v180, v177, v181, v182, v183, v184, v178, v256, v262, v268, v278, v286, v294, v302, v310, v318, v326,
          v334,
          v342,
          v350,
          v357,
          v364);
        *((_QWORD *)v149 + 31) = v179;
        *((_QWORD *)v149 + 32) = v176;
        *((_QWORD *)v149 + 33) = v180;
        *((_QWORD *)v149 + 34) = v177;
        *((_QWORD *)v149 + 35) = v181;
        *((_QWORD *)v149 + 36) = v182;
        *((_QWORD *)v149 + 37) = v183;
        *((_QWORD *)v149 + 38) = v184;
        *((_QWORD *)v149 + 39) = v178;
        *((_QWORD *)v149 + 40) = v256;
        *((_QWORD *)v149 + 41) = v262;
        *((_QWORD *)v149 + 42) = v268;
        *((_QWORD *)v149 + 43) = v278;
        *((_QWORD *)v149 + 44) = v286;
        *((_QWORD *)v149 + 45) = v294;
        *((_QWORD *)v149 + 46) = v302;
        *((_QWORD *)v149 + 47) = v310;
        *((_QWORD *)v149 + 48) = v318;
        *((_QWORD *)v149 + 49) = v326;
        *((_QWORD *)v149 + 50) = v334;
        *((_QWORD *)v149 + 51) = v342;
        *((_QWORD *)v149 + 52) = v350;
        *((_QWORD *)v149 + 53) = v357;
        v48 = v369;
        *((_QWORD *)v149 + 54) = v364;
        v3 = v271;
        a1 = v272;
        v47 = v375;
        v49 = v378;
      }
      else
      {
        memcpy(v149, v150, 0x1B8uLL);
      }
      v185 = v49[7];
      v186 = (char *)v47 + v185;
      v187 = (_QWORD *)((char *)v48 + v185);
      v188 = v187[1];
      *(_QWORD *)v186 = *v187;
      *((_QWORD *)v186 + 1) = v188;
      v189 = v187 + 2;
      v190 = v187[3];
      swift_retain();
      if (v190 == 1)
      {
        *((_OWORD *)v186 + 1) = *v189;
      }
      else
      {
        *((_QWORD *)v186 + 2) = *(_QWORD *)v189;
        *((_QWORD *)v186 + 3) = v190;
        swift_bridgeObjectRetain();
      }
      v191 = v49[8];
      v192 = (char *)v47 + v191;
      v193 = (_QWORD *)((char *)v48 + v191);
      if (*(_QWORD *)((char *)v48 + v191 + 272) >> 1 != 0xFFFFFFFFLL
        || (v193[38] | v193[36]) > 1
        || v193[44] & 0xFFFFFFFFFFFFFEFELL | v193[40] & 0xFFFFFFFFFFFF00FELL
        || (v193[48] | v193[46]) >= 2)
      {
        v194 = v193[3];
        if (v194)
        {
          v195 = v193[4];
          *((_QWORD *)v192 + 3) = v194;
          *((_QWORD *)v192 + 4) = v195;
          (**(void (***)(void *, _QWORD *))(v194 - 8))(v192, v193);
          *((_QWORD *)v192 + 5) = v193[5];
          v192[48] = *((_BYTE *)v193 + 48);
          v196 = v193[10];
          v197 = v193[12];
          v198 = v193[14];
          v199 = v193[20];
          v200 = v193[22];
          if (v196 >> 1 != 0xFFFFFFFF
            || (v198 | (unint64_t)v197) > 1
            || v199 & 0xFFFFFFFFFFFFFEFELL | v193[16] & 0xFFFFFFFFFFFF00FELL
            || (v193[24] | (unint64_t)v200) >= 2)
          {
            v214 = v193[9];
            v247 = v193[13];
            v269 = v193[15];
            v279 = v193[17];
            v295 = v193[18];
            v303 = v193[19];
            v311 = v193[21];
            v319 = v193[23];
            v327 = v193[25];
            v335 = v193[26];
            v343 = v193[27];
            v351 = v193[28];
            v358 = v193[29];
            v365 = v193[30];
            v215 = v193[7];
            v257 = v193[22];
            v263 = v193[16];
            v216 = v193[8];
            v287 = v193[24];
            v217 = v193[11];
            v218 = v193[10];
            v219 = v193[12];
            v251 = v193[20];
            sub_1AD00FEAC(v215, v216, v214, v196, v217, v197, v247, v198, v269, v263, v279, v295, v303, v199, v311, v200, v319, v287, v327,
              v335,
              v343,
              v351,
              v358,
              v365);
            *((_QWORD *)v192 + 7) = v215;
            *((_QWORD *)v192 + 8) = v216;
            *((_QWORD *)v192 + 9) = v214;
            *((_QWORD *)v192 + 10) = v218;
            *((_QWORD *)v192 + 11) = v217;
            *((_QWORD *)v192 + 12) = v219;
            *((_QWORD *)v192 + 13) = v247;
            *((_QWORD *)v192 + 14) = v198;
            *((_QWORD *)v192 + 15) = v269;
            *((_QWORD *)v192 + 16) = v263;
            *((_QWORD *)v192 + 17) = v279;
            *((_QWORD *)v192 + 18) = v295;
            *((_QWORD *)v192 + 19) = v303;
            *((_QWORD *)v192 + 20) = v251;
            *((_QWORD *)v192 + 21) = v311;
            *((_QWORD *)v192 + 22) = v257;
            *((_QWORD *)v192 + 23) = v319;
            *((_QWORD *)v192 + 24) = v287;
            *((_QWORD *)v192 + 25) = v327;
            *((_QWORD *)v192 + 26) = v335;
            *((_QWORD *)v192 + 27) = v343;
            *((_QWORD *)v192 + 28) = v351;
            *((_QWORD *)v192 + 29) = v358;
            *((_QWORD *)v192 + 30) = v365;
          }
          else
          {
            v201 = *(_OWORD *)(v193 + 25);
            *(_OWORD *)(v192 + 184) = *(_OWORD *)(v193 + 23);
            *(_OWORD *)(v192 + 200) = v201;
            v202 = *(_OWORD *)(v193 + 29);
            *(_OWORD *)(v192 + 216) = *(_OWORD *)(v193 + 27);
            *(_OWORD *)(v192 + 232) = v202;
            v203 = *(_OWORD *)(v193 + 17);
            *(_OWORD *)(v192 + 120) = *(_OWORD *)(v193 + 15);
            *(_OWORD *)(v192 + 136) = v203;
            v204 = *(_OWORD *)(v193 + 21);
            *(_OWORD *)(v192 + 152) = *(_OWORD *)(v193 + 19);
            *(_OWORD *)(v192 + 168) = v204;
            v205 = *(_OWORD *)(v193 + 9);
            *(_OWORD *)(v192 + 56) = *(_OWORD *)(v193 + 7);
            *(_OWORD *)(v192 + 72) = v205;
            v206 = *(_OWORD *)(v193 + 13);
            *(_OWORD *)(v192 + 88) = *(_OWORD *)(v193 + 11);
            *(_OWORD *)(v192 + 104) = v206;
          }
        }
        else
        {
          v207 = *((_OWORD *)v193 + 13);
          *((_OWORD *)v192 + 12) = *((_OWORD *)v193 + 12);
          *((_OWORD *)v192 + 13) = v207;
          *((_OWORD *)v192 + 14) = *((_OWORD *)v193 + 14);
          *((_QWORD *)v192 + 30) = v193[30];
          v208 = *((_OWORD *)v193 + 9);
          *((_OWORD *)v192 + 8) = *((_OWORD *)v193 + 8);
          *((_OWORD *)v192 + 9) = v208;
          v209 = *((_OWORD *)v193 + 11);
          *((_OWORD *)v192 + 10) = *((_OWORD *)v193 + 10);
          *((_OWORD *)v192 + 11) = v209;
          v210 = *((_OWORD *)v193 + 5);
          *((_OWORD *)v192 + 4) = *((_OWORD *)v193 + 4);
          *((_OWORD *)v192 + 5) = v210;
          v211 = *((_OWORD *)v193 + 7);
          *((_OWORD *)v192 + 6) = *((_OWORD *)v193 + 6);
          *((_OWORD *)v192 + 7) = v211;
          v212 = *((_OWORD *)v193 + 1);
          *(_OWORD *)v192 = *(_OWORD *)v193;
          *((_OWORD *)v192 + 1) = v212;
          v213 = *((_OWORD *)v193 + 3);
          *((_OWORD *)v192 + 2) = *((_OWORD *)v193 + 2);
          *((_OWORD *)v192 + 3) = v213;
        }
        v220 = v193[33];
        v221 = v193[34];
        v252 = v193[39];
        v258 = v193[40];
        v264 = v193[41];
        v270 = v193[42];
        v280 = v193[43];
        v288 = v193[44];
        v296 = v193[45];
        v304 = v193[46];
        v312 = v193[47];
        v320 = v193[48];
        v328 = v193[49];
        v336 = v193[50];
        v344 = v193[51];
        v352 = v193[52];
        v359 = v193[53];
        v366 = v193[54];
        v222 = v193[31];
        v223 = v193[32];
        v224 = v193[35];
        v225 = v193[36];
        v226 = v193[37];
        v227 = v193[38];
        sub_1AD00FEAC(v222, v223, v220, v221, v224, v225, v226, v227, v252, v258, v264, v270, v280, v288, v296, v304, v312, v320, v328,
          v336,
          v344,
          v352,
          v359,
          v366);
        *((_QWORD *)v192 + 31) = v222;
        *((_QWORD *)v192 + 32) = v223;
        *((_QWORD *)v192 + 33) = v220;
        *((_QWORD *)v192 + 34) = v221;
        *((_QWORD *)v192 + 35) = v224;
        *((_QWORD *)v192 + 36) = v225;
        *((_QWORD *)v192 + 37) = v226;
        *((_QWORD *)v192 + 38) = v227;
        *((_QWORD *)v192 + 39) = v252;
        *((_QWORD *)v192 + 40) = v258;
        *((_QWORD *)v192 + 41) = v264;
        *((_QWORD *)v192 + 42) = v270;
        *((_QWORD *)v192 + 43) = v280;
        *((_QWORD *)v192 + 44) = v288;
        *((_QWORD *)v192 + 45) = v296;
        *((_QWORD *)v192 + 46) = v304;
        *((_QWORD *)v192 + 47) = v312;
        *((_QWORD *)v192 + 48) = v320;
        *((_QWORD *)v192 + 49) = v328;
        *((_QWORD *)v192 + 50) = v336;
        *((_QWORD *)v192 + 51) = v344;
        *((_QWORD *)v192 + 52) = v352;
        *((_QWORD *)v192 + 53) = v359;
        *((_QWORD *)v192 + 54) = v366;
        v3 = v271;
        a1 = v272;
        v47 = v375;
        v49 = v378;
      }
      else
      {
        memcpy(v192, v193, 0x1B8uLL);
      }
      *(_QWORD *)((char *)v47 + v49[9]) = *(_QWORD *)((char *)v48 + v49[9]);
      v228 = v49[10];
      v229 = (char *)v47 + v228;
      v230 = (char *)v48 + v228;
      v231 = *((_QWORD *)v230 + 1);
      v6 = v379;
      if (v231)
      {
        *(_QWORD *)v229 = *(_QWORD *)v230;
        *((_QWORD *)v229 + 1) = v231;
        v232 = *((_QWORD *)v230 + 3);
        *((_QWORD *)v229 + 2) = *((_QWORD *)v230 + 2);
        *((_QWORD *)v229 + 3) = v232;
        *((_QWORD *)v229 + 4) = *((_QWORD *)v230 + 4);
        v229[40] = v230[40];
        v233 = *((_QWORD *)v230 + 7);
        *((_QWORD *)v229 + 6) = *((_QWORD *)v230 + 6);
        *((_QWORD *)v229 + 7) = v233;
        *((_QWORD *)v229 + 8) = *((_QWORD *)v230 + 8);
        v229[72] = v230[72];
        v234 = *((_OWORD *)v230 + 6);
        *((_OWORD *)v229 + 5) = *((_OWORD *)v230 + 5);
        *((_OWORD *)v229 + 6) = v234;
        *((_WORD *)v229 + 56) = *((_WORD *)v230 + 56);
        *(_OWORD *)(v229 + 120) = *(_OWORD *)(v230 + 120);
        *(_OWORD *)(v229 + 136) = *(_OWORD *)(v230 + 136);
        v229[152] = v230[152];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v235 = *((_OWORD *)v230 + 7);
        *((_OWORD *)v229 + 6) = *((_OWORD *)v230 + 6);
        *((_OWORD *)v229 + 7) = v235;
        *((_OWORD *)v229 + 8) = *((_OWORD *)v230 + 8);
        *(_OWORD *)(v229 + 137) = *(_OWORD *)(v230 + 137);
        v236 = *((_OWORD *)v230 + 3);
        *((_OWORD *)v229 + 2) = *((_OWORD *)v230 + 2);
        *((_OWORD *)v229 + 3) = v236;
        v237 = *((_OWORD *)v230 + 5);
        *((_OWORD *)v229 + 4) = *((_OWORD *)v230 + 4);
        *((_OWORD *)v229 + 5) = v237;
        v238 = *((_OWORD *)v230 + 1);
        *(_OWORD *)v229 = *(_OWORD *)v230;
        *((_OWORD *)v229 + 1) = v238;
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v372 + 56))(v47, 0, 1, v49);
    }
    v239 = *(int *)(v6 + 32);
    v240 = a1 + v239;
    v241 = (char *)v3 + v239;
    *(_BYTE *)v240 = *v241;
    *(_WORD *)(v240 + 1) = *(_WORD *)(v241 + 1);
    *(_QWORD *)(v240 + 8) = *((_QWORD *)v241 + 1);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD3FFAF8(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[4])
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (a1[11])
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 8));
      v4 = a1[18];
      v5 = a1[20];
      v6 = a1[22];
      v7 = a1[24];
      v8 = a1[28];
      v9 = a1[30];
      v10 = a1[32];
      if (v4 >> 1 != 0xFFFFFFFF
        || (v6 | (unint64_t)v5) > 1
        || v8 & 0xFFFFFFFFFFFFFEFELL | v7 & 0xFFFFFFFFFFFF00FELL
        || (v10 | v9) >= 2)
      {
        sub_1AD00E8B0(a1[15], a1[16], a1[17], v4, a1[19], v5, a1[21], v6, a1[23], v7, a1[25], a1[26], a1[27], v8, a1[29], v9, a1[31], v10, a1[33],
          a1[34],
          a1[35],
          a1[36],
          a1[37],
          a1[38]);
      }
    }
    sub_1AD00E8B0(a1[39], a1[40], a1[41], a1[42], a1[43], a1[44], a1[45], a1[46], a1[47], a1[48], a1[49], a1[50], a1[51], a1[52], a1[53], a1[54], a1[55], a1[56], a1[57],
      a1[58],
      a1[59],
      a1[60],
      a1[61],
      a1[62]);
  }
  v11 = (char *)a1 + *(int *)(a2 + 28);
  v12 = (int *)type metadata accessor for Wallpaper(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for PosterArchive();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13))
    {
LABEL_34:
      v24 = &v11[v12[5]];
      swift_release();
      if (*((_QWORD *)v24 + 3) != 1)
        swift_bridgeObjectRelease();
      v25 = &v11[v12[6]];
      if (*((_QWORD *)v25 + 34) >> 1 != 0xFFFFFFFFLL
        || (*((_QWORD *)v25 + 38) | *((_QWORD *)v25 + 36)) > 1uLL
        || (*((_QWORD *)v25 + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v25 + 40) & 0xFFFFFFFFFFFF00FELL) != 0
        || (*((_QWORD *)v25 + 48) | *((_QWORD *)v25 + 46)) >= 2uLL)
      {
        if (*((_QWORD *)v25 + 3))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11[v12[6]]);
          v29 = *((_QWORD *)v25 + 10);
          v30 = *((_QWORD *)v25 + 12);
          v31 = *((_QWORD *)v25 + 14);
          v32 = *((_QWORD *)v25 + 16);
          v33 = *((_QWORD *)v25 + 20);
          v34 = *((_QWORD *)v25 + 22);
          v35 = *((_QWORD *)v25 + 24);
          if (v29 >> 1 != 0xFFFFFFFF
            || (v31 | (unint64_t)v30) > 1
            || v33 & 0xFFFFFFFFFFFFFEFELL | v32 & 0xFFFFFFFFFFFF00FELL
            || (v35 | v34) >= 2)
          {
            sub_1AD00E8B0(*((_QWORD *)v25 + 7), *((_QWORD *)v25 + 8), *((_QWORD *)v25 + 9), v29, *((_QWORD *)v25 + 11), v30, *((_QWORD *)v25 + 13), v31, *((_QWORD *)v25 + 15), v32, *((_QWORD *)v25 + 17), *((_QWORD *)v25 + 18), *((_QWORD *)v25 + 19), v33, *((_QWORD *)v25 + 21), v34, *((_QWORD *)v25 + 23), v35, *((_QWORD *)v25 + 25),
              *((_QWORD *)v25 + 26),
              *((_QWORD *)v25 + 27),
              *((_QWORD *)v25 + 28),
              *((_QWORD *)v25 + 29),
              *((_QWORD *)v25 + 30));
          }
        }
        v36 = *((_QWORD *)v25 + 31);
        v37 = *((_QWORD *)v25 + 32);
        v38 = v25 + 248;
        sub_1AD00E8B0(v36, v37, v38[2], v38[3], v38[4], v38[5], v38[6], v38[7], v38[8], v38[9], v38[10], v38[11], v38[12], v38[13], v38[14], v38[15], v38[16], v38[17], v38[18],
          v38[19],
          v38[20],
          v38[21],
          v38[22],
          v38[23]);
      }
      v39 = &v11[v12[7]];
      swift_release();
      if (*((_QWORD *)v39 + 3) != 1)
        swift_bridgeObjectRelease();
      v40 = &v11[v12[8]];
      if (*((_QWORD *)v40 + 34) >> 1 != 0xFFFFFFFFLL
        || (*((_QWORD *)v40 + 38) | *((_QWORD *)v40 + 36)) > 1
        || *((_QWORD *)v40 + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v40 + 40) & 0xFFFFFFFFFFFF00FELL
        || (*((_QWORD *)v40 + 48) | *((_QWORD *)v40 + 46)) >= 2)
      {
        if (*((_QWORD *)v40 + 3))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11[v12[8]]);
          v41 = *((_QWORD *)v40 + 10);
          v42 = *((_QWORD *)v40 + 12);
          v43 = *((_QWORD *)v40 + 14);
          v44 = *((_QWORD *)v40 + 16);
          v45 = *((_QWORD *)v40 + 20);
          v46 = *((_QWORD *)v40 + 22);
          v47 = *((_QWORD *)v40 + 24);
          if (v41 >> 1 != 0xFFFFFFFF
            || (v43 | (unint64_t)v42) > 1
            || v45 & 0xFFFFFFFFFFFFFEFELL | v44 & 0xFFFFFFFFFFFF00FELL
            || (v47 | v46) >= 2)
          {
            sub_1AD00E8B0(*((_QWORD *)v40 + 7), *((_QWORD *)v40 + 8), *((_QWORD *)v40 + 9), v41, *((_QWORD *)v40 + 11), v42, *((_QWORD *)v40 + 13), v43, *((_QWORD *)v40 + 15), v44, *((_QWORD *)v40 + 17), *((_QWORD *)v40 + 18), *((_QWORD *)v40 + 19), v45, *((_QWORD *)v40 + 21), v46, *((_QWORD *)v40 + 23), v47, *((_QWORD *)v40 + 25),
              *((_QWORD *)v40 + 26),
              *((_QWORD *)v40 + 27),
              *((_QWORD *)v40 + 28),
              *((_QWORD *)v40 + 29),
              *((_QWORD *)v40 + 30));
          }
        }
        v48 = *((_QWORD *)v40 + 31);
        v49 = *((_QWORD *)v40 + 32);
        v50 = v40 + 248;
        sub_1AD00E8B0(v48, v49, v50[2], v50[3], v50[4], v50[5], v50[6], v50[7], v50[8], v50[9], v50[10], v50[11], v50[12], v50[13], v50[14], v50[15], v50[16], v50[17], v50[18],
          v50[19],
          v50[20],
          v50[21],
          v50[22],
          v50[23]);
      }
      if (*(_QWORD *)&v11[v12[10] + 8])
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      return swift_bridgeObjectRelease();
    }
    if (*((_QWORD *)v11 + 23))
    {
      if (*((_QWORD *)v11 + 9) != 1)
        swift_bridgeObjectRelease();
      if (*((_QWORD *)v11 + 11) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*((_QWORD *)v11 + 26) != 1)
        swift_bridgeObjectRelease();
    }
    v14 = v11[768];
    if (v14 == 2)
      goto LABEL_24;
    if (v14 == 1)
    {
      if (*((_QWORD *)v11 + 35))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 256));
        v15 = *((_QWORD *)v11 + 42);
        v16 = *((_QWORD *)v11 + 44);
        v17 = *((_QWORD *)v11 + 46);
        v18 = *((_QWORD *)v11 + 48);
        v19 = *((_QWORD *)v11 + 52);
        v20 = *((_QWORD *)v11 + 54);
        v21 = *((_QWORD *)v11 + 56);
        if (v15 >> 1 != 0xFFFFFFFF
          || (v17 | (unint64_t)v16) > 1
          || v19 & 0xFFFFFFFFFFFFFEFELL | v18 & 0xFFFFFFFFFFFF00FELL
          || (v21 | v20) >= 2)
        {
          sub_1AD00E8B0(*((_QWORD *)v11 + 39), *((_QWORD *)v11 + 40), *((_QWORD *)v11 + 41), v15, *((_QWORD *)v11 + 43), v16, *((_QWORD *)v11 + 45), v17, *((_QWORD *)v11 + 47), v18, *((_QWORD *)v11 + 49), *((_QWORD *)v11 + 50), *((_QWORD *)v11 + 51), v19, *((_QWORD *)v11 + 53), v20, *((_QWORD *)v11 + 55), v21, *((_QWORD *)v11 + 57),
            *((_QWORD *)v11 + 58),
            *((_QWORD *)v11 + 59),
            *((_QWORD *)v11 + 60),
            *((_QWORD *)v11 + 61),
            *((_QWORD *)v11 + 62));
        }
      }
      sub_1AD00E8B0(*((_QWORD *)v11 + 63), *((_QWORD *)v11 + 64), *((_QWORD *)v11 + 65), *((_QWORD *)v11 + 66), *((_QWORD *)v11 + 67), *((_QWORD *)v11 + 68), *((_QWORD *)v11 + 69), *((_QWORD *)v11 + 70), *((_QWORD *)v11 + 71), *((_QWORD *)v11 + 72), *((_QWORD *)v11 + 73), *((_QWORD *)v11 + 74), *((_QWORD *)v11 + 75), *((_QWORD *)v11 + 76), *((_QWORD *)v11 + 77), *((_QWORD *)v11 + 78), *((_QWORD *)v11 + 79), *((_QWORD *)v11 + 80), *((_QWORD *)v11 + 81),
        *((_QWORD *)v11 + 82),
        *((_QWORD *)v11 + 83),
        *((_QWORD *)v11 + 84),
        *((_QWORD *)v11 + 85),
        *((_QWORD *)v11 + 86));
      if (*((_QWORD *)v11 + 87))
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      goto LABEL_33;
    }
    if (!v11[768])
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      if (*((_QWORD *)v11 + 37) != 1)
        swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (*((_QWORD *)v11 + 95) != 1)
LABEL_24:
        swift_bridgeObjectRelease();
    }
LABEL_33:
    v22 = &v11[*(int *)(v13 + 24)];
    v23 = sub_1AD63B084();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
    goto LABEL_34;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD40021C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  int v72;
  __int128 v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD *v110;
  uint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  _OWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  uint64_t v187;
  _OWORD *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _OWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _OWORD *v374;
  unint64_t v375;
  unint64_t v376;
  int *v377;
  uint64_t v378;

  v4 = a2;
  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v378 = a3;
  if (v9)
  {
    v10 = v4[5];
    v11 = v4[6];
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v12 = v4[7];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    v13 = v4[11];
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13)
    {
      v14 = v4[12];
      *(_QWORD *)(a1 + 88) = v13;
      *(_QWORD *)(a1 + 96) = v14;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 64, (uint64_t)(v4 + 8), v13);
      *(_QWORD *)(a1 + 104) = v4[13];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)v4 + 112);
      v15 = v4[18];
      v16 = v4[20];
      v17 = v4[22];
      v18 = v4[32];
      if (v15 >> 1 != 0xFFFFFFFF
        || (v17 | (unint64_t)v16) > 1
        || v4[28] & 0xFFFFFFFFFFFFFEFELL | v4[24] & 0xFFFFFFFFFFFF00FELL
        || (v18 | v4[30]) >= 2)
      {
        v32 = v4[16];
        v33 = v4[19];
        v280 = v4[23];
        v296 = v4[25];
        v320 = v4[26];
        v328 = v4[27];
        v336 = v4[29];
        v344 = v4[31];
        v352 = v4[33];
        v359 = v4[34];
        v366 = v4[35];
        v369 = v4[36];
        v372 = v4[37];
        v375 = v4[38];
        v304 = v4[28];
        v312 = v4[30];
        v34 = v4[15];
        v272 = v4[24];
        v35 = v4[17];
        v288 = v4[32];
        v36 = v4[21];
        sub_1AD00FEAC(v34, v32, v35, v15, v33, v16, v36, v17, v280, v272, v296, v320, v328, v304, v336, v312, v344, v18, v352,
          v359,
          v366,
          v369,
          v372,
          v375);
        *(_QWORD *)(a1 + 120) = v34;
        *(_QWORD *)(a1 + 128) = v32;
        *(_QWORD *)(a1 + 136) = v35;
        *(_QWORD *)(a1 + 144) = v15;
        *(_QWORD *)(a1 + 152) = v33;
        *(_QWORD *)(a1 + 160) = v16;
        *(_QWORD *)(a1 + 168) = v36;
        *(_QWORD *)(a1 + 176) = v17;
        *(_QWORD *)(a1 + 184) = v280;
        *(_QWORD *)(a1 + 192) = v272;
        *(_QWORD *)(a1 + 200) = v296;
        *(_QWORD *)(a1 + 208) = v320;
        *(_QWORD *)(a1 + 216) = v328;
        *(_QWORD *)(a1 + 224) = v304;
        *(_QWORD *)(a1 + 232) = v336;
        *(_QWORD *)(a1 + 240) = v312;
        *(_QWORD *)(a1 + 248) = v344;
        *(_QWORD *)(a1 + 256) = v288;
        *(_QWORD *)(a1 + 264) = v352;
        *(_QWORD *)(a1 + 272) = v359;
        *(_QWORD *)(a1 + 280) = v366;
        *(_QWORD *)(a1 + 288) = v369;
        *(_QWORD *)(a1 + 296) = v372;
        *(_QWORD *)(a1 + 304) = v375;
      }
      else
      {
        v19 = *(_OWORD *)(v4 + 33);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(v4 + 31);
        *(_OWORD *)(a1 + 264) = v19;
        v20 = *(_OWORD *)(v4 + 37);
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(v4 + 35);
        *(_OWORD *)(a1 + 296) = v20;
        v21 = *(_OWORD *)(v4 + 25);
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(v4 + 23);
        *(_OWORD *)(a1 + 200) = v21;
        v22 = *(_OWORD *)(v4 + 29);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(v4 + 27);
        *(_OWORD *)(a1 + 232) = v22;
        v23 = *(_OWORD *)(v4 + 17);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(v4 + 15);
        *(_OWORD *)(a1 + 136) = v23;
        v24 = *(_OWORD *)(v4 + 21);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(v4 + 19);
        *(_OWORD *)(a1 + 168) = v24;
      }
    }
    else
    {
      v25 = *((_OWORD *)v4 + 17);
      *(_OWORD *)(a1 + 256) = *((_OWORD *)v4 + 16);
      *(_OWORD *)(a1 + 272) = v25;
      *(_OWORD *)(a1 + 288) = *((_OWORD *)v4 + 18);
      *(_QWORD *)(a1 + 304) = v4[38];
      v26 = *((_OWORD *)v4 + 13);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)v4 + 12);
      *(_OWORD *)(a1 + 208) = v26;
      v27 = *((_OWORD *)v4 + 15);
      *(_OWORD *)(a1 + 224) = *((_OWORD *)v4 + 14);
      *(_OWORD *)(a1 + 240) = v27;
      v28 = *((_OWORD *)v4 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)v4 + 8);
      *(_OWORD *)(a1 + 144) = v28;
      v29 = *((_OWORD *)v4 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)v4 + 10);
      *(_OWORD *)(a1 + 176) = v29;
      v30 = *((_OWORD *)v4 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)v4 + 4);
      *(_OWORD *)(a1 + 80) = v30;
      v31 = *((_OWORD *)v4 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)v4 + 6);
      *(_OWORD *)(a1 + 112) = v31;
    }
    v37 = v4[44];
    v38 = v4[45];
    v273 = v4[47];
    v281 = v4[48];
    v289 = v4[49];
    v297 = v4[50];
    v305 = v4[51];
    v313 = v4[52];
    v321 = v4[53];
    v329 = v4[54];
    v337 = v4[55];
    v345 = v4[56];
    v353 = v4[57];
    v360 = v4[58];
    v367 = v4[59];
    v370 = v4[60];
    v373 = v4[61];
    v376 = v4[62];
    v39 = v4[39];
    v40 = v4[40];
    v41 = v4[41];
    v42 = v4[42];
    v43 = v4[43];
    v44 = v4[46];
    sub_1AD00FEAC(v39, v40, v41, v42, v43, v37, v38, v44, v273, v281, v289, v297, v305, v313, v321, v329, v337, v345, v353,
      v360,
      v367,
      v370,
      v373,
      v376);
    *(_QWORD *)(a1 + 312) = v39;
    *(_QWORD *)(a1 + 320) = v40;
    *(_QWORD *)(a1 + 328) = v41;
    *(_QWORD *)(a1 + 336) = v42;
    *(_QWORD *)(a1 + 344) = v43;
    *(_QWORD *)(a1 + 352) = v37;
    *(_QWORD *)(a1 + 360) = v38;
    *(_QWORD *)(a1 + 368) = v44;
    *(_QWORD *)(a1 + 376) = v273;
    *(_QWORD *)(a1 + 384) = v281;
    *(_QWORD *)(a1 + 392) = v289;
    *(_QWORD *)(a1 + 400) = v297;
    *(_QWORD *)(a1 + 408) = v305;
    *(_QWORD *)(a1 + 416) = v313;
    *(_QWORD *)(a1 + 424) = v321;
    *(_QWORD *)(a1 + 432) = v329;
    *(_QWORD *)(a1 + 440) = v337;
    *(_QWORD *)(a1 + 448) = v345;
    *(_QWORD *)(a1 + 456) = v353;
    *(_QWORD *)(a1 + 464) = v360;
    *(_QWORD *)(a1 + 472) = v367;
    *(_QWORD *)(a1 + 480) = v370;
    *(_QWORD *)(a1 + 488) = v373;
    a3 = v378;
    *(_QWORD *)(a1 + 496) = v376;
  }
  else
  {
    memcpy((void *)(a1 + 32), v8, 0x1D8uLL);
  }
  v45 = *(int *)(a3 + 28);
  v46 = (_OWORD *)(a1 + v45);
  v47 = (_OWORD *)((char *)v4 + v45);
  v48 = (int *)type metadata accessor for Wallpaper(0);
  v49 = *((_QWORD *)v48 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v49 + 48))(v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = (int *)type metadata accessor for PosterArchive();
    v52 = *((_QWORD *)v51 - 1);
    v270 = v4;
    v271 = a1;
    v374 = v46;
    v377 = v48;
    v371 = v49;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v52 + 48))(v47, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = *((_QWORD *)v47 + 23);
      if (v54)
      {
        *v46 = *v47;
        *((_WORD *)v46 + 8) = *((_WORD *)v47 + 8);
        *((_BYTE *)v46 + 18) = *((_BYTE *)v47 + 18);
        v55 = *((_QWORD *)v47 + 9);
        v56 = *(_OWORD *)((char *)v47 + 40);
        *(_OWORD *)((char *)v46 + 24) = *(_OWORD *)((char *)v47 + 24);
        *(_OWORD *)((char *)v46 + 40) = v56;
        if (v55 == 1)
        {
          *(_OWORD *)((char *)v46 + 56) = *(_OWORD *)((char *)v47 + 56);
          *((_QWORD *)v46 + 9) = *((_QWORD *)v47 + 9);
        }
        else
        {
          *((_BYTE *)v46 + 56) = *((_BYTE *)v47 + 56);
          *((_QWORD *)v46 + 8) = *((_QWORD *)v47 + 8);
          *((_QWORD *)v46 + 9) = v55;
          swift_bridgeObjectRetain();
        }
        v63 = *((_QWORD *)v47 + 11);
        if (v63 == 1)
        {
          v64 = v47[8];
          v46[7] = v47[7];
          v46[8] = v64;
          v46[9] = v47[9];
          v65 = v47[6];
          v46[5] = v47[5];
          v46[6] = v65;
        }
        else
        {
          *((_BYTE *)v46 + 80) = *((_BYTE *)v47 + 80);
          *((_QWORD *)v46 + 11) = v63;
          v46[6] = v47[6];
          *((_BYTE *)v46 + 112) = *((_BYTE *)v47 + 112);
          *((_QWORD *)v46 + 15) = *((_QWORD *)v47 + 15);
          v66 = v47[9];
          v46[8] = v47[8];
          v46[9] = v66;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *((_WORD *)v46 + 80) = *((_WORD *)v47 + 80);
        *((_QWORD *)v46 + 21) = *((_QWORD *)v47 + 21);
        *((_BYTE *)v46 + 176) = *((_BYTE *)v47 + 176);
        v67 = *((_QWORD *)v47 + 24);
        *((_QWORD *)v46 + 23) = v54;
        *((_QWORD *)v46 + 24) = v67;
        v68 = (_OWORD *)((char *)v47 + 200);
        v69 = *((_QWORD *)v47 + 26);
        swift_retain();
        if (v69 == 1)
        {
          *(_OWORD *)((char *)v46 + 200) = *v68;
        }
        else
        {
          *((_QWORD *)v46 + 25) = *(_QWORD *)v68;
          *((_QWORD *)v46 + 26) = v69;
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v57 = v47[11];
        v46[10] = v47[10];
        v46[11] = v57;
        v46[12] = v47[12];
        *((_QWORD *)v46 + 26) = *((_QWORD *)v47 + 26);
        v58 = v47[7];
        v46[6] = v47[6];
        v46[7] = v58;
        v59 = v47[9];
        v46[8] = v47[8];
        v46[9] = v59;
        v60 = v47[3];
        v46[2] = v47[2];
        v46[3] = v60;
        v61 = v47[5];
        v46[4] = v47[4];
        v46[5] = v61;
        v62 = v47[1];
        *v46 = *v47;
        v46[1] = v62;
      }
      *((_WORD *)v46 + 108) = *((_WORD *)v47 + 108);
      v70 = v46 + 14;
      v71 = v47 + 14;
      v72 = *((unsigned __int8 *)v47 + 768);
      v361 = v52;
      if (v72 == 2)
      {
        v89 = v47[15];
        *v70 = *v71;
        v46[15] = v89;
        v90 = v47[17];
        v46[16] = v47[16];
        v46[17] = v90;
        v91 = *((_QWORD *)v47 + 37);
        *((_QWORD *)v46 + 36) = *((_QWORD *)v47 + 36);
        *((_QWORD *)v46 + 37) = v91;
        *((_BYTE *)v46 + 304) = *((_BYTE *)v47 + 304);
        *((_BYTE *)v46 + 768) = 2;
        swift_bridgeObjectRetain();
      }
      else if (v72 == 1)
      {
        v73 = v47[15];
        *v70 = *v71;
        v46[15] = v73;
        v74 = v46 + 16;
        v75 = v47 + 16;
        v76 = *((_QWORD *)v47 + 35);
        v354 = v51;
        if (v76)
        {
          v77 = *((_QWORD *)v47 + 36);
          *((_QWORD *)v46 + 35) = v76;
          *((_QWORD *)v46 + 36) = v77;
          (**(void (***)(_OWORD *, _OWORD *))(v76 - 8))(v74, v75);
          *((_QWORD *)v46 + 37) = *((_QWORD *)v47 + 37);
          *((_BYTE *)v46 + 304) = *((_BYTE *)v47 + 304);
          v78 = *((_QWORD *)v47 + 42);
          v79 = *((_QWORD *)v47 + 44);
          v80 = *((_QWORD *)v47 + 46);
          v81 = *((_QWORD *)v47 + 54);
          v82 = *((_QWORD *)v47 + 56);
          if (v78 >> 1 != 0xFFFFFFFF
            || (v80 | (unint64_t)v79) > 1
            || v47[26] & 0xFFFFFFFFFFFFFEFELL | v47[24] & 0xFFFFFFFFFFFF00FELL
            || (v82 | v81) >= 2)
          {
            v121 = *((_QWORD *)v47 + 41);
            v122 = *((_QWORD *)v47 + 43);
            v253 = *((_QWORD *)v47 + 47);
            v264 = *((_QWORD *)v47 + 49);
            v274 = *((_QWORD *)v47 + 50);
            v282 = *((_QWORD *)v47 + 51);
            v290 = *((_QWORD *)v47 + 53);
            v298 = *((_QWORD *)v47 + 55);
            v306 = *((_QWORD *)v47 + 57);
            v314 = *((_QWORD *)v47 + 58);
            v322 = *((_QWORD *)v47 + 59);
            v330 = *((_QWORD *)v47 + 60);
            v338 = *((_QWORD *)v47 + 61);
            v346 = *((_QWORD *)v47 + 62);
            v123 = *((_QWORD *)v47 + 39);
            v245 = *((_QWORD *)v47 + 54);
            v248 = *((_QWORD *)v47 + 48);
            v124 = *((_QWORD *)v47 + 40);
            v243 = *((_QWORD *)v47 + 52);
            v125 = *((_QWORD *)v47 + 45);
            v258 = *((_QWORD *)v47 + 56);
            sub_1AD00FEAC(v123, v124, v121, v78, v122, v79, v125, v80, v253, v248, v264, v274, v282, v243, v290, v81, v298, v82, v306,
              v314,
              v322,
              v330,
              v338,
              v346);
            *((_QWORD *)v46 + 39) = v123;
            *((_QWORD *)v46 + 40) = v124;
            *((_QWORD *)v46 + 41) = v121;
            *((_QWORD *)v46 + 42) = v78;
            *((_QWORD *)v46 + 43) = v122;
            *((_QWORD *)v46 + 44) = v79;
            *((_QWORD *)v46 + 45) = v125;
            *((_QWORD *)v46 + 46) = v80;
            *((_QWORD *)v46 + 47) = v253;
            *((_QWORD *)v46 + 48) = v248;
            *((_QWORD *)v46 + 49) = v264;
            *((_QWORD *)v46 + 50) = v274;
            *((_QWORD *)v46 + 51) = v282;
            *((_QWORD *)v46 + 52) = v243;
            *((_QWORD *)v46 + 53) = v290;
            *((_QWORD *)v46 + 54) = v245;
            *((_QWORD *)v46 + 55) = v298;
            *((_QWORD *)v46 + 56) = v258;
            *((_QWORD *)v46 + 57) = v306;
            *((_QWORD *)v46 + 58) = v314;
            *((_QWORD *)v46 + 59) = v322;
            *((_QWORD *)v46 + 60) = v330;
            *((_QWORD *)v46 + 61) = v338;
            *((_QWORD *)v46 + 62) = v346;
          }
          else
          {
            v83 = *(_OWORD *)((char *)v47 + 456);
            *(_OWORD *)((char *)v46 + 440) = *(_OWORD *)((char *)v47 + 440);
            *(_OWORD *)((char *)v46 + 456) = v83;
            v84 = *(_OWORD *)((char *)v47 + 488);
            *(_OWORD *)((char *)v46 + 472) = *(_OWORD *)((char *)v47 + 472);
            *(_OWORD *)((char *)v46 + 488) = v84;
            v85 = *(_OWORD *)((char *)v47 + 392);
            *(_OWORD *)((char *)v46 + 376) = *(_OWORD *)((char *)v47 + 376);
            *(_OWORD *)((char *)v46 + 392) = v85;
            v86 = *(_OWORD *)((char *)v47 + 424);
            *(_OWORD *)((char *)v46 + 408) = *(_OWORD *)((char *)v47 + 408);
            *(_OWORD *)((char *)v46 + 424) = v86;
            v87 = *(_OWORD *)((char *)v47 + 328);
            *(_OWORD *)((char *)v46 + 312) = *(_OWORD *)((char *)v47 + 312);
            *(_OWORD *)((char *)v46 + 328) = v87;
            v88 = *(_OWORD *)((char *)v47 + 360);
            *(_OWORD *)((char *)v46 + 344) = *(_OWORD *)((char *)v47 + 344);
            *(_OWORD *)((char *)v46 + 360) = v88;
          }
        }
        else
        {
          v114 = v47[29];
          v46[28] = v47[28];
          v46[29] = v114;
          v46[30] = v47[30];
          *((_QWORD *)v46 + 62) = *((_QWORD *)v47 + 62);
          v115 = v47[25];
          v46[24] = v47[24];
          v46[25] = v115;
          v116 = v47[27];
          v46[26] = v47[26];
          v46[27] = v116;
          v117 = v47[21];
          v46[20] = v47[20];
          v46[21] = v117;
          v118 = v47[23];
          v46[22] = v47[22];
          v46[23] = v118;
          v119 = v47[17];
          *v74 = *v75;
          v46[17] = v119;
          v120 = v47[19];
          v46[18] = v47[18];
          v46[19] = v120;
        }
        v126 = *((_QWORD *)v47 + 63);
        v127 = *((_QWORD *)v47 + 64);
        v244 = *((_QWORD *)v47 + 71);
        v246 = *((_QWORD *)v47 + 72);
        v249 = *((_QWORD *)v47 + 73);
        v254 = *((_QWORD *)v47 + 74);
        v259 = *((_QWORD *)v47 + 75);
        v265 = *((_QWORD *)v47 + 76);
        v275 = *((_QWORD *)v47 + 77);
        v283 = *((_QWORD *)v47 + 78);
        v291 = *((_QWORD *)v47 + 79);
        v299 = *((_QWORD *)v47 + 80);
        v307 = *((_QWORD *)v47 + 81);
        v315 = *((_QWORD *)v47 + 82);
        v323 = *((_QWORD *)v47 + 83);
        v331 = *((_QWORD *)v47 + 84);
        v339 = *((_QWORD *)v47 + 85);
        v347 = *((_QWORD *)v47 + 86);
        v128 = *((_QWORD *)v47 + 65);
        v129 = *((_QWORD *)v47 + 66);
        v130 = *((_QWORD *)v47 + 67);
        v131 = *((_QWORD *)v47 + 68);
        v132 = *((_QWORD *)v47 + 69);
        v133 = *((_QWORD *)v47 + 70);
        sub_1AD00FEAC(v126, v127, v128, v129, v130, v131, v132, v133, v244, v246, v249, v254, v259, v265, v275, v283, v291, v299, v307,
          v315,
          v323,
          v331,
          v339,
          v347);
        *((_QWORD *)v46 + 63) = v126;
        *((_QWORD *)v46 + 64) = v127;
        *((_QWORD *)v46 + 65) = v128;
        *((_QWORD *)v46 + 66) = v129;
        *((_QWORD *)v46 + 67) = v130;
        *((_QWORD *)v46 + 68) = v131;
        *((_QWORD *)v46 + 69) = v132;
        *((_QWORD *)v46 + 70) = v133;
        *((_QWORD *)v46 + 71) = v244;
        *((_QWORD *)v46 + 72) = v246;
        *((_QWORD *)v46 + 73) = v249;
        *((_QWORD *)v46 + 74) = v254;
        *((_QWORD *)v46 + 75) = v259;
        *((_QWORD *)v46 + 76) = v265;
        *((_QWORD *)v46 + 77) = v275;
        *((_QWORD *)v46 + 78) = v283;
        *((_QWORD *)v46 + 79) = v291;
        *((_QWORD *)v46 + 80) = v299;
        *((_QWORD *)v46 + 81) = v307;
        *((_QWORD *)v46 + 82) = v315;
        *((_QWORD *)v46 + 83) = v323;
        *((_QWORD *)v46 + 84) = v331;
        *((_QWORD *)v46 + 85) = v339;
        *((_QWORD *)v46 + 86) = v347;
        v134 = *((_QWORD *)v47 + 87);
        if (v134)
        {
          v135 = *((_QWORD *)v47 + 88);
          *((_QWORD *)v46 + 87) = v134;
          *((_QWORD *)v46 + 88) = v135;
          *((_QWORD *)v46 + 89) = *((_QWORD *)v47 + 89);
          *((_QWORD *)v46 + 90) = *((_QWORD *)v47 + 90);
          *((_QWORD *)v46 + 91) = *((_QWORD *)v47 + 91);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          v136 = *(_OWORD *)((char *)v47 + 712);
          *(_OWORD *)((char *)v46 + 696) = *(_OWORD *)((char *)v47 + 696);
          *(_OWORD *)((char *)v46 + 712) = v136;
          *((_QWORD *)v46 + 91) = *((_QWORD *)v47 + 91);
        }
        v4 = v270;
        a1 = v271;
        v48 = v377;
        v51 = v354;
        *((_BYTE *)v46 + 736) = *((_BYTE *)v47 + 736);
        *((_BYTE *)v46 + 768) = 1;
      }
      else
      {
        *((_WORD *)v46 + 112) = *((_WORD *)v47 + 112);
        v92 = *((_QWORD *)v47 + 30);
        *((_QWORD *)v46 + 29) = *((_QWORD *)v47 + 29);
        *((_QWORD *)v46 + 30) = v92;
        v93 = *((_QWORD *)v47 + 32);
        *((_QWORD *)v46 + 31) = *((_QWORD *)v47 + 31);
        *((_QWORD *)v46 + 32) = v93;
        *((_BYTE *)v46 + 264) = *((_BYTE *)v47 + 264);
        v94 = *((_QWORD *)v47 + 35);
        *((_QWORD *)v46 + 34) = *((_QWORD *)v47 + 34);
        *((_QWORD *)v46 + 35) = v94;
        v95 = v47 + 18;
        v96 = *((_QWORD *)v47 + 37);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v96 == 1)
        {
          v46[18] = *v95;
        }
        else
        {
          *((_QWORD *)v46 + 36) = *(_QWORD *)v95;
          *((_QWORD *)v46 + 37) = v96;
          swift_bridgeObjectRetain();
        }
        v97 = *((_QWORD *)v47 + 39);
        *((_QWORD *)v46 + 38) = *((_QWORD *)v47 + 38);
        *((_QWORD *)v46 + 39) = v97;
        v98 = *((_QWORD *)v47 + 41);
        *((_QWORD *)v46 + 40) = *((_QWORD *)v47 + 40);
        *((_QWORD *)v46 + 41) = v98;
        v99 = *((_QWORD *)v47 + 43);
        *((_QWORD *)v46 + 42) = *((_QWORD *)v47 + 42);
        *((_QWORD *)v46 + 43) = v99;
        v100 = v47[29];
        v46[28] = v47[28];
        v46[29] = v100;
        v46[30] = v47[30];
        *((_WORD *)v46 + 248) = *((_WORD *)v47 + 248);
        v101 = v47[25];
        v46[24] = v47[24];
        v46[25] = v101;
        v102 = v47[27];
        v46[26] = v47[26];
        v46[27] = v102;
        v103 = v47[23];
        v46[22] = v47[22];
        v46[23] = v103;
        *((_WORD *)v46 + 249) = *((_WORD *)v47 + 249);
        *((_QWORD *)v46 + 63) = *((_QWORD *)v47 + 63);
        *((_BYTE *)v46 + 512) = *((_BYTE *)v47 + 512);
        v104 = *(_OWORD *)((char *)v47 + 696);
        *(_OWORD *)((char *)v46 + 680) = *(_OWORD *)((char *)v47 + 680);
        *(_OWORD *)((char *)v46 + 696) = v104;
        *(_OWORD *)((char *)v46 + 712) = *(_OWORD *)((char *)v47 + 712);
        *((_WORD *)v46 + 364) = *((_WORD *)v47 + 364);
        v105 = *(_OWORD *)((char *)v47 + 632);
        *(_OWORD *)((char *)v46 + 616) = *(_OWORD *)((char *)v47 + 616);
        *(_OWORD *)((char *)v46 + 632) = v105;
        v106 = *(_OWORD *)((char *)v47 + 664);
        *(_OWORD *)((char *)v46 + 648) = *(_OWORD *)((char *)v47 + 648);
        *(_OWORD *)((char *)v46 + 664) = v106;
        v107 = *(_OWORD *)((char *)v47 + 568);
        *(_OWORD *)((char *)v46 + 552) = *(_OWORD *)((char *)v47 + 552);
        *(_OWORD *)((char *)v46 + 568) = v107;
        v108 = *(_OWORD *)((char *)v47 + 600);
        *(_OWORD *)((char *)v46 + 584) = *(_OWORD *)((char *)v47 + 584);
        *(_OWORD *)((char *)v46 + 600) = v108;
        v109 = *(_OWORD *)((char *)v47 + 536);
        *(_OWORD *)((char *)v46 + 520) = *(_OWORD *)((char *)v47 + 520);
        *(_OWORD *)((char *)v46 + 536) = v109;
        *((_BYTE *)v46 + 730) = *((_BYTE *)v47 + 730);
        v110 = v46;
        v111 = *((_QWORD *)v47 + 93);
        *((_QWORD *)v110 + 92) = *((_QWORD *)v47 + 92);
        *((_QWORD *)v110 + 93) = v111;
        v112 = v47 + 47;
        v113 = *((_QWORD *)v47 + 95);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v113 == 1)
        {
          v110[47] = *v112;
        }
        else
        {
          *((_QWORD *)v110 + 94) = *(_QWORD *)v112;
          *((_QWORD *)v110 + 95) = v113;
          swift_bridgeObjectRetain();
        }
        v46 = v110;
        v48 = v377;
        *((_BYTE *)v110 + 768) = 0;
      }
      v137 = v51[6];
      v138 = (char *)v46 + v137;
      v139 = (char *)v47 + v137;
      v140 = sub_1AD63B084();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
      *(_QWORD *)((char *)v46 + v51[7]) = *(_QWORD *)((char *)v47 + v51[7]);
      *(_QWORD *)((char *)v46 + v51[8]) = *(_QWORD *)((char *)v47 + v51[8]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v361 + 56))(v46, 0, 1, v51);
    }
    v141 = v48[5];
    v142 = (char *)v46 + v141;
    v143 = (_QWORD *)((char *)v47 + v141);
    v144 = v143[1];
    *(_QWORD *)v142 = *v143;
    *((_QWORD *)v142 + 1) = v144;
    v145 = v143 + 2;
    v146 = v143[3];
    swift_retain();
    if (v146 == 1)
    {
      *((_OWORD *)v142 + 1) = *v145;
    }
    else
    {
      *((_QWORD *)v142 + 2) = *(_QWORD *)v145;
      *((_QWORD *)v142 + 3) = v146;
      swift_bridgeObjectRetain();
    }
    v147 = v48[6];
    v148 = (char *)v46 + v147;
    v149 = (_QWORD *)((char *)v47 + v147);
    if (*(_QWORD *)((char *)v47 + v147 + 272) >> 1 != 0xFFFFFFFFLL
      || (v149[38] | v149[36]) > 1
      || v149[44] & 0xFFFFFFFFFFFFFEFELL | v149[40] & 0xFFFFFFFFFFFF00FELL
      || (v149[48] | v149[46]) >= 2)
    {
      v150 = v149[3];
      v368 = v47;
      if (v150)
      {
        v151 = v149[4];
        *((_QWORD *)v148 + 3) = v150;
        *((_QWORD *)v148 + 4) = v151;
        (**(void (***)(void *, _QWORD *))(v150 - 8))(v148, v149);
        *((_QWORD *)v148 + 5) = v149[5];
        v148[48] = *((_BYTE *)v149 + 48);
        v152 = v149[10];
        v153 = v149[12];
        v154 = v149[14];
        v155 = v149[22];
        v156 = v149[24];
        if (v152 >> 1 != 0xFFFFFFFF
          || (v154 | (unint64_t)v153) > 1
          || v149[20] & 0xFFFFFFFFFFFFFEFELL | v149[16] & 0xFFFFFFFFFFFF00FELL
          || (v156 | v155) >= 2)
        {
          v170 = v149[8];
          v171 = v149[11];
          v266 = v149[15];
          v284 = v149[17];
          v292 = v149[18];
          v300 = v149[19];
          v308 = v149[21];
          v316 = v149[23];
          v324 = v149[25];
          v332 = v149[26];
          v340 = v149[27];
          v348 = v149[28];
          v355 = v149[29];
          v362 = v149[30];
          v172 = v149[7];
          v250 = v149[16];
          v255 = v149[20];
          v173 = v149[9];
          v174 = v149[13];
          v260 = v149[22];
          v276 = v149[24];
          sub_1AD00FEAC(v172, v170, v173, v152, v171, v153, v174, v154, v266, v250, v284, v292, v300, v255, v308, v155, v316, v156, v324,
            v332,
            v340,
            v348,
            v355,
            v362);
          *((_QWORD *)v148 + 7) = v172;
          *((_QWORD *)v148 + 8) = v170;
          *((_QWORD *)v148 + 9) = v173;
          *((_QWORD *)v148 + 10) = v152;
          *((_QWORD *)v148 + 11) = v171;
          *((_QWORD *)v148 + 12) = v153;
          *((_QWORD *)v148 + 13) = v174;
          *((_QWORD *)v148 + 14) = v154;
          *((_QWORD *)v148 + 15) = v266;
          *((_QWORD *)v148 + 16) = v250;
          *((_QWORD *)v148 + 17) = v284;
          *((_QWORD *)v148 + 18) = v292;
          *((_QWORD *)v148 + 19) = v300;
          *((_QWORD *)v148 + 20) = v255;
          *((_QWORD *)v148 + 21) = v308;
          *((_QWORD *)v148 + 22) = v260;
          *((_QWORD *)v148 + 23) = v316;
          *((_QWORD *)v148 + 24) = v276;
          *((_QWORD *)v148 + 25) = v324;
          *((_QWORD *)v148 + 26) = v332;
          *((_QWORD *)v148 + 27) = v340;
          *((_QWORD *)v148 + 28) = v348;
          *((_QWORD *)v148 + 29) = v355;
          *((_QWORD *)v148 + 30) = v362;
        }
        else
        {
          v157 = *(_OWORD *)(v149 + 25);
          *(_OWORD *)(v148 + 184) = *(_OWORD *)(v149 + 23);
          *(_OWORD *)(v148 + 200) = v157;
          v158 = *(_OWORD *)(v149 + 29);
          *(_OWORD *)(v148 + 216) = *(_OWORD *)(v149 + 27);
          *(_OWORD *)(v148 + 232) = v158;
          v159 = *(_OWORD *)(v149 + 17);
          *(_OWORD *)(v148 + 120) = *(_OWORD *)(v149 + 15);
          *(_OWORD *)(v148 + 136) = v159;
          v160 = *(_OWORD *)(v149 + 21);
          *(_OWORD *)(v148 + 152) = *(_OWORD *)(v149 + 19);
          *(_OWORD *)(v148 + 168) = v160;
          v161 = *(_OWORD *)(v149 + 9);
          *(_OWORD *)(v148 + 56) = *(_OWORD *)(v149 + 7);
          *(_OWORD *)(v148 + 72) = v161;
          v162 = *(_OWORD *)(v149 + 13);
          *(_OWORD *)(v148 + 88) = *(_OWORD *)(v149 + 11);
          *(_OWORD *)(v148 + 104) = v162;
        }
      }
      else
      {
        v163 = *((_OWORD *)v149 + 13);
        *((_OWORD *)v148 + 12) = *((_OWORD *)v149 + 12);
        *((_OWORD *)v148 + 13) = v163;
        *((_OWORD *)v148 + 14) = *((_OWORD *)v149 + 14);
        *((_QWORD *)v148 + 30) = v149[30];
        v164 = *((_OWORD *)v149 + 9);
        *((_OWORD *)v148 + 8) = *((_OWORD *)v149 + 8);
        *((_OWORD *)v148 + 9) = v164;
        v165 = *((_OWORD *)v149 + 11);
        *((_OWORD *)v148 + 10) = *((_OWORD *)v149 + 10);
        *((_OWORD *)v148 + 11) = v165;
        v166 = *((_OWORD *)v149 + 5);
        *((_OWORD *)v148 + 4) = *((_OWORD *)v149 + 4);
        *((_OWORD *)v148 + 5) = v166;
        v167 = *((_OWORD *)v149 + 7);
        *((_OWORD *)v148 + 6) = *((_OWORD *)v149 + 6);
        *((_OWORD *)v148 + 7) = v167;
        v168 = *((_OWORD *)v149 + 1);
        *(_OWORD *)v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v168;
        v169 = *((_OWORD *)v149 + 3);
        *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
        *((_OWORD *)v148 + 3) = v169;
      }
      v175 = v149[32];
      v176 = v149[34];
      v256 = v149[40];
      v261 = v149[41];
      v267 = v149[42];
      v277 = v149[43];
      v285 = v149[44];
      v293 = v149[45];
      v301 = v149[46];
      v309 = v149[47];
      v317 = v149[48];
      v325 = v149[49];
      v333 = v149[50];
      v341 = v149[51];
      v349 = v149[52];
      v356 = v149[53];
      v363 = v149[54];
      v177 = v149[39];
      v178 = v149[31];
      v179 = v149[33];
      v180 = v149[35];
      v181 = v149[36];
      v182 = v149[37];
      v183 = v149[38];
      sub_1AD00FEAC(v178, v175, v179, v176, v180, v181, v182, v183, v177, v256, v261, v267, v277, v285, v293, v301, v309, v317, v325,
        v333,
        v341,
        v349,
        v356,
        v363);
      *((_QWORD *)v148 + 31) = v178;
      *((_QWORD *)v148 + 32) = v175;
      *((_QWORD *)v148 + 33) = v179;
      *((_QWORD *)v148 + 34) = v176;
      *((_QWORD *)v148 + 35) = v180;
      *((_QWORD *)v148 + 36) = v181;
      *((_QWORD *)v148 + 37) = v182;
      *((_QWORD *)v148 + 38) = v183;
      *((_QWORD *)v148 + 39) = v177;
      *((_QWORD *)v148 + 40) = v256;
      *((_QWORD *)v148 + 41) = v261;
      *((_QWORD *)v148 + 42) = v267;
      *((_QWORD *)v148 + 43) = v277;
      *((_QWORD *)v148 + 44) = v285;
      *((_QWORD *)v148 + 45) = v293;
      *((_QWORD *)v148 + 46) = v301;
      *((_QWORD *)v148 + 47) = v309;
      *((_QWORD *)v148 + 48) = v317;
      *((_QWORD *)v148 + 49) = v325;
      *((_QWORD *)v148 + 50) = v333;
      *((_QWORD *)v148 + 51) = v341;
      *((_QWORD *)v148 + 52) = v349;
      *((_QWORD *)v148 + 53) = v356;
      v47 = v368;
      *((_QWORD *)v148 + 54) = v363;
      v4 = v270;
      a1 = v271;
      v46 = v374;
      v48 = v377;
    }
    else
    {
      memcpy(v148, v149, 0x1B8uLL);
    }
    v184 = v48[7];
    v185 = (char *)v46 + v184;
    v186 = (_QWORD *)((char *)v47 + v184);
    v187 = v186[1];
    *(_QWORD *)v185 = *v186;
    *((_QWORD *)v185 + 1) = v187;
    v188 = v186 + 2;
    v189 = v186[3];
    swift_retain();
    if (v189 == 1)
    {
      *((_OWORD *)v185 + 1) = *v188;
    }
    else
    {
      *((_QWORD *)v185 + 2) = *(_QWORD *)v188;
      *((_QWORD *)v185 + 3) = v189;
      swift_bridgeObjectRetain();
    }
    v190 = v48[8];
    v191 = (char *)v46 + v190;
    v192 = (_QWORD *)((char *)v47 + v190);
    if (*(_QWORD *)((char *)v47 + v190 + 272) >> 1 != 0xFFFFFFFFLL
      || (v192[38] | v192[36]) > 1
      || v192[44] & 0xFFFFFFFFFFFFFEFELL | v192[40] & 0xFFFFFFFFFFFF00FELL
      || (v192[48] | v192[46]) >= 2)
    {
      v193 = v192[3];
      if (v193)
      {
        v194 = v192[4];
        *((_QWORD *)v191 + 3) = v193;
        *((_QWORD *)v191 + 4) = v194;
        (**(void (***)(void *, _QWORD *))(v193 - 8))(v191, v192);
        *((_QWORD *)v191 + 5) = v192[5];
        v191[48] = *((_BYTE *)v192 + 48);
        v195 = v192[10];
        v196 = v192[12];
        v197 = v192[14];
        v198 = v192[20];
        v199 = v192[22];
        v200 = v192[24];
        if (v195 >> 1 != 0xFFFFFFFF
          || (v197 | (unint64_t)v196) > 1
          || v198 & 0xFFFFFFFFFFFFFEFELL | v192[16] & 0xFFFFFFFFFFFF00FELL
          || (v200 | v199) >= 2)
        {
          v214 = v192[9];
          v247 = v192[13];
          v268 = v192[15];
          v286 = v192[17];
          v294 = v192[18];
          v302 = v192[19];
          v310 = v192[21];
          v318 = v192[23];
          v326 = v192[25];
          v334 = v192[26];
          v342 = v192[27];
          v350 = v192[28];
          v357 = v192[29];
          v364 = v192[30];
          v215 = v192[7];
          v216 = v192[8];
          v251 = v192[16];
          v217 = v192[11];
          v262 = v192[22];
          v278 = v192[24];
          v218 = v192[10];
          v219 = v192[12];
          sub_1AD00FEAC(v215, v216, v214, v195, v217, v196, v247, v197, v268, v251, v286, v294, v302, v198, v310, v199, v318, v200, v326,
            v334,
            v342,
            v350,
            v357,
            v364);
          *((_QWORD *)v191 + 7) = v215;
          *((_QWORD *)v191 + 8) = v216;
          *((_QWORD *)v191 + 9) = v214;
          *((_QWORD *)v191 + 10) = v218;
          *((_QWORD *)v191 + 11) = v217;
          *((_QWORD *)v191 + 12) = v219;
          *((_QWORD *)v191 + 13) = v247;
          *((_QWORD *)v191 + 14) = v197;
          *((_QWORD *)v191 + 15) = v268;
          *((_QWORD *)v191 + 16) = v251;
          *((_QWORD *)v191 + 17) = v286;
          *((_QWORD *)v191 + 18) = v294;
          *((_QWORD *)v191 + 19) = v302;
          *((_QWORD *)v191 + 20) = v198;
          *((_QWORD *)v191 + 21) = v310;
          *((_QWORD *)v191 + 22) = v262;
          *((_QWORD *)v191 + 23) = v318;
          *((_QWORD *)v191 + 24) = v278;
          *((_QWORD *)v191 + 25) = v326;
          *((_QWORD *)v191 + 26) = v334;
          *((_QWORD *)v191 + 27) = v342;
          *((_QWORD *)v191 + 28) = v350;
          *((_QWORD *)v191 + 29) = v357;
          *((_QWORD *)v191 + 30) = v364;
        }
        else
        {
          v201 = *(_OWORD *)(v192 + 25);
          *(_OWORD *)(v191 + 184) = *(_OWORD *)(v192 + 23);
          *(_OWORD *)(v191 + 200) = v201;
          v202 = *(_OWORD *)(v192 + 29);
          *(_OWORD *)(v191 + 216) = *(_OWORD *)(v192 + 27);
          *(_OWORD *)(v191 + 232) = v202;
          v203 = *(_OWORD *)(v192 + 17);
          *(_OWORD *)(v191 + 120) = *(_OWORD *)(v192 + 15);
          *(_OWORD *)(v191 + 136) = v203;
          v204 = *(_OWORD *)(v192 + 21);
          *(_OWORD *)(v191 + 152) = *(_OWORD *)(v192 + 19);
          *(_OWORD *)(v191 + 168) = v204;
          v205 = *(_OWORD *)(v192 + 9);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 7);
          *(_OWORD *)(v191 + 72) = v205;
          v206 = *(_OWORD *)(v192 + 13);
          *(_OWORD *)(v191 + 88) = *(_OWORD *)(v192 + 11);
          *(_OWORD *)(v191 + 104) = v206;
        }
      }
      else
      {
        v207 = *((_OWORD *)v192 + 13);
        *((_OWORD *)v191 + 12) = *((_OWORD *)v192 + 12);
        *((_OWORD *)v191 + 13) = v207;
        *((_OWORD *)v191 + 14) = *((_OWORD *)v192 + 14);
        *((_QWORD *)v191 + 30) = v192[30];
        v208 = *((_OWORD *)v192 + 9);
        *((_OWORD *)v191 + 8) = *((_OWORD *)v192 + 8);
        *((_OWORD *)v191 + 9) = v208;
        v209 = *((_OWORD *)v192 + 11);
        *((_OWORD *)v191 + 10) = *((_OWORD *)v192 + 10);
        *((_OWORD *)v191 + 11) = v209;
        v210 = *((_OWORD *)v192 + 5);
        *((_OWORD *)v191 + 4) = *((_OWORD *)v192 + 4);
        *((_OWORD *)v191 + 5) = v210;
        v211 = *((_OWORD *)v192 + 7);
        *((_OWORD *)v191 + 6) = *((_OWORD *)v192 + 6);
        *((_OWORD *)v191 + 7) = v211;
        v212 = *((_OWORD *)v192 + 1);
        *(_OWORD *)v191 = *(_OWORD *)v192;
        *((_OWORD *)v191 + 1) = v212;
        v213 = *((_OWORD *)v192 + 3);
        *((_OWORD *)v191 + 2) = *((_OWORD *)v192 + 2);
        *((_OWORD *)v191 + 3) = v213;
      }
      v220 = v192[33];
      v221 = v192[34];
      v252 = v192[39];
      v257 = v192[40];
      v263 = v192[41];
      v269 = v192[42];
      v279 = v192[43];
      v287 = v192[44];
      v295 = v192[45];
      v303 = v192[46];
      v311 = v192[47];
      v319 = v192[48];
      v327 = v192[49];
      v335 = v192[50];
      v343 = v192[51];
      v351 = v192[52];
      v358 = v192[53];
      v365 = v192[54];
      v222 = v192[31];
      v223 = v192[32];
      v224 = v192[35];
      v225 = v192[36];
      v226 = v192[37];
      v227 = v192[38];
      sub_1AD00FEAC(v222, v223, v220, v221, v224, v225, v226, v227, v252, v257, v263, v269, v279, v287, v295, v303, v311, v319, v327,
        v335,
        v343,
        v351,
        v358,
        v365);
      *((_QWORD *)v191 + 31) = v222;
      *((_QWORD *)v191 + 32) = v223;
      *((_QWORD *)v191 + 33) = v220;
      *((_QWORD *)v191 + 34) = v221;
      *((_QWORD *)v191 + 35) = v224;
      *((_QWORD *)v191 + 36) = v225;
      *((_QWORD *)v191 + 37) = v226;
      *((_QWORD *)v191 + 38) = v227;
      *((_QWORD *)v191 + 39) = v252;
      *((_QWORD *)v191 + 40) = v257;
      *((_QWORD *)v191 + 41) = v263;
      *((_QWORD *)v191 + 42) = v269;
      *((_QWORD *)v191 + 43) = v279;
      *((_QWORD *)v191 + 44) = v287;
      *((_QWORD *)v191 + 45) = v295;
      *((_QWORD *)v191 + 46) = v303;
      *((_QWORD *)v191 + 47) = v311;
      *((_QWORD *)v191 + 48) = v319;
      *((_QWORD *)v191 + 49) = v327;
      *((_QWORD *)v191 + 50) = v335;
      *((_QWORD *)v191 + 51) = v343;
      *((_QWORD *)v191 + 52) = v351;
      *((_QWORD *)v191 + 53) = v358;
      *((_QWORD *)v191 + 54) = v365;
      v4 = v270;
      a1 = v271;
      v46 = v374;
      v48 = v377;
    }
    else
    {
      memcpy(v191, v192, 0x1B8uLL);
    }
    *(_QWORD *)((char *)v46 + v48[9]) = *(_QWORD *)((char *)v47 + v48[9]);
    v228 = v48[10];
    v229 = (char *)v46 + v228;
    v230 = (char *)v47 + v228;
    v231 = *((_QWORD *)v230 + 1);
    a3 = v378;
    if (v231)
    {
      *(_QWORD *)v229 = *(_QWORD *)v230;
      *((_QWORD *)v229 + 1) = v231;
      v232 = *((_QWORD *)v230 + 3);
      *((_QWORD *)v229 + 2) = *((_QWORD *)v230 + 2);
      *((_QWORD *)v229 + 3) = v232;
      *((_QWORD *)v229 + 4) = *((_QWORD *)v230 + 4);
      v229[40] = v230[40];
      v233 = *((_QWORD *)v230 + 7);
      *((_QWORD *)v229 + 6) = *((_QWORD *)v230 + 6);
      *((_QWORD *)v229 + 7) = v233;
      *((_QWORD *)v229 + 8) = *((_QWORD *)v230 + 8);
      v229[72] = v230[72];
      v234 = *((_OWORD *)v230 + 6);
      *((_OWORD *)v229 + 5) = *((_OWORD *)v230 + 5);
      *((_OWORD *)v229 + 6) = v234;
      *((_WORD *)v229 + 56) = *((_WORD *)v230 + 56);
      *(_OWORD *)(v229 + 120) = *(_OWORD *)(v230 + 120);
      *(_OWORD *)(v229 + 136) = *(_OWORD *)(v230 + 136);
      v229[152] = v230[152];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v235 = *((_OWORD *)v230 + 7);
      *((_OWORD *)v229 + 6) = *((_OWORD *)v230 + 6);
      *((_OWORD *)v229 + 7) = v235;
      *((_OWORD *)v229 + 8) = *((_OWORD *)v230 + 8);
      *(_OWORD *)(v229 + 137) = *(_OWORD *)(v230 + 137);
      v236 = *((_OWORD *)v230 + 3);
      *((_OWORD *)v229 + 2) = *((_OWORD *)v230 + 2);
      *((_OWORD *)v229 + 3) = v236;
      v237 = *((_OWORD *)v230 + 5);
      *((_OWORD *)v229 + 4) = *((_OWORD *)v230 + 4);
      *((_OWORD *)v229 + 5) = v237;
      v238 = *((_OWORD *)v230 + 1);
      *(_OWORD *)v229 = *(_OWORD *)v230;
      *((_OWORD *)v229 + 1) = v238;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v371 + 56))(v46, 0, 1, v48);
  }
  v239 = *(int *)(a3 + 32);
  v240 = a1 + v239;
  v241 = (char *)v4 + v239;
  *(_BYTE *)v240 = *v241;
  *(_WORD *)(v240 + 1) = *(_WORD *)(v241 + 1);
  *(_QWORD *)(v240 + 8) = *((_QWORD *)v241 + 1);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1AD4017E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  int *v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, int *);
  int v195;
  int v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  uint64_t (*v203)(uint64_t, uint64_t, int *);
  int v204;
  int v205;
  __int128 v206;
  __int128 *v207;
  __int128 *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 *v213;
  __int128 *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  _OWORD *v235;
  _OWORD *v236;
  int v237;
  __int128 v238;
  _OWORD *v239;
  __int128 *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 *v264;
  __int128 *v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  _OWORD *v318;
  _OWORD *v319;
  int v320;
  __int128 v321;
  _OWORD *v322;
  __int128 *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  uint64_t v495;
  char *v496;
  char *v497;
  __int128 v499;
  __int128 *v500;
  __int128 *v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  uint64_t v587;
  uint64_t v588;
  __int128 v589;
  _OWORD *v590;
  _OWORD *v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  uint64_t v599;
  uint64_t v600;
  _OWORD *v601;
  _OWORD *v602;
  int v603;
  __int128 v604;
  _OWORD *v605;
  __int128 *v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  uint64_t v646;
  char *v647;
  uint64_t v648;
  uint64_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  __int128 v677;
  __int128 v678;
  uint64_t v679;
  uint64_t v680;
  char *v681;
  uint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  char *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  char *v690;
  BOOL v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  uint64_t v711;
  uint64_t v712;
  _OWORD *v713;
  __int128 *v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  BOOL v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  uint64_t v873;
  unint64_t v874;
  uint64_t v875;
  _QWORD *v876;
  char *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  char *v882;
  BOOL v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  uint64_t v903;
  uint64_t v904;
  _OWORD *v905;
  __int128 *v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  BOOL v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  char *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  __int128 v1076;
  __int128 v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  uint64_t v1099;
  uint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  int *v1105;
  uint64_t v1106;
  int *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  _QWORD *v1200;
  _QWORD *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  __int128 v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  __int128 v1242;
  __int128 v1243;
  uint64_t v1244;
  __int128 v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  unint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  unint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  unint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  unint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  unint64_t v1479;
  unint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  unint64_t v1506;
  unint64_t v1507;
  unint64_t v1508;
  unint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  unint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  char *v1523;
  char *v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  _QWORD *v1532;
  uint64_t v1533;
  unint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  unint64_t v1538;
  int *v1539;
  int *v1540;
  uint64_t v1541;
  _QWORD *v1542;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = v4[2];
  v5[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = v4[4];
  v1541 = a3;
  v1542 = v4;
  if (v5[4])
  {
    if (v6)
    {
      v7 = v4[5];
      v5[4] = v6;
      v5[5] = v7;
      swift_retain();
      swift_release();
      v5[6] = v4[6];
      v5[7] = v4[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = v5 + 8;
      v9 = (__int128 *)(v4 + 8);
      v10 = v4[11];
      if (v5[11])
      {
        if (v10)
        {
          __swift_assign_boxed_opaque_existential_1(v5 + 8, v4 + 8);
          v11 = v4[13];
          *((_BYTE *)v5 + 112) = *((_BYTE *)v4 + 112);
          v5[13] = v11;
          v12 = v5 + 15;
          v13 = (__int128 *)(v4 + 15);
          v14 = v4[18];
          v15 = v4[20];
          v16 = v4[22];
          v17 = v4[24];
          v18 = v4[28];
          v19 = v4[30];
          v20 = v4[32];
          v24 = v14 >> 1 == 0xFFFFFFFF
             && (v16 | (unint64_t)v15) < 2
             && (v18 & 0xFFFFFFFFFFFFFEFELL | v17 & 0xFFFFFFFFFFFF00FELL) == 0
             && (v20 | v19) < 2;
          if (v5[18] >> 1 != 0xFFFFFFFFLL
            || (v5[22] | v5[20]) > 1
            || v5[28] & 0xFFFFFFFFFFFFFEFELL | v5[24] & 0xFFFFFFFFFFFF00FELL
            || (v5[32] | v5[30]) >= 2)
          {
            if (v24)
            {
              sub_1AD148B34((uint64_t)(v5 + 15));
              v94 = *(_OWORD *)(v4 + 21);
              v96 = *v13;
              v95 = *(_OWORD *)(v4 + 17);
              *(_OWORD *)(v5 + 19) = *(_OWORD *)(v4 + 19);
              *(_OWORD *)(v5 + 21) = v94;
              *v12 = v96;
              *(_OWORD *)(v5 + 17) = v95;
              v97 = *(_OWORD *)(v4 + 29);
              v99 = *(_OWORD *)(v4 + 23);
              v98 = *(_OWORD *)(v4 + 25);
              *(_OWORD *)(v5 + 27) = *(_OWORD *)(v4 + 27);
              *(_OWORD *)(v5 + 29) = v97;
              *(_OWORD *)(v5 + 23) = v99;
              *(_OWORD *)(v5 + 25) = v98;
              v100 = *(_OWORD *)(v4 + 37);
              v102 = *(_OWORD *)(v4 + 31);
              v101 = *(_OWORD *)(v4 + 33);
              *(_OWORD *)(v5 + 35) = *(_OWORD *)(v4 + 35);
              *(_OWORD *)(v5 + 37) = v100;
              *(_OWORD *)(v5 + 31) = v102;
              *(_OWORD *)(v5 + 33) = v101;
            }
            else
            {
              v1206 = v4[16];
              v1234 = v4[15];
              v1177 = v4[17];
              v144 = v4[19];
              v145 = v4[21];
              v1262 = v4[23];
              v1286 = v4[25];
              v1314 = v4[26];
              v1342 = v4[27];
              v1370 = v4[29];
              v1396 = v4[31];
              v1422 = v4[33];
              v1448 = v4[34];
              v1474 = v4[35];
              v1500 = v4[36];
              v1521 = v4[37];
              v1529 = v4[38];
              v1537 = v4[32];
              sub_1AD00FEAC(v1234, v1206, v1177, v14, v144, v15, v145, v16, v1262, v17, v1286, v1314, v1342, v18, v1370, v19, v1396, v20, v1422,
                v1448,
                v1474,
                v1500,
                v1521,
                v1529);
              v146 = *(_OWORD *)(v5 + 33);
              v147 = *(_OWORD *)(v5 + 35);
              v148 = v5[15];
              v149 = v5[16];
              v5[15] = v1234;
              v5[16] = v1206;
              v150 = v5[17];
              v151 = v5[18];
              v5[17] = v1177;
              v5[18] = v14;
              v152 = v5[19];
              v153 = v5[20];
              v5[19] = v144;
              v5[20] = v15;
              v154 = v5[21];
              v155 = v5[22];
              v5[21] = v145;
              v5[22] = v16;
              v156 = *(_OWORD *)(v5 + 23);
              v5[23] = v1262;
              v5[24] = v17;
              v157 = *(_OWORD *)(v5 + 25);
              v5[25] = v1286;
              v5[26] = v1314;
              v158 = *(_OWORD *)(v5 + 27);
              v5[27] = v1342;
              v5[28] = v18;
              v159 = *(_OWORD *)(v5 + 29);
              v5[29] = v1370;
              v5[30] = v19;
              v160 = *(_OWORD *)(v5 + 31);
              v5[31] = v1396;
              v5[32] = v1537;
              v5[33] = v1422;
              v5[34] = v1448;
              v5[35] = v1474;
              v5[36] = v1500;
              v161 = v5[37];
              v162 = v5[38];
              v5[37] = v1521;
              v5[38] = v1529;
              sub_1AD00E8B0(v148, v149, v150, v151, v152, v153, v154, v155, v156, *((uint64_t *)&v156 + 1), v157, *((uint64_t *)&v157 + 1), v158, *((uint64_t *)&v158 + 1), v159, *((uint64_t *)&v159 + 1), v160, *((unint64_t *)&v160 + 1), v146,
                *((uint64_t *)&v146 + 1),
                v147,
                *((uint64_t *)&v147 + 1),
                v161,
                v162);
            }
          }
          else if (v24)
          {
            v25 = *v13;
            v26 = *(_OWORD *)(v4 + 17);
            v27 = *(_OWORD *)(v4 + 21);
            *(_OWORD *)(v5 + 19) = *(_OWORD *)(v4 + 19);
            *(_OWORD *)(v5 + 21) = v27;
            *v12 = v25;
            *(_OWORD *)(v5 + 17) = v26;
            v28 = *(_OWORD *)(v4 + 23);
            v29 = *(_OWORD *)(v4 + 25);
            v30 = *(_OWORD *)(v4 + 29);
            *(_OWORD *)(v5 + 27) = *(_OWORD *)(v4 + 27);
            *(_OWORD *)(v5 + 29) = v30;
            *(_OWORD *)(v5 + 23) = v28;
            *(_OWORD *)(v5 + 25) = v29;
            v31 = *(_OWORD *)(v4 + 31);
            v32 = *(_OWORD *)(v4 + 33);
            v33 = *(_OWORD *)(v4 + 37);
            *(_OWORD *)(v5 + 35) = *(_OWORD *)(v4 + 35);
            *(_OWORD *)(v5 + 37) = v33;
            *(_OWORD *)(v5 + 31) = v31;
            *(_OWORD *)(v5 + 33) = v32;
          }
          else
          {
            v139 = v4[19];
            v140 = v4[21];
            v1205 = v4[23];
            v1261 = v4[25];
            v1285 = v4[26];
            v1341 = v4[27];
            v1369 = v4[29];
            v1395 = v4[31];
            v1421 = v4[33];
            v1447 = v4[34];
            v1473 = v4[35];
            v1499 = v4[36];
            v1520 = v4[37];
            v1528 = v4[38];
            v1313 = v4[30];
            v141 = v4[15];
            v1233 = v4[28];
            v142 = v4[16];
            v1176 = v4[24];
            v143 = v4[17];
            v1536 = v4[32];
            sub_1AD00FEAC(v141, v142, v143, v14, v139, v15, v140, v16, v1205, v1176, v1261, v1285, v1341, v1233, v1369, v1313, v1395, v20, v1421,
              v1447,
              v1473,
              v1499,
              v1520,
              v1528);
            v5[15] = v141;
            v5[16] = v142;
            v5[17] = v143;
            v5[18] = v14;
            v5[19] = v139;
            v5[20] = v15;
            v5[21] = v140;
            v5[22] = v16;
            v5[23] = v1205;
            v5[24] = v1176;
            v5[25] = v1261;
            v5[26] = v1285;
            v5[27] = v1341;
            v5[28] = v1233;
            v5[29] = v1369;
            v5[30] = v1313;
            v5[31] = v1395;
            v5[32] = v1536;
            v5[33] = v1421;
            v5[34] = v1447;
            v5[35] = v1473;
            v5[36] = v1499;
            v5[37] = v1520;
            v5[38] = v1528;
          }
        }
        else
        {
          sub_1AD046A30(v5 + 8);
          v70 = *((_OWORD *)v4 + 7);
          v72 = *v9;
          v71 = *((_OWORD *)v4 + 5);
          *((_OWORD *)v5 + 6) = *((_OWORD *)v4 + 6);
          *((_OWORD *)v5 + 7) = v70;
          *v8 = v72;
          *((_OWORD *)v5 + 5) = v71;
          v73 = *((_OWORD *)v4 + 11);
          v75 = *((_OWORD *)v4 + 8);
          v74 = *((_OWORD *)v4 + 9);
          *((_OWORD *)v5 + 10) = *((_OWORD *)v4 + 10);
          *((_OWORD *)v5 + 11) = v73;
          *((_OWORD *)v5 + 8) = v75;
          *((_OWORD *)v5 + 9) = v74;
          v76 = *((_OWORD *)v4 + 15);
          v78 = *((_OWORD *)v4 + 12);
          v77 = *((_OWORD *)v4 + 13);
          *((_OWORD *)v5 + 14) = *((_OWORD *)v4 + 14);
          *((_OWORD *)v5 + 15) = v76;
          *((_OWORD *)v5 + 12) = v78;
          *((_OWORD *)v5 + 13) = v77;
          v80 = *((_OWORD *)v4 + 17);
          v79 = *((_OWORD *)v4 + 18);
          v81 = *((_OWORD *)v4 + 16);
          v5[38] = v4[38];
          *((_OWORD *)v5 + 17) = v80;
          *((_OWORD *)v5 + 18) = v79;
          *((_OWORD *)v5 + 16) = v81;
        }
      }
      else if (v10)
      {
        v5[11] = v10;
        v5[12] = v4[12];
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(v5 + 8), (uint64_t)(v4 + 8));
        v53 = v4[13];
        *((_BYTE *)v5 + 112) = *((_BYTE *)v4 + 112);
        v5[13] = v53;
        v54 = v4[18];
        v55 = v4[20];
        v56 = v4[22];
        v57 = v4[24];
        v58 = v4[28];
        v59 = v4[30];
        v60 = v4[32];
        if (v54 >> 1 != 0xFFFFFFFF
          || (v56 | (unint64_t)v55) > 1
          || v58 & 0xFFFFFFFFFFFFFEFELL | v57 & 0xFFFFFFFFFFFF00FELL
          || (v60 | (unint64_t)v59) >= 2)
        {
          v134 = v4[16];
          v135 = v4[21];
          v1232 = v4[23];
          v1284 = v4[25];
          v1312 = v4[26];
          v1368 = v4[27];
          v1394 = v4[29];
          v1420 = v4[31];
          v1446 = v4[33];
          v1472 = v4[34];
          v1498 = v4[35];
          v1519 = v4[36];
          v1527 = v4[37];
          v1535 = v4[38];
          v1102 = v4[32];
          v1100 = v4[28];
          v136 = v4[15];
          v1340 = v60;
          v1260 = v58;
          v137 = v1542[17];
          v138 = v1542[19];
          v1204 = v59;
          sub_1AD00FEAC(v136, v134, v137, v54, v138, v55, v1542[21], v56, v1542[23], v57, v1542[25], v1542[26], v1542[27], v1100, v1542[29], v59, v1542[31], v1102, v1542[33],
            v1542[34],
            v1542[35],
            v1542[36],
            v1542[37],
            v1542[38]);
          v5[15] = v136;
          v5[16] = v134;
          v5[17] = v137;
          v5[18] = v54;
          v4 = v1542;
          v5[19] = v138;
          v5[20] = v55;
          v5[21] = v135;
          v5[22] = v56;
          v5[23] = v1232;
          v5[24] = v57;
          v5[25] = v1284;
          v5[26] = v1312;
          v5[27] = v1368;
          v5[28] = v1260;
          v5[29] = v1394;
          v5[30] = v1204;
          v5[31] = v1420;
          v5[32] = v1340;
          v5[33] = v1446;
          v5[34] = v1472;
          v5[35] = v1498;
          v5[36] = v1519;
          v5[37] = v1527;
          v5[38] = v1535;
        }
        else
        {
          v61 = *(_OWORD *)(v4 + 15);
          v62 = *(_OWORD *)(v4 + 17);
          v63 = *(_OWORD *)(v4 + 21);
          *(_OWORD *)(v5 + 19) = *(_OWORD *)(v4 + 19);
          *(_OWORD *)(v5 + 21) = v63;
          *(_OWORD *)(v5 + 15) = v61;
          *(_OWORD *)(v5 + 17) = v62;
          v64 = *(_OWORD *)(v4 + 23);
          v65 = *(_OWORD *)(v4 + 25);
          v66 = *(_OWORD *)(v4 + 29);
          *(_OWORD *)(v5 + 27) = *(_OWORD *)(v4 + 27);
          *(_OWORD *)(v5 + 29) = v66;
          *(_OWORD *)(v5 + 23) = v64;
          *(_OWORD *)(v5 + 25) = v65;
          v67 = *(_OWORD *)(v4 + 31);
          v68 = *(_OWORD *)(v4 + 33);
          v69 = *(_OWORD *)(v4 + 37);
          *(_OWORD *)(v5 + 35) = *(_OWORD *)(v4 + 35);
          *(_OWORD *)(v5 + 37) = v69;
          *(_OWORD *)(v5 + 31) = v67;
          *(_OWORD *)(v5 + 33) = v68;
        }
      }
      else
      {
        v122 = *v9;
        v123 = *((_OWORD *)v4 + 5);
        v124 = *((_OWORD *)v4 + 7);
        *((_OWORD *)v5 + 6) = *((_OWORD *)v4 + 6);
        *((_OWORD *)v5 + 7) = v124;
        *v8 = v122;
        *((_OWORD *)v5 + 5) = v123;
        v125 = *((_OWORD *)v4 + 8);
        v126 = *((_OWORD *)v4 + 9);
        v127 = *((_OWORD *)v4 + 11);
        *((_OWORD *)v5 + 10) = *((_OWORD *)v4 + 10);
        *((_OWORD *)v5 + 11) = v127;
        *((_OWORD *)v5 + 8) = v125;
        *((_OWORD *)v5 + 9) = v126;
        v128 = *((_OWORD *)v4 + 12);
        v129 = *((_OWORD *)v4 + 13);
        v130 = *((_OWORD *)v4 + 15);
        *((_OWORD *)v5 + 14) = *((_OWORD *)v4 + 14);
        *((_OWORD *)v5 + 15) = v130;
        *((_OWORD *)v5 + 12) = v128;
        *((_OWORD *)v5 + 13) = v129;
        v131 = *((_OWORD *)v4 + 16);
        v132 = *((_OWORD *)v4 + 17);
        v133 = *((_OWORD *)v4 + 18);
        v5[38] = v4[38];
        *((_OWORD *)v5 + 17) = v132;
        *((_OWORD *)v5 + 18) = v133;
        *((_OWORD *)v5 + 16) = v131;
      }
      v163 = v4[39];
      v164 = v4[40];
      v165 = v4[41];
      v166 = v4[42];
      v168 = v4[43];
      v167 = v4[44];
      v169 = v4[45];
      v170 = v4[46];
      v171 = v1542[47];
      v1207 = v1542[48];
      v1235 = *(_OWORD *)(v1542 + 49);
      v1287 = v1542[51];
      v1315 = v1542[52];
      v1343 = v1542[53];
      v1371 = v1542[54];
      v1397 = v1542[55];
      v1423 = v1542[56];
      v1449 = v1542[57];
      v1475 = v1542[58];
      v1501 = v1542[59];
      v1522 = v1542[60];
      v1530 = v1542[61];
      v1538 = v1542[62];
      sub_1AD00FEAC(v163, v164, v165, v166, v168, v167, v169, v170, v171, v1207, v1542[49], v1542[50], v1287, v1315, v1343, v1371, v1397, v1423, v1449,
        v1475,
        v1501,
        v1522,
        v1530,
        v1538);
      v172 = *(_OWORD *)(v5 + 47);
      v173 = *(_OWORD *)(v5 + 49);
      v174 = *(_OWORD *)(v5 + 51);
      v175 = *(_OWORD *)(v5 + 53);
      v176 = *(_OWORD *)(v5 + 55);
      v177 = *(_OWORD *)(v5 + 57);
      v178 = *(_OWORD *)(v5 + 59);
      v179 = v5[39];
      v180 = v5[40];
      v5[39] = v163;
      v5[40] = v164;
      v181 = v5[41];
      v182 = v5[42];
      v5[41] = v165;
      v5[42] = v166;
      v183 = v5[43];
      v184 = v5[44];
      v5[43] = v168;
      v5[44] = v167;
      v185 = v5[45];
      v186 = v5[46];
      v5[45] = v169;
      v5[46] = v170;
      v5[47] = v171;
      v4 = v1542;
      v5[48] = v1207;
      *(_OWORD *)(v5 + 49) = v1235;
      v5[51] = v1287;
      v5[52] = v1315;
      v5[53] = v1343;
      v5[54] = v1371;
      v5[55] = v1397;
      v5[56] = v1423;
      v5[57] = v1449;
      v5[58] = v1475;
      v5[59] = v1501;
      v5[60] = v1522;
      v187 = v5[61];
      v188 = v5[62];
      v5[61] = v1530;
      v5[62] = v1538;
      sub_1AD00E8B0(v179, v180, v181, v182, v183, v184, v185, v186, v172, *((uint64_t *)&v172 + 1), v173, *((uint64_t *)&v173 + 1), v174, *((uint64_t *)&v174 + 1), v175, *((uint64_t *)&v175 + 1), v176, *((unint64_t *)&v176 + 1), v177,
        *((uint64_t *)&v177 + 1),
        v178,
        *((uint64_t *)&v178 + 1),
        v187,
        v188);
      a3 = v1541;
      goto LABEL_49;
    }
    sub_1AD28AA98(v5 + 4);
LABEL_31:
    memcpy(v5 + 4, v4 + 4, 0x1D8uLL);
    goto LABEL_49;
  }
  if (!v6)
    goto LABEL_31;
  v34 = v4[5];
  v5[4] = v6;
  v5[5] = v34;
  v5[6] = v4[6];
  v5[7] = v4[7];
  v35 = v4[11];
  swift_retain();
  swift_bridgeObjectRetain();
  if (v35)
  {
    v5[11] = v35;
    v5[12] = v4[12];
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v35 - 8))((uint64_t)(v5 + 8), (uint64_t)(v4 + 8), v35);
    v36 = v4[13];
    *((_BYTE *)v5 + 112) = *((_BYTE *)v4 + 112);
    v5[13] = v36;
    v37 = v4[18];
    v38 = v4[20];
    v39 = v4[22];
    v40 = v4[24];
    v41 = v4[28];
    v42 = v4[30];
    v43 = v4[32];
    if (v37 >> 1 != 0xFFFFFFFF
      || (v39 | (unint64_t)v38) > 1
      || v41 & 0xFFFFFFFFFFFFFEFELL | v40 & 0xFFFFFFFFFFFF00FELL
      || (v43 | (unint64_t)v42) >= 2)
    {
      v103 = v4[16];
      v104 = v4[21];
      v1230 = v4[23];
      v1282 = v4[25];
      v1310 = v4[26];
      v1366 = v4[27];
      v1392 = v4[29];
      v1418 = v4[31];
      v1444 = v4[33];
      v1470 = v4[34];
      v1496 = v4[35];
      v1517 = v4[36];
      v1525 = v4[37];
      v1533 = v4[38];
      v1101 = v4[32];
      v1099 = v4[28];
      v105 = v4[15];
      v1338 = v43;
      v1258 = v41;
      v106 = v1542[17];
      v107 = v1542[19];
      v1202 = v42;
      sub_1AD00FEAC(v105, v103, v106, v37, v107, v38, v1542[21], v39, v1542[23], v40, v1542[25], v1542[26], v1542[27], v1099, v1542[29], v42, v1542[31], v1101, v1542[33],
        v1542[34],
        v1542[35],
        v1542[36],
        v1542[37],
        v1542[38]);
      v5[15] = v105;
      v5[16] = v103;
      v5[17] = v106;
      v5[18] = v37;
      v4 = v1542;
      v5[19] = v107;
      v5[20] = v38;
      v5[21] = v104;
      v5[22] = v39;
      v5[23] = v1230;
      v5[24] = v40;
      v5[25] = v1282;
      v5[26] = v1310;
      v5[27] = v1366;
      v5[28] = v1258;
      v5[29] = v1392;
      v5[30] = v1202;
      v5[31] = v1418;
      v5[32] = v1338;
      v5[33] = v1444;
      v5[34] = v1470;
      v5[35] = v1496;
      v5[36] = v1517;
      v5[37] = v1525;
      v5[38] = v1533;
    }
    else
    {
      v44 = *(_OWORD *)(v4 + 15);
      v45 = *(_OWORD *)(v4 + 17);
      v46 = *(_OWORD *)(v4 + 21);
      *(_OWORD *)(v5 + 19) = *(_OWORD *)(v4 + 19);
      *(_OWORD *)(v5 + 21) = v46;
      *(_OWORD *)(v5 + 15) = v44;
      *(_OWORD *)(v5 + 17) = v45;
      v47 = *(_OWORD *)(v4 + 23);
      v48 = *(_OWORD *)(v4 + 25);
      v49 = *(_OWORD *)(v4 + 29);
      *(_OWORD *)(v5 + 27) = *(_OWORD *)(v4 + 27);
      *(_OWORD *)(v5 + 29) = v49;
      *(_OWORD *)(v5 + 23) = v47;
      *(_OWORD *)(v5 + 25) = v48;
      v50 = *(_OWORD *)(v4 + 31);
      v51 = *(_OWORD *)(v4 + 33);
      v52 = *(_OWORD *)(v4 + 37);
      *(_OWORD *)(v5 + 35) = *(_OWORD *)(v4 + 35);
      *(_OWORD *)(v5 + 37) = v52;
      *(_OWORD *)(v5 + 31) = v50;
      *(_OWORD *)(v5 + 33) = v51;
    }
  }
  else
  {
    v82 = *((_OWORD *)v4 + 4);
    v83 = *((_OWORD *)v4 + 5);
    v84 = *((_OWORD *)v4 + 7);
    *((_OWORD *)v5 + 6) = *((_OWORD *)v4 + 6);
    *((_OWORD *)v5 + 7) = v84;
    *((_OWORD *)v5 + 4) = v82;
    *((_OWORD *)v5 + 5) = v83;
    v85 = *((_OWORD *)v4 + 8);
    v86 = *((_OWORD *)v4 + 9);
    v87 = *((_OWORD *)v4 + 11);
    *((_OWORD *)v5 + 10) = *((_OWORD *)v4 + 10);
    *((_OWORD *)v5 + 11) = v87;
    *((_OWORD *)v5 + 8) = v85;
    *((_OWORD *)v5 + 9) = v86;
    v88 = *((_OWORD *)v4 + 12);
    v89 = *((_OWORD *)v4 + 13);
    v90 = *((_OWORD *)v4 + 15);
    *((_OWORD *)v5 + 14) = *((_OWORD *)v4 + 14);
    *((_OWORD *)v5 + 15) = v90;
    *((_OWORD *)v5 + 12) = v88;
    *((_OWORD *)v5 + 13) = v89;
    v91 = *((_OWORD *)v4 + 16);
    v92 = *((_OWORD *)v4 + 17);
    v93 = *((_OWORD *)v4 + 18);
    v5[38] = v4[38];
    *((_OWORD *)v5 + 17) = v92;
    *((_OWORD *)v5 + 18) = v93;
    *((_OWORD *)v5 + 16) = v91;
  }
  v108 = v4[39];
  v109 = v4[40];
  v110 = v4[41];
  v111 = v4[42];
  v113 = v4[43];
  v112 = v4[44];
  v115 = v4[45];
  v114 = v4[46];
  v1203 = v1542[48];
  v1231 = v1542[49];
  v1259 = v1542[50];
  v1283 = v1542[51];
  v1311 = v1542[52];
  v1339 = v1542[53];
  v1367 = v1542[54];
  v1393 = v1542[55];
  v1419 = v1542[56];
  v1445 = v1542[57];
  v1471 = v1542[58];
  v1497 = v1542[59];
  v1518 = v1542[60];
  v1526 = v1542[61];
  v1534 = v1542[62];
  v116 = v4[47];
  v117 = v108;
  v118 = v109;
  v119 = v110;
  v120 = v112;
  v121 = v114;
  sub_1AD00FEAC(v108, v109, v110, v111, v113, v112, v115, v114, v116, v1203, v1231, v1259, v1283, v1311, v1339, v1367, v1393, v1419, v1445,
    v1471,
    v1497,
    v1518,
    v1526,
    v1534);
  v5[39] = v117;
  v5[40] = v118;
  v5[41] = v119;
  v5[42] = v111;
  v5[43] = v113;
  v5[44] = v120;
  v5[45] = v115;
  v5[46] = v121;
  v5[47] = v116;
  v5[48] = v1203;
  v4 = v1542;
  v5[49] = v1231;
  v5[50] = v1259;
  v5[51] = v1283;
  v5[52] = v1311;
  v5[53] = v1339;
  v5[54] = v1367;
  v5[55] = v1393;
  v5[56] = v1419;
  v5[57] = v1445;
  v5[58] = v1471;
  v5[59] = v1497;
  v5[60] = v1518;
  a3 = v1541;
  v5[61] = v1526;
  v5[62] = v1534;
LABEL_49:
  v189 = *(int *)(a3 + 28);
  v190 = (uint64_t)v5 + v189;
  v191 = (char *)v4 + v189;
  v192 = (int *)type metadata accessor for Wallpaper(0);
  v193 = *((_QWORD *)v192 - 1);
  v194 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v193 + 48);
  v195 = v194(v190, 1, v192);
  v196 = v194((uint64_t)v191, 1, v192);
  if (!v195)
  {
    if (v196)
    {
      sub_1AD066230(v190, type metadata accessor for Wallpaper);
      goto LABEL_55;
    }
    v201 = (int *)type metadata accessor for PosterArchive();
    v202 = *((_QWORD *)v201 - 1);
    v203 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v202 + 48);
    v204 = v203(v190, 1, v201);
    v205 = v203((uint64_t)v191, 1, v201);
    v1201 = v5;
    v1532 = (_QWORD *)v190;
    v1540 = v192;
    if (v204)
    {
      if (!v205)
      {
        if (*((_QWORD *)v191 + 23))
        {
          v206 = *(_OWORD *)v191;
          *(_BYTE *)(v190 + 16) = v191[16];
          *(_OWORD *)v190 = v206;
          *(_BYTE *)(v190 + 17) = v191[17];
          *(_BYTE *)(v190 + 18) = v191[18];
          v207 = (__int128 *)(v190 + 24);
          v208 = (__int128 *)(v191 + 24);
          if (*((_QWORD *)v191 + 9) == 1)
          {
            v209 = *v208;
            v210 = *(_OWORD *)(v191 + 40);
            v211 = *(_OWORD *)(v191 + 56);
            *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
            *(_OWORD *)(v190 + 40) = v210;
            *(_OWORD *)(v190 + 56) = v211;
            *v207 = v209;
          }
          else
          {
            v312 = *(_OWORD *)(v191 + 40);
            *v207 = *v208;
            *(_OWORD *)(v190 + 40) = v312;
            *(_BYTE *)(v190 + 56) = v191[56];
            *(_QWORD *)(v190 + 64) = *((_QWORD *)v191 + 8);
            *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
            swift_bridgeObjectRetain();
          }
          if (*((_QWORD *)v191 + 11) == 1)
          {
            *(_OWORD *)(v190 + 80) = *((_OWORD *)v191 + 5);
            v313 = *((_OWORD *)v191 + 6);
            v314 = *((_OWORD *)v191 + 7);
            v315 = *((_OWORD *)v191 + 9);
            *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
            *(_OWORD *)(v190 + 144) = v315;
            *(_OWORD *)(v190 + 96) = v313;
            *(_OWORD *)(v190 + 112) = v314;
          }
          else
          {
            *(_BYTE *)(v190 + 80) = v191[80];
            *(_QWORD *)(v190 + 88) = *((_QWORD *)v191 + 11);
            *(_OWORD *)(v190 + 96) = *((_OWORD *)v191 + 6);
            *(_BYTE *)(v190 + 112) = v191[112];
            *(_QWORD *)(v190 + 120) = *((_QWORD *)v191 + 15);
            *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
            *(_OWORD *)(v190 + 144) = *((_OWORD *)v191 + 9);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(_BYTE *)(v190 + 160) = v191[160];
          *(_BYTE *)(v190 + 161) = v191[161];
          *(_QWORD *)(v190 + 168) = *((_QWORD *)v191 + 21);
          *(_BYTE *)(v190 + 176) = v191[176];
          v316 = *((_QWORD *)v191 + 24);
          *(_QWORD *)(v190 + 184) = *((_QWORD *)v191 + 23);
          *(_QWORD *)(v190 + 192) = v316;
          v317 = *((_QWORD *)v191 + 26);
          swift_retain();
          if (v317 == 1)
          {
            *(_OWORD *)(v190 + 200) = *(_OWORD *)(v191 + 200);
          }
          else
          {
            *(_QWORD *)(v190 + 200) = *((_QWORD *)v191 + 25);
            *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          v290 = *((_OWORD *)v191 + 1);
          *(_OWORD *)v190 = *(_OWORD *)v191;
          *(_OWORD *)(v190 + 16) = v290;
          v291 = *((_OWORD *)v191 + 2);
          v292 = *((_OWORD *)v191 + 3);
          v293 = *((_OWORD *)v191 + 5);
          *(_OWORD *)(v190 + 64) = *((_OWORD *)v191 + 4);
          *(_OWORD *)(v190 + 80) = v293;
          *(_OWORD *)(v190 + 32) = v291;
          *(_OWORD *)(v190 + 48) = v292;
          v294 = *((_OWORD *)v191 + 6);
          v295 = *((_OWORD *)v191 + 7);
          v296 = *((_OWORD *)v191 + 9);
          *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
          *(_OWORD *)(v190 + 144) = v296;
          *(_OWORD *)(v190 + 96) = v294;
          *(_OWORD *)(v190 + 112) = v295;
          v297 = *((_OWORD *)v191 + 10);
          v298 = *((_OWORD *)v191 + 11);
          v299 = *((_OWORD *)v191 + 12);
          *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
          *(_OWORD *)(v190 + 176) = v298;
          *(_OWORD *)(v190 + 192) = v299;
          *(_OWORD *)(v190 + 160) = v297;
        }
        *(_WORD *)(v190 + 216) = *((_WORD *)v191 + 108);
        v318 = (_OWORD *)(v190 + 224);
        v319 = v191 + 224;
        v320 = v191[768];
        if (v320 == 2)
        {
          v340 = *((_OWORD *)v191 + 15);
          *v318 = *v319;
          *(_OWORD *)(v190 + 240) = v340;
          v341 = *((_OWORD *)v191 + 17);
          *(_OWORD *)(v190 + 256) = *((_OWORD *)v191 + 16);
          *(_OWORD *)(v190 + 272) = v341;
          *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
          *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
          *(_BYTE *)(v190 + 304) = v191[304];
          *(_BYTE *)(v190 + 768) = 2;
          swift_bridgeObjectRetain();
        }
        else if (v320 == 1)
        {
          v321 = *((_OWORD *)v191 + 15);
          *v318 = *v319;
          *(_OWORD *)(v190 + 240) = v321;
          v322 = (_OWORD *)(v190 + 256);
          v323 = (__int128 *)(v191 + 256);
          v324 = *((_QWORD *)v191 + 35);
          v1107 = v201;
          v1108 = v202;
          if (v324)
          {
            *(_QWORD *)(v190 + 280) = v324;
            *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
            (**(void (***)(_OWORD *, __int128 *))(v324 - 8))(v322, v323);
            v325 = *((_QWORD *)v191 + 37);
            *(_BYTE *)(v190 + 304) = v191[304];
            *(_QWORD *)(v190 + 296) = v325;
            v326 = *((_QWORD *)v191 + 42);
            v327 = *((_QWORD *)v191 + 44);
            v328 = *((_QWORD *)v191 + 46);
            v329 = *((_QWORD *)v191 + 54);
            v330 = *((_QWORD *)v191 + 56);
            if (v326 >> 1 != 0xFFFFFFFF
              || (v328 | (unint64_t)v327) > 1
              || *((_QWORD *)v191 + 52) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v191 + 48) & 0xFFFFFFFFFFFF00FELL
              || (v330 | v329) >= 2)
            {
              v552 = *((_QWORD *)v191 + 41);
              v553 = *((_QWORD *)v191 + 43);
              v1138 = *((_QWORD *)v191 + 47);
              v1242 = *(_OWORD *)(v191 + 392);
              v1294 = *((_QWORD *)v191 + 51);
              v1322 = *((_QWORD *)v191 + 53);
              v1350 = *((_QWORD *)v191 + 55);
              v1378 = *((_QWORD *)v191 + 57);
              v1404 = *((_QWORD *)v191 + 58);
              v1430 = *((_QWORD *)v191 + 59);
              v1456 = *((_QWORD *)v191 + 60);
              v1482 = *((_QWORD *)v191 + 61);
              v1503 = *((_QWORD *)v191 + 62);
              v1160 = *((_QWORD *)v191 + 48);
              v1184 = *((_QWORD *)v191 + 56);
              v554 = *((_QWORD *)v191 + 39);
              v555 = *((_QWORD *)v191 + 40);
              v1214 = *((_QWORD *)v191 + 54);
              v1120 = *((_QWORD *)v191 + 52);
              v556 = *((_QWORD *)v191 + 45);
              sub_1AD00FEAC(v554, v555, v552, v326, v553, v327, v556, v328, v1138, v1160, v1242, *((uint64_t *)&v1242 + 1), v1294, v1120, v1322, v329, v1350, v330, v1378,
                v1404,
                v1430,
                v1456,
                v1482,
                v1503);
              *(_QWORD *)(v190 + 312) = v554;
              *(_QWORD *)(v190 + 320) = v555;
              *(_QWORD *)(v190 + 328) = v552;
              *(_QWORD *)(v190 + 336) = v326;
              *(_QWORD *)(v190 + 344) = v553;
              *(_QWORD *)(v190 + 352) = v327;
              *(_QWORD *)(v190 + 360) = v556;
              *(_QWORD *)(v190 + 368) = v328;
              *(_QWORD *)(v190 + 376) = v1138;
              *(_QWORD *)(v190 + 384) = v1160;
              *(_OWORD *)(v190 + 392) = v1242;
              *(_QWORD *)(v190 + 408) = v1294;
              *(_QWORD *)(v190 + 416) = v1120;
              *(_QWORD *)(v190 + 424) = v1322;
              *(_QWORD *)(v190 + 432) = v1214;
              *(_QWORD *)(v190 + 440) = v1350;
              *(_QWORD *)(v190 + 448) = v1184;
              *(_QWORD *)(v190 + 456) = v1378;
              *(_QWORD *)(v190 + 464) = v1404;
              *(_QWORD *)(v190 + 472) = v1430;
              *(_QWORD *)(v190 + 480) = v1456;
              *(_QWORD *)(v190 + 488) = v1482;
              *(_QWORD *)(v190 + 496) = v1503;
            }
            else
            {
              v331 = *(_OWORD *)(v191 + 312);
              v332 = *(_OWORD *)(v191 + 328);
              v333 = *(_OWORD *)(v191 + 360);
              *(_OWORD *)(v190 + 344) = *(_OWORD *)(v191 + 344);
              *(_OWORD *)(v190 + 360) = v333;
              *(_OWORD *)(v190 + 312) = v331;
              *(_OWORD *)(v190 + 328) = v332;
              v334 = *(_OWORD *)(v191 + 376);
              v335 = *(_OWORD *)(v191 + 392);
              v336 = *(_OWORD *)(v191 + 424);
              *(_OWORD *)(v190 + 408) = *(_OWORD *)(v191 + 408);
              *(_OWORD *)(v190 + 424) = v336;
              *(_OWORD *)(v190 + 376) = v334;
              *(_OWORD *)(v190 + 392) = v335;
              v337 = *(_OWORD *)(v191 + 440);
              v338 = *(_OWORD *)(v191 + 456);
              v339 = *(_OWORD *)(v191 + 488);
              *(_OWORD *)(v190 + 472) = *(_OWORD *)(v191 + 472);
              *(_OWORD *)(v190 + 488) = v339;
              *(_OWORD *)(v190 + 440) = v337;
              *(_OWORD *)(v190 + 456) = v338;
            }
          }
          else
          {
            v537 = *v323;
            v538 = *((_OWORD *)v191 + 17);
            v539 = *((_OWORD *)v191 + 19);
            *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
            *(_OWORD *)(v190 + 304) = v539;
            *v322 = v537;
            *(_OWORD *)(v190 + 272) = v538;
            v540 = *((_OWORD *)v191 + 20);
            v541 = *((_OWORD *)v191 + 21);
            v542 = *((_OWORD *)v191 + 23);
            *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
            *(_OWORD *)(v190 + 368) = v542;
            *(_OWORD *)(v190 + 320) = v540;
            *(_OWORD *)(v190 + 336) = v541;
            v543 = *((_OWORD *)v191 + 24);
            v544 = *((_OWORD *)v191 + 25);
            v545 = *((_OWORD *)v191 + 27);
            *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
            *(_OWORD *)(v190 + 432) = v545;
            *(_OWORD *)(v190 + 384) = v543;
            *(_OWORD *)(v190 + 400) = v544;
            v546 = *((_OWORD *)v191 + 28);
            v547 = *((_OWORD *)v191 + 29);
            v548 = *((_OWORD *)v191 + 30);
            *(_QWORD *)(v190 + 496) = *((_QWORD *)v191 + 62);
            *(_OWORD *)(v190 + 464) = v547;
            *(_OWORD *)(v190 + 480) = v548;
            *(_OWORD *)(v190 + 448) = v546;
          }
          v557 = *((_QWORD *)v191 + 63);
          v558 = *((_QWORD *)v191 + 64);
          v1121 = *((_QWORD *)v191 + 71);
          v1139 = *((_QWORD *)v191 + 72);
          v1161 = *((_QWORD *)v191 + 73);
          v1185 = *((_QWORD *)v191 + 74);
          v1215 = *((_QWORD *)v191 + 75);
          v1243 = *((_OWORD *)v191 + 38);
          v1295 = *((_QWORD *)v191 + 78);
          v1323 = *((_QWORD *)v191 + 79);
          v1351 = *((_QWORD *)v191 + 80);
          v1379 = *((_QWORD *)v191 + 81);
          v1405 = *((_QWORD *)v191 + 82);
          v1431 = *((_QWORD *)v191 + 83);
          v1457 = *((_QWORD *)v191 + 84);
          v1483 = *((_QWORD *)v191 + 85);
          v1504 = *((_QWORD *)v191 + 86);
          v559 = *((_QWORD *)v191 + 65);
          v560 = *((_QWORD *)v191 + 66);
          v561 = *((_QWORD *)v191 + 67);
          v562 = *((_QWORD *)v191 + 68);
          v563 = *((_QWORD *)v191 + 69);
          v564 = *((_QWORD *)v191 + 70);
          sub_1AD00FEAC(v557, v558, v559, v560, v561, v562, v563, v564, v1121, v1139, v1161, v1185, v1215, v1243, *((uint64_t *)&v1243 + 1), v1295, v1323, v1351, v1379,
            v1405,
            v1431,
            v1457,
            v1483,
            v1504);
          *(_QWORD *)(v190 + 504) = v557;
          *(_QWORD *)(v190 + 512) = v558;
          *(_QWORD *)(v190 + 520) = v559;
          *(_QWORD *)(v190 + 528) = v560;
          *(_QWORD *)(v190 + 536) = v561;
          *(_QWORD *)(v190 + 544) = v562;
          *(_QWORD *)(v190 + 552) = v563;
          *(_QWORD *)(v190 + 560) = v564;
          *(_QWORD *)(v190 + 568) = v1121;
          *(_QWORD *)(v190 + 576) = v1139;
          *(_QWORD *)(v190 + 584) = v1161;
          *(_QWORD *)(v190 + 592) = v1185;
          *(_QWORD *)(v190 + 600) = v1215;
          *(_OWORD *)(v190 + 608) = v1243;
          *(_QWORD *)(v190 + 624) = v1295;
          *(_QWORD *)(v190 + 632) = v1323;
          *(_QWORD *)(v190 + 640) = v1351;
          *(_QWORD *)(v190 + 648) = v1379;
          *(_QWORD *)(v190 + 656) = v1405;
          *(_QWORD *)(v190 + 664) = v1431;
          *(_QWORD *)(v190 + 672) = v1457;
          *(_QWORD *)(v190 + 680) = v1483;
          *(_QWORD *)(v190 + 688) = v1504;
          v565 = *((_QWORD *)v191 + 87);
          if (v565)
          {
            v566 = *((_QWORD *)v191 + 88);
            *(_QWORD *)(v190 + 696) = v565;
            *(_QWORD *)(v190 + 704) = v566;
            *(_QWORD *)(v190 + 712) = *((_QWORD *)v191 + 89);
            *(_QWORD *)(v190 + 720) = *((_QWORD *)v191 + 90);
            *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            v567 = *(_OWORD *)(v191 + 696);
            v568 = *(_OWORD *)(v191 + 712);
            *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
            *(_OWORD *)(v190 + 696) = v567;
            *(_OWORD *)(v190 + 712) = v568;
          }
          v192 = v1540;
          v201 = v1107;
          v202 = v1108;
          *(_BYTE *)(v190 + 736) = v191[736];
          *(_BYTE *)(v190 + 768) = 1;
        }
        else
        {
          *(_WORD *)(v190 + 224) = *((_WORD *)v191 + 112);
          v342 = *((_QWORD *)v191 + 30);
          *(_QWORD *)(v190 + 232) = *((_QWORD *)v191 + 29);
          *(_QWORD *)(v190 + 240) = v342;
          *(_QWORD *)(v190 + 248) = *((_QWORD *)v191 + 31);
          *(_QWORD *)(v190 + 256) = *((_QWORD *)v191 + 32);
          *(_BYTE *)(v190 + 264) = v191[264];
          v343 = *((_QWORD *)v191 + 35);
          *(_QWORD *)(v190 + 272) = *((_QWORD *)v191 + 34);
          *(_QWORD *)(v190 + 280) = v343;
          v344 = *((_QWORD *)v191 + 37);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v344 == 1)
          {
            *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
          }
          else
          {
            *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
            *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
            swift_bridgeObjectRetain();
          }
          v505 = *((_QWORD *)v191 + 39);
          *(_QWORD *)(v190 + 304) = *((_QWORD *)v191 + 38);
          *(_QWORD *)(v190 + 312) = v505;
          *(_QWORD *)(v190 + 320) = *((_QWORD *)v191 + 40);
          *(_QWORD *)(v190 + 328) = *((_QWORD *)v191 + 41);
          *(_QWORD *)(v190 + 336) = *((_QWORD *)v191 + 42);
          *(_QWORD *)(v190 + 344) = *((_QWORD *)v191 + 43);
          v506 = *((_OWORD *)v191 + 23);
          *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
          *(_OWORD *)(v190 + 368) = v506;
          v507 = *((_OWORD *)v191 + 24);
          v508 = *((_OWORD *)v191 + 25);
          v509 = *((_OWORD *)v191 + 27);
          *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
          *(_OWORD *)(v190 + 432) = v509;
          *(_OWORD *)(v190 + 384) = v507;
          *(_OWORD *)(v190 + 400) = v508;
          v510 = *((_OWORD *)v191 + 28);
          v511 = *((_OWORD *)v191 + 29);
          v512 = *((_OWORD *)v191 + 30);
          *(_WORD *)(v190 + 496) = *((_WORD *)v191 + 248);
          *(_OWORD *)(v190 + 464) = v511;
          *(_OWORD *)(v190 + 480) = v512;
          *(_OWORD *)(v190 + 448) = v510;
          *(_BYTE *)(v190 + 498) = v191[498];
          *(_BYTE *)(v190 + 499) = v191[499];
          *(_QWORD *)(v190 + 504) = *((_QWORD *)v191 + 63);
          *(_BYTE *)(v190 + 512) = v191[512];
          v513 = *(_OWORD *)(v191 + 536);
          *(_OWORD *)(v190 + 520) = *(_OWORD *)(v191 + 520);
          *(_OWORD *)(v190 + 536) = v513;
          v514 = *(_OWORD *)(v191 + 552);
          v515 = *(_OWORD *)(v191 + 568);
          v516 = *(_OWORD *)(v191 + 600);
          *(_OWORD *)(v190 + 584) = *(_OWORD *)(v191 + 584);
          *(_OWORD *)(v190 + 600) = v516;
          *(_OWORD *)(v190 + 552) = v514;
          *(_OWORD *)(v190 + 568) = v515;
          v517 = *(_OWORD *)(v191 + 616);
          v518 = *(_OWORD *)(v191 + 632);
          v519 = *(_OWORD *)(v191 + 664);
          *(_OWORD *)(v190 + 648) = *(_OWORD *)(v191 + 648);
          *(_OWORD *)(v190 + 664) = v519;
          *(_OWORD *)(v190 + 616) = v517;
          *(_OWORD *)(v190 + 632) = v518;
          v520 = *(_OWORD *)(v191 + 680);
          v521 = *(_OWORD *)(v191 + 696);
          v522 = *(_OWORD *)(v191 + 712);
          *(_WORD *)(v190 + 728) = *((_WORD *)v191 + 364);
          *(_OWORD *)(v190 + 696) = v521;
          *(_OWORD *)(v190 + 712) = v522;
          *(_OWORD *)(v190 + 680) = v520;
          *(_BYTE *)(v190 + 730) = v191[730];
          v523 = *((_QWORD *)v191 + 92);
          v524 = v191;
          v525 = *((_QWORD *)v191 + 93);
          *(_QWORD *)(v190 + 736) = v523;
          *(_QWORD *)(v190 + 744) = v525;
          v526 = *((_QWORD *)v524 + 95);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v526 == 1)
          {
            *(_OWORD *)(v190 + 752) = *((_OWORD *)v524 + 47);
          }
          else
          {
            *(_QWORD *)(v190 + 752) = *((_QWORD *)v524 + 94);
            *(_QWORD *)(v190 + 760) = *((_QWORD *)v524 + 95);
            swift_bridgeObjectRetain();
          }
          v191 = v524;
          *(_BYTE *)(v190 + 768) = 0;
        }
        v569 = v201[6];
        v570 = v190 + v569;
        v571 = &v191[v569];
        v572 = sub_1AD63B084();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v572 - 8) + 16))(v570, v571, v572);
        *(_QWORD *)(v190 + v201[7]) = *(_QWORD *)&v191[v201[7]];
        *(_QWORD *)(v190 + v201[8]) = *(_QWORD *)&v191[v201[8]];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v202 + 56))(v190, 0, 1, v201);
        goto LABEL_228;
      }
LABEL_66:
      v218 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
      memcpy((void *)v190, v191, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
      goto LABEL_228;
    }
    if (v205)
    {
      sub_1AD066230(v190, (uint64_t (*)(_QWORD))type metadata accessor for PosterArchive);
      goto LABEL_66;
    }
    v262 = *((_QWORD *)v191 + 23);
    if (!*(_QWORD *)(v190 + 184))
    {
      if (v262)
      {
        v499 = *(_OWORD *)v191;
        *(_BYTE *)(v190 + 16) = v191[16];
        *(_OWORD *)v190 = v499;
        *(_BYTE *)(v190 + 17) = v191[17];
        *(_BYTE *)(v190 + 18) = v191[18];
        v500 = (__int128 *)(v190 + 24);
        v501 = (__int128 *)(v191 + 24);
        if (*((_QWORD *)v191 + 9) == 1)
        {
          v502 = *v501;
          v503 = *(_OWORD *)(v191 + 40);
          v504 = *(_OWORD *)(v191 + 56);
          *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
          *(_OWORD *)(v190 + 40) = v503;
          *(_OWORD *)(v190 + 56) = v504;
          *v500 = v502;
        }
        else
        {
          v583 = *(_OWORD *)(v191 + 40);
          *v500 = *v501;
          *(_OWORD *)(v190 + 40) = v583;
          *(_BYTE *)(v190 + 56) = v191[56];
          *(_QWORD *)(v190 + 64) = *((_QWORD *)v191 + 8);
          *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
          swift_bridgeObjectRetain();
        }
        if (*((_QWORD *)v191 + 11) == 1)
        {
          *(_OWORD *)(v190 + 80) = *((_OWORD *)v191 + 5);
          v584 = *((_OWORD *)v191 + 6);
          v585 = *((_OWORD *)v191 + 7);
          v586 = *((_OWORD *)v191 + 9);
          *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
          *(_OWORD *)(v190 + 144) = v586;
          *(_OWORD *)(v190 + 96) = v584;
          *(_OWORD *)(v190 + 112) = v585;
        }
        else
        {
          *(_BYTE *)(v190 + 80) = v191[80];
          *(_QWORD *)(v190 + 88) = *((_QWORD *)v191 + 11);
          *(_OWORD *)(v190 + 96) = *((_OWORD *)v191 + 6);
          *(_BYTE *)(v190 + 112) = v191[112];
          *(_QWORD *)(v190 + 120) = *((_QWORD *)v191 + 15);
          *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
          *(_OWORD *)(v190 + 144) = *((_OWORD *)v191 + 9);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(_BYTE *)(v190 + 160) = v191[160];
        *(_BYTE *)(v190 + 161) = v191[161];
        *(_QWORD *)(v190 + 168) = *((_QWORD *)v191 + 21);
        *(_BYTE *)(v190 + 176) = v191[176];
        v587 = *((_QWORD *)v191 + 24);
        *(_QWORD *)(v190 + 184) = *((_QWORD *)v191 + 23);
        *(_QWORD *)(v190 + 192) = v587;
        v588 = *((_QWORD *)v191 + 26);
        swift_retain();
        if (v588 == 1)
        {
          *(_OWORD *)(v190 + 200) = *(_OWORD *)(v191 + 200);
        }
        else
        {
          *(_QWORD *)(v190 + 200) = *((_QWORD *)v191 + 25);
          *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v573 = *((_OWORD *)v191 + 1);
        *(_OWORD *)v190 = *(_OWORD *)v191;
        *(_OWORD *)(v190 + 16) = v573;
        v574 = *((_OWORD *)v191 + 2);
        v575 = *((_OWORD *)v191 + 3);
        v576 = *((_OWORD *)v191 + 5);
        *(_OWORD *)(v190 + 64) = *((_OWORD *)v191 + 4);
        *(_OWORD *)(v190 + 80) = v576;
        *(_OWORD *)(v190 + 32) = v574;
        *(_OWORD *)(v190 + 48) = v575;
        v577 = *((_OWORD *)v191 + 6);
        v578 = *((_OWORD *)v191 + 7);
        v579 = *((_OWORD *)v191 + 9);
        *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
        *(_OWORD *)(v190 + 144) = v579;
        *(_OWORD *)(v190 + 96) = v577;
        *(_OWORD *)(v190 + 112) = v578;
        v580 = *((_OWORD *)v191 + 10);
        v581 = *((_OWORD *)v191 + 11);
        v582 = *((_OWORD *)v191 + 12);
        *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
        *(_OWORD *)(v190 + 176) = v581;
        *(_OWORD *)(v190 + 192) = v582;
        *(_OWORD *)(v190 + 160) = v580;
      }
      goto LABEL_204;
    }
    if (!v262)
    {
      sub_1AD3AD2D8((_QWORD *)v190);
      v527 = *((_OWORD *)v191 + 1);
      *(_OWORD *)v190 = *(_OWORD *)v191;
      *(_OWORD *)(v190 + 16) = v527;
      v528 = *((_OWORD *)v191 + 5);
      v530 = *((_OWORD *)v191 + 2);
      v529 = *((_OWORD *)v191 + 3);
      *(_OWORD *)(v190 + 64) = *((_OWORD *)v191 + 4);
      *(_OWORD *)(v190 + 80) = v528;
      *(_OWORD *)(v190 + 32) = v530;
      *(_OWORD *)(v190 + 48) = v529;
      v531 = *((_OWORD *)v191 + 9);
      v533 = *((_OWORD *)v191 + 6);
      v532 = *((_OWORD *)v191 + 7);
      *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
      *(_OWORD *)(v190 + 144) = v531;
      *(_OWORD *)(v190 + 96) = v533;
      *(_OWORD *)(v190 + 112) = v532;
      v535 = *((_OWORD *)v191 + 11);
      v534 = *((_OWORD *)v191 + 12);
      v536 = *((_OWORD *)v191 + 10);
      *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
      *(_OWORD *)(v190 + 176) = v535;
      *(_OWORD *)(v190 + 192) = v534;
      *(_OWORD *)(v190 + 160) = v536;
LABEL_204:
      *(_WORD *)(v190 + 216) = *((_WORD *)v191 + 108);
      if (v5 != v4)
      {
        v601 = (_OWORD *)(v190 + 224);
        v602 = v191 + 224;
        sub_1AD28B36C(v190 + 224);
        v603 = v191[768];
        if (v603 == 2)
        {
          v623 = *((_OWORD *)v191 + 15);
          *v601 = *v602;
          *(_OWORD *)(v190 + 240) = v623;
          v624 = *((_OWORD *)v191 + 17);
          *(_OWORD *)(v190 + 256) = *((_OWORD *)v191 + 16);
          *(_OWORD *)(v190 + 272) = v624;
          *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
          *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
          *(_BYTE *)(v190 + 304) = v191[304];
          *(_BYTE *)(v190 + 768) = 2;
          swift_bridgeObjectRetain();
        }
        else if (v603 == 1)
        {
          v604 = *((_OWORD *)v191 + 15);
          *v601 = *v602;
          *(_OWORD *)(v190 + 240) = v604;
          v605 = (_OWORD *)(v190 + 256);
          v606 = (__int128 *)(v191 + 256);
          v607 = *((_QWORD *)v191 + 35);
          if (v607)
          {
            *(_QWORD *)(v190 + 280) = v607;
            *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
            (**(void (***)(_OWORD *, __int128 *))(v607 - 8))(v605, v606);
            v608 = *((_QWORD *)v191 + 37);
            *(_BYTE *)(v190 + 304) = v191[304];
            *(_QWORD *)(v190 + 296) = v608;
            v609 = *((_QWORD *)v191 + 42);
            v610 = *((_QWORD *)v191 + 44);
            v611 = *((_QWORD *)v191 + 46);
            v612 = *((_QWORD *)v191 + 52);
            v613 = *((_QWORD *)v191 + 54);
            if (v609 >> 1 != 0xFFFFFFFF
              || (v611 | (unint64_t)v610) > 1
              || v612 & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v191 + 48) & 0xFFFFFFFFFFFF00FELL
              || (*((_QWORD *)v191 + 56) | (unint64_t)v613) >= 2)
            {
              v662 = *((_QWORD *)v191 + 41);
              v663 = *((_QWORD *)v191 + 43);
              v1162 = *((_QWORD *)v191 + 47);
              v1216 = *((_QWORD *)v191 + 49);
              v1244 = *((_QWORD *)v191 + 50);
              v1296 = *((_QWORD *)v191 + 51);
              v1324 = *((_QWORD *)v191 + 53);
              v1352 = *((_QWORD *)v191 + 55);
              v1380 = *((_QWORD *)v191 + 57);
              v1406 = *((_QWORD *)v191 + 58);
              v1432 = *((_QWORD *)v191 + 59);
              v1458 = *((_QWORD *)v191 + 60);
              v1484 = *((_QWORD *)v191 + 61);
              v1505 = *((_QWORD *)v191 + 62);
              v664 = *((_QWORD *)v191 + 39);
              v1122 = *((_QWORD *)v191 + 52);
              v1140 = *((_QWORD *)v191 + 48);
              v665 = *((_QWORD *)v191 + 40);
              v1269 = *((_QWORD *)v191 + 56);
              v1186 = *((_QWORD *)v191 + 54);
              v666 = *((_QWORD *)v191 + 45);
              sub_1AD00FEAC(v664, v665, v662, v609, v663, v610, v666, v611, v1162, v1140, v1216, v1244, v1296, v612, v1324, v613, v1352, v1269, v1380,
                v1406,
                v1432,
                v1458,
                v1484,
                v1505);
              v667 = v611;
              v190 = (uint64_t)v1532;
              v1532[39] = v664;
              v1532[40] = v665;
              v1532[41] = v662;
              v1532[42] = v609;
              v1532[43] = v663;
              v1532[44] = v610;
              v1532[45] = v666;
              v1532[46] = v667;
              v1532[47] = v1162;
              v1532[48] = v1140;
              v1532[49] = v1216;
              v1532[50] = v1244;
              v1532[51] = v1296;
              v1532[52] = v1122;
              v1532[53] = v1324;
              v1532[54] = v1186;
              v1532[55] = v1352;
              v1532[56] = v1269;
              v1532[57] = v1380;
              v1532[58] = v1406;
              v1532[59] = v1432;
              v1532[60] = v1458;
              v1532[61] = v1484;
              v1532[62] = v1505;
            }
            else
            {
              v190 = (uint64_t)v1532;
              v614 = *(_OWORD *)(v191 + 312);
              v615 = *(_OWORD *)(v191 + 328);
              v616 = *(_OWORD *)(v191 + 360);
              *(_OWORD *)(v1532 + 43) = *(_OWORD *)(v191 + 344);
              *(_OWORD *)(v1532 + 45) = v616;
              *(_OWORD *)(v1532 + 39) = v614;
              *(_OWORD *)(v1532 + 41) = v615;
              v617 = *(_OWORD *)(v191 + 376);
              v618 = *(_OWORD *)(v191 + 392);
              v619 = *(_OWORD *)(v191 + 424);
              *(_OWORD *)(v1532 + 51) = *(_OWORD *)(v191 + 408);
              *(_OWORD *)(v1532 + 53) = v619;
              *(_OWORD *)(v1532 + 47) = v617;
              *(_OWORD *)(v1532 + 49) = v618;
              v620 = *(_OWORD *)(v191 + 440);
              v621 = *(_OWORD *)(v191 + 456);
              v622 = *(_OWORD *)(v191 + 488);
              *(_OWORD *)(v1532 + 59) = *(_OWORD *)(v191 + 472);
              *(_OWORD *)(v1532 + 61) = v622;
              *(_OWORD *)(v1532 + 55) = v620;
              *(_OWORD *)(v1532 + 57) = v621;
            }
          }
          else
          {
            v650 = *v606;
            v651 = *((_OWORD *)v191 + 17);
            v652 = *((_OWORD *)v191 + 19);
            *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
            *(_OWORD *)(v190 + 304) = v652;
            *v605 = v650;
            *(_OWORD *)(v190 + 272) = v651;
            v653 = *((_OWORD *)v191 + 20);
            v654 = *((_OWORD *)v191 + 21);
            v655 = *((_OWORD *)v191 + 23);
            *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
            *(_OWORD *)(v190 + 368) = v655;
            *(_OWORD *)(v190 + 320) = v653;
            *(_OWORD *)(v190 + 336) = v654;
            v656 = *((_OWORD *)v191 + 24);
            v657 = *((_OWORD *)v191 + 25);
            v658 = *((_OWORD *)v191 + 27);
            *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
            *(_OWORD *)(v190 + 432) = v658;
            *(_OWORD *)(v190 + 384) = v656;
            *(_OWORD *)(v190 + 400) = v657;
            v659 = *((_OWORD *)v191 + 28);
            v660 = *((_OWORD *)v191 + 29);
            v661 = *((_OWORD *)v191 + 30);
            *(_QWORD *)(v190 + 496) = *((_QWORD *)v191 + 62);
            *(_OWORD *)(v190 + 464) = v660;
            *(_OWORD *)(v190 + 480) = v661;
            *(_OWORD *)(v190 + 448) = v659;
          }
          v668 = *((_QWORD *)v191 + 64);
          v1113 = *((_QWORD *)v191 + 66);
          v1123 = *((_QWORD *)v191 + 71);
          v1141 = *((_QWORD *)v191 + 72);
          v1163 = *((_QWORD *)v191 + 73);
          v1187 = *((_QWORD *)v191 + 74);
          v1217 = *((_QWORD *)v191 + 75);
          v1245 = *((_OWORD *)v191 + 38);
          v1297 = *((_QWORD *)v191 + 78);
          v1325 = *((_QWORD *)v191 + 79);
          v1353 = *((_QWORD *)v191 + 80);
          v1381 = *((_QWORD *)v191 + 81);
          v1407 = *((_QWORD *)v191 + 82);
          v1433 = *((_QWORD *)v191 + 83);
          v1459 = *((_QWORD *)v191 + 84);
          v1485 = *((_QWORD *)v191 + 85);
          v1506 = *((_QWORD *)v191 + 86);
          v669 = *((_QWORD *)v191 + 63);
          v670 = *((_QWORD *)v191 + 65);
          v671 = *((_QWORD *)v191 + 67);
          v672 = *((_QWORD *)v191 + 68);
          v673 = *((_QWORD *)v191 + 69);
          v674 = *((_QWORD *)v191 + 70);
          sub_1AD00FEAC(v669, v668, v670, v1113, v671, v672, v673, v674, v1123, v1141, v1163, v1187, v1217, v1245, *((uint64_t *)&v1245 + 1), v1297, v1325, v1353, v1381,
            v1407,
            v1433,
            v1459,
            v1485,
            v1506);
          *(_QWORD *)(v190 + 504) = v669;
          *(_QWORD *)(v190 + 512) = v668;
          *(_QWORD *)(v190 + 520) = v670;
          *(_QWORD *)(v190 + 528) = v1113;
          *(_QWORD *)(v190 + 536) = v671;
          *(_QWORD *)(v190 + 544) = v672;
          *(_QWORD *)(v190 + 552) = v673;
          *(_QWORD *)(v190 + 560) = v674;
          *(_QWORD *)(v190 + 568) = v1123;
          *(_QWORD *)(v190 + 576) = v1141;
          *(_QWORD *)(v190 + 584) = v1163;
          *(_QWORD *)(v190 + 592) = v1187;
          *(_QWORD *)(v190 + 600) = v1217;
          *(_OWORD *)(v190 + 608) = v1245;
          *(_QWORD *)(v190 + 624) = v1297;
          *(_QWORD *)(v190 + 632) = v1325;
          *(_QWORD *)(v190 + 640) = v1353;
          *(_QWORD *)(v190 + 648) = v1381;
          *(_QWORD *)(v190 + 656) = v1407;
          *(_QWORD *)(v190 + 664) = v1433;
          *(_QWORD *)(v190 + 672) = v1459;
          *(_QWORD *)(v190 + 680) = v1485;
          *(_QWORD *)(v190 + 688) = v1506;
          v675 = *((_QWORD *)v191 + 87);
          if (v675)
          {
            v676 = *((_QWORD *)v191 + 88);
            *(_QWORD *)(v190 + 696) = v675;
            *(_QWORD *)(v190 + 704) = v676;
            *(_QWORD *)(v190 + 712) = *((_QWORD *)v191 + 89);
            *(_QWORD *)(v190 + 720) = *((_QWORD *)v191 + 90);
            *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            v677 = *(_OWORD *)(v191 + 696);
            v678 = *(_OWORD *)(v191 + 712);
            *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
            *(_OWORD *)(v190 + 696) = v677;
            *(_OWORD *)(v190 + 712) = v678;
          }
          v192 = v1540;
          *(_BYTE *)(v190 + 736) = v191[736];
          *(_BYTE *)(v190 + 768) = 1;
        }
        else
        {
          *(_WORD *)(v190 + 224) = *((_WORD *)v191 + 112);
          v625 = *((_QWORD *)v191 + 30);
          *(_QWORD *)(v190 + 232) = *((_QWORD *)v191 + 29);
          *(_QWORD *)(v190 + 240) = v625;
          *(_QWORD *)(v190 + 248) = *((_QWORD *)v191 + 31);
          *(_QWORD *)(v190 + 256) = *((_QWORD *)v191 + 32);
          *(_BYTE *)(v190 + 264) = v191[264];
          v626 = *((_QWORD *)v191 + 35);
          *(_QWORD *)(v190 + 272) = *((_QWORD *)v191 + 34);
          *(_QWORD *)(v190 + 280) = v626;
          v627 = *((_QWORD *)v191 + 37);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v627 == 1)
          {
            *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
          }
          else
          {
            *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
            *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
            swift_bridgeObjectRetain();
          }
          v628 = *((_QWORD *)v191 + 39);
          *(_QWORD *)(v190 + 304) = *((_QWORD *)v191 + 38);
          *(_QWORD *)(v190 + 312) = v628;
          *(_QWORD *)(v190 + 320) = *((_QWORD *)v191 + 40);
          *(_QWORD *)(v190 + 328) = *((_QWORD *)v191 + 41);
          *(_QWORD *)(v190 + 336) = *((_QWORD *)v191 + 42);
          *(_QWORD *)(v190 + 344) = *((_QWORD *)v191 + 43);
          v629 = *((_OWORD *)v191 + 23);
          *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
          *(_OWORD *)(v190 + 368) = v629;
          v630 = *((_OWORD *)v191 + 24);
          v631 = *((_OWORD *)v191 + 25);
          v632 = *((_OWORD *)v191 + 27);
          *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
          *(_OWORD *)(v190 + 432) = v632;
          *(_OWORD *)(v190 + 384) = v630;
          *(_OWORD *)(v190 + 400) = v631;
          v633 = *((_OWORD *)v191 + 28);
          v634 = *((_OWORD *)v191 + 29);
          v635 = *((_OWORD *)v191 + 30);
          *(_WORD *)(v190 + 496) = *((_WORD *)v191 + 248);
          *(_OWORD *)(v190 + 464) = v634;
          *(_OWORD *)(v190 + 480) = v635;
          *(_OWORD *)(v190 + 448) = v633;
          *(_BYTE *)(v190 + 498) = v191[498];
          *(_BYTE *)(v190 + 499) = v191[499];
          *(_QWORD *)(v190 + 504) = *((_QWORD *)v191 + 63);
          *(_BYTE *)(v190 + 512) = v191[512];
          v636 = *(_OWORD *)(v191 + 536);
          *(_OWORD *)(v190 + 520) = *(_OWORD *)(v191 + 520);
          *(_OWORD *)(v190 + 536) = v636;
          v637 = *(_OWORD *)(v191 + 552);
          v638 = *(_OWORD *)(v191 + 568);
          v639 = *(_OWORD *)(v191 + 600);
          *(_OWORD *)(v190 + 584) = *(_OWORD *)(v191 + 584);
          *(_OWORD *)(v190 + 600) = v639;
          *(_OWORD *)(v190 + 552) = v637;
          *(_OWORD *)(v190 + 568) = v638;
          v640 = *(_OWORD *)(v191 + 616);
          v641 = *(_OWORD *)(v191 + 632);
          v642 = *(_OWORD *)(v191 + 664);
          *(_OWORD *)(v190 + 648) = *(_OWORD *)(v191 + 648);
          *(_OWORD *)(v190 + 664) = v642;
          *(_OWORD *)(v190 + 616) = v640;
          *(_OWORD *)(v190 + 632) = v641;
          v643 = *(_OWORD *)(v191 + 680);
          v644 = *(_OWORD *)(v191 + 696);
          v645 = *(_OWORD *)(v191 + 712);
          *(_WORD *)(v190 + 728) = *((_WORD *)v191 + 364);
          *(_OWORD *)(v190 + 696) = v644;
          *(_OWORD *)(v190 + 712) = v645;
          *(_OWORD *)(v190 + 680) = v643;
          *(_BYTE *)(v190 + 730) = v191[730];
          v646 = *((_QWORD *)v191 + 92);
          v647 = v191;
          v648 = *((_QWORD *)v191 + 93);
          *(_QWORD *)(v190 + 736) = v646;
          *(_QWORD *)(v190 + 744) = v648;
          v649 = *((_QWORD *)v647 + 95);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v649 == 1)
          {
            *(_OWORD *)(v190 + 752) = *((_OWORD *)v647 + 47);
          }
          else
          {
            *(_QWORD *)(v190 + 752) = *((_QWORD *)v647 + 94);
            *(_QWORD *)(v190 + 760) = *((_QWORD *)v647 + 95);
            swift_bridgeObjectRetain();
          }
          v191 = v647;
          *(_BYTE *)(v190 + 768) = 0;
        }
      }
      v679 = v201[6];
      v680 = v190 + v679;
      v681 = &v191[v679];
      v682 = sub_1AD63B084();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v682 - 8) + 24))(v680, v681, v682);
      *(_QWORD *)(v190 + v201[7]) = *(_QWORD *)&v191[v201[7]];
      *(_QWORD *)(v190 + v201[8]) = *(_QWORD *)&v191[v201[8]];
LABEL_228:
      v683 = v192[5];
      v684 = (_QWORD *)(v190 + v683);
      v685 = &v191[v683];
      v686 = *(_QWORD *)&v191[v683 + 8];
      *v684 = *(_QWORD *)&v191[v683];
      v684[1] = v686;
      swift_retain();
      swift_release();
      v687 = *((_QWORD *)v685 + 3);
      if (v684[3] == 1)
      {
        if (v687 != 1)
        {
          v684[2] = *((_QWORD *)v685 + 2);
          v684[3] = *((_QWORD *)v685 + 3);
          swift_bridgeObjectRetain();
          goto LABEL_235;
        }
      }
      else
      {
        if (v687 != 1)
        {
          v684[2] = *((_QWORD *)v685 + 2);
          v684[3] = *((_QWORD *)v685 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_235:
          v688 = v192[6];
          v689 = v190 + v688;
          v690 = &v191[v688];
          v694 = *(_QWORD *)&v191[v688 + 272] >> 1 == 0xFFFFFFFFLL
              && (*((_QWORD *)v690 + 38) | *((_QWORD *)v690 + 36)) < 2uLL
              && (*(_QWORD *)&v191[v688 + 352] & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v690 + 40) & 0xFFFFFFFFFFFF00FELL) == 0
              && (*((_QWORD *)v690 + 48) | *((_QWORD *)v690 + 46)) < 2uLL;
          v1524 = v191;
          if (*(_QWORD *)(v190 + v688 + 272) >> 1 == 0xFFFFFFFFLL
            && (*(_QWORD *)(v689 + 304) | *(_QWORD *)(v689 + 288)) <= 1
            && !(*(_QWORD *)(v689 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v689 + 320) & 0xFFFFFFFFFFFF00FELL)
            && (*(_QWORD *)(v689 + 384) | *(_QWORD *)(v689 + 368)) < 2)
          {
            if (!v694)
            {
              v695 = *((_QWORD *)v690 + 3);
              if (v695)
              {
                *(_QWORD *)(v689 + 24) = v695;
                *(_QWORD *)(v689 + 32) = *((_QWORD *)v690 + 4);
                (**(void (***)(uint64_t, char *))(v695 - 8))(v689, v690);
                v696 = *((_QWORD *)v690 + 5);
                *(_BYTE *)(v689 + 48) = v690[48];
                *(_QWORD *)(v689 + 40) = v696;
                v697 = *((_QWORD *)v690 + 10);
                v698 = *((_QWORD *)v690 + 12);
                v699 = *((_QWORD *)v690 + 14);
                v700 = *((_QWORD *)v690 + 22);
                v701 = *((_QWORD *)v690 + 24);
                if (v697 >> 1 != 0xFFFFFFFF
                  || (v699 | (unint64_t)v698) > 1
                  || *((_QWORD *)v690 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v690 + 16) & 0xFFFFFFFFFFFF00FELL
                  || (v701 | v700) >= 2)
                {
                  v761 = *((_QWORD *)v690 + 7);
                  v762 = *((_QWORD *)v690 + 8);
                  v1142 = *((_QWORD *)v690 + 15);
                  v1246 = *((_QWORD *)v690 + 17);
                  v1270 = *((_QWORD *)v690 + 18);
                  v1298 = *((_QWORD *)v690 + 19);
                  v1326 = *((_QWORD *)v690 + 21);
                  v1354 = *((_QWORD *)v690 + 23);
                  v1382 = *((_QWORD *)v690 + 25);
                  v1408 = *((_QWORD *)v690 + 26);
                  v1434 = *((_QWORD *)v690 + 27);
                  v1460 = *((_QWORD *)v690 + 28);
                  v1486 = *((_QWORD *)v690 + 29);
                  v1507 = *((_QWORD *)v690 + 30);
                  v1124 = *((_QWORD *)v690 + 16);
                  v763 = *((_QWORD *)v690 + 9);
                  v1164 = *((_QWORD *)v690 + 20);
                  v1188 = *((_QWORD *)v690 + 24);
                  v764 = *((_QWORD *)v690 + 11);
                  v1218 = *((_QWORD *)v690 + 22);
                  v765 = *((_QWORD *)v690 + 13);
                  sub_1AD00FEAC(v761, v762, v763, v697, v764, v698, v765, v699, v1142, v1124, v1246, v1270, v1298, v1164, v1326, v700, v1354, v701, v1382,
                    v1408,
                    v1434,
                    v1460,
                    v1486,
                    v1507);
                  *(_QWORD *)(v689 + 56) = v761;
                  *(_QWORD *)(v689 + 64) = v762;
                  *(_QWORD *)(v689 + 72) = v763;
                  *(_QWORD *)(v689 + 80) = v697;
                  *(_QWORD *)(v689 + 88) = v764;
                  *(_QWORD *)(v689 + 96) = v698;
                  *(_QWORD *)(v689 + 104) = v765;
                  *(_QWORD *)(v689 + 112) = v699;
                  *(_QWORD *)(v689 + 120) = v1142;
                  *(_QWORD *)(v689 + 128) = v1124;
                  *(_QWORD *)(v689 + 136) = v1246;
                  *(_QWORD *)(v689 + 144) = v1270;
                  *(_QWORD *)(v689 + 152) = v1298;
                  *(_QWORD *)(v689 + 160) = v1164;
                  *(_QWORD *)(v689 + 168) = v1326;
                  *(_QWORD *)(v689 + 176) = v1218;
                  *(_QWORD *)(v689 + 184) = v1354;
                  *(_QWORD *)(v689 + 192) = v1188;
                  *(_QWORD *)(v689 + 200) = v1382;
                  *(_QWORD *)(v689 + 208) = v1408;
                  *(_QWORD *)(v689 + 216) = v1434;
                  *(_QWORD *)(v689 + 224) = v1460;
                  *(_QWORD *)(v689 + 232) = v1486;
                  *(_QWORD *)(v689 + 240) = v1507;
                }
                else
                {
                  v702 = *(_OWORD *)(v690 + 56);
                  v703 = *(_OWORD *)(v690 + 72);
                  v704 = *(_OWORD *)(v690 + 104);
                  *(_OWORD *)(v689 + 88) = *(_OWORD *)(v690 + 88);
                  *(_OWORD *)(v689 + 104) = v704;
                  *(_OWORD *)(v689 + 56) = v702;
                  *(_OWORD *)(v689 + 72) = v703;
                  v705 = *(_OWORD *)(v690 + 120);
                  v706 = *(_OWORD *)(v690 + 136);
                  v707 = *(_OWORD *)(v690 + 168);
                  *(_OWORD *)(v689 + 152) = *(_OWORD *)(v690 + 152);
                  *(_OWORD *)(v689 + 168) = v707;
                  *(_OWORD *)(v689 + 120) = v705;
                  *(_OWORD *)(v689 + 136) = v706;
                  v708 = *(_OWORD *)(v690 + 184);
                  v709 = *(_OWORD *)(v690 + 200);
                  v710 = *(_OWORD *)(v690 + 232);
                  *(_OWORD *)(v689 + 216) = *(_OWORD *)(v690 + 216);
                  *(_OWORD *)(v689 + 232) = v710;
                  *(_OWORD *)(v689 + 184) = v708;
                  *(_OWORD *)(v689 + 200) = v709;
                }
              }
              else
              {
                v735 = *(_OWORD *)v690;
                v736 = *((_OWORD *)v690 + 1);
                v737 = *((_OWORD *)v690 + 3);
                *(_OWORD *)(v689 + 32) = *((_OWORD *)v690 + 2);
                *(_OWORD *)(v689 + 48) = v737;
                *(_OWORD *)v689 = v735;
                *(_OWORD *)(v689 + 16) = v736;
                v738 = *((_OWORD *)v690 + 4);
                v739 = *((_OWORD *)v690 + 5);
                v740 = *((_OWORD *)v690 + 7);
                *(_OWORD *)(v689 + 96) = *((_OWORD *)v690 + 6);
                *(_OWORD *)(v689 + 112) = v740;
                *(_OWORD *)(v689 + 64) = v738;
                *(_OWORD *)(v689 + 80) = v739;
                v741 = *((_OWORD *)v690 + 8);
                v742 = *((_OWORD *)v690 + 9);
                v743 = *((_OWORD *)v690 + 11);
                *(_OWORD *)(v689 + 160) = *((_OWORD *)v690 + 10);
                *(_OWORD *)(v689 + 176) = v743;
                *(_OWORD *)(v689 + 128) = v741;
                *(_OWORD *)(v689 + 144) = v742;
                v744 = *((_OWORD *)v690 + 12);
                v745 = *((_OWORD *)v690 + 13);
                v746 = *((_OWORD *)v690 + 14);
                *(_QWORD *)(v689 + 240) = *((_QWORD *)v690 + 30);
                *(_OWORD *)(v689 + 208) = v745;
                *(_OWORD *)(v689 + 224) = v746;
                *(_OWORD *)(v689 + 192) = v744;
              }
              v766 = *((_QWORD *)v690 + 31);
              v767 = *((_QWORD *)v690 + 32);
              v768 = *((_QWORD *)v690 + 33);
              v769 = *((_QWORD *)v690 + 34);
              v770 = *((_QWORD *)v690 + 35);
              v771 = *((_QWORD *)v690 + 36);
              v772 = *((_QWORD *)v690 + 37);
              v773 = *((_QWORD *)v690 + 38);
              v1143 = *((_QWORD *)v690 + 40);
              v1165 = *((_QWORD *)v690 + 41);
              v1189 = *((_QWORD *)v690 + 42);
              v1219 = *((_QWORD *)v690 + 43);
              v1247 = *((_QWORD *)v690 + 44);
              v1271 = *((_QWORD *)v690 + 45);
              v1299 = *((_QWORD *)v690 + 46);
              v1327 = *((_QWORD *)v690 + 47);
              v1355 = *((_QWORD *)v690 + 48);
              v1383 = *((_QWORD *)v690 + 49);
              v1409 = *((_QWORD *)v690 + 50);
              v1435 = *((_QWORD *)v690 + 51);
              v1461 = *((_QWORD *)v690 + 52);
              v1487 = *((_QWORD *)v690 + 53);
              v1508 = *((_QWORD *)v690 + 54);
              v774 = *((_QWORD *)v690 + 39);
              v775 = v766;
              v776 = v768;
              v777 = v770;
              v778 = v771;
              v779 = v772;
              v780 = v773;
              sub_1AD00FEAC(v766, v767, v768, v769, v770, v771, v772, v773, v774, v1143, v1165, v1189, v1219, v1247, v1271, v1299, v1327, v1355, v1383,
                v1409,
                v1435,
                v1461,
                v1487,
                v1508);
              *(_QWORD *)(v689 + 248) = v775;
              *(_QWORD *)(v689 + 256) = v767;
              *(_QWORD *)(v689 + 264) = v776;
              *(_QWORD *)(v689 + 272) = v769;
              *(_QWORD *)(v689 + 280) = v777;
              *(_QWORD *)(v689 + 288) = v778;
              *(_QWORD *)(v689 + 296) = v779;
              *(_QWORD *)(v689 + 304) = v780;
              *(_QWORD *)(v689 + 312) = v774;
              *(_QWORD *)(v689 + 320) = v1143;
              *(_QWORD *)(v689 + 328) = v1165;
              *(_QWORD *)(v689 + 336) = v1189;
              *(_QWORD *)(v689 + 344) = v1219;
              *(_QWORD *)(v689 + 352) = v1247;
              *(_QWORD *)(v689 + 360) = v1271;
              *(_QWORD *)(v689 + 368) = v1299;
              *(_QWORD *)(v689 + 376) = v1327;
              *(_QWORD *)(v689 + 384) = v1355;
              *(_QWORD *)(v689 + 392) = v1383;
              *(_QWORD *)(v689 + 400) = v1409;
              *(_QWORD *)(v689 + 408) = v1435;
              *(_QWORD *)(v689 + 416) = v1461;
              *(_QWORD *)(v689 + 424) = v1487;
              *(_QWORD *)(v689 + 432) = v1508;
              goto LABEL_299;
            }
LABEL_260:
            memcpy((void *)v689, v690, 0x1B8uLL);
            goto LABEL_300;
          }
          if (v694)
          {
            sub_1AD406748((_QWORD *)v689);
            goto LABEL_260;
          }
          v711 = *((_QWORD *)v690 + 3);
          if (*(_QWORD *)(v689 + 24))
          {
            if (!v711)
            {
              sub_1AD046A30((_QWORD *)v689);
              v781 = *((_OWORD *)v690 + 3);
              v783 = *(_OWORD *)v690;
              v782 = *((_OWORD *)v690 + 1);
              *(_OWORD *)(v689 + 32) = *((_OWORD *)v690 + 2);
              *(_OWORD *)(v689 + 48) = v781;
              *(_OWORD *)v689 = v783;
              *(_OWORD *)(v689 + 16) = v782;
              v784 = *((_OWORD *)v690 + 7);
              v786 = *((_OWORD *)v690 + 4);
              v785 = *((_OWORD *)v690 + 5);
              *(_OWORD *)(v689 + 96) = *((_OWORD *)v690 + 6);
              *(_OWORD *)(v689 + 112) = v784;
              *(_OWORD *)(v689 + 64) = v786;
              *(_OWORD *)(v689 + 80) = v785;
              v787 = *((_OWORD *)v690 + 11);
              v789 = *((_OWORD *)v690 + 8);
              v788 = *((_OWORD *)v690 + 9);
              *(_OWORD *)(v689 + 160) = *((_OWORD *)v690 + 10);
              *(_OWORD *)(v689 + 176) = v787;
              *(_OWORD *)(v689 + 128) = v789;
              *(_OWORD *)(v689 + 144) = v788;
              v791 = *((_OWORD *)v690 + 13);
              v790 = *((_OWORD *)v690 + 14);
              v792 = *((_OWORD *)v690 + 12);
              *(_QWORD *)(v689 + 240) = *((_QWORD *)v690 + 30);
              *(_OWORD *)(v689 + 208) = v791;
              *(_OWORD *)(v689 + 224) = v790;
              *(_OWORD *)(v689 + 192) = v792;
              goto LABEL_298;
            }
            __swift_assign_boxed_opaque_existential_1((uint64_t *)v689, (uint64_t *)v690);
            v712 = *((_QWORD *)v690 + 5);
            *(_BYTE *)(v689 + 48) = v690[48];
            *(_QWORD *)(v689 + 40) = v712;
            v713 = (_OWORD *)(v689 + 56);
            v714 = (__int128 *)(v690 + 56);
            v715 = *((_QWORD *)v690 + 10);
            v716 = *((_QWORD *)v690 + 12);
            v717 = *((_QWORD *)v690 + 14);
            v718 = *((_QWORD *)v690 + 16);
            v719 = *((_QWORD *)v690 + 20);
            v720 = *((_QWORD *)v690 + 22);
            v721 = *((_QWORD *)v690 + 24);
            v725 = v715 >> 1 == 0xFFFFFFFF
                && (v717 | (unint64_t)v716) < 2
                && (v719 & 0xFFFFFFFFFFFFFEFELL | v718 & 0xFFFFFFFFFFFF00FELL) == 0
                && (v721 | v720) < 2;
            if (*(_QWORD *)(v689 + 80) >> 1 != 0xFFFFFFFFLL
              || (*(_QWORD *)(v689 + 112) | *(_QWORD *)(v689 + 96)) > 1
              || *(_QWORD *)(v689 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v689 + 128) & 0xFFFFFFFFFFFF00FELL
              || (*(_QWORD *)(v689 + 192) | *(_QWORD *)(v689 + 176)) >= 2)
            {
              if (v725)
              {
                sub_1AD148B34(v689 + 56);
                v793 = *(_OWORD *)(v690 + 104);
                v795 = *v714;
                v794 = *(_OWORD *)(v690 + 72);
                *(_OWORD *)(v689 + 88) = *(_OWORD *)(v690 + 88);
                *(_OWORD *)(v689 + 104) = v793;
                *v713 = v795;
                *(_OWORD *)(v689 + 72) = v794;
                v796 = *(_OWORD *)(v690 + 168);
                v798 = *(_OWORD *)(v690 + 120);
                v797 = *(_OWORD *)(v690 + 136);
                *(_OWORD *)(v689 + 152) = *(_OWORD *)(v690 + 152);
                *(_OWORD *)(v689 + 168) = v796;
                *(_OWORD *)(v689 + 120) = v798;
                *(_OWORD *)(v689 + 136) = v797;
                v799 = *(_OWORD *)(v690 + 232);
                v801 = *(_OWORD *)(v690 + 184);
                v800 = *(_OWORD *)(v690 + 200);
                *(_OWORD *)(v689 + 216) = *(_OWORD *)(v690 + 216);
                *(_OWORD *)(v689 + 232) = v799;
                *(_OWORD *)(v689 + 184) = v801;
                *(_OWORD *)(v689 + 200) = v800;
              }
              else
              {
                v825 = *((_QWORD *)v690 + 8);
                v1127 = *((_QWORD *)v690 + 9);
                v1146 = *((_QWORD *)v690 + 11);
                v1168 = *((_QWORD *)v690 + 13);
                v1192 = *((_QWORD *)v690 + 15);
                v1250 = *((_QWORD *)v690 + 17);
                v1274 = *((_QWORD *)v690 + 18);
                v1302 = *((_QWORD *)v690 + 19);
                v1330 = *((_QWORD *)v690 + 21);
                v1358 = *((_QWORD *)v690 + 23);
                v1385 = *((_QWORD *)v690 + 25);
                v1411 = *((_QWORD *)v690 + 26);
                v1437 = *((_QWORD *)v690 + 27);
                v1463 = *((_QWORD *)v690 + 28);
                v1489 = *((_QWORD *)v690 + 29);
                v1510 = *((_QWORD *)v690 + 30);
                v826 = *((_QWORD *)v690 + 7);
                v827 = *((_QWORD *)v690 + 12);
                v1222 = *((_QWORD *)v690 + 24);
                sub_1AD00FEAC(v826, v825, v1127, v715, v1146, v716, v1168, v717, v1192, v718, v1250, v1274, v1302, v719, v1330, v720, v1358, v721, v1385,
                  v1411,
                  v1437,
                  v1463,
                  v1489,
                  v1510);
                v828 = *(_QWORD *)(v689 + 56);
                v829 = *(_QWORD *)(v689 + 64);
                *(_QWORD *)(v689 + 56) = v826;
                *(_QWORD *)(v689 + 64) = v825;
                v830 = *(_QWORD *)(v689 + 72);
                v831 = *(_QWORD *)(v689 + 80);
                *(_QWORD *)(v689 + 72) = v1127;
                *(_QWORD *)(v689 + 80) = v715;
                v832 = *(_QWORD *)(v689 + 88);
                v833 = *(_QWORD *)(v689 + 96);
                *(_QWORD *)(v689 + 88) = v1146;
                *(_QWORD *)(v689 + 96) = v827;
                v834 = *(_QWORD *)(v689 + 104);
                v835 = *(_QWORD *)(v689 + 112);
                *(_QWORD *)(v689 + 104) = v1168;
                *(_QWORD *)(v689 + 112) = v717;
                v836 = *(_OWORD *)(v689 + 120);
                *(_QWORD *)(v689 + 120) = v1192;
                *(_QWORD *)(v689 + 128) = v718;
                v837 = *(_OWORD *)(v689 + 136);
                *(_QWORD *)(v689 + 136) = v1250;
                *(_QWORD *)(v689 + 144) = v1274;
                v838 = *(_OWORD *)(v689 + 152);
                *(_QWORD *)(v689 + 152) = v1302;
                *(_QWORD *)(v689 + 160) = v719;
                v839 = *(_OWORD *)(v689 + 168);
                *(_QWORD *)(v689 + 168) = v1330;
                *(_QWORD *)(v689 + 176) = v720;
                v840 = *(_OWORD *)(v689 + 184);
                *(_QWORD *)(v689 + 184) = v1358;
                *(_QWORD *)(v689 + 192) = v1222;
                v841 = *(_OWORD *)(v689 + 200);
                *(_QWORD *)(v689 + 200) = v1385;
                *(_QWORD *)(v689 + 208) = v1411;
                v842 = *(_OWORD *)(v689 + 216);
                *(_QWORD *)(v689 + 216) = v1437;
                *(_QWORD *)(v689 + 224) = v1463;
                v843 = *(_QWORD *)(v689 + 232);
                v844 = *(_QWORD *)(v689 + 240);
                *(_QWORD *)(v689 + 232) = v1489;
                *(_QWORD *)(v689 + 240) = v1510;
                sub_1AD00E8B0(v828, v829, v830, v831, v832, v833, v834, v835, v836, *((uint64_t *)&v836 + 1), v837, *((uint64_t *)&v837 + 1), v838, *((uint64_t *)&v838 + 1), v839, *((uint64_t *)&v839 + 1), v840, *((unint64_t *)&v840 + 1), v841,
                  *((uint64_t *)&v841 + 1),
                  v842,
                  *((uint64_t *)&v842 + 1),
                  v843,
                  v844);
              }
              goto LABEL_298;
            }
            if (v725)
            {
              v726 = *v714;
              v727 = *(_OWORD *)(v690 + 72);
              v728 = *(_OWORD *)(v690 + 104);
              *(_OWORD *)(v689 + 88) = *(_OWORD *)(v690 + 88);
              *(_OWORD *)(v689 + 104) = v728;
              *v713 = v726;
              *(_OWORD *)(v689 + 72) = v727;
              v729 = *(_OWORD *)(v690 + 120);
              v730 = *(_OWORD *)(v690 + 136);
              v731 = *(_OWORD *)(v690 + 168);
              *(_OWORD *)(v689 + 152) = *(_OWORD *)(v690 + 152);
              *(_OWORD *)(v689 + 168) = v731;
              *(_OWORD *)(v689 + 120) = v729;
              *(_OWORD *)(v689 + 136) = v730;
              v732 = *(_OWORD *)(v690 + 184);
              v733 = *(_OWORD *)(v690 + 200);
              v734 = *(_OWORD *)(v690 + 232);
              *(_OWORD *)(v689 + 216) = *(_OWORD *)(v690 + 216);
              *(_OWORD *)(v689 + 232) = v734;
              *(_OWORD *)(v689 + 184) = v732;
              *(_OWORD *)(v689 + 200) = v733;
LABEL_298:
              v845 = *((_QWORD *)v690 + 31);
              v846 = *((_QWORD *)v690 + 32);
              v848 = *((_QWORD *)v690 + 33);
              v847 = *((_QWORD *)v690 + 34);
              v849 = *((_QWORD *)v690 + 35);
              v850 = *((_QWORD *)v690 + 36);
              v852 = *((_QWORD *)v690 + 37);
              v851 = *((_QWORD *)v690 + 38);
              v1147 = *((_QWORD *)v690 + 39);
              v1169 = *((_QWORD *)v690 + 40);
              v1193 = *((_QWORD *)v690 + 41);
              v1223 = *((_QWORD *)v690 + 42);
              v1251 = *((_QWORD *)v690 + 43);
              v1275 = *((_QWORD *)v690 + 44);
              v1303 = *((_QWORD *)v690 + 45);
              v1331 = *((_QWORD *)v690 + 46);
              v1359 = *((_QWORD *)v690 + 47);
              v1386 = *((_QWORD *)v690 + 48);
              v1412 = *((_QWORD *)v690 + 49);
              v1438 = *((_QWORD *)v690 + 50);
              v1464 = *((_QWORD *)v690 + 51);
              v1490 = *((_QWORD *)v690 + 52);
              v853 = *((_QWORD *)v690 + 53);
              v854 = *((_QWORD *)v690 + 54);
              v1511 = v853;
              v1103 = v853;
              v855 = v847;
              v856 = v851;
              sub_1AD00FEAC(v845, v846, v848, v847, v849, v850, v852, v851, v1147, v1169, v1193, v1223, v1251, v1275, v1303, v1331, v1359, v1386, v1412,
                v1438,
                v1464,
                v1490,
                v1103,
                v854);
              v857 = *(_QWORD *)(v689 + 248);
              v858 = *(_QWORD *)(v689 + 256);
              v859 = v689 + 248;
              v860 = *(_QWORD *)(v859 + 16);
              v861 = *(_QWORD *)(v859 + 24);
              *(_QWORD *)v859 = v845;
              *(_QWORD *)(v859 + 8) = v846;
              v862 = *(_QWORD *)(v859 + 32);
              v863 = *(_QWORD *)(v859 + 40);
              *(_QWORD *)(v859 + 16) = v848;
              *(_QWORD *)(v859 + 24) = v855;
              v864 = *(_QWORD *)(v859 + 48);
              v865 = *(_QWORD *)(v859 + 56);
              *(_QWORD *)(v859 + 32) = v849;
              *(_QWORD *)(v859 + 40) = v850;
              *(_QWORD *)(v859 + 48) = v852;
              *(_QWORD *)(v859 + 56) = v856;
              v866 = *(_OWORD *)(v859 + 64);
              v867 = *(_OWORD *)(v859 + 80);
              v868 = *(_OWORD *)(v859 + 96);
              v869 = *(_OWORD *)(v859 + 112);
              v870 = *(_OWORD *)(v859 + 128);
              v871 = *(_OWORD *)(v859 + 144);
              v872 = *(_OWORD *)(v859 + 160);
              *(_QWORD *)(v859 + 64) = v1147;
              *(_QWORD *)(v859 + 72) = v1169;
              v873 = *(_QWORD *)(v859 + 176);
              v874 = *(_QWORD *)(v859 + 184);
              *(_QWORD *)(v859 + 80) = v1193;
              *(_QWORD *)(v859 + 88) = v1223;
              *(_QWORD *)(v859 + 96) = v1251;
              *(_QWORD *)(v859 + 104) = v1275;
              *(_QWORD *)(v859 + 112) = v1303;
              *(_QWORD *)(v859 + 120) = v1331;
              *(_QWORD *)(v859 + 128) = v1359;
              *(_QWORD *)(v859 + 136) = v1386;
              *(_QWORD *)(v859 + 144) = v1412;
              *(_QWORD *)(v859 + 152) = v1438;
              *(_QWORD *)(v859 + 160) = v1464;
              *(_QWORD *)(v859 + 168) = v1490;
              *(_QWORD *)(v859 + 176) = v1511;
              *(_QWORD *)(v859 + 184) = v854;
              sub_1AD00E8B0(v857, v858, v860, v861, v862, v863, v864, v865, v866, *((uint64_t *)&v866 + 1), v867, *((uint64_t *)&v867 + 1), v868, *((uint64_t *)&v868 + 1), v869, *((uint64_t *)&v869 + 1), v870, *((unint64_t *)&v870 + 1), v871,
                *((uint64_t *)&v871 + 1),
                v872,
                *((uint64_t *)&v872 + 1),
                v873,
                v874);
LABEL_299:
              v190 = (uint64_t)v1532;
              v192 = v1540;
              v191 = v1524;
LABEL_300:
              v875 = v192[7];
              v876 = (_QWORD *)(v190 + v875);
              v877 = &v191[v875];
              v878 = *(_QWORD *)&v191[v875 + 8];
              *v876 = *(_QWORD *)&v191[v875];
              v876[1] = v878;
              swift_retain();
              swift_release();
              v879 = *((_QWORD *)v877 + 3);
              if (v876[3] == 1)
              {
                if (v879 != 1)
                {
                  v876[2] = *((_QWORD *)v877 + 2);
                  v876[3] = *((_QWORD *)v877 + 3);
                  swift_bridgeObjectRetain();
                  goto LABEL_307;
                }
              }
              else
              {
                if (v879 != 1)
                {
                  v876[2] = *((_QWORD *)v877 + 2);
                  v876[3] = *((_QWORD *)v877 + 3);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
LABEL_307:
                  v4 = v1542;
                  v880 = v192[8];
                  v881 = v190 + v880;
                  v882 = &v191[v880];
                  v886 = *(_QWORD *)&v191[v880 + 272] >> 1 == 0xFFFFFFFFLL
                      && (*((_QWORD *)v882 + 38) | *((_QWORD *)v882 + 36)) < 2uLL
                      && (*(_QWORD *)&v191[v880 + 352] & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v882 + 40) & 0xFFFFFFFFFFFF00FELL) == 0
                      && (*((_QWORD *)v882 + 48) | *((_QWORD *)v882 + 46)) < 2uLL;
                  if (*(_QWORD *)(v190 + v880 + 272) >> 1 == 0xFFFFFFFFLL
                    && (*(_QWORD *)(v881 + 304) | *(_QWORD *)(v881 + 288)) <= 1
                    && !(*(_QWORD *)(v881 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v881 + 320) & 0xFFFFFFFFFFFF00FELL)
                    && (*(_QWORD *)(v881 + 384) | *(_QWORD *)(v881 + 368)) < 2)
                  {
                    if (!v886)
                    {
                      v887 = *((_QWORD *)v882 + 3);
                      if (v887)
                      {
                        *(_QWORD *)(v881 + 24) = v887;
                        *(_QWORD *)(v881 + 32) = *((_QWORD *)v882 + 4);
                        (**(void (***)(uint64_t, char *))(v887 - 8))(v881, v882);
                        v888 = *((_QWORD *)v882 + 5);
                        *(_BYTE *)(v881 + 48) = v882[48];
                        *(_QWORD *)(v881 + 40) = v888;
                        v889 = *((_QWORD *)v882 + 10);
                        v890 = *((_QWORD *)v882 + 12);
                        v891 = *((_QWORD *)v882 + 14);
                        v892 = *((_QWORD *)v882 + 22);
                        v893 = *((_QWORD *)v882 + 24);
                        if (v889 >> 1 != 0xFFFFFFFF
                          || (v891 | (unint64_t)v890) > 1
                          || *((_QWORD *)v882 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v882 + 16) & 0xFFFFFFFFFFFF00FELL
                          || (v893 | v892) >= 2)
                        {
                          v955 = *((_QWORD *)v882 + 7);
                          v954 = *((_QWORD *)v882 + 8);
                          v1148 = *((_QWORD *)v882 + 15);
                          v1252 = *((_QWORD *)v882 + 17);
                          v1276 = *((_QWORD *)v882 + 18);
                          v1304 = *((_QWORD *)v882 + 19);
                          v1332 = *((_QWORD *)v882 + 21);
                          v1360 = *((_QWORD *)v882 + 23);
                          v1387 = *((_QWORD *)v882 + 25);
                          v1413 = *((_QWORD *)v882 + 26);
                          v1439 = *((_QWORD *)v882 + 27);
                          v1465 = *((_QWORD *)v882 + 28);
                          v1491 = *((_QWORD *)v882 + 29);
                          v1512 = *((_QWORD *)v882 + 30);
                          v1128 = *((_QWORD *)v882 + 16);
                          v956 = *((_QWORD *)v882 + 9);
                          v1170 = *((_QWORD *)v882 + 20);
                          v1194 = *((_QWORD *)v882 + 24);
                          v957 = *((_QWORD *)v882 + 11);
                          v1224 = *((_QWORD *)v882 + 22);
                          v958 = *((_QWORD *)v882 + 13);
                          sub_1AD00FEAC(v955, v954, v956, v889, v957, v890, v958, v891, v1148, v1128, v1252, v1276, v1304, v1170, v1332, v892, v1360, v893, v1387,
                            v1413,
                            v1439,
                            v1465,
                            v1491,
                            v1512);
                          *(_QWORD *)(v881 + 56) = v955;
                          *(_QWORD *)(v881 + 64) = v954;
                          *(_QWORD *)(v881 + 72) = v956;
                          *(_QWORD *)(v881 + 80) = v889;
                          *(_QWORD *)(v881 + 88) = v957;
                          *(_QWORD *)(v881 + 96) = v890;
                          *(_QWORD *)(v881 + 104) = v958;
                          *(_QWORD *)(v881 + 112) = v891;
                          *(_QWORD *)(v881 + 120) = v1148;
                          *(_QWORD *)(v881 + 128) = v1128;
                          *(_QWORD *)(v881 + 136) = v1252;
                          *(_QWORD *)(v881 + 144) = v1276;
                          *(_QWORD *)(v881 + 152) = v1304;
                          *(_QWORD *)(v881 + 160) = v1170;
                          *(_QWORD *)(v881 + 168) = v1332;
                          *(_QWORD *)(v881 + 176) = v1224;
                          *(_QWORD *)(v881 + 184) = v1360;
                          *(_QWORD *)(v881 + 192) = v1194;
                          *(_QWORD *)(v881 + 200) = v1387;
                          *(_QWORD *)(v881 + 208) = v1413;
                          *(_QWORD *)(v881 + 216) = v1439;
                          *(_QWORD *)(v881 + 224) = v1465;
                          *(_QWORD *)(v881 + 232) = v1491;
                          *(_QWORD *)(v881 + 240) = v1512;
                        }
                        else
                        {
                          v894 = *(_OWORD *)(v882 + 56);
                          v895 = *(_OWORD *)(v882 + 72);
                          v896 = *(_OWORD *)(v882 + 104);
                          *(_OWORD *)(v881 + 88) = *(_OWORD *)(v882 + 88);
                          *(_OWORD *)(v881 + 104) = v896;
                          *(_OWORD *)(v881 + 56) = v894;
                          *(_OWORD *)(v881 + 72) = v895;
                          v897 = *(_OWORD *)(v882 + 120);
                          v898 = *(_OWORD *)(v882 + 136);
                          v899 = *(_OWORD *)(v882 + 168);
                          *(_OWORD *)(v881 + 152) = *(_OWORD *)(v882 + 152);
                          *(_OWORD *)(v881 + 168) = v899;
                          *(_OWORD *)(v881 + 120) = v897;
                          *(_OWORD *)(v881 + 136) = v898;
                          v900 = *(_OWORD *)(v882 + 184);
                          v901 = *(_OWORD *)(v882 + 200);
                          v902 = *(_OWORD *)(v882 + 232);
                          *(_OWORD *)(v881 + 216) = *(_OWORD *)(v882 + 216);
                          *(_OWORD *)(v881 + 232) = v902;
                          *(_OWORD *)(v881 + 184) = v900;
                          *(_OWORD *)(v881 + 200) = v901;
                        }
                      }
                      else
                      {
                        v927 = *(_OWORD *)v882;
                        v928 = *((_OWORD *)v882 + 1);
                        v929 = *((_OWORD *)v882 + 3);
                        *(_OWORD *)(v881 + 32) = *((_OWORD *)v882 + 2);
                        *(_OWORD *)(v881 + 48) = v929;
                        *(_OWORD *)v881 = v927;
                        *(_OWORD *)(v881 + 16) = v928;
                        v930 = *((_OWORD *)v882 + 4);
                        v931 = *((_OWORD *)v882 + 5);
                        v932 = *((_OWORD *)v882 + 7);
                        *(_OWORD *)(v881 + 96) = *((_OWORD *)v882 + 6);
                        *(_OWORD *)(v881 + 112) = v932;
                        *(_OWORD *)(v881 + 64) = v930;
                        *(_OWORD *)(v881 + 80) = v931;
                        v933 = *((_OWORD *)v882 + 8);
                        v934 = *((_OWORD *)v882 + 9);
                        v935 = *((_OWORD *)v882 + 11);
                        *(_OWORD *)(v881 + 160) = *((_OWORD *)v882 + 10);
                        *(_OWORD *)(v881 + 176) = v935;
                        *(_OWORD *)(v881 + 128) = v933;
                        *(_OWORD *)(v881 + 144) = v934;
                        v936 = *((_OWORD *)v882 + 12);
                        v937 = *((_OWORD *)v882 + 13);
                        v938 = *((_OWORD *)v882 + 14);
                        *(_QWORD *)(v881 + 240) = *((_QWORD *)v882 + 30);
                        *(_OWORD *)(v881 + 208) = v937;
                        *(_OWORD *)(v881 + 224) = v938;
                        *(_OWORD *)(v881 + 192) = v936;
                      }
                      v959 = *((_QWORD *)v882 + 31);
                      v960 = *((_QWORD *)v882 + 32);
                      v962 = *((_QWORD *)v882 + 33);
                      v961 = *((_QWORD *)v882 + 34);
                      v963 = *((_QWORD *)v882 + 35);
                      v964 = *((_QWORD *)v882 + 36);
                      v965 = *((_QWORD *)v882 + 37);
                      v966 = *((_QWORD *)v882 + 38);
                      v1149 = *((_QWORD *)v882 + 40);
                      v1171 = *((_QWORD *)v882 + 41);
                      v1195 = *((_QWORD *)v882 + 42);
                      v1225 = *((_QWORD *)v882 + 43);
                      v1253 = *((_QWORD *)v882 + 44);
                      v1277 = *((_QWORD *)v882 + 45);
                      v1305 = *((_QWORD *)v882 + 46);
                      v1333 = *((_QWORD *)v882 + 47);
                      v1361 = *((_QWORD *)v882 + 48);
                      v1388 = *((_QWORD *)v882 + 49);
                      v1414 = *((_QWORD *)v882 + 50);
                      v1440 = *((_QWORD *)v882 + 51);
                      v1466 = *((_QWORD *)v882 + 52);
                      v1492 = *((_QWORD *)v882 + 53);
                      v1513 = *((_QWORD *)v882 + 54);
                      v967 = *((_QWORD *)v882 + 39);
                      v968 = v959;
                      v969 = v961;
                      v970 = v963;
                      v971 = v964;
                      v972 = v965;
                      v973 = v966;
                      sub_1AD00FEAC(v959, v960, v962, v961, v963, v964, v965, v966, v967, v1149, v1171, v1195, v1225, v1253, v1277, v1305, v1333, v1361, v1388,
                        v1414,
                        v1440,
                        v1466,
                        v1492,
                        v1513);
                      *(_QWORD *)(v881 + 248) = v968;
                      *(_QWORD *)(v881 + 256) = v960;
                      *(_QWORD *)(v881 + 264) = v962;
                      *(_QWORD *)(v881 + 272) = v969;
                      *(_QWORD *)(v881 + 280) = v970;
                      *(_QWORD *)(v881 + 288) = v971;
                      *(_QWORD *)(v881 + 296) = v972;
                      *(_QWORD *)(v881 + 304) = v973;
                      *(_QWORD *)(v881 + 312) = v967;
                      *(_QWORD *)(v881 + 320) = v1149;
                      *(_QWORD *)(v881 + 328) = v1171;
                      *(_QWORD *)(v881 + 336) = v1195;
                      *(_QWORD *)(v881 + 344) = v1225;
                      *(_QWORD *)(v881 + 352) = v1253;
                      *(_QWORD *)(v881 + 360) = v1277;
                      *(_QWORD *)(v881 + 368) = v1305;
                      *(_QWORD *)(v881 + 376) = v1333;
                      *(_QWORD *)(v881 + 384) = v1361;
                      *(_QWORD *)(v881 + 392) = v1388;
                      *(_QWORD *)(v881 + 400) = v1414;
                      *(_QWORD *)(v881 + 408) = v1440;
                      *(_QWORD *)(v881 + 416) = v1466;
                      *(_QWORD *)(v881 + 424) = v1492;
                      *(_QWORD *)(v881 + 432) = v1513;
                      goto LABEL_371;
                    }
LABEL_332:
                    memcpy((void *)v881, v882, 0x1B8uLL);
                    v5 = v1201;
                    a3 = v1541;
                    goto LABEL_372;
                  }
                  if (v886)
                  {
                    sub_1AD406748((_QWORD *)v881);
                    goto LABEL_332;
                  }
                  v903 = *((_QWORD *)v882 + 3);
                  if (*(_QWORD *)(v881 + 24))
                  {
                    if (!v903)
                    {
                      sub_1AD046A30((_QWORD *)v881);
                      v974 = *((_OWORD *)v882 + 3);
                      v976 = *(_OWORD *)v882;
                      v975 = *((_OWORD *)v882 + 1);
                      *(_OWORD *)(v881 + 32) = *((_OWORD *)v882 + 2);
                      *(_OWORD *)(v881 + 48) = v974;
                      *(_OWORD *)v881 = v976;
                      *(_OWORD *)(v881 + 16) = v975;
                      v977 = *((_OWORD *)v882 + 7);
                      v979 = *((_OWORD *)v882 + 4);
                      v978 = *((_OWORD *)v882 + 5);
                      *(_OWORD *)(v881 + 96) = *((_OWORD *)v882 + 6);
                      *(_OWORD *)(v881 + 112) = v977;
                      *(_OWORD *)(v881 + 64) = v979;
                      *(_OWORD *)(v881 + 80) = v978;
                      v980 = *((_OWORD *)v882 + 11);
                      v982 = *((_OWORD *)v882 + 8);
                      v981 = *((_OWORD *)v882 + 9);
                      *(_OWORD *)(v881 + 160) = *((_OWORD *)v882 + 10);
                      *(_OWORD *)(v881 + 176) = v980;
                      *(_OWORD *)(v881 + 128) = v982;
                      *(_OWORD *)(v881 + 144) = v981;
                      v984 = *((_OWORD *)v882 + 13);
                      v983 = *((_OWORD *)v882 + 14);
                      v985 = *((_OWORD *)v882 + 12);
                      *(_QWORD *)(v881 + 240) = *((_QWORD *)v882 + 30);
                      *(_OWORD *)(v881 + 208) = v984;
                      *(_OWORD *)(v881 + 224) = v983;
                      *(_OWORD *)(v881 + 192) = v985;
                      goto LABEL_370;
                    }
                    __swift_assign_boxed_opaque_existential_1((uint64_t *)v881, (uint64_t *)v882);
                    v904 = *((_QWORD *)v882 + 5);
                    *(_BYTE *)(v881 + 48) = v882[48];
                    *(_QWORD *)(v881 + 40) = v904;
                    v905 = (_OWORD *)(v881 + 56);
                    v906 = (__int128 *)(v882 + 56);
                    v907 = *((_QWORD *)v882 + 10);
                    v908 = *((_QWORD *)v882 + 12);
                    v909 = *((_QWORD *)v882 + 14);
                    v910 = *((_QWORD *)v882 + 16);
                    v911 = *((_QWORD *)v882 + 20);
                    v912 = *((_QWORD *)v882 + 22);
                    v913 = *((_QWORD *)v882 + 24);
                    v917 = v907 >> 1 == 0xFFFFFFFF
                        && (v909 | (unint64_t)v908) < 2
                        && (v911 & 0xFFFFFFFFFFFFFEFELL | v910 & 0xFFFFFFFFFFFF00FELL) == 0
                        && (v913 | v912) < 2;
                    if (*(_QWORD *)(v881 + 80) >> 1 != 0xFFFFFFFFLL
                      || (*(_QWORD *)(v881 + 112) | *(_QWORD *)(v881 + 96)) > 1
                      || *(_QWORD *)(v881 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v881 + 128) & 0xFFFFFFFFFFFF00FELL
                      || (*(_QWORD *)(v881 + 192) | *(_QWORD *)(v881 + 176)) >= 2)
                    {
                      if (v917)
                      {
                        sub_1AD148B34(v881 + 56);
                        v986 = *(_OWORD *)(v882 + 104);
                        v988 = *v906;
                        v987 = *(_OWORD *)(v882 + 72);
                        *(_OWORD *)(v881 + 88) = *(_OWORD *)(v882 + 88);
                        *(_OWORD *)(v881 + 104) = v986;
                        *v905 = v988;
                        *(_OWORD *)(v881 + 72) = v987;
                        v989 = *(_OWORD *)(v882 + 168);
                        v991 = *(_OWORD *)(v882 + 120);
                        v990 = *(_OWORD *)(v882 + 136);
                        *(_OWORD *)(v881 + 152) = *(_OWORD *)(v882 + 152);
                        *(_OWORD *)(v881 + 168) = v989;
                        *(_OWORD *)(v881 + 120) = v991;
                        *(_OWORD *)(v881 + 136) = v990;
                        v992 = *(_OWORD *)(v882 + 232);
                        v994 = *(_OWORD *)(v882 + 184);
                        v993 = *(_OWORD *)(v882 + 200);
                        *(_OWORD *)(v881 + 216) = *(_OWORD *)(v882 + 216);
                        *(_OWORD *)(v881 + 232) = v992;
                        *(_OWORD *)(v881 + 184) = v994;
                        *(_OWORD *)(v881 + 200) = v993;
                      }
                      else
                      {
                        v1018 = *((_QWORD *)v882 + 8);
                        v1131 = *((_QWORD *)v882 + 9);
                        v1152 = *((_QWORD *)v882 + 11);
                        v1174 = *((_QWORD *)v882 + 13);
                        v1198 = *((_QWORD *)v882 + 15);
                        v1256 = *((_QWORD *)v882 + 17);
                        v1280 = *((_QWORD *)v882 + 18);
                        v1308 = *((_QWORD *)v882 + 19);
                        v1336 = *((_QWORD *)v882 + 21);
                        v1364 = *((_QWORD *)v882 + 23);
                        v1390 = *((_QWORD *)v882 + 25);
                        v1416 = *((_QWORD *)v882 + 26);
                        v1442 = *((_QWORD *)v882 + 27);
                        v1468 = *((_QWORD *)v882 + 28);
                        v1494 = *((_QWORD *)v882 + 29);
                        v1515 = *((_QWORD *)v882 + 30);
                        v1019 = *((_QWORD *)v882 + 7);
                        v1020 = *((_QWORD *)v882 + 12);
                        v1228 = *((_QWORD *)v882 + 24);
                        sub_1AD00FEAC(v1019, v1018, v1131, v907, v1152, v908, v1174, v909, v1198, v910, v1256, v1280, v1308, v911, v1336, v912, v1364, v913, v1390,
                          v1416,
                          v1442,
                          v1468,
                          v1494,
                          v1515);
                        v1021 = *(_QWORD *)(v881 + 56);
                        v1022 = *(_QWORD *)(v881 + 64);
                        *(_QWORD *)(v881 + 56) = v1019;
                        *(_QWORD *)(v881 + 64) = v1018;
                        v1023 = *(_QWORD *)(v881 + 72);
                        v1024 = *(_QWORD *)(v881 + 80);
                        *(_QWORD *)(v881 + 72) = v1131;
                        *(_QWORD *)(v881 + 80) = v907;
                        v1025 = *(_QWORD *)(v881 + 88);
                        v1026 = *(_QWORD *)(v881 + 96);
                        *(_QWORD *)(v881 + 88) = v1152;
                        *(_QWORD *)(v881 + 96) = v1020;
                        v1027 = *(_QWORD *)(v881 + 104);
                        v1028 = *(_QWORD *)(v881 + 112);
                        *(_QWORD *)(v881 + 104) = v1174;
                        *(_QWORD *)(v881 + 112) = v909;
                        v1029 = *(_OWORD *)(v881 + 120);
                        *(_QWORD *)(v881 + 120) = v1198;
                        *(_QWORD *)(v881 + 128) = v910;
                        v1030 = *(_OWORD *)(v881 + 136);
                        *(_QWORD *)(v881 + 136) = v1256;
                        *(_QWORD *)(v881 + 144) = v1280;
                        v1031 = *(_OWORD *)(v881 + 152);
                        *(_QWORD *)(v881 + 152) = v1308;
                        *(_QWORD *)(v881 + 160) = v911;
                        v1032 = *(_OWORD *)(v881 + 168);
                        *(_QWORD *)(v881 + 168) = v1336;
                        *(_QWORD *)(v881 + 176) = v912;
                        v1033 = *(_OWORD *)(v881 + 184);
                        *(_QWORD *)(v881 + 184) = v1364;
                        *(_QWORD *)(v881 + 192) = v1228;
                        v1034 = *(_OWORD *)(v881 + 200);
                        *(_QWORD *)(v881 + 200) = v1390;
                        *(_QWORD *)(v881 + 208) = v1416;
                        v1035 = *(_OWORD *)(v881 + 216);
                        *(_QWORD *)(v881 + 216) = v1442;
                        *(_QWORD *)(v881 + 224) = v1468;
                        v1036 = *(_QWORD *)(v881 + 232);
                        v1037 = *(_QWORD *)(v881 + 240);
                        *(_QWORD *)(v881 + 232) = v1494;
                        *(_QWORD *)(v881 + 240) = v1515;
                        sub_1AD00E8B0(v1021, v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029, *((uint64_t *)&v1029 + 1), v1030, *((uint64_t *)&v1030 + 1), v1031, *((uint64_t *)&v1031 + 1), v1032, *((uint64_t *)&v1032 + 1), v1033, *((unint64_t *)&v1033 + 1), v1034,
                          *((uint64_t *)&v1034 + 1),
                          v1035,
                          *((uint64_t *)&v1035 + 1),
                          v1036,
                          v1037);
                      }
                      goto LABEL_370;
                    }
                    if (v917)
                    {
                      v918 = *v906;
                      v919 = *(_OWORD *)(v882 + 72);
                      v920 = *(_OWORD *)(v882 + 104);
                      *(_OWORD *)(v881 + 88) = *(_OWORD *)(v882 + 88);
                      *(_OWORD *)(v881 + 104) = v920;
                      *v905 = v918;
                      *(_OWORD *)(v881 + 72) = v919;
                      v921 = *(_OWORD *)(v882 + 120);
                      v922 = *(_OWORD *)(v882 + 136);
                      v923 = *(_OWORD *)(v882 + 168);
                      *(_OWORD *)(v881 + 152) = *(_OWORD *)(v882 + 152);
                      *(_OWORD *)(v881 + 168) = v923;
                      *(_OWORD *)(v881 + 120) = v921;
                      *(_OWORD *)(v881 + 136) = v922;
                      v924 = *(_OWORD *)(v882 + 184);
                      v925 = *(_OWORD *)(v882 + 200);
                      v926 = *(_OWORD *)(v882 + 232);
                      *(_OWORD *)(v881 + 216) = *(_OWORD *)(v882 + 216);
                      *(_OWORD *)(v881 + 232) = v926;
                      *(_OWORD *)(v881 + 184) = v924;
                      *(_OWORD *)(v881 + 200) = v925;
LABEL_370:
                      v1038 = *((_QWORD *)v882 + 31);
                      v1039 = *((_QWORD *)v882 + 32);
                      v1041 = *((_QWORD *)v882 + 33);
                      v1040 = *((_QWORD *)v882 + 34);
                      v1042 = *((_QWORD *)v882 + 35);
                      v1043 = *((_QWORD *)v882 + 36);
                      v1045 = *((_QWORD *)v882 + 37);
                      v1044 = *((_QWORD *)v882 + 38);
                      v1153 = *((_QWORD *)v882 + 39);
                      v1175 = *((_QWORD *)v882 + 40);
                      v1199 = *((_QWORD *)v882 + 41);
                      v1229 = *((_QWORD *)v882 + 42);
                      v1257 = *((_QWORD *)v882 + 43);
                      v1281 = *((_QWORD *)v882 + 44);
                      v1309 = *((_QWORD *)v882 + 45);
                      v1337 = *((_QWORD *)v882 + 46);
                      v1365 = *((_QWORD *)v882 + 47);
                      v1391 = *((_QWORD *)v882 + 48);
                      v1417 = *((_QWORD *)v882 + 49);
                      v1443 = *((_QWORD *)v882 + 50);
                      v1469 = *((_QWORD *)v882 + 51);
                      v1495 = *((_QWORD *)v882 + 52);
                      v1046 = *((_QWORD *)v882 + 53);
                      v1047 = *((_QWORD *)v882 + 54);
                      v1516 = v1046;
                      v1104 = v1046;
                      v1048 = v1040;
                      v1049 = v1044;
                      sub_1AD00FEAC(v1038, v1039, v1041, v1040, v1042, v1043, v1045, v1044, v1153, v1175, v1199, v1229, v1257, v1281, v1309, v1337, v1365, v1391, v1417,
                        v1443,
                        v1469,
                        v1495,
                        v1104,
                        v1047);
                      v1050 = *(_QWORD *)(v881 + 248);
                      v1051 = *(_QWORD *)(v881 + 256);
                      v1052 = v881 + 248;
                      v1053 = *(_QWORD *)(v1052 + 16);
                      v1054 = *(_QWORD *)(v1052 + 24);
                      *(_QWORD *)v1052 = v1038;
                      *(_QWORD *)(v1052 + 8) = v1039;
                      v1055 = *(_QWORD *)(v1052 + 32);
                      v1056 = *(_QWORD *)(v1052 + 40);
                      *(_QWORD *)(v1052 + 16) = v1041;
                      *(_QWORD *)(v1052 + 24) = v1048;
                      v1057 = *(_QWORD *)(v1052 + 48);
                      v1058 = *(_QWORD *)(v1052 + 56);
                      *(_QWORD *)(v1052 + 32) = v1042;
                      *(_QWORD *)(v1052 + 40) = v1043;
                      *(_QWORD *)(v1052 + 48) = v1045;
                      *(_QWORD *)(v1052 + 56) = v1049;
                      v1059 = *(_OWORD *)(v1052 + 64);
                      v1060 = *(_OWORD *)(v1052 + 80);
                      v1061 = *(_OWORD *)(v1052 + 96);
                      v1062 = *(_OWORD *)(v1052 + 112);
                      v1063 = *(_OWORD *)(v1052 + 128);
                      v1064 = *(_OWORD *)(v1052 + 144);
                      v1065 = *(_OWORD *)(v1052 + 160);
                      *(_QWORD *)(v1052 + 64) = v1153;
                      *(_QWORD *)(v1052 + 72) = v1175;
                      v1066 = *(_QWORD *)(v1052 + 176);
                      v1067 = *(_QWORD *)(v1052 + 184);
                      *(_QWORD *)(v1052 + 80) = v1199;
                      *(_QWORD *)(v1052 + 88) = v1229;
                      *(_QWORD *)(v1052 + 96) = v1257;
                      *(_QWORD *)(v1052 + 104) = v1281;
                      *(_QWORD *)(v1052 + 112) = v1309;
                      *(_QWORD *)(v1052 + 120) = v1337;
                      *(_QWORD *)(v1052 + 128) = v1365;
                      *(_QWORD *)(v1052 + 136) = v1391;
                      *(_QWORD *)(v1052 + 144) = v1417;
                      *(_QWORD *)(v1052 + 152) = v1443;
                      *(_QWORD *)(v1052 + 160) = v1469;
                      *(_QWORD *)(v1052 + 168) = v1495;
                      *(_QWORD *)(v1052 + 176) = v1516;
                      *(_QWORD *)(v1052 + 184) = v1047;
                      sub_1AD00E8B0(v1050, v1051, v1053, v1054, v1055, v1056, v1057, v1058, v1059, *((uint64_t *)&v1059 + 1), v1060, *((uint64_t *)&v1060 + 1), v1061, *((uint64_t *)&v1061 + 1), v1062, *((uint64_t *)&v1062 + 1), v1063, *((unint64_t *)&v1063 + 1), v1064,
                        *((uint64_t *)&v1064 + 1),
                        v1065,
                        *((uint64_t *)&v1065 + 1),
                        v1066,
                        v1067);
LABEL_371:
                      v5 = v1201;
                      a3 = v1541;
                      v4 = v1542;
                      v190 = (uint64_t)v1532;
                      v192 = v1540;
                      v191 = v1524;
LABEL_372:
                      *(_QWORD *)(v190 + v192[9]) = *(_QWORD *)&v191[v192[9]];
                      v1068 = v192[10];
                      v1069 = v190 + v1068;
                      v1070 = &v191[v1068];
                      v1071 = *(_QWORD *)&v191[v1068 + 8];
                      if (*(_QWORD *)(v1069 + 8))
                      {
                        if (v1071)
                        {
                          *(_QWORD *)v1069 = *(_QWORD *)v1070;
                          *(_QWORD *)(v1069 + 8) = *((_QWORD *)v1070 + 1);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          v1072 = *((_QWORD *)v1070 + 3);
                          *(_QWORD *)(v1069 + 16) = *((_QWORD *)v1070 + 2);
                          *(_QWORD *)(v1069 + 24) = v1072;
                          swift_retain();
                          swift_release();
                          v1073 = *((_QWORD *)v1070 + 4);
                          *(_BYTE *)(v1069 + 40) = v1070[40];
                          *(_QWORD *)(v1069 + 32) = v1073;
                          v1074 = *((_QWORD *)v1070 + 7);
                          *(_QWORD *)(v1069 + 48) = *((_QWORD *)v1070 + 6);
                          *(_QWORD *)(v1069 + 56) = v1074;
                          swift_retain();
                          swift_release();
                          v1075 = *((_QWORD *)v1070 + 8);
                          *(_BYTE *)(v1069 + 72) = v1070[72];
                          *(_QWORD *)(v1069 + 64) = v1075;
                          *(_QWORD *)(v1069 + 80) = *((_QWORD *)v1070 + 10);
                          *(_QWORD *)(v1069 + 88) = *((_QWORD *)v1070 + 11);
                          *(_QWORD *)(v1069 + 96) = *((_QWORD *)v1070 + 12);
                          *(_QWORD *)(v1069 + 104) = *((_QWORD *)v1070 + 13);
                          *(_BYTE *)(v1069 + 112) = v1070[112];
                          *(_BYTE *)(v1069 + 113) = v1070[113];
                          v1076 = *(_OWORD *)(v1070 + 120);
                          v1077 = *(_OWORD *)(v1070 + 136);
                          *(_BYTE *)(v1069 + 152) = v1070[152];
                          *(_OWORD *)(v1069 + 136) = v1077;
                          *(_OWORD *)(v1069 + 120) = v1076;
                        }
                        else
                        {
                          sub_1AD406774(v1069);
                          v1085 = *((_OWORD *)v1070 + 1);
                          *(_OWORD *)v1069 = *(_OWORD *)v1070;
                          *(_OWORD *)(v1069 + 16) = v1085;
                          v1086 = *((_OWORD *)v1070 + 5);
                          v1088 = *((_OWORD *)v1070 + 2);
                          v1087 = *((_OWORD *)v1070 + 3);
                          *(_OWORD *)(v1069 + 64) = *((_OWORD *)v1070 + 4);
                          *(_OWORD *)(v1069 + 80) = v1086;
                          *(_OWORD *)(v1069 + 32) = v1088;
                          *(_OWORD *)(v1069 + 48) = v1087;
                          v1090 = *((_OWORD *)v1070 + 7);
                          v1089 = *((_OWORD *)v1070 + 8);
                          v1091 = *((_OWORD *)v1070 + 6);
                          *(_OWORD *)(v1069 + 137) = *(_OWORD *)(v1070 + 137);
                          *(_OWORD *)(v1069 + 112) = v1090;
                          *(_OWORD *)(v1069 + 128) = v1089;
                          *(_OWORD *)(v1069 + 96) = v1091;
                        }
                      }
                      else if (v1071)
                      {
                        *(_QWORD *)v1069 = *(_QWORD *)v1070;
                        *(_QWORD *)(v1069 + 8) = *((_QWORD *)v1070 + 1);
                        v1078 = *((_QWORD *)v1070 + 3);
                        *(_QWORD *)(v1069 + 16) = *((_QWORD *)v1070 + 2);
                        *(_QWORD *)(v1069 + 24) = v1078;
                        v1079 = *((_QWORD *)v1070 + 4);
                        *(_BYTE *)(v1069 + 40) = v1070[40];
                        *(_QWORD *)(v1069 + 32) = v1079;
                        v1080 = *((_QWORD *)v1070 + 7);
                        *(_QWORD *)(v1069 + 48) = *((_QWORD *)v1070 + 6);
                        *(_QWORD *)(v1069 + 56) = v1080;
                        v1081 = *((_QWORD *)v1070 + 8);
                        *(_BYTE *)(v1069 + 72) = v1070[72];
                        *(_QWORD *)(v1069 + 64) = v1081;
                        v1082 = *((_OWORD *)v1070 + 6);
                        *(_OWORD *)(v1069 + 80) = *((_OWORD *)v1070 + 5);
                        *(_OWORD *)(v1069 + 96) = v1082;
                        *(_BYTE *)(v1069 + 112) = v1070[112];
                        *(_BYTE *)(v1069 + 113) = v1070[113];
                        v1083 = *(_OWORD *)(v1070 + 120);
                        v1084 = *(_OWORD *)(v1070 + 136);
                        *(_BYTE *)(v1069 + 152) = v1070[152];
                        *(_OWORD *)(v1069 + 136) = v1084;
                        *(_OWORD *)(v1069 + 120) = v1083;
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_retain();
                      }
                      else
                      {
                        v1092 = *((_OWORD *)v1070 + 1);
                        *(_OWORD *)v1069 = *(_OWORD *)v1070;
                        *(_OWORD *)(v1069 + 16) = v1092;
                        v1093 = *((_OWORD *)v1070 + 2);
                        v1094 = *((_OWORD *)v1070 + 3);
                        v1095 = *((_OWORD *)v1070 + 5);
                        *(_OWORD *)(v1069 + 64) = *((_OWORD *)v1070 + 4);
                        *(_OWORD *)(v1069 + 80) = v1095;
                        *(_OWORD *)(v1069 + 32) = v1093;
                        *(_OWORD *)(v1069 + 48) = v1094;
                        v1096 = *((_OWORD *)v1070 + 6);
                        v1097 = *((_OWORD *)v1070 + 7);
                        v1098 = *((_OWORD *)v1070 + 8);
                        *(_OWORD *)(v1069 + 137) = *(_OWORD *)(v1070 + 137);
                        *(_OWORD *)(v1069 + 112) = v1097;
                        *(_OWORD *)(v1069 + 128) = v1098;
                        *(_OWORD *)(v1069 + 96) = v1096;
                      }
                      goto LABEL_160;
                    }
                    v1012 = *((_QWORD *)v882 + 8);
                    v1130 = *((_QWORD *)v882 + 13);
                    v1151 = *((_QWORD *)v882 + 9);
                    v1173 = *((_QWORD *)v882 + 15);
                    v1227 = *((_QWORD *)v882 + 17);
                    v1279 = *((_QWORD *)v882 + 18);
                    v1307 = *((_QWORD *)v882 + 19);
                    v1335 = *((_QWORD *)v882 + 21);
                    v1363 = *((_QWORD *)v882 + 23);
                    v1389 = *((_QWORD *)v882 + 25);
                    v1415 = *((_QWORD *)v882 + 26);
                    v1441 = *((_QWORD *)v882 + 27);
                    v1467 = *((_QWORD *)v882 + 28);
                    v1493 = *((_QWORD *)v882 + 29);
                    v1514 = *((_QWORD *)v882 + 30);
                    v1255 = *((_QWORD *)v882 + 20);
                    v1013 = *((_QWORD *)v882 + 7);
                    v1197 = *((_QWORD *)v882 + 22);
                    v1014 = *((_QWORD *)v882 + 11);
                    v1015 = *((_QWORD *)v882 + 12);
                    v1016 = *((_QWORD *)v882 + 14);
                    v1017 = *((_QWORD *)v882 + 24);
                    sub_1AD00FEAC(v1013, v1012, v1151, v907, v1014, v908, v1130, v1016, v1173, v910, v1227, v1279, v1307, v1255, v1335, v1197, v1363, v913, v1389,
                      v1415,
                      v1441,
                      v1467,
                      v1493,
                      v1514);
                    *(_QWORD *)(v881 + 56) = v1013;
                    *(_QWORD *)(v881 + 64) = v1012;
                    *(_QWORD *)(v881 + 72) = v1151;
                    *(_QWORD *)(v881 + 80) = v907;
                    *(_QWORD *)(v881 + 88) = v1014;
                    *(_QWORD *)(v881 + 96) = v1015;
                    *(_QWORD *)(v881 + 104) = v1130;
                    *(_QWORD *)(v881 + 112) = v1016;
                    *(_QWORD *)(v881 + 120) = v1173;
                    *(_QWORD *)(v881 + 128) = v910;
                    *(_QWORD *)(v881 + 136) = v1227;
                    *(_QWORD *)(v881 + 144) = v1279;
                    *(_QWORD *)(v881 + 152) = v1307;
                    *(_QWORD *)(v881 + 160) = v1255;
                    *(_QWORD *)(v881 + 168) = v1335;
                    *(_QWORD *)(v881 + 176) = v1197;
                    *(_QWORD *)(v881 + 184) = v1363;
                    *(_QWORD *)(v881 + 192) = v1017;
                  }
                  else
                  {
                    if (!v903)
                    {
                      v995 = *(_OWORD *)v882;
                      v996 = *((_OWORD *)v882 + 1);
                      v997 = *((_OWORD *)v882 + 3);
                      *(_OWORD *)(v881 + 32) = *((_OWORD *)v882 + 2);
                      *(_OWORD *)(v881 + 48) = v997;
                      *(_OWORD *)v881 = v995;
                      *(_OWORD *)(v881 + 16) = v996;
                      v998 = *((_OWORD *)v882 + 4);
                      v999 = *((_OWORD *)v882 + 5);
                      v1000 = *((_OWORD *)v882 + 7);
                      *(_OWORD *)(v881 + 96) = *((_OWORD *)v882 + 6);
                      *(_OWORD *)(v881 + 112) = v1000;
                      *(_OWORD *)(v881 + 64) = v998;
                      *(_OWORD *)(v881 + 80) = v999;
                      v1001 = *((_OWORD *)v882 + 8);
                      v1002 = *((_OWORD *)v882 + 9);
                      v1003 = *((_OWORD *)v882 + 11);
                      *(_OWORD *)(v881 + 160) = *((_OWORD *)v882 + 10);
                      *(_OWORD *)(v881 + 176) = v1003;
                      *(_OWORD *)(v881 + 128) = v1001;
                      *(_OWORD *)(v881 + 144) = v1002;
                      v1004 = *((_OWORD *)v882 + 12);
                      v1005 = *((_OWORD *)v882 + 13);
                      v1006 = *((_OWORD *)v882 + 14);
                      *(_QWORD *)(v881 + 240) = *((_QWORD *)v882 + 30);
                      *(_OWORD *)(v881 + 208) = v1005;
                      *(_OWORD *)(v881 + 224) = v1006;
                      *(_OWORD *)(v881 + 192) = v1004;
                      goto LABEL_370;
                    }
                    *(_QWORD *)(v881 + 24) = v903;
                    *(_QWORD *)(v881 + 32) = *((_QWORD *)v882 + 4);
                    (**(void (***)(uint64_t, char *))(v903 - 8))(v881, v882);
                    v939 = *((_QWORD *)v882 + 5);
                    *(_BYTE *)(v881 + 48) = v882[48];
                    *(_QWORD *)(v881 + 40) = v939;
                    v940 = *((_QWORD *)v882 + 10);
                    v941 = *((_QWORD *)v882 + 12);
                    v942 = *((_QWORD *)v882 + 14);
                    v943 = *((_QWORD *)v882 + 22);
                    v944 = *((_QWORD *)v882 + 24);
                    if (v940 >> 1 == 0xFFFFFFFF
                      && (v942 | (unint64_t)v941) <= 1
                      && !(*((_QWORD *)v882 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v882 + 16) & 0xFFFFFFFFFFFF00FELL)
                      && (v944 | v943) < 2)
                    {
                      v945 = *(_OWORD *)(v882 + 56);
                      v946 = *(_OWORD *)(v882 + 72);
                      v947 = *(_OWORD *)(v882 + 104);
                      *(_OWORD *)(v881 + 88) = *(_OWORD *)(v882 + 88);
                      *(_OWORD *)(v881 + 104) = v947;
                      *(_OWORD *)(v881 + 56) = v945;
                      *(_OWORD *)(v881 + 72) = v946;
                      v948 = *(_OWORD *)(v882 + 120);
                      v949 = *(_OWORD *)(v882 + 136);
                      v950 = *(_OWORD *)(v882 + 168);
                      *(_OWORD *)(v881 + 152) = *(_OWORD *)(v882 + 152);
                      *(_OWORD *)(v881 + 168) = v950;
                      *(_OWORD *)(v881 + 120) = v948;
                      *(_OWORD *)(v881 + 136) = v949;
                      v951 = *(_OWORD *)(v882 + 184);
                      v952 = *(_OWORD *)(v882 + 200);
                      v953 = *(_OWORD *)(v882 + 232);
                      *(_OWORD *)(v881 + 216) = *(_OWORD *)(v882 + 216);
                      *(_OWORD *)(v881 + 232) = v953;
                      *(_OWORD *)(v881 + 184) = v951;
                      *(_OWORD *)(v881 + 200) = v952;
                      goto LABEL_370;
                    }
                    v1008 = *((_QWORD *)v882 + 7);
                    v1007 = *((_QWORD *)v882 + 8);
                    v1150 = *((_QWORD *)v882 + 15);
                    v1254 = *((_QWORD *)v882 + 17);
                    v1278 = *((_QWORD *)v882 + 18);
                    v1306 = *((_QWORD *)v882 + 19);
                    v1334 = *((_QWORD *)v882 + 21);
                    v1362 = *((_QWORD *)v882 + 23);
                    v1389 = *((_QWORD *)v882 + 25);
                    v1415 = *((_QWORD *)v882 + 26);
                    v1441 = *((_QWORD *)v882 + 27);
                    v1467 = *((_QWORD *)v882 + 28);
                    v1493 = *((_QWORD *)v882 + 29);
                    v1514 = *((_QWORD *)v882 + 30);
                    v1129 = *((_QWORD *)v882 + 16);
                    v1009 = *((_QWORD *)v882 + 9);
                    v1172 = *((_QWORD *)v882 + 20);
                    v1196 = *((_QWORD *)v882 + 24);
                    v1010 = *((_QWORD *)v882 + 11);
                    v1226 = *((_QWORD *)v882 + 22);
                    v1011 = *((_QWORD *)v882 + 13);
                    sub_1AD00FEAC(v1008, v1007, v1009, v940, v1010, v941, v1011, v942, v1150, v1129, v1254, v1278, v1306, v1172, v1334, v943, v1362, v944, v1389,
                      v1415,
                      v1441,
                      v1467,
                      v1493,
                      v1514);
                    *(_QWORD *)(v881 + 56) = v1008;
                    *(_QWORD *)(v881 + 64) = v1007;
                    *(_QWORD *)(v881 + 72) = v1009;
                    *(_QWORD *)(v881 + 80) = v940;
                    *(_QWORD *)(v881 + 88) = v1010;
                    *(_QWORD *)(v881 + 96) = v941;
                    *(_QWORD *)(v881 + 104) = v1011;
                    *(_QWORD *)(v881 + 112) = v942;
                    *(_QWORD *)(v881 + 120) = v1150;
                    *(_QWORD *)(v881 + 128) = v1129;
                    *(_QWORD *)(v881 + 136) = v1254;
                    *(_QWORD *)(v881 + 144) = v1278;
                    *(_QWORD *)(v881 + 152) = v1306;
                    *(_QWORD *)(v881 + 160) = v1172;
                    *(_QWORD *)(v881 + 168) = v1334;
                    *(_QWORD *)(v881 + 176) = v1226;
                    *(_QWORD *)(v881 + 184) = v1362;
                    *(_QWORD *)(v881 + 192) = v1196;
                  }
                  *(_QWORD *)(v881 + 200) = v1389;
                  *(_QWORD *)(v881 + 208) = v1415;
                  *(_QWORD *)(v881 + 216) = v1441;
                  *(_QWORD *)(v881 + 224) = v1467;
                  *(_QWORD *)(v881 + 232) = v1493;
                  *(_QWORD *)(v881 + 240) = v1514;
                  goto LABEL_370;
                }
                sub_1AD009758((uint64_t)(v876 + 2), &qword_1ED2E3198);
              }
              *((_OWORD *)v876 + 1) = *((_OWORD *)v877 + 1);
              goto LABEL_307;
            }
            v819 = *((_QWORD *)v690 + 8);
            v1126 = *((_QWORD *)v690 + 13);
            v1145 = *((_QWORD *)v690 + 9);
            v1167 = *((_QWORD *)v690 + 15);
            v1221 = *((_QWORD *)v690 + 17);
            v1273 = *((_QWORD *)v690 + 18);
            v1301 = *((_QWORD *)v690 + 19);
            v1329 = *((_QWORD *)v690 + 21);
            v1357 = *((_QWORD *)v690 + 23);
            v1384 = *((_QWORD *)v690 + 25);
            v1410 = *((_QWORD *)v690 + 26);
            v1436 = *((_QWORD *)v690 + 27);
            v1462 = *((_QWORD *)v690 + 28);
            v1488 = *((_QWORD *)v690 + 29);
            v1509 = *((_QWORD *)v690 + 30);
            v1249 = *((_QWORD *)v690 + 20);
            v820 = *((_QWORD *)v690 + 7);
            v1191 = *((_QWORD *)v690 + 22);
            v821 = *((_QWORD *)v690 + 11);
            v822 = *((_QWORD *)v690 + 12);
            v823 = *((_QWORD *)v690 + 14);
            v824 = *((_QWORD *)v690 + 24);
            sub_1AD00FEAC(v820, v819, v1145, v715, v821, v716, v1126, v823, v1167, v718, v1221, v1273, v1301, v1249, v1329, v1191, v1357, v721, v1384,
              v1410,
              v1436,
              v1462,
              v1488,
              v1509);
            *(_QWORD *)(v689 + 56) = v820;
            *(_QWORD *)(v689 + 64) = v819;
            *(_QWORD *)(v689 + 72) = v1145;
            *(_QWORD *)(v689 + 80) = v715;
            *(_QWORD *)(v689 + 88) = v821;
            *(_QWORD *)(v689 + 96) = v822;
            *(_QWORD *)(v689 + 104) = v1126;
            *(_QWORD *)(v689 + 112) = v823;
            *(_QWORD *)(v689 + 120) = v1167;
            *(_QWORD *)(v689 + 128) = v718;
            *(_QWORD *)(v689 + 136) = v1221;
            *(_QWORD *)(v689 + 144) = v1273;
            *(_QWORD *)(v689 + 152) = v1301;
            *(_QWORD *)(v689 + 160) = v1249;
            *(_QWORD *)(v689 + 168) = v1329;
            *(_QWORD *)(v689 + 176) = v1191;
            *(_QWORD *)(v689 + 184) = v1357;
            *(_QWORD *)(v689 + 192) = v824;
          }
          else
          {
            if (!v711)
            {
              v802 = *(_OWORD *)v690;
              v803 = *((_OWORD *)v690 + 1);
              v804 = *((_OWORD *)v690 + 3);
              *(_OWORD *)(v689 + 32) = *((_OWORD *)v690 + 2);
              *(_OWORD *)(v689 + 48) = v804;
              *(_OWORD *)v689 = v802;
              *(_OWORD *)(v689 + 16) = v803;
              v805 = *((_OWORD *)v690 + 4);
              v806 = *((_OWORD *)v690 + 5);
              v807 = *((_OWORD *)v690 + 7);
              *(_OWORD *)(v689 + 96) = *((_OWORD *)v690 + 6);
              *(_OWORD *)(v689 + 112) = v807;
              *(_OWORD *)(v689 + 64) = v805;
              *(_OWORD *)(v689 + 80) = v806;
              v808 = *((_OWORD *)v690 + 8);
              v809 = *((_OWORD *)v690 + 9);
              v810 = *((_OWORD *)v690 + 11);
              *(_OWORD *)(v689 + 160) = *((_OWORD *)v690 + 10);
              *(_OWORD *)(v689 + 176) = v810;
              *(_OWORD *)(v689 + 128) = v808;
              *(_OWORD *)(v689 + 144) = v809;
              v811 = *((_OWORD *)v690 + 12);
              v812 = *((_OWORD *)v690 + 13);
              v813 = *((_OWORD *)v690 + 14);
              *(_QWORD *)(v689 + 240) = *((_QWORD *)v690 + 30);
              *(_OWORD *)(v689 + 208) = v812;
              *(_OWORD *)(v689 + 224) = v813;
              *(_OWORD *)(v689 + 192) = v811;
              goto LABEL_298;
            }
            *(_QWORD *)(v689 + 24) = v711;
            *(_QWORD *)(v689 + 32) = *((_QWORD *)v690 + 4);
            (**(void (***)(uint64_t, char *))(v711 - 8))(v689, v690);
            v747 = *((_QWORD *)v690 + 5);
            *(_BYTE *)(v689 + 48) = v690[48];
            *(_QWORD *)(v689 + 40) = v747;
            v748 = *((_QWORD *)v690 + 10);
            v749 = *((_QWORD *)v690 + 12);
            v750 = *((_QWORD *)v690 + 14);
            v751 = *((_QWORD *)v690 + 22);
            if (v748 >> 1 == 0xFFFFFFFF
              && (v750 | (unint64_t)v749) <= 1
              && !(*((_QWORD *)v690 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v690 + 16) & 0xFFFFFFFFFFFF00FELL)
              && (*((_QWORD *)v690 + 24) | (unint64_t)v751) < 2)
            {
              v752 = *(_OWORD *)(v690 + 56);
              v753 = *(_OWORD *)(v690 + 72);
              v754 = *(_OWORD *)(v690 + 104);
              *(_OWORD *)(v689 + 88) = *(_OWORD *)(v690 + 88);
              *(_OWORD *)(v689 + 104) = v754;
              *(_OWORD *)(v689 + 56) = v752;
              *(_OWORD *)(v689 + 72) = v753;
              v755 = *(_OWORD *)(v690 + 120);
              v756 = *(_OWORD *)(v690 + 136);
              v757 = *(_OWORD *)(v690 + 168);
              *(_OWORD *)(v689 + 152) = *(_OWORD *)(v690 + 152);
              *(_OWORD *)(v689 + 168) = v757;
              *(_OWORD *)(v689 + 120) = v755;
              *(_OWORD *)(v689 + 136) = v756;
              v758 = *(_OWORD *)(v690 + 184);
              v759 = *(_OWORD *)(v690 + 200);
              v760 = *(_OWORD *)(v690 + 232);
              *(_OWORD *)(v689 + 216) = *(_OWORD *)(v690 + 216);
              *(_OWORD *)(v689 + 232) = v760;
              *(_OWORD *)(v689 + 184) = v758;
              *(_OWORD *)(v689 + 200) = v759;
              goto LABEL_298;
            }
            v814 = *((_QWORD *)v690 + 7);
            v815 = *((_QWORD *)v690 + 8);
            v1166 = *((_QWORD *)v690 + 15);
            v1220 = *((_QWORD *)v690 + 17);
            v1248 = *((_QWORD *)v690 + 18);
            v1300 = *((_QWORD *)v690 + 19);
            v1328 = *((_QWORD *)v690 + 21);
            v1356 = *((_QWORD *)v690 + 23);
            v1384 = *((_QWORD *)v690 + 25);
            v1410 = *((_QWORD *)v690 + 26);
            v1436 = *((_QWORD *)v690 + 27);
            v1462 = *((_QWORD *)v690 + 28);
            v1488 = *((_QWORD *)v690 + 29);
            v1509 = *((_QWORD *)v690 + 30);
            v1272 = *((_QWORD *)v690 + 24);
            v1125 = *((_QWORD *)v690 + 20);
            v1144 = *((_QWORD *)v690 + 16);
            v816 = *((_QWORD *)v690 + 9);
            v817 = *((_QWORD *)v690 + 11);
            v1190 = *((_QWORD *)v690 + 22);
            v818 = *((_QWORD *)v690 + 13);
            sub_1AD00FEAC(v814, v815, v816, v748, v817, v749, v818, v750, v1166, v1144, v1220, v1248, v1300, v1125, v1328, v751, v1356, v1272, v1384,
              v1410,
              v1436,
              v1462,
              v1488,
              v1509);
            *(_QWORD *)(v689 + 56) = v814;
            *(_QWORD *)(v689 + 64) = v815;
            *(_QWORD *)(v689 + 72) = v816;
            *(_QWORD *)(v689 + 80) = v748;
            *(_QWORD *)(v689 + 88) = v817;
            *(_QWORD *)(v689 + 96) = v749;
            *(_QWORD *)(v689 + 104) = v818;
            *(_QWORD *)(v689 + 112) = v750;
            *(_QWORD *)(v689 + 120) = v1166;
            *(_QWORD *)(v689 + 128) = v1144;
            *(_QWORD *)(v689 + 136) = v1220;
            *(_QWORD *)(v689 + 144) = v1248;
            *(_QWORD *)(v689 + 152) = v1300;
            *(_QWORD *)(v689 + 160) = v1125;
            *(_QWORD *)(v689 + 168) = v1328;
            *(_QWORD *)(v689 + 176) = v1190;
            *(_QWORD *)(v689 + 184) = v1356;
            *(_QWORD *)(v689 + 192) = v1272;
          }
          *(_QWORD *)(v689 + 200) = v1384;
          *(_QWORD *)(v689 + 208) = v1410;
          *(_QWORD *)(v689 + 216) = v1436;
          *(_QWORD *)(v689 + 224) = v1462;
          *(_QWORD *)(v689 + 232) = v1488;
          *(_QWORD *)(v689 + 240) = v1509;
          goto LABEL_298;
        }
        sub_1AD009758((uint64_t)(v684 + 2), &qword_1ED2E3198);
      }
      *((_OWORD *)v684 + 1) = *((_OWORD *)v685 + 1);
      goto LABEL_235;
    }
    v263 = *(_OWORD *)v191;
    *(_BYTE *)(v190 + 16) = v191[16];
    *(_OWORD *)v190 = v263;
    *(_BYTE *)(v190 + 17) = v191[17];
    *(_BYTE *)(v190 + 18) = v191[18];
    v264 = (__int128 *)(v190 + 24);
    v265 = (__int128 *)(v191 + 24);
    v266 = *((_QWORD *)v191 + 9);
    if (*(_QWORD *)(v190 + 72) == 1)
    {
      if (v266 == 1)
      {
        v267 = *v265;
        v268 = *(_OWORD *)(v191 + 40);
        v269 = *(_OWORD *)(v191 + 56);
        *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
        *(_OWORD *)(v190 + 40) = v268;
        *(_OWORD *)(v190 + 56) = v269;
        *v264 = v267;
      }
      else
      {
        v589 = *(_OWORD *)(v191 + 40);
        *v264 = *v265;
        *(_OWORD *)(v190 + 40) = v589;
        *(_BYTE *)(v190 + 56) = v191[56];
        *(_QWORD *)(v190 + 64) = *((_QWORD *)v191 + 8);
        *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
        swift_bridgeObjectRetain();
      }
    }
    else if (v266 == 1)
    {
      sub_1AD3AD280(v190 + 24);
      v550 = *(_OWORD *)(v191 + 40);
      v549 = *(_OWORD *)(v191 + 56);
      v551 = *v265;
      *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
      *(_OWORD *)(v190 + 40) = v550;
      *(_OWORD *)(v190 + 56) = v549;
      *v264 = v551;
    }
    else
    {
      *(_QWORD *)(v190 + 24) = *((_QWORD *)v191 + 3);
      *(_QWORD *)(v190 + 32) = *((_QWORD *)v191 + 4);
      *(_QWORD *)(v190 + 40) = *((_QWORD *)v191 + 5);
      *(_QWORD *)(v190 + 48) = *((_QWORD *)v191 + 6);
      *(_BYTE *)(v190 + 56) = v191[56];
      *(_QWORD *)(v190 + 64) = *((_QWORD *)v191 + 8);
      *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v590 = (_OWORD *)(v190 + 80);
    v591 = v191 + 80;
    v592 = *((_QWORD *)v191 + 11);
    if (*(_QWORD *)(v190 + 88) == 1)
    {
      if (v592 == 1)
      {
        *v590 = *v591;
        v593 = *((_OWORD *)v191 + 6);
        v594 = *((_OWORD *)v191 + 7);
        v595 = *((_OWORD *)v191 + 9);
        *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
        *(_OWORD *)(v190 + 144) = v595;
        *(_OWORD *)(v190 + 96) = v593;
        *(_OWORD *)(v190 + 112) = v594;
      }
      else
      {
        *(_BYTE *)(v190 + 80) = v191[80];
        *(_QWORD *)(v190 + 88) = *((_QWORD *)v191 + 11);
        *(_OWORD *)(v190 + 96) = *((_OWORD *)v191 + 6);
        *(_BYTE *)(v190 + 112) = v191[112];
        *(_QWORD *)(v190 + 120) = *((_QWORD *)v191 + 15);
        *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
        *(_OWORD *)(v190 + 144) = *((_OWORD *)v191 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v592 == 1)
    {
      sub_1AD3AD2A8(v190 + 80);
      *v590 = *v591;
      v596 = *((_OWORD *)v191 + 9);
      v598 = *((_OWORD *)v191 + 6);
      v597 = *((_OWORD *)v191 + 7);
      *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
      *(_OWORD *)(v190 + 144) = v596;
      *(_OWORD *)(v190 + 96) = v598;
      *(_OWORD *)(v190 + 112) = v597;
    }
    else
    {
      *(_BYTE *)(v190 + 80) = v191[80];
      *(_QWORD *)(v190 + 88) = *((_QWORD *)v191 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(v190 + 96) = *((_OWORD *)v191 + 6);
      *(_BYTE *)(v190 + 112) = v191[112];
      *(_QWORD *)(v190 + 120) = *((_QWORD *)v191 + 15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v190 + 128) = *((_QWORD *)v191 + 16);
      *(_QWORD *)(v190 + 136) = *((_QWORD *)v191 + 17);
      *(_QWORD *)(v190 + 144) = *((_QWORD *)v191 + 18);
      *(_QWORD *)(v190 + 152) = *((_QWORD *)v191 + 19);
    }
    *(_BYTE *)(v190 + 160) = v191[160];
    *(_BYTE *)(v190 + 161) = v191[161];
    *(_QWORD *)(v190 + 168) = *((_QWORD *)v191 + 21);
    *(_BYTE *)(v190 + 176) = v191[176];
    v599 = *((_QWORD *)v191 + 24);
    *(_QWORD *)(v190 + 184) = *((_QWORD *)v191 + 23);
    *(_QWORD *)(v190 + 192) = v599;
    swift_retain();
    swift_release();
    v600 = *((_QWORD *)v191 + 26);
    if (*(_QWORD *)(v190 + 208) == 1)
    {
      if (v600 != 1)
      {
        *(_QWORD *)(v190 + 200) = *((_QWORD *)v191 + 25);
        *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
        swift_bridgeObjectRetain();
LABEL_203:
        v4 = v1542;
        goto LABEL_204;
      }
    }
    else
    {
      if (v600 != 1)
      {
        *(_QWORD *)(v190 + 200) = *((_QWORD *)v191 + 25);
        *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_203;
      }
      sub_1AD009758(v190 + 200, &qword_1ED2E3198);
    }
    *(_OWORD *)(v190 + 200) = *(_OWORD *)(v191 + 200);
    goto LABEL_203;
  }
  if (v196)
  {
LABEL_55:
    v200 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    memcpy((void *)v190, v191, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
    goto LABEL_160;
  }
  v197 = (int *)type metadata accessor for PosterArchive();
  v198 = *((_QWORD *)v197 - 1);
  v1200 = v5;
  v1531 = v190;
  v1539 = v192;
  v1502 = v193;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v198 + 48))(v191, 1, v197))
  {
    v199 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy((void *)v190, v191, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
  }
  else
  {
    if (*((_QWORD *)v191 + 23))
    {
      v212 = *(_OWORD *)v191;
      *(_BYTE *)(v190 + 16) = v191[16];
      *(_OWORD *)v190 = v212;
      *(_BYTE *)(v190 + 17) = v191[17];
      *(_BYTE *)(v190 + 18) = v191[18];
      v213 = (__int128 *)(v190 + 24);
      v214 = (__int128 *)(v191 + 24);
      if (*((_QWORD *)v191 + 9) == 1)
      {
        v215 = *v214;
        v216 = *(_OWORD *)(v191 + 40);
        v217 = *(_OWORD *)(v191 + 56);
        *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
        *(_OWORD *)(v190 + 40) = v216;
        *(_OWORD *)(v190 + 56) = v217;
        *v213 = v215;
      }
      else
      {
        v229 = *(_OWORD *)(v191 + 40);
        *v213 = *v214;
        *(_OWORD *)(v190 + 40) = v229;
        *(_BYTE *)(v190 + 56) = v191[56];
        *(_QWORD *)(v190 + 64) = *((_QWORD *)v191 + 8);
        *(_QWORD *)(v190 + 72) = *((_QWORD *)v191 + 9);
        swift_bridgeObjectRetain();
      }
      if (*((_QWORD *)v191 + 11) == 1)
      {
        *(_OWORD *)(v190 + 80) = *((_OWORD *)v191 + 5);
        v230 = *((_OWORD *)v191 + 6);
        v231 = *((_OWORD *)v191 + 7);
        v232 = *((_OWORD *)v191 + 9);
        *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
        *(_OWORD *)(v190 + 144) = v232;
        *(_OWORD *)(v190 + 96) = v230;
        *(_OWORD *)(v190 + 112) = v231;
      }
      else
      {
        *(_BYTE *)(v190 + 80) = v191[80];
        *(_QWORD *)(v190 + 88) = *((_QWORD *)v191 + 11);
        *(_OWORD *)(v190 + 96) = *((_OWORD *)v191 + 6);
        *(_BYTE *)(v190 + 112) = v191[112];
        *(_QWORD *)(v190 + 120) = *((_QWORD *)v191 + 15);
        *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
        *(_OWORD *)(v190 + 144) = *((_OWORD *)v191 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *(_BYTE *)(v190 + 160) = v191[160];
      *(_BYTE *)(v190 + 161) = v191[161];
      *(_QWORD *)(v190 + 168) = *((_QWORD *)v191 + 21);
      *(_BYTE *)(v190 + 176) = v191[176];
      v233 = *((_QWORD *)v191 + 24);
      *(_QWORD *)(v190 + 184) = *((_QWORD *)v191 + 23);
      *(_QWORD *)(v190 + 192) = v233;
      v234 = *((_QWORD *)v191 + 26);
      swift_retain();
      if (v234 == 1)
      {
        *(_OWORD *)(v190 + 200) = *(_OWORD *)(v191 + 200);
      }
      else
      {
        *(_QWORD *)(v190 + 200) = *((_QWORD *)v191 + 25);
        *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v219 = *((_OWORD *)v191 + 1);
      *(_OWORD *)v190 = *(_OWORD *)v191;
      *(_OWORD *)(v190 + 16) = v219;
      v220 = *((_OWORD *)v191 + 2);
      v221 = *((_OWORD *)v191 + 3);
      v222 = *((_OWORD *)v191 + 5);
      *(_OWORD *)(v190 + 64) = *((_OWORD *)v191 + 4);
      *(_OWORD *)(v190 + 80) = v222;
      *(_OWORD *)(v190 + 32) = v220;
      *(_OWORD *)(v190 + 48) = v221;
      v223 = *((_OWORD *)v191 + 6);
      v224 = *((_OWORD *)v191 + 7);
      v225 = *((_OWORD *)v191 + 9);
      *(_OWORD *)(v190 + 128) = *((_OWORD *)v191 + 8);
      *(_OWORD *)(v190 + 144) = v225;
      *(_OWORD *)(v190 + 96) = v223;
      *(_OWORD *)(v190 + 112) = v224;
      v226 = *((_OWORD *)v191 + 10);
      v227 = *((_OWORD *)v191 + 11);
      v228 = *((_OWORD *)v191 + 12);
      *(_QWORD *)(v190 + 208) = *((_QWORD *)v191 + 26);
      *(_OWORD *)(v190 + 176) = v227;
      *(_OWORD *)(v190 + 192) = v228;
      *(_OWORD *)(v190 + 160) = v226;
    }
    *(_WORD *)(v190 + 216) = *((_WORD *)v191 + 108);
    v235 = (_OWORD *)(v190 + 224);
    v236 = v191 + 224;
    v237 = v191[768];
    if (v237 == 2)
    {
      v257 = *((_OWORD *)v191 + 15);
      *v235 = *v236;
      *(_OWORD *)(v190 + 240) = v257;
      v258 = *((_OWORD *)v191 + 17);
      *(_OWORD *)(v190 + 256) = *((_OWORD *)v191 + 16);
      *(_OWORD *)(v190 + 272) = v258;
      *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
      *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
      *(_BYTE *)(v190 + 304) = v191[304];
      *(_BYTE *)(v190 + 768) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v237 == 1)
    {
      v238 = *((_OWORD *)v191 + 15);
      *v235 = *v236;
      *(_OWORD *)(v190 + 240) = v238;
      v239 = (_OWORD *)(v190 + 256);
      v240 = (__int128 *)(v191 + 256);
      v241 = *((_QWORD *)v191 + 35);
      v1105 = v197;
      v1106 = v198;
      if (v241)
      {
        *(_QWORD *)(v190 + 280) = v241;
        *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
        (**(void (***)(_OWORD *, __int128 *))(v241 - 8))(v239, v240);
        v242 = *((_QWORD *)v191 + 37);
        *(_BYTE *)(v190 + 304) = v191[304];
        *(_QWORD *)(v190 + 296) = v242;
        v243 = *((_QWORD *)v191 + 42);
        v244 = *((_QWORD *)v191 + 44);
        v245 = *((_QWORD *)v191 + 46);
        v246 = *((_QWORD *)v191 + 54);
        v247 = *((_QWORD *)v191 + 56);
        if (v243 >> 1 != 0xFFFFFFFF
          || (v245 | (unint64_t)v244) > 1
          || *((_QWORD *)v191 + 52) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v191 + 48) & 0xFFFFFFFFFFFF00FELL
          || (v247 | v246) >= 2)
        {
          v345 = *((_QWORD *)v191 + 40);
          v346 = *((_QWORD *)v191 + 43);
          v1132 = *((_QWORD *)v191 + 47);
          v1208 = *((_QWORD *)v191 + 49);
          v1236 = *((_QWORD *)v191 + 50);
          v1263 = *((_QWORD *)v191 + 51);
          v1288 = *((_QWORD *)v191 + 53);
          v1316 = *((_QWORD *)v191 + 55);
          v1344 = *((_QWORD *)v191 + 57);
          v1372 = *((_QWORD *)v191 + 58);
          v1398 = *((_QWORD *)v191 + 59);
          v1424 = *((_QWORD *)v191 + 60);
          v1450 = *((_QWORD *)v191 + 61);
          v1476 = *((_QWORD *)v191 + 62);
          v347 = *((_QWORD *)v191 + 39);
          v1109 = *((_QWORD *)v191 + 48);
          v1114 = *((_QWORD *)v191 + 52);
          v348 = *((_QWORD *)v191 + 41);
          v1154 = *((_QWORD *)v191 + 56);
          v1178 = *((_QWORD *)v191 + 54);
          v349 = *((_QWORD *)v191 + 45);
          sub_1AD00FEAC(v347, v345, v348, v243, v346, v244, v349, v245, v1132, v1109, v1208, v1236, v1263, v1114, v1288, v246, v1316, v247, v1344,
            v1372,
            v1398,
            v1424,
            v1450,
            v1476);
          *(_QWORD *)(v190 + 312) = v347;
          *(_QWORD *)(v190 + 320) = v345;
          *(_QWORD *)(v190 + 328) = v348;
          *(_QWORD *)(v190 + 336) = v243;
          *(_QWORD *)(v190 + 344) = v346;
          *(_QWORD *)(v190 + 352) = v244;
          *(_QWORD *)(v190 + 360) = v349;
          *(_QWORD *)(v190 + 368) = v245;
          *(_QWORD *)(v190 + 376) = v1132;
          *(_QWORD *)(v190 + 384) = v1109;
          *(_QWORD *)(v190 + 392) = v1208;
          *(_QWORD *)(v190 + 400) = v1236;
          *(_QWORD *)(v190 + 408) = v1263;
          *(_QWORD *)(v190 + 416) = v1114;
          *(_QWORD *)(v190 + 424) = v1288;
          *(_QWORD *)(v190 + 432) = v1178;
          *(_QWORD *)(v190 + 440) = v1316;
          *(_QWORD *)(v190 + 448) = v1154;
          *(_QWORD *)(v190 + 456) = v1344;
          *(_QWORD *)(v190 + 464) = v1372;
          *(_QWORD *)(v190 + 472) = v1398;
          *(_QWORD *)(v190 + 480) = v1424;
          *(_QWORD *)(v190 + 488) = v1450;
          *(_QWORD *)(v190 + 496) = v1476;
        }
        else
        {
          v248 = *(_OWORD *)(v191 + 312);
          v249 = *(_OWORD *)(v191 + 328);
          v250 = *(_OWORD *)(v191 + 360);
          *(_OWORD *)(v190 + 344) = *(_OWORD *)(v191 + 344);
          *(_OWORD *)(v190 + 360) = v250;
          *(_OWORD *)(v190 + 312) = v248;
          *(_OWORD *)(v190 + 328) = v249;
          v251 = *(_OWORD *)(v191 + 376);
          v252 = *(_OWORD *)(v191 + 392);
          v253 = *(_OWORD *)(v191 + 424);
          *(_OWORD *)(v190 + 408) = *(_OWORD *)(v191 + 408);
          *(_OWORD *)(v190 + 424) = v253;
          *(_OWORD *)(v190 + 376) = v251;
          *(_OWORD *)(v190 + 392) = v252;
          v254 = *(_OWORD *)(v191 + 440);
          v255 = *(_OWORD *)(v191 + 456);
          v256 = *(_OWORD *)(v191 + 488);
          *(_OWORD *)(v190 + 472) = *(_OWORD *)(v191 + 472);
          *(_OWORD *)(v190 + 488) = v256;
          *(_OWORD *)(v190 + 440) = v254;
          *(_OWORD *)(v190 + 456) = v255;
        }
      }
      else
      {
        v300 = *v240;
        v301 = *((_OWORD *)v191 + 17);
        v302 = *((_OWORD *)v191 + 19);
        *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
        *(_OWORD *)(v190 + 304) = v302;
        *v239 = v300;
        *(_OWORD *)(v190 + 272) = v301;
        v303 = *((_OWORD *)v191 + 20);
        v304 = *((_OWORD *)v191 + 21);
        v305 = *((_OWORD *)v191 + 23);
        *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
        *(_OWORD *)(v190 + 368) = v305;
        *(_OWORD *)(v190 + 320) = v303;
        *(_OWORD *)(v190 + 336) = v304;
        v306 = *((_OWORD *)v191 + 24);
        v307 = *((_OWORD *)v191 + 25);
        v308 = *((_OWORD *)v191 + 27);
        *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
        *(_OWORD *)(v190 + 432) = v308;
        *(_OWORD *)(v190 + 384) = v306;
        *(_OWORD *)(v190 + 400) = v307;
        v309 = *((_OWORD *)v191 + 28);
        v310 = *((_OWORD *)v191 + 29);
        v311 = *((_OWORD *)v191 + 30);
        *(_QWORD *)(v190 + 496) = *((_QWORD *)v191 + 62);
        *(_OWORD *)(v190 + 464) = v310;
        *(_OWORD *)(v190 + 480) = v311;
        *(_OWORD *)(v190 + 448) = v309;
      }
      v350 = *((_QWORD *)v191 + 64);
      v351 = *((_QWORD *)v191 + 65);
      v1110 = *((_QWORD *)v191 + 71);
      v1115 = *((_QWORD *)v191 + 72);
      v1133 = *((_QWORD *)v191 + 73);
      v1155 = *((_QWORD *)v191 + 74);
      v1179 = *((_QWORD *)v191 + 75);
      v1209 = *((_QWORD *)v191 + 76);
      v1237 = *((_QWORD *)v191 + 77);
      v1264 = *((_QWORD *)v191 + 78);
      v1289 = *((_QWORD *)v191 + 79);
      v1317 = *((_QWORD *)v191 + 80);
      v1345 = *((_QWORD *)v191 + 81);
      v1373 = *((_QWORD *)v191 + 82);
      v1399 = *((_QWORD *)v191 + 83);
      v1425 = *((_QWORD *)v191 + 84);
      v1451 = *((_QWORD *)v191 + 85);
      v1477 = *((_QWORD *)v191 + 86);
      v352 = *((_QWORD *)v191 + 63);
      v353 = *((_QWORD *)v191 + 66);
      v354 = *((_QWORD *)v191 + 67);
      v355 = *((_QWORD *)v191 + 68);
      v356 = *((_QWORD *)v191 + 69);
      v357 = *((_QWORD *)v191 + 70);
      sub_1AD00FEAC(v352, v350, v351, v353, v354, v355, v356, v357, v1110, v1115, v1133, v1155, v1179, v1209, v1237, v1264, v1289, v1317, v1345,
        v1373,
        v1399,
        v1425,
        v1451,
        v1477);
      *(_QWORD *)(v190 + 504) = v352;
      *(_QWORD *)(v190 + 512) = v350;
      *(_QWORD *)(v190 + 520) = v351;
      *(_QWORD *)(v190 + 528) = v353;
      *(_QWORD *)(v190 + 536) = v354;
      *(_QWORD *)(v190 + 544) = v355;
      *(_QWORD *)(v190 + 552) = v356;
      *(_QWORD *)(v190 + 560) = v357;
      *(_QWORD *)(v190 + 568) = v1110;
      *(_QWORD *)(v190 + 576) = v1115;
      *(_QWORD *)(v190 + 584) = v1133;
      *(_QWORD *)(v190 + 592) = v1155;
      *(_QWORD *)(v190 + 600) = v1179;
      *(_QWORD *)(v190 + 608) = v1209;
      *(_QWORD *)(v190 + 616) = v1237;
      *(_QWORD *)(v190 + 624) = v1264;
      *(_QWORD *)(v190 + 632) = v1289;
      *(_QWORD *)(v190 + 640) = v1317;
      *(_QWORD *)(v190 + 648) = v1345;
      *(_QWORD *)(v190 + 656) = v1373;
      *(_QWORD *)(v190 + 664) = v1399;
      *(_QWORD *)(v190 + 672) = v1425;
      *(_QWORD *)(v190 + 680) = v1451;
      *(_QWORD *)(v190 + 688) = v1477;
      v358 = *((_QWORD *)v191 + 87);
      if (v358)
      {
        v359 = *((_QWORD *)v191 + 88);
        *(_QWORD *)(v190 + 696) = v358;
        *(_QWORD *)(v190 + 704) = v359;
        *(_QWORD *)(v190 + 712) = *((_QWORD *)v191 + 89);
        *(_QWORD *)(v190 + 720) = *((_QWORD *)v191 + 90);
        *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        v360 = *(_OWORD *)(v191 + 696);
        v361 = *(_OWORD *)(v191 + 712);
        *(_QWORD *)(v190 + 728) = *((_QWORD *)v191 + 91);
        *(_OWORD *)(v190 + 696) = v360;
        *(_OWORD *)(v190 + 712) = v361;
      }
      v192 = v1539;
      v197 = v1105;
      v198 = v1106;
      *(_BYTE *)(v190 + 736) = v191[736];
      *(_BYTE *)(v190 + 768) = 1;
    }
    else
    {
      *(_WORD *)(v190 + 224) = *((_WORD *)v191 + 112);
      v259 = *((_QWORD *)v191 + 30);
      *(_QWORD *)(v190 + 232) = *((_QWORD *)v191 + 29);
      *(_QWORD *)(v190 + 240) = v259;
      *(_QWORD *)(v190 + 248) = *((_QWORD *)v191 + 31);
      *(_QWORD *)(v190 + 256) = *((_QWORD *)v191 + 32);
      *(_BYTE *)(v190 + 264) = v191[264];
      v260 = *((_QWORD *)v191 + 35);
      *(_QWORD *)(v190 + 272) = *((_QWORD *)v191 + 34);
      *(_QWORD *)(v190 + 280) = v260;
      v261 = *((_QWORD *)v191 + 37);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v261 == 1)
      {
        *(_OWORD *)(v190 + 288) = *((_OWORD *)v191 + 18);
      }
      else
      {
        *(_QWORD *)(v190 + 288) = *((_QWORD *)v191 + 36);
        *(_QWORD *)(v190 + 296) = *((_QWORD *)v191 + 37);
        swift_bridgeObjectRetain();
      }
      v270 = *((_QWORD *)v191 + 39);
      *(_QWORD *)(v190 + 304) = *((_QWORD *)v191 + 38);
      *(_QWORD *)(v190 + 312) = v270;
      *(_QWORD *)(v190 + 320) = *((_QWORD *)v191 + 40);
      *(_QWORD *)(v190 + 328) = *((_QWORD *)v191 + 41);
      *(_QWORD *)(v190 + 336) = *((_QWORD *)v191 + 42);
      *(_QWORD *)(v190 + 344) = *((_QWORD *)v191 + 43);
      v271 = *((_OWORD *)v191 + 23);
      *(_OWORD *)(v190 + 352) = *((_OWORD *)v191 + 22);
      *(_OWORD *)(v190 + 368) = v271;
      v272 = *((_OWORD *)v191 + 24);
      v273 = *((_OWORD *)v191 + 25);
      v274 = *((_OWORD *)v191 + 27);
      *(_OWORD *)(v190 + 416) = *((_OWORD *)v191 + 26);
      *(_OWORD *)(v190 + 432) = v274;
      *(_OWORD *)(v190 + 384) = v272;
      *(_OWORD *)(v190 + 400) = v273;
      v275 = *((_OWORD *)v191 + 28);
      v276 = *((_OWORD *)v191 + 29);
      v277 = *((_OWORD *)v191 + 30);
      *(_WORD *)(v190 + 496) = *((_WORD *)v191 + 248);
      *(_OWORD *)(v190 + 464) = v276;
      *(_OWORD *)(v190 + 480) = v277;
      *(_OWORD *)(v190 + 448) = v275;
      *(_BYTE *)(v190 + 498) = v191[498];
      *(_BYTE *)(v190 + 499) = v191[499];
      *(_QWORD *)(v190 + 504) = *((_QWORD *)v191 + 63);
      *(_BYTE *)(v190 + 512) = v191[512];
      v278 = *(_OWORD *)(v191 + 536);
      *(_OWORD *)(v190 + 520) = *(_OWORD *)(v191 + 520);
      *(_OWORD *)(v190 + 536) = v278;
      v279 = *(_OWORD *)(v191 + 552);
      v280 = *(_OWORD *)(v191 + 568);
      v281 = *(_OWORD *)(v191 + 600);
      *(_OWORD *)(v190 + 584) = *(_OWORD *)(v191 + 584);
      *(_OWORD *)(v190 + 600) = v281;
      *(_OWORD *)(v190 + 552) = v279;
      *(_OWORD *)(v190 + 568) = v280;
      v282 = *(_OWORD *)(v191 + 616);
      v283 = *(_OWORD *)(v191 + 632);
      v284 = *(_OWORD *)(v191 + 664);
      *(_OWORD *)(v190 + 648) = *(_OWORD *)(v191 + 648);
      *(_OWORD *)(v190 + 664) = v284;
      *(_OWORD *)(v190 + 616) = v282;
      *(_OWORD *)(v190 + 632) = v283;
      v285 = *(_OWORD *)(v191 + 680);
      v286 = *(_OWORD *)(v191 + 696);
      v287 = *(_OWORD *)(v191 + 712);
      *(_WORD *)(v190 + 728) = *((_WORD *)v191 + 364);
      *(_OWORD *)(v190 + 696) = v286;
      *(_OWORD *)(v190 + 712) = v287;
      *(_OWORD *)(v190 + 680) = v285;
      *(_BYTE *)(v190 + 730) = v191[730];
      v288 = *((_QWORD *)v191 + 93);
      *(_QWORD *)(v190 + 736) = *((_QWORD *)v191 + 92);
      *(_QWORD *)(v190 + 744) = v288;
      v289 = *((_QWORD *)v191 + 95);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v289 == 1)
      {
        *(_OWORD *)(v190 + 752) = *((_OWORD *)v191 + 47);
      }
      else
      {
        *(_QWORD *)(v190 + 752) = *((_QWORD *)v191 + 94);
        *(_QWORD *)(v190 + 760) = *((_QWORD *)v191 + 95);
        swift_bridgeObjectRetain();
      }
      *(_BYTE *)(v190 + 768) = 0;
    }
    v362 = v197[6];
    v363 = v190 + v362;
    v364 = &v191[v362];
    v365 = sub_1AD63B084();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v365 - 8) + 16))(v363, v364, v365);
    *(_QWORD *)(v190 + v197[7]) = *(_QWORD *)&v191[v197[7]];
    *(_QWORD *)(v190 + v197[8]) = *(_QWORD *)&v191[v197[8]];
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v198 + 56))(v190, 0, 1, v197);
    v193 = v1502;
  }
  v366 = v192[5];
  v367 = v190 + v366;
  v368 = &v191[v366];
  v369 = *(_QWORD *)&v191[v366 + 8];
  *(_QWORD *)v367 = *(_QWORD *)&v191[v366];
  *(_QWORD *)(v367 + 8) = v369;
  v370 = *(_QWORD *)&v191[v366 + 24];
  swift_retain();
  if (v370 == 1)
  {
    *(_OWORD *)(v367 + 16) = *((_OWORD *)v368 + 1);
  }
  else
  {
    *(_QWORD *)(v367 + 16) = *((_QWORD *)v368 + 2);
    *(_QWORD *)(v367 + 24) = *((_QWORD *)v368 + 3);
    swift_bridgeObjectRetain();
  }
  v371 = v192[6];
  v372 = (char *)(v190 + v371);
  v373 = &v191[v371];
  v1523 = v191;
  if (*(_QWORD *)&v191[v371 + 272] >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)v373 + 38) | *((_QWORD *)v373 + 36)) > 1
    || *((_QWORD *)v373 + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v373 + 40) & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)v373 + 48) | *((_QWORD *)v373 + 46)) >= 2)
  {
    v374 = *((_QWORD *)v373 + 3);
    if (v374)
    {
      *((_QWORD *)v372 + 3) = v374;
      *((_QWORD *)v372 + 4) = *((_QWORD *)v373 + 4);
      (**(void (***)(void *, char *))(v374 - 8))(v372, v373);
      v375 = *((_QWORD *)v373 + 5);
      v372[48] = v373[48];
      *((_QWORD *)v372 + 5) = v375;
      v376 = *((_QWORD *)v373 + 10);
      v377 = *((_QWORD *)v373 + 12);
      v378 = *((_QWORD *)v373 + 14);
      v379 = *((_QWORD *)v373 + 22);
      v380 = *((_QWORD *)v373 + 24);
      if (v376 >> 1 != 0xFFFFFFFF
        || (v378 | (unint64_t)v377) > 1
        || *((_QWORD *)v373 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v373 + 16) & 0xFFFFFFFFFFFF00FELL
        || (v380 | v379) >= 2)
      {
        v403 = *((_QWORD *)v373 + 7);
        v402 = *((_QWORD *)v373 + 8);
        v1116 = *((_QWORD *)v373 + 15);
        v1210 = *((_QWORD *)v373 + 17);
        v1238 = *((_QWORD *)v373 + 18);
        v1265 = *((_QWORD *)v373 + 19);
        v1290 = *((_QWORD *)v373 + 21);
        v1318 = *((_QWORD *)v373 + 23);
        v1346 = *((_QWORD *)v373 + 25);
        v1374 = *((_QWORD *)v373 + 26);
        v1400 = *((_QWORD *)v373 + 27);
        v1426 = *((_QWORD *)v373 + 28);
        v1452 = *((_QWORD *)v373 + 29);
        v1478 = *((_QWORD *)v373 + 30);
        v1111 = *((_QWORD *)v373 + 16);
        v404 = *((_QWORD *)v373 + 9);
        v1134 = *((_QWORD *)v373 + 20);
        v1156 = *((_QWORD *)v373 + 24);
        v405 = *((_QWORD *)v373 + 11);
        v1180 = *((_QWORD *)v373 + 22);
        v406 = *((_QWORD *)v373 + 13);
        sub_1AD00FEAC(v403, v402, v404, v376, v405, v377, v406, v378, v1116, v1111, v1210, v1238, v1265, v1134, v1290, v379, v1318, v380, v1346,
          v1374,
          v1400,
          v1426,
          v1452,
          v1478);
        *((_QWORD *)v372 + 7) = v403;
        *((_QWORD *)v372 + 8) = v402;
        *((_QWORD *)v372 + 9) = v404;
        *((_QWORD *)v372 + 10) = v376;
        *((_QWORD *)v372 + 11) = v405;
        *((_QWORD *)v372 + 12) = v377;
        *((_QWORD *)v372 + 13) = v406;
        *((_QWORD *)v372 + 14) = v378;
        *((_QWORD *)v372 + 15) = v1116;
        *((_QWORD *)v372 + 16) = v1111;
        *((_QWORD *)v372 + 17) = v1210;
        *((_QWORD *)v372 + 18) = v1238;
        *((_QWORD *)v372 + 19) = v1265;
        *((_QWORD *)v372 + 20) = v1134;
        *((_QWORD *)v372 + 21) = v1290;
        *((_QWORD *)v372 + 22) = v1180;
        *((_QWORD *)v372 + 23) = v1318;
        *((_QWORD *)v372 + 24) = v1156;
        *((_QWORD *)v372 + 25) = v1346;
        *((_QWORD *)v372 + 26) = v1374;
        *((_QWORD *)v372 + 27) = v1400;
        *((_QWORD *)v372 + 28) = v1426;
        *((_QWORD *)v372 + 29) = v1452;
        *((_QWORD *)v372 + 30) = v1478;
      }
      else
      {
        v381 = *(_OWORD *)(v373 + 56);
        v382 = *(_OWORD *)(v373 + 72);
        v383 = *(_OWORD *)(v373 + 104);
        *(_OWORD *)(v372 + 88) = *(_OWORD *)(v373 + 88);
        *(_OWORD *)(v372 + 104) = v383;
        *(_OWORD *)(v372 + 56) = v381;
        *(_OWORD *)(v372 + 72) = v382;
        v384 = *(_OWORD *)(v373 + 120);
        v385 = *(_OWORD *)(v373 + 136);
        v386 = *(_OWORD *)(v373 + 168);
        *(_OWORD *)(v372 + 152) = *(_OWORD *)(v373 + 152);
        *(_OWORD *)(v372 + 168) = v386;
        *(_OWORD *)(v372 + 120) = v384;
        *(_OWORD *)(v372 + 136) = v385;
        v387 = *(_OWORD *)(v373 + 184);
        v388 = *(_OWORD *)(v373 + 200);
        v389 = *(_OWORD *)(v373 + 232);
        *(_OWORD *)(v372 + 216) = *(_OWORD *)(v373 + 216);
        *(_OWORD *)(v372 + 232) = v389;
        *(_OWORD *)(v372 + 184) = v387;
        *(_OWORD *)(v372 + 200) = v388;
      }
    }
    else
    {
      v390 = *(_OWORD *)v373;
      v391 = *((_OWORD *)v373 + 1);
      v392 = *((_OWORD *)v373 + 3);
      *((_OWORD *)v372 + 2) = *((_OWORD *)v373 + 2);
      *((_OWORD *)v372 + 3) = v392;
      *(_OWORD *)v372 = v390;
      *((_OWORD *)v372 + 1) = v391;
      v393 = *((_OWORD *)v373 + 4);
      v394 = *((_OWORD *)v373 + 5);
      v395 = *((_OWORD *)v373 + 7);
      *((_OWORD *)v372 + 6) = *((_OWORD *)v373 + 6);
      *((_OWORD *)v372 + 7) = v395;
      *((_OWORD *)v372 + 4) = v393;
      *((_OWORD *)v372 + 5) = v394;
      v396 = *((_OWORD *)v373 + 8);
      v397 = *((_OWORD *)v373 + 9);
      v398 = *((_OWORD *)v373 + 11);
      *((_OWORD *)v372 + 10) = *((_OWORD *)v373 + 10);
      *((_OWORD *)v372 + 11) = v398;
      *((_OWORD *)v372 + 8) = v396;
      *((_OWORD *)v372 + 9) = v397;
      v399 = *((_OWORD *)v373 + 12);
      v400 = *((_OWORD *)v373 + 13);
      v401 = *((_OWORD *)v373 + 14);
      *((_QWORD *)v372 + 30) = *((_QWORD *)v373 + 30);
      *((_OWORD *)v372 + 13) = v400;
      *((_OWORD *)v372 + 14) = v401;
      *((_OWORD *)v372 + 12) = v399;
    }
    v407 = *((_QWORD *)v373 + 31);
    v408 = *((_QWORD *)v373 + 32);
    v410 = *((_QWORD *)v373 + 33);
    v409 = *((_QWORD *)v373 + 34);
    v411 = *((_QWORD *)v373 + 35);
    v412 = *((_QWORD *)v373 + 36);
    v413 = *((_QWORD *)v373 + 37);
    v414 = *((_QWORD *)v373 + 38);
    v1117 = *((_QWORD *)v373 + 40);
    v1135 = *((_QWORD *)v373 + 41);
    v1157 = *((_QWORD *)v373 + 42);
    v1181 = *((_QWORD *)v373 + 43);
    v1211 = *((_QWORD *)v373 + 44);
    v1239 = *((_QWORD *)v373 + 45);
    v1266 = *((_QWORD *)v373 + 46);
    v1291 = *((_QWORD *)v373 + 47);
    v1319 = *((_QWORD *)v373 + 48);
    v1347 = *((_QWORD *)v373 + 49);
    v1375 = *((_QWORD *)v373 + 50);
    v1401 = *((_QWORD *)v373 + 51);
    v1427 = *((_QWORD *)v373 + 52);
    v1453 = *((_QWORD *)v373 + 53);
    v1479 = *((_QWORD *)v373 + 54);
    v415 = *((_QWORD *)v373 + 39);
    v416 = v407;
    v417 = v408;
    v418 = v409;
    v419 = v411;
    v420 = v413;
    v421 = v414;
    sub_1AD00FEAC(v407, v408, v410, v409, v411, v412, v413, v414, v415, v1117, v1135, v1157, v1181, v1211, v1239, v1266, v1291, v1319, v1347,
      v1375,
      v1401,
      v1427,
      v1453,
      v1479);
    *((_QWORD *)v372 + 31) = v416;
    *((_QWORD *)v372 + 32) = v417;
    *((_QWORD *)v372 + 33) = v410;
    *((_QWORD *)v372 + 34) = v418;
    *((_QWORD *)v372 + 35) = v419;
    *((_QWORD *)v372 + 36) = v412;
    *((_QWORD *)v372 + 37) = v420;
    *((_QWORD *)v372 + 38) = v421;
    *((_QWORD *)v372 + 39) = v415;
    *((_QWORD *)v372 + 40) = v1117;
    *((_QWORD *)v372 + 41) = v1135;
    *((_QWORD *)v372 + 42) = v1157;
    *((_QWORD *)v372 + 43) = v1181;
    *((_QWORD *)v372 + 44) = v1211;
    *((_QWORD *)v372 + 45) = v1239;
    *((_QWORD *)v372 + 46) = v1266;
    *((_QWORD *)v372 + 47) = v1291;
    *((_QWORD *)v372 + 48) = v1319;
    *((_QWORD *)v372 + 49) = v1347;
    *((_QWORD *)v372 + 50) = v1375;
    *((_QWORD *)v372 + 51) = v1401;
    *((_QWORD *)v372 + 52) = v1427;
    *((_QWORD *)v372 + 53) = v1453;
    v193 = v1502;
    *((_QWORD *)v372 + 54) = v1479;
    v190 = v1531;
    v192 = v1539;
    v191 = v1523;
  }
  else
  {
    memcpy(v372, v373, 0x1B8uLL);
  }
  v422 = v192[7];
  v423 = v190 + v422;
  v424 = &v191[v422];
  v425 = *(_QWORD *)&v191[v422 + 8];
  *(_QWORD *)v423 = *(_QWORD *)&v191[v422];
  *(_QWORD *)(v423 + 8) = v425;
  v426 = *(_QWORD *)&v191[v422 + 24];
  swift_retain();
  if (v426 == 1)
  {
    *(_OWORD *)(v423 + 16) = *((_OWORD *)v424 + 1);
  }
  else
  {
    *(_QWORD *)(v423 + 16) = *((_QWORD *)v424 + 2);
    *(_QWORD *)(v423 + 24) = *((_QWORD *)v424 + 3);
    swift_bridgeObjectRetain();
  }
  v427 = v192[8];
  v428 = (char *)(v190 + v427);
  v429 = &v191[v427];
  v4 = v1542;
  if (*(_QWORD *)&v191[v427 + 272] >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)v429 + 38) | *((_QWORD *)v429 + 36)) > 1
    || *((_QWORD *)v429 + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v429 + 40) & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)v429 + 48) | *((_QWORD *)v429 + 46)) >= 2)
  {
    v430 = *((_QWORD *)v429 + 3);
    if (v430)
    {
      *((_QWORD *)v428 + 3) = v430;
      *((_QWORD *)v428 + 4) = *((_QWORD *)v429 + 4);
      (**(void (***)(void *, char *))(v430 - 8))(v428, v429);
      v431 = *((_QWORD *)v429 + 5);
      v428[48] = v429[48];
      *((_QWORD *)v428 + 5) = v431;
      v432 = *((_QWORD *)v429 + 10);
      v433 = *((_QWORD *)v429 + 12);
      v434 = *((_QWORD *)v429 + 14);
      v435 = *((_QWORD *)v429 + 22);
      v436 = *((_QWORD *)v429 + 24);
      if (v432 >> 1 != 0xFFFFFFFF
        || (v434 | (unint64_t)v433) > 1
        || *((_QWORD *)v429 + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)v429 + 16) & 0xFFFFFFFFFFFF00FELL
        || (v436 | v435) >= 2)
      {
        v458 = *((_QWORD *)v429 + 7);
        v459 = *((_QWORD *)v429 + 8);
        v1118 = *((_QWORD *)v429 + 15);
        v1212 = *((_QWORD *)v429 + 17);
        v1240 = *((_QWORD *)v429 + 18);
        v1267 = *((_QWORD *)v429 + 19);
        v1292 = *((_QWORD *)v429 + 21);
        v1320 = *((_QWORD *)v429 + 23);
        v1348 = *((_QWORD *)v429 + 25);
        v1376 = *((_QWORD *)v429 + 26);
        v1402 = *((_QWORD *)v429 + 27);
        v1428 = *((_QWORD *)v429 + 28);
        v1454 = *((_QWORD *)v429 + 29);
        v1480 = *((_QWORD *)v429 + 30);
        v1112 = *((_QWORD *)v429 + 16);
        v460 = *((_QWORD *)v429 + 9);
        v1136 = *((_QWORD *)v429 + 20);
        v1158 = *((_QWORD *)v429 + 24);
        v461 = *((_QWORD *)v429 + 11);
        v1182 = *((_QWORD *)v429 + 22);
        v462 = *((_QWORD *)v429 + 13);
        sub_1AD00FEAC(v458, v459, v460, v432, v461, v433, v462, v434, v1118, v1112, v1212, v1240, v1267, v1136, v1292, v435, v1320, v436, v1348,
          v1376,
          v1402,
          v1428,
          v1454,
          v1480);
        *((_QWORD *)v428 + 7) = v458;
        *((_QWORD *)v428 + 8) = v459;
        *((_QWORD *)v428 + 9) = v460;
        *((_QWORD *)v428 + 10) = v432;
        *((_QWORD *)v428 + 11) = v461;
        *((_QWORD *)v428 + 12) = v433;
        *((_QWORD *)v428 + 13) = v462;
        *((_QWORD *)v428 + 14) = v434;
        *((_QWORD *)v428 + 15) = v1118;
        *((_QWORD *)v428 + 16) = v1112;
        *((_QWORD *)v428 + 17) = v1212;
        *((_QWORD *)v428 + 18) = v1240;
        *((_QWORD *)v428 + 19) = v1267;
        *((_QWORD *)v428 + 20) = v1136;
        *((_QWORD *)v428 + 21) = v1292;
        *((_QWORD *)v428 + 22) = v1182;
        *((_QWORD *)v428 + 23) = v1320;
        *((_QWORD *)v428 + 24) = v1158;
        *((_QWORD *)v428 + 25) = v1348;
        *((_QWORD *)v428 + 26) = v1376;
        *((_QWORD *)v428 + 27) = v1402;
        *((_QWORD *)v428 + 28) = v1428;
        *((_QWORD *)v428 + 29) = v1454;
        *((_QWORD *)v428 + 30) = v1480;
      }
      else
      {
        v437 = *(_OWORD *)(v429 + 56);
        v438 = *(_OWORD *)(v429 + 72);
        v439 = *(_OWORD *)(v429 + 104);
        *(_OWORD *)(v428 + 88) = *(_OWORD *)(v429 + 88);
        *(_OWORD *)(v428 + 104) = v439;
        *(_OWORD *)(v428 + 56) = v437;
        *(_OWORD *)(v428 + 72) = v438;
        v440 = *(_OWORD *)(v429 + 120);
        v441 = *(_OWORD *)(v429 + 136);
        v442 = *(_OWORD *)(v429 + 168);
        *(_OWORD *)(v428 + 152) = *(_OWORD *)(v429 + 152);
        *(_OWORD *)(v428 + 168) = v442;
        *(_OWORD *)(v428 + 120) = v440;
        *(_OWORD *)(v428 + 136) = v441;
        v443 = *(_OWORD *)(v429 + 184);
        v444 = *(_OWORD *)(v429 + 200);
        v445 = *(_OWORD *)(v429 + 232);
        *(_OWORD *)(v428 + 216) = *(_OWORD *)(v429 + 216);
        *(_OWORD *)(v428 + 232) = v445;
        *(_OWORD *)(v428 + 184) = v443;
        *(_OWORD *)(v428 + 200) = v444;
      }
    }
    else
    {
      v446 = *(_OWORD *)v429;
      v447 = *((_OWORD *)v429 + 1);
      v448 = *((_OWORD *)v429 + 3);
      *((_OWORD *)v428 + 2) = *((_OWORD *)v429 + 2);
      *((_OWORD *)v428 + 3) = v448;
      *(_OWORD *)v428 = v446;
      *((_OWORD *)v428 + 1) = v447;
      v449 = *((_OWORD *)v429 + 4);
      v450 = *((_OWORD *)v429 + 5);
      v451 = *((_OWORD *)v429 + 7);
      *((_OWORD *)v428 + 6) = *((_OWORD *)v429 + 6);
      *((_OWORD *)v428 + 7) = v451;
      *((_OWORD *)v428 + 4) = v449;
      *((_OWORD *)v428 + 5) = v450;
      v452 = *((_OWORD *)v429 + 8);
      v453 = *((_OWORD *)v429 + 9);
      v454 = *((_OWORD *)v429 + 11);
      *((_OWORD *)v428 + 10) = *((_OWORD *)v429 + 10);
      *((_OWORD *)v428 + 11) = v454;
      *((_OWORD *)v428 + 8) = v452;
      *((_OWORD *)v428 + 9) = v453;
      v455 = *((_OWORD *)v429 + 12);
      v456 = *((_OWORD *)v429 + 13);
      v457 = *((_OWORD *)v429 + 14);
      *((_QWORD *)v428 + 30) = *((_QWORD *)v429 + 30);
      *((_OWORD *)v428 + 13) = v456;
      *((_OWORD *)v428 + 14) = v457;
      *((_OWORD *)v428 + 12) = v455;
    }
    v463 = *((_QWORD *)v429 + 31);
    v464 = *((_QWORD *)v429 + 32);
    v465 = *((_QWORD *)v429 + 33);
    v466 = *((_QWORD *)v429 + 34);
    v468 = *((_QWORD *)v429 + 35);
    v467 = *((_QWORD *)v429 + 36);
    v469 = *((_QWORD *)v429 + 37);
    v470 = *((_QWORD *)v429 + 38);
    v1119 = *((_QWORD *)v429 + 40);
    v1137 = *((_QWORD *)v429 + 41);
    v1159 = *((_QWORD *)v429 + 42);
    v1183 = *((_QWORD *)v429 + 43);
    v1213 = *((_QWORD *)v429 + 44);
    v1241 = *((_QWORD *)v429 + 45);
    v1268 = *((_QWORD *)v429 + 46);
    v1293 = *((_QWORD *)v429 + 47);
    v1321 = *((_QWORD *)v429 + 48);
    v1349 = *((_QWORD *)v429 + 49);
    v1377 = *((_QWORD *)v429 + 50);
    v1403 = *((_QWORD *)v429 + 51);
    v1429 = *((_QWORD *)v429 + 52);
    v1455 = *((_QWORD *)v429 + 53);
    v1481 = *((_QWORD *)v429 + 54);
    v471 = *((_QWORD *)v429 + 39);
    v472 = v463;
    v473 = v464;
    v474 = v465;
    v475 = v467;
    v476 = v469;
    v477 = v470;
    sub_1AD00FEAC(v463, v464, v465, v466, v468, v467, v469, v470, v471, v1119, v1137, v1159, v1183, v1213, v1241, v1268, v1293, v1321, v1349,
      v1377,
      v1403,
      v1429,
      v1455,
      v1481);
    *((_QWORD *)v428 + 31) = v472;
    *((_QWORD *)v428 + 32) = v473;
    *((_QWORD *)v428 + 33) = v474;
    *((_QWORD *)v428 + 34) = v466;
    *((_QWORD *)v428 + 35) = v468;
    *((_QWORD *)v428 + 36) = v475;
    *((_QWORD *)v428 + 37) = v476;
    *((_QWORD *)v428 + 38) = v477;
    *((_QWORD *)v428 + 39) = v471;
    *((_QWORD *)v428 + 40) = v1119;
    *((_QWORD *)v428 + 41) = v1137;
    *((_QWORD *)v428 + 42) = v1159;
    *((_QWORD *)v428 + 43) = v1183;
    *((_QWORD *)v428 + 44) = v1213;
    *((_QWORD *)v428 + 45) = v1241;
    *((_QWORD *)v428 + 46) = v1268;
    *((_QWORD *)v428 + 47) = v1293;
    *((_QWORD *)v428 + 48) = v1321;
    *((_QWORD *)v428 + 49) = v1349;
    *((_QWORD *)v428 + 50) = v1377;
    *((_QWORD *)v428 + 51) = v1403;
    *((_QWORD *)v428 + 52) = v1429;
    *((_QWORD *)v428 + 53) = v1455;
    v193 = v1502;
    *((_QWORD *)v428 + 54) = v1481;
    v4 = v1542;
    v190 = v1531;
    v192 = v1539;
    v191 = v1523;
  }
  else
  {
    memcpy(v428, v429, 0x1B8uLL);
  }
  *(_QWORD *)(v190 + v192[9]) = *(_QWORD *)&v191[v192[9]];
  v478 = v192[10];
  v479 = v190 + v478;
  v480 = &v191[v478];
  v5 = v1200;
  a3 = v1541;
  if (*((_QWORD *)v480 + 1))
  {
    *(_QWORD *)v479 = *(_QWORD *)v480;
    *(_QWORD *)(v479 + 8) = *((_QWORD *)v480 + 1);
    v481 = *((_QWORD *)v480 + 3);
    *(_QWORD *)(v479 + 16) = *((_QWORD *)v480 + 2);
    *(_QWORD *)(v479 + 24) = v481;
    v482 = *((_QWORD *)v480 + 4);
    *(_BYTE *)(v479 + 40) = v480[40];
    *(_QWORD *)(v479 + 32) = v482;
    v483 = *((_QWORD *)v480 + 7);
    *(_QWORD *)(v479 + 48) = *((_QWORD *)v480 + 6);
    *(_QWORD *)(v479 + 56) = v483;
    v484 = *((_QWORD *)v480 + 8);
    *(_BYTE *)(v479 + 72) = v480[72];
    *(_QWORD *)(v479 + 64) = v484;
    v485 = *((_OWORD *)v480 + 6);
    *(_OWORD *)(v479 + 80) = *((_OWORD *)v480 + 5);
    *(_OWORD *)(v479 + 96) = v485;
    *(_BYTE *)(v479 + 112) = v480[112];
    *(_BYTE *)(v479 + 113) = v480[113];
    v486 = *(_OWORD *)(v480 + 120);
    v487 = *(_OWORD *)(v480 + 136);
    *(_BYTE *)(v479 + 152) = v480[152];
    *(_OWORD *)(v479 + 136) = v487;
    *(_OWORD *)(v479 + 120) = v486;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v488 = *((_OWORD *)v480 + 1);
    *(_OWORD *)v479 = *(_OWORD *)v480;
    *(_OWORD *)(v479 + 16) = v488;
    v489 = *((_OWORD *)v480 + 2);
    v490 = *((_OWORD *)v480 + 3);
    v491 = *((_OWORD *)v480 + 5);
    *(_OWORD *)(v479 + 64) = *((_OWORD *)v480 + 4);
    *(_OWORD *)(v479 + 80) = v491;
    *(_OWORD *)(v479 + 32) = v489;
    *(_OWORD *)(v479 + 48) = v490;
    v492 = *((_OWORD *)v480 + 6);
    v493 = *((_OWORD *)v480 + 7);
    v494 = *((_OWORD *)v480 + 8);
    *(_OWORD *)(v479 + 137) = *(_OWORD *)(v480 + 137);
    *(_OWORD *)(v479 + 112) = v493;
    *(_OWORD *)(v479 + 128) = v494;
    *(_OWORD *)(v479 + 96) = v492;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v193 + 56))(v190, 0, 1, v192);
LABEL_160:
  v495 = *(int *)(a3 + 32);
  v496 = (char *)v5 + v495;
  v497 = (char *)v4 + v495;
  *v496 = *v497;
  v496[1] = v497[1];
  v496[2] = v497[2];
  *((_QWORD *)v496 + 1) = *((_QWORD *)v497 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

_QWORD *sub_1AD406748(_QWORD *a1)
{
  destroy for MessagesAppBalloon.AppIconImage(a1);
  return a1;
}

uint64_t sub_1AD406774(uint64_t a1)
{
  destroy for Wallpaper.WallpaperMetadata();
  return a1;
}

_OWORD *sub_1AD4067A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v42;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  memcpy(a1 + 2, a2 + 2, 0x1D8uLL);
  v7 = *(int *)(a3 + 28);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = (int *)type metadata accessor for Wallpaper(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = (int *)type metadata accessor for PosterArchive();
    v14 = *((_QWORD *)v13 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v9, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v9[11];
      v8[10] = v9[10];
      v8[11] = v16;
      v8[12] = v9[12];
      *(_OWORD *)((char *)v8 + 202) = *(_OWORD *)((char *)v9 + 202);
      v17 = v9[7];
      v8[6] = v9[6];
      v8[7] = v17;
      v18 = v9[9];
      v8[8] = v9[8];
      v8[9] = v18;
      v19 = v9[3];
      v8[2] = v9[2];
      v8[3] = v19;
      v20 = v9[5];
      v8[4] = v9[4];
      v8[5] = v20;
      v21 = v9[1];
      *v8 = *v9;
      v8[1] = v21;
      memcpy(v8 + 14, v9 + 14, 0x221uLL);
      v22 = v13[6];
      v42 = (char *)v8 + v22;
      v23 = (char *)v9 + v22;
      v24 = sub_1AD63B084();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v42, v23, v24);
      *(_QWORD *)((char *)v8 + v13[7]) = *(_QWORD *)((char *)v9 + v13[7]);
      *(_QWORD *)((char *)v8 + v13[8]) = *(_QWORD *)((char *)v9 + v13[8]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v14 + 56))(v8, 0, 1, v13);
    }
    v25 = v10[5];
    v26 = (_OWORD *)((char *)v8 + v25);
    v27 = (_OWORD *)((char *)v9 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    memcpy((char *)v8 + v10[6], (char *)v9 + v10[6], 0x1B8uLL);
    v29 = v10[7];
    v30 = (_OWORD *)((char *)v8 + v29);
    v31 = (_OWORD *)((char *)v9 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    memcpy((char *)v8 + v10[8], (char *)v9 + v10[8], 0x1B8uLL);
    *(_QWORD *)((char *)v8 + v10[9]) = *(_QWORD *)((char *)v9 + v10[9]);
    v33 = v10[10];
    v34 = (_OWORD *)((char *)v8 + v33);
    v35 = (_OWORD *)((char *)v9 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v35[5];
    v34[4] = v35[4];
    v34[5] = v37;
    v38 = v35[3];
    v34[2] = v35[2];
    v34[3] = v38;
    *(_OWORD *)((char *)v34 + 137) = *(_OWORD *)((char *)v35 + 137);
    v39 = v35[8];
    v40 = v35[6];
    v34[7] = v35[7];
    v34[8] = v39;
    v34[6] = v40;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_1AD406A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  int *v61;
  uint64_t v62;
  uint64_t (*v63)(_OWORD *, uint64_t, int *);
  int v64;
  int v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t (*v72)(_OWORD *, uint64_t, int *);
  int v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  __int128 v100;
  uint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  __int128 v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _OWORD *v184;
  __int128 v185;
  uint64_t v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _OWORD *v206;
  __int128 v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _OWORD *v252;
  __int128 v253;
  uint64_t v254;
  unint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_15;
  if (!v8)
  {
    sub_1AD28AA98((_QWORD *)(a1 + 32));
LABEL_15:
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x1D8uLL);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  swift_release();
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11 = (_OWORD *)(a1 + 64);
  v12 = (_OWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 88))
  {
LABEL_17:
    v28 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v28;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a2 + 88))
  {
    sub_1AD046A30((_QWORD *)(a1 + 64));
    goto LABEL_17;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *v11 = *v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v11 = (_OWORD *)(a1 + 120);
  v12 = (_OWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_QWORD *)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 224);
  v19 = *(_QWORD *)(a1 + 240);
  v20 = *(_QWORD *)(a1 + 256);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a2 + 224);
  v26 = *(_QWORD *)(a2 + 240);
  v27 = *(_QWORD *)(a2 + 256);
  if (v14 >> 1 != 0xFFFFFFFF
    || (v16 | (unint64_t)v15) > 1
    || v18 & 0xFFFFFFFFFFFFFEFELL | v17 & 0xFFFFFFFFFFFF00FELL
    || (v20 | v19) >= 2)
  {
    if (v21 >> 1 != 0xFFFFFFFF
      || (v23 | v22) > 1
      || v25 & 0xFFFFFFFFFFFFFEFELL | v24 & 0xFFFFFFFFFFFF00FELL
      || (v27 | v26) >= 2)
    {
      v119 = *(_QWORD *)(a2 + 136);
      v120 = *(_QWORD *)(a2 + 152);
      v121 = *(_QWORD *)(a2 + 168);
      v122 = a3;
      v123 = *(_QWORD *)(a2 + 184);
      v124 = *(_QWORD *)(a2 + 216);
      v125 = *(_QWORD *)(a2 + 232);
      v126 = *(_QWORD *)(a2 + 248);
      v334 = *(_QWORD *)(a1 + 128);
      v337 = *(_QWORD *)(a1 + 120);
      v340 = *(_QWORD *)(a1 + 152);
      v344 = *(_QWORD *)(a1 + 168);
      v328 = *(_QWORD *)(a1 + 184);
      v331 = *(_QWORD *)(a1 + 136);
      v127 = *(_OWORD *)(a1 + 200);
      v322 = *(_QWORD *)(a1 + 232);
      v325 = *(_QWORD *)(a1 + 216);
      v128 = *(_QWORD *)(a1 + 248);
      v129 = *(_OWORD *)(a1 + 264);
      v130 = *(_OWORD *)(a1 + 280);
      v132 = *(_QWORD *)(a1 + 296);
      v131 = *(_QWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = v119;
      *(_QWORD *)(a1 + 144) = v21;
      *(_QWORD *)(a1 + 152) = v120;
      *(_QWORD *)(a1 + 160) = v22;
      *(_QWORD *)(a1 + 168) = v121;
      *(_QWORD *)(a1 + 176) = v23;
      *(_QWORD *)(a1 + 184) = v123;
      *(_QWORD *)(a1 + 192) = v24;
      a3 = v122;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = v124;
      *(_QWORD *)(a1 + 224) = v25;
      *(_QWORD *)(a1 + 232) = v125;
      *(_QWORD *)(a1 + 240) = v26;
      *(_QWORD *)(a1 + 248) = v126;
      *(_QWORD *)(a1 + 256) = v27;
      v133 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v133;
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      sub_1AD00E8B0(v337, v334, v331, v14, v340, v15, v344, v16, v328, v17, v127, *((uint64_t *)&v127 + 1), v325, v18, v322, v19, v128, v20, v129,
        *((uint64_t *)&v129 + 1),
        v130,
        *((uint64_t *)&v130 + 1),
        v132,
        v131);
      goto LABEL_19;
    }
    sub_1AD148B34(a1 + 120);
  }
LABEL_18:
  v29 = v12[9];
  v11[8] = v12[8];
  v11[9] = v29;
  v30 = v12[11];
  v11[10] = v12[10];
  v11[11] = v30;
  v31 = v12[5];
  v11[4] = v12[4];
  v11[5] = v31;
  v32 = v12[7];
  v11[6] = v12[6];
  v11[7] = v32;
  v33 = v12[1];
  *v11 = *v12;
  v11[1] = v33;
  v34 = v12[3];
  v11[2] = v12[2];
  v11[3] = v34;
LABEL_19:
  v35 = *(_QWORD *)(a1 + 312);
  v36 = *(_QWORD *)(a1 + 320);
  v37 = *(_QWORD *)(a1 + 328);
  v38 = *(_QWORD *)(a1 + 336);
  v39 = *(_QWORD *)(a1 + 344);
  v40 = *(_QWORD *)(a1 + 352);
  v41 = *(_QWORD *)(a1 + 360);
  v42 = *(_QWORD *)(a1 + 368);
  v43 = *(_OWORD *)(a1 + 376);
  v44 = *(_OWORD *)(a1 + 392);
  v45 = *(_OWORD *)(a1 + 408);
  v46 = *(_OWORD *)(a1 + 424);
  v47 = *(_OWORD *)(a1 + 440);
  v48 = *(_OWORD *)(a1 + 456);
  v49 = *(_OWORD *)(a1 + 472);
  v50 = *(_QWORD *)(a1 + 488);
  v51 = *(_QWORD *)(a1 + 496);
  v52 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v52;
  v53 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v53;
  v54 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v54;
  v55 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v55;
  v56 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v56;
  v57 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v57;
  sub_1AD00E8B0(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((unint64_t *)&v47 + 1), v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    v51);
LABEL_20:
  v58 = *(int *)(a3 + 28);
  v59 = (_OWORD *)(a1 + v58);
  v60 = (_OWORD *)(a2 + v58);
  v61 = (int *)type metadata accessor for Wallpaper(0);
  v62 = *((_QWORD *)v61 - 1);
  v63 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v62 + 48);
  v64 = v63(v59, 1, v61);
  v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (v65)
    {
      sub_1AD066230((uint64_t)v59, type metadata accessor for Wallpaper);
      goto LABEL_26;
    }
    v70 = (int *)type metadata accessor for PosterArchive();
    v71 = *((_QWORD *)v70 - 1);
    v72 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v71 + 48);
    v73 = v72(v59, 1, v70);
    v74 = v72(v60, 1, v70);
    v347 = a3;
    if (v73)
    {
      if (!v74)
      {
        v75 = v60[11];
        v59[10] = v60[10];
        v59[11] = v75;
        v59[12] = v60[12];
        *(_OWORD *)((char *)v59 + 202) = *(_OWORD *)((char *)v60 + 202);
        v76 = v60[7];
        v59[6] = v60[6];
        v59[7] = v76;
        v77 = v60[9];
        v59[8] = v60[8];
        v59[9] = v77;
        v78 = v60[3];
        v59[2] = v60[2];
        v59[3] = v78;
        v79 = v60[5];
        v59[4] = v60[4];
        v59[5] = v79;
        v80 = v60[1];
        *v59 = *v60;
        v59[1] = v80;
        memcpy(v59 + 14, v60 + 14, 0x221uLL);
        v81 = v70[6];
        v82 = (char *)v59 + v81;
        v83 = (char *)v60 + v81;
        v84 = sub_1AD63B084();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
        *(_QWORD *)((char *)v59 + v70[7]) = *(_QWORD *)((char *)v60 + v70[7]);
        *(_QWORD *)((char *)v59 + v70[8]) = *(_QWORD *)((char *)v60 + v70[8]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v71 + 56))(v59, 0, 1, v70);
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (v74)
    {
      sub_1AD066230((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PosterArchive);
LABEL_34:
      v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      goto LABEL_35;
    }
    if (*((_QWORD *)v59 + 23))
    {
      if (*((_QWORD *)v60 + 23))
      {
        *v59 = *v60;
        *((_WORD *)v59 + 8) = *((_WORD *)v60 + 8);
        *((_BYTE *)v59 + 18) = *((_BYTE *)v60 + 18);
        if (*((_QWORD *)v59 + 9) != 1)
        {
          v159 = *((_QWORD *)v60 + 9);
          if (v159 != 1)
          {
            *(_OWORD *)((char *)v59 + 24) = *(_OWORD *)((char *)v60 + 24);
            *(_OWORD *)((char *)v59 + 40) = *(_OWORD *)((char *)v60 + 40);
            *((_BYTE *)v59 + 56) = *((_BYTE *)v60 + 56);
            *((_QWORD *)v59 + 8) = *((_QWORD *)v60 + 8);
            *((_QWORD *)v59 + 9) = v159;
            swift_bridgeObjectRelease();
LABEL_113:
            if (*((_QWORD *)v59 + 11) != 1)
            {
              v308 = *((_QWORD *)v60 + 11);
              if (v308 != 1)
              {
                *((_BYTE *)v59 + 80) = *((_BYTE *)v60 + 80);
                *((_QWORD *)v59 + 11) = v308;
                swift_bridgeObjectRelease();
                v59[6] = v60[6];
                *((_BYTE *)v59 + 112) = *((_BYTE *)v60 + 112);
                *((_QWORD *)v59 + 15) = *((_QWORD *)v60 + 15);
                swift_bridgeObjectRelease();
                v311 = v60[9];
                v59[8] = v60[8];
                v59[9] = v311;
                goto LABEL_118;
              }
              sub_1AD3AD2A8((uint64_t)(v59 + 5));
            }
            v309 = v60[8];
            v59[7] = v60[7];
            v59[8] = v309;
            v59[9] = v60[9];
            v310 = v60[6];
            v59[5] = v60[5];
            v59[6] = v310;
LABEL_118:
            *((_BYTE *)v59 + 160) = *((_BYTE *)v60 + 160);
            *((_BYTE *)v59 + 161) = *((_BYTE *)v60 + 161);
            *((_QWORD *)v59 + 21) = *((_QWORD *)v60 + 21);
            *((_BYTE *)v59 + 176) = *((_BYTE *)v60 + 176);
            *(_OWORD *)((char *)v59 + 184) = *(_OWORD *)((char *)v60 + 184);
            swift_release();
            v312 = (_QWORD *)v60 + 25;
            if (*((_QWORD *)v59 + 26) != 1)
            {
              v313 = *((_QWORD *)v60 + 26);
              if (v313 != 1)
              {
                *((_QWORD *)v59 + 25) = *v312;
                *((_QWORD *)v59 + 26) = v313;
                swift_bridgeObjectRelease();
                goto LABEL_123;
              }
              sub_1AD009758((uint64_t)v59 + 200, &qword_1ED2E3198);
            }
            *(_OWORD *)((char *)v59 + 200) = *(_OWORD *)v312;
LABEL_123:
            *((_WORD *)v59 + 108) = *((_WORD *)v60 + 108);
            if (a1 != a2)
            {
              sub_1AD28B36C((uint64_t)(v59 + 14));
              memcpy(v59 + 14, v60 + 14, 0x221uLL);
            }
            v314 = v70[6];
            v315 = (char *)v59 + v314;
            v316 = (char *)v60 + v314;
            v317 = sub_1AD63B084();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v317 - 8) + 40))(v315, v316, v317);
            *(_QWORD *)((char *)v59 + v70[7]) = *(_QWORD *)((char *)v60 + v70[7]);
            *(_QWORD *)((char *)v59 + v70[8]) = *(_QWORD *)((char *)v60 + v70[8]);
LABEL_35:
            v114 = v61[5];
            v115 = (char *)v59 + v114;
            v116 = (char *)v60 + v114;
            *(_OWORD *)((char *)v59 + v114) = *(_OWORD *)((char *)v60 + v114);
            swift_release();
            v117 = v116 + 16;
            if (*((_QWORD *)v115 + 3) != 1)
            {
              v118 = *((_QWORD *)v116 + 3);
              if (v118 != 1)
              {
                *((_QWORD *)v115 + 2) = *v117;
                *((_QWORD *)v115 + 3) = v118;
                swift_bridgeObjectRelease();
                goto LABEL_41;
              }
              sub_1AD009758((uint64_t)(v115 + 16), &qword_1ED2E3198);
            }
            *((_OWORD *)v115 + 1) = *(_OWORD *)v117;
LABEL_41:
            v134 = v61[6];
            v135 = (uint64_t)v59 + v134;
            v136 = (_OWORD *)((char *)v60 + v134);
            if (*(_QWORD *)((char *)v59 + v134 + 272) >> 1 == 0xFFFFFFFFLL
              && (*(_QWORD *)(v135 + 304) | *(_QWORD *)(v135 + 288)) <= 1
              && !(*(_QWORD *)(v135 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v135 + 320) & 0xFFFFFFFFFFFF00FELL)
              && (*(_QWORD *)(v135 + 384) | *(_QWORD *)(v135 + 368)) < 2)
            {
              goto LABEL_50;
            }
            if (*((_QWORD *)v136 + 34) >> 1 == 0xFFFFFFFFLL
              && (*((_QWORD *)v136 + 38) | *((_QWORD *)v136 + 36)) <= 1
              && !(v136[22] & 0xFFFFFFFFFFFFFEFELL | v136[20] & 0xFFFFFFFFFFFF00FELL)
              && (*((_QWORD *)v136 + 48) | *((_QWORD *)v136 + 46)) < 2)
            {
              sub_1AD406748((_QWORD *)v135);
LABEL_50:
              memcpy((void *)v135, v136, 0x1B8uLL);
              goto LABEL_72;
            }
            if (*(_QWORD *)(v135 + 24))
            {
              if (*((_QWORD *)v136 + 3))
              {
                __swift_destroy_boxed_opaque_existential_1(v135);
                v137 = v136[1];
                *(_OWORD *)v135 = *v136;
                *(_OWORD *)(v135 + 16) = v137;
                v138 = *((_QWORD *)v136 + 5);
                *(_QWORD *)(v135 + 32) = *((_QWORD *)v136 + 4);
                *(_QWORD *)(v135 + 40) = v138;
                *(_BYTE *)(v135 + 48) = *((_BYTE *)v136 + 48);
                v139 = *(_QWORD *)(v135 + 80);
                v140 = *(_QWORD *)(v135 + 96);
                v141 = *(_QWORD *)(v135 + 112);
                v142 = *(_QWORD *)(v135 + 128);
                v143 = *(_QWORD *)(v135 + 160);
                v144 = *(_QWORD *)(v135 + 176);
                v145 = *(_QWORD *)(v135 + 192);
                v146 = *((_QWORD *)v136 + 10);
                v147 = *((_QWORD *)v136 + 12);
                v148 = *((_QWORD *)v136 + 14);
                v149 = *((_QWORD *)v136 + 16);
                v150 = *((_QWORD *)v136 + 20);
                v151 = *((_QWORD *)v136 + 22);
                v152 = *((_QWORD *)v136 + 24);
                if (v139 >> 1 != 0xFFFFFFFF
                  || (v141 | (unint64_t)v140) > 1
                  || v143 & 0xFFFFFFFFFFFFFEFELL | v142 & 0xFFFFFFFFFFFF00FELL
                  || (v145 | v144) >= 2)
                {
                  if (v146 >> 1 != 0xFFFFFFFF
                    || (v148 | v147) > 1
                    || v150 & 0xFFFFFFFFFFFFFEFELL | v149 & 0xFFFFFFFFFFFF00FELL
                    || (v152 | v151) >= 2)
                  {
                    v286 = *((_QWORD *)v136 + 9);
                    v287 = *((_QWORD *)v136 + 11);
                    v288 = *((_QWORD *)v136 + 13);
                    v289 = *((_QWORD *)v136 + 15);
                    v290 = *((_QWORD *)v136 + 19);
                    v291 = *((_QWORD *)v136 + 21);
                    v318 = *((_QWORD *)v136 + 23);
                    v335 = *(_QWORD *)(v135 + 64);
                    v338 = *(_QWORD *)(v135 + 56);
                    v341 = *(_QWORD *)(v135 + 88);
                    v345 = *(_QWORD *)(v135 + 104);
                    v329 = *(_QWORD *)(v135 + 120);
                    v332 = *(_QWORD *)(v135 + 72);
                    v292 = *(_OWORD *)(v135 + 136);
                    v323 = *(_QWORD *)(v135 + 168);
                    v326 = *(_QWORD *)(v135 + 152);
                    v320 = *(_QWORD *)(v135 + 184);
                    v293 = *(_OWORD *)(v135 + 200);
                    v294 = *(_OWORD *)(v135 + 216);
                    v296 = *(_QWORD *)(v135 + 232);
                    v295 = *(_QWORD *)(v135 + 240);
                    *(_OWORD *)(v135 + 56) = *(_OWORD *)((char *)v136 + 56);
                    *(_QWORD *)(v135 + 72) = v286;
                    *(_QWORD *)(v135 + 80) = v146;
                    *(_QWORD *)(v135 + 88) = v287;
                    *(_QWORD *)(v135 + 96) = v147;
                    *(_QWORD *)(v135 + 104) = v288;
                    *(_QWORD *)(v135 + 112) = v148;
                    *(_QWORD *)(v135 + 120) = v289;
                    *(_QWORD *)(v135 + 128) = v149;
                    *(_OWORD *)(v135 + 136) = *(_OWORD *)((char *)v136 + 136);
                    *(_QWORD *)(v135 + 152) = v290;
                    *(_QWORD *)(v135 + 160) = v150;
                    *(_QWORD *)(v135 + 168) = v291;
                    *(_QWORD *)(v135 + 176) = v151;
                    *(_QWORD *)(v135 + 184) = v318;
                    *(_QWORD *)(v135 + 192) = v152;
                    *(_OWORD *)(v135 + 200) = *(_OWORD *)((char *)v136 + 200);
                    *(_OWORD *)(v135 + 216) = *(_OWORD *)((char *)v136 + 216);
                    *(_OWORD *)(v135 + 232) = *(_OWORD *)((char *)v136 + 232);
                    sub_1AD00E8B0(v338, v335, v332, v139, v341, v140, v345, v141, v329, v142, v292, *((uint64_t *)&v292 + 1), v326, v143, v323, v144, v320, v145, v293,
                      *((uint64_t *)&v293 + 1),
                      v294,
                      *((uint64_t *)&v294 + 1),
                      v296,
                      v295);
                    goto LABEL_71;
                  }
                  sub_1AD148B34(v135 + 56);
                }
                v153 = *(_OWORD *)((char *)v136 + 200);
                *(_OWORD *)(v135 + 184) = *(_OWORD *)((char *)v136 + 184);
                *(_OWORD *)(v135 + 200) = v153;
                v154 = *(_OWORD *)((char *)v136 + 232);
                *(_OWORD *)(v135 + 216) = *(_OWORD *)((char *)v136 + 216);
                *(_OWORD *)(v135 + 232) = v154;
                v155 = *(_OWORD *)((char *)v136 + 136);
                *(_OWORD *)(v135 + 120) = *(_OWORD *)((char *)v136 + 120);
                *(_OWORD *)(v135 + 136) = v155;
                v156 = *(_OWORD *)((char *)v136 + 168);
                *(_OWORD *)(v135 + 152) = *(_OWORD *)((char *)v136 + 152);
                *(_OWORD *)(v135 + 168) = v156;
                v157 = *(_OWORD *)((char *)v136 + 72);
                *(_OWORD *)(v135 + 56) = *(_OWORD *)((char *)v136 + 56);
                *(_OWORD *)(v135 + 72) = v157;
                v158 = *(_OWORD *)((char *)v136 + 104);
                *(_OWORD *)(v135 + 88) = *(_OWORD *)((char *)v136 + 88);
                *(_OWORD *)(v135 + 104) = v158;
LABEL_71:
                v168 = *(_QWORD *)(v135 + 248);
                v169 = *(_QWORD *)(v135 + 256);
                v170 = v135 + 248;
                v171 = *(_QWORD *)(v170 + 16);
                v172 = *(_QWORD *)(v170 + 24);
                v173 = *(_QWORD *)(v170 + 32);
                v174 = *(_QWORD *)(v170 + 40);
                v175 = *(_QWORD *)(v170 + 48);
                v176 = *(_QWORD *)(v170 + 56);
                v177 = *(_OWORD *)(v170 + 64);
                v178 = *(_OWORD *)(v170 + 80);
                v179 = *(_OWORD *)(v170 + 96);
                v180 = *(_OWORD *)(v170 + 112);
                v181 = *(_OWORD *)(v170 + 128);
                v182 = *(_OWORD *)(v170 + 144);
                v183 = *(_OWORD *)(v170 + 160);
                v185 = *(_OWORD *)((char *)v136 + 248);
                v184 = (_OWORD *)((char *)v136 + 248);
                v186 = *(_QWORD *)(v170 + 176);
                v187 = *(_QWORD *)(v170 + 184);
                v188 = v184[1];
                v189 = v184[2];
                *(_OWORD *)v170 = v185;
                *(_OWORD *)(v170 + 16) = v188;
                v190 = v184[3];
                v191 = v184[4];
                *(_OWORD *)(v170 + 32) = v189;
                *(_OWORD *)(v170 + 48) = v190;
                v192 = v184[5];
                v193 = v184[6];
                *(_OWORD *)(v170 + 64) = v191;
                *(_OWORD *)(v170 + 80) = v192;
                v194 = v184[7];
                v195 = v184[8];
                *(_OWORD *)(v170 + 96) = v193;
                *(_OWORD *)(v170 + 112) = v194;
                v196 = v184[9];
                v197 = v184[10];
                *(_OWORD *)(v170 + 128) = v195;
                *(_OWORD *)(v170 + 144) = v196;
                v198 = v184[11];
                *(_OWORD *)(v170 + 160) = v197;
                *(_OWORD *)(v170 + 176) = v198;
                sub_1AD00E8B0(v168, v169, v171, v172, v173, v174, v175, v176, v177, *((uint64_t *)&v177 + 1), v178, *((uint64_t *)&v178 + 1), v179, *((uint64_t *)&v179 + 1), v180, *((uint64_t *)&v180 + 1), v181, *((unint64_t *)&v181 + 1), v182,
                  *((uint64_t *)&v182 + 1),
                  v183,
                  *((uint64_t *)&v183 + 1),
                  v186,
                  v187);
LABEL_72:
                v199 = v61[7];
                v200 = (char *)v59 + v199;
                v201 = (char *)v60 + v199;
                *(_OWORD *)((char *)v59 + v199) = *(_OWORD *)((char *)v60 + v199);
                swift_release();
                v202 = v201 + 16;
                if (*((_QWORD *)v200 + 3) != 1)
                {
                  v203 = *((_QWORD *)v201 + 3);
                  if (v203 != 1)
                  {
                    *((_QWORD *)v200 + 2) = *v202;
                    *((_QWORD *)v200 + 3) = v203;
                    swift_bridgeObjectRelease();
                    goto LABEL_77;
                  }
                  sub_1AD009758((uint64_t)(v200 + 16), &qword_1ED2E3198);
                }
                *((_OWORD *)v200 + 1) = *(_OWORD *)v202;
LABEL_77:
                a3 = v347;
                v204 = v61[8];
                v205 = (uint64_t)v59 + v204;
                v206 = (_OWORD *)((char *)v60 + v204);
                if (*(_QWORD *)((char *)v59 + v204 + 272) >> 1 == 0xFFFFFFFFLL
                  && (*(_QWORD *)(v205 + 304) | *(_QWORD *)(v205 + 288)) <= 1
                  && !(*(_QWORD *)(v205 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v205 + 320) & 0xFFFFFFFFFFFF00FELL)
                  && (*(_QWORD *)(v205 + 384) | *(_QWORD *)(v205 + 368)) < 2)
                {
                  goto LABEL_86;
                }
                if (*((_QWORD *)v206 + 34) >> 1 == 0xFFFFFFFFLL
                  && (*((_QWORD *)v206 + 38) | *((_QWORD *)v206 + 36)) <= 1
                  && !(v206[22] & 0xFFFFFFFFFFFFFEFELL | v206[20] & 0xFFFFFFFFFFFF00FELL)
                  && (*((_QWORD *)v206 + 48) | *((_QWORD *)v206 + 46)) < 2)
                {
                  sub_1AD406748((_QWORD *)v205);
LABEL_86:
                  memcpy((void *)v205, v206, 0x1B8uLL);
                  goto LABEL_102;
                }
                if (*(_QWORD *)(v205 + 24))
                {
                  if (*((_QWORD *)v206 + 3))
                  {
                    __swift_destroy_boxed_opaque_existential_1(v205);
                    v207 = v206[1];
                    *(_OWORD *)v205 = *v206;
                    *(_OWORD *)(v205 + 16) = v207;
                    v208 = *((_QWORD *)v206 + 5);
                    *(_QWORD *)(v205 + 32) = *((_QWORD *)v206 + 4);
                    *(_QWORD *)(v205 + 40) = v208;
                    *(_BYTE *)(v205 + 48) = *((_BYTE *)v206 + 48);
                    v209 = *(_QWORD *)(v205 + 80);
                    v210 = *(_QWORD *)(v205 + 96);
                    v211 = *(_QWORD *)(v205 + 112);
                    v212 = *(_QWORD *)(v205 + 128);
                    v213 = *(_QWORD *)(v205 + 160);
                    v214 = *(_QWORD *)(v205 + 176);
                    v215 = *(_QWORD *)(v205 + 192);
                    v216 = *((_QWORD *)v206 + 10);
                    v217 = *((_QWORD *)v206 + 12);
                    v218 = *((_QWORD *)v206 + 14);
                    v219 = *((_QWORD *)v206 + 16);
                    v220 = *((_QWORD *)v206 + 20);
                    v221 = *((_QWORD *)v206 + 22);
                    v222 = *((_QWORD *)v206 + 24);
                    if (v209 >> 1 != 0xFFFFFFFF
                      || (v211 | (unint64_t)v210) > 1
                      || v213 & 0xFFFFFFFFFFFFFEFELL | v212 & 0xFFFFFFFFFFFF00FELL
                      || (v215 | v214) >= 2)
                    {
                      if (v216 >> 1 != 0xFFFFFFFF
                        || (v218 | v217) > 1
                        || v220 & 0xFFFFFFFFFFFFFEFELL | v219 & 0xFFFFFFFFFFFF00FELL
                        || (v222 | v221) >= 2)
                      {
                        v297 = *((_QWORD *)v206 + 9);
                        v298 = *((_QWORD *)v206 + 11);
                        v299 = *((_QWORD *)v206 + 13);
                        v300 = *((_QWORD *)v206 + 15);
                        v301 = *((_QWORD *)v206 + 19);
                        v302 = *((_QWORD *)v206 + 21);
                        v319 = *((_QWORD *)v206 + 23);
                        v336 = *(_QWORD *)(v205 + 64);
                        v339 = *(_QWORD *)(v205 + 56);
                        v342 = *(_QWORD *)(v205 + 88);
                        v346 = *(_QWORD *)(v205 + 104);
                        v330 = *(_QWORD *)(v205 + 120);
                        v333 = *(_QWORD *)(v205 + 72);
                        v303 = *(_OWORD *)(v205 + 136);
                        v324 = *(_QWORD *)(v205 + 168);
                        v327 = *(_QWORD *)(v205 + 152);
                        v321 = *(_QWORD *)(v205 + 184);
                        v304 = *(_OWORD *)(v205 + 200);
                        v305 = *(_OWORD *)(v205 + 216);
                        v307 = *(_QWORD *)(v205 + 232);
                        v306 = *(_QWORD *)(v205 + 240);
                        *(_OWORD *)(v205 + 56) = *(_OWORD *)((char *)v206 + 56);
                        *(_QWORD *)(v205 + 72) = v297;
                        *(_QWORD *)(v205 + 80) = v216;
                        *(_QWORD *)(v205 + 88) = v298;
                        *(_QWORD *)(v205 + 96) = v217;
                        *(_QWORD *)(v205 + 104) = v299;
                        *(_QWORD *)(v205 + 112) = v218;
                        *(_QWORD *)(v205 + 120) = v300;
                        *(_QWORD *)(v205 + 128) = v219;
                        *(_OWORD *)(v205 + 136) = *(_OWORD *)((char *)v206 + 136);
                        *(_QWORD *)(v205 + 152) = v301;
                        *(_QWORD *)(v205 + 160) = v220;
                        *(_QWORD *)(v205 + 168) = v302;
                        *(_QWORD *)(v205 + 176) = v221;
                        *(_QWORD *)(v205 + 184) = v319;
                        *(_QWORD *)(v205 + 192) = v222;
                        *(_OWORD *)(v205 + 200) = *(_OWORD *)((char *)v206 + 200);
                        *(_OWORD *)(v205 + 216) = *(_OWORD *)((char *)v206 + 216);
                        *(_OWORD *)(v205 + 232) = *(_OWORD *)((char *)v206 + 232);
                        sub_1AD00E8B0(v339, v336, v333, v209, v342, v210, v346, v211, v330, v212, v303, *((uint64_t *)&v303 + 1), v327, v213, v324, v214, v321, v215, v304,
                          *((uint64_t *)&v304 + 1),
                          v305,
                          *((uint64_t *)&v305 + 1),
                          v307,
                          v306);
                        a3 = v347;
                        goto LABEL_101;
                      }
                      sub_1AD148B34(v205 + 56);
                    }
                    v223 = *(_OWORD *)((char *)v206 + 200);
                    *(_OWORD *)(v205 + 184) = *(_OWORD *)((char *)v206 + 184);
                    *(_OWORD *)(v205 + 200) = v223;
                    v224 = *(_OWORD *)((char *)v206 + 232);
                    *(_OWORD *)(v205 + 216) = *(_OWORD *)((char *)v206 + 216);
                    *(_OWORD *)(v205 + 232) = v224;
                    v225 = *(_OWORD *)((char *)v206 + 136);
                    *(_OWORD *)(v205 + 120) = *(_OWORD *)((char *)v206 + 120);
                    *(_OWORD *)(v205 + 136) = v225;
                    v226 = *(_OWORD *)((char *)v206 + 168);
                    *(_OWORD *)(v205 + 152) = *(_OWORD *)((char *)v206 + 152);
                    *(_OWORD *)(v205 + 168) = v226;
                    v227 = *(_OWORD *)((char *)v206 + 72);
                    *(_OWORD *)(v205 + 56) = *(_OWORD *)((char *)v206 + 56);
                    *(_OWORD *)(v205 + 72) = v227;
                    v228 = *(_OWORD *)((char *)v206 + 104);
                    *(_OWORD *)(v205 + 88) = *(_OWORD *)((char *)v206 + 88);
                    *(_OWORD *)(v205 + 104) = v228;
                    a3 = v347;
LABEL_101:
                    v236 = *(_QWORD *)(v205 + 248);
                    v237 = *(_QWORD *)(v205 + 256);
                    v238 = v205 + 248;
                    v239 = *(_QWORD *)(v238 + 16);
                    v240 = *(_QWORD *)(v238 + 24);
                    v241 = *(_QWORD *)(v238 + 32);
                    v242 = *(_QWORD *)(v238 + 40);
                    v243 = *(_QWORD *)(v238 + 48);
                    v244 = *(_QWORD *)(v238 + 56);
                    v245 = *(_OWORD *)(v238 + 64);
                    v246 = *(_OWORD *)(v238 + 80);
                    v247 = *(_OWORD *)(v238 + 96);
                    v248 = *(_OWORD *)(v238 + 112);
                    v249 = *(_OWORD *)(v238 + 128);
                    v250 = *(_OWORD *)(v238 + 144);
                    v251 = *(_OWORD *)(v238 + 160);
                    v253 = *(_OWORD *)((char *)v206 + 248);
                    v252 = (_OWORD *)((char *)v206 + 248);
                    v254 = *(_QWORD *)(v238 + 176);
                    v255 = *(_QWORD *)(v238 + 184);
                    v256 = v252[1];
                    v257 = v252[2];
                    *(_OWORD *)v238 = v253;
                    *(_OWORD *)(v238 + 16) = v256;
                    v258 = v252[3];
                    v259 = v252[4];
                    *(_OWORD *)(v238 + 32) = v257;
                    *(_OWORD *)(v238 + 48) = v258;
                    v260 = v252[5];
                    v261 = v252[6];
                    *(_OWORD *)(v238 + 64) = v259;
                    *(_OWORD *)(v238 + 80) = v260;
                    v262 = v252[7];
                    v263 = v252[8];
                    *(_OWORD *)(v238 + 96) = v261;
                    *(_OWORD *)(v238 + 112) = v262;
                    v264 = v252[9];
                    v265 = v252[10];
                    *(_OWORD *)(v238 + 128) = v263;
                    *(_OWORD *)(v238 + 144) = v264;
                    v266 = v252[11];
                    *(_OWORD *)(v238 + 160) = v265;
                    *(_OWORD *)(v238 + 176) = v266;
                    sub_1AD00E8B0(v236, v237, v239, v240, v241, v242, v243, v244, v245, *((uint64_t *)&v245 + 1), v246, *((uint64_t *)&v246 + 1), v247, *((uint64_t *)&v247 + 1), v248, *((uint64_t *)&v248 + 1), v249, *((unint64_t *)&v249 + 1), v250,
                      *((uint64_t *)&v250 + 1),
                      v251,
                      *((uint64_t *)&v251 + 1),
                      v254,
                      v255);
LABEL_102:
                    *(_QWORD *)((char *)v59 + v61[9]) = *(_QWORD *)((char *)v60 + v61[9]);
                    v267 = v61[10];
                    v268 = (uint64_t)v59 + v267;
                    v269 = (char *)v60 + v267;
                    if (*(_QWORD *)(v268 + 8))
                    {
                      v270 = *((_QWORD *)v269 + 1);
                      if (v270)
                      {
                        *(_QWORD *)v268 = *(_QWORD *)v269;
                        *(_QWORD *)(v268 + 8) = v270;
                        swift_bridgeObjectRelease();
                        *(_OWORD *)(v268 + 16) = *((_OWORD *)v269 + 1);
                        swift_release();
                        *(_QWORD *)(v268 + 32) = *((_QWORD *)v269 + 4);
                        *(_BYTE *)(v268 + 40) = v269[40];
                        *(_OWORD *)(v268 + 48) = *((_OWORD *)v269 + 3);
                        swift_release();
                        *(_QWORD *)(v268 + 64) = *((_QWORD *)v269 + 8);
                        *(_BYTE *)(v268 + 72) = v269[72];
                        v271 = *((_OWORD *)v269 + 6);
                        *(_OWORD *)(v268 + 80) = *((_OWORD *)v269 + 5);
                        *(_OWORD *)(v268 + 96) = v271;
                        *(_BYTE *)(v268 + 112) = v269[112];
                        *(_BYTE *)(v268 + 113) = v269[113];
                        *(_OWORD *)(v268 + 120) = *(_OWORD *)(v269 + 120);
                        *(_OWORD *)(v268 + 136) = *(_OWORD *)(v269 + 136);
                        *(_BYTE *)(v268 + 152) = v269[152];
                        goto LABEL_107;
                      }
                      sub_1AD406774(v268);
                    }
                    v272 = *((_OWORD *)v269 + 7);
                    *(_OWORD *)(v268 + 96) = *((_OWORD *)v269 + 6);
                    *(_OWORD *)(v268 + 112) = v272;
                    *(_OWORD *)(v268 + 128) = *((_OWORD *)v269 + 8);
                    *(_OWORD *)(v268 + 137) = *(_OWORD *)(v269 + 137);
                    v273 = *((_OWORD *)v269 + 3);
                    *(_OWORD *)(v268 + 32) = *((_OWORD *)v269 + 2);
                    *(_OWORD *)(v268 + 48) = v273;
                    v274 = *((_OWORD *)v269 + 5);
                    *(_OWORD *)(v268 + 64) = *((_OWORD *)v269 + 4);
                    *(_OWORD *)(v268 + 80) = v274;
                    v275 = *((_OWORD *)v269 + 1);
                    *(_OWORD *)v268 = *(_OWORD *)v269;
                    *(_OWORD *)(v268 + 16) = v275;
                    goto LABEL_107;
                  }
                  sub_1AD046A30((_QWORD *)v205);
                }
                v229 = v206[13];
                *(_OWORD *)(v205 + 192) = v206[12];
                *(_OWORD *)(v205 + 208) = v229;
                *(_OWORD *)(v205 + 224) = v206[14];
                *(_QWORD *)(v205 + 240) = *((_QWORD *)v206 + 30);
                v230 = v206[9];
                *(_OWORD *)(v205 + 128) = v206[8];
                *(_OWORD *)(v205 + 144) = v230;
                v231 = v206[11];
                *(_OWORD *)(v205 + 160) = v206[10];
                *(_OWORD *)(v205 + 176) = v231;
                v232 = v206[5];
                *(_OWORD *)(v205 + 64) = v206[4];
                *(_OWORD *)(v205 + 80) = v232;
                v233 = v206[7];
                *(_OWORD *)(v205 + 96) = v206[6];
                *(_OWORD *)(v205 + 112) = v233;
                v234 = v206[1];
                *(_OWORD *)v205 = *v206;
                *(_OWORD *)(v205 + 16) = v234;
                v235 = v206[3];
                *(_OWORD *)(v205 + 32) = v206[2];
                *(_OWORD *)(v205 + 48) = v235;
                goto LABEL_101;
              }
              sub_1AD046A30((_QWORD *)v135);
            }
            v161 = v136[13];
            *(_OWORD *)(v135 + 192) = v136[12];
            *(_OWORD *)(v135 + 208) = v161;
            *(_OWORD *)(v135 + 224) = v136[14];
            *(_QWORD *)(v135 + 240) = *((_QWORD *)v136 + 30);
            v162 = v136[9];
            *(_OWORD *)(v135 + 128) = v136[8];
            *(_OWORD *)(v135 + 144) = v162;
            v163 = v136[11];
            *(_OWORD *)(v135 + 160) = v136[10];
            *(_OWORD *)(v135 + 176) = v163;
            v164 = v136[5];
            *(_OWORD *)(v135 + 64) = v136[4];
            *(_OWORD *)(v135 + 80) = v164;
            v165 = v136[7];
            *(_OWORD *)(v135 + 96) = v136[6];
            *(_OWORD *)(v135 + 112) = v165;
            v166 = v136[1];
            *(_OWORD *)v135 = *v136;
            *(_OWORD *)(v135 + 16) = v166;
            v167 = v136[3];
            *(_OWORD *)(v135 + 32) = v136[2];
            *(_OWORD *)(v135 + 48) = v167;
            goto LABEL_71;
          }
          sub_1AD3AD280((uint64_t)v59 + 24);
        }
        v160 = *(_OWORD *)((char *)v60 + 40);
        *(_OWORD *)((char *)v59 + 24) = *(_OWORD *)((char *)v60 + 24);
        *(_OWORD *)((char *)v59 + 40) = v160;
        *(_OWORD *)((char *)v59 + 56) = *(_OWORD *)((char *)v60 + 56);
        *((_QWORD *)v59 + 9) = *((_QWORD *)v60 + 9);
        goto LABEL_113;
      }
      sub_1AD3AD2D8(v59);
    }
    v280 = v60[11];
    v59[10] = v60[10];
    v59[11] = v280;
    v59[12] = v60[12];
    *((_QWORD *)v59 + 26) = *((_QWORD *)v60 + 26);
    v281 = v60[7];
    v59[6] = v60[6];
    v59[7] = v281;
    v282 = v60[9];
    v59[8] = v60[8];
    v59[9] = v282;
    v283 = v60[3];
    v59[2] = v60[2];
    v59[3] = v283;
    v284 = v60[5];
    v59[4] = v60[4];
    v59[5] = v284;
    v285 = v60[1];
    *v59 = *v60;
    v59[1] = v285;
    goto LABEL_123;
  }
  if (v65)
  {
LABEL_26:
    v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_107;
  }
  v66 = (int *)type metadata accessor for PosterArchive();
  v67 = *((_QWORD *)v66 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v67 + 48))(v60, 1, v66))
  {
    v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    v85 = v60[11];
    v59[10] = v60[10];
    v59[11] = v85;
    v59[12] = v60[12];
    *(_OWORD *)((char *)v59 + 202) = *(_OWORD *)((char *)v60 + 202);
    v86 = v60[7];
    v59[6] = v60[6];
    v59[7] = v86;
    v87 = v60[9];
    v59[8] = v60[8];
    v59[9] = v87;
    v88 = v60[3];
    v59[2] = v60[2];
    v59[3] = v88;
    v89 = v60[5];
    v59[4] = v60[4];
    v59[5] = v89;
    v90 = v60[1];
    *v59 = *v60;
    v59[1] = v90;
    memcpy(v59 + 14, v60 + 14, 0x221uLL);
    v91 = v66[6];
    v92 = (char *)v59 + v91;
    v343 = v61;
    v93 = a3;
    v94 = (char *)v60 + v91;
    v95 = sub_1AD63B084();
    v96 = v94;
    a3 = v93;
    v61 = v343;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v92, v96, v95);
    *(_QWORD *)((char *)v59 + v66[7]) = *(_QWORD *)((char *)v60 + v66[7]);
    *(_QWORD *)((char *)v59 + v66[8]) = *(_QWORD *)((char *)v60 + v66[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v67 + 56))(v59, 0, 1, v66);
  }
  v97 = v61[5];
  v98 = (_OWORD *)((char *)v59 + v97);
  v99 = (_OWORD *)((char *)v60 + v97);
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  memcpy((char *)v59 + v61[6], (char *)v60 + v61[6], 0x1B8uLL);
  v101 = v61[7];
  v102 = (_OWORD *)((char *)v59 + v101);
  v103 = (_OWORD *)((char *)v60 + v101);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  memcpy((char *)v59 + v61[8], (char *)v60 + v61[8], 0x1B8uLL);
  *(_QWORD *)((char *)v59 + v61[9]) = *(_QWORD *)((char *)v60 + v61[9]);
  v105 = v61[10];
  v106 = (_OWORD *)((char *)v59 + v105);
  v107 = (_OWORD *)((char *)v60 + v105);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  v109 = v107[5];
  v106[4] = v107[4];
  v106[5] = v109;
  v110 = v107[3];
  v106[2] = v107[2];
  v106[3] = v110;
  *(_OWORD *)((char *)v106 + 137) = *(_OWORD *)((char *)v107 + 137);
  v111 = v107[8];
  v112 = v107[6];
  v106[7] = v107[7];
  v106[8] = v111;
  v106[6] = v112;
  (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
LABEL_107:
  v276 = *(int *)(a3 + 32);
  v277 = a1 + v276;
  v278 = a2 + v276;
  *(_BYTE *)v277 = *(_BYTE *)v278;
  *(_WORD *)(v277 + 1) = *(_WORD *)(v278 + 1);
  *(_QWORD *)(v277 + 8) = *(_QWORD *)(v278 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD407C8C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD407C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t sub_1AD407D24()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD407D30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC228);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1AD407DA8()
{
  unint64_t v0;

  sub_1ACFFECF8(319, &qword_1ED2DAB78, (void (*)(uint64_t))type metadata accessor for Wallpaper);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for Nickname.Context(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_1AD00412C(*a1, a1[1]);
  swift_bridgeObjectRelease();
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_1AD00412C(a1[4], v2);
  v3 = a1[7];
  if (v3 >> 60 != 15)
    sub_1AD00412C(a1[6], v3);
  v4 = a1[9];
  if (v4 >> 60 != 15)
    sub_1AD00412C(a1[8], v4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Nickname.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1AD0040A0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  else
  {
    v9 = *(_QWORD *)v7;
    sub_1AD0040A0(v9, v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v8;
  }
  v10 = (uint64_t *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    sub_1AD0040A0(*v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v11;
  }
  v13 = (uint64_t *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_1AD0040A0(*v13, *(_QWORD *)(a2 + 72));
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v14;
  }
  v16 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v16;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Nickname.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1AD0040A0(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_1AD00412C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_1AD0040A0(*v8, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_1AD0040A0(*v8, *(_QWORD *)(a2 + 40));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v9;
  sub_1AD00412C(v12, v13);
LABEL_8:
  v14 = (uint64_t *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      v16 = *v14;
      sub_1AD0040A0(*v14, *(_QWORD *)(a2 + 56));
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 48);
LABEL_13:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  v17 = *v14;
  sub_1AD0040A0(*v14, *(_QWORD *)(a2 + 56));
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v15;
  sub_1AD00412C(v18, v19);
LABEL_15:
  v20 = (uint64_t *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      v23 = *v20;
      sub_1AD0040A0(*v20, *(_QWORD *)(a2 + 72));
      v24 = *(_QWORD *)(a1 + 64);
      v25 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 72) = v21;
      sub_1AD00412C(v24, v25);
      goto LABEL_22;
    }
    sub_1AD007EC0(a1 + 64);
    goto LABEL_20;
  }
  if (v21 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v20;
    goto LABEL_22;
  }
  v22 = *v20;
  sub_1AD0040A0(*v20, *(_QWORD *)(a2 + 72));
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v21;
LABEL_22:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Nickname.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1AD00412C(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 40) = v9;
  sub_1AD00412C(v10, v8);
LABEL_6:
  v11 = (_OWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *v11;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 56);
  if (v13 >> 60 == 15)
  {
    sub_1AD007EC0(a1 + 48);
    goto LABEL_9;
  }
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v11;
  *(_QWORD *)(a1 + 56) = v13;
  sub_1AD00412C(v14, v12);
LABEL_11:
  v15 = (_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16 >> 60 != 15)
  {
    v17 = *(_QWORD *)(a2 + 72);
    if (v17 >> 60 != 15)
    {
      v18 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *v15;
      *(_QWORD *)(a1 + 72) = v17;
      sub_1AD00412C(v18, v16);
      goto LABEL_16;
    }
    sub_1AD007EC0(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v15;
LABEL_16:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

uint64_t getEnumTagSinglePayload for Nickname.Context(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 98))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Nickname.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 98) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 98) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Nickname.Context()
{
  return &type metadata for Nickname.Context;
}

uint64_t destroy for AvatarImage(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  swift_release();
  swift_bridgeObjectRelease();
  if (a1[7])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
    v2 = a1[14];
    v3 = a1[16];
    v4 = a1[18];
    v5 = a1[20];
    v6 = a1[24];
    v7 = a1[26];
    v8 = a1[28];
    if (v2 >> 1 != 0xFFFFFFFF
      || ((v4 | (unint64_t)v3) <= 1
        ? (v9 = (v6 & 0xFFFFFFFFFFFFFEFELL | v5 & 0xFFFFFFFFFFFF00FELL) == 0)
        : (v9 = 0),
          v9 ? (v10 = (v8 | v7) >= 2) : (v10 = 1),
          v10))
    {
      sub_1AD00E8B0(a1[11], a1[12], a1[13], v2, a1[15], v3, a1[17], v4, a1[19], v5, a1[21], a1[22], a1[23], v6, a1[25], v7, a1[27], v8, a1[29],
        a1[30],
        a1[31],
        a1[32],
        a1[33],
        a1[34]);
    }
  }
  return sub_1AD00E8B0(a1[35], a1[36], a1[37], a1[38], a1[39], a1[40], a1[41], a1[42], a1[43], a1[44], a1[45], a1[46], a1[47], a1[48], a1[49], a1[50], a1[51], a1[52], a1[53],
           a1[54],
           a1[55],
           a1[56],
           a1[57],
           a1[58]);
}

uint64_t initializeWithCopy for AvatarImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 112);
    v10 = *(_QWORD *)(a2 + 128);
    v11 = *(_QWORD *)(a2 + 144);
    v12 = *(_QWORD *)(a2 + 224);
    if (v9 >> 1 != 0xFFFFFFFF
      || (v11 | (unint64_t)v10) > 1
      || *(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFF00FELL
      || (v12 | *(_QWORD *)(a2 + 208)) >= 2)
    {
      v26 = *(_QWORD *)(a2 + 96);
      v27 = *(_QWORD *)(a2 + 120);
      v47 = *(_QWORD *)(a2 + 152);
      v51 = *(_QWORD *)(a2 + 168);
      v57 = *(_QWORD *)(a2 + 176);
      v59 = *(_QWORD *)(a2 + 184);
      v61 = *(_QWORD *)(a2 + 200);
      v63 = *(_QWORD *)(a2 + 216);
      v65 = *(_QWORD *)(a2 + 232);
      v67 = *(_QWORD *)(a2 + 240);
      v69 = *(_QWORD *)(a2 + 248);
      v71 = *(_QWORD *)(a2 + 256);
      v73 = *(_QWORD *)(a2 + 264);
      v75 = *(_QWORD *)(a2 + 272);
      v53 = *(_QWORD *)(a2 + 192);
      v55 = *(_QWORD *)(a2 + 208);
      v28 = *(_QWORD *)(a2 + 88);
      v46 = *(_QWORD *)(a2 + 160);
      v29 = *(_QWORD *)(a2 + 104);
      v49 = *(_QWORD *)(a2 + 224);
      v30 = *(_QWORD *)(a2 + 136);
      sub_1AD00FEAC(v28, v26, v29, v9, v27, v10, v30, v11, v47, v46, v51, v57, v59, v53, v61, v55, v63, v12, v65,
        v67,
        v69,
        v71,
        v73,
        v75);
      *(_QWORD *)(a1 + 88) = v28;
      *(_QWORD *)(a1 + 96) = v26;
      *(_QWORD *)(a1 + 104) = v29;
      *(_QWORD *)(a1 + 112) = v9;
      *(_QWORD *)(a1 + 120) = v27;
      *(_QWORD *)(a1 + 128) = v10;
      *(_QWORD *)(a1 + 136) = v30;
      *(_QWORD *)(a1 + 144) = v11;
      *(_QWORD *)(a1 + 152) = v47;
      *(_QWORD *)(a1 + 160) = v46;
      *(_QWORD *)(a1 + 168) = v51;
      *(_QWORD *)(a1 + 176) = v57;
      *(_QWORD *)(a1 + 184) = v59;
      *(_QWORD *)(a1 + 192) = v53;
      *(_QWORD *)(a1 + 200) = v61;
      *(_QWORD *)(a1 + 208) = v55;
      *(_QWORD *)(a1 + 216) = v63;
      *(_QWORD *)(a1 + 224) = v49;
      *(_QWORD *)(a1 + 232) = v65;
      *(_QWORD *)(a1 + 240) = v67;
      *(_QWORD *)(a1 + 248) = v69;
      *(_QWORD *)(a1 + 256) = v71;
      *(_QWORD *)(a1 + 264) = v73;
      *(_QWORD *)(a1 + 272) = v75;
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v13;
      v14 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v14;
      v15 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v15;
      v16 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v16;
      v17 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v17;
      v18 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v18;
    }
  }
  else
  {
    v19 = *(_OWORD *)(v6 + 208);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v6 + 192);
    *(_OWORD *)(a1 + 240) = v19;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(v6 + 224);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(v6 + 240);
    v20 = *(_OWORD *)(v6 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a1 + 176) = v20;
    v21 = *(_OWORD *)(v6 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v6 + 160);
    *(_OWORD *)(a1 + 208) = v21;
    v22 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 112) = v22;
    v23 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a1 + 144) = v23;
    v24 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v24;
    v25 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 80) = v25;
  }
  v31 = *(_QWORD *)(a2 + 280);
  v32 = *(_QWORD *)(a2 + 288);
  v33 = *(_QWORD *)(a2 + 296);
  v34 = *(_QWORD *)(a2 + 304);
  v35 = *(_QWORD *)(a2 + 312);
  v36 = *(_QWORD *)(a2 + 320);
  v38 = *(_QWORD *)(a2 + 328);
  v37 = *(_QWORD *)(a2 + 336);
  v48 = *(_QWORD *)(a2 + 352);
  v50 = *(_QWORD *)(a2 + 360);
  v52 = *(_QWORD *)(a2 + 368);
  v54 = *(_QWORD *)(a2 + 376);
  v56 = *(_QWORD *)(a2 + 384);
  v58 = *(_QWORD *)(a2 + 392);
  v60 = *(_QWORD *)(a2 + 400);
  v62 = *(_QWORD *)(a2 + 408);
  v64 = *(_QWORD *)(a2 + 416);
  v66 = *(_QWORD *)(a2 + 424);
  v68 = *(_QWORD *)(a2 + 432);
  v70 = *(_QWORD *)(a2 + 440);
  v72 = *(_QWORD *)(a2 + 448);
  v74 = *(_QWORD *)(a2 + 456);
  v76 = *(_QWORD *)(a2 + 464);
  v39 = *(_QWORD *)(a2 + 344);
  v40 = v31;
  v41 = v32;
  v42 = v33;
  v43 = v34;
  v44 = v37;
  sub_1AD00FEAC(v31, v32, v33, v34, v35, v36, v38, v37, v39, v48, v50, v52, v54, v56, v58, v60, v62, v64, v66,
    v68,
    v70,
    v72,
    v74,
    v76);
  *(_QWORD *)(a1 + 280) = v40;
  *(_QWORD *)(a1 + 288) = v41;
  *(_QWORD *)(a1 + 296) = v42;
  *(_QWORD *)(a1 + 304) = v43;
  *(_QWORD *)(a1 + 312) = v35;
  *(_QWORD *)(a1 + 320) = v36;
  *(_QWORD *)(a1 + 328) = v38;
  *(_QWORD *)(a1 + 336) = v44;
  *(_QWORD *)(a1 + 344) = v39;
  *(_QWORD *)(a1 + 352) = v48;
  *(_QWORD *)(a1 + 360) = v50;
  *(_QWORD *)(a1 + 368) = v52;
  *(_QWORD *)(a1 + 376) = v54;
  *(_QWORD *)(a1 + 384) = v56;
  *(_QWORD *)(a1 + 392) = v58;
  *(_QWORD *)(a1 + 400) = v60;
  *(_QWORD *)(a1 + 408) = v62;
  *(_QWORD *)(a1 + 416) = v64;
  *(_QWORD *)(a1 + 424) = v66;
  *(_QWORD *)(a1 + 432) = v68;
  *(_QWORD *)(a1 + 440) = v70;
  *(_QWORD *)(a1 + 448) = v72;
  *(_QWORD *)(a1 + 456) = v74;
  *(_QWORD *)(a1 + 464) = v76;
  return a1;
}

uint64_t assignWithCopy for AvatarImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 32);
  v6 = (__int128 *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (!v7)
    {
      v66 = *v6;
      v67 = *(_OWORD *)(a2 + 48);
      v68 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v68;
      *v5 = v66;
      *(_OWORD *)(a1 + 48) = v67;
      v69 = *(_OWORD *)(a2 + 96);
      v70 = *(_OWORD *)(a2 + 112);
      v71 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v71;
      *(_OWORD *)(a1 + 96) = v69;
      *(_OWORD *)(a1 + 112) = v70;
      v72 = *(_OWORD *)(a2 + 160);
      v73 = *(_OWORD *)(a2 + 176);
      v74 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v74;
      *(_OWORD *)(a1 + 160) = v72;
      *(_OWORD *)(a1 + 176) = v73;
      v75 = *(_OWORD *)(a2 + 224);
      v76 = *(_OWORD *)(a2 + 240);
      v77 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v76;
      *(_OWORD *)(a1 + 256) = v77;
      *(_OWORD *)(a1 + 224) = v75;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 32, a2 + 32);
    v31 = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v31;
    v32 = *(_QWORD *)(a2 + 112);
    v33 = *(_QWORD *)(a2 + 128);
    v34 = *(_QWORD *)(a2 + 144);
    v35 = *(_QWORD *)(a2 + 208);
    if (v32 >> 1 == 0xFFFFFFFF
      && (v34 | (unint64_t)v33) <= 1
      && !(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFF00FELL)
      && (*(_QWORD *)(a2 + 224) | (unint64_t)v35) < 2)
    {
      v36 = *(_OWORD *)(a2 + 88);
      v37 = *(_OWORD *)(a2 + 104);
      v38 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v38;
      *(_OWORD *)(a1 + 88) = v36;
      *(_OWORD *)(a1 + 104) = v37;
      v39 = *(_OWORD *)(a2 + 152);
      v40 = *(_OWORD *)(a2 + 168);
      v41 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v41;
      *(_OWORD *)(a1 + 152) = v39;
      *(_OWORD *)(a1 + 168) = v40;
      v42 = *(_OWORD *)(a2 + 216);
      v43 = *(_OWORD *)(a2 + 232);
      v44 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v44;
      *(_OWORD *)(a1 + 216) = v42;
      *(_OWORD *)(a1 + 232) = v43;
      goto LABEL_35;
    }
    v78 = *(_QWORD *)(a2 + 88);
    v79 = *(_QWORD *)(a2 + 120);
    v140 = *(_QWORD *)(a2 + 152);
    v152 = *(_QWORD *)(a2 + 168);
    v156 = *(_QWORD *)(a2 + 176);
    v164 = *(_QWORD *)(a2 + 184);
    v168 = *(_QWORD *)(a2 + 200);
    v172 = *(_QWORD *)(a2 + 216);
    v176 = *(_QWORD *)(a2 + 232);
    v180 = *(_QWORD *)(a2 + 240);
    v184 = *(_QWORD *)(a2 + 248);
    v188 = *(_QWORD *)(a2 + 256);
    v192 = *(_QWORD *)(a2 + 264);
    v196 = *(_QWORD *)(a2 + 272);
    v148 = *(_QWORD *)(a2 + 192);
    v80 = *(_QWORD *)(a2 + 96);
    v160 = *(_QWORD *)(a2 + 224);
    v136 = *(_QWORD *)(a2 + 160);
    v81 = *(_QWORD *)(a2 + 104);
    v144 = *(_QWORD *)(a2 + 208);
    v82 = *(_QWORD *)(a2 + 136);
    sub_1AD00FEAC(v78, v80, v81, v32, v79, v33, v82, v34, v140, v136, v152, v156, v164, v148, v168, v35, v172, v160, v176,
      v180,
      v184,
      v188,
      v192,
      v196);
    *(_QWORD *)(a1 + 88) = v78;
    *(_QWORD *)(a1 + 96) = v80;
    *(_QWORD *)(a1 + 104) = v81;
    *(_QWORD *)(a1 + 112) = v32;
    *(_QWORD *)(a1 + 120) = v79;
    *(_QWORD *)(a1 + 128) = v33;
    *(_QWORD *)(a1 + 136) = v82;
    *(_QWORD *)(a1 + 144) = v34;
    *(_QWORD *)(a1 + 152) = v140;
    *(_QWORD *)(a1 + 160) = v136;
    *(_QWORD *)(a1 + 168) = v152;
    *(_QWORD *)(a1 + 176) = v156;
    *(_QWORD *)(a1 + 184) = v164;
    *(_QWORD *)(a1 + 192) = v148;
    *(_QWORD *)(a1 + 200) = v168;
    *(_QWORD *)(a1 + 208) = v144;
    *(_QWORD *)(a1 + 216) = v172;
    *(_QWORD *)(a1 + 224) = v160;
    *(_QWORD *)(a1 + 232) = v176;
    *(_QWORD *)(a1 + 240) = v180;
    *(_QWORD *)(a1 + 248) = v184;
    *(_QWORD *)(a1 + 256) = v188;
    *(_QWORD *)(a1 + 264) = v192;
    v83 = v196;
    goto LABEL_34;
  }
  if (!v7)
  {
    sub_1AD046A30((_QWORD *)(a1 + 32));
    v45 = *(_OWORD *)(a2 + 80);
    v47 = *v6;
    v46 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v45;
    *v5 = v47;
    *(_OWORD *)(a1 + 48) = v46;
    v48 = *(_OWORD *)(a2 + 144);
    v50 = *(_OWORD *)(a2 + 96);
    v49 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v48;
    *(_OWORD *)(a1 + 96) = v50;
    *(_OWORD *)(a1 + 112) = v49;
    v51 = *(_OWORD *)(a2 + 208);
    v53 = *(_OWORD *)(a2 + 160);
    v52 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v51;
    *(_OWORD *)(a1 + 160) = v53;
    *(_OWORD *)(a1 + 176) = v52;
    v55 = *(_OWORD *)(a2 + 240);
    v54 = *(_OWORD *)(a2 + 256);
    v56 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v55;
    *(_OWORD *)(a1 + 256) = v54;
    *(_OWORD *)(a1 + 224) = v56;
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = (_OWORD *)(a1 + 88);
  v10 = (__int128 *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 192);
  v16 = *(_QWORD *)(a2 + 208);
  v17 = *(_QWORD *)(a2 + 224);
  v21 = v11 >> 1 == 0xFFFFFFFF
     && (v13 | (unint64_t)v12) < 2
     && (v15 & 0xFFFFFFFFFFFFFEFELL | v14 & 0xFFFFFFFFFFFF00FELL) == 0
     && (v17 | v16) < 2;
  if (*(_QWORD *)(a1 + 112) >> 1 == 0xFFFFFFFFLL
    && (*(_QWORD *)(a1 + 144) | *(_QWORD *)(a1 + 128)) <= 1
    && !(*(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFF00FELL)
    && (*(_QWORD *)(a1 + 224) | *(_QWORD *)(a1 + 208)) < 2)
  {
    if (v21)
    {
      v22 = *v10;
      v23 = *(_OWORD *)(a2 + 104);
      v24 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v24;
      *v9 = v22;
      *(_OWORD *)(a1 + 104) = v23;
      v25 = *(_OWORD *)(a2 + 152);
      v26 = *(_OWORD *)(a2 + 168);
      v27 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v27;
      *(_OWORD *)(a1 + 152) = v25;
      *(_OWORD *)(a1 + 168) = v26;
      v28 = *(_OWORD *)(a2 + 216);
      v29 = *(_OWORD *)(a2 + 232);
      v30 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v30;
      *(_OWORD *)(a1 + 216) = v28;
      *(_OWORD *)(a1 + 232) = v29;
      goto LABEL_35;
    }
    v142 = *(_QWORD *)(a2 + 96);
    v146 = *(_QWORD *)(a2 + 88);
    v138 = *(_QWORD *)(a2 + 104);
    v103 = *(_QWORD *)(a2 + 120);
    v104 = *(_QWORD *)(a2 + 136);
    v150 = *(_QWORD *)(a2 + 152);
    v154 = *(_QWORD *)(a2 + 168);
    v158 = *(_QWORD *)(a2 + 176);
    v162 = *(_QWORD *)(a2 + 184);
    v166 = *(_QWORD *)(a2 + 200);
    v170 = *(_QWORD *)(a2 + 216);
    v174 = *(_QWORD *)(a2 + 232);
    v178 = *(_QWORD *)(a2 + 240);
    v182 = *(_QWORD *)(a2 + 248);
    v186 = *(_QWORD *)(a2 + 256);
    v190 = *(_QWORD *)(a2 + 264);
    v194 = *(_QWORD *)(a2 + 272);
    v198 = *(_QWORD *)(a2 + 224);
    sub_1AD00FEAC(v146, v142, v138, v11, v103, v12, v104, v13, v150, v14, v154, v158, v162, v15, v166, v16, v170, v17, v174,
      v178,
      v182,
      v186,
      v190,
      v194);
    *(_QWORD *)(a1 + 88) = v146;
    *(_QWORD *)(a1 + 96) = v142;
    *(_QWORD *)(a1 + 104) = v138;
    *(_QWORD *)(a1 + 112) = v11;
    *(_QWORD *)(a1 + 120) = v103;
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v104;
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v150;
    *(_QWORD *)(a1 + 160) = v14;
    *(_QWORD *)(a1 + 168) = v154;
    *(_QWORD *)(a1 + 176) = v158;
    *(_QWORD *)(a1 + 184) = v162;
    *(_QWORD *)(a1 + 192) = v15;
    *(_QWORD *)(a1 + 200) = v166;
    *(_QWORD *)(a1 + 208) = v16;
    *(_QWORD *)(a1 + 216) = v170;
    *(_QWORD *)(a1 + 224) = v198;
    *(_QWORD *)(a1 + 232) = v174;
    *(_QWORD *)(a1 + 240) = v178;
    *(_QWORD *)(a1 + 248) = v182;
    *(_QWORD *)(a1 + 256) = v186;
    *(_QWORD *)(a1 + 264) = v190;
    v83 = v194;
LABEL_34:
    *(_QWORD *)(a1 + 272) = v83;
    goto LABEL_35;
  }
  if (v21)
  {
    sub_1AD148B34(a1 + 88);
    v57 = *(_OWORD *)(a2 + 136);
    v59 = *v10;
    v58 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v57;
    *v9 = v59;
    *(_OWORD *)(a1 + 104) = v58;
    v60 = *(_OWORD *)(a2 + 200);
    v62 = *(_OWORD *)(a2 + 152);
    v61 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v60;
    *(_OWORD *)(a1 + 152) = v62;
    *(_OWORD *)(a1 + 168) = v61;
    v63 = *(_OWORD *)(a2 + 264);
    v65 = *(_OWORD *)(a2 + 216);
    v64 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v63;
    *(_OWORD *)(a1 + 216) = v65;
    *(_OWORD *)(a1 + 232) = v64;
  }
  else
  {
    v141 = *(_QWORD *)(a2 + 96);
    v145 = *(_QWORD *)(a2 + 88);
    v137 = *(_QWORD *)(a2 + 104);
    v84 = *(_QWORD *)(a2 + 120);
    v85 = *(_QWORD *)(a2 + 136);
    v149 = *(_QWORD *)(a2 + 152);
    v153 = *(_QWORD *)(a2 + 168);
    v157 = *(_QWORD *)(a2 + 176);
    v161 = *(_QWORD *)(a2 + 184);
    v165 = *(_QWORD *)(a2 + 200);
    v169 = *(_QWORD *)(a2 + 216);
    v173 = *(_QWORD *)(a2 + 232);
    v177 = *(_QWORD *)(a2 + 240);
    v181 = *(_QWORD *)(a2 + 248);
    v185 = *(_QWORD *)(a2 + 256);
    v189 = *(_QWORD *)(a2 + 264);
    v193 = *(_QWORD *)(a2 + 272);
    v197 = *(_QWORD *)(a2 + 224);
    sub_1AD00FEAC(v145, v141, v137, v11, v84, v12, v85, v13, v149, v14, v153, v157, v161, v15, v165, v16, v169, v17, v173,
      v177,
      v181,
      v185,
      v189,
      v193);
    v86 = *(_QWORD *)(a1 + 88);
    v87 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v145;
    *(_QWORD *)(a1 + 96) = v141;
    v88 = *(_QWORD *)(a1 + 104);
    v89 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v137;
    *(_QWORD *)(a1 + 112) = v11;
    v90 = *(_QWORD *)(a1 + 120);
    v91 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v84;
    *(_QWORD *)(a1 + 128) = v12;
    v92 = *(_QWORD *)(a1 + 136);
    v93 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 136) = v85;
    *(_QWORD *)(a1 + 144) = v13;
    v94 = *(_OWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v149;
    *(_QWORD *)(a1 + 160) = v14;
    v95 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v153;
    *(_QWORD *)(a1 + 176) = v157;
    v96 = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v161;
    *(_QWORD *)(a1 + 192) = v15;
    v97 = *(_OWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v165;
    *(_QWORD *)(a1 + 208) = v16;
    v98 = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v169;
    *(_QWORD *)(a1 + 224) = v197;
    v99 = *(_OWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v173;
    *(_QWORD *)(a1 + 240) = v177;
    v100 = *(_OWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v181;
    *(_QWORD *)(a1 + 256) = v185;
    v101 = *(_QWORD *)(a1 + 264);
    v102 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 264) = v189;
    *(_QWORD *)(a1 + 272) = v193;
    sub_1AD00E8B0(v86, v87, v88, v89, v90, v91, v92, v93, v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1), v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98, *((unint64_t *)&v98 + 1), v99,
      *((uint64_t *)&v99 + 1),
      v100,
      *((uint64_t *)&v100 + 1),
      v101,
      v102);
  }
LABEL_35:
  v105 = *(_QWORD *)(a2 + 288);
  v106 = *(_QWORD *)(a2 + 296);
  v107 = *(_QWORD *)(a2 + 304);
  v108 = *(_QWORD *)(a2 + 312);
  v109 = *(_QWORD *)(a2 + 320);
  v111 = *(_QWORD *)(a2 + 328);
  v110 = *(_QWORD *)(a2 + 336);
  v139 = *(_QWORD *)(a2 + 344);
  v143 = *(_QWORD *)(a2 + 352);
  v147 = *(_QWORD *)(a2 + 360);
  v151 = *(_QWORD *)(a2 + 368);
  v155 = *(_QWORD *)(a2 + 376);
  v159 = *(_QWORD *)(a2 + 384);
  v163 = *(_QWORD *)(a2 + 392);
  v167 = *(_QWORD *)(a2 + 400);
  v171 = *(_QWORD *)(a2 + 408);
  v175 = *(_QWORD *)(a2 + 416);
  v179 = *(_QWORD *)(a2 + 424);
  v183 = *(_QWORD *)(a2 + 432);
  v187 = *(_QWORD *)(a2 + 440);
  v191 = *(_QWORD *)(a2 + 448);
  v195 = *(_QWORD *)(a2 + 456);
  v199 = *(_QWORD *)(a2 + 464);
  v112 = *(_QWORD *)(a2 + 280);
  v113 = v105;
  v114 = v106;
  v115 = v107;
  v116 = v108;
  v117 = v110;
  sub_1AD00FEAC(v112, v105, v106, v107, v108, v109, v111, v110, v139, v143, v147, v151, v155, v159, v163, v167, v171, v175, v179,
    v183,
    v187,
    v191,
    v195,
    v199);
  v118 = *(_QWORD *)(a1 + 280);
  v119 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v112;
  *(_QWORD *)(a1 + 288) = v113;
  v120 = *(_QWORD *)(a1 + 296);
  v121 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v114;
  *(_QWORD *)(a1 + 304) = v115;
  v122 = *(_QWORD *)(a1 + 312);
  v123 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 312) = v116;
  *(_QWORD *)(a1 + 320) = v109;
  v124 = *(_QWORD *)(a1 + 328);
  v125 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 328) = v111;
  *(_QWORD *)(a1 + 336) = v117;
  v126 = *(_OWORD *)(a1 + 344);
  v127 = *(_OWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 344) = v139;
  *(_QWORD *)(a1 + 352) = v143;
  *(_QWORD *)(a1 + 360) = v147;
  *(_QWORD *)(a1 + 368) = v151;
  v128 = *(_OWORD *)(a1 + 376);
  v129 = *(_OWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 376) = v155;
  *(_QWORD *)(a1 + 384) = v159;
  *(_QWORD *)(a1 + 392) = v163;
  *(_QWORD *)(a1 + 400) = v167;
  v130 = *(_OWORD *)(a1 + 408);
  v131 = *(_OWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 408) = v171;
  *(_QWORD *)(a1 + 416) = v175;
  *(_QWORD *)(a1 + 424) = v179;
  *(_QWORD *)(a1 + 432) = v183;
  v132 = *(_OWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v187;
  v133 = *(_QWORD *)(a1 + 456);
  v134 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 448) = v191;
  *(_QWORD *)(a1 + 456) = v195;
  *(_QWORD *)(a1 + 464) = v199;
  sub_1AD00E8B0(v118, v119, v120, v121, v122, v123, v124, v125, v126, *((uint64_t *)&v126 + 1), v127, *((uint64_t *)&v127 + 1), v128, *((uint64_t *)&v128 + 1), v129, *((uint64_t *)&v129 + 1), v130, *((unint64_t *)&v130 + 1), v131,
    *((uint64_t *)&v131 + 1),
    v132,
    *((uint64_t *)&v132 + 1),
    v133,
    v134);
  return a1;
}

uint64_t assignWithTake for AvatarImage(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_13;
  if (!*(_QWORD *)(a2 + 56))
  {
    sub_1AD046A30((_QWORD *)(a1 + 32));
LABEL_13:
    v24 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v24;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    goto LABEL_14;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  *v7 = *v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = (_OWORD *)(a1 + 88);
  v8 = (_OWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 224);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a2 + 208);
  v23 = *(_QWORD *)(a2 + 224);
  if (v10 >> 1 != 0xFFFFFFFF
    || (v12 | (unint64_t)v11) > 1
    || v14 & 0xFFFFFFFFFFFFFEFELL | v13 & 0xFFFFFFFFFFFF00FELL
    || (v16 | v15) >= 2)
  {
    if (v17 >> 1 != 0xFFFFFFFF
      || (v19 | v18) > 1
      || v21 & 0xFFFFFFFFFFFFFEFELL | v20 & 0xFFFFFFFFFFFF00FELL
      || (v23 | v22) >= 2)
    {
      v55 = *(_QWORD *)(a2 + 104);
      v56 = *(_QWORD *)(a2 + 120);
      v57 = *(_QWORD *)(a2 + 136);
      v58 = *(_QWORD *)(a2 + 152);
      v59 = *(_QWORD *)(a2 + 184);
      v60 = *(_QWORD *)(a2 + 200);
      v61 = *(_QWORD *)(a2 + 216);
      v72 = *(_QWORD *)(a1 + 96);
      v73 = *(_QWORD *)(a1 + 88);
      v71 = *(_QWORD *)(a1 + 104);
      v74 = *(_QWORD *)(a1 + 120);
      v75 = *(_QWORD *)(a1 + 136);
      v62 = *(_OWORD *)(a1 + 168);
      v69 = *(_QWORD *)(a1 + 184);
      v70 = *(_QWORD *)(a1 + 152);
      v63 = *(_QWORD *)(a1 + 200);
      v64 = *(_QWORD *)(a1 + 216);
      v65 = *(_OWORD *)(a1 + 232);
      v66 = *(_OWORD *)(a1 + 248);
      v68 = *(_QWORD *)(a1 + 264);
      v67 = *(_QWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = v55;
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = v56;
      *(_QWORD *)(a1 + 128) = v18;
      *(_QWORD *)(a1 + 136) = v57;
      *(_QWORD *)(a1 + 144) = v19;
      *(_QWORD *)(a1 + 152) = v58;
      *(_QWORD *)(a1 + 160) = v20;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = v59;
      *(_QWORD *)(a1 + 192) = v21;
      *(_QWORD *)(a1 + 200) = v60;
      *(_QWORD *)(a1 + 208) = v22;
      *(_QWORD *)(a1 + 216) = v61;
      *(_QWORD *)(a1 + 224) = v23;
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *v4 = *v5;
      sub_1AD00E8B0(v73, v72, v71, v10, v74, v11, v75, v12, v70, v13, v62, *((uint64_t *)&v62 + 1), v69, v14, v63, v15, v64, v16, v65,
        *((uint64_t *)&v65 + 1),
        v66,
        *((uint64_t *)&v66 + 1),
        v68,
        v67);
      goto LABEL_15;
    }
    sub_1AD148B34(a1 + 88);
  }
LABEL_14:
  v25 = v8[9];
  v7[8] = v8[8];
  v7[9] = v25;
  v26 = v8[11];
  v7[10] = v8[10];
  v7[11] = v26;
  v27 = v8[5];
  v7[4] = v8[4];
  v7[5] = v27;
  v28 = v8[7];
  v7[6] = v8[6];
  v7[7] = v28;
  v29 = v8[1];
  *v7 = *v8;
  v7[1] = v29;
  v30 = v8[3];
  v7[2] = v8[2];
  v7[3] = v30;
LABEL_15:
  v31 = *(_QWORD *)(a1 + 280);
  v32 = *(_QWORD *)(a1 + 288);
  v33 = *(_QWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 304);
  v35 = *(_QWORD *)(a1 + 312);
  v36 = *(_QWORD *)(a1 + 320);
  v37 = *(_QWORD *)(a1 + 328);
  v38 = *(_QWORD *)(a1 + 336);
  v39 = *(_OWORD *)(a1 + 344);
  v40 = *(_OWORD *)(a1 + 360);
  v41 = *(_OWORD *)(a1 + 376);
  v42 = *(_OWORD *)(a1 + 392);
  v43 = *(_OWORD *)(a1 + 408);
  v44 = *(_OWORD *)(a1 + 424);
  v45 = *(_OWORD *)(a1 + 440);
  v46 = *(_QWORD *)(a1 + 456);
  v47 = *(_QWORD *)(a1 + 464);
  v48 = v5[2];
  v4[1] = v5[1];
  v4[2] = v48;
  v49 = v5[4];
  v4[3] = v5[3];
  v4[4] = v49;
  v50 = v5[6];
  v4[5] = v5[5];
  v4[6] = v50;
  v51 = v5[8];
  v4[7] = v5[7];
  v4[8] = v51;
  v52 = v5[10];
  v4[9] = v5[9];
  v4[10] = v52;
  v53 = v5[12];
  v4[11] = v5[11];
  v4[12] = v53;
  sub_1AD00E8B0(v31, v32, v33, v34, v35, v36, v37, v38, v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, *((unint64_t *)&v43 + 1), v44,
    *((uint64_t *)&v44 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v46,
    v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvatarImage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 472))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvatarImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 472) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 472) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AvatarImage()
{
  return &type metadata for AvatarImage;
}

uint64_t storeEnumTagSinglePayload for WallpaperType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AD409608 + 4 * byte_1AD6831B1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AD40963C + 4 * byte_1AD6831AC[v4]))();
}

uint64_t sub_1AD40963C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD409644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD40964CLL);
  return result;
}

uint64_t sub_1AD409658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD409660);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AD409664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD40966C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperType()
{
  return &type metadata for WallpaperType;
}

_QWORD *sub_1AD409688(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v3;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  int v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  _OWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  _OWORD *v296;
  _QWORD *v297;
  int *v298;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = (int *)type metadata accessor for PosterArchive();
    v8 = *((_QWORD *)v7 - 1);
    v298 = v6;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v3, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = *((_QWORD *)v3 + 23);
      if (v11)
      {
        *(_OWORD *)a1 = *v3;
        *((_WORD *)a1 + 8) = *((_WORD *)v3 + 8);
        *((_BYTE *)a1 + 18) = *((_BYTE *)v3 + 18);
        v12 = *((_QWORD *)v3 + 9);
        v13 = *(_OWORD *)((char *)v3 + 40);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)((char *)v3 + 24);
        *(_OWORD *)(a1 + 5) = v13;
        if (v12 == 1)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)((char *)v3 + 56);
          a1[9] = *((_QWORD *)v3 + 9);
        }
        else
        {
          *((_BYTE *)a1 + 56) = *((_BYTE *)v3 + 56);
          a1[8] = *((_QWORD *)v3 + 8);
          a1[9] = v12;
          swift_bridgeObjectRetain();
        }
        v20 = *((_QWORD *)v3 + 11);
        if (v20 == 1)
        {
          v21 = v3[8];
          *((_OWORD *)a1 + 7) = v3[7];
          *((_OWORD *)a1 + 8) = v21;
          *((_OWORD *)a1 + 9) = v3[9];
          v22 = v3[6];
          *((_OWORD *)a1 + 5) = v3[5];
          *((_OWORD *)a1 + 6) = v22;
        }
        else
        {
          *((_BYTE *)a1 + 80) = *((_BYTE *)v3 + 80);
          a1[11] = v20;
          *((_OWORD *)a1 + 6) = v3[6];
          *((_BYTE *)a1 + 112) = *((_BYTE *)v3 + 112);
          a1[15] = *((_QWORD *)v3 + 15);
          v23 = v3[9];
          *((_OWORD *)a1 + 8) = v3[8];
          *((_OWORD *)a1 + 9) = v23;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *((_WORD *)a1 + 80) = *((_WORD *)v3 + 80);
        a1[21] = *((_QWORD *)v3 + 21);
        *((_BYTE *)a1 + 176) = *((_BYTE *)v3 + 176);
        v24 = *((_QWORD *)v3 + 24);
        a1[23] = v11;
        a1[24] = v24;
        v25 = (_OWORD *)((char *)v3 + 200);
        v26 = *((_QWORD *)v3 + 26);
        swift_retain();
        if (v26 == 1)
        {
          *(_OWORD *)(a1 + 25) = *v25;
        }
        else
        {
          a1[25] = *(_QWORD *)v25;
          a1[26] = v26;
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v14 = v3[11];
        *((_OWORD *)a1 + 10) = v3[10];
        *((_OWORD *)a1 + 11) = v14;
        *((_OWORD *)a1 + 12) = v3[12];
        a1[26] = *((_QWORD *)v3 + 26);
        v15 = v3[7];
        *((_OWORD *)a1 + 6) = v3[6];
        *((_OWORD *)a1 + 7) = v15;
        v16 = v3[9];
        *((_OWORD *)a1 + 8) = v3[8];
        *((_OWORD *)a1 + 9) = v16;
        v17 = v3[3];
        *((_OWORD *)a1 + 2) = v3[2];
        *((_OWORD *)a1 + 3) = v17;
        v18 = v3[5];
        *((_OWORD *)a1 + 4) = v3[4];
        *((_OWORD *)a1 + 5) = v18;
        v19 = v3[1];
        *(_OWORD *)a1 = *v3;
        *((_OWORD *)a1 + 1) = v19;
      }
      *((_WORD *)a1 + 108) = *((_WORD *)v3 + 108);
      v27 = a1 + 28;
      v28 = v3 + 14;
      v29 = *((unsigned __int8 *)v3 + 768);
      if (v29 == 2)
      {
        v46 = v3[15];
        *v27 = *v28;
        *((_OWORD *)a1 + 15) = v46;
        v47 = v3[17];
        *((_OWORD *)a1 + 16) = v3[16];
        *((_OWORD *)a1 + 17) = v47;
        v48 = *((_QWORD *)v3 + 37);
        a1[36] = *((_QWORD *)v3 + 36);
        a1[37] = v48;
        *((_BYTE *)a1 + 304) = *((_BYTE *)v3 + 304);
        *((_BYTE *)a1 + 768) = 2;
        swift_bridgeObjectRetain();
      }
      else if (v29 == 1)
      {
        v30 = v3[15];
        *v27 = *v28;
        *((_OWORD *)a1 + 15) = v30;
        v31 = a1 + 32;
        v32 = v3 + 16;
        v33 = *((_QWORD *)v3 + 35);
        v286 = v7;
        v291 = v8;
        if (v33)
        {
          v34 = *((_QWORD *)v3 + 36);
          a1[35] = v33;
          a1[36] = v34;
          (**(void (***)(_OWORD *, _OWORD *))(v33 - 8))(v31, v32);
          a1[37] = *((_QWORD *)v3 + 37);
          *((_BYTE *)a1 + 304) = *((_BYTE *)v3 + 304);
          v35 = *((_QWORD *)v3 + 42);
          v36 = *((_QWORD *)v3 + 44);
          v37 = *((_QWORD *)v3 + 46);
          v38 = *((_QWORD *)v3 + 54);
          v39 = *((_QWORD *)v3 + 56);
          if (v35 >> 1 != 0xFFFFFFFF
            || (v37 | (unint64_t)v36) > 1
            || v3[26] & 0xFFFFFFFFFFFFFEFELL | v3[24] & 0xFFFFFFFFFFFF00FELL
            || (v39 | v38) >= 2)
          {
            v77 = *((_QWORD *)v3 + 39);
            v78 = *((_QWORD *)v3 + 45);
            v204 = *((_QWORD *)v3 + 47);
            v220 = *((_QWORD *)v3 + 49);
            v226 = *((_QWORD *)v3 + 50);
            v232 = *((_QWORD *)v3 + 51);
            v238 = *((_QWORD *)v3 + 53);
            v244 = *((_QWORD *)v3 + 55);
            v250 = *((_QWORD *)v3 + 57);
            v256 = *((_QWORD *)v3 + 58);
            v262 = *((_QWORD *)v3 + 59);
            v268 = *((_QWORD *)v3 + 60);
            v274 = *((_QWORD *)v3 + 61);
            v280 = *((_QWORD *)v3 + 62);
            v208 = *((_QWORD *)v3 + 52);
            v214 = *((_QWORD *)v3 + 56);
            v79 = *((_QWORD *)v3 + 40);
            v199 = *((_QWORD *)v3 + 48);
            v201 = *((_QWORD *)v3 + 54);
            v80 = *((_QWORD *)v3 + 41);
            v81 = *((_QWORD *)v3 + 43);
            sub_1AD00FEAC(v77, v79, v80, v35, v81, v36, v78, v37, v204, v199, v220, v226, v232, v208, v238, v38, v244, v39, v250,
              v256,
              v262,
              v268,
              v274,
              v280);
            a1[39] = v77;
            a1[40] = v79;
            a1[41] = v80;
            a1[42] = v35;
            a1[43] = v81;
            a1[44] = v36;
            a1[45] = v78;
            a1[46] = v37;
            a1[47] = v204;
            a1[48] = v199;
            a1[49] = v220;
            a1[50] = v226;
            a1[51] = v232;
            a1[52] = v208;
            a1[53] = v238;
            a1[54] = v201;
            a1[55] = v244;
            a1[56] = v214;
            a1[57] = v250;
            a1[58] = v256;
            a1[59] = v262;
            a1[60] = v268;
            a1[61] = v274;
            a1[62] = v280;
          }
          else
          {
            v40 = *(_OWORD *)((char *)v3 + 456);
            *(_OWORD *)(a1 + 55) = *(_OWORD *)((char *)v3 + 440);
            *(_OWORD *)(a1 + 57) = v40;
            v41 = *(_OWORD *)((char *)v3 + 488);
            *(_OWORD *)(a1 + 59) = *(_OWORD *)((char *)v3 + 472);
            *(_OWORD *)(a1 + 61) = v41;
            v42 = *(_OWORD *)((char *)v3 + 392);
            *(_OWORD *)(a1 + 47) = *(_OWORD *)((char *)v3 + 376);
            *(_OWORD *)(a1 + 49) = v42;
            v43 = *(_OWORD *)((char *)v3 + 424);
            *(_OWORD *)(a1 + 51) = *(_OWORD *)((char *)v3 + 408);
            *(_OWORD *)(a1 + 53) = v43;
            v44 = *(_OWORD *)((char *)v3 + 328);
            *(_OWORD *)(a1 + 39) = *(_OWORD *)((char *)v3 + 312);
            *(_OWORD *)(a1 + 41) = v44;
            v45 = *(_OWORD *)((char *)v3 + 360);
            *(_OWORD *)(a1 + 43) = *(_OWORD *)((char *)v3 + 344);
            *(_OWORD *)(a1 + 45) = v45;
          }
        }
        else
        {
          v70 = v3[29];
          *((_OWORD *)a1 + 28) = v3[28];
          *((_OWORD *)a1 + 29) = v70;
          *((_OWORD *)a1 + 30) = v3[30];
          a1[62] = *((_QWORD *)v3 + 62);
          v71 = v3[25];
          *((_OWORD *)a1 + 24) = v3[24];
          *((_OWORD *)a1 + 25) = v71;
          v72 = v3[27];
          *((_OWORD *)a1 + 26) = v3[26];
          *((_OWORD *)a1 + 27) = v72;
          v73 = v3[21];
          *((_OWORD *)a1 + 20) = v3[20];
          *((_OWORD *)a1 + 21) = v73;
          v74 = v3[23];
          *((_OWORD *)a1 + 22) = v3[22];
          *((_OWORD *)a1 + 23) = v74;
          v75 = v3[17];
          *v31 = *v32;
          *((_OWORD *)a1 + 17) = v75;
          v76 = v3[19];
          *((_OWORD *)a1 + 18) = v3[18];
          *((_OWORD *)a1 + 19) = v76;
        }
        v82 = *((_QWORD *)v3 + 66);
        v83 = *((_QWORD *)v3 + 67);
        v200 = *((_QWORD *)v3 + 71);
        v202 = *((_QWORD *)v3 + 72);
        v205 = *((_QWORD *)v3 + 73);
        v209 = *((_QWORD *)v3 + 74);
        v215 = *((_QWORD *)v3 + 75);
        v221 = *((_QWORD *)v3 + 76);
        v227 = *((_QWORD *)v3 + 77);
        v233 = *((_QWORD *)v3 + 78);
        v239 = *((_QWORD *)v3 + 79);
        v245 = *((_QWORD *)v3 + 80);
        v251 = *((_QWORD *)v3 + 81);
        v257 = *((_QWORD *)v3 + 82);
        v263 = *((_QWORD *)v3 + 83);
        v269 = *((_QWORD *)v3 + 84);
        v275 = *((_QWORD *)v3 + 85);
        v281 = *((_QWORD *)v3 + 86);
        v84 = *((_QWORD *)v3 + 63);
        v85 = *((_QWORD *)v3 + 64);
        v86 = *((_QWORD *)v3 + 65);
        v87 = *((_QWORD *)v3 + 68);
        v88 = *((_QWORD *)v3 + 69);
        v89 = *((_QWORD *)v3 + 70);
        sub_1AD00FEAC(v84, v85, v86, v82, v83, v87, v88, v89, v200, v202, v205, v209, v215, v221, v227, v233, v239, v245, v251,
          v257,
          v263,
          v269,
          v275,
          v281);
        a1[63] = v84;
        a1[64] = v85;
        a1[65] = v86;
        a1[66] = v82;
        a1[67] = v83;
        a1[68] = v87;
        a1[69] = v88;
        a1[70] = v89;
        a1[71] = v200;
        a1[72] = v202;
        a1[73] = v205;
        a1[74] = v209;
        a1[75] = v215;
        a1[76] = v221;
        a1[77] = v227;
        a1[78] = v233;
        a1[79] = v239;
        a1[80] = v245;
        a1[81] = v251;
        a1[82] = v257;
        a1[83] = v263;
        a1[84] = v269;
        a1[85] = v275;
        a1[86] = v281;
        v90 = *((_QWORD *)v3 + 87);
        if (v90)
        {
          v91 = *((_QWORD *)v3 + 88);
          a1[87] = v90;
          a1[88] = v91;
          a1[89] = *((_QWORD *)v3 + 89);
          a1[90] = *((_QWORD *)v3 + 90);
          a1[91] = *((_QWORD *)v3 + 91);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          v92 = *(_OWORD *)((char *)v3 + 712);
          *(_OWORD *)(a1 + 87) = *(_OWORD *)((char *)v3 + 696);
          *(_OWORD *)(a1 + 89) = v92;
          a1[91] = *((_QWORD *)v3 + 91);
        }
        v6 = v298;
        v7 = v286;
        v8 = v291;
        *((_BYTE *)a1 + 736) = *((_BYTE *)v3 + 736);
        *((_BYTE *)a1 + 768) = 1;
      }
      else
      {
        *((_WORD *)a1 + 112) = *((_WORD *)v3 + 112);
        v49 = *((_QWORD *)v3 + 30);
        a1[29] = *((_QWORD *)v3 + 29);
        a1[30] = v49;
        v50 = *((_QWORD *)v3 + 32);
        a1[31] = *((_QWORD *)v3 + 31);
        a1[32] = v50;
        *((_BYTE *)a1 + 264) = *((_BYTE *)v3 + 264);
        v51 = *((_QWORD *)v3 + 35);
        a1[34] = *((_QWORD *)v3 + 34);
        a1[35] = v51;
        v52 = v3 + 18;
        v53 = *((_QWORD *)v3 + 37);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v53 == 1)
        {
          *((_OWORD *)a1 + 18) = *v52;
        }
        else
        {
          a1[36] = *(_QWORD *)v52;
          a1[37] = v53;
          swift_bridgeObjectRetain();
        }
        v54 = *((_QWORD *)v3 + 39);
        a1[38] = *((_QWORD *)v3 + 38);
        a1[39] = v54;
        v55 = *((_QWORD *)v3 + 41);
        a1[40] = *((_QWORD *)v3 + 40);
        a1[41] = v55;
        v56 = *((_QWORD *)v3 + 43);
        a1[42] = *((_QWORD *)v3 + 42);
        a1[43] = v56;
        v57 = v3[29];
        *((_OWORD *)a1 + 28) = v3[28];
        *((_OWORD *)a1 + 29) = v57;
        *((_OWORD *)a1 + 30) = v3[30];
        *((_WORD *)a1 + 248) = *((_WORD *)v3 + 248);
        v58 = v3[25];
        *((_OWORD *)a1 + 24) = v3[24];
        *((_OWORD *)a1 + 25) = v58;
        v59 = v3[27];
        *((_OWORD *)a1 + 26) = v3[26];
        *((_OWORD *)a1 + 27) = v59;
        v60 = v3[23];
        *((_OWORD *)a1 + 22) = v3[22];
        *((_OWORD *)a1 + 23) = v60;
        *((_WORD *)a1 + 249) = *((_WORD *)v3 + 249);
        a1[63] = *((_QWORD *)v3 + 63);
        *((_BYTE *)a1 + 512) = *((_BYTE *)v3 + 512);
        v61 = *(_OWORD *)((char *)v3 + 696);
        *(_OWORD *)(a1 + 85) = *(_OWORD *)((char *)v3 + 680);
        *(_OWORD *)(a1 + 87) = v61;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)v3 + 712);
        *((_WORD *)a1 + 364) = *((_WORD *)v3 + 364);
        v62 = *(_OWORD *)((char *)v3 + 632);
        *(_OWORD *)(a1 + 77) = *(_OWORD *)((char *)v3 + 616);
        *(_OWORD *)(a1 + 79) = v62;
        v63 = *(_OWORD *)((char *)v3 + 664);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)v3 + 648);
        *(_OWORD *)(a1 + 83) = v63;
        v64 = *(_OWORD *)((char *)v3 + 568);
        *(_OWORD *)(a1 + 69) = *(_OWORD *)((char *)v3 + 552);
        *(_OWORD *)(a1 + 71) = v64;
        v65 = *(_OWORD *)((char *)v3 + 600);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v3 + 584);
        *(_OWORD *)(a1 + 75) = v65;
        v66 = *(_OWORD *)((char *)v3 + 536);
        *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)v3 + 520);
        *(_OWORD *)(a1 + 67) = v66;
        *((_BYTE *)a1 + 730) = *((_BYTE *)v3 + 730);
        v67 = *((_QWORD *)v3 + 93);
        a1[92] = *((_QWORD *)v3 + 92);
        a1[93] = v67;
        v68 = v3 + 47;
        v69 = *((_QWORD *)v3 + 95);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v69 == 1)
        {
          *((_OWORD *)a1 + 47) = *v68;
        }
        else
        {
          a1[94] = *(_QWORD *)v68;
          a1[95] = v69;
          swift_bridgeObjectRetain();
        }
        *((_BYTE *)a1 + 768) = 0;
      }
      v93 = v7[6];
      v94 = (char *)a1 + v93;
      v95 = (char *)v3 + v93;
      v96 = sub_1AD63B084();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)v3 + v7[7]);
      *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)v3 + v7[8]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
    }
    v97 = v6[5];
    v98 = (char *)a1 + v97;
    v99 = (_QWORD *)((char *)v3 + v97);
    v100 = v99[1];
    *(_QWORD *)v98 = *v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v99 + 2;
    v102 = v99[3];
    swift_retain();
    if (v102 == 1)
    {
      *((_OWORD *)v98 + 1) = *v101;
    }
    else
    {
      *((_QWORD *)v98 + 2) = *(_QWORD *)v101;
      *((_QWORD *)v98 + 3) = v102;
      swift_bridgeObjectRetain();
    }
    v103 = v6[6];
    v104 = (char *)a1 + v103;
    v105 = (_QWORD *)((char *)v3 + v103);
    v297 = a1;
    if (*(_QWORD *)((char *)v3 + v103 + 272) >> 1 != 0xFFFFFFFFLL
      || (v105[38] | v105[36]) > 1
      || v105[44] & 0xFFFFFFFFFFFFFEFELL | v105[40] & 0xFFFFFFFFFFFF00FELL
      || (v105[48] | v105[46]) >= 2)
    {
      v106 = v105[3];
      v296 = v3;
      if (v106)
      {
        v107 = v105[4];
        *((_QWORD *)v104 + 3) = v106;
        *((_QWORD *)v104 + 4) = v107;
        (**(void (***)(void *, _QWORD *))(v106 - 8))(v104, v105);
        *((_QWORD *)v104 + 5) = v105[5];
        v104[48] = *((_BYTE *)v105 + 48);
        v108 = v105[10];
        v109 = v105[12];
        v110 = v105[14];
        v111 = v105[22];
        v112 = v105[24];
        if (v108 >> 1 != 0xFFFFFFFF
          || (v110 | (unint64_t)v109) > 1
          || v105[20] & 0xFFFFFFFFFFFFFEFELL | v105[16] & 0xFFFFFFFFFFFF00FELL
          || (v112 | v111) >= 2)
        {
          v127 = v105[7];
          v126 = v105[8];
          v222 = v105[15];
          v234 = v105[17];
          v240 = v105[18];
          v246 = v105[19];
          v252 = v105[21];
          v258 = v105[23];
          v264 = v105[25];
          v270 = v105[26];
          v276 = v105[27];
          v282 = v105[28];
          v287 = v105[29];
          v292 = v105[30];
          v206 = v105[16];
          v210 = v105[20];
          v128 = v105[9];
          v129 = v105[11];
          v130 = v105[13];
          v216 = v105[22];
          v228 = v105[24];
          sub_1AD00FEAC(v127, v126, v128, v108, v129, v109, v130, v110, v222, v206, v234, v240, v246, v210, v252, v111, v258, v112, v264,
            v270,
            v276,
            v282,
            v287,
            v292);
          *((_QWORD *)v104 + 7) = v127;
          *((_QWORD *)v104 + 8) = v126;
          *((_QWORD *)v104 + 9) = v128;
          *((_QWORD *)v104 + 10) = v108;
          *((_QWORD *)v104 + 11) = v129;
          *((_QWORD *)v104 + 12) = v109;
          *((_QWORD *)v104 + 13) = v130;
          *((_QWORD *)v104 + 14) = v110;
          *((_QWORD *)v104 + 15) = v222;
          *((_QWORD *)v104 + 16) = v206;
          *((_QWORD *)v104 + 17) = v234;
          *((_QWORD *)v104 + 18) = v240;
          *((_QWORD *)v104 + 19) = v246;
          *((_QWORD *)v104 + 20) = v210;
          *((_QWORD *)v104 + 21) = v252;
          *((_QWORD *)v104 + 22) = v216;
          *((_QWORD *)v104 + 23) = v258;
          *((_QWORD *)v104 + 24) = v228;
          *((_QWORD *)v104 + 25) = v264;
          *((_QWORD *)v104 + 26) = v270;
          *((_QWORD *)v104 + 27) = v276;
          *((_QWORD *)v104 + 28) = v282;
          *((_QWORD *)v104 + 29) = v287;
          *((_QWORD *)v104 + 30) = v292;
        }
        else
        {
          v113 = *(_OWORD *)(v105 + 25);
          *(_OWORD *)(v104 + 184) = *(_OWORD *)(v105 + 23);
          *(_OWORD *)(v104 + 200) = v113;
          v114 = *(_OWORD *)(v105 + 29);
          *(_OWORD *)(v104 + 216) = *(_OWORD *)(v105 + 27);
          *(_OWORD *)(v104 + 232) = v114;
          v115 = *(_OWORD *)(v105 + 17);
          *(_OWORD *)(v104 + 120) = *(_OWORD *)(v105 + 15);
          *(_OWORD *)(v104 + 136) = v115;
          v116 = *(_OWORD *)(v105 + 21);
          *(_OWORD *)(v104 + 152) = *(_OWORD *)(v105 + 19);
          *(_OWORD *)(v104 + 168) = v116;
          v117 = *(_OWORD *)(v105 + 9);
          *(_OWORD *)(v104 + 56) = *(_OWORD *)(v105 + 7);
          *(_OWORD *)(v104 + 72) = v117;
          v118 = *(_OWORD *)(v105 + 13);
          *(_OWORD *)(v104 + 88) = *(_OWORD *)(v105 + 11);
          *(_OWORD *)(v104 + 104) = v118;
        }
      }
      else
      {
        v119 = *((_OWORD *)v105 + 13);
        *((_OWORD *)v104 + 12) = *((_OWORD *)v105 + 12);
        *((_OWORD *)v104 + 13) = v119;
        *((_OWORD *)v104 + 14) = *((_OWORD *)v105 + 14);
        *((_QWORD *)v104 + 30) = v105[30];
        v120 = *((_OWORD *)v105 + 9);
        *((_OWORD *)v104 + 8) = *((_OWORD *)v105 + 8);
        *((_OWORD *)v104 + 9) = v120;
        v121 = *((_OWORD *)v105 + 11);
        *((_OWORD *)v104 + 10) = *((_OWORD *)v105 + 10);
        *((_OWORD *)v104 + 11) = v121;
        v122 = *((_OWORD *)v105 + 5);
        *((_OWORD *)v104 + 4) = *((_OWORD *)v105 + 4);
        *((_OWORD *)v104 + 5) = v122;
        v123 = *((_OWORD *)v105 + 7);
        *((_OWORD *)v104 + 6) = *((_OWORD *)v105 + 6);
        *((_OWORD *)v104 + 7) = v123;
        v124 = *((_OWORD *)v105 + 1);
        *(_OWORD *)v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v124;
        v125 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v125;
      }
      v131 = v105[32];
      v132 = v105[33];
      v133 = v105[34];
      v134 = v105[38];
      v211 = v105[40];
      v217 = v105[41];
      v223 = v105[42];
      v229 = v105[43];
      v235 = v105[44];
      v241 = v105[45];
      v247 = v105[46];
      v253 = v105[47];
      v259 = v105[48];
      v265 = v105[49];
      v271 = v105[50];
      v277 = v105[51];
      v283 = v105[52];
      v288 = v105[53];
      v293 = v105[54];
      v135 = v105[39];
      v136 = v105[31];
      v137 = v105[35];
      v138 = v105[36];
      v139 = v105[37];
      v140 = v134;
      sub_1AD00FEAC(v136, v131, v132, v133, v137, v138, v139, v134, v135, v211, v217, v223, v229, v235, v241, v247, v253, v259, v265,
        v271,
        v277,
        v283,
        v288,
        v293);
      *((_QWORD *)v104 + 31) = v136;
      *((_QWORD *)v104 + 32) = v131;
      *((_QWORD *)v104 + 33) = v132;
      *((_QWORD *)v104 + 34) = v133;
      *((_QWORD *)v104 + 35) = v137;
      *((_QWORD *)v104 + 36) = v138;
      *((_QWORD *)v104 + 37) = v139;
      *((_QWORD *)v104 + 38) = v140;
      *((_QWORD *)v104 + 39) = v135;
      *((_QWORD *)v104 + 40) = v211;
      *((_QWORD *)v104 + 41) = v217;
      *((_QWORD *)v104 + 42) = v223;
      *((_QWORD *)v104 + 43) = v229;
      *((_QWORD *)v104 + 44) = v235;
      *((_QWORD *)v104 + 45) = v241;
      *((_QWORD *)v104 + 46) = v247;
      *((_QWORD *)v104 + 47) = v253;
      *((_QWORD *)v104 + 48) = v259;
      *((_QWORD *)v104 + 49) = v265;
      *((_QWORD *)v104 + 50) = v271;
      *((_QWORD *)v104 + 51) = v277;
      *((_QWORD *)v104 + 52) = v283;
      *((_QWORD *)v104 + 53) = v288;
      v3 = v296;
      *((_QWORD *)v104 + 54) = v293;
      a1 = v297;
      v6 = v298;
    }
    else
    {
      memcpy(v104, v105, 0x1B8uLL);
    }
    v141 = v6[7];
    v142 = (char *)a1 + v141;
    v143 = (_QWORD *)((char *)v3 + v141);
    v144 = v143[1];
    *(_QWORD *)v142 = *v143;
    *((_QWORD *)v142 + 1) = v144;
    v145 = v143 + 2;
    v146 = v143[3];
    swift_retain();
    if (v146 == 1)
    {
      *((_OWORD *)v142 + 1) = *v145;
    }
    else
    {
      *((_QWORD *)v142 + 2) = *(_QWORD *)v145;
      *((_QWORD *)v142 + 3) = v146;
      swift_bridgeObjectRetain();
    }
    v147 = v6[8];
    v148 = (char *)a1 + v147;
    v149 = (_QWORD *)((char *)v3 + v147);
    if (*(_QWORD *)((char *)v3 + v147 + 272) >> 1 != 0xFFFFFFFFLL
      || (v149[38] | v149[36]) > 1
      || v149[44] & 0xFFFFFFFFFFFFFEFELL | v149[40] & 0xFFFFFFFFFFFF00FELL
      || (v149[48] | v149[46]) >= 2)
    {
      v150 = v149[3];
      if (v150)
      {
        v151 = v149[4];
        *((_QWORD *)v148 + 3) = v150;
        *((_QWORD *)v148 + 4) = v151;
        (**(void (***)(void *, _QWORD *))(v150 - 8))(v148, v149);
        *((_QWORD *)v148 + 5) = v149[5];
        v148[48] = *((_BYTE *)v149 + 48);
        v152 = v149[10];
        v153 = v149[12];
        v154 = v149[14];
        v155 = v149[20];
        v156 = v149[22];
        v157 = v149[24];
        if (v152 >> 1 != 0xFFFFFFFF
          || (v154 | (unint64_t)v153) > 1
          || v155 & 0xFFFFFFFFFFFFFEFELL | v149[16] & 0xFFFFFFFFFFFF00FELL
          || (v157 | v156) >= 2)
        {
          v171 = v149[7];
          v172 = v149[11];
          v203 = v149[13];
          v224 = v149[15];
          v236 = v149[17];
          v242 = v149[18];
          v248 = v149[19];
          v254 = v149[21];
          v260 = v149[23];
          v266 = v149[25];
          v272 = v149[26];
          v278 = v149[27];
          v284 = v149[28];
          v289 = v149[29];
          v294 = v149[30];
          v212 = v149[22];
          v218 = v149[16];
          v173 = v149[8];
          v174 = v149[9];
          v230 = v149[24];
          v175 = v149[12];
          v176 = v149[10];
          v177 = v149[14];
          sub_1AD00FEAC(v171, v173, v174, v152, v172, v153, v203, v154, v224, v218, v236, v242, v248, v155, v254, v156, v260, v157, v266,
            v272,
            v278,
            v284,
            v289,
            v294);
          *((_QWORD *)v148 + 7) = v171;
          *((_QWORD *)v148 + 8) = v173;
          *((_QWORD *)v148 + 9) = v174;
          *((_QWORD *)v148 + 10) = v176;
          *((_QWORD *)v148 + 11) = v172;
          *((_QWORD *)v148 + 12) = v175;
          *((_QWORD *)v148 + 13) = v203;
          *((_QWORD *)v148 + 14) = v177;
          *((_QWORD *)v148 + 15) = v224;
          *((_QWORD *)v148 + 16) = v218;
          *((_QWORD *)v148 + 17) = v236;
          *((_QWORD *)v148 + 18) = v242;
          *((_QWORD *)v148 + 19) = v248;
          *((_QWORD *)v148 + 20) = v155;
          *((_QWORD *)v148 + 21) = v254;
          *((_QWORD *)v148 + 22) = v212;
          *((_QWORD *)v148 + 23) = v260;
          *((_QWORD *)v148 + 24) = v230;
          *((_QWORD *)v148 + 25) = v266;
          *((_QWORD *)v148 + 26) = v272;
          *((_QWORD *)v148 + 27) = v278;
          *((_QWORD *)v148 + 28) = v284;
          *((_QWORD *)v148 + 29) = v289;
          *((_QWORD *)v148 + 30) = v294;
        }
        else
        {
          v158 = *(_OWORD *)(v149 + 25);
          *(_OWORD *)(v148 + 184) = *(_OWORD *)(v149 + 23);
          *(_OWORD *)(v148 + 200) = v158;
          v159 = *(_OWORD *)(v149 + 29);
          *(_OWORD *)(v148 + 216) = *(_OWORD *)(v149 + 27);
          *(_OWORD *)(v148 + 232) = v159;
          v160 = *(_OWORD *)(v149 + 17);
          *(_OWORD *)(v148 + 120) = *(_OWORD *)(v149 + 15);
          *(_OWORD *)(v148 + 136) = v160;
          v161 = *(_OWORD *)(v149 + 21);
          *(_OWORD *)(v148 + 152) = *(_OWORD *)(v149 + 19);
          *(_OWORD *)(v148 + 168) = v161;
          v162 = *(_OWORD *)(v149 + 9);
          *(_OWORD *)(v148 + 56) = *(_OWORD *)(v149 + 7);
          *(_OWORD *)(v148 + 72) = v162;
          v163 = *(_OWORD *)(v149 + 13);
          *(_OWORD *)(v148 + 88) = *(_OWORD *)(v149 + 11);
          *(_OWORD *)(v148 + 104) = v163;
        }
      }
      else
      {
        v164 = *((_OWORD *)v149 + 13);
        *((_OWORD *)v148 + 12) = *((_OWORD *)v149 + 12);
        *((_OWORD *)v148 + 13) = v164;
        *((_OWORD *)v148 + 14) = *((_OWORD *)v149 + 14);
        *((_QWORD *)v148 + 30) = v149[30];
        v165 = *((_OWORD *)v149 + 9);
        *((_OWORD *)v148 + 8) = *((_OWORD *)v149 + 8);
        *((_OWORD *)v148 + 9) = v165;
        v166 = *((_OWORD *)v149 + 11);
        *((_OWORD *)v148 + 10) = *((_OWORD *)v149 + 10);
        *((_OWORD *)v148 + 11) = v166;
        v167 = *((_OWORD *)v149 + 5);
        *((_OWORD *)v148 + 4) = *((_OWORD *)v149 + 4);
        *((_OWORD *)v148 + 5) = v167;
        v168 = *((_OWORD *)v149 + 7);
        *((_OWORD *)v148 + 6) = *((_OWORD *)v149 + 6);
        *((_OWORD *)v148 + 7) = v168;
        v169 = *((_OWORD *)v149 + 1);
        *(_OWORD *)v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v169;
        v170 = *((_OWORD *)v149 + 3);
        *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
        *((_OWORD *)v148 + 3) = v170;
      }
      v178 = v149[34];
      v179 = v149[35];
      v180 = v149[38];
      v207 = v149[39];
      v213 = v149[40];
      v219 = v149[41];
      v225 = v149[42];
      v231 = v149[43];
      v237 = v149[44];
      v243 = v149[45];
      v249 = v149[46];
      v255 = v149[47];
      v261 = v149[48];
      v267 = v149[49];
      v273 = v149[50];
      v279 = v149[51];
      v285 = v149[52];
      v290 = v149[53];
      v295 = v149[54];
      v181 = v149[31];
      v182 = v149[32];
      v183 = v149[33];
      v184 = v149[36];
      v185 = v149[37];
      v186 = v180;
      sub_1AD00FEAC(v181, v182, v183, v178, v179, v184, v185, v180, v207, v213, v219, v225, v231, v237, v243, v249, v255, v261, v267,
        v273,
        v279,
        v285,
        v290,
        v295);
      *((_QWORD *)v148 + 31) = v181;
      *((_QWORD *)v148 + 32) = v182;
      *((_QWORD *)v148 + 33) = v183;
      *((_QWORD *)v148 + 34) = v178;
      *((_QWORD *)v148 + 35) = v179;
      *((_QWORD *)v148 + 36) = v184;
      *((_QWORD *)v148 + 37) = v185;
      *((_QWORD *)v148 + 38) = v186;
      *((_QWORD *)v148 + 39) = v207;
      *((_QWORD *)v148 + 40) = v213;
      *((_QWORD *)v148 + 41) = v219;
      *((_QWORD *)v148 + 42) = v225;
      *((_QWORD *)v148 + 43) = v231;
      *((_QWORD *)v148 + 44) = v237;
      *((_QWORD *)v148 + 45) = v243;
      *((_QWORD *)v148 + 46) = v249;
      *((_QWORD *)v148 + 47) = v255;
      *((_QWORD *)v148 + 48) = v261;
      *((_QWORD *)v148 + 49) = v267;
      *((_QWORD *)v148 + 50) = v273;
      *((_QWORD *)v148 + 51) = v279;
      *((_QWORD *)v148 + 52) = v285;
      *((_QWORD *)v148 + 53) = v290;
      *((_QWORD *)v148 + 54) = v295;
      a1 = v297;
      v6 = v298;
    }
    else
    {
      memcpy(v148, v149, 0x1B8uLL);
    }
    v187 = v6[10];
    *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)v3 + v6[9]);
    v188 = (char *)a1 + v187;
    v189 = (char *)v3 + v187;
    v190 = *((_QWORD *)v189 + 1);
    if (v190)
    {
      *(_QWORD *)v188 = *(_QWORD *)v189;
      *((_QWORD *)v188 + 1) = v190;
      v191 = *((_QWORD *)v189 + 3);
      *((_QWORD *)v188 + 2) = *((_QWORD *)v189 + 2);
      *((_QWORD *)v188 + 3) = v191;
      *((_QWORD *)v188 + 4) = *((_QWORD *)v189 + 4);
      v188[40] = v189[40];
      v192 = *((_QWORD *)v189 + 7);
      *((_QWORD *)v188 + 6) = *((_QWORD *)v189 + 6);
      *((_QWORD *)v188 + 7) = v192;
      *((_QWORD *)v188 + 8) = *((_QWORD *)v189 + 8);
      v188[72] = v189[72];
      v193 = *((_OWORD *)v189 + 6);
      *((_OWORD *)v188 + 5) = *((_OWORD *)v189 + 5);
      *((_OWORD *)v188 + 6) = v193;
      *((_WORD *)v188 + 56) = *((_WORD *)v189 + 56);
      *(_OWORD *)(v188 + 120) = *(_OWORD *)(v189 + 120);
      *(_OWORD *)(v188 + 136) = *(_OWORD *)(v189 + 136);
      v188[152] = v189[152];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v194 = *((_OWORD *)v189 + 7);
      *((_OWORD *)v188 + 6) = *((_OWORD *)v189 + 6);
      *((_OWORD *)v188 + 7) = v194;
      *((_OWORD *)v188 + 8) = *((_OWORD *)v189 + 8);
      *(_OWORD *)(v188 + 137) = *(_OWORD *)(v189 + 137);
      v195 = *((_OWORD *)v189 + 3);
      *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
      *((_OWORD *)v188 + 3) = v195;
      v196 = *((_OWORD *)v189 + 5);
      *((_OWORD *)v188 + 4) = *((_OWORD *)v189 + 4);
      *((_OWORD *)v188 + 5) = v196;
      v197 = *((_OWORD *)v189 + 1);
      *(_OWORD *)v188 = *(_OWORD *)v189;
      *((_OWORD *)v188 + 1) = v197;
    }
  }
  return a1;
}

uint64_t sub_1AD40A7F8(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t result;

  v4 = type metadata accessor for PosterArchive();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (*(_QWORD *)(a1 + 184))
    {
      if (*(_QWORD *)(a1 + 72) != 1)
        swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 88) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*(_QWORD *)(a1 + 208) != 1)
        swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a1 + 768);
    if (v5 == 2)
      goto LABEL_15;
    if (v5 == 1)
    {
      if (*(_QWORD *)(a1 + 280))
      {
        __swift_destroy_boxed_opaque_existential_1(a1 + 256);
        v6 = *(_QWORD *)(a1 + 336);
        v7 = *(_QWORD *)(a1 + 352);
        v8 = *(_QWORD *)(a1 + 368);
        v9 = *(_QWORD *)(a1 + 384);
        v10 = *(_QWORD *)(a1 + 416);
        v11 = *(_QWORD *)(a1 + 432);
        v12 = *(_QWORD *)(a1 + 448);
        if (v6 >> 1 != 0xFFFFFFFF
          || (v8 | (unint64_t)v7) > 1
          || v10 & 0xFFFFFFFFFFFFFEFELL | v9 & 0xFFFFFFFFFFFF00FELL
          || (v12 | v11) >= 2)
        {
          sub_1AD00E8B0(*(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), v6, *(_QWORD *)(a1 + 344), v7, *(_QWORD *)(a1 + 360), v8, *(_QWORD *)(a1 + 376), v9, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), v10, *(_QWORD *)(a1 + 424), v11, *(_QWORD *)(a1 + 440), v12, *(_QWORD *)(a1 + 456),
            *(_QWORD *)(a1 + 464),
            *(_QWORD *)(a1 + 472),
            *(_QWORD *)(a1 + 480),
            *(_QWORD *)(a1 + 488),
            *(_QWORD *)(a1 + 496));
        }
      }
      sub_1AD00E8B0(*(_QWORD *)(a1 + 504), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), *(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 584), *(_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 600), *(_QWORD *)(a1 + 608), *(_QWORD *)(a1 + 616), *(_QWORD *)(a1 + 624), *(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 640), *(_QWORD *)(a1 + 648),
        *(_QWORD *)(a1 + 656),
        *(_QWORD *)(a1 + 664),
        *(_QWORD *)(a1 + 672),
        *(_QWORD *)(a1 + 680),
        *(_QWORD *)(a1 + 688));
      if (*(_QWORD *)(a1 + 696))
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      goto LABEL_24;
    }
    if (!*(_BYTE *)(a1 + 768))
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(a1 + 296) != 1)
        swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(a1 + 760) != 1)
LABEL_15:
        swift_bridgeObjectRelease();
    }
LABEL_24:
    v13 = a1 + *(int *)(v4 + 24);
    v14 = sub_1AD63B084();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = a1 + a2[5];
  swift_release();
  if (*(_QWORD *)(v15 + 24) != 1)
    swift_bridgeObjectRelease();
  v16 = (_QWORD *)(a1 + a2[6]);
  if (v16[34] >> 1 != 0xFFFFFFFFLL
    || (v16[38] | v16[36]) > 1uLL
    || (v16[44] & 0xFFFFFFFFFFFFFEFELL | v16[40] & 0xFFFFFFFFFFFF00FELL) != 0
    || (v16[48] | v16[46]) >= 2uLL)
  {
    if (v16[3])
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + a2[6]);
      v20 = v16[10];
      v21 = v16[12];
      v22 = v16[14];
      v23 = v16[16];
      v24 = v16[20];
      v25 = v16[22];
      v26 = v16[24];
      if (v20 >> 1 != 0xFFFFFFFF
        || (v22 | (unint64_t)v21) > 1
        || v24 & 0xFFFFFFFFFFFFFEFELL | v23 & 0xFFFFFFFFFFFF00FELL
        || (v26 | v25) >= 2)
      {
        sub_1AD00E8B0(v16[7], v16[8], v16[9], v20, v16[11], v21, v16[13], v22, v16[15], v23, v16[17], v16[18], v16[19], v24, v16[21], v25, v16[23], v26, v16[25],
          v16[26],
          v16[27],
          v16[28],
          v16[29],
          v16[30]);
      }
    }
    v27 = v16[31];
    v28 = v16[32];
    v29 = v16 + 31;
    sub_1AD00E8B0(v27, v28, v29[2], v29[3], v29[4], v29[5], v29[6], v29[7], v29[8], v29[9], v29[10], v29[11], v29[12], v29[13], v29[14], v29[15], v29[16], v29[17], v29[18],
      v29[19],
      v29[20],
      v29[21],
      v29[22],
      v29[23]);
  }
  v30 = a1 + a2[7];
  swift_release();
  if (*(_QWORD *)(v30 + 24) != 1)
    swift_bridgeObjectRelease();
  v31 = (_QWORD *)(a1 + a2[8]);
  if (v31[34] >> 1 != 0xFFFFFFFFLL
    || (v31[38] | v31[36]) > 1
    || v31[44] & 0xFFFFFFFFFFFFFEFELL | v31[40] & 0xFFFFFFFFFFFF00FELL
    || (v31[48] | v31[46]) >= 2)
  {
    if (v31[3])
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + a2[8]);
      v32 = v31[10];
      v33 = v31[12];
      v34 = v31[14];
      v35 = v31[16];
      v36 = v31[20];
      v37 = v31[22];
      v38 = v31[24];
      if (v32 >> 1 != 0xFFFFFFFF
        || (v34 | (unint64_t)v33) > 1
        || v36 & 0xFFFFFFFFFFFFFEFELL | v35 & 0xFFFFFFFFFFFF00FELL
        || (v38 | v37) >= 2)
      {
        sub_1AD00E8B0(v31[7], v31[8], v31[9], v32, v31[11], v33, v31[13], v34, v31[15], v35, v31[17], v31[18], v31[19], v36, v31[21], v37, v31[23], v38, v31[25],
          v31[26],
          v31[27],
          v31[28],
          v31[29],
          v31[30]);
      }
    }
    v39 = v31[31];
    v40 = v31[32];
    v41 = v31 + 31;
    sub_1AD00E8B0(v39, v40, v41[2], v41[3], v41[4], v41[5], v41[6], v41[7], v41[8], v41[9], v41[10], v41[11], v41[12], v41[13], v41[14], v41[15], v41[16], v41[17], v41[18],
      v41[19],
      v41[20],
      v41[21],
      v41[22],
      v41[23]);
  }
  result = *(_QWORD *)(a1 + a2[10] + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

_OWORD *sub_1AD40ADA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  int v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  _OWORD *v298;
  int *v299;
  _OWORD *v300;

  v6 = (int *)type metadata accessor for PosterArchive();
  v7 = *((_QWORD *)v6 - 1);
  v299 = a3;
  v300 = a2;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = *((_QWORD *)a2 + 23);
    if (v9)
    {
      *a1 = *a2;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
      v10 = *((_QWORD *)a2 + 9);
      v11 = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = v11;
      if (v10 == 1)
      {
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      }
      else
      {
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v10;
        swift_bridgeObjectRetain();
      }
      v18 = *((_QWORD *)a2 + 11);
      if (v18 == 1)
      {
        v19 = a2[8];
        a1[7] = a2[7];
        a1[8] = v19;
        a1[9] = a2[9];
        v20 = a2[6];
        a1[5] = a2[5];
        a1[6] = v20;
      }
      else
      {
        *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
        *((_QWORD *)a1 + 11) = v18;
        a1[6] = a2[6];
        *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
        *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
        v21 = a2[9];
        a1[8] = a2[8];
        a1[9] = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
      *((_BYTE *)a1 + 176) = *((_BYTE *)a2 + 176);
      v22 = *((_QWORD *)a2 + 24);
      *((_QWORD *)a1 + 23) = v9;
      *((_QWORD *)a1 + 24) = v22;
      v23 = (_OWORD *)((char *)a2 + 200);
      v24 = *((_QWORD *)a2 + 26);
      swift_retain();
      if (v24 == 1)
      {
        *(_OWORD *)((char *)a1 + 200) = *v23;
      }
      else
      {
        *((_QWORD *)a1 + 25) = *(_QWORD *)v23;
        *((_QWORD *)a1 + 26) = v24;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v12 = a2[11];
      a1[10] = a2[10];
      a1[11] = v12;
      a1[12] = a2[12];
      *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
      v13 = a2[7];
      a1[6] = a2[6];
      a1[7] = v13;
      v14 = a2[9];
      a1[8] = a2[8];
      a1[9] = v14;
      v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      v16 = a2[5];
      a1[4] = a2[4];
      a1[5] = v16;
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
    }
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    v25 = a1 + 14;
    v26 = a2 + 14;
    v27 = *((unsigned __int8 *)a2 + 768);
    if (v27 == 2)
    {
      v43 = a2[15];
      *v25 = *v26;
      a1[15] = v43;
      v44 = a2[17];
      a1[16] = a2[16];
      a1[17] = v44;
      v45 = *((_QWORD *)a2 + 37);
      *((_QWORD *)a1 + 36) = *((_QWORD *)a2 + 36);
      *((_QWORD *)a1 + 37) = v45;
      *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
      *((_BYTE *)a1 + 768) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v27 == 1)
    {
      v204 = v7;
      v28 = a2[15];
      *v25 = *v26;
      a1[15] = v28;
      v29 = a1 + 16;
      v30 = a2 + 16;
      v31 = *((_QWORD *)a2 + 35);
      if (v31)
      {
        v32 = *((_QWORD *)a2 + 36);
        *((_QWORD *)a1 + 35) = v31;
        *((_QWORD *)a1 + 36) = v32;
        (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v29, v30);
        *((_QWORD *)a1 + 37) = *((_QWORD *)a2 + 37);
        *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
        v33 = *((_QWORD *)a2 + 42);
        v34 = *((_QWORD *)a2 + 44);
        v35 = *((_QWORD *)a2 + 46);
        v36 = *((_QWORD *)a2 + 52);
        if (v33 >> 1 != 0xFFFFFFFF
          || (v35 | (unint64_t)v34) > 1
          || v36 & 0xFFFFFFFFFFFFFEFELL | a2[24] & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)a2 + 56) | *((_QWORD *)a2 + 54)) >= 2)
        {
          v74 = *((_QWORD *)a2 + 40);
          v203 = *((_QWORD *)a2 + 41);
          v214 = *((_QWORD *)a2 + 47);
          v220 = *((_QWORD *)a2 + 49);
          v238 = *((_QWORD *)a2 + 50);
          v244 = *((_QWORD *)a2 + 51);
          v250 = *((_QWORD *)a2 + 53);
          v256 = *((_QWORD *)a2 + 55);
          v262 = *((_QWORD *)a2 + 57);
          v268 = *((_QWORD *)a2 + 58);
          v274 = *((_QWORD *)a2 + 59);
          v280 = *((_QWORD *)a2 + 60);
          v286 = *((_QWORD *)a2 + 61);
          v292 = *((_QWORD *)a2 + 62);
          v75 = *((_QWORD *)a2 + 39);
          v226 = *((_QWORD *)a2 + 54);
          v232 = *((_QWORD *)a2 + 56);
          v76 = *((_QWORD *)a2 + 43);
          v77 = *((_QWORD *)a2 + 44);
          v205 = *((_QWORD *)a2 + 48);
          v78 = *((_QWORD *)a2 + 45);
          v79 = *((_QWORD *)a2 + 46);
          sub_1AD00FEAC(v75, v74, v203, v33, v76, v34, v78, v35, v214, v205, v220, v238, v244, v36, v250, v226, v256, v232, v262,
            v268,
            v274,
            v280,
            v286,
            v292);
          *((_QWORD *)a1 + 39) = v75;
          *((_QWORD *)a1 + 40) = v74;
          *((_QWORD *)a1 + 41) = v203;
          *((_QWORD *)a1 + 42) = v33;
          *((_QWORD *)a1 + 43) = v76;
          *((_QWORD *)a1 + 44) = v77;
          *((_QWORD *)a1 + 45) = v78;
          *((_QWORD *)a1 + 46) = v79;
          *((_QWORD *)a1 + 47) = v214;
          *((_QWORD *)a1 + 48) = v205;
          *((_QWORD *)a1 + 49) = v220;
          *((_QWORD *)a1 + 50) = v238;
          *((_QWORD *)a1 + 51) = v244;
          *((_QWORD *)a1 + 52) = v36;
          *((_QWORD *)a1 + 53) = v250;
          *((_QWORD *)a1 + 54) = v226;
          *((_QWORD *)a1 + 55) = v256;
          *((_QWORD *)a1 + 56) = v232;
          *((_QWORD *)a1 + 57) = v262;
          *((_QWORD *)a1 + 58) = v268;
          *((_QWORD *)a1 + 59) = v274;
          *((_QWORD *)a1 + 60) = v280;
          *((_QWORD *)a1 + 61) = v286;
          *((_QWORD *)a1 + 62) = v292;
        }
        else
        {
          v37 = *(_OWORD *)((char *)a2 + 456);
          *(_OWORD *)((char *)a1 + 440) = *(_OWORD *)((char *)a2 + 440);
          *(_OWORD *)((char *)a1 + 456) = v37;
          v38 = *(_OWORD *)((char *)a2 + 488);
          *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
          *(_OWORD *)((char *)a1 + 488) = v38;
          v39 = *(_OWORD *)((char *)a2 + 392);
          *(_OWORD *)((char *)a1 + 376) = *(_OWORD *)((char *)a2 + 376);
          *(_OWORD *)((char *)a1 + 392) = v39;
          v40 = *(_OWORD *)((char *)a2 + 424);
          *(_OWORD *)((char *)a1 + 408) = *(_OWORD *)((char *)a2 + 408);
          *(_OWORD *)((char *)a1 + 424) = v40;
          v41 = *(_OWORD *)((char *)a2 + 328);
          *(_OWORD *)((char *)a1 + 312) = *(_OWORD *)((char *)a2 + 312);
          *(_OWORD *)((char *)a1 + 328) = v41;
          v42 = *(_OWORD *)((char *)a2 + 360);
          *(_OWORD *)((char *)a1 + 344) = *(_OWORD *)((char *)a2 + 344);
          *(_OWORD *)((char *)a1 + 360) = v42;
        }
      }
      else
      {
        v67 = a2[29];
        a1[28] = a2[28];
        a1[29] = v67;
        a1[30] = a2[30];
        *((_QWORD *)a1 + 62) = *((_QWORD *)a2 + 62);
        v68 = a2[25];
        a1[24] = a2[24];
        a1[25] = v68;
        v69 = a2[27];
        a1[26] = a2[26];
        a1[27] = v69;
        v70 = a2[21];
        a1[20] = a2[20];
        a1[21] = v70;
        v71 = a2[23];
        a1[22] = a2[22];
        a1[23] = v71;
        v72 = a2[17];
        *v29 = *v30;
        a1[17] = v72;
        v73 = a2[19];
        a1[18] = a2[18];
        a1[19] = v73;
      }
      v80 = *((_QWORD *)a2 + 65);
      v81 = *((_QWORD *)a2 + 66);
      v206 = *((_QWORD *)a2 + 71);
      v209 = *((_QWORD *)a2 + 72);
      v215 = *((_QWORD *)a2 + 73);
      v221 = *((_QWORD *)a2 + 74);
      v227 = *((_QWORD *)a2 + 75);
      v233 = *((_QWORD *)a2 + 76);
      v239 = *((_QWORD *)a2 + 77);
      v245 = *((_QWORD *)a2 + 78);
      v251 = *((_QWORD *)a2 + 79);
      v257 = *((_QWORD *)a2 + 80);
      v263 = *((_QWORD *)a2 + 81);
      v269 = *((_QWORD *)a2 + 82);
      v275 = *((_QWORD *)a2 + 83);
      v281 = *((_QWORD *)a2 + 84);
      v287 = *((_QWORD *)a2 + 85);
      v293 = *((_QWORD *)a2 + 86);
      v82 = *((_QWORD *)a2 + 63);
      v83 = *((_QWORD *)a2 + 64);
      v84 = *((_QWORD *)a2 + 67);
      v85 = *((_QWORD *)a2 + 68);
      v86 = *((_QWORD *)a2 + 69);
      v87 = *((_QWORD *)a2 + 70);
      sub_1AD00FEAC(v82, v83, v80, v81, v84, v85, v86, v87, v206, *((_QWORD *)v300 + 72), *((_QWORD *)v300 + 73), *((_QWORD *)v300 + 74), *((_QWORD *)v300 + 75), *((_QWORD *)v300 + 76), *((_QWORD *)v300 + 77), *((_QWORD *)v300 + 78), *((_QWORD *)v300 + 79), *((_QWORD *)v300 + 80), *((_QWORD *)v300 + 81),
        *((_QWORD *)v300 + 82),
        *((_QWORD *)v300 + 83),
        *((_QWORD *)v300 + 84),
        *((_QWORD *)v300 + 85),
        *((_QWORD *)v300 + 86));
      *((_QWORD *)a1 + 63) = v82;
      *((_QWORD *)a1 + 64) = v83;
      *((_QWORD *)a1 + 65) = v80;
      *((_QWORD *)a1 + 66) = v81;
      *((_QWORD *)a1 + 67) = v84;
      *((_QWORD *)a1 + 68) = v85;
      *((_QWORD *)a1 + 69) = v86;
      *((_QWORD *)a1 + 70) = v87;
      *((_QWORD *)a1 + 71) = v206;
      *((_QWORD *)a1 + 72) = v209;
      a2 = v300;
      *((_QWORD *)a1 + 73) = v215;
      *((_QWORD *)a1 + 74) = v221;
      *((_QWORD *)a1 + 75) = v227;
      *((_QWORD *)a1 + 76) = v233;
      *((_QWORD *)a1 + 77) = v239;
      *((_QWORD *)a1 + 78) = v245;
      *((_QWORD *)a1 + 79) = v251;
      *((_QWORD *)a1 + 80) = v257;
      *((_QWORD *)a1 + 81) = v263;
      *((_QWORD *)a1 + 82) = v269;
      *((_QWORD *)a1 + 83) = v275;
      *((_QWORD *)a1 + 84) = v281;
      *((_QWORD *)a1 + 85) = v287;
      *((_QWORD *)a1 + 86) = v293;
      v88 = *((_QWORD *)v300 + 87);
      if (v88)
      {
        v89 = *((_QWORD *)v300 + 88);
        *((_QWORD *)a1 + 87) = v88;
        *((_QWORD *)a1 + 88) = v89;
        *((_QWORD *)a1 + 89) = *((_QWORD *)v300 + 89);
        *((_QWORD *)a1 + 90) = *((_QWORD *)v300 + 90);
        *((_QWORD *)a1 + 91) = *((_QWORD *)v300 + 91);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        v90 = *(_OWORD *)((char *)v300 + 712);
        *(_OWORD *)((char *)a1 + 696) = *(_OWORD *)((char *)v300 + 696);
        *(_OWORD *)((char *)a1 + 712) = v90;
        *((_QWORD *)a1 + 91) = *((_QWORD *)v300 + 91);
      }
      a3 = v299;
      v7 = v204;
      *((_BYTE *)a1 + 736) = *((_BYTE *)v300 + 736);
      *((_BYTE *)a1 + 768) = 1;
    }
    else
    {
      *((_WORD *)a1 + 112) = *((_WORD *)a2 + 112);
      v46 = *((_QWORD *)a2 + 30);
      *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
      *((_QWORD *)a1 + 30) = v46;
      v47 = *((_QWORD *)a2 + 32);
      *((_QWORD *)a1 + 31) = *((_QWORD *)a2 + 31);
      *((_QWORD *)a1 + 32) = v47;
      *((_BYTE *)a1 + 264) = *((_BYTE *)a2 + 264);
      v48 = *((_QWORD *)a2 + 35);
      *((_QWORD *)a1 + 34) = *((_QWORD *)a2 + 34);
      *((_QWORD *)a1 + 35) = v48;
      v49 = a2 + 18;
      v50 = *((_QWORD *)a2 + 37);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v50 == 1)
      {
        a1[18] = *v49;
      }
      else
      {
        *((_QWORD *)a1 + 36) = *(_QWORD *)v49;
        *((_QWORD *)a1 + 37) = v50;
        swift_bridgeObjectRetain();
      }
      v51 = *((_QWORD *)a2 + 39);
      *((_QWORD *)a1 + 38) = *((_QWORD *)a2 + 38);
      *((_QWORD *)a1 + 39) = v51;
      v52 = *((_QWORD *)a2 + 41);
      *((_QWORD *)a1 + 40) = *((_QWORD *)a2 + 40);
      *((_QWORD *)a1 + 41) = v52;
      v53 = *((_QWORD *)a2 + 43);
      *((_QWORD *)a1 + 42) = *((_QWORD *)a2 + 42);
      *((_QWORD *)a1 + 43) = v53;
      v54 = a2[29];
      a1[28] = a2[28];
      a1[29] = v54;
      a1[30] = a2[30];
      *((_WORD *)a1 + 248) = *((_WORD *)a2 + 248);
      v55 = a2[25];
      a1[24] = a2[24];
      a1[25] = v55;
      v56 = a2[27];
      a1[26] = a2[26];
      a1[27] = v56;
      v57 = a2[23];
      a1[22] = a2[22];
      a1[23] = v57;
      *((_WORD *)a1 + 249) = *((_WORD *)a2 + 249);
      *((_QWORD *)a1 + 63) = *((_QWORD *)a2 + 63);
      *((_BYTE *)a1 + 512) = *((_BYTE *)a2 + 512);
      v58 = *(_OWORD *)((char *)a2 + 696);
      *(_OWORD *)((char *)a1 + 680) = *(_OWORD *)((char *)a2 + 680);
      *(_OWORD *)((char *)a1 + 696) = v58;
      *(_OWORD *)((char *)a1 + 712) = *(_OWORD *)((char *)a2 + 712);
      *((_WORD *)a1 + 364) = *((_WORD *)a2 + 364);
      v59 = *(_OWORD *)((char *)a2 + 632);
      *(_OWORD *)((char *)a1 + 616) = *(_OWORD *)((char *)a2 + 616);
      *(_OWORD *)((char *)a1 + 632) = v59;
      v60 = *(_OWORD *)((char *)a2 + 664);
      *(_OWORD *)((char *)a1 + 648) = *(_OWORD *)((char *)a2 + 648);
      *(_OWORD *)((char *)a1 + 664) = v60;
      v61 = *(_OWORD *)((char *)a2 + 568);
      *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
      *(_OWORD *)((char *)a1 + 568) = v61;
      v62 = *(_OWORD *)((char *)a2 + 600);
      *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
      *(_OWORD *)((char *)a1 + 600) = v62;
      v63 = *(_OWORD *)((char *)a2 + 536);
      *(_OWORD *)((char *)a1 + 520) = *(_OWORD *)((char *)a2 + 520);
      *(_OWORD *)((char *)a1 + 536) = v63;
      *((_BYTE *)a1 + 730) = *((_BYTE *)a2 + 730);
      v64 = *((_QWORD *)a2 + 93);
      *((_QWORD *)a1 + 92) = *((_QWORD *)a2 + 92);
      *((_QWORD *)a1 + 93) = v64;
      v65 = a2 + 47;
      v66 = *((_QWORD *)a2 + 95);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v66 == 1)
      {
        a1[47] = *v65;
      }
      else
      {
        *((_QWORD *)a1 + 94) = *(_QWORD *)v65;
        *((_QWORD *)a1 + 95) = v66;
        swift_bridgeObjectRetain();
      }
      *((_BYTE *)a1 + 768) = 0;
    }
    v91 = v6[6];
    v92 = (char *)a1 + v91;
    v93 = (char *)a2 + v91;
    v94 = sub_1AD63B084();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v92, v93, v94);
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v95 = a3[5];
  v96 = (char *)a1 + v95;
  v97 = (_QWORD *)((char *)a2 + v95);
  v98 = v97[1];
  *(_QWORD *)v96 = *v97;
  *((_QWORD *)v96 + 1) = v98;
  v99 = v97 + 2;
  v100 = v97[3];
  swift_retain();
  if (v100 == 1)
  {
    *((_OWORD *)v96 + 1) = *v99;
  }
  else
  {
    *((_QWORD *)v96 + 2) = *(_QWORD *)v99;
    *((_QWORD *)v96 + 3) = v100;
    swift_bridgeObjectRetain();
  }
  v101 = a3[6];
  v102 = (char *)a1 + v101;
  v103 = (_QWORD *)((char *)a2 + v101);
  v298 = a1;
  if (*(_QWORD *)((char *)a2 + v101 + 272) >> 1 != 0xFFFFFFFFLL
    || ((v103[38] | v103[36]) <= 1
      ? (v104 = (v103[44] & 0xFFFFFFFFFFFFFEFELL | v103[40] & 0xFFFFFFFFFFFF00FELL) == 0)
      : (v104 = 0),
        v104 ? (v105 = (v103[48] | v103[46]) >= 2uLL) : (v105 = 1),
        v105))
  {
    v106 = v103[3];
    if (v106)
    {
      v107 = v103[4];
      *((_QWORD *)v102 + 3) = v106;
      *((_QWORD *)v102 + 4) = v107;
      (**(void (***)(void *, _QWORD *))(v106 - 8))(v102, v103);
      *((_QWORD *)v102 + 5) = v103[5];
      v102[48] = *((_BYTE *)v103 + 48);
      v108 = v103[10];
      v109 = v103[12];
      v110 = v103[14];
      v111 = v103[24];
      if (v108 >> 1 != 0xFFFFFFFF
        || (v110 | (unint64_t)v109) > 1
        || v103[20] & 0xFFFFFFFFFFFFFEFELL | v103[16] & 0xFFFFFFFFFFFF00FELL
        || (v111 | v103[22]) >= 2)
      {
        v125 = v103[7];
        v126 = v103[9];
        v216 = v103[15];
        v228 = v103[17];
        v240 = v103[18];
        v246 = v103[19];
        v252 = v103[21];
        v258 = v103[23];
        v264 = v103[25];
        v270 = v103[26];
        v276 = v103[27];
        v282 = v103[28];
        v288 = v103[29];
        v294 = v103[30];
        v207 = v103[20];
        v210 = v103[16];
        v127 = v103[8];
        v234 = v103[22];
        v128 = v103[11];
        v222 = v103[24];
        v129 = v103[13];
        sub_1AD00FEAC(v125, v127, v126, v108, v128, v109, v129, v110, v216, v210, v228, v240, v246, v207, v252, v234, v258, v111, v264,
          v270,
          v276,
          v282,
          v288,
          v294);
        *((_QWORD *)v102 + 7) = v125;
        *((_QWORD *)v102 + 8) = v127;
        *((_QWORD *)v102 + 9) = v126;
        *((_QWORD *)v102 + 10) = v108;
        *((_QWORD *)v102 + 11) = v128;
        *((_QWORD *)v102 + 12) = v109;
        *((_QWORD *)v102 + 13) = v129;
        *((_QWORD *)v102 + 14) = v110;
        *((_QWORD *)v102 + 15) = v216;
        *((_QWORD *)v102 + 16) = v210;
        *((_QWORD *)v102 + 17) = v228;
        *((_QWORD *)v102 + 18) = v240;
        *((_QWORD *)v102 + 19) = v246;
        *((_QWORD *)v102 + 20) = v207;
        *((_QWORD *)v102 + 21) = v252;
        *((_QWORD *)v102 + 22) = v234;
        *((_QWORD *)v102 + 23) = v258;
        *((_QWORD *)v102 + 24) = v222;
        *((_QWORD *)v102 + 25) = v264;
        *((_QWORD *)v102 + 26) = v270;
        *((_QWORD *)v102 + 27) = v276;
        *((_QWORD *)v102 + 28) = v282;
        *((_QWORD *)v102 + 29) = v288;
        *((_QWORD *)v102 + 30) = v294;
      }
      else
      {
        v112 = *(_OWORD *)(v103 + 25);
        *(_OWORD *)(v102 + 184) = *(_OWORD *)(v103 + 23);
        *(_OWORD *)(v102 + 200) = v112;
        v113 = *(_OWORD *)(v103 + 29);
        *(_OWORD *)(v102 + 216) = *(_OWORD *)(v103 + 27);
        *(_OWORD *)(v102 + 232) = v113;
        v114 = *(_OWORD *)(v103 + 17);
        *(_OWORD *)(v102 + 120) = *(_OWORD *)(v103 + 15);
        *(_OWORD *)(v102 + 136) = v114;
        v115 = *(_OWORD *)(v103 + 21);
        *(_OWORD *)(v102 + 152) = *(_OWORD *)(v103 + 19);
        *(_OWORD *)(v102 + 168) = v115;
        v116 = *(_OWORD *)(v103 + 9);
        *(_OWORD *)(v102 + 56) = *(_OWORD *)(v103 + 7);
        *(_OWORD *)(v102 + 72) = v116;
        v117 = *(_OWORD *)(v103 + 13);
        *(_OWORD *)(v102 + 88) = *(_OWORD *)(v103 + 11);
        *(_OWORD *)(v102 + 104) = v117;
      }
    }
    else
    {
      v118 = *((_OWORD *)v103 + 13);
      *((_OWORD *)v102 + 12) = *((_OWORD *)v103 + 12);
      *((_OWORD *)v102 + 13) = v118;
      *((_OWORD *)v102 + 14) = *((_OWORD *)v103 + 14);
      *((_QWORD *)v102 + 30) = v103[30];
      v119 = *((_OWORD *)v103 + 9);
      *((_OWORD *)v102 + 8) = *((_OWORD *)v103 + 8);
      *((_OWORD *)v102 + 9) = v119;
      v120 = *((_OWORD *)v103 + 11);
      *((_OWORD *)v102 + 10) = *((_OWORD *)v103 + 10);
      *((_OWORD *)v102 + 11) = v120;
      v121 = *((_OWORD *)v103 + 5);
      *((_OWORD *)v102 + 4) = *((_OWORD *)v103 + 4);
      *((_OWORD *)v102 + 5) = v121;
      v122 = *((_OWORD *)v103 + 7);
      *((_OWORD *)v102 + 6) = *((_OWORD *)v103 + 6);
      *((_OWORD *)v102 + 7) = v122;
      v123 = *((_OWORD *)v103 + 1);
      *(_OWORD *)v102 = *(_OWORD *)v103;
      *((_OWORD *)v102 + 1) = v123;
      v124 = *((_OWORD *)v103 + 3);
      *((_OWORD *)v102 + 2) = *((_OWORD *)v103 + 2);
      *((_OWORD *)v102 + 3) = v124;
    }
    v130 = v103[31];
    v131 = v103[32];
    v132 = v103[33];
    v133 = v103[34];
    v135 = v103[35];
    v134 = v103[36];
    v136 = v103[37];
    v137 = v103[38];
    v211 = v103[40];
    v217 = v103[41];
    v223 = v103[42];
    v229 = v103[43];
    v235 = v103[44];
    v241 = v103[45];
    v247 = v103[46];
    v253 = v103[47];
    v259 = v103[48];
    v265 = v103[49];
    v271 = v103[50];
    v277 = v103[51];
    v283 = v103[52];
    v289 = v103[53];
    v295 = v103[54];
    v138 = v103[39];
    v139 = v130;
    v140 = v131;
    v141 = v134;
    v142 = v136;
    v143 = v137;
    sub_1AD00FEAC(v130, v131, v132, v133, v135, v134, v136, v137, v138, v211, v217, v223, v229, v235, v241, v247, v253, v259, v265,
      v271,
      v277,
      v283,
      v289,
      v295);
    *((_QWORD *)v102 + 31) = v139;
    *((_QWORD *)v102 + 32) = v140;
    *((_QWORD *)v102 + 33) = v132;
    *((_QWORD *)v102 + 34) = v133;
    *((_QWORD *)v102 + 35) = v135;
    *((_QWORD *)v102 + 36) = v141;
    *((_QWORD *)v102 + 37) = v142;
    *((_QWORD *)v102 + 38) = v143;
    *((_QWORD *)v102 + 39) = v138;
    *((_QWORD *)v102 + 40) = v211;
    *((_QWORD *)v102 + 41) = v217;
    *((_QWORD *)v102 + 42) = v223;
    *((_QWORD *)v102 + 43) = v229;
    *((_QWORD *)v102 + 44) = v235;
    *((_QWORD *)v102 + 45) = v241;
    *((_QWORD *)v102 + 46) = v247;
    *((_QWORD *)v102 + 47) = v253;
    *((_QWORD *)v102 + 48) = v259;
    *((_QWORD *)v102 + 49) = v265;
    *((_QWORD *)v102 + 50) = v271;
    *((_QWORD *)v102 + 51) = v277;
    *((_QWORD *)v102 + 52) = v283;
    *((_QWORD *)v102 + 53) = v289;
    a1 = v298;
    *((_QWORD *)v102 + 54) = v295;
    a3 = v299;
    a2 = v300;
  }
  else
  {
    memcpy(v102, v103, 0x1B8uLL);
  }
  v144 = a3[7];
  v145 = (char *)a1 + v144;
  v146 = (_QWORD *)((char *)a2 + v144);
  v147 = v146[1];
  *(_QWORD *)v145 = *v146;
  *((_QWORD *)v145 + 1) = v147;
  v148 = v146 + 2;
  v149 = v146[3];
  swift_retain();
  if (v149 == 1)
  {
    *((_OWORD *)v145 + 1) = *v148;
  }
  else
  {
    *((_QWORD *)v145 + 2) = *(_QWORD *)v148;
    *((_QWORD *)v145 + 3) = v149;
    swift_bridgeObjectRetain();
  }
  v150 = a3[8];
  v151 = (char *)a1 + v150;
  v152 = (_QWORD *)((char *)a2 + v150);
  if (*(_QWORD *)((char *)a2 + v150 + 272) >> 1 != 0xFFFFFFFFLL
    || (v152[38] | v152[36]) > 1
    || v152[44] & 0xFFFFFFFFFFFFFEFELL | v152[40] & 0xFFFFFFFFFFFF00FELL
    || (v152[48] | v152[46]) >= 2)
  {
    v153 = v152[3];
    if (v153)
    {
      v154 = v152[4];
      *((_QWORD *)v151 + 3) = v153;
      *((_QWORD *)v151 + 4) = v154;
      (**(void (***)(void *, _QWORD *))(v153 - 8))(v151, v152);
      *((_QWORD *)v151 + 5) = v152[5];
      v151[48] = *((_BYTE *)v152 + 48);
      v155 = v152[10];
      v156 = v152[12];
      v157 = v152[14];
      v158 = v152[24];
      if (v155 >> 1 != 0xFFFFFFFF
        || (v157 | (unint64_t)v156) > 1
        || v152[20] & 0xFFFFFFFFFFFFFEFELL | v152[16] & 0xFFFFFFFFFFFF00FELL
        || (v158 | v152[22]) >= 2)
      {
        v172 = v152[8];
        v173 = v152[13];
        v212 = v152[15];
        v224 = v152[17];
        v242 = v152[18];
        v248 = v152[19];
        v254 = v152[21];
        v260 = v152[23];
        v266 = v152[25];
        v272 = v152[26];
        v278 = v152[27];
        v284 = v152[28];
        v290 = v152[29];
        v296 = v152[30];
        v230 = v152[20];
        v236 = v152[22];
        v174 = v152[7];
        v208 = v152[16];
        v175 = v152[9];
        v176 = v152[11];
        v218 = v152[24];
        sub_1AD00FEAC(v174, v172, v175, v155, v176, v156, v173, v157, v212, v208, v224, v242, v248, v230, v254, v236, v260, v158, v266,
          v272,
          v278,
          v284,
          v290,
          v296);
        *((_QWORD *)v151 + 7) = v174;
        *((_QWORD *)v151 + 8) = v172;
        *((_QWORD *)v151 + 9) = v175;
        *((_QWORD *)v151 + 10) = v155;
        *((_QWORD *)v151 + 11) = v176;
        *((_QWORD *)v151 + 12) = v156;
        *((_QWORD *)v151 + 13) = v173;
        *((_QWORD *)v151 + 14) = v157;
        *((_QWORD *)v151 + 15) = v212;
        *((_QWORD *)v151 + 16) = v208;
        *((_QWORD *)v151 + 17) = v224;
        *((_QWORD *)v151 + 18) = v242;
        *((_QWORD *)v151 + 19) = v248;
        *((_QWORD *)v151 + 20) = v230;
        *((_QWORD *)v151 + 21) = v254;
        *((_QWORD *)v151 + 22) = v236;
        *((_QWORD *)v151 + 23) = v260;
        *((_QWORD *)v151 + 24) = v218;
        *((_QWORD *)v151 + 25) = v266;
        *((_QWORD *)v151 + 26) = v272;
        *((_QWORD *)v151 + 27) = v278;
        *((_QWORD *)v151 + 28) = v284;
        *((_QWORD *)v151 + 29) = v290;
        *((_QWORD *)v151 + 30) = v296;
      }
      else
      {
        v159 = *(_OWORD *)(v152 + 25);
        *(_OWORD *)(v151 + 184) = *(_OWORD *)(v152 + 23);
        *(_OWORD *)(v151 + 200) = v159;
        v160 = *(_OWORD *)(v152 + 29);
        *(_OWORD *)(v151 + 216) = *(_OWORD *)(v152 + 27);
        *(_OWORD *)(v151 + 232) = v160;
        v161 = *(_OWORD *)(v152 + 17);
        *(_OWORD *)(v151 + 120) = *(_OWORD *)(v152 + 15);
        *(_OWORD *)(v151 + 136) = v161;
        v162 = *(_OWORD *)(v152 + 21);
        *(_OWORD *)(v151 + 152) = *(_OWORD *)(v152 + 19);
        *(_OWORD *)(v151 + 168) = v162;
        v163 = *(_OWORD *)(v152 + 9);
        *(_OWORD *)(v151 + 56) = *(_OWORD *)(v152 + 7);
        *(_OWORD *)(v151 + 72) = v163;
        v164 = *(_OWORD *)(v152 + 13);
        *(_OWORD *)(v151 + 88) = *(_OWORD *)(v152 + 11);
        *(_OWORD *)(v151 + 104) = v164;
      }
    }
    else
    {
      v165 = *((_OWORD *)v152 + 13);
      *((_OWORD *)v151 + 12) = *((_OWORD *)v152 + 12);
      *((_OWORD *)v151 + 13) = v165;
      *((_OWORD *)v151 + 14) = *((_OWORD *)v152 + 14);
      *((_QWORD *)v151 + 30) = v152[30];
      v166 = *((_OWORD *)v152 + 9);
      *((_OWORD *)v151 + 8) = *((_OWORD *)v152 + 8);
      *((_OWORD *)v151 + 9) = v166;
      v167 = *((_OWORD *)v152 + 11);
      *((_OWORD *)v151 + 10) = *((_OWORD *)v152 + 10);
      *((_OWORD *)v151 + 11) = v167;
      v168 = *((_OWORD *)v152 + 5);
      *((_OWORD *)v151 + 4) = *((_OWORD *)v152 + 4);
      *((_OWORD *)v151 + 5) = v168;
      v169 = *((_OWORD *)v152 + 7);
      *((_OWORD *)v151 + 6) = *((_OWORD *)v152 + 6);
      *((_OWORD *)v151 + 7) = v169;
      v170 = *((_OWORD *)v152 + 1);
      *(_OWORD *)v151 = *(_OWORD *)v152;
      *((_OWORD *)v151 + 1) = v170;
      v171 = *((_OWORD *)v152 + 3);
      *((_OWORD *)v151 + 2) = *((_OWORD *)v152 + 2);
      *((_OWORD *)v151 + 3) = v171;
    }
    v177 = v152[31];
    v178 = v152[32];
    v179 = v152[33];
    v180 = v152[34];
    v181 = v152[35];
    v182 = v152[36];
    v184 = v152[37];
    v183 = v152[38];
    v213 = v152[40];
    v219 = v152[41];
    v225 = v152[42];
    v231 = v152[43];
    v237 = v152[44];
    v243 = v152[45];
    v249 = v152[46];
    v255 = v152[47];
    v261 = v152[48];
    v267 = v152[49];
    v273 = v152[50];
    v279 = v152[51];
    v285 = v152[52];
    v291 = v152[53];
    v297 = v152[54];
    v185 = v152[39];
    v186 = v177;
    v187 = v178;
    v188 = v179;
    v189 = v180;
    v190 = v183;
    sub_1AD00FEAC(v177, v178, v179, v180, v181, v182, v184, v183, v185, v213, v219, v225, v231, v237, v243, v249, v255, v261, v267,
      v273,
      v279,
      v285,
      v291,
      v297);
    *((_QWORD *)v151 + 31) = v186;
    *((_QWORD *)v151 + 32) = v187;
    *((_QWORD *)v151 + 33) = v188;
    *((_QWORD *)v151 + 34) = v189;
    *((_QWORD *)v151 + 35) = v181;
    *((_QWORD *)v151 + 36) = v182;
    *((_QWORD *)v151 + 37) = v184;
    *((_QWORD *)v151 + 38) = v190;
    *((_QWORD *)v151 + 39) = v185;
    *((_QWORD *)v151 + 40) = v213;
    *((_QWORD *)v151 + 41) = v219;
    *((_QWORD *)v151 + 42) = v225;
    *((_QWORD *)v151 + 43) = v231;
    *((_QWORD *)v151 + 44) = v237;
    *((_QWORD *)v151 + 45) = v243;
    *((_QWORD *)v151 + 46) = v249;
    *((_QWORD *)v151 + 47) = v255;
    *((_QWORD *)v151 + 48) = v261;
    *((_QWORD *)v151 + 49) = v267;
    *((_QWORD *)v151 + 50) = v273;
    *((_QWORD *)v151 + 51) = v279;
    *((_QWORD *)v151 + 52) = v285;
    *((_QWORD *)v151 + 53) = v291;
    a1 = v298;
    *((_QWORD *)v151 + 54) = v297;
    a3 = v299;
    a2 = v300;
  }
  else
  {
    memcpy(v151, v152, 0x1B8uLL);
  }
  v191 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v192 = (char *)a1 + v191;
  v193 = (char *)a2 + v191;
  v194 = *((_QWORD *)v193 + 1);
  if (v194)
  {
    *(_QWORD *)v192 = *(_QWORD *)v193;
    *((_QWORD *)v192 + 1) = v194;
    v195 = *((_QWORD *)v193 + 3);
    *((_QWORD *)v192 + 2) = *((_QWORD *)v193 + 2);
    *((_QWORD *)v192 + 3) = v195;
    *((_QWORD *)v192 + 4) = *((_QWORD *)v193 + 4);
    v192[40] = v193[40];
    v196 = *((_QWORD *)v193 + 7);
    *((_QWORD *)v192 + 6) = *((_QWORD *)v193 + 6);
    *((_QWORD *)v192 + 7) = v196;
    *((_QWORD *)v192 + 8) = *((_QWORD *)v193 + 8);
    v192[72] = v193[72];
    v197 = *((_OWORD *)v193 + 6);
    *((_OWORD *)v192 + 5) = *((_OWORD *)v193 + 5);
    *((_OWORD *)v192 + 6) = v197;
    *((_WORD *)v192 + 56) = *((_WORD *)v193 + 56);
    *(_OWORD *)(v192 + 120) = *(_OWORD *)(v193 + 120);
    *(_OWORD *)(v192 + 136) = *(_OWORD *)(v193 + 136);
    v192[152] = v193[152];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v198 = *((_OWORD *)v193 + 7);
    *((_OWORD *)v192 + 6) = *((_OWORD *)v193 + 6);
    *((_OWORD *)v192 + 7) = v198;
    *((_OWORD *)v192 + 8) = *((_OWORD *)v193 + 8);
    *(_OWORD *)(v192 + 137) = *(_OWORD *)(v193 + 137);
    v199 = *((_OWORD *)v193 + 3);
    *((_OWORD *)v192 + 2) = *((_OWORD *)v193 + 2);
    *((_OWORD *)v192 + 3) = v199;
    v200 = *((_OWORD *)v193 + 5);
    *((_OWORD *)v192 + 4) = *((_OWORD *)v193 + 4);
    *((_OWORD *)v192 + 5) = v200;
    v201 = *((_OWORD *)v193 + 1);
    *(_OWORD *)v192 = *(_OWORD *)v193;
    *((_OWORD *)v192 + 1) = v201;
  }
  return a1;
}

uint64_t sub_1AD40BF70(uint64_t a1, __int128 *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  int v44;
  __int128 v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _OWORD *v162;
  _OWORD *v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  int v175;
  __int128 v176;
  _OWORD *v177;
  __int128 *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 *v266;
  BOOL v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  __int128 *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  BOOL v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  __int128 *v450;
  BOOL v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  uint64_t v470;
  uint64_t v471;
  _OWORD *v472;
  __int128 *v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  BOOL v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  __int128 v636;
  __int128 v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  uint64_t v660;
  int *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  unint64_t v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  unint64_t v895;
  uint64_t v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  unint64_t v900;
  unint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  unint64_t v906;
  unint64_t v907;
  unint64_t v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  _QWORD *v913;
  int *v914;
  __int128 *v915;

  v6 = (int *)type metadata accessor for PosterArchive();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  v914 = a3;
  v915 = a2;
  v913 = (_QWORD *)a1;
  if (v9)
  {
    if (!v10)
    {
      if (*((_QWORD *)a2 + 23))
      {
        v11 = *a2;
        *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = v11;
        *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
        *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
        v12 = (__int128 *)(a1 + 24);
        v13 = (__int128 *)((char *)a2 + 24);
        if (*((_QWORD *)a2 + 9) == 1)
        {
          v14 = *v13;
          v15 = *(__int128 *)((char *)a2 + 40);
          v16 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *(_OWORD *)(a1 + 40) = v15;
          *(_OWORD *)(a1 + 56) = v16;
          *v12 = v14;
        }
        else
        {
          v36 = *(__int128 *)((char *)a2 + 40);
          *v12 = *v13;
          *(_OWORD *)(a1 + 40) = v36;
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          swift_bridgeObjectRetain();
        }
        if (*((_QWORD *)a2 + 11) == 1)
        {
          *(_OWORD *)(a1 + 80) = a2[5];
          v37 = a2[6];
          v38 = a2[7];
          v39 = a2[9];
          *(_OWORD *)(a1 + 128) = a2[8];
          *(_OWORD *)(a1 + 144) = v39;
          *(_OWORD *)(a1 + 96) = v37;
          *(_OWORD *)(a1 + 112) = v38;
        }
        else
        {
          *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
          *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
          *(_OWORD *)(a1 + 96) = a2[6];
          *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
          *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
          *(_OWORD *)(a1 + 128) = a2[8];
          *(_OWORD *)(a1 + 144) = a2[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
        *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
        *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
        *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
        v40 = *((_QWORD *)a2 + 24);
        *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
        *(_QWORD *)(a1 + 192) = v40;
        v41 = *((_QWORD *)a2 + 26);
        swift_retain();
        if (v41 == 1)
        {
          *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
        }
        else
        {
          *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
          *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v26 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v26;
        v27 = a2[2];
        v28 = a2[3];
        v29 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v29;
        *(_OWORD *)(a1 + 32) = v27;
        *(_OWORD *)(a1 + 48) = v28;
        v30 = a2[6];
        v31 = a2[7];
        v32 = a2[9];
        *(_OWORD *)(a1 + 128) = a2[8];
        *(_OWORD *)(a1 + 144) = v32;
        *(_OWORD *)(a1 + 96) = v30;
        *(_OWORD *)(a1 + 112) = v31;
        v33 = a2[10];
        v34 = a2[11];
        v35 = a2[12];
        *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
        *(_OWORD *)(a1 + 176) = v34;
        *(_OWORD *)(a1 + 192) = v35;
        *(_OWORD *)(a1 + 160) = v33;
      }
      *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
      v42 = (_OWORD *)(a1 + 224);
      v43 = a2 + 14;
      v44 = *((unsigned __int8 *)a2 + 768);
      if (v44 == 2)
      {
        v63 = a2[15];
        *v42 = *v43;
        *(_OWORD *)(a1 + 240) = v63;
        v64 = a2[17];
        *(_OWORD *)(a1 + 256) = a2[16];
        *(_OWORD *)(a1 + 272) = v64;
        *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
        *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
        *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
        *(_BYTE *)(a1 + 768) = 2;
        swift_bridgeObjectRetain();
      }
      else if (v44 == 1)
      {
        v45 = a2[15];
        *v42 = *v43;
        *(_OWORD *)(a1 + 240) = v45;
        v46 = (_OWORD *)(a1 + 256);
        v47 = a2 + 16;
        v48 = *((_QWORD *)a2 + 35);
        v661 = v6;
        v662 = v7;
        if (v48)
        {
          *(_QWORD *)(a1 + 280) = v48;
          *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
          (**(void (***)(_OWORD *, __int128 *))(v48 - 8))(v46, v47);
          v49 = *((_QWORD *)a2 + 37);
          *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
          *(_QWORD *)(a1 + 296) = v49;
          v50 = *((_QWORD *)a2 + 42);
          v51 = *((_QWORD *)a2 + 44);
          v52 = *((_QWORD *)a2 + 46);
          v53 = *((_QWORD *)a2 + 54);
          if (v50 >> 1 != 0xFFFFFFFF
            || (v52 | (unint64_t)v51) > 1
            || a2[26] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)a2[24] & 0xFFFFFFFFFFFF00FELL
            || (*((_QWORD *)a2 + 56) | (unint64_t)v53) >= 2)
          {
            v119 = *((_QWORD *)a2 + 39);
            v120 = *((_QWORD *)a2 + 43);
            v673 = *((_QWORD *)a2 + 47);
            v721 = *((_QWORD *)a2 + 49);
            v737 = *((_QWORD *)a2 + 50);
            v769 = *((_QWORD *)a2 + 51);
            v785 = *((_QWORD *)a2 + 53);
            v801 = *((_QWORD *)a2 + 55);
            v817 = *((_QWORD *)a2 + 57);
            v833 = *((_QWORD *)a2 + 58);
            v849 = *((_QWORD *)a2 + 59);
            v865 = *((_QWORD *)a2 + 60);
            v881 = *((_QWORD *)a2 + 61);
            v897 = *((_QWORD *)a2 + 62);
            v689 = *((_QWORD *)a2 + 54);
            v705 = *((_QWORD *)a2 + 52);
            v121 = *((_QWORD *)a2 + 40);
            v753 = *((_QWORD *)a2 + 56);
            v660 = *((_QWORD *)a2 + 48);
            v122 = *((_QWORD *)a2 + 41);
            v123 = *((_QWORD *)a2 + 45);
            sub_1AD00FEAC(v119, v121, v122, v50, v120, v51, v123, v52, v673, v660, v721, v737, v769, v705, v785, v53, v801, v753, v817,
              v833,
              v849,
              v865,
              v881,
              v897);
            *(_QWORD *)(a1 + 312) = v119;
            *(_QWORD *)(a1 + 320) = v121;
            *(_QWORD *)(a1 + 328) = v122;
            *(_QWORD *)(a1 + 336) = v50;
            *(_QWORD *)(a1 + 344) = v120;
            *(_QWORD *)(a1 + 352) = v51;
            *(_QWORD *)(a1 + 360) = v123;
            *(_QWORD *)(a1 + 368) = v52;
            *(_QWORD *)(a1 + 376) = v673;
            *(_QWORD *)(a1 + 384) = v660;
            *(_QWORD *)(a1 + 392) = v721;
            *(_QWORD *)(a1 + 400) = v737;
            *(_QWORD *)(a1 + 408) = v769;
            *(_QWORD *)(a1 + 416) = v705;
            *(_QWORD *)(a1 + 424) = v785;
            *(_QWORD *)(a1 + 432) = v689;
            *(_QWORD *)(a1 + 440) = v801;
            *(_QWORD *)(a1 + 448) = v753;
            *(_QWORD *)(a1 + 456) = v817;
            *(_QWORD *)(a1 + 464) = v833;
            *(_QWORD *)(a1 + 472) = v849;
            *(_QWORD *)(a1 + 480) = v865;
            *(_QWORD *)(a1 + 488) = v881;
            *(_QWORD *)(a1 + 496) = v897;
          }
          else
          {
            v54 = *(__int128 *)((char *)a2 + 312);
            v55 = *(__int128 *)((char *)a2 + 328);
            v56 = *(__int128 *)((char *)a2 + 360);
            *(_OWORD *)(a1 + 344) = *(__int128 *)((char *)a2 + 344);
            *(_OWORD *)(a1 + 360) = v56;
            *(_OWORD *)(a1 + 312) = v54;
            *(_OWORD *)(a1 + 328) = v55;
            v57 = *(__int128 *)((char *)a2 + 376);
            v58 = *(__int128 *)((char *)a2 + 392);
            v59 = *(__int128 *)((char *)a2 + 424);
            *(_OWORD *)(a1 + 408) = *(__int128 *)((char *)a2 + 408);
            *(_OWORD *)(a1 + 424) = v59;
            *(_OWORD *)(a1 + 376) = v57;
            *(_OWORD *)(a1 + 392) = v58;
            v60 = *(__int128 *)((char *)a2 + 440);
            v61 = *(__int128 *)((char *)a2 + 456);
            v62 = *(__int128 *)((char *)a2 + 488);
            *(_OWORD *)(a1 + 472) = *(__int128 *)((char *)a2 + 472);
            *(_OWORD *)(a1 + 488) = v62;
            *(_OWORD *)(a1 + 440) = v60;
            *(_OWORD *)(a1 + 456) = v61;
          }
        }
        else
        {
          v104 = *v47;
          v105 = a2[17];
          v106 = a2[19];
          *(_OWORD *)(a1 + 288) = a2[18];
          *(_OWORD *)(a1 + 304) = v106;
          *v46 = v104;
          *(_OWORD *)(a1 + 272) = v105;
          v107 = a2[20];
          v108 = a2[21];
          v109 = a2[23];
          *(_OWORD *)(a1 + 352) = a2[22];
          *(_OWORD *)(a1 + 368) = v109;
          *(_OWORD *)(a1 + 320) = v107;
          *(_OWORD *)(a1 + 336) = v108;
          v110 = a2[24];
          v111 = a2[25];
          v112 = a2[27];
          *(_OWORD *)(a1 + 416) = a2[26];
          *(_OWORD *)(a1 + 432) = v112;
          *(_OWORD *)(a1 + 384) = v110;
          *(_OWORD *)(a1 + 400) = v111;
          v113 = a2[28];
          v114 = a2[29];
          v115 = a2[30];
          *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
          *(_OWORD *)(a1 + 464) = v114;
          *(_OWORD *)(a1 + 480) = v115;
          *(_OWORD *)(a1 + 448) = v113;
        }
        v124 = *((_QWORD *)a2 + 63);
        v125 = *((_QWORD *)a2 + 64);
        v126 = *((_QWORD *)a2 + 65);
        v127 = *((_QWORD *)a2 + 66);
        v128 = *((_QWORD *)a2 + 67);
        v129 = *((_QWORD *)a2 + 68);
        v130 = *((_QWORD *)a2 + 69);
        v674 = *((_QWORD *)v915 + 72);
        v690 = *((_QWORD *)v915 + 73);
        v706 = *((_QWORD *)v915 + 74);
        v722 = *((_QWORD *)v915 + 75);
        v738 = *((_QWORD *)v915 + 76);
        v754 = *((_QWORD *)v915 + 77);
        v770 = *((_QWORD *)v915 + 78);
        v786 = *((_QWORD *)v915 + 79);
        v802 = *((_QWORD *)v915 + 80);
        v818 = *((_QWORD *)v915 + 81);
        v834 = *((_QWORD *)v915 + 82);
        v850 = *((_QWORD *)v915 + 83);
        v866 = *((_QWORD *)v915 + 84);
        v882 = *((_QWORD *)v915 + 85);
        v898 = *((_QWORD *)v915 + 86);
        v131 = *((_QWORD *)v915 + 71);
        v132 = v124;
        v133 = v125;
        v134 = v126;
        v135 = v127;
        v136 = *((_QWORD *)v915 + 70);
        sub_1AD00FEAC(v124, v125, v126, v127, v128, v129, v130, v136, v131, v674, v690, v706, v722, v738, v754, v770, v786, v802, v818,
          v834,
          v850,
          v866,
          v882,
          v898);
        *(_QWORD *)(a1 + 504) = v132;
        *(_QWORD *)(a1 + 512) = v133;
        *(_QWORD *)(a1 + 520) = v134;
        *(_QWORD *)(a1 + 528) = v135;
        *(_QWORD *)(a1 + 536) = v128;
        *(_QWORD *)(a1 + 544) = v129;
        *(_QWORD *)(a1 + 552) = v130;
        *(_QWORD *)(a1 + 560) = v136;
        a2 = v915;
        *(_QWORD *)(a1 + 568) = v131;
        *(_QWORD *)(a1 + 576) = v674;
        *(_QWORD *)(a1 + 584) = v690;
        *(_QWORD *)(a1 + 592) = v706;
        *(_QWORD *)(a1 + 600) = v722;
        *(_QWORD *)(a1 + 608) = v738;
        *(_QWORD *)(a1 + 616) = v754;
        *(_QWORD *)(a1 + 624) = v770;
        *(_QWORD *)(a1 + 632) = v786;
        *(_QWORD *)(a1 + 640) = v802;
        *(_QWORD *)(a1 + 648) = v818;
        *(_QWORD *)(a1 + 656) = v834;
        *(_QWORD *)(a1 + 664) = v850;
        *(_QWORD *)(a1 + 672) = v866;
        *(_QWORD *)(a1 + 680) = v882;
        *(_QWORD *)(a1 + 688) = v898;
        v137 = *((_QWORD *)v915 + 87);
        if (v137)
        {
          v138 = *((_QWORD *)v915 + 88);
          *(_QWORD *)(a1 + 696) = v137;
          *(_QWORD *)(a1 + 704) = v138;
          *(_QWORD *)(a1 + 712) = *((_QWORD *)v915 + 89);
          *(_QWORD *)(a1 + 720) = *((_QWORD *)v915 + 90);
          *(_QWORD *)(a1 + 728) = *((_QWORD *)v915 + 91);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          v139 = *(__int128 *)((char *)v915 + 696);
          v140 = *(__int128 *)((char *)v915 + 712);
          *(_QWORD *)(a1 + 728) = *((_QWORD *)v915 + 91);
          *(_OWORD *)(a1 + 696) = v139;
          *(_OWORD *)(a1 + 712) = v140;
        }
        a3 = v914;
        v6 = v661;
        v7 = v662;
        *(_BYTE *)(a1 + 736) = *((_BYTE *)v915 + 736);
        *(_BYTE *)(a1 + 768) = 1;
      }
      else
      {
        *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
        v65 = *((_QWORD *)a2 + 30);
        *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
        *(_QWORD *)(a1 + 240) = v65;
        *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
        *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
        *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
        v66 = *((_QWORD *)a2 + 35);
        *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
        *(_QWORD *)(a1 + 280) = v66;
        v67 = *((_QWORD *)a2 + 37);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v67 == 1)
        {
          *(_OWORD *)(a1 + 288) = a2[18];
        }
        else
        {
          *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
          *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
          swift_bridgeObjectRetain();
        }
        v74 = *((_QWORD *)a2 + 39);
        *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
        *(_QWORD *)(a1 + 312) = v74;
        *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
        *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
        *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
        *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
        v75 = a2[23];
        *(_OWORD *)(a1 + 352) = a2[22];
        *(_OWORD *)(a1 + 368) = v75;
        v76 = a2[24];
        v77 = a2[25];
        v78 = a2[27];
        *(_OWORD *)(a1 + 416) = a2[26];
        *(_OWORD *)(a1 + 432) = v78;
        *(_OWORD *)(a1 + 384) = v76;
        *(_OWORD *)(a1 + 400) = v77;
        v79 = a2[28];
        v80 = a2[29];
        v81 = a2[30];
        *(_WORD *)(a1 + 496) = *((_WORD *)a2 + 248);
        *(_OWORD *)(a1 + 464) = v80;
        *(_OWORD *)(a1 + 480) = v81;
        *(_OWORD *)(a1 + 448) = v79;
        *(_BYTE *)(a1 + 498) = *((_BYTE *)a2 + 498);
        *(_BYTE *)(a1 + 499) = *((_BYTE *)a2 + 499);
        *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
        *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
        v82 = *(__int128 *)((char *)a2 + 536);
        *(_OWORD *)(a1 + 520) = *(__int128 *)((char *)a2 + 520);
        *(_OWORD *)(a1 + 536) = v82;
        v83 = *(__int128 *)((char *)a2 + 552);
        v84 = *(__int128 *)((char *)a2 + 568);
        v85 = *(__int128 *)((char *)a2 + 600);
        *(_OWORD *)(a1 + 584) = *(__int128 *)((char *)a2 + 584);
        *(_OWORD *)(a1 + 600) = v85;
        *(_OWORD *)(a1 + 552) = v83;
        *(_OWORD *)(a1 + 568) = v84;
        v86 = *(__int128 *)((char *)a2 + 616);
        v87 = *(__int128 *)((char *)a2 + 632);
        v88 = *(__int128 *)((char *)a2 + 664);
        *(_OWORD *)(a1 + 648) = *(__int128 *)((char *)a2 + 648);
        *(_OWORD *)(a1 + 664) = v88;
        *(_OWORD *)(a1 + 616) = v86;
        *(_OWORD *)(a1 + 632) = v87;
        v89 = *(__int128 *)((char *)a2 + 680);
        v90 = *(__int128 *)((char *)a2 + 696);
        v91 = *(__int128 *)((char *)a2 + 712);
        *(_WORD *)(a1 + 728) = *((_WORD *)a2 + 364);
        *(_OWORD *)(a1 + 696) = v90;
        *(_OWORD *)(a1 + 712) = v91;
        *(_OWORD *)(a1 + 680) = v89;
        *(_BYTE *)(a1 + 730) = *((_BYTE *)a2 + 730);
        v92 = *((_QWORD *)a2 + 93);
        *(_QWORD *)(a1 + 736) = *((_QWORD *)a2 + 92);
        *(_QWORD *)(a1 + 744) = v92;
        v93 = *((_QWORD *)a2 + 95);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v93 == 1)
        {
          *(_OWORD *)(a1 + 752) = a2[47];
        }
        else
        {
          *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
          *(_QWORD *)(a1 + 760) = *((_QWORD *)a2 + 95);
          swift_bridgeObjectRetain();
        }
        *(_BYTE *)(a1 + 768) = 0;
      }
      v141 = v6[6];
      v142 = a1 + v141;
      v143 = (uint64_t)a2 + v141;
      v144 = sub_1AD63B084();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v142, v143, v144);
      *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      *(_QWORD *)(a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_98;
    }
LABEL_8:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_98;
  }
  if (v10)
  {
    sub_1AD066230(a1, (uint64_t (*)(_QWORD))type metadata accessor for PosterArchive);
    goto LABEL_8;
  }
  v18 = *((_QWORD *)a2 + 23);
  if (*(_QWORD *)(a1 + 184))
  {
    if (v18)
    {
      v19 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v19;
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      v20 = (__int128 *)(a1 + 24);
      v21 = (__int128 *)((char *)a2 + 24);
      v22 = *((_QWORD *)a2 + 9);
      if (*(_QWORD *)(a1 + 72) == 1)
      {
        if (v22 == 1)
        {
          v23 = *v21;
          v24 = *(__int128 *)((char *)a2 + 40);
          v25 = *(__int128 *)((char *)a2 + 56);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *(_OWORD *)(a1 + 40) = v24;
          *(_OWORD *)(a1 + 56) = v25;
          *v20 = v23;
        }
        else
        {
          v161 = *(__int128 *)((char *)a2 + 40);
          *v20 = *v21;
          *(_OWORD *)(a1 + 40) = v161;
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          swift_bridgeObjectRetain();
        }
      }
      else if (v22 == 1)
      {
        sub_1AD3AD280(a1 + 24);
        v117 = *(__int128 *)((char *)a2 + 40);
        v116 = *(__int128 *)((char *)a2 + 56);
        v118 = *v21;
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        *(_OWORD *)(a1 + 40) = v117;
        *(_OWORD *)(a1 + 56) = v116;
        *v20 = v118;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v162 = (_OWORD *)(a1 + 80);
      v163 = a2 + 5;
      v164 = *((_QWORD *)a2 + 11);
      if (*(_QWORD *)(a1 + 88) == 1)
      {
        if (v164 == 1)
        {
          *v162 = *v163;
          v165 = a2[6];
          v166 = a2[7];
          v167 = a2[9];
          *(_OWORD *)(a1 + 128) = a2[8];
          *(_OWORD *)(a1 + 144) = v167;
          *(_OWORD *)(a1 + 96) = v165;
          *(_OWORD *)(a1 + 112) = v166;
        }
        else
        {
          *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
          *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
          *(_OWORD *)(a1 + 96) = a2[6];
          *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
          *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
          *(_OWORD *)(a1 + 128) = a2[8];
          *(_OWORD *)(a1 + 144) = a2[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }
      else if (v164 == 1)
      {
        sub_1AD3AD2A8(a1 + 80);
        *v162 = *v163;
        v168 = a2[9];
        v170 = a2[6];
        v169 = a2[7];
        *(_OWORD *)(a1 + 128) = a2[8];
        *(_OWORD *)(a1 + 144) = v168;
        *(_OWORD *)(a1 + 96) = v170;
        *(_OWORD *)(a1 + 112) = v169;
      }
      else
      {
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_OWORD *)(a1 + 96) = a2[6];
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      }
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
      *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      v171 = *((_QWORD *)a2 + 24);
      *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
      *(_QWORD *)(a1 + 192) = v171;
      swift_retain();
      swift_release();
      v172 = *((_QWORD *)a2 + 26);
      if (*(_QWORD *)(a1 + 208) == 1)
      {
        if (v172 != 1)
        {
LABEL_69:
          *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
          *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
          swift_bridgeObjectRetain();
          goto LABEL_74;
        }
      }
      else
      {
        if (v172 != 1)
        {
          *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
          *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_74;
        }
        sub_1AD009758(a1 + 200, &qword_1ED2E3198);
      }
      *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
      goto LABEL_74;
    }
    sub_1AD3AD2D8((_QWORD *)a1);
    v94 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v94;
    v95 = a2[5];
    v97 = a2[2];
    v96 = a2[3];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v95;
    *(_OWORD *)(a1 + 32) = v97;
    *(_OWORD *)(a1 + 48) = v96;
    v98 = a2[9];
    v100 = a2[6];
    v99 = a2[7];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v98;
    *(_OWORD *)(a1 + 96) = v100;
    *(_OWORD *)(a1 + 112) = v99;
    v102 = a2[11];
    v101 = a2[12];
    v103 = a2[10];
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_OWORD *)(a1 + 176) = v102;
    *(_OWORD *)(a1 + 192) = v101;
    *(_OWORD *)(a1 + 160) = v103;
  }
  else if (v18)
  {
    v68 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v68;
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
    *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
    v69 = (__int128 *)(a1 + 24);
    v70 = (__int128 *)((char *)a2 + 24);
    if (*((_QWORD *)a2 + 9) == 1)
    {
      v71 = *v70;
      v72 = *(__int128 *)((char *)a2 + 40);
      v73 = *(__int128 *)((char *)a2 + 56);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_OWORD *)(a1 + 40) = v72;
      *(_OWORD *)(a1 + 56) = v73;
      *v69 = v71;
    }
    else
    {
      v155 = *(__int128 *)((char *)a2 + 40);
      *v69 = *v70;
      *(_OWORD *)(a1 + 40) = v155;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
    }
    if (*((_QWORD *)a2 + 11) == 1)
    {
      *(_OWORD *)(a1 + 80) = a2[5];
      v156 = a2[6];
      v157 = a2[7];
      v158 = a2[9];
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = v158;
      *(_OWORD *)(a1 + 96) = v156;
      *(_OWORD *)(a1 + 112) = v157;
    }
    else
    {
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
    v159 = *((_QWORD *)a2 + 24);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *(_QWORD *)(a1 + 192) = v159;
    v160 = *((_QWORD *)a2 + 26);
    swift_retain();
    if (v160 != 1)
      goto LABEL_69;
    *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  }
  else
  {
    v145 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v145;
    v146 = a2[2];
    v147 = a2[3];
    v148 = a2[5];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v148;
    *(_OWORD *)(a1 + 32) = v146;
    *(_OWORD *)(a1 + 48) = v147;
    v149 = a2[6];
    v150 = a2[7];
    v151 = a2[9];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v151;
    *(_OWORD *)(a1 + 96) = v149;
    *(_OWORD *)(a1 + 112) = v150;
    v152 = a2[10];
    v153 = a2[11];
    v154 = a2[12];
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_OWORD *)(a1 + 176) = v153;
    *(_OWORD *)(a1 + 192) = v154;
    *(_OWORD *)(a1 + 160) = v152;
  }
LABEL_74:
  *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
  if ((__int128 *)a1 != a2)
  {
    v173 = (_OWORD *)(a1 + 224);
    v174 = a2 + 14;
    sub_1AD28B36C(a1 + 224);
    v175 = *((unsigned __int8 *)a2 + 768);
    if (v175 == 2)
    {
      v195 = a2[15];
      *v173 = *v174;
      *(_OWORD *)(a1 + 240) = v195;
      v196 = a2[17];
      *(_OWORD *)(a1 + 256) = a2[16];
      *(_OWORD *)(a1 + 272) = v196;
      *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
      *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
      *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
      *(_BYTE *)(a1 + 768) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v175 == 1)
    {
      v176 = a2[15];
      *v173 = *v174;
      *(_OWORD *)(a1 + 240) = v176;
      v177 = (_OWORD *)(a1 + 256);
      v178 = a2 + 16;
      v179 = *((_QWORD *)a2 + 35);
      if (v179)
      {
        *(_QWORD *)(a1 + 280) = v179;
        *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
        (**(void (***)(_OWORD *, __int128 *))(v179 - 8))(v177, v178);
        v180 = *((_QWORD *)a2 + 37);
        *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
        *(_QWORD *)(a1 + 296) = v180;
        v181 = *((_QWORD *)a2 + 42);
        v182 = *((_QWORD *)a2 + 44);
        v183 = *((_QWORD *)a2 + 46);
        v184 = *((_QWORD *)a2 + 52);
        v185 = *((_QWORD *)a2 + 54);
        if (v181 >> 1 != 0xFFFFFFFF
          || (v183 | (unint64_t)v182) > 1
          || v184 & 0xFFFFFFFFFFFFFEFELL | a2[24] & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)a2 + 56) | (unint64_t)v185) >= 2)
        {
          v232 = *((_QWORD *)a2 + 39);
          v233 = *((_QWORD *)a2 + 41);
          v691 = *((_QWORD *)a2 + 47);
          v723 = *((_QWORD *)a2 + 49);
          v739 = *((_QWORD *)a2 + 50);
          v771 = *((_QWORD *)a2 + 51);
          v787 = *((_QWORD *)a2 + 53);
          v803 = *((_QWORD *)a2 + 55);
          v819 = *((_QWORD *)a2 + 57);
          v835 = *((_QWORD *)a2 + 58);
          v851 = *((_QWORD *)a2 + 59);
          v867 = *((_QWORD *)a2 + 60);
          v883 = *((_QWORD *)a2 + 61);
          v899 = *((_QWORD *)a2 + 62);
          v663 = *((_QWORD *)a2 + 52);
          v675 = *((_QWORD *)a2 + 48);
          v234 = *((_QWORD *)a2 + 40);
          v755 = *((_QWORD *)a2 + 56);
          v707 = *((_QWORD *)a2 + 54);
          v235 = *((_QWORD *)a2 + 43);
          v236 = *((_QWORD *)a2 + 45);
          sub_1AD00FEAC(v232, v234, v233, v181, v235, v182, v236, v183, v691, v675, v723, v739, v771, v184, v787, v185, v803, v755, v819,
            v835,
            v851,
            v867,
            v883,
            v899);
          v237 = v183;
          a1 = (uint64_t)v913;
          v913[39] = v232;
          v913[40] = v234;
          v913[41] = v233;
          v913[42] = v181;
          v913[43] = v235;
          v913[44] = v182;
          v913[45] = v236;
          v913[46] = v237;
          v913[47] = v691;
          v913[48] = v675;
          v913[49] = v723;
          v913[50] = v739;
          v913[51] = v771;
          v913[52] = v663;
          v913[53] = v787;
          v913[54] = v707;
          v913[55] = v803;
          v913[56] = v755;
          v913[57] = v819;
          v913[58] = v835;
          v913[59] = v851;
          v913[60] = v867;
          v913[61] = v883;
          v913[62] = v899;
        }
        else
        {
          a1 = (uint64_t)v913;
          v186 = *(__int128 *)((char *)a2 + 312);
          v187 = *(__int128 *)((char *)a2 + 328);
          v188 = *(__int128 *)((char *)a2 + 360);
          *(_OWORD *)(v913 + 43) = *(__int128 *)((char *)a2 + 344);
          *(_OWORD *)(v913 + 45) = v188;
          *(_OWORD *)(v913 + 39) = v186;
          *(_OWORD *)(v913 + 41) = v187;
          v189 = *(__int128 *)((char *)a2 + 376);
          v190 = *(__int128 *)((char *)a2 + 392);
          v191 = *(__int128 *)((char *)a2 + 424);
          *(_OWORD *)(v913 + 51) = *(__int128 *)((char *)a2 + 408);
          *(_OWORD *)(v913 + 53) = v191;
          *(_OWORD *)(v913 + 47) = v189;
          *(_OWORD *)(v913 + 49) = v190;
          v192 = *(__int128 *)((char *)a2 + 440);
          v193 = *(__int128 *)((char *)a2 + 456);
          v194 = *(__int128 *)((char *)a2 + 488);
          *(_OWORD *)(v913 + 59) = *(__int128 *)((char *)a2 + 472);
          *(_OWORD *)(v913 + 61) = v194;
          *(_OWORD *)(v913 + 55) = v192;
          *(_OWORD *)(v913 + 57) = v193;
        }
      }
      else
      {
        v220 = *v178;
        v221 = a2[17];
        v222 = a2[19];
        *(_OWORD *)(a1 + 288) = a2[18];
        *(_OWORD *)(a1 + 304) = v222;
        *v177 = v220;
        *(_OWORD *)(a1 + 272) = v221;
        v223 = a2[20];
        v224 = a2[21];
        v225 = a2[23];
        *(_OWORD *)(a1 + 352) = a2[22];
        *(_OWORD *)(a1 + 368) = v225;
        *(_OWORD *)(a1 + 320) = v223;
        *(_OWORD *)(a1 + 336) = v224;
        v226 = a2[24];
        v227 = a2[25];
        v228 = a2[27];
        *(_OWORD *)(a1 + 416) = a2[26];
        *(_OWORD *)(a1 + 432) = v228;
        *(_OWORD *)(a1 + 384) = v226;
        *(_OWORD *)(a1 + 400) = v227;
        v229 = a2[28];
        v230 = a2[29];
        v231 = a2[30];
        *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
        *(_OWORD *)(a1 + 464) = v230;
        *(_OWORD *)(a1 + 480) = v231;
        *(_OWORD *)(a1 + 448) = v229;
      }
      v238 = *((_QWORD *)a2 + 63);
      v239 = *((_QWORD *)a2 + 64);
      v240 = *((_QWORD *)a2 + 65);
      v241 = *((_QWORD *)a2 + 66);
      v242 = *((_QWORD *)a2 + 67);
      v243 = *((_QWORD *)a2 + 68);
      v244 = *((_QWORD *)a2 + 69);
      v664 = *((_QWORD *)v915 + 71);
      v676 = *((_QWORD *)v915 + 72);
      v692 = *((_QWORD *)v915 + 73);
      v708 = *((_QWORD *)v915 + 74);
      v724 = *((_QWORD *)v915 + 75);
      v740 = *((_QWORD *)v915 + 76);
      v756 = *((_QWORD *)v915 + 77);
      v772 = *((_QWORD *)v915 + 78);
      v788 = *((_QWORD *)v915 + 79);
      v804 = *((_QWORD *)v915 + 80);
      v820 = *((_QWORD *)v915 + 81);
      v836 = *((_QWORD *)v915 + 82);
      v852 = *((_QWORD *)v915 + 83);
      v868 = *((_QWORD *)v915 + 84);
      v884 = *((_QWORD *)v915 + 85);
      v900 = *((_QWORD *)v915 + 86);
      v245 = v238;
      v246 = v239;
      v247 = v240;
      v248 = v241;
      v249 = v242;
      v250 = *((_QWORD *)v915 + 70);
      sub_1AD00FEAC(v238, v239, v240, v241, v242, v243, v244, v250, v664, v676, v692, v708, v724, v740, v756, v772, v788, v804, v820,
        v836,
        v852,
        v868,
        v884,
        v900);
      *(_QWORD *)(a1 + 504) = v245;
      *(_QWORD *)(a1 + 512) = v246;
      *(_QWORD *)(a1 + 520) = v247;
      *(_QWORD *)(a1 + 528) = v248;
      *(_QWORD *)(a1 + 536) = v249;
      *(_QWORD *)(a1 + 544) = v243;
      *(_QWORD *)(a1 + 552) = v244;
      *(_QWORD *)(a1 + 560) = v250;
      a2 = v915;
      *(_QWORD *)(a1 + 568) = v664;
      *(_QWORD *)(a1 + 576) = v676;
      *(_QWORD *)(a1 + 584) = v692;
      *(_QWORD *)(a1 + 592) = v708;
      *(_QWORD *)(a1 + 600) = v724;
      *(_QWORD *)(a1 + 608) = v740;
      *(_QWORD *)(a1 + 616) = v756;
      *(_QWORD *)(a1 + 624) = v772;
      *(_QWORD *)(a1 + 632) = v788;
      *(_QWORD *)(a1 + 640) = v804;
      *(_QWORD *)(a1 + 648) = v820;
      *(_QWORD *)(a1 + 656) = v836;
      *(_QWORD *)(a1 + 664) = v852;
      *(_QWORD *)(a1 + 672) = v868;
      *(_QWORD *)(a1 + 680) = v884;
      *(_QWORD *)(a1 + 688) = v900;
      v251 = *((_QWORD *)v915 + 87);
      if (v251)
      {
        v252 = *((_QWORD *)v915 + 88);
        *(_QWORD *)(a1 + 696) = v251;
        *(_QWORD *)(a1 + 704) = v252;
        *(_QWORD *)(a1 + 712) = *((_QWORD *)v915 + 89);
        *(_QWORD *)(a1 + 720) = *((_QWORD *)v915 + 90);
        *(_QWORD *)(a1 + 728) = *((_QWORD *)v915 + 91);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        v253 = *(__int128 *)((char *)v915 + 696);
        v254 = *(__int128 *)((char *)v915 + 712);
        *(_QWORD *)(a1 + 728) = *((_QWORD *)v915 + 91);
        *(_OWORD *)(a1 + 696) = v253;
        *(_OWORD *)(a1 + 712) = v254;
      }
      a3 = v914;
      *(_BYTE *)(a1 + 736) = *((_BYTE *)v915 + 736);
      *(_BYTE *)(a1 + 768) = 1;
    }
    else
    {
      *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
      v197 = *((_QWORD *)a2 + 30);
      *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
      *(_QWORD *)(a1 + 240) = v197;
      *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
      *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
      *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
      v198 = *((_QWORD *)a2 + 35);
      *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
      *(_QWORD *)(a1 + 280) = v198;
      v199 = *((_QWORD *)a2 + 37);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v199 == 1)
      {
        *(_OWORD *)(a1 + 288) = a2[18];
      }
      else
      {
        *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
        *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
        swift_bridgeObjectRetain();
      }
      v200 = *((_QWORD *)a2 + 39);
      *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
      *(_QWORD *)(a1 + 312) = v200;
      *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
      *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
      *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
      *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
      v201 = a2[23];
      *(_OWORD *)(a1 + 352) = a2[22];
      *(_OWORD *)(a1 + 368) = v201;
      v202 = a2[24];
      v203 = a2[25];
      v204 = a2[27];
      *(_OWORD *)(a1 + 416) = a2[26];
      *(_OWORD *)(a1 + 432) = v204;
      *(_OWORD *)(a1 + 384) = v202;
      *(_OWORD *)(a1 + 400) = v203;
      v205 = a2[28];
      v206 = a2[29];
      v207 = a2[30];
      *(_WORD *)(a1 + 496) = *((_WORD *)a2 + 248);
      *(_OWORD *)(a1 + 464) = v206;
      *(_OWORD *)(a1 + 480) = v207;
      *(_OWORD *)(a1 + 448) = v205;
      *(_BYTE *)(a1 + 498) = *((_BYTE *)a2 + 498);
      *(_BYTE *)(a1 + 499) = *((_BYTE *)a2 + 499);
      *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
      *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
      v208 = *(__int128 *)((char *)a2 + 536);
      *(_OWORD *)(a1 + 520) = *(__int128 *)((char *)a2 + 520);
      *(_OWORD *)(a1 + 536) = v208;
      v209 = *(__int128 *)((char *)a2 + 552);
      v210 = *(__int128 *)((char *)a2 + 568);
      v211 = *(__int128 *)((char *)a2 + 600);
      *(_OWORD *)(a1 + 584) = *(__int128 *)((char *)a2 + 584);
      *(_OWORD *)(a1 + 600) = v211;
      *(_OWORD *)(a1 + 552) = v209;
      *(_OWORD *)(a1 + 568) = v210;
      v212 = *(__int128 *)((char *)a2 + 616);
      v213 = *(__int128 *)((char *)a2 + 632);
      v214 = *(__int128 *)((char *)a2 + 664);
      *(_OWORD *)(a1 + 648) = *(__int128 *)((char *)a2 + 648);
      *(_OWORD *)(a1 + 664) = v214;
      *(_OWORD *)(a1 + 616) = v212;
      *(_OWORD *)(a1 + 632) = v213;
      v215 = *(__int128 *)((char *)a2 + 680);
      v216 = *(__int128 *)((char *)a2 + 696);
      v217 = *(__int128 *)((char *)a2 + 712);
      *(_WORD *)(a1 + 728) = *((_WORD *)a2 + 364);
      *(_OWORD *)(a1 + 696) = v216;
      *(_OWORD *)(a1 + 712) = v217;
      *(_OWORD *)(a1 + 680) = v215;
      *(_BYTE *)(a1 + 730) = *((_BYTE *)a2 + 730);
      v218 = *((_QWORD *)a2 + 93);
      *(_QWORD *)(a1 + 736) = *((_QWORD *)a2 + 92);
      *(_QWORD *)(a1 + 744) = v218;
      v219 = *((_QWORD *)a2 + 95);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v219 == 1)
      {
        *(_OWORD *)(a1 + 752) = a2[47];
      }
      else
      {
        *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
        *(_QWORD *)(a1 + 760) = *((_QWORD *)a2 + 95);
        swift_bridgeObjectRetain();
      }
      *(_BYTE *)(a1 + 768) = 0;
    }
  }
  v255 = v6[6];
  v256 = a1 + v255;
  v257 = (uint64_t)a2 + v255;
  v258 = sub_1AD63B084();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v258 - 8) + 24))(v256, v257, v258);
  *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)(a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
LABEL_98:
  v259 = a3[5];
  v260 = (_QWORD *)(a1 + v259);
  v261 = (uint64_t)a2 + v259;
  v262 = *(_QWORD *)((char *)a2 + v259 + 8);
  *v260 = *(_QWORD *)((char *)a2 + v259);
  v260[1] = v262;
  swift_retain();
  swift_release();
  v263 = *(_QWORD *)(v261 + 24);
  if (v260[3] == 1)
  {
    if (v263 != 1)
    {
      v260[2] = *(_QWORD *)(v261 + 16);
      v260[3] = *(_QWORD *)(v261 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_105;
    }
    goto LABEL_103;
  }
  if (v263 == 1)
  {
    sub_1AD009758((uint64_t)(v260 + 2), &qword_1ED2E3198);
LABEL_103:
    *((_OWORD *)v260 + 1) = *(_OWORD *)(v261 + 16);
    goto LABEL_105;
  }
  v260[2] = *(_QWORD *)(v261 + 16);
  v260[3] = *(_QWORD *)(v261 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_105:
  v264 = a3[6];
  v265 = a1 + v264;
  v266 = (__int128 *)((char *)a2 + v264);
  v270 = *(_QWORD *)((char *)a2 + v264 + 272) >> 1 == 0xFFFFFFFFLL
      && (*((_QWORD *)v266 + 38) | *((_QWORD *)v266 + 36)) < 2uLL
      && (*(_QWORD *)((_BYTE *)a2 + v264 + 352) & 0xFFFFFFFFFFFFFEFELL | v266[20] & 0xFFFFFFFFFFFF00FELL) == 0
      && (*((_QWORD *)v266 + 48) | *((_QWORD *)v266 + 46)) < 2uLL;
  if (*(_QWORD *)(a1 + v264 + 272) >> 1 != 0xFFFFFFFFLL
    || (*(_QWORD *)(v265 + 304) | *(_QWORD *)(v265 + 288)) > 1
    || *(_QWORD *)(v265 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v265 + 320) & 0xFFFFFFFFFFFF00FELL
    || (*(_QWORD *)(v265 + 384) | *(_QWORD *)(v265 + 368)) >= 2)
  {
    if (!v270)
    {
      v286 = *((_QWORD *)v266 + 3);
      if (*(_QWORD *)(v265 + 24))
      {
        if (v286)
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)v265, (uint64_t *)v266);
          v287 = *((_QWORD *)v266 + 5);
          *(_BYTE *)(v265 + 48) = *((_BYTE *)v266 + 48);
          *(_QWORD *)(v265 + 40) = v287;
          v288 = (_OWORD *)(v265 + 56);
          v289 = (__int128 *)((char *)v266 + 56);
          v290 = *((_QWORD *)v266 + 10);
          v291 = *((_QWORD *)v266 + 12);
          v292 = *((_QWORD *)v266 + 14);
          v293 = *((_QWORD *)v266 + 16);
          v294 = *((_QWORD *)v266 + 20);
          v295 = *((_QWORD *)v266 + 22);
          v296 = *((_QWORD *)v266 + 24);
          v300 = v290 >> 1 == 0xFFFFFFFF
              && (v292 | (unint64_t)v291) < 2
              && (v294 & 0xFFFFFFFFFFFFFEFELL | v293 & 0xFFFFFFFFFFFF00FELL) == 0
              && (v296 | v295) < 2;
          if (*(_QWORD *)(v265 + 80) >> 1 != 0xFFFFFFFFLL
            || (*(_QWORD *)(v265 + 112) | *(_QWORD *)(v265 + 96)) > 1
            || *(_QWORD *)(v265 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v265 + 128) & 0xFFFFFFFFFFFF00FELL
            || (*(_QWORD *)(v265 + 192) | *(_QWORD *)(v265 + 176)) >= 2)
          {
            if (v300)
            {
              sub_1AD148B34(v265 + 56);
              v367 = *(__int128 *)((char *)v266 + 104);
              v369 = *v289;
              v368 = *(__int128 *)((char *)v266 + 72);
              *(_OWORD *)(v265 + 88) = *(__int128 *)((char *)v266 + 88);
              *(_OWORD *)(v265 + 104) = v367;
              *v288 = v369;
              *(_OWORD *)(v265 + 72) = v368;
              v370 = *(__int128 *)((char *)v266 + 168);
              v372 = *(__int128 *)((char *)v266 + 120);
              v371 = *(__int128 *)((char *)v266 + 136);
              *(_OWORD *)(v265 + 152) = *(__int128 *)((char *)v266 + 152);
              *(_OWORD *)(v265 + 168) = v370;
              *(_OWORD *)(v265 + 120) = v372;
              *(_OWORD *)(v265 + 136) = v371;
              v373 = *(__int128 *)((char *)v266 + 232);
              v375 = *(__int128 *)((char *)v266 + 184);
              v374 = *(__int128 *)((char *)v266 + 200);
              *(_OWORD *)(v265 + 216) = *(__int128 *)((char *)v266 + 216);
              *(_OWORD *)(v265 + 232) = v373;
              *(_OWORD *)(v265 + 184) = v375;
              *(_OWORD *)(v265 + 200) = v374;
            }
            else
            {
              v681 = *((_QWORD *)v266 + 8);
              v697 = *((_QWORD *)v266 + 7);
              v668 = *((_QWORD *)v266 + 9);
              v397 = *((_QWORD *)v266 + 11);
              v398 = *((_QWORD *)v266 + 13);
              v713 = *((_QWORD *)v266 + 15);
              v729 = *((_QWORD *)v266 + 17);
              v745 = *((_QWORD *)v266 + 18);
              v761 = *((_QWORD *)v266 + 19);
              v777 = *((_QWORD *)v266 + 21);
              v793 = *((_QWORD *)v266 + 23);
              v809 = *((_QWORD *)v266 + 25);
              v825 = *((_QWORD *)v266 + 26);
              v841 = *((_QWORD *)v266 + 27);
              v857 = *((_QWORD *)v266 + 28);
              v873 = *((_QWORD *)v266 + 29);
              v889 = *((_QWORD *)v266 + 30);
              v905 = *((_QWORD *)v266 + 24);
              sub_1AD00FEAC(v697, v681, v668, v290, v397, v291, v398, v292, v713, v293, v729, v745, v761, v294, v777, v295, v793, v296, v809,
                v825,
                v841,
                v857,
                v873,
                v889);
              v399 = *(_QWORD *)(v265 + 56);
              v400 = *(_QWORD *)(v265 + 64);
              *(_QWORD *)(v265 + 56) = v697;
              *(_QWORD *)(v265 + 64) = v681;
              v401 = *(_QWORD *)(v265 + 72);
              v402 = *(_QWORD *)(v265 + 80);
              *(_QWORD *)(v265 + 72) = v668;
              *(_QWORD *)(v265 + 80) = v290;
              v403 = *(_QWORD *)(v265 + 88);
              v404 = *(_QWORD *)(v265 + 96);
              *(_QWORD *)(v265 + 88) = v397;
              *(_QWORD *)(v265 + 96) = v291;
              v405 = *(_QWORD *)(v265 + 104);
              v406 = *(_QWORD *)(v265 + 112);
              *(_QWORD *)(v265 + 104) = v398;
              *(_QWORD *)(v265 + 112) = v292;
              v407 = *(_OWORD *)(v265 + 120);
              *(_QWORD *)(v265 + 120) = v713;
              *(_QWORD *)(v265 + 128) = v293;
              v408 = *(_OWORD *)(v265 + 136);
              *(_QWORD *)(v265 + 136) = v729;
              *(_QWORD *)(v265 + 144) = v745;
              v409 = *(_OWORD *)(v265 + 152);
              *(_QWORD *)(v265 + 152) = v761;
              *(_QWORD *)(v265 + 160) = v294;
              v410 = *(_OWORD *)(v265 + 168);
              *(_QWORD *)(v265 + 168) = v777;
              *(_QWORD *)(v265 + 176) = v295;
              v411 = *(_OWORD *)(v265 + 184);
              *(_QWORD *)(v265 + 184) = v793;
              *(_QWORD *)(v265 + 192) = v905;
              v412 = *(_OWORD *)(v265 + 200);
              *(_QWORD *)(v265 + 200) = v809;
              *(_QWORD *)(v265 + 208) = v825;
              v413 = *(_OWORD *)(v265 + 216);
              *(_QWORD *)(v265 + 216) = v841;
              *(_QWORD *)(v265 + 224) = v857;
              v414 = *(_QWORD *)(v265 + 232);
              v415 = *(_QWORD *)(v265 + 240);
              *(_QWORD *)(v265 + 232) = v873;
              *(_QWORD *)(v265 + 240) = v889;
              sub_1AD00E8B0(v399, v400, v401, v402, v403, v404, v405, v406, v407, *((uint64_t *)&v407 + 1), v408, *((uint64_t *)&v408 + 1), v409, *((uint64_t *)&v409 + 1), v410, *((uint64_t *)&v410 + 1), v411, *((unint64_t *)&v411 + 1), v412,
                *((uint64_t *)&v412 + 1),
                v413,
                *((uint64_t *)&v413 + 1),
                v414,
                v415);
            }
          }
          else if (v300)
          {
            v301 = *v289;
            v302 = *(__int128 *)((char *)v266 + 72);
            v303 = *(__int128 *)((char *)v266 + 104);
            *(_OWORD *)(v265 + 88) = *(__int128 *)((char *)v266 + 88);
            *(_OWORD *)(v265 + 104) = v303;
            *v288 = v301;
            *(_OWORD *)(v265 + 72) = v302;
            v304 = *(__int128 *)((char *)v266 + 120);
            v305 = *(__int128 *)((char *)v266 + 136);
            v306 = *(__int128 *)((char *)v266 + 168);
            *(_OWORD *)(v265 + 152) = *(__int128 *)((char *)v266 + 152);
            *(_OWORD *)(v265 + 168) = v306;
            *(_OWORD *)(v265 + 120) = v304;
            *(_OWORD *)(v265 + 136) = v305;
            v307 = *(__int128 *)((char *)v266 + 184);
            v308 = *(__int128 *)((char *)v266 + 200);
            v309 = *(__int128 *)((char *)v266 + 232);
            *(_OWORD *)(v265 + 216) = *(__int128 *)((char *)v266 + 216);
            *(_OWORD *)(v265 + 232) = v309;
            *(_OWORD *)(v265 + 184) = v307;
            *(_OWORD *)(v265 + 200) = v308;
          }
          else
          {
            v393 = *((_QWORD *)v266 + 11);
            v394 = *((_QWORD *)v266 + 13);
            v667 = *((_QWORD *)v266 + 9);
            v680 = *((_QWORD *)v266 + 15);
            v712 = *((_QWORD *)v266 + 17);
            v728 = *((_QWORD *)v266 + 18);
            v760 = *((_QWORD *)v266 + 19);
            v776 = *((_QWORD *)v266 + 21);
            v792 = *((_QWORD *)v266 + 23);
            v808 = *((_QWORD *)v266 + 25);
            v824 = *((_QWORD *)v266 + 26);
            v840 = *((_QWORD *)v266 + 27);
            v856 = *((_QWORD *)v266 + 28);
            v872 = *((_QWORD *)v266 + 29);
            v888 = *((_QWORD *)v266 + 30);
            v744 = *((_QWORD *)v266 + 22);
            v395 = *((_QWORD *)v266 + 7);
            v696 = *((_QWORD *)v266 + 20);
            v396 = *((_QWORD *)v266 + 8);
            v904 = *((_QWORD *)v266 + 24);
            sub_1AD00FEAC(v395, v396, v667, v290, v393, v291, v394, v292, v680, v293, v712, v728, v760, v696, v776, v744, v792, v296, v808,
              v824,
              v840,
              v856,
              v872,
              v888);
            *(_QWORD *)(v265 + 56) = v395;
            *(_QWORD *)(v265 + 64) = v396;
            *(_QWORD *)(v265 + 72) = v667;
            *(_QWORD *)(v265 + 80) = v290;
            *(_QWORD *)(v265 + 88) = v393;
            *(_QWORD *)(v265 + 96) = v291;
            *(_QWORD *)(v265 + 104) = v394;
            *(_QWORD *)(v265 + 112) = v292;
            *(_QWORD *)(v265 + 120) = v680;
            *(_QWORD *)(v265 + 128) = v293;
            *(_QWORD *)(v265 + 136) = v712;
            *(_QWORD *)(v265 + 144) = v728;
            *(_QWORD *)(v265 + 152) = v760;
            *(_QWORD *)(v265 + 160) = v696;
            *(_QWORD *)(v265 + 168) = v776;
            *(_QWORD *)(v265 + 176) = v744;
            *(_QWORD *)(v265 + 184) = v792;
            *(_QWORD *)(v265 + 192) = v904;
            *(_QWORD *)(v265 + 200) = v808;
            *(_QWORD *)(v265 + 208) = v824;
            *(_QWORD *)(v265 + 216) = v840;
            *(_QWORD *)(v265 + 224) = v856;
            *(_QWORD *)(v265 + 232) = v872;
            *(_QWORD *)(v265 + 240) = v888;
          }
        }
        else
        {
          sub_1AD046A30((_QWORD *)v265);
          v355 = v266[3];
          v357 = *v266;
          v356 = v266[1];
          *(_OWORD *)(v265 + 32) = v266[2];
          *(_OWORD *)(v265 + 48) = v355;
          *(_OWORD *)v265 = v357;
          *(_OWORD *)(v265 + 16) = v356;
          v358 = v266[7];
          v360 = v266[4];
          v359 = v266[5];
          *(_OWORD *)(v265 + 96) = v266[6];
          *(_OWORD *)(v265 + 112) = v358;
          *(_OWORD *)(v265 + 64) = v360;
          *(_OWORD *)(v265 + 80) = v359;
          v361 = v266[11];
          v363 = v266[8];
          v362 = v266[9];
          *(_OWORD *)(v265 + 160) = v266[10];
          *(_OWORD *)(v265 + 176) = v361;
          *(_OWORD *)(v265 + 128) = v363;
          *(_OWORD *)(v265 + 144) = v362;
          v365 = v266[13];
          v364 = v266[14];
          v366 = v266[12];
          *(_QWORD *)(v265 + 240) = *((_QWORD *)v266 + 30);
          *(_OWORD *)(v265 + 208) = v365;
          *(_OWORD *)(v265 + 224) = v364;
          *(_OWORD *)(v265 + 192) = v366;
        }
      }
      else if (v286)
      {
        *(_QWORD *)(v265 + 24) = v286;
        *(_QWORD *)(v265 + 32) = *((_QWORD *)v266 + 4);
        (**(void (***)(uint64_t, __int128 *))(v286 - 8))(v265, v266);
        v322 = *((_QWORD *)v266 + 5);
        *(_BYTE *)(v265 + 48) = *((_BYTE *)v266 + 48);
        *(_QWORD *)(v265 + 40) = v322;
        v323 = *((_QWORD *)v266 + 10);
        v324 = *((_QWORD *)v266 + 12);
        v325 = *((_QWORD *)v266 + 14);
        v326 = *((_QWORD *)v266 + 22);
        if (v323 >> 1 != 0xFFFFFFFF
          || (v325 | (unint64_t)v324) > 1
          || v266[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)v266[8] & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)v266 + 24) | (unint64_t)v326) >= 2)
        {
          v388 = *((_QWORD *)v266 + 7);
          v389 = *((_QWORD *)v266 + 11);
          v679 = *((_QWORD *)v266 + 15);
          v727 = *((_QWORD *)v266 + 17);
          v743 = *((_QWORD *)v266 + 18);
          v775 = *((_QWORD *)v266 + 19);
          v791 = *((_QWORD *)v266 + 21);
          v807 = *((_QWORD *)v266 + 23);
          v823 = *((_QWORD *)v266 + 25);
          v839 = *((_QWORD *)v266 + 26);
          v855 = *((_QWORD *)v266 + 27);
          v871 = *((_QWORD *)v266 + 28);
          v887 = *((_QWORD *)v266 + 29);
          v903 = *((_QWORD *)v266 + 30);
          v695 = *((_QWORD *)v266 + 22);
          v711 = *((_QWORD *)v266 + 20);
          v390 = *((_QWORD *)v266 + 8);
          v759 = *((_QWORD *)v266 + 24);
          v666 = *((_QWORD *)v266 + 16);
          v391 = *((_QWORD *)v266 + 9);
          v392 = *((_QWORD *)v266 + 13);
          sub_1AD00FEAC(v388, v390, v391, v323, v389, v324, v392, v325, v679, v666, v727, v743, v775, v711, v791, v326, v807, v759, v823,
            v839,
            v855,
            v871,
            v887,
            v903);
          *(_QWORD *)(v265 + 56) = v388;
          *(_QWORD *)(v265 + 64) = v390;
          *(_QWORD *)(v265 + 72) = v391;
          *(_QWORD *)(v265 + 80) = v323;
          *(_QWORD *)(v265 + 88) = v389;
          *(_QWORD *)(v265 + 96) = v324;
          *(_QWORD *)(v265 + 104) = v392;
          *(_QWORD *)(v265 + 112) = v325;
          *(_QWORD *)(v265 + 120) = v679;
          *(_QWORD *)(v265 + 128) = v666;
          *(_QWORD *)(v265 + 136) = v727;
          *(_QWORD *)(v265 + 144) = v743;
          *(_QWORD *)(v265 + 152) = v775;
          *(_QWORD *)(v265 + 160) = v711;
          *(_QWORD *)(v265 + 168) = v791;
          *(_QWORD *)(v265 + 176) = v695;
          *(_QWORD *)(v265 + 184) = v807;
          *(_QWORD *)(v265 + 192) = v759;
          *(_QWORD *)(v265 + 200) = v823;
          *(_QWORD *)(v265 + 208) = v839;
          *(_QWORD *)(v265 + 216) = v855;
          *(_QWORD *)(v265 + 224) = v871;
          *(_QWORD *)(v265 + 232) = v887;
          *(_QWORD *)(v265 + 240) = v903;
        }
        else
        {
          v327 = *(__int128 *)((char *)v266 + 56);
          v328 = *(__int128 *)((char *)v266 + 72);
          v329 = *(__int128 *)((char *)v266 + 104);
          *(_OWORD *)(v265 + 88) = *(__int128 *)((char *)v266 + 88);
          *(_OWORD *)(v265 + 104) = v329;
          *(_OWORD *)(v265 + 56) = v327;
          *(_OWORD *)(v265 + 72) = v328;
          v330 = *(__int128 *)((char *)v266 + 120);
          v331 = *(__int128 *)((char *)v266 + 136);
          v332 = *(__int128 *)((char *)v266 + 168);
          *(_OWORD *)(v265 + 152) = *(__int128 *)((char *)v266 + 152);
          *(_OWORD *)(v265 + 168) = v332;
          *(_OWORD *)(v265 + 120) = v330;
          *(_OWORD *)(v265 + 136) = v331;
          v333 = *(__int128 *)((char *)v266 + 184);
          v334 = *(__int128 *)((char *)v266 + 200);
          v335 = *(__int128 *)((char *)v266 + 232);
          *(_OWORD *)(v265 + 216) = *(__int128 *)((char *)v266 + 216);
          *(_OWORD *)(v265 + 232) = v335;
          *(_OWORD *)(v265 + 184) = v333;
          *(_OWORD *)(v265 + 200) = v334;
        }
      }
      else
      {
        v376 = *v266;
        v377 = v266[1];
        v378 = v266[3];
        *(_OWORD *)(v265 + 32) = v266[2];
        *(_OWORD *)(v265 + 48) = v378;
        *(_OWORD *)v265 = v376;
        *(_OWORD *)(v265 + 16) = v377;
        v379 = v266[4];
        v380 = v266[5];
        v381 = v266[7];
        *(_OWORD *)(v265 + 96) = v266[6];
        *(_OWORD *)(v265 + 112) = v381;
        *(_OWORD *)(v265 + 64) = v379;
        *(_OWORD *)(v265 + 80) = v380;
        v382 = v266[8];
        v383 = v266[9];
        v384 = v266[11];
        *(_OWORD *)(v265 + 160) = v266[10];
        *(_OWORD *)(v265 + 176) = v384;
        *(_OWORD *)(v265 + 128) = v382;
        *(_OWORD *)(v265 + 144) = v383;
        v385 = v266[12];
        v386 = v266[13];
        v387 = v266[14];
        *(_QWORD *)(v265 + 240) = *((_QWORD *)v266 + 30);
        *(_OWORD *)(v265 + 208) = v386;
        *(_OWORD *)(v265 + 224) = v387;
        *(_OWORD *)(v265 + 192) = v385;
      }
      v416 = *((_QWORD *)v266 + 31);
      v417 = *((_QWORD *)v266 + 32);
      v418 = *((_QWORD *)v266 + 33);
      v419 = *((_QWORD *)v266 + 34);
      v421 = *((_QWORD *)v266 + 35);
      v420 = *((_QWORD *)v266 + 36);
      v422 = *((_QWORD *)v266 + 37);
      v682 = *((_QWORD *)v266 + 39);
      v698 = *((_QWORD *)v266 + 40);
      v714 = *((_QWORD *)v266 + 41);
      v730 = *((_QWORD *)v266 + 42);
      v746 = *((_QWORD *)v266 + 43);
      v762 = *((_QWORD *)v266 + 44);
      v423 = *((_QWORD *)v266 + 46);
      v778 = *((_QWORD *)v266 + 45);
      v794 = *((_QWORD *)v266 + 47);
      v810 = *((_QWORD *)v266 + 48);
      v826 = *((_QWORD *)v266 + 49);
      v842 = *((_QWORD *)v266 + 50);
      v858 = *((_QWORD *)v266 + 51);
      v874 = *((_QWORD *)v266 + 52);
      v890 = *((_QWORD *)v266 + 53);
      v906 = *((_QWORD *)v266 + 54);
      v424 = *((_QWORD *)v266 + 38);
      sub_1AD00FEAC(v416, v417, v418, v419, v421, v420, v422, v424, v682, v698, v714, v730, v746, v762, v778, v423, v794, v810, v826,
        v842,
        v858,
        v874,
        v890,
        v906);
      v425 = *(_QWORD *)(v265 + 248);
      v426 = *(_QWORD *)(v265 + 256);
      v427 = v265 + 248;
      v428 = *(_QWORD *)(v427 + 16);
      v429 = *(_QWORD *)(v427 + 24);
      *(_QWORD *)v427 = v416;
      *(_QWORD *)(v427 + 8) = v417;
      v430 = *(_QWORD *)(v427 + 32);
      v431 = *(_QWORD *)(v427 + 40);
      *(_QWORD *)(v427 + 16) = v418;
      *(_QWORD *)(v427 + 24) = v419;
      v432 = *(_QWORD *)(v427 + 48);
      v433 = *(_QWORD *)(v427 + 56);
      *(_QWORD *)(v427 + 32) = v421;
      *(_QWORD *)(v427 + 40) = v420;
      *(_QWORD *)(v427 + 48) = v422;
      *(_QWORD *)(v427 + 56) = v424;
      v434 = *(_OWORD *)(v427 + 64);
      v435 = *(_OWORD *)(v427 + 80);
      v436 = *(_OWORD *)(v427 + 96);
      v437 = *(_OWORD *)(v427 + 112);
      v438 = *(_OWORD *)(v427 + 128);
      v439 = *(_OWORD *)(v427 + 144);
      v440 = *(_OWORD *)(v427 + 160);
      *(_QWORD *)(v427 + 64) = v682;
      *(_QWORD *)(v427 + 72) = v698;
      v441 = *(_QWORD *)(v427 + 176);
      v442 = *(_QWORD *)(v427 + 184);
      *(_QWORD *)(v427 + 80) = v714;
      *(_QWORD *)(v427 + 88) = v730;
      *(_QWORD *)(v427 + 96) = v746;
      *(_QWORD *)(v427 + 104) = v762;
      *(_QWORD *)(v427 + 112) = v778;
      *(_QWORD *)(v427 + 120) = v423;
      *(_QWORD *)(v427 + 128) = v794;
      *(_QWORD *)(v427 + 136) = v810;
      *(_QWORD *)(v427 + 144) = v826;
      *(_QWORD *)(v427 + 152) = v842;
      *(_QWORD *)(v427 + 160) = v858;
      *(_QWORD *)(v427 + 168) = v874;
      *(_QWORD *)(v427 + 176) = v890;
      *(_QWORD *)(v427 + 184) = v906;
      sub_1AD00E8B0(v425, v426, v428, v429, v430, v431, v432, v433, v434, *((uint64_t *)&v434 + 1), v435, *((uint64_t *)&v435 + 1), v436, *((uint64_t *)&v436 + 1), v437, *((uint64_t *)&v437 + 1), v438, *((unint64_t *)&v438 + 1), v439,
        *((uint64_t *)&v439 + 1),
        v440,
        *((uint64_t *)&v440 + 1),
        v441,
        v442);
      goto LABEL_168;
    }
    sub_1AD406748((_QWORD *)v265);
LABEL_130:
    memcpy((void *)v265, v266, 0x1B8uLL);
    goto LABEL_169;
  }
  if (v270)
    goto LABEL_130;
  v271 = *((_QWORD *)v266 + 3);
  if (v271)
  {
    *(_QWORD *)(v265 + 24) = v271;
    *(_QWORD *)(v265 + 32) = *((_QWORD *)v266 + 4);
    (**(void (***)(uint64_t, __int128 *))(v271 - 8))(v265, v266);
    v272 = *((_QWORD *)v266 + 5);
    *(_BYTE *)(v265 + 48) = *((_BYTE *)v266 + 48);
    *(_QWORD *)(v265 + 40) = v272;
    v273 = *((_QWORD *)v266 + 10);
    v274 = *((_QWORD *)v266 + 12);
    v275 = *((_QWORD *)v266 + 14);
    v276 = *((_QWORD *)v266 + 22);
    if (v273 >> 1 != 0xFFFFFFFF
      || (v275 | (unint64_t)v274) > 1
      || v266[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)v266[8] & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)v266 + 24) | (unint64_t)v276) >= 2)
    {
      v336 = *((_QWORD *)v266 + 7);
      v337 = *((_QWORD *)v266 + 13);
      v677 = *((_QWORD *)v266 + 15);
      v725 = *((_QWORD *)v266 + 17);
      v741 = *((_QWORD *)v266 + 18);
      v773 = *((_QWORD *)v266 + 19);
      v789 = *((_QWORD *)v266 + 21);
      v805 = *((_QWORD *)v266 + 23);
      v821 = *((_QWORD *)v266 + 25);
      v837 = *((_QWORD *)v266 + 26);
      v853 = *((_QWORD *)v266 + 27);
      v869 = *((_QWORD *)v266 + 28);
      v885 = *((_QWORD *)v266 + 29);
      v901 = *((_QWORD *)v266 + 30);
      v693 = *((_QWORD *)v266 + 22);
      v709 = *((_QWORD *)v266 + 20);
      v338 = *((_QWORD *)v266 + 8);
      v757 = *((_QWORD *)v266 + 24);
      v665 = *((_QWORD *)v266 + 16);
      v339 = *((_QWORD *)v266 + 9);
      v340 = *((_QWORD *)v266 + 11);
      sub_1AD00FEAC(v336, v338, v339, v273, v340, v274, v337, v275, v677, v665, v725, v741, v773, v709, v789, v276, v805, v757, v821,
        v837,
        v853,
        v869,
        v885,
        v901);
      *(_QWORD *)(v265 + 56) = v336;
      *(_QWORD *)(v265 + 64) = v338;
      *(_QWORD *)(v265 + 72) = v339;
      *(_QWORD *)(v265 + 80) = v273;
      *(_QWORD *)(v265 + 88) = v340;
      *(_QWORD *)(v265 + 96) = v274;
      *(_QWORD *)(v265 + 104) = v337;
      *(_QWORD *)(v265 + 112) = v275;
      *(_QWORD *)(v265 + 120) = v677;
      *(_QWORD *)(v265 + 128) = v665;
      *(_QWORD *)(v265 + 136) = v725;
      *(_QWORD *)(v265 + 144) = v741;
      *(_QWORD *)(v265 + 152) = v773;
      *(_QWORD *)(v265 + 160) = v709;
      *(_QWORD *)(v265 + 168) = v789;
      *(_QWORD *)(v265 + 176) = v693;
      *(_QWORD *)(v265 + 184) = v805;
      *(_QWORD *)(v265 + 192) = v757;
      *(_QWORD *)(v265 + 200) = v821;
      *(_QWORD *)(v265 + 208) = v837;
      *(_QWORD *)(v265 + 216) = v853;
      *(_QWORD *)(v265 + 224) = v869;
      *(_QWORD *)(v265 + 232) = v885;
      *(_QWORD *)(v265 + 240) = v901;
    }
    else
    {
      v277 = *(__int128 *)((char *)v266 + 56);
      v278 = *(__int128 *)((char *)v266 + 72);
      v279 = *(__int128 *)((char *)v266 + 104);
      *(_OWORD *)(v265 + 88) = *(__int128 *)((char *)v266 + 88);
      *(_OWORD *)(v265 + 104) = v279;
      *(_OWORD *)(v265 + 56) = v277;
      *(_OWORD *)(v265 + 72) = v278;
      v280 = *(__int128 *)((char *)v266 + 120);
      v281 = *(__int128 *)((char *)v266 + 136);
      v282 = *(__int128 *)((char *)v266 + 168);
      *(_OWORD *)(v265 + 152) = *(__int128 *)((char *)v266 + 152);
      *(_OWORD *)(v265 + 168) = v282;
      *(_OWORD *)(v265 + 120) = v280;
      *(_OWORD *)(v265 + 136) = v281;
      v283 = *(__int128 *)((char *)v266 + 184);
      v284 = *(__int128 *)((char *)v266 + 200);
      v285 = *(__int128 *)((char *)v266 + 232);
      *(_OWORD *)(v265 + 216) = *(__int128 *)((char *)v266 + 216);
      *(_OWORD *)(v265 + 232) = v285;
      *(_OWORD *)(v265 + 184) = v283;
      *(_OWORD *)(v265 + 200) = v284;
    }
  }
  else
  {
    v310 = *v266;
    v311 = v266[1];
    v312 = v266[3];
    *(_OWORD *)(v265 + 32) = v266[2];
    *(_OWORD *)(v265 + 48) = v312;
    *(_OWORD *)v265 = v310;
    *(_OWORD *)(v265 + 16) = v311;
    v313 = v266[4];
    v314 = v266[5];
    v315 = v266[7];
    *(_OWORD *)(v265 + 96) = v266[6];
    *(_OWORD *)(v265 + 112) = v315;
    *(_OWORD *)(v265 + 64) = v313;
    *(_OWORD *)(v265 + 80) = v314;
    v316 = v266[8];
    v317 = v266[9];
    v318 = v266[11];
    *(_OWORD *)(v265 + 160) = v266[10];
    *(_OWORD *)(v265 + 176) = v318;
    *(_OWORD *)(v265 + 128) = v316;
    *(_OWORD *)(v265 + 144) = v317;
    v319 = v266[12];
    v320 = v266[13];
    v321 = v266[14];
    *(_QWORD *)(v265 + 240) = *((_QWORD *)v266 + 30);
    *(_OWORD *)(v265 + 208) = v320;
    *(_OWORD *)(v265 + 224) = v321;
    *(_OWORD *)(v265 + 192) = v319;
  }
  v341 = *((_QWORD *)v266 + 31);
  v342 = *((_QWORD *)v266 + 32);
  v343 = *((_QWORD *)v266 + 33);
  v344 = *((_QWORD *)v266 + 34);
  v345 = *((_QWORD *)v266 + 35);
  v346 = *((_QWORD *)v266 + 36);
  v348 = *((_QWORD *)v266 + 37);
  v347 = *((_QWORD *)v266 + 38);
  v678 = *((_QWORD *)v266 + 40);
  v694 = *((_QWORD *)v266 + 41);
  v710 = *((_QWORD *)v266 + 42);
  v726 = *((_QWORD *)v266 + 43);
  v742 = *((_QWORD *)v266 + 44);
  v758 = *((_QWORD *)v266 + 45);
  v774 = *((_QWORD *)v266 + 46);
  v790 = *((_QWORD *)v266 + 47);
  v806 = *((_QWORD *)v266 + 48);
  v822 = *((_QWORD *)v266 + 49);
  v838 = *((_QWORD *)v266 + 50);
  v854 = *((_QWORD *)v266 + 51);
  v870 = *((_QWORD *)v266 + 52);
  v886 = *((_QWORD *)v266 + 53);
  v902 = *((_QWORD *)v266 + 54);
  v349 = *((_QWORD *)v266 + 39);
  v350 = v341;
  v351 = v342;
  v352 = v343;
  v353 = v344;
  v354 = v347;
  sub_1AD00FEAC(v341, v342, v343, v344, v345, v346, v348, v347, v349, v678, v694, v710, v726, v742, v758, v774, v790, v806, v822,
    v838,
    v854,
    v870,
    v886,
    v902);
  *(_QWORD *)(v265 + 248) = v350;
  *(_QWORD *)(v265 + 256) = v351;
  *(_QWORD *)(v265 + 264) = v352;
  *(_QWORD *)(v265 + 272) = v353;
  *(_QWORD *)(v265 + 280) = v345;
  *(_QWORD *)(v265 + 288) = v346;
  *(_QWORD *)(v265 + 296) = v348;
  *(_QWORD *)(v265 + 304) = v354;
  *(_QWORD *)(v265 + 312) = v349;
  *(_QWORD *)(v265 + 320) = v678;
  *(_QWORD *)(v265 + 328) = v694;
  *(_QWORD *)(v265 + 336) = v710;
  *(_QWORD *)(v265 + 344) = v726;
  *(_QWORD *)(v265 + 352) = v742;
  *(_QWORD *)(v265 + 360) = v758;
  *(_QWORD *)(v265 + 368) = v774;
  *(_QWORD *)(v265 + 376) = v790;
  *(_QWORD *)(v265 + 384) = v806;
  *(_QWORD *)(v265 + 392) = v822;
  *(_QWORD *)(v265 + 400) = v838;
  *(_QWORD *)(v265 + 408) = v854;
  *(_QWORD *)(v265 + 416) = v870;
  *(_QWORD *)(v265 + 424) = v886;
  *(_QWORD *)(v265 + 432) = v902;
LABEL_168:
  a1 = (uint64_t)v913;
  a3 = v914;
  a2 = v915;
LABEL_169:
  v443 = a3[7];
  v444 = (_QWORD *)(a1 + v443);
  v445 = (uint64_t)a2 + v443;
  v446 = *(_QWORD *)((char *)a2 + v443 + 8);
  *v444 = *(_QWORD *)((char *)a2 + v443);
  v444[1] = v446;
  swift_retain();
  swift_release();
  v447 = *(_QWORD *)(v445 + 24);
  if (v444[3] == 1)
  {
    if (v447 != 1)
    {
      v444[2] = *(_QWORD *)(v445 + 16);
      v444[3] = *(_QWORD *)(v445 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_176;
    }
    goto LABEL_174;
  }
  if (v447 == 1)
  {
    sub_1AD009758((uint64_t)(v444 + 2), &qword_1ED2E3198);
LABEL_174:
    *((_OWORD *)v444 + 1) = *(_OWORD *)(v445 + 16);
    goto LABEL_176;
  }
  v444[2] = *(_QWORD *)(v445 + 16);
  v444[3] = *(_QWORD *)(v445 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_176:
  v448 = a3[8];
  v449 = a1 + v448;
  v450 = (__int128 *)((char *)a2 + v448);
  v454 = *(_QWORD *)((char *)a2 + v448 + 272) >> 1 == 0xFFFFFFFFLL
      && (*((_QWORD *)v450 + 38) | *((_QWORD *)v450 + 36)) < 2uLL
      && (*(_QWORD *)((_BYTE *)a2 + v448 + 352) & 0xFFFFFFFFFFFFFEFELL | v450[20] & 0xFFFFFFFFFFFF00FELL) == 0
      && (*((_QWORD *)v450 + 48) | *((_QWORD *)v450 + 46)) < 2uLL;
  if (*(_QWORD *)(a1 + v448 + 272) >> 1 != 0xFFFFFFFFLL
    || (*(_QWORD *)(v449 + 304) | *(_QWORD *)(v449 + 288)) > 1
    || *(_QWORD *)(v449 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v449 + 320) & 0xFFFFFFFFFFFF00FELL
    || (*(_QWORD *)(v449 + 384) | *(_QWORD *)(v449 + 368)) >= 2)
  {
    if (!v454)
    {
      v470 = *((_QWORD *)v450 + 3);
      if (*(_QWORD *)(v449 + 24))
      {
        if (v470)
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)v449, (uint64_t *)v450);
          v471 = *((_QWORD *)v450 + 5);
          *(_BYTE *)(v449 + 48) = *((_BYTE *)v450 + 48);
          *(_QWORD *)(v449 + 40) = v471;
          v472 = (_OWORD *)(v449 + 56);
          v473 = (__int128 *)((char *)v450 + 56);
          v474 = *((_QWORD *)v450 + 10);
          v475 = *((_QWORD *)v450 + 12);
          v476 = *((_QWORD *)v450 + 14);
          v477 = *((_QWORD *)v450 + 16);
          v478 = *((_QWORD *)v450 + 20);
          v479 = *((_QWORD *)v450 + 22);
          v480 = *((_QWORD *)v450 + 24);
          v484 = v474 >> 1 == 0xFFFFFFFF
              && (v476 | (unint64_t)v475) < 2
              && (v478 & 0xFFFFFFFFFFFFFEFELL | v477 & 0xFFFFFFFFFFFF00FELL) == 0
              && (v480 | v479) < 2;
          if (*(_QWORD *)(v449 + 80) >> 1 != 0xFFFFFFFFLL
            || (*(_QWORD *)(v449 + 112) | *(_QWORD *)(v449 + 96)) > 1
            || *(_QWORD *)(v449 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v449 + 128) & 0xFFFFFFFFFFFF00FELL
            || (*(_QWORD *)(v449 + 192) | *(_QWORD *)(v449 + 176)) >= 2)
          {
            if (v484)
            {
              sub_1AD148B34(v449 + 56);
              v551 = *(__int128 *)((char *)v450 + 104);
              v553 = *v473;
              v552 = *(__int128 *)((char *)v450 + 72);
              *(_OWORD *)(v449 + 88) = *(__int128 *)((char *)v450 + 88);
              *(_OWORD *)(v449 + 104) = v551;
              *v472 = v553;
              *(_OWORD *)(v449 + 72) = v552;
              v554 = *(__int128 *)((char *)v450 + 168);
              v556 = *(__int128 *)((char *)v450 + 120);
              v555 = *(__int128 *)((char *)v450 + 136);
              *(_OWORD *)(v449 + 152) = *(__int128 *)((char *)v450 + 152);
              *(_OWORD *)(v449 + 168) = v554;
              *(_OWORD *)(v449 + 120) = v556;
              *(_OWORD *)(v449 + 136) = v555;
              v557 = *(__int128 *)((char *)v450 + 232);
              v559 = *(__int128 *)((char *)v450 + 184);
              v558 = *(__int128 *)((char *)v450 + 200);
              *(_OWORD *)(v449 + 216) = *(__int128 *)((char *)v450 + 216);
              *(_OWORD *)(v449 + 232) = v557;
              *(_OWORD *)(v449 + 184) = v559;
              *(_OWORD *)(v449 + 200) = v558;
            }
            else
            {
              v687 = *((_QWORD *)v450 + 8);
              v703 = *((_QWORD *)v450 + 7);
              v672 = *((_QWORD *)v450 + 9);
              v581 = *((_QWORD *)v450 + 11);
              v582 = *((_QWORD *)v450 + 13);
              v719 = *((_QWORD *)v450 + 15);
              v735 = *((_QWORD *)v450 + 17);
              v751 = *((_QWORD *)v450 + 18);
              v767 = *((_QWORD *)v450 + 19);
              v783 = *((_QWORD *)v450 + 21);
              v799 = *((_QWORD *)v450 + 23);
              v815 = *((_QWORD *)v450 + 25);
              v831 = *((_QWORD *)v450 + 26);
              v847 = *((_QWORD *)v450 + 27);
              v863 = *((_QWORD *)v450 + 28);
              v879 = *((_QWORD *)v450 + 29);
              v895 = *((_QWORD *)v450 + 30);
              v911 = *((_QWORD *)v450 + 24);
              sub_1AD00FEAC(v703, v687, v672, v474, v581, v475, v582, v476, v719, v477, v735, v751, v767, v478, v783, v479, v799, v480, v815,
                v831,
                v847,
                v863,
                v879,
                v895);
              v583 = *(_QWORD *)(v449 + 56);
              v584 = *(_QWORD *)(v449 + 64);
              *(_QWORD *)(v449 + 56) = v703;
              *(_QWORD *)(v449 + 64) = v687;
              v585 = *(_QWORD *)(v449 + 72);
              v586 = *(_QWORD *)(v449 + 80);
              *(_QWORD *)(v449 + 72) = v672;
              *(_QWORD *)(v449 + 80) = v474;
              v587 = *(_QWORD *)(v449 + 88);
              v588 = *(_QWORD *)(v449 + 96);
              *(_QWORD *)(v449 + 88) = v581;
              *(_QWORD *)(v449 + 96) = v475;
              v589 = *(_QWORD *)(v449 + 104);
              v590 = *(_QWORD *)(v449 + 112);
              *(_QWORD *)(v449 + 104) = v582;
              *(_QWORD *)(v449 + 112) = v476;
              v591 = *(_OWORD *)(v449 + 120);
              *(_QWORD *)(v449 + 120) = v719;
              *(_QWORD *)(v449 + 128) = v477;
              v592 = *(_OWORD *)(v449 + 136);
              *(_QWORD *)(v449 + 136) = v735;
              *(_QWORD *)(v449 + 144) = v751;
              v593 = *(_OWORD *)(v449 + 152);
              *(_QWORD *)(v449 + 152) = v767;
              *(_QWORD *)(v449 + 160) = v478;
              v594 = *(_OWORD *)(v449 + 168);
              *(_QWORD *)(v449 + 168) = v783;
              *(_QWORD *)(v449 + 176) = v479;
              v595 = *(_OWORD *)(v449 + 184);
              *(_QWORD *)(v449 + 184) = v799;
              *(_QWORD *)(v449 + 192) = v911;
              v596 = *(_OWORD *)(v449 + 200);
              *(_QWORD *)(v449 + 200) = v815;
              *(_QWORD *)(v449 + 208) = v831;
              v597 = *(_OWORD *)(v449 + 216);
              *(_QWORD *)(v449 + 216) = v847;
              *(_QWORD *)(v449 + 224) = v863;
              v598 = *(_QWORD *)(v449 + 232);
              v599 = *(_QWORD *)(v449 + 240);
              *(_QWORD *)(v449 + 232) = v879;
              *(_QWORD *)(v449 + 240) = v895;
              sub_1AD00E8B0(v583, v584, v585, v586, v587, v588, v589, v590, v591, *((uint64_t *)&v591 + 1), v592, *((uint64_t *)&v592 + 1), v593, *((uint64_t *)&v593 + 1), v594, *((uint64_t *)&v594 + 1), v595, *((unint64_t *)&v595 + 1), v596,
                *((uint64_t *)&v596 + 1),
                v597,
                *((uint64_t *)&v597 + 1),
                v598,
                v599);
            }
          }
          else if (v484)
          {
            v485 = *v473;
            v486 = *(__int128 *)((char *)v450 + 72);
            v487 = *(__int128 *)((char *)v450 + 104);
            *(_OWORD *)(v449 + 88) = *(__int128 *)((char *)v450 + 88);
            *(_OWORD *)(v449 + 104) = v487;
            *v472 = v485;
            *(_OWORD *)(v449 + 72) = v486;
            v488 = *(__int128 *)((char *)v450 + 120);
            v489 = *(__int128 *)((char *)v450 + 136);
            v490 = *(__int128 *)((char *)v450 + 168);
            *(_OWORD *)(v449 + 152) = *(__int128 *)((char *)v450 + 152);
            *(_OWORD *)(v449 + 168) = v490;
            *(_OWORD *)(v449 + 120) = v488;
            *(_OWORD *)(v449 + 136) = v489;
            v491 = *(__int128 *)((char *)v450 + 184);
            v492 = *(__int128 *)((char *)v450 + 200);
            v493 = *(__int128 *)((char *)v450 + 232);
            *(_OWORD *)(v449 + 216) = *(__int128 *)((char *)v450 + 216);
            *(_OWORD *)(v449 + 232) = v493;
            *(_OWORD *)(v449 + 184) = v491;
            *(_OWORD *)(v449 + 200) = v492;
          }
          else
          {
            v577 = *((_QWORD *)v450 + 11);
            v578 = *((_QWORD *)v450 + 13);
            v671 = *((_QWORD *)v450 + 9);
            v686 = *((_QWORD *)v450 + 15);
            v718 = *((_QWORD *)v450 + 17);
            v734 = *((_QWORD *)v450 + 18);
            v766 = *((_QWORD *)v450 + 19);
            v782 = *((_QWORD *)v450 + 21);
            v798 = *((_QWORD *)v450 + 23);
            v814 = *((_QWORD *)v450 + 25);
            v830 = *((_QWORD *)v450 + 26);
            v846 = *((_QWORD *)v450 + 27);
            v862 = *((_QWORD *)v450 + 28);
            v878 = *((_QWORD *)v450 + 29);
            v894 = *((_QWORD *)v450 + 30);
            v750 = *((_QWORD *)v450 + 22);
            v579 = *((_QWORD *)v450 + 7);
            v702 = *((_QWORD *)v450 + 20);
            v580 = *((_QWORD *)v450 + 8);
            v910 = *((_QWORD *)v450 + 24);
            sub_1AD00FEAC(v579, v580, v671, v474, v577, v475, v578, v476, v686, v477, v718, v734, v766, v702, v782, v750, v798, v480, v814,
              v830,
              v846,
              v862,
              v878,
              v894);
            *(_QWORD *)(v449 + 56) = v579;
            *(_QWORD *)(v449 + 64) = v580;
            *(_QWORD *)(v449 + 72) = v671;
            *(_QWORD *)(v449 + 80) = v474;
            *(_QWORD *)(v449 + 88) = v577;
            *(_QWORD *)(v449 + 96) = v475;
            *(_QWORD *)(v449 + 104) = v578;
            *(_QWORD *)(v449 + 112) = v476;
            *(_QWORD *)(v449 + 120) = v686;
            *(_QWORD *)(v449 + 128) = v477;
            *(_QWORD *)(v449 + 136) = v718;
            *(_QWORD *)(v449 + 144) = v734;
            *(_QWORD *)(v449 + 152) = v766;
            *(_QWORD *)(v449 + 160) = v702;
            *(_QWORD *)(v449 + 168) = v782;
            *(_QWORD *)(v449 + 176) = v750;
            *(_QWORD *)(v449 + 184) = v798;
            *(_QWORD *)(v449 + 192) = v910;
            *(_QWORD *)(v449 + 200) = v814;
            *(_QWORD *)(v449 + 208) = v830;
            *(_QWORD *)(v449 + 216) = v846;
            *(_QWORD *)(v449 + 224) = v862;
            *(_QWORD *)(v449 + 232) = v878;
            *(_QWORD *)(v449 + 240) = v894;
          }
        }
        else
        {
          sub_1AD046A30((_QWORD *)v449);
          v539 = v450[3];
          v541 = *v450;
          v540 = v450[1];
          *(_OWORD *)(v449 + 32) = v450[2];
          *(_OWORD *)(v449 + 48) = v539;
          *(_OWORD *)v449 = v541;
          *(_OWORD *)(v449 + 16) = v540;
          v542 = v450[7];
          v544 = v450[4];
          v543 = v450[5];
          *(_OWORD *)(v449 + 96) = v450[6];
          *(_OWORD *)(v449 + 112) = v542;
          *(_OWORD *)(v449 + 64) = v544;
          *(_OWORD *)(v449 + 80) = v543;
          v545 = v450[11];
          v547 = v450[8];
          v546 = v450[9];
          *(_OWORD *)(v449 + 160) = v450[10];
          *(_OWORD *)(v449 + 176) = v545;
          *(_OWORD *)(v449 + 128) = v547;
          *(_OWORD *)(v449 + 144) = v546;
          v549 = v450[13];
          v548 = v450[14];
          v550 = v450[12];
          *(_QWORD *)(v449 + 240) = *((_QWORD *)v450 + 30);
          *(_OWORD *)(v449 + 208) = v549;
          *(_OWORD *)(v449 + 224) = v548;
          *(_OWORD *)(v449 + 192) = v550;
        }
      }
      else if (v470)
      {
        *(_QWORD *)(v449 + 24) = v470;
        *(_QWORD *)(v449 + 32) = *((_QWORD *)v450 + 4);
        (**(void (***)(uint64_t, __int128 *))(v470 - 8))(v449, v450);
        v506 = *((_QWORD *)v450 + 5);
        *(_BYTE *)(v449 + 48) = *((_BYTE *)v450 + 48);
        *(_QWORD *)(v449 + 40) = v506;
        v507 = *((_QWORD *)v450 + 10);
        v508 = *((_QWORD *)v450 + 12);
        v509 = *((_QWORD *)v450 + 14);
        v510 = *((_QWORD *)v450 + 22);
        if (v507 >> 1 != 0xFFFFFFFF
          || (v509 | (unint64_t)v508) > 1
          || v450[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)v450[8] & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)v450 + 24) | (unint64_t)v510) >= 2)
        {
          v572 = *((_QWORD *)v450 + 7);
          v573 = *((_QWORD *)v450 + 11);
          v685 = *((_QWORD *)v450 + 15);
          v733 = *((_QWORD *)v450 + 17);
          v749 = *((_QWORD *)v450 + 18);
          v781 = *((_QWORD *)v450 + 19);
          v797 = *((_QWORD *)v450 + 21);
          v813 = *((_QWORD *)v450 + 23);
          v829 = *((_QWORD *)v450 + 25);
          v845 = *((_QWORD *)v450 + 26);
          v861 = *((_QWORD *)v450 + 27);
          v877 = *((_QWORD *)v450 + 28);
          v893 = *((_QWORD *)v450 + 29);
          v909 = *((_QWORD *)v450 + 30);
          v701 = *((_QWORD *)v450 + 22);
          v717 = *((_QWORD *)v450 + 20);
          v574 = *((_QWORD *)v450 + 8);
          v765 = *((_QWORD *)v450 + 24);
          v670 = *((_QWORD *)v450 + 16);
          v575 = *((_QWORD *)v450 + 9);
          v576 = *((_QWORD *)v450 + 13);
          sub_1AD00FEAC(v572, v574, v575, v507, v573, v508, v576, v509, v685, v670, v733, v749, v781, v717, v797, v510, v813, v765, v829,
            v845,
            v861,
            v877,
            v893,
            v909);
          *(_QWORD *)(v449 + 56) = v572;
          *(_QWORD *)(v449 + 64) = v574;
          *(_QWORD *)(v449 + 72) = v575;
          *(_QWORD *)(v449 + 80) = v507;
          *(_QWORD *)(v449 + 88) = v573;
          *(_QWORD *)(v449 + 96) = v508;
          *(_QWORD *)(v449 + 104) = v576;
          *(_QWORD *)(v449 + 112) = v509;
          *(_QWORD *)(v449 + 120) = v685;
          *(_QWORD *)(v449 + 128) = v670;
          *(_QWORD *)(v449 + 136) = v733;
          *(_QWORD *)(v449 + 144) = v749;
          *(_QWORD *)(v449 + 152) = v781;
          *(_QWORD *)(v449 + 160) = v717;
          *(_QWORD *)(v449 + 168) = v797;
          *(_QWORD *)(v449 + 176) = v701;
          *(_QWORD *)(v449 + 184) = v813;
          *(_QWORD *)(v449 + 192) = v765;
          *(_QWORD *)(v449 + 200) = v829;
          *(_QWORD *)(v449 + 208) = v845;
          *(_QWORD *)(v449 + 216) = v861;
          *(_QWORD *)(v449 + 224) = v877;
          *(_QWORD *)(v449 + 232) = v893;
          *(_QWORD *)(v449 + 240) = v909;
        }
        else
        {
          v511 = *(__int128 *)((char *)v450 + 56);
          v512 = *(__int128 *)((char *)v450 + 72);
          v513 = *(__int128 *)((char *)v450 + 104);
          *(_OWORD *)(v449 + 88) = *(__int128 *)((char *)v450 + 88);
          *(_OWORD *)(v449 + 104) = v513;
          *(_OWORD *)(v449 + 56) = v511;
          *(_OWORD *)(v449 + 72) = v512;
          v514 = *(__int128 *)((char *)v450 + 120);
          v515 = *(__int128 *)((char *)v450 + 136);
          v516 = *(__int128 *)((char *)v450 + 168);
          *(_OWORD *)(v449 + 152) = *(__int128 *)((char *)v450 + 152);
          *(_OWORD *)(v449 + 168) = v516;
          *(_OWORD *)(v449 + 120) = v514;
          *(_OWORD *)(v449 + 136) = v515;
          v517 = *(__int128 *)((char *)v450 + 184);
          v518 = *(__int128 *)((char *)v450 + 200);
          v519 = *(__int128 *)((char *)v450 + 232);
          *(_OWORD *)(v449 + 216) = *(__int128 *)((char *)v450 + 216);
          *(_OWORD *)(v449 + 232) = v519;
          *(_OWORD *)(v449 + 184) = v517;
          *(_OWORD *)(v449 + 200) = v518;
        }
      }
      else
      {
        v560 = *v450;
        v561 = v450[1];
        v562 = v450[3];
        *(_OWORD *)(v449 + 32) = v450[2];
        *(_OWORD *)(v449 + 48) = v562;
        *(_OWORD *)v449 = v560;
        *(_OWORD *)(v449 + 16) = v561;
        v563 = v450[4];
        v564 = v450[5];
        v565 = v450[7];
        *(_OWORD *)(v449 + 96) = v450[6];
        *(_OWORD *)(v449 + 112) = v565;
        *(_OWORD *)(v449 + 64) = v563;
        *(_OWORD *)(v449 + 80) = v564;
        v566 = v450[8];
        v567 = v450[9];
        v568 = v450[11];
        *(_OWORD *)(v449 + 160) = v450[10];
        *(_OWORD *)(v449 + 176) = v568;
        *(_OWORD *)(v449 + 128) = v566;
        *(_OWORD *)(v449 + 144) = v567;
        v569 = v450[12];
        v570 = v450[13];
        v571 = v450[14];
        *(_QWORD *)(v449 + 240) = *((_QWORD *)v450 + 30);
        *(_OWORD *)(v449 + 208) = v570;
        *(_OWORD *)(v449 + 224) = v571;
        *(_OWORD *)(v449 + 192) = v569;
      }
      v600 = *((_QWORD *)v450 + 31);
      v601 = *((_QWORD *)v450 + 32);
      v602 = *((_QWORD *)v450 + 33);
      v603 = *((_QWORD *)v450 + 34);
      v604 = *((_QWORD *)v450 + 35);
      v605 = *((_QWORD *)v450 + 36);
      v606 = *((_QWORD *)v450 + 37);
      v688 = *((_QWORD *)v450 + 39);
      v704 = *((_QWORD *)v450 + 40);
      v720 = *((_QWORD *)v450 + 41);
      v736 = *((_QWORD *)v450 + 42);
      v752 = *((_QWORD *)v450 + 43);
      v768 = *((_QWORD *)v450 + 44);
      v607 = *((_QWORD *)v450 + 46);
      v784 = *((_QWORD *)v450 + 45);
      v800 = *((_QWORD *)v450 + 47);
      v816 = *((_QWORD *)v450 + 48);
      v832 = *((_QWORD *)v450 + 49);
      v848 = *((_QWORD *)v450 + 50);
      v864 = *((_QWORD *)v450 + 51);
      v880 = *((_QWORD *)v450 + 52);
      v896 = *((_QWORD *)v450 + 53);
      v912 = *((_QWORD *)v450 + 54);
      v608 = *((_QWORD *)v450 + 38);
      sub_1AD00FEAC(v600, v601, v602, v603, v604, v605, v606, v608, v688, v704, v720, v736, v752, v768, v784, v607, v800, v816, v832,
        v848,
        v864,
        v880,
        v896,
        v912);
      v609 = *(_QWORD *)(v449 + 248);
      v610 = *(_QWORD *)(v449 + 256);
      v611 = v449 + 248;
      v612 = *(_QWORD *)(v611 + 16);
      v613 = *(_QWORD *)(v611 + 24);
      *(_QWORD *)v611 = v600;
      *(_QWORD *)(v611 + 8) = v601;
      v614 = *(_QWORD *)(v611 + 32);
      v615 = *(_QWORD *)(v611 + 40);
      *(_QWORD *)(v611 + 16) = v602;
      *(_QWORD *)(v611 + 24) = v603;
      v616 = *(_QWORD *)(v611 + 48);
      v617 = *(_QWORD *)(v611 + 56);
      *(_QWORD *)(v611 + 32) = v604;
      *(_QWORD *)(v611 + 40) = v605;
      *(_QWORD *)(v611 + 48) = v606;
      *(_QWORD *)(v611 + 56) = v608;
      v618 = *(_OWORD *)(v611 + 64);
      v619 = *(_OWORD *)(v611 + 80);
      v620 = *(_OWORD *)(v611 + 96);
      v621 = *(_OWORD *)(v611 + 112);
      v622 = *(_OWORD *)(v611 + 128);
      v623 = *(_OWORD *)(v611 + 144);
      v624 = *(_OWORD *)(v611 + 160);
      *(_QWORD *)(v611 + 64) = v688;
      *(_QWORD *)(v611 + 72) = v704;
      v625 = *(_QWORD *)(v611 + 176);
      v626 = *(_QWORD *)(v611 + 184);
      *(_QWORD *)(v611 + 80) = v720;
      *(_QWORD *)(v611 + 88) = v736;
      *(_QWORD *)(v611 + 96) = v752;
      *(_QWORD *)(v611 + 104) = v768;
      *(_QWORD *)(v611 + 112) = v784;
      *(_QWORD *)(v611 + 120) = v607;
      *(_QWORD *)(v611 + 128) = v800;
      *(_QWORD *)(v611 + 136) = v816;
      *(_QWORD *)(v611 + 144) = v832;
      *(_QWORD *)(v611 + 152) = v848;
      *(_QWORD *)(v611 + 160) = v864;
      *(_QWORD *)(v611 + 168) = v880;
      *(_QWORD *)(v611 + 176) = v896;
      *(_QWORD *)(v611 + 184) = v912;
      sub_1AD00E8B0(v609, v610, v612, v613, v614, v615, v616, v617, v618, *((uint64_t *)&v618 + 1), v619, *((uint64_t *)&v619 + 1), v620, *((uint64_t *)&v620 + 1), v621, *((uint64_t *)&v621 + 1), v622, *((unint64_t *)&v622 + 1), v623,
        *((uint64_t *)&v623 + 1),
        v624,
        *((uint64_t *)&v624 + 1),
        v625,
        v626);
      goto LABEL_239;
    }
    sub_1AD406748((_QWORD *)v449);
LABEL_201:
    memcpy((void *)v449, v450, 0x1B8uLL);
    goto LABEL_240;
  }
  if (v454)
    goto LABEL_201;
  v455 = *((_QWORD *)v450 + 3);
  if (v455)
  {
    *(_QWORD *)(v449 + 24) = v455;
    *(_QWORD *)(v449 + 32) = *((_QWORD *)v450 + 4);
    (**(void (***)(uint64_t, __int128 *))(v455 - 8))(v449, v450);
    v456 = *((_QWORD *)v450 + 5);
    *(_BYTE *)(v449 + 48) = *((_BYTE *)v450 + 48);
    *(_QWORD *)(v449 + 40) = v456;
    v457 = *((_QWORD *)v450 + 10);
    v458 = *((_QWORD *)v450 + 12);
    v459 = *((_QWORD *)v450 + 14);
    v460 = *((_QWORD *)v450 + 22);
    if (v457 >> 1 != 0xFFFFFFFF
      || (v459 | (unint64_t)v458) > 1
      || v450[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)v450[8] & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)v450 + 24) | (unint64_t)v460) >= 2)
    {
      v520 = *((_QWORD *)v450 + 7);
      v521 = *((_QWORD *)v450 + 13);
      v683 = *((_QWORD *)v450 + 15);
      v731 = *((_QWORD *)v450 + 17);
      v747 = *((_QWORD *)v450 + 18);
      v779 = *((_QWORD *)v450 + 19);
      v795 = *((_QWORD *)v450 + 21);
      v811 = *((_QWORD *)v450 + 23);
      v827 = *((_QWORD *)v450 + 25);
      v843 = *((_QWORD *)v450 + 26);
      v859 = *((_QWORD *)v450 + 27);
      v875 = *((_QWORD *)v450 + 28);
      v891 = *((_QWORD *)v450 + 29);
      v907 = *((_QWORD *)v450 + 30);
      v699 = *((_QWORD *)v450 + 22);
      v715 = *((_QWORD *)v450 + 20);
      v522 = *((_QWORD *)v450 + 8);
      v763 = *((_QWORD *)v450 + 24);
      v669 = *((_QWORD *)v450 + 16);
      v523 = *((_QWORD *)v450 + 9);
      v524 = *((_QWORD *)v450 + 11);
      sub_1AD00FEAC(v520, v522, v523, v457, v524, v458, v521, v459, v683, v669, v731, v747, v779, v715, v795, v460, v811, v763, v827,
        v843,
        v859,
        v875,
        v891,
        v907);
      *(_QWORD *)(v449 + 56) = v520;
      *(_QWORD *)(v449 + 64) = v522;
      *(_QWORD *)(v449 + 72) = v523;
      *(_QWORD *)(v449 + 80) = v457;
      *(_QWORD *)(v449 + 88) = v524;
      *(_QWORD *)(v449 + 96) = v458;
      *(_QWORD *)(v449 + 104) = v521;
      *(_QWORD *)(v449 + 112) = v459;
      *(_QWORD *)(v449 + 120) = v683;
      *(_QWORD *)(v449 + 128) = v669;
      *(_QWORD *)(v449 + 136) = v731;
      *(_QWORD *)(v449 + 144) = v747;
      *(_QWORD *)(v449 + 152) = v779;
      *(_QWORD *)(v449 + 160) = v715;
      *(_QWORD *)(v449 + 168) = v795;
      *(_QWORD *)(v449 + 176) = v699;
      *(_QWORD *)(v449 + 184) = v811;
      *(_QWORD *)(v449 + 192) = v763;
      *(_QWORD *)(v449 + 200) = v827;
      *(_QWORD *)(v449 + 208) = v843;
      *(_QWORD *)(v449 + 216) = v859;
      *(_QWORD *)(v449 + 224) = v875;
      *(_QWORD *)(v449 + 232) = v891;
      *(_QWORD *)(v449 + 240) = v907;
    }
    else
    {
      v461 = *(__int128 *)((char *)v450 + 56);
      v462 = *(__int128 *)((char *)v450 + 72);
      v463 = *(__int128 *)((char *)v450 + 104);
      *(_OWORD *)(v449 + 88) = *(__int128 *)((char *)v450 + 88);
      *(_OWORD *)(v449 + 104) = v463;
      *(_OWORD *)(v449 + 56) = v461;
      *(_OWORD *)(v449 + 72) = v462;
      v464 = *(__int128 *)((char *)v450 + 120);
      v465 = *(__int128 *)((char *)v450 + 136);
      v466 = *(__int128 *)((char *)v450 + 168);
      *(_OWORD *)(v449 + 152) = *(__int128 *)((char *)v450 + 152);
      *(_OWORD *)(v449 + 168) = v466;
      *(_OWORD *)(v449 + 120) = v464;
      *(_OWORD *)(v449 + 136) = v465;
      v467 = *(__int128 *)((char *)v450 + 184);
      v468 = *(__int128 *)((char *)v450 + 200);
      v469 = *(__int128 *)((char *)v450 + 232);
      *(_OWORD *)(v449 + 216) = *(__int128 *)((char *)v450 + 216);
      *(_OWORD *)(v449 + 232) = v469;
      *(_OWORD *)(v449 + 184) = v467;
      *(_OWORD *)(v449 + 200) = v468;
    }
  }
  else
  {
    v494 = *v450;
    v495 = v450[1];
    v496 = v450[3];
    *(_OWORD *)(v449 + 32) = v450[2];
    *(_OWORD *)(v449 + 48) = v496;
    *(_OWORD *)v449 = v494;
    *(_OWORD *)(v449 + 16) = v495;
    v497 = v450[4];
    v498 = v450[5];
    v499 = v450[7];
    *(_OWORD *)(v449 + 96) = v450[6];
    *(_OWORD *)(v449 + 112) = v499;
    *(_OWORD *)(v449 + 64) = v497;
    *(_OWORD *)(v449 + 80) = v498;
    v500 = v450[8];
    v501 = v450[9];
    v502 = v450[11];
    *(_OWORD *)(v449 + 160) = v450[10];
    *(_OWORD *)(v449 + 176) = v502;
    *(_OWORD *)(v449 + 128) = v500;
    *(_OWORD *)(v449 + 144) = v501;
    v503 = v450[12];
    v504 = v450[13];
    v505 = v450[14];
    *(_QWORD *)(v449 + 240) = *((_QWORD *)v450 + 30);
    *(_OWORD *)(v449 + 208) = v504;
    *(_OWORD *)(v449 + 224) = v505;
    *(_OWORD *)(v449 + 192) = v503;
  }
  v525 = *((_QWORD *)v450 + 31);
  v526 = *((_QWORD *)v450 + 32);
  v527 = *((_QWORD *)v450 + 33);
  v528 = *((_QWORD *)v450 + 34);
  v529 = *((_QWORD *)v450 + 35);
  v530 = *((_QWORD *)v450 + 36);
  v532 = *((_QWORD *)v450 + 37);
  v531 = *((_QWORD *)v450 + 38);
  v684 = *((_QWORD *)v450 + 40);
  v700 = *((_QWORD *)v450 + 41);
  v716 = *((_QWORD *)v450 + 42);
  v732 = *((_QWORD *)v450 + 43);
  v748 = *((_QWORD *)v450 + 44);
  v764 = *((_QWORD *)v450 + 45);
  v780 = *((_QWORD *)v450 + 46);
  v796 = *((_QWORD *)v450 + 47);
  v812 = *((_QWORD *)v450 + 48);
  v828 = *((_QWORD *)v450 + 49);
  v844 = *((_QWORD *)v450 + 50);
  v860 = *((_QWORD *)v450 + 51);
  v876 = *((_QWORD *)v450 + 52);
  v892 = *((_QWORD *)v450 + 53);
  v908 = *((_QWORD *)v450 + 54);
  v533 = *((_QWORD *)v450 + 39);
  v534 = v525;
  v535 = v526;
  v536 = v527;
  v537 = v528;
  v538 = v531;
  sub_1AD00FEAC(v525, v526, v527, v528, v529, v530, v532, v531, v533, v684, v700, v716, v732, v748, v764, v780, v796, v812, v828,
    v844,
    v860,
    v876,
    v892,
    v908);
  *(_QWORD *)(v449 + 248) = v534;
  *(_QWORD *)(v449 + 256) = v535;
  *(_QWORD *)(v449 + 264) = v536;
  *(_QWORD *)(v449 + 272) = v537;
  *(_QWORD *)(v449 + 280) = v529;
  *(_QWORD *)(v449 + 288) = v530;
  *(_QWORD *)(v449 + 296) = v532;
  *(_QWORD *)(v449 + 304) = v538;
  *(_QWORD *)(v449 + 312) = v533;
  *(_QWORD *)(v449 + 320) = v684;
  *(_QWORD *)(v449 + 328) = v700;
  *(_QWORD *)(v449 + 336) = v716;
  *(_QWORD *)(v449 + 344) = v732;
  *(_QWORD *)(v449 + 352) = v748;
  *(_QWORD *)(v449 + 360) = v764;
  *(_QWORD *)(v449 + 368) = v780;
  *(_QWORD *)(v449 + 376) = v796;
  *(_QWORD *)(v449 + 384) = v812;
  *(_QWORD *)(v449 + 392) = v828;
  *(_QWORD *)(v449 + 400) = v844;
  *(_QWORD *)(v449 + 408) = v860;
  *(_QWORD *)(v449 + 416) = v876;
  *(_QWORD *)(v449 + 424) = v892;
  *(_QWORD *)(v449 + 432) = v908;
LABEL_239:
  a1 = (uint64_t)v913;
  a3 = v914;
  a2 = v915;
LABEL_240:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v627 = a3[10];
  v628 = a1 + v627;
  v629 = (uint64_t)a2 + v627;
  v630 = *(_QWORD *)(a1 + v627 + 8);
  v631 = *(_QWORD *)((char *)a2 + v627 + 8);
  if (v630)
  {
    if (v631)
    {
      *(_QWORD *)v628 = *(_QWORD *)v629;
      *(_QWORD *)(v628 + 8) = *(_QWORD *)(v629 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v632 = *(_QWORD *)(v629 + 24);
      *(_QWORD *)(v628 + 16) = *(_QWORD *)(v629 + 16);
      *(_QWORD *)(v628 + 24) = v632;
      swift_retain();
      swift_release();
      v633 = *(_QWORD *)(v629 + 32);
      *(_BYTE *)(v628 + 40) = *(_BYTE *)(v629 + 40);
      *(_QWORD *)(v628 + 32) = v633;
      v634 = *(_QWORD *)(v629 + 56);
      *(_QWORD *)(v628 + 48) = *(_QWORD *)(v629 + 48);
      *(_QWORD *)(v628 + 56) = v634;
      swift_retain();
      swift_release();
      v635 = *(_QWORD *)(v629 + 64);
      *(_BYTE *)(v628 + 72) = *(_BYTE *)(v629 + 72);
      *(_QWORD *)(v628 + 64) = v635;
      *(_QWORD *)(v628 + 80) = *(_QWORD *)(v629 + 80);
      *(_QWORD *)(v628 + 88) = *(_QWORD *)(v629 + 88);
      *(_QWORD *)(v628 + 96) = *(_QWORD *)(v629 + 96);
      *(_QWORD *)(v628 + 104) = *(_QWORD *)(v629 + 104);
      *(_BYTE *)(v628 + 112) = *(_BYTE *)(v629 + 112);
      *(_BYTE *)(v628 + 113) = *(_BYTE *)(v629 + 113);
      v636 = *(_OWORD *)(v629 + 120);
      v637 = *(_OWORD *)(v629 + 136);
      *(_BYTE *)(v628 + 152) = *(_BYTE *)(v629 + 152);
      *(_OWORD *)(v628 + 136) = v637;
      *(_OWORD *)(v628 + 120) = v636;
    }
    else
    {
      sub_1AD406774(v628);
      v645 = *(_OWORD *)(v629 + 16);
      *(_OWORD *)v628 = *(_OWORD *)v629;
      *(_OWORD *)(v628 + 16) = v645;
      v646 = *(_OWORD *)(v629 + 80);
      v648 = *(_OWORD *)(v629 + 32);
      v647 = *(_OWORD *)(v629 + 48);
      *(_OWORD *)(v628 + 64) = *(_OWORD *)(v629 + 64);
      *(_OWORD *)(v628 + 80) = v646;
      *(_OWORD *)(v628 + 32) = v648;
      *(_OWORD *)(v628 + 48) = v647;
      v650 = *(_OWORD *)(v629 + 112);
      v649 = *(_OWORD *)(v629 + 128);
      v651 = *(_OWORD *)(v629 + 96);
      *(_OWORD *)(v628 + 137) = *(_OWORD *)(v629 + 137);
      *(_OWORD *)(v628 + 112) = v650;
      *(_OWORD *)(v628 + 128) = v649;
      *(_OWORD *)(v628 + 96) = v651;
    }
  }
  else if (v631)
  {
    *(_QWORD *)v628 = *(_QWORD *)v629;
    *(_QWORD *)(v628 + 8) = *(_QWORD *)(v629 + 8);
    v638 = *(_QWORD *)(v629 + 24);
    *(_QWORD *)(v628 + 16) = *(_QWORD *)(v629 + 16);
    *(_QWORD *)(v628 + 24) = v638;
    v639 = *(_QWORD *)(v629 + 32);
    *(_BYTE *)(v628 + 40) = *(_BYTE *)(v629 + 40);
    *(_QWORD *)(v628 + 32) = v639;
    v640 = *(_QWORD *)(v629 + 56);
    *(_QWORD *)(v628 + 48) = *(_QWORD *)(v629 + 48);
    *(_QWORD *)(v628 + 56) = v640;
    v641 = *(_QWORD *)(v629 + 64);
    *(_BYTE *)(v628 + 72) = *(_BYTE *)(v629 + 72);
    *(_QWORD *)(v628 + 64) = v641;
    v642 = *(_OWORD *)(v629 + 96);
    *(_OWORD *)(v628 + 80) = *(_OWORD *)(v629 + 80);
    *(_OWORD *)(v628 + 96) = v642;
    *(_BYTE *)(v628 + 112) = *(_BYTE *)(v629 + 112);
    *(_BYTE *)(v628 + 113) = *(_BYTE *)(v629 + 113);
    v643 = *(_OWORD *)(v629 + 120);
    v644 = *(_OWORD *)(v629 + 136);
    *(_BYTE *)(v628 + 152) = *(_BYTE *)(v629 + 152);
    *(_OWORD *)(v628 + 136) = v644;
    *(_OWORD *)(v628 + 120) = v643;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v652 = *(_OWORD *)(v629 + 16);
    *(_OWORD *)v628 = *(_OWORD *)v629;
    *(_OWORD *)(v628 + 16) = v652;
    v653 = *(_OWORD *)(v629 + 32);
    v654 = *(_OWORD *)(v629 + 48);
    v655 = *(_OWORD *)(v629 + 80);
    *(_OWORD *)(v628 + 64) = *(_OWORD *)(v629 + 64);
    *(_OWORD *)(v628 + 80) = v655;
    *(_OWORD *)(v628 + 32) = v653;
    *(_OWORD *)(v628 + 48) = v654;
    v656 = *(_OWORD *)(v629 + 96);
    v657 = *(_OWORD *)(v629 + 112);
    v658 = *(_OWORD *)(v629 + 128);
    *(_OWORD *)(v628 + 137) = *(_OWORD *)(v629 + 137);
    *(_OWORD *)(v628 + 112) = v657;
    *(_OWORD *)(v628 + 128) = v658;
    *(_OWORD *)(v628 + 96) = v656;
  }
  return a1;
}

_OWORD *sub_1AD40EF10(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = (int *)type metadata accessor for PosterArchive();
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[11];
    a1[10] = a2[10];
    a1[11] = v9;
    a1[12] = a2[12];
    *(_OWORD *)((char *)a1 + 202) = *(_OWORD *)((char *)a2 + 202);
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a2[3];
    a1[2] = a2[2];
    a1[3] = v12;
    v13 = a2[5];
    a1[4] = a2[4];
    a1[5] = v13;
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    memcpy(a1 + 14, a2 + 14, 0x221uLL);
    v15 = v6[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_1AD63B084();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v19 = a3[5];
  v20 = a3[6];
  v21 = (_OWORD *)((char *)a1 + v19);
  v22 = (_OWORD *)((char *)a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  memcpy((char *)a1 + v20, (char *)a2 + v20, 0x1B8uLL);
  v24 = a3[7];
  v25 = a3[8];
  v26 = (_OWORD *)((char *)a1 + v24);
  v27 = (_OWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  memcpy((char *)a1 + v25, (char *)a2 + v25, 0x1B8uLL);
  v29 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v30 = (_OWORD *)((char *)a1 + v29);
  v31 = (_OWORD *)((char *)a2 + v29);
  v32 = v31[7];
  v30[6] = v31[6];
  v30[7] = v32;
  v30[8] = v31[8];
  *(_OWORD *)((char *)v30 + 137) = *(_OWORD *)((char *)v31 + 137);
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  v34 = v31[5];
  v30[4] = v31[4];
  v30[5] = v34;
  v35 = v31[1];
  *v30 = *v31;
  v30[1] = v35;
  return a1;
}

_OWORD *sub_1AD40F0D4(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  BOOL v30;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD *v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;

  v6 = (int *)type metadata accessor for PosterArchive();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = a2[11];
      a1[10] = a2[10];
      a1[11] = v11;
      a1[12] = a2[12];
      *(_OWORD *)((char *)a1 + 202) = *(_OWORD *)((char *)a2 + 202);
      v12 = a2[7];
      a1[6] = a2[6];
      a1[7] = v12;
      v13 = a2[9];
      a1[8] = a2[8];
      a1[9] = v13;
      v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      v15 = a2[5];
      a1[4] = a2[4];
      a1[5] = v15;
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      memcpy(a1 + 14, a2 + 14, 0x221uLL);
      v17 = v6[6];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_1AD63B084();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1AD066230((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PosterArchive);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  if (!*((_QWORD *)a1 + 23))
    goto LABEL_85;
  if (!*((_QWORD *)a2 + 23))
  {
    sub_1AD3AD2D8(a1);
LABEL_85:
    v172 = a2[11];
    a1[10] = a2[10];
    a1[11] = v172;
    a1[12] = a2[12];
    *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
    v173 = a2[7];
    a1[6] = a2[6];
    a1[7] = v173;
    v174 = a2[9];
    a1[8] = a2[8];
    a1[9] = v174;
    v175 = a2[3];
    a1[2] = a2[2];
    a1[3] = v175;
    v176 = a2[5];
    a1[4] = a2[4];
    a1[5] = v176;
    v177 = a2[1];
    *a1 = *a2;
    a1[1] = v177;
    goto LABEL_99;
  }
  *a1 = *a2;
  *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  if (*((_QWORD *)a1 + 9) == 1)
  {
LABEL_44:
    v55 = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a1 + 40) = v55;
    *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
    goto LABEL_89;
  }
  v54 = *((_QWORD *)a2 + 9);
  if (v54 == 1)
  {
    sub_1AD3AD280((uint64_t)a1 + 24);
    goto LABEL_44;
  }
  *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a1 + 9) = v54;
  swift_bridgeObjectRelease();
LABEL_89:
  if (*((_QWORD *)a1 + 11) != 1)
  {
    v204 = *((_QWORD *)a2 + 11);
    if (v204 != 1)
    {
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      *((_QWORD *)a1 + 11) = v204;
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRelease();
      v207 = a2[9];
      a1[8] = a2[8];
      a1[9] = v207;
      goto LABEL_94;
    }
    sub_1AD3AD2A8((uint64_t)(a1 + 5));
  }
  v205 = a2[8];
  a1[7] = a2[7];
  a1[8] = v205;
  a1[9] = a2[9];
  v206 = a2[6];
  a1[5] = a2[5];
  a1[6] = v206;
LABEL_94:
  *((_BYTE *)a1 + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a1 + 161) = *((_BYTE *)a2 + 161);
  *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
  *((_BYTE *)a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)((char *)a2 + 184);
  swift_release();
  v208 = (_QWORD *)a2 + 25;
  if (*((_QWORD *)a1 + 26) != 1)
  {
    v209 = *((_QWORD *)a2 + 26);
    if (v209 != 1)
    {
      *((_QWORD *)a1 + 25) = *v208;
      *((_QWORD *)a1 + 26) = v209;
      swift_bridgeObjectRelease();
      goto LABEL_99;
    }
    sub_1AD009758((uint64_t)a1 + 200, &qword_1ED2E3198);
  }
  *(_OWORD *)((char *)a1 + 200) = *(_OWORD *)v208;
LABEL_99:
  *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
  if (a1 != a2)
  {
    sub_1AD28B36C((uint64_t)(a1 + 14));
    memcpy(a1 + 14, a2 + 14, 0x221uLL);
  }
  v210 = v6[6];
  v211 = (char *)a1 + v210;
  v212 = (char *)a2 + v210;
  v213 = sub_1AD63B084();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 40))(v211, v212, v213);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
LABEL_7:
  v22 = a3[5];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  swift_release();
  v25 = v24 + 16;
  if (*((_QWORD *)v23 + 3) != 1)
  {
    v26 = *((_QWORD *)v24 + 3);
    if (v26 != 1)
    {
      *((_QWORD *)v23 + 2) = *v25;
      *((_QWORD *)v23 + 3) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1AD009758((uint64_t)(v23 + 16), &qword_1ED2E3198);
  }
  *((_OWORD *)v23 + 1) = *(_OWORD *)v25;
LABEL_12:
  v27 = a3[6];
  v28 = (uint64_t)a1 + v27;
  v29 = (_OWORD *)((char *)a2 + v27);
  if (*(_QWORD *)((char *)a1 + v27 + 272) >> 1 == 0xFFFFFFFFLL)
  {
    v30 = (*(_QWORD *)(v28 + 304) | *(_QWORD *)(v28 + 288)) <= 1
       && (*(_QWORD *)(v28 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v28 + 320) & 0xFFFFFFFFFFFF00FELL) == 0;
    if (v30 && (*(_QWORD *)(v28 + 384) | *(_QWORD *)(v28 + 368)) < 2uLL)
      goto LABEL_26;
  }
  if (*((_QWORD *)v29 + 34) >> 1 == 0xFFFFFFFFLL
    && (*((_QWORD *)v29 + 38) | *((_QWORD *)v29 + 36)) <= 1
    && !(v29[22] & 0xFFFFFFFFFFFFFEFELL | v29[20] & 0xFFFFFFFFFFFF00FELL)
    && (*((_QWORD *)v29 + 48) | *((_QWORD *)v29 + 46)) < 2)
  {
    sub_1AD406748((_QWORD *)v28);
LABEL_26:
    memcpy((void *)v28, v29, 0x1B8uLL);
    goto LABEL_48;
  }
  if (!*(_QWORD *)(v28 + 24))
    goto LABEL_46;
  if (!*((_QWORD *)v29 + 3))
  {
    sub_1AD046A30((_QWORD *)v28);
LABEL_46:
    v56 = v29[13];
    *(_OWORD *)(v28 + 192) = v29[12];
    *(_OWORD *)(v28 + 208) = v56;
    *(_OWORD *)(v28 + 224) = v29[14];
    *(_QWORD *)(v28 + 240) = *((_QWORD *)v29 + 30);
    v57 = v29[9];
    *(_OWORD *)(v28 + 128) = v29[8];
    *(_OWORD *)(v28 + 144) = v57;
    v58 = v29[11];
    *(_OWORD *)(v28 + 160) = v29[10];
    *(_OWORD *)(v28 + 176) = v58;
    v59 = v29[5];
    *(_OWORD *)(v28 + 64) = v29[4];
    *(_OWORD *)(v28 + 80) = v59;
    v60 = v29[7];
    *(_OWORD *)(v28 + 96) = v29[6];
    *(_OWORD *)(v28 + 112) = v60;
    v61 = v29[1];
    *(_OWORD *)v28 = *v29;
    *(_OWORD *)(v28 + 16) = v61;
    v62 = v29[3];
    *(_OWORD *)(v28 + 32) = v29[2];
    *(_OWORD *)(v28 + 48) = v62;
    goto LABEL_47;
  }
  __swift_destroy_boxed_opaque_existential_1(v28);
  v32 = v29[1];
  *(_OWORD *)v28 = *v29;
  *(_OWORD *)(v28 + 16) = v32;
  v33 = *((_QWORD *)v29 + 5);
  *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 4);
  *(_QWORD *)(v28 + 40) = v33;
  *(_BYTE *)(v28 + 48) = *((_BYTE *)v29 + 48);
  v34 = *(_QWORD *)(v28 + 80);
  v35 = *(_QWORD *)(v28 + 96);
  v36 = *(_QWORD *)(v28 + 112);
  v37 = *(_QWORD *)(v28 + 128);
  v38 = *(_QWORD *)(v28 + 160);
  v39 = *(_QWORD *)(v28 + 176);
  v40 = *(_QWORD *)(v28 + 192);
  v41 = *((_QWORD *)v29 + 10);
  v42 = *((_QWORD *)v29 + 12);
  v43 = *((_QWORD *)v29 + 14);
  v44 = *((_QWORD *)v29 + 16);
  v45 = *((_QWORD *)v29 + 20);
  v46 = *((_QWORD *)v29 + 22);
  v47 = *((_QWORD *)v29 + 24);
  if (v34 >> 1 != 0xFFFFFFFF
    || (v36 | (unint64_t)v35) > 1
    || v38 & 0xFFFFFFFFFFFFFEFELL | v37 & 0xFFFFFFFFFFFF00FELL
    || (v40 | v39) >= 2)
  {
    if (v41 >> 1 != 0xFFFFFFFF
      || (v43 | v42) > 1
      || v45 & 0xFFFFFFFFFFFFFEFELL | v44 & 0xFFFFFFFFFFFF00FELL
      || (v47 | v46) >= 2)
    {
      v178 = *((_QWORD *)v29 + 9);
      v179 = *((_QWORD *)v29 + 11);
      v180 = *((_QWORD *)v29 + 13);
      v181 = *((_QWORD *)v29 + 15);
      v182 = *((_QWORD *)v29 + 19);
      v183 = *((_QWORD *)v29 + 21);
      v184 = *((_QWORD *)v29 + 23);
      v222 = *(_QWORD *)(v28 + 64);
      v224 = *(_QWORD *)(v28 + 56);
      v226 = *(_QWORD *)(v28 + 88);
      v228 = *(_QWORD *)(v28 + 104);
      v218 = *(_QWORD *)(v28 + 120);
      v220 = *(_QWORD *)(v28 + 72);
      v185 = *(_OWORD *)(v28 + 136);
      v214 = *(_QWORD *)(v28 + 168);
      v216 = *(_QWORD *)(v28 + 152);
      v186 = *(_QWORD *)(v28 + 184);
      v187 = *(_OWORD *)(v28 + 200);
      v188 = *(_OWORD *)(v28 + 216);
      v190 = *(_QWORD *)(v28 + 232);
      v189 = *(_QWORD *)(v28 + 240);
      *(_OWORD *)(v28 + 56) = *(_OWORD *)((char *)v29 + 56);
      *(_QWORD *)(v28 + 72) = v178;
      *(_QWORD *)(v28 + 80) = v41;
      *(_QWORD *)(v28 + 88) = v179;
      *(_QWORD *)(v28 + 96) = v42;
      *(_QWORD *)(v28 + 104) = v180;
      *(_QWORD *)(v28 + 112) = v43;
      *(_QWORD *)(v28 + 120) = v181;
      *(_QWORD *)(v28 + 128) = v44;
      *(_OWORD *)(v28 + 136) = *(_OWORD *)((char *)v29 + 136);
      *(_QWORD *)(v28 + 152) = v182;
      *(_QWORD *)(v28 + 160) = v45;
      *(_QWORD *)(v28 + 168) = v183;
      *(_QWORD *)(v28 + 176) = v46;
      *(_QWORD *)(v28 + 184) = v184;
      *(_QWORD *)(v28 + 192) = v47;
      *(_OWORD *)(v28 + 200) = *(_OWORD *)((char *)v29 + 200);
      *(_OWORD *)(v28 + 216) = *(_OWORD *)((char *)v29 + 216);
      *(_OWORD *)(v28 + 232) = *(_OWORD *)((char *)v29 + 232);
      sub_1AD00E8B0(v224, v222, v220, v34, v226, v35, v228, v36, v218, v37, v185, *((uint64_t *)&v185 + 1), v216, v38, v214, v39, v186, v40, v187,
        *((uint64_t *)&v187 + 1),
        v188,
        *((uint64_t *)&v188 + 1),
        v190,
        v189);
      goto LABEL_47;
    }
    sub_1AD148B34(v28 + 56);
  }
  v48 = *(_OWORD *)((char *)v29 + 200);
  *(_OWORD *)(v28 + 184) = *(_OWORD *)((char *)v29 + 184);
  *(_OWORD *)(v28 + 200) = v48;
  v49 = *(_OWORD *)((char *)v29 + 232);
  *(_OWORD *)(v28 + 216) = *(_OWORD *)((char *)v29 + 216);
  *(_OWORD *)(v28 + 232) = v49;
  v50 = *(_OWORD *)((char *)v29 + 136);
  *(_OWORD *)(v28 + 120) = *(_OWORD *)((char *)v29 + 120);
  *(_OWORD *)(v28 + 136) = v50;
  v51 = *(_OWORD *)((char *)v29 + 168);
  *(_OWORD *)(v28 + 152) = *(_OWORD *)((char *)v29 + 152);
  *(_OWORD *)(v28 + 168) = v51;
  v52 = *(_OWORD *)((char *)v29 + 72);
  *(_OWORD *)(v28 + 56) = *(_OWORD *)((char *)v29 + 56);
  *(_OWORD *)(v28 + 72) = v52;
  v53 = *(_OWORD *)((char *)v29 + 104);
  *(_OWORD *)(v28 + 88) = *(_OWORD *)((char *)v29 + 88);
  *(_OWORD *)(v28 + 104) = v53;
LABEL_47:
  v63 = *(_QWORD *)(v28 + 248);
  v64 = *(_QWORD *)(v28 + 256);
  v65 = v28 + 248;
  v66 = *(_QWORD *)(v65 + 16);
  v67 = *(_QWORD *)(v65 + 24);
  v68 = *(_QWORD *)(v65 + 32);
  v69 = *(_QWORD *)(v65 + 40);
  v70 = *(_QWORD *)(v65 + 48);
  v71 = *(_QWORD *)(v65 + 56);
  v72 = *(_OWORD *)(v65 + 64);
  v73 = *(_OWORD *)(v65 + 80);
  v74 = *(_OWORD *)(v65 + 96);
  v75 = *(_OWORD *)(v65 + 112);
  v76 = *(_OWORD *)(v65 + 128);
  v77 = *(_OWORD *)(v65 + 144);
  v78 = *(_OWORD *)(v65 + 160);
  v80 = *(_OWORD *)((char *)v29 + 248);
  v79 = (_OWORD *)((char *)v29 + 248);
  v81 = *(_QWORD *)(v65 + 176);
  v82 = *(_QWORD *)(v65 + 184);
  v83 = v79[1];
  v84 = v79[2];
  *(_OWORD *)v65 = v80;
  *(_OWORD *)(v65 + 16) = v83;
  v85 = v79[3];
  v86 = v79[4];
  *(_OWORD *)(v65 + 32) = v84;
  *(_OWORD *)(v65 + 48) = v85;
  v87 = v79[5];
  v88 = v79[6];
  *(_OWORD *)(v65 + 64) = v86;
  *(_OWORD *)(v65 + 80) = v87;
  v89 = v79[7];
  v90 = v79[8];
  *(_OWORD *)(v65 + 96) = v88;
  *(_OWORD *)(v65 + 112) = v89;
  v91 = v79[9];
  v92 = v79[10];
  *(_OWORD *)(v65 + 128) = v90;
  *(_OWORD *)(v65 + 144) = v91;
  v93 = v79[11];
  *(_OWORD *)(v65 + 160) = v92;
  *(_OWORD *)(v65 + 176) = v93;
  sub_1AD00E8B0(v63, v64, v66, v67, v68, v69, v70, v71, v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76, *((unint64_t *)&v76 + 1), v77,
    *((uint64_t *)&v77 + 1),
    v78,
    *((uint64_t *)&v78 + 1),
    v81,
    v82);
LABEL_48:
  v94 = a3[7];
  v95 = (char *)a1 + v94;
  v96 = (char *)a2 + v94;
  *(_OWORD *)((char *)a1 + v94) = *(_OWORD *)((char *)a2 + v94);
  swift_release();
  v97 = v96 + 16;
  if (*((_QWORD *)v95 + 3) != 1)
  {
    v98 = *((_QWORD *)v96 + 3);
    if (v98 != 1)
    {
      *((_QWORD *)v95 + 2) = *v97;
      *((_QWORD *)v95 + 3) = v98;
      swift_bridgeObjectRelease();
      goto LABEL_53;
    }
    sub_1AD009758((uint64_t)(v95 + 16), &qword_1ED2E3198);
  }
  *((_OWORD *)v95 + 1) = *(_OWORD *)v97;
LABEL_53:
  v99 = a3[8];
  v100 = (uint64_t)a1 + v99;
  v101 = (_OWORD *)((char *)a2 + v99);
  if (*(_QWORD *)((char *)a1 + v99 + 272) >> 1 == 0xFFFFFFFFLL
    && (*(_QWORD *)(v100 + 304) | *(_QWORD *)(v100 + 288)) <= 1
    && !(*(_QWORD *)(v100 + 352) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(v100 + 320) & 0xFFFFFFFFFFFF00FELL)
    && (*(_QWORD *)(v100 + 384) | *(_QWORD *)(v100 + 368)) < 2)
  {
    goto LABEL_62;
  }
  if (*((_QWORD *)v101 + 34) >> 1 == 0xFFFFFFFFLL
    && (*((_QWORD *)v101 + 38) | *((_QWORD *)v101 + 36)) <= 1
    && !(v101[22] & 0xFFFFFFFFFFFFFEFELL | v101[20] & 0xFFFFFFFFFFFF00FELL)
    && (*((_QWORD *)v101 + 48) | *((_QWORD *)v101 + 46)) < 2)
  {
    sub_1AD406748((_QWORD *)v100);
LABEL_62:
    memcpy((void *)v100, v101, 0x1B8uLL);
    goto LABEL_78;
  }
  if (!*(_QWORD *)(v100 + 24))
    goto LABEL_76;
  if (!*((_QWORD *)v101 + 3))
  {
    sub_1AD046A30((_QWORD *)v100);
LABEL_76:
    v124 = v101[13];
    *(_OWORD *)(v100 + 192) = v101[12];
    *(_OWORD *)(v100 + 208) = v124;
    *(_OWORD *)(v100 + 224) = v101[14];
    *(_QWORD *)(v100 + 240) = *((_QWORD *)v101 + 30);
    v125 = v101[9];
    *(_OWORD *)(v100 + 128) = v101[8];
    *(_OWORD *)(v100 + 144) = v125;
    v126 = v101[11];
    *(_OWORD *)(v100 + 160) = v101[10];
    *(_OWORD *)(v100 + 176) = v126;
    v127 = v101[5];
    *(_OWORD *)(v100 + 64) = v101[4];
    *(_OWORD *)(v100 + 80) = v127;
    v128 = v101[7];
    *(_OWORD *)(v100 + 96) = v101[6];
    *(_OWORD *)(v100 + 112) = v128;
    v129 = v101[1];
    *(_OWORD *)v100 = *v101;
    *(_OWORD *)(v100 + 16) = v129;
    v130 = v101[3];
    *(_OWORD *)(v100 + 32) = v101[2];
    *(_OWORD *)(v100 + 48) = v130;
    goto LABEL_77;
  }
  __swift_destroy_boxed_opaque_existential_1(v100);
  v102 = v101[1];
  *(_OWORD *)v100 = *v101;
  *(_OWORD *)(v100 + 16) = v102;
  v103 = *((_QWORD *)v101 + 5);
  *(_QWORD *)(v100 + 32) = *((_QWORD *)v101 + 4);
  *(_QWORD *)(v100 + 40) = v103;
  *(_BYTE *)(v100 + 48) = *((_BYTE *)v101 + 48);
  v104 = *(_QWORD *)(v100 + 80);
  v105 = *(_QWORD *)(v100 + 96);
  v106 = *(_QWORD *)(v100 + 112);
  v107 = *(_QWORD *)(v100 + 128);
  v108 = *(_QWORD *)(v100 + 160);
  v109 = *(_QWORD *)(v100 + 176);
  v110 = *(_QWORD *)(v100 + 192);
  v111 = *((_QWORD *)v101 + 10);
  v112 = *((_QWORD *)v101 + 12);
  v113 = *((_QWORD *)v101 + 14);
  v114 = *((_QWORD *)v101 + 16);
  v115 = *((_QWORD *)v101 + 20);
  v116 = *((_QWORD *)v101 + 22);
  v117 = *((_QWORD *)v101 + 24);
  if (v104 >> 1 != 0xFFFFFFFF
    || (v106 | (unint64_t)v105) > 1
    || v108 & 0xFFFFFFFFFFFFFEFELL | v107 & 0xFFFFFFFFFFFF00FELL
    || (v110 | v109) >= 2)
  {
    if (v111 >> 1 != 0xFFFFFFFF
      || (v113 | v112) > 1
      || v115 & 0xFFFFFFFFFFFFFEFELL | v114 & 0xFFFFFFFFFFFF00FELL
      || (v117 | v116) >= 2)
    {
      v191 = *((_QWORD *)v101 + 9);
      v192 = *((_QWORD *)v101 + 11);
      v193 = *((_QWORD *)v101 + 13);
      v194 = *((_QWORD *)v101 + 15);
      v195 = *((_QWORD *)v101 + 19);
      v196 = *((_QWORD *)v101 + 21);
      v197 = *((_QWORD *)v101 + 23);
      v223 = *(_QWORD *)(v100 + 64);
      v225 = *(_QWORD *)(v100 + 56);
      v227 = *(_QWORD *)(v100 + 88);
      v229 = *(_QWORD *)(v100 + 104);
      v219 = *(_QWORD *)(v100 + 120);
      v221 = *(_QWORD *)(v100 + 72);
      v198 = *(_OWORD *)(v100 + 136);
      v215 = *(_QWORD *)(v100 + 168);
      v217 = *(_QWORD *)(v100 + 152);
      v199 = *(_QWORD *)(v100 + 184);
      v200 = *(_OWORD *)(v100 + 200);
      v201 = *(_OWORD *)(v100 + 216);
      v203 = *(_QWORD *)(v100 + 232);
      v202 = *(_QWORD *)(v100 + 240);
      *(_OWORD *)(v100 + 56) = *(_OWORD *)((char *)v101 + 56);
      *(_QWORD *)(v100 + 72) = v191;
      *(_QWORD *)(v100 + 80) = v111;
      *(_QWORD *)(v100 + 88) = v192;
      *(_QWORD *)(v100 + 96) = v112;
      *(_QWORD *)(v100 + 104) = v193;
      *(_QWORD *)(v100 + 112) = v113;
      *(_QWORD *)(v100 + 120) = v194;
      *(_QWORD *)(v100 + 128) = v114;
      *(_OWORD *)(v100 + 136) = *(_OWORD *)((char *)v101 + 136);
      *(_QWORD *)(v100 + 152) = v195;
      *(_QWORD *)(v100 + 160) = v115;
      *(_QWORD *)(v100 + 168) = v196;
      *(_QWORD *)(v100 + 176) = v116;
      *(_QWORD *)(v100 + 184) = v197;
      *(_QWORD *)(v100 + 192) = v117;
      *(_OWORD *)(v100 + 200) = *(_OWORD *)((char *)v101 + 200);
      *(_OWORD *)(v100 + 216) = *(_OWORD *)((char *)v101 + 216);
      *(_OWORD *)(v100 + 232) = *(_OWORD *)((char *)v101 + 232);
      sub_1AD00E8B0(v225, v223, v221, v104, v227, v105, v229, v106, v219, v107, v198, *((uint64_t *)&v198 + 1), v217, v108, v215, v109, v199, v110, v200,
        *((uint64_t *)&v200 + 1),
        v201,
        *((uint64_t *)&v201 + 1),
        v203,
        v202);
      goto LABEL_77;
    }
    sub_1AD148B34(v100 + 56);
  }
  v118 = *(_OWORD *)((char *)v101 + 200);
  *(_OWORD *)(v100 + 184) = *(_OWORD *)((char *)v101 + 184);
  *(_OWORD *)(v100 + 200) = v118;
  v119 = *(_OWORD *)((char *)v101 + 232);
  *(_OWORD *)(v100 + 216) = *(_OWORD *)((char *)v101 + 216);
  *(_OWORD *)(v100 + 232) = v119;
  v120 = *(_OWORD *)((char *)v101 + 136);
  *(_OWORD *)(v100 + 120) = *(_OWORD *)((char *)v101 + 120);
  *(_OWORD *)(v100 + 136) = v120;
  v121 = *(_OWORD *)((char *)v101 + 168);
  *(_OWORD *)(v100 + 152) = *(_OWORD *)((char *)v101 + 152);
  *(_OWORD *)(v100 + 168) = v121;
  v122 = *(_OWORD *)((char *)v101 + 72);
  *(_OWORD *)(v100 + 56) = *(_OWORD *)((char *)v101 + 56);
  *(_OWORD *)(v100 + 72) = v122;
  v123 = *(_OWORD *)((char *)v101 + 104);
  *(_OWORD *)(v100 + 88) = *(_OWORD *)((char *)v101 + 88);
  *(_OWORD *)(v100 + 104) = v123;
LABEL_77:
  v131 = *(_QWORD *)(v100 + 248);
  v132 = *(_QWORD *)(v100 + 256);
  v133 = v100 + 248;
  v134 = *(_QWORD *)(v133 + 16);
  v135 = *(_QWORD *)(v133 + 24);
  v136 = *(_QWORD *)(v133 + 32);
  v137 = *(_QWORD *)(v133 + 40);
  v138 = *(_QWORD *)(v133 + 48);
  v139 = *(_QWORD *)(v133 + 56);
  v140 = *(_OWORD *)(v133 + 64);
  v141 = *(_OWORD *)(v133 + 80);
  v142 = *(_OWORD *)(v133 + 96);
  v143 = *(_OWORD *)(v133 + 112);
  v144 = *(_OWORD *)(v133 + 128);
  v145 = *(_OWORD *)(v133 + 144);
  v146 = *(_OWORD *)(v133 + 160);
  v148 = *(_OWORD *)((char *)v101 + 248);
  v147 = (_OWORD *)((char *)v101 + 248);
  v149 = *(_QWORD *)(v133 + 176);
  v150 = *(_QWORD *)(v133 + 184);
  v151 = v147[1];
  v152 = v147[2];
  *(_OWORD *)v133 = v148;
  *(_OWORD *)(v133 + 16) = v151;
  v153 = v147[3];
  v154 = v147[4];
  *(_OWORD *)(v133 + 32) = v152;
  *(_OWORD *)(v133 + 48) = v153;
  v155 = v147[5];
  v156 = v147[6];
  *(_OWORD *)(v133 + 64) = v154;
  *(_OWORD *)(v133 + 80) = v155;
  v157 = v147[7];
  v158 = v147[8];
  *(_OWORD *)(v133 + 96) = v156;
  *(_OWORD *)(v133 + 112) = v157;
  v159 = v147[9];
  v160 = v147[10];
  *(_OWORD *)(v133 + 128) = v158;
  *(_OWORD *)(v133 + 144) = v159;
  v161 = v147[11];
  *(_OWORD *)(v133 + 160) = v160;
  *(_OWORD *)(v133 + 176) = v161;
  sub_1AD00E8B0(v131, v132, v134, v135, v136, v137, v138, v139, v140, *((uint64_t *)&v140 + 1), v141, *((uint64_t *)&v141 + 1), v142, *((uint64_t *)&v142 + 1), v143, *((uint64_t *)&v143 + 1), v144, *((unint64_t *)&v144 + 1), v145,
    *((uint64_t *)&v145 + 1),
    v146,
    *((uint64_t *)&v146 + 1),
    v149,
    v150);
LABEL_78:
  v162 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v163 = (char *)a1 + v162;
  v164 = (char *)a2 + v162;
  if (!*(_QWORD *)((char *)a1 + v162 + 8))
  {
LABEL_82:
    v167 = *((_OWORD *)v164 + 7);
    *((_OWORD *)v163 + 6) = *((_OWORD *)v164 + 6);
    *((_OWORD *)v163 + 7) = v167;
    *((_OWORD *)v163 + 8) = *((_OWORD *)v164 + 8);
    *(_OWORD *)(v163 + 137) = *(_OWORD *)(v164 + 137);
    v168 = *((_OWORD *)v164 + 3);
    *((_OWORD *)v163 + 2) = *((_OWORD *)v164 + 2);
    *((_OWORD *)v163 + 3) = v168;
    v169 = *((_OWORD *)v164 + 5);
    *((_OWORD *)v163 + 4) = *((_OWORD *)v164 + 4);
    *((_OWORD *)v163 + 5) = v169;
    v170 = *((_OWORD *)v164 + 1);
    *(_OWORD *)v163 = *(_OWORD *)v164;
    *((_OWORD *)v163 + 1) = v170;
    return a1;
  }
  v165 = *((_QWORD *)v164 + 1);
  if (!v165)
  {
    sub_1AD406774((uint64_t)a1 + v162);
    goto LABEL_82;
  }
  *(_QWORD *)v163 = *(_QWORD *)v164;
  *((_QWORD *)v163 + 1) = v165;
  swift_bridgeObjectRelease();
  *((_OWORD *)v163 + 1) = *((_OWORD *)v164 + 1);
  swift_release();
  *((_QWORD *)v163 + 4) = *((_QWORD *)v164 + 4);
  v163[40] = v164[40];
  *((_OWORD *)v163 + 3) = *((_OWORD *)v164 + 3);
  swift_release();
  *((_QWORD *)v163 + 8) = *((_QWORD *)v164 + 8);
  v163[72] = v164[72];
  v166 = *((_OWORD *)v164 + 6);
  *((_OWORD *)v163 + 5) = *((_OWORD *)v164 + 5);
  *((_OWORD *)v163 + 6) = v166;
  v163[112] = v164[112];
  v163[113] = v164[113];
  *(_OWORD *)(v163 + 120) = *(_OWORD *)(v164 + 120);
  *(_OWORD *)(v163 + 136) = *(_OWORD *)(v164 + 136);
  v163[152] = v164[152];
  return a1;
}

uint64_t sub_1AD40FD58()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD40FD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1AD40FDE4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD40FDF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD3A20);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_1AD40FE6C()
{
  unint64_t v0;

  sub_1ACFFECF8(319, qword_1ED2DAAB8, (void (*)(uint64_t))type metadata accessor for PosterArchive);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeWithCopy for MessagesAppBalloon.AppIconImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 112);
    v9 = *(_QWORD *)(a2 + 192);
    if (v6 >> 1 != 0xFFFFFFFF
      || (v8 | (unint64_t)v7) > 1
      || *(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a2 + 128) & 0xFFFFFFFFFFFF00FELL
      || (v9 | *(_QWORD *)(a2 + 176)) >= 2)
    {
      v23 = *(_QWORD *)(a2 + 64);
      v24 = *(_QWORD *)(a2 + 88);
      v44 = *(_QWORD *)(a2 + 120);
      v48 = *(_QWORD *)(a2 + 136);
      v54 = *(_QWORD *)(a2 + 144);
      v56 = *(_QWORD *)(a2 + 152);
      v58 = *(_QWORD *)(a2 + 168);
      v60 = *(_QWORD *)(a2 + 184);
      v62 = *(_QWORD *)(a2 + 200);
      v64 = *(_QWORD *)(a2 + 208);
      v66 = *(_QWORD *)(a2 + 216);
      v68 = *(_QWORD *)(a2 + 224);
      v70 = *(_QWORD *)(a2 + 232);
      v72 = *(_QWORD *)(a2 + 240);
      v50 = *(_QWORD *)(a2 + 160);
      v52 = *(_QWORD *)(a2 + 176);
      v25 = *(_QWORD *)(a2 + 56);
      v43 = *(_QWORD *)(a2 + 128);
      v26 = *(_QWORD *)(a2 + 72);
      v46 = *(_QWORD *)(a2 + 192);
      v27 = *(_QWORD *)(a2 + 104);
      sub_1AD00FEAC(v25, v23, v26, v6, v24, v7, v27, v8, v44, v43, v48, v54, v56, v50, v58, v52, v60, v9, v62,
        v64,
        v66,
        v68,
        v70,
        v72);
      *(_QWORD *)(a1 + 56) = v25;
      *(_QWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 72) = v26;
      *(_QWORD *)(a1 + 80) = v6;
      *(_QWORD *)(a1 + 88) = v24;
      *(_QWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a1 + 104) = v27;
      *(_QWORD *)(a1 + 112) = v8;
      *(_QWORD *)(a1 + 120) = v44;
      *(_QWORD *)(a1 + 128) = v43;
      *(_QWORD *)(a1 + 136) = v48;
      *(_QWORD *)(a1 + 144) = v54;
      *(_QWORD *)(a1 + 152) = v56;
      *(_QWORD *)(a1 + 160) = v50;
      *(_QWORD *)(a1 + 168) = v58;
      *(_QWORD *)(a1 + 176) = v52;
      *(_QWORD *)(a1 + 184) = v60;
      *(_QWORD *)(a1 + 192) = v46;
      *(_QWORD *)(a1 + 200) = v62;
      *(_QWORD *)(a1 + 208) = v64;
      *(_QWORD *)(a1 + 216) = v66;
      *(_QWORD *)(a1 + 224) = v68;
      *(_QWORD *)(a1 + 232) = v70;
      *(_QWORD *)(a1 + 240) = v72;
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v10;
      v11 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v11;
      v12 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v12;
      v13 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v13;
      v14 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v14;
      v15 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v15;
    }
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v16;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v18;
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v20;
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v22;
  }
  v28 = *(_QWORD *)(a2 + 248);
  v29 = *(_QWORD *)(a2 + 256);
  v30 = *(_QWORD *)(a2 + 264);
  v31 = *(_QWORD *)(a2 + 272);
  v32 = *(_QWORD *)(a2 + 280);
  v33 = *(_QWORD *)(a2 + 288);
  v35 = *(_QWORD *)(a2 + 296);
  v34 = *(_QWORD *)(a2 + 304);
  v45 = *(_QWORD *)(a2 + 320);
  v47 = *(_QWORD *)(a2 + 328);
  v49 = *(_QWORD *)(a2 + 336);
  v51 = *(_QWORD *)(a2 + 344);
  v53 = *(_QWORD *)(a2 + 352);
  v55 = *(_QWORD *)(a2 + 360);
  v57 = *(_QWORD *)(a2 + 368);
  v59 = *(_QWORD *)(a2 + 376);
  v61 = *(_QWORD *)(a2 + 384);
  v63 = *(_QWORD *)(a2 + 392);
  v65 = *(_QWORD *)(a2 + 400);
  v67 = *(_QWORD *)(a2 + 408);
  v69 = *(_QWORD *)(a2 + 416);
  v71 = *(_QWORD *)(a2 + 424);
  v73 = *(_QWORD *)(a2 + 432);
  v36 = *(_QWORD *)(a2 + 312);
  v37 = v28;
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v34;
  sub_1AD00FEAC(v28, v29, v30, v31, v32, v33, v35, v34, v36, v45, v47, v49, v51, v53, v55, v57, v59, v61, v63,
    v65,
    v67,
    v69,
    v71,
    v73);
  *(_QWORD *)(a1 + 248) = v37;
  *(_QWORD *)(a1 + 256) = v38;
  *(_QWORD *)(a1 + 264) = v39;
  *(_QWORD *)(a1 + 272) = v40;
  *(_QWORD *)(a1 + 280) = v32;
  *(_QWORD *)(a1 + 288) = v33;
  *(_QWORD *)(a1 + 296) = v35;
  *(_QWORD *)(a1 + 304) = v41;
  *(_QWORD *)(a1 + 312) = v36;
  *(_QWORD *)(a1 + 320) = v45;
  *(_QWORD *)(a1 + 328) = v47;
  *(_QWORD *)(a1 + 336) = v49;
  *(_QWORD *)(a1 + 344) = v51;
  *(_QWORD *)(a1 + 352) = v53;
  *(_QWORD *)(a1 + 360) = v55;
  *(_QWORD *)(a1 + 368) = v57;
  *(_QWORD *)(a1 + 376) = v59;
  *(_QWORD *)(a1 + 384) = v61;
  *(_QWORD *)(a1 + 392) = v63;
  *(_QWORD *)(a1 + 400) = v65;
  *(_QWORD *)(a1 + 408) = v67;
  *(_QWORD *)(a1 + 416) = v69;
  *(_QWORD *)(a1 + 424) = v71;
  *(_QWORD *)(a1 + 432) = v73;
  return a1;
}

uint64_t assignWithCopy for MessagesAppBalloon.AppIconImage(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (!v4)
    {
      v63 = *a2;
      v64 = a2[1];
      v65 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v65;
      *(_OWORD *)a1 = v63;
      *(_OWORD *)(a1 + 16) = v64;
      v66 = a2[4];
      v67 = a2[5];
      v68 = a2[7];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v68;
      *(_OWORD *)(a1 + 64) = v66;
      *(_OWORD *)(a1 + 80) = v67;
      v69 = a2[8];
      v70 = a2[9];
      v71 = a2[11];
      *(_OWORD *)(a1 + 160) = a2[10];
      *(_OWORD *)(a1 + 176) = v71;
      *(_OWORD *)(a1 + 128) = v69;
      *(_OWORD *)(a1 + 144) = v70;
      v72 = a2[12];
      v73 = a2[13];
      v74 = a2[14];
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      *(_OWORD *)(a1 + 208) = v73;
      *(_OWORD *)(a1 + 224) = v74;
      *(_OWORD *)(a1 + 192) = v72;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    v28 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 40) = v28;
    v29 = *((_QWORD *)a2 + 10);
    v30 = *((_QWORD *)a2 + 12);
    v31 = *((_QWORD *)a2 + 14);
    v32 = *((_QWORD *)a2 + 22);
    if (v29 >> 1 == 0xFFFFFFFF
      && (v31 | (unint64_t)v30) <= 1
      && !(a2[10] & 0xFFFFFFFFFFFFFEFELL | (_QWORD)a2[8] & 0xFFFFFFFFFFFF00FELL)
      && (*((_QWORD *)a2 + 24) | (unint64_t)v32) < 2)
    {
      v33 = *(__int128 *)((char *)a2 + 56);
      v34 = *(__int128 *)((char *)a2 + 72);
      v35 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = v35;
      *(_OWORD *)(a1 + 56) = v33;
      *(_OWORD *)(a1 + 72) = v34;
      v36 = *(__int128 *)((char *)a2 + 120);
      v37 = *(__int128 *)((char *)a2 + 136);
      v38 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = v38;
      *(_OWORD *)(a1 + 120) = v36;
      *(_OWORD *)(a1 + 136) = v37;
      v39 = *(__int128 *)((char *)a2 + 184);
      v40 = *(__int128 *)((char *)a2 + 200);
      v41 = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = v41;
      *(_OWORD *)(a1 + 184) = v39;
      *(_OWORD *)(a1 + 200) = v40;
      goto LABEL_35;
    }
    v75 = *((_QWORD *)a2 + 7);
    v76 = *((_QWORD *)a2 + 11);
    v132 = *((_QWORD *)a2 + 15);
    v144 = *((_QWORD *)a2 + 17);
    v148 = *((_QWORD *)a2 + 18);
    v156 = *((_QWORD *)a2 + 19);
    v160 = *((_QWORD *)a2 + 21);
    v164 = *((_QWORD *)a2 + 23);
    v168 = *((_QWORD *)a2 + 25);
    v172 = *((_QWORD *)a2 + 26);
    v176 = *((_QWORD *)a2 + 27);
    v180 = *((_QWORD *)a2 + 28);
    v184 = *((_QWORD *)a2 + 29);
    v188 = *((_QWORD *)a2 + 30);
    v140 = *((_QWORD *)a2 + 20);
    v77 = *((_QWORD *)a2 + 8);
    v152 = *((_QWORD *)a2 + 24);
    v129 = *((_QWORD *)a2 + 16);
    v78 = *((_QWORD *)a2 + 9);
    v136 = *((_QWORD *)a2 + 22);
    v79 = *((_QWORD *)a2 + 13);
    sub_1AD00FEAC(v75, v77, v78, v29, v76, v30, v79, v31, v132, v129, v144, v148, v156, v140, v160, v32, v164, v152, v168,
      v172,
      v176,
      v180,
      v184,
      v188);
    *(_QWORD *)(a1 + 56) = v75;
    *(_QWORD *)(a1 + 64) = v77;
    *(_QWORD *)(a1 + 72) = v78;
    *(_QWORD *)(a1 + 80) = v29;
    *(_QWORD *)(a1 + 88) = v76;
    *(_QWORD *)(a1 + 96) = v30;
    *(_QWORD *)(a1 + 104) = v79;
    *(_QWORD *)(a1 + 112) = v31;
    *(_QWORD *)(a1 + 120) = v132;
    *(_QWORD *)(a1 + 128) = v129;
    *(_QWORD *)(a1 + 136) = v144;
    *(_QWORD *)(a1 + 144) = v148;
    *(_QWORD *)(a1 + 152) = v156;
    *(_QWORD *)(a1 + 160) = v140;
    *(_QWORD *)(a1 + 168) = v160;
    *(_QWORD *)(a1 + 176) = v136;
    *(_QWORD *)(a1 + 184) = v164;
    *(_QWORD *)(a1 + 192) = v152;
    *(_QWORD *)(a1 + 200) = v168;
    *(_QWORD *)(a1 + 208) = v172;
    *(_QWORD *)(a1 + 216) = v176;
    *(_QWORD *)(a1 + 224) = v180;
    *(_QWORD *)(a1 + 232) = v184;
    v80 = v188;
    goto LABEL_34;
  }
  if (!v4)
  {
    sub_1AD046A30((_QWORD *)a1);
    v42 = a2[3];
    v44 = *a2;
    v43 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v42;
    *(_OWORD *)a1 = v44;
    *(_OWORD *)(a1 + 16) = v43;
    v45 = a2[7];
    v47 = a2[4];
    v46 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v45;
    *(_OWORD *)(a1 + 64) = v47;
    *(_OWORD *)(a1 + 80) = v46;
    v48 = a2[11];
    v50 = a2[8];
    v49 = a2[9];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v48;
    *(_OWORD *)(a1 + 128) = v50;
    *(_OWORD *)(a1 + 144) = v49;
    v52 = a2[13];
    v51 = a2[14];
    v53 = a2[12];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(_OWORD *)(a1 + 208) = v52;
    *(_OWORD *)(a1 + 224) = v51;
    *(_OWORD *)(a1 + 192) = v53;
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v5 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = (_OWORD *)(a1 + 56);
  v7 = (__int128 *)((char *)a2 + 56);
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 12);
  v10 = *((_QWORD *)a2 + 14);
  v11 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 22);
  v14 = *((_QWORD *)a2 + 24);
  v18 = v8 >> 1 == 0xFFFFFFFF
     && (v10 | (unint64_t)v9) < 2
     && (v12 & 0xFFFFFFFFFFFFFEFELL | v11 & 0xFFFFFFFFFFFF00FELL) == 0
     && (v14 | v13) < 2;
  if (*(_QWORD *)(a1 + 80) >> 1 == 0xFFFFFFFFLL
    && (*(_QWORD *)(a1 + 112) | *(_QWORD *)(a1 + 96)) <= 1
    && !(*(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFEFELL | *(_QWORD *)(a1 + 128) & 0xFFFFFFFFFFFF00FELL)
    && (*(_QWORD *)(a1 + 192) | *(_QWORD *)(a1 + 176)) < 2)
  {
    if (v18)
    {
      v19 = *v7;
      v20 = *(__int128 *)((char *)a2 + 72);
      v21 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = v21;
      *v6 = v19;
      *(_OWORD *)(a1 + 72) = v20;
      v22 = *(__int128 *)((char *)a2 + 120);
      v23 = *(__int128 *)((char *)a2 + 136);
      v24 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = v24;
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 136) = v23;
      v25 = *(__int128 *)((char *)a2 + 184);
      v26 = *(__int128 *)((char *)a2 + 200);
      v27 = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = v27;
      *(_OWORD *)(a1 + 184) = v25;
      *(_OWORD *)(a1 + 200) = v26;
      goto LABEL_35;
    }
    v134 = *((_QWORD *)a2 + 8);
    v138 = *((_QWORD *)a2 + 7);
    v131 = *((_QWORD *)a2 + 9);
    v100 = *((_QWORD *)a2 + 11);
    v101 = *((_QWORD *)a2 + 13);
    v142 = *((_QWORD *)a2 + 15);
    v146 = *((_QWORD *)a2 + 17);
    v150 = *((_QWORD *)a2 + 18);
    v154 = *((_QWORD *)a2 + 19);
    v158 = *((_QWORD *)a2 + 21);
    v162 = *((_QWORD *)a2 + 23);
    v166 = *((_QWORD *)a2 + 25);
    v170 = *((_QWORD *)a2 + 26);
    v174 = *((_QWORD *)a2 + 27);
    v178 = *((_QWORD *)a2 + 28);
    v182 = *((_QWORD *)a2 + 29);
    v186 = *((_QWORD *)a2 + 30);
    v190 = *((_QWORD *)a2 + 24);
    sub_1AD00FEAC(v138, v134, v131, v8, v100, v9, v101, v10, v142, v11, v146, v150, v154, v12, v158, v13, v162, v14, v166,
      v170,
      v174,
      v178,
      v182,
      v186);
    *(_QWORD *)(a1 + 56) = v138;
    *(_QWORD *)(a1 + 64) = v134;
    *(_QWORD *)(a1 + 72) = v131;
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v100;
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v101;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v142;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v146;
    *(_QWORD *)(a1 + 144) = v150;
    *(_QWORD *)(a1 + 152) = v154;
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 168) = v158;
    *(_QWORD *)(a1 + 176) = v13;
    *(_QWORD *)(a1 + 184) = v162;
    *(_QWORD *)(a1 + 192) = v190;
    *(_QWORD *)(a1 + 200) = v166;
    *(_QWORD *)(a1 + 208) = v170;
    *(_QWORD *)(a1 + 216) = v174;
    *(_QWORD *)(a1 + 224) = v178;
    *(_QWORD *)(a1 + 232) = v182;
    v80 = v186;
LABEL_34:
    *(_QWORD *)(a1 + 240) = v80;
    goto LABEL_35;
  }
  if (v18)
  {
    sub_1AD148B34(a1 + 56);
    v54 = *(__int128 *)((char *)a2 + 104);
    v56 = *v7;
    v55 = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = v54;
    *v6 = v56;
    *(_OWORD *)(a1 + 72) = v55;
    v57 = *(__int128 *)((char *)a2 + 168);
    v59 = *(__int128 *)((char *)a2 + 120);
    v58 = *(__int128 *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
    *(_OWORD *)(a1 + 168) = v57;
    *(_OWORD *)(a1 + 120) = v59;
    *(_OWORD *)(a1 + 136) = v58;
    v60 = *(__int128 *)((char *)a2 + 232);
    v62 = *(__int128 *)((char *)a2 + 184);
    v61 = *(__int128 *)((char *)a2 + 200);
    *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
    *(_OWORD *)(a1 + 232) = v60;
    *(_OWORD *)(a1 + 184) = v62;
    *(_OWORD *)(a1 + 200) = v61;
  }
  else
  {
    v133 = *((_QWORD *)a2 + 8);
    v137 = *((_QWORD *)a2 + 7);
    v130 = *((_QWORD *)a2 + 9);
    v81 = *((_QWORD *)a2 + 11);
    v82 = *((_QWORD *)a2 + 13);
    v141 = *((_QWORD *)a2 + 15);
    v145 = *((_QWORD *)a2 + 17);
    v149 = *((_QWORD *)a2 + 18);
    v153 = *((_QWORD *)a2 + 19);
    v157 = *((_QWORD *)a2 + 21);
    v161 = *((_QWORD *)a2 + 23);
    v165 = *((_QWORD *)a2 + 25);
    v169 = *((_QWORD *)a2 + 26);
    v173 = *((_QWORD *)a2 + 27);
    v177 = *((_QWORD *)a2 + 28);
    v181 = *((_QWORD *)a2 + 29);
    v185 = *((_QWORD *)a2 + 30);
    v189 = *((_QWORD *)a2 + 24);
    sub_1AD00FEAC(v137, v133, v130, v8, v81, v9, v82, v10, v141, v11, v145, v149, v153, v12, v157, v13, v161, v14, v165,
      v169,
      v173,
      v177,
      v181,
      v185);
    v83 = *(_QWORD *)(a1 + 56);
    v84 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v137;
    *(_QWORD *)(a1 + 64) = v133;
    v85 = *(_QWORD *)(a1 + 72);
    v86 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = v130;
    *(_QWORD *)(a1 + 80) = v8;
    v87 = *(_QWORD *)(a1 + 88);
    v88 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v81;
    *(_QWORD *)(a1 + 96) = v9;
    v89 = *(_QWORD *)(a1 + 104);
    v90 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v82;
    *(_QWORD *)(a1 + 112) = v10;
    v91 = *(_OWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v141;
    *(_QWORD *)(a1 + 128) = v11;
    v92 = *(_OWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v145;
    *(_QWORD *)(a1 + 144) = v149;
    v93 = *(_OWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v153;
    *(_QWORD *)(a1 + 160) = v12;
    v94 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v157;
    *(_QWORD *)(a1 + 176) = v13;
    v95 = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v161;
    *(_QWORD *)(a1 + 192) = v189;
    v96 = *(_OWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v165;
    *(_QWORD *)(a1 + 208) = v169;
    v97 = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v173;
    *(_QWORD *)(a1 + 224) = v177;
    v98 = *(_QWORD *)(a1 + 232);
    v99 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = v181;
    *(_QWORD *)(a1 + 240) = v185;
    sub_1AD00E8B0(v83, v84, v85, v86, v87, v88, v89, v90, v91, *((uint64_t *)&v91 + 1), v92, *((uint64_t *)&v92 + 1), v93, *((uint64_t *)&v93 + 1), v94, *((uint64_t *)&v94 + 1), v95, *((unint64_t *)&v95 + 1), v96,
      *((uint64_t *)&v96 + 1),
      v97,
      *((uint64_t *)&v97 + 1),
      v98,
      v99);
  }
LABEL_35:
  v102 = *((_QWORD *)a2 + 31);
  v103 = *((_QWORD *)a2 + 32);
  v104 = *((_QWORD *)a2 + 33);
  v105 = *((_QWORD *)a2 + 34);
  v106 = *((_QWORD *)a2 + 35);
  v107 = *((_QWORD *)a2 + 36);
  v108 = *((_QWORD *)a2 + 37);
  v109 = *((_QWORD *)a2 + 38);
  v135 = *((_QWORD *)a2 + 40);
  v139 = *((_QWORD *)a2 + 41);
  v143 = *((_QWORD *)a2 + 42);
  v147 = *((_QWORD *)a2 + 43);
  v151 = *((_QWORD *)a2 + 44);
  v155 = *((_QWORD *)a2 + 45);
  v159 = *((_QWORD *)a2 + 46);
  v163 = *((_QWORD *)a2 + 47);
  v167 = *((_QWORD *)a2 + 48);
  v171 = *((_QWORD *)a2 + 49);
  v175 = *((_QWORD *)a2 + 50);
  v179 = *((_QWORD *)a2 + 51);
  v183 = *((_QWORD *)a2 + 52);
  v187 = *((_QWORD *)a2 + 53);
  v191 = *((_QWORD *)a2 + 54);
  v110 = *((_QWORD *)a2 + 39);
  sub_1AD00FEAC(v102, v103, v104, v105, v106, v107, v108, v109, v110, v135, v139, v143, v147, v151, v155, v159, v163, v167, v171,
    v175,
    v179,
    v183,
    v187,
    v191);
  v111 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v102;
  v112 = *(_QWORD *)(a1 + 256);
  v113 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v103;
  *(_QWORD *)(a1 + 264) = v104;
  v114 = *(_QWORD *)(a1 + 272);
  v115 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v105;
  *(_QWORD *)(a1 + 280) = v106;
  v116 = *(_QWORD *)(a1 + 288);
  v117 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v107;
  *(_QWORD *)(a1 + 296) = v108;
  v118 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v109;
  v119 = *(_OWORD *)(a1 + 312);
  v120 = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 312) = v110;
  *(_QWORD *)(a1 + 320) = v135;
  *(_QWORD *)(a1 + 328) = v139;
  *(_QWORD *)(a1 + 336) = v143;
  v121 = *(_OWORD *)(a1 + 344);
  v122 = *(_OWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 344) = v147;
  *(_QWORD *)(a1 + 352) = v151;
  *(_QWORD *)(a1 + 360) = v155;
  *(_QWORD *)(a1 + 368) = v159;
  v123 = *(_OWORD *)(a1 + 376);
  v124 = *(_OWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 376) = v163;
  *(_QWORD *)(a1 + 384) = v167;
  *(_QWORD *)(a1 + 392) = v171;
  *(_QWORD *)(a1 + 400) = v175;
  v125 = *(_OWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v179;
  v126 = *(_QWORD *)(a1 + 424);
  v127 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 416) = v183;
  *(_QWORD *)(a1 + 424) = v187;
  *(_QWORD *)(a1 + 432) = v191;
  sub_1AD00E8B0(v111, v112, v113, v114, v115, v116, v117, v118, v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121, *((uint64_t *)&v121 + 1), v122, *((uint64_t *)&v122 + 1), v123, *((unint64_t *)&v123 + 1), v124,
    *((uint64_t *)&v124 + 1),
    v125,
    *((uint64_t *)&v125 + 1),
    v126,
    v127);
  return a1;
}

void *__swift_memcpy440_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B8uLL);
}

uint64_t assignWithTake for MessagesAppBalloon.AppIconImage(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_14;
  if (!*(_QWORD *)(a2 + 24))
  {
    sub_1AD046A30((_QWORD *)a1);
LABEL_14:
    v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v28;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v29;
    v30 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v30;
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    v32 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v32;
    v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    v34 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v34;
    goto LABEL_15;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 176);
  v21 = *(_QWORD *)(a2 + 192);
  if (v8 >> 1 != 0xFFFFFFFF
    || (v10 | (unint64_t)v9) > 1
    || v12 & 0xFFFFFFFFFFFFFEFELL | v11 & 0xFFFFFFFFFFFF00FELL
    || (v14 | v13) >= 2)
  {
    if (v15 >> 1 != 0xFFFFFFFF
      || (v17 | v16) > 1
      || v19 & 0xFFFFFFFFFFFFFEFELL | v18 & 0xFFFFFFFFFFFF00FELL
      || (v21 | v20) >= 2)
    {
      v58 = *(_QWORD *)(a2 + 72);
      v59 = *(_QWORD *)(a2 + 88);
      v60 = *(_QWORD *)(a2 + 104);
      v61 = *(_QWORD *)(a2 + 120);
      v62 = *(_QWORD *)(a2 + 152);
      v63 = *(_QWORD *)(a2 + 168);
      v64 = *(_QWORD *)(a2 + 184);
      v75 = *(_QWORD *)(a1 + 64);
      v76 = *(_QWORD *)(a1 + 56);
      v74 = *(_QWORD *)(a1 + 72);
      v77 = *(_QWORD *)(a1 + 88);
      v78 = *(_QWORD *)(a1 + 104);
      v65 = *(_OWORD *)(a1 + 136);
      v72 = *(_QWORD *)(a1 + 152);
      v73 = *(_QWORD *)(a1 + 120);
      v66 = *(_QWORD *)(a1 + 168);
      v67 = *(_QWORD *)(a1 + 184);
      v68 = *(_OWORD *)(a1 + 200);
      v69 = *(_OWORD *)(a1 + 216);
      v71 = *(_QWORD *)(a1 + 232);
      v70 = *(_QWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = v58;
      *(_QWORD *)(a1 + 80) = v15;
      *(_QWORD *)(a1 + 88) = v59;
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v60;
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = v61;
      *(_QWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = v62;
      *(_QWORD *)(a1 + 160) = v19;
      *(_QWORD *)(a1 + 168) = v63;
      *(_QWORD *)(a1 + 176) = v20;
      *(_QWORD *)(a1 + 184) = v64;
      *(_QWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      sub_1AD00E8B0(v76, v75, v74, v8, v77, v9, v78, v10, v73, v11, v65, *((uint64_t *)&v65 + 1), v72, v12, v66, v13, v67, v14, v68,
        *((uint64_t *)&v68 + 1),
        v69,
        *((uint64_t *)&v69 + 1),
        v71,
        v70);
      goto LABEL_15;
    }
    sub_1AD148B34(a1 + 56);
  }
  v22 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v22;
  v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v23;
  v24 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v24;
  v25 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v25;
  v26 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v26;
  v27 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v27;
LABEL_15:
  v35 = *(_QWORD *)(a1 + 248);
  v36 = *(_QWORD *)(a1 + 256);
  v37 = *(_QWORD *)(a1 + 264);
  v38 = *(_QWORD *)(a1 + 272);
  v39 = *(_QWORD *)(a1 + 280);
  v40 = *(_QWORD *)(a1 + 288);
  v41 = *(_QWORD *)(a1 + 296);
  v42 = *(_QWORD *)(a1 + 304);
  v43 = *(_OWORD *)(a1 + 312);
  v44 = *(_OWORD *)(a1 + 328);
  v45 = *(_OWORD *)(a1 + 344);
  v46 = *(_OWORD *)(a1 + 360);
  v47 = *(_OWORD *)(a1 + 376);
  v48 = *(_OWORD *)(a1 + 392);
  v49 = *(_OWORD *)(a1 + 408);
  v50 = *(_QWORD *)(a1 + 424);
  v51 = *(_QWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v52 = v5[1];
  *v4 = *v5;
  v4[1] = v52;
  v53 = v5[3];
  v4[2] = v5[2];
  v4[3] = v53;
  v54 = v5[5];
  v4[4] = v5[4];
  v4[5] = v54;
  v55 = v5[7];
  v4[6] = v5[6];
  v4[7] = v55;
  v56 = v5[9];
  v4[8] = v5[8];
  v4[9] = v56;
  v4[10] = v5[10];
  sub_1AD00E8B0(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((unint64_t *)&v47 + 1), v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    v51);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagesAppBalloon.AppIconImage(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 440))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 272) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MessagesAppBalloon.AppIconImage(uint64_t a1, int a2, int a3)
{
  double result;
  uint64_t v4;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 440) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(a1 + 248) = 0;
      *(_QWORD *)(a1 + 256) = 0;
      v4 = a1 + 248;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 440) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Wallpaper.WallpaperImage()
{
  return &type metadata for Wallpaper.WallpaperImage;
}

uint64_t destroy for Wallpaper.WallpaperMetadata()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Wallpaper.WallpaperMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Wallpaper.WallpaperMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  v8 = *(_OWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  return a1;
}

uint64_t assignWithTake for Wallpaper.WallpaperMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for Wallpaper.WallpaperMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Wallpaper.WallpaperMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Wallpaper.WallpaperMetadata()
{
  return &type metadata for Wallpaper.WallpaperMetadata;
}

uint64_t storeEnumTagSinglePayload for Nickname.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AD4112AC + 4 * byte_1AD6831BB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AD4112E0 + 4 * byte_1AD6831B6[v4]))();
}

uint64_t sub_1AD4112E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD4112E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD4112F0);
  return result;
}

uint64_t sub_1AD4112FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD411304);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AD411308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD411310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Nickname.CodingKeys()
{
  return &type metadata for Nickname.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Nickname.Context.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1AD411378 + 4 * byte_1AD6831C5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1AD4113AC + 4 * byte_1AD6831C0[v4]))();
}

uint64_t sub_1AD4113AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD4113B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD4113BCLL);
  return result;
}

uint64_t sub_1AD4113C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD4113D0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1AD4113D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD4113DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Nickname.Context.CodingKeys()
{
  return &type metadata for Nickname.Context.CodingKeys;
}

unint64_t sub_1AD4113FC()
{
  unint64_t result;

  result = qword_1EECDC2A8;
  if (!qword_1EECDC2A8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683690, &type metadata for Nickname.Context.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2A8);
  }
  return result;
}

unint64_t sub_1AD411444()
{
  unint64_t result;

  result = qword_1EECDC2B0;
  if (!qword_1EECDC2B0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683748, &type metadata for Nickname.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2B0);
  }
  return result;
}

unint64_t sub_1AD41148C()
{
  unint64_t result;

  result = qword_1EECDC2B8;
  if (!qword_1EECDC2B8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6836B8, &type metadata for Nickname.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2B8);
  }
  return result;
}

unint64_t sub_1AD4114D4()
{
  unint64_t result;

  result = qword_1EECDC2C0;
  if (!qword_1EECDC2C0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6836E0, &type metadata for Nickname.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2C0);
  }
  return result;
}

unint64_t sub_1AD41151C()
{
  unint64_t result;

  result = qword_1EECDC2C8;
  if (!qword_1EECDC2C8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683600, &type metadata for Nickname.Context.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2C8);
  }
  return result;
}

unint64_t sub_1AD411564()
{
  unint64_t result;

  result = qword_1EECDC2D0;
  if (!qword_1EECDC2D0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683628, &type metadata for Nickname.Context.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC2D0);
  }
  return result;
}

uint64_t sub_1AD4115A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79656B6E6ELL && a2 == 0xE500000000000000;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615464726F636572 && a2 == 0xE900000000000067 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001AD6A96E0 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001AD6A9700 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001AD6A5000 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001AD6A9720 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001AD6A9740)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1AD411860(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726174617661 && a2 == 0xE600000000000000 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657061706C6C6177 && a2 == 0xE900000000000072 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736E756F6E6F7270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_1AD411A84()
{
  unint64_t result;

  result = qword_1EECDC2D8;
  if (!qword_1EECDC2D8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for WallpaperType, &type metadata for WallpaperType);
    atomic_store(result, (unint64_t *)&qword_1EECDC2D8);
  }
  return result;
}

uint64_t sub_1AD411AD0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 sub_1AD411B00(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD411B50@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24));
  v4 = v3[1];
  v6 = v3[2];
  v5 = v3[3];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t type metadata accessor for IDSKCSharingInvitation()
{
  uint64_t result;

  result = qword_1EECDC2E0;
  if (!qword_1EECDC2E0)
    return swift_getSingletonMetadata();
  return result;
}

__n128 sub_1AD411BD0(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = (__n128 *)(v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24));
  swift_release();
  swift_bridgeObjectRelease();
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u64[0] = v3;
  v5[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD411C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD411CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24);
  if (*(_QWORD *)(v1 + 24))
  {
    v2 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
    return v2;
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD411D34(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    *a1 = *(_QWORD *)(v1 + 16);
    a1[1] = v3;
    swift_bridgeObjectRetain();
    return sub_1AD34BDE0;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

void (*sub_1AD411DBC(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  *v3 = *v1;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD34BF10;
}

uint64_t sub_1AD411E20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 20);
  return sub_1AD048E48(v3, a1);
}

uint64_t sub_1AD411E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 20);
  return sub_1AD048EBC(a1, v3);
}

uint64_t (*sub_1AD411E80())(_QWORD)
{
  type metadata accessor for IDSKCSharingInvitation();
  return nullsub_1;
}

uint64_t sub_1AD411EA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = v4;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD411F2C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  type metadata accessor for IDSKCSharingInvitation();
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v2, v1);
}

uint64_t sub_1AD411F78(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IDSKCSharingInvitation();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(a1, a2);
}

uint64_t (*sub_1AD411FBC(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*result)(uint64_t *, char);

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = v1 + v3;
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    swift_bridgeObjectRetain();
    return sub_1AD012060;
  }
  else
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD412058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24));
  v4 = v3[1];
  v6 = v3[2];
  v5 = v3[3];
  *a2 = *v3;
  a2[1] = v4;
  a2[2] = v6;
  a2[3] = v5;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_1AD4120A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = (_QWORD *)(a2 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  result = swift_bridgeObjectRelease();
  *v6 = v3;
  v6[1] = v2;
  v6[2] = v5;
  v6[3] = v4;
  return result;
}

void (*sub_1AD41211C(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(int *)(type metadata accessor for IDSKCSharingInvitation() + 24);
  *((_DWORD *)v3 + 10) = v4;
  v5 = (_QWORD *)(v1 + v4);
  v6 = v5[1];
  v8 = v5[2];
  v7 = v5[3];
  *v3 = *v5;
  v3[1] = v6;
  v3[2] = v8;
  v3[3] = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1AD0122A8;
}

uint64_t sub_1AD412194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 28);
  return sub_1AD0E48B8(v3, a1);
}

uint64_t sub_1AD4121C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 28);
  return sub_1AD0E4930(a1, v3);
}

uint64_t (*sub_1AD4121F4())(_QWORD)
{
  type metadata accessor for IDSKCSharingInvitation();
  return nullsub_1;
}

uint64_t sub_1AD41221C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD412258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for IDSKCSharingInvitation() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1AD41229C())(_QWORD)
{
  type metadata accessor for IDSKCSharingInvitation();
  return nullsub_1;
}

uint64_t sub_1AD4122C4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD412310(&qword_1EECD7100, (uint64_t)&unk_1AD650EA8);
  result = sub_1AD412310(&qword_1EECD70C8, (uint64_t)&unk_1AD650ED0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD412310(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IDSKCSharingInvitation();
    result = MEMORY[0x1AF44BDF0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD412354(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return _s9BlastDoor11CPIMMessageV19IMDNMessageIDHeaderV9messageIDSSvs_0(v1, v2);
}

uint64_t sub_1AD412390@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

_QWORD *sub_1AD4123D4(_QWORD *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *(_DWORD *)v11 = *(_DWORD *)((char *)a2 + v10);
    *((_QWORD *)v11 + 1) = *(uint64_t *)((char *)a2 + v10 + 8);
    v13 = *(uint64_t *)((char *)a2 + v10 + 32);
    *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)a2 + v10 + 16);
    *((_QWORD *)v11 + 4) = v13;
    v14 = (uint64_t *)((char *)a2 + v10 + 40);
    v15 = *(uint64_t *)((char *)a2 + v10 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v15 >> 60 == 11 || v15 >> 60 == 15)
    {
      *(_OWORD *)(v11 + 40) = *(_OWORD *)v14;
    }
    else
    {
      v16 = *v14;
      sub_1AD0040A0(*v14, v15);
      *((_QWORD *)v11 + 5) = v16;
      *((_QWORD *)v11 + 6) = v15;
    }
    v17 = *((_QWORD *)v12 + 9);
    if (v17)
    {
      v18 = *((_DWORD *)v12 + 15);
      *((_DWORD *)v11 + 14) = *((_DWORD *)v12 + 14);
      *((_DWORD *)v11 + 15) = v18;
      v11[64] = v12[64];
      v19 = *((_QWORD *)v12 + 10);
      *((_QWORD *)v11 + 9) = v17;
      *((_QWORD *)v11 + 10) = v19;
      v20 = (uint64_t *)(v12 + 88);
      v21 = *((_QWORD *)v12 + 12);
      swift_retain();
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 88) = *(_OWORD *)v20;
      }
      else
      {
        v23 = *v20;
        sub_1AD0040A0(*v20, v21);
        *((_QWORD *)v11 + 11) = v23;
        *((_QWORD *)v11 + 12) = v21;
      }
    }
    else
    {
      v22 = *(_OWORD *)(v12 + 72);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_OWORD *)(v11 + 72) = v22;
      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v12 + 88);
    }
    v24 = *((_QWORD *)v12 + 14);
    *((_QWORD *)v11 + 13) = *((_QWORD *)v12 + 13);
    *((_QWORD *)v11 + 14) = v24;
    v25 = (uint64_t *)(v12 + 120);
    v26 = *((_QWORD *)v12 + 16);
    swift_retain();
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)(v11 + 120) = *(_OWORD *)v25;
    }
    else
    {
      v27 = *v25;
      sub_1AD0040A0(*v25, v26);
      *((_QWORD *)v11 + 15) = v27;
      *((_QWORD *)v11 + 16) = v26;
    }
    v28 = *((_QWORD *)v12 + 18);
    *((_QWORD *)v11 + 17) = *((_QWORD *)v12 + 17);
    *((_QWORD *)v11 + 18) = v28;
    v29 = v12 + 152;
    v30 = *((_QWORD *)v12 + 20);
    swift_retain();
    if (v30 >> 60 == 11 || v30 >> 60 == 15)
    {
      *(_OWORD *)(v11 + 152) = *v29;
    }
    else
    {
      v31 = *(_QWORD *)v29;
      sub_1AD0040A0(v31, v30);
      *((_QWORD *)v11 + 19) = v31;
      *((_QWORD *)v11 + 20) = v30;
    }
    v32 = *((_QWORD *)v12 + 21);
    if (v32)
    {
      v33 = *((_QWORD *)v12 + 22);
      *((_QWORD *)v11 + 21) = v32;
      *((_QWORD *)v11 + 22) = v33;
      v34 = (uint64_t *)(v12 + 184);
      v35 = *((_QWORD *)v12 + 24);
      swift_retain();
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 184) = *(_OWORD *)v34;
      }
      else
      {
        v38 = *v34;
        sub_1AD0040A0(*v34, v35);
        *((_QWORD *)v11 + 23) = v38;
        *((_QWORD *)v11 + 24) = v35;
      }
      *((_DWORD *)v11 + 50) = *((_DWORD *)v12 + 50);
      v39 = *((_QWORD *)v12 + 27);
      *((_QWORD *)v11 + 26) = *((_QWORD *)v12 + 26);
      *((_QWORD *)v11 + 27) = v39;
      v40 = (uint64_t *)(v12 + 224);
      v41 = *((_QWORD *)v12 + 29);
      swift_retain();
      if (v41 >> 60 == 15)
      {
        *((_OWORD *)v11 + 14) = *(_OWORD *)v40;
      }
      else
      {
        v42 = *v40;
        sub_1AD0040A0(*v40, v41);
        *((_QWORD *)v11 + 28) = v42;
        *((_QWORD *)v11 + 29) = v41;
      }
    }
    else
    {
      v36 = *(_OWORD *)(v12 + 216);
      *(_OWORD *)(v11 + 200) = *(_OWORD *)(v12 + 200);
      *(_OWORD *)(v11 + 216) = v36;
      *((_QWORD *)v11 + 29) = *((_QWORD *)v12 + 29);
      v37 = *(_OWORD *)(v12 + 184);
      *(_OWORD *)(v11 + 168) = *(_OWORD *)(v12 + 168);
      *(_OWORD *)(v11 + 184) = v37;
    }
    v43 = *((_QWORD *)v12 + 32);
    *((_OWORD *)v11 + 15) = *((_OWORD *)v12 + 15);
    *((_QWORD *)v11 + 32) = v43;
    v44 = (uint64_t *)(v12 + 264);
    v45 = *((_QWORD *)v12 + 34);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v45 >> 60 == 11 || v45 >> 60 == 15)
    {
      *(_OWORD *)(v11 + 264) = *(_OWORD *)v44;
    }
    else
    {
      v46 = *v44;
      sub_1AD0040A0(*v44, v45);
      *((_QWORD *)v11 + 33) = v46;
      *((_QWORD *)v11 + 34) = v45;
    }
    v47 = type metadata accessor for CloudKitSharingToken();
    v48 = *(int *)(v47 + 24);
    v49 = &v11[v48];
    v50 = &v12[v48];
    v51 = *(_QWORD *)&v12[v48 + 8];
    *(_QWORD *)v49 = *(_QWORD *)&v12[v48];
    *((_QWORD *)v49 + 1) = v51;
    swift_retain();
    v52 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
    v53 = &v49[v52];
    v54 = &v50[v52];
    v55 = sub_1AD63AF28();
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v58 = *(int *)(v47 + 28);
    v59 = &v11[v58];
    v60 = &v12[v58];
    v61 = *((_QWORD *)v60 + 1);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *((_QWORD *)v59 + 1) = v61;
    v62 = v60 + 16;
    v63 = *((_QWORD *)v60 + 3);
    swift_retain();
    if (v63 == 1)
    {
      *((_OWORD *)v59 + 1) = *v62;
    }
    else
    {
      *((_QWORD *)v59 + 2) = *(_QWORD *)v62;
      *((_QWORD *)v59 + 3) = v63;
      swift_bridgeObjectRetain();
    }
    v64 = a3[6];
    v65 = a3[7];
    v66 = (_QWORD *)((char *)a1 + v64);
    v67 = (uint64_t *)((char *)a2 + v64);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    v69 = v67[3];
    v66[2] = v67[2];
    v66[3] = v69;
    v70 = (char *)a1 + v65;
    v71 = (char *)a2 + v65;
    v72 = sub_1AD63B03C();
    v73 = *(_QWORD *)(v72 - 8);
    v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v74(v71, 1, v72))
    {
      v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
    }
    v76 = a3[8];
    v77 = (_QWORD *)((char *)a1 + v76);
    v78 = (uint64_t *)((char *)a2 + v76);
    v79 = v78[1];
    *v77 = *v78;
    v77[1] = v79;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD4128E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = v4[6];
  if (v5 >> 60 != 15 && (v5 & 0xF000000000000000) != 0xB000000000000000)
    sub_1AD00412C(v4[5], v5);
  if (v4[9])
  {
    swift_release();
    v7 = v4[12];
    if (v7 >> 60 != 15)
      sub_1AD00412C(v4[11], v7);
  }
  swift_release();
  v8 = v4[16];
  if (v8 >> 60 != 15)
    sub_1AD00412C(v4[15], v8);
  swift_release();
  v9 = v4[20];
  if (v9 >> 60 != 15 && (v9 & 0xF000000000000000) != 0xB000000000000000)
    sub_1AD00412C(v4[19], v9);
  if (v4[21])
  {
    swift_release();
    v11 = v4[24];
    if (v11 >> 60 != 15)
      sub_1AD00412C(v4[23], v11);
    swift_release();
    v12 = v4[29];
    if (v12 >> 60 != 15)
      sub_1AD00412C(v4[28], v12);
  }
  swift_bridgeObjectRelease();
  swift_release();
  v13 = v4[34];
  if (v13 >> 60 != 15 && (v13 & 0xF000000000000000) != 0xB000000000000000)
    sub_1AD00412C(v4[33], v13);
  v14 = type metadata accessor for CloudKitSharingToken();
  v15 = (char *)v4 + *(int *)(v14 + 24);
  swift_release();
  v16 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28)];
  v17 = sub_1AD63AF28();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  v19 = (char *)v4 + *(int *)(v14 + 28);
  swift_release();
  if (*((_QWORD *)v19 + 3) != 1)
    swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v20 = a1 + *(int *)(a2 + 28);
  v21 = sub_1AD63B03C();
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1AD412B54(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v82;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v7 = a3[5];
  v82 = a1;
  v8 = (char *)a1 + v7;
  v10 = (char *)a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = *(_QWORD *)((char *)a2 + v7 + 8);
  v11 = *(_QWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_QWORD *)v8 + 4) = v11;
  v12 = (_QWORD *)((char *)a2 + v7 + 40);
  v13 = *(_QWORD *)((char *)a2 + v7 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 60 == 11 || v13 >> 60 == 15)
  {
    *(_OWORD *)(v8 + 40) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_1AD0040A0(*v12, v13);
    *((_QWORD *)v8 + 5) = v14;
    *((_QWORD *)v8 + 6) = v13;
  }
  v15 = a3;
  v16 = *((_QWORD *)v10 + 9);
  v17 = a2;
  if (v16)
  {
    v18 = *((_DWORD *)v10 + 15);
    *((_DWORD *)v8 + 14) = *((_DWORD *)v10 + 14);
    *((_DWORD *)v8 + 15) = v18;
    v8[64] = v10[64];
    v19 = *((_QWORD *)v10 + 10);
    *((_QWORD *)v8 + 9) = v16;
    *((_QWORD *)v8 + 10) = v19;
    v20 = (uint64_t *)(v10 + 88);
    v21 = *((_QWORD *)v10 + 12);
    swift_retain();
    v22 = v82;
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)(v8 + 88) = *(_OWORD *)v20;
    }
    else
    {
      v24 = *v20;
      sub_1AD0040A0(*v20, v21);
      *((_QWORD *)v8 + 11) = v24;
      *((_QWORD *)v8 + 12) = v21;
    }
  }
  else
  {
    v23 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(v8 + 72) = v23;
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(v10 + 88);
    v22 = v82;
  }
  v25 = *((_QWORD *)v10 + 14);
  *((_QWORD *)v8 + 13) = *((_QWORD *)v10 + 13);
  *((_QWORD *)v8 + 14) = v25;
  v26 = (uint64_t *)(v10 + 120);
  v27 = *((_QWORD *)v10 + 16);
  swift_retain();
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(v8 + 120) = *(_OWORD *)v26;
  }
  else
  {
    v28 = *v26;
    sub_1AD0040A0(*v26, v27);
    *((_QWORD *)v8 + 15) = v28;
    *((_QWORD *)v8 + 16) = v27;
  }
  v29 = *((_QWORD *)v10 + 18);
  *((_QWORD *)v8 + 17) = *((_QWORD *)v10 + 17);
  *((_QWORD *)v8 + 18) = v29;
  v30 = v10 + 152;
  v31 = *((_QWORD *)v10 + 20);
  swift_retain();
  if (v31 >> 60 == 11 || v31 >> 60 == 15)
  {
    *(_OWORD *)(v8 + 152) = *v30;
  }
  else
  {
    v32 = *(_QWORD *)v30;
    sub_1AD0040A0(v32, v31);
    *((_QWORD *)v8 + 19) = v32;
    *((_QWORD *)v8 + 20) = v31;
  }
  v33 = *((_QWORD *)v10 + 21);
  if (v33)
  {
    v34 = *((_QWORD *)v10 + 22);
    *((_QWORD *)v8 + 21) = v33;
    *((_QWORD *)v8 + 22) = v34;
    v35 = (uint64_t *)(v10 + 184);
    v36 = *((_QWORD *)v10 + 24);
    swift_retain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)(v8 + 184) = *(_OWORD *)v35;
    }
    else
    {
      v39 = *v35;
      sub_1AD0040A0(*v35, v36);
      *((_QWORD *)v8 + 23) = v39;
      *((_QWORD *)v8 + 24) = v36;
    }
    *((_DWORD *)v8 + 50) = *((_DWORD *)v10 + 50);
    v40 = *((_QWORD *)v10 + 27);
    *((_QWORD *)v8 + 26) = *((_QWORD *)v10 + 26);
    *((_QWORD *)v8 + 27) = v40;
    v41 = (uint64_t *)(v10 + 224);
    v42 = *((_QWORD *)v10 + 29);
    swift_retain();
    if (v42 >> 60 == 15)
    {
      *((_OWORD *)v8 + 14) = *(_OWORD *)v41;
    }
    else
    {
      v43 = *v41;
      sub_1AD0040A0(*v41, v42);
      *((_QWORD *)v8 + 28) = v43;
      *((_QWORD *)v8 + 29) = v42;
    }
  }
  else
  {
    v37 = *(_OWORD *)(v10 + 216);
    *(_OWORD *)(v8 + 200) = *(_OWORD *)(v10 + 200);
    *(_OWORD *)(v8 + 216) = v37;
    *((_QWORD *)v8 + 29) = *((_QWORD *)v10 + 29);
    v38 = *(_OWORD *)(v10 + 184);
    *(_OWORD *)(v8 + 168) = *(_OWORD *)(v10 + 168);
    *(_OWORD *)(v8 + 184) = v38;
  }
  v44 = *((_QWORD *)v10 + 32);
  *((_OWORD *)v8 + 15) = *((_OWORD *)v10 + 15);
  *((_QWORD *)v8 + 32) = v44;
  v45 = (uint64_t *)(v10 + 264);
  v46 = *((_QWORD *)v10 + 34);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v46 >> 60 == 11 || v46 >> 60 == 15)
  {
    *(_OWORD *)(v8 + 264) = *(_OWORD *)v45;
  }
  else
  {
    v47 = *v45;
    sub_1AD0040A0(*v45, v46);
    *((_QWORD *)v8 + 33) = v47;
    *((_QWORD *)v8 + 34) = v46;
  }
  v48 = type metadata accessor for CloudKitSharingToken();
  v49 = *(int *)(v48 + 24);
  v50 = &v8[v49];
  v51 = &v10[v49];
  v52 = *(_QWORD *)&v10[v49 + 8];
  *(_QWORD *)v50 = *(_QWORD *)&v10[v49];
  *((_QWORD *)v50 + 1) = v52;
  swift_retain();
  v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v54 = &v50[v53];
  v55 = &v51[v53];
  v56 = sub_1AD63AF28();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  v59 = *(int *)(v48 + 28);
  v60 = &v8[v59];
  v61 = &v10[v59];
  v62 = *((_QWORD *)v61 + 1);
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = v62;
  v63 = v61 + 16;
  v64 = *((_QWORD *)v61 + 3);
  swift_retain();
  if (v64 == 1)
  {
    *((_OWORD *)v60 + 1) = *v63;
  }
  else
  {
    *((_QWORD *)v60 + 2) = *(_QWORD *)v63;
    *((_QWORD *)v60 + 3) = v64;
    swift_bridgeObjectRetain();
  }
  v65 = v15[6];
  v66 = v15[7];
  v67 = (_QWORD *)((char *)v22 + v65);
  v68 = (_QWORD *)((char *)v17 + v65);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  v70 = v68[3];
  v67[2] = v68[2];
  v67[3] = v70;
  v71 = (char *)v22 + v66;
  v72 = (char *)v17 + v66;
  v73 = sub_1AD63B03C();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v75(v72, 1, v73))
  {
    v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  v77 = v15[8];
  v78 = (_QWORD *)((char *)v22 + v77);
  v79 = (_QWORD *)((char *)v17 + v77);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  swift_bridgeObjectRetain();
  return v22;
}

_QWORD *sub_1AD413044(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int *v123;
  _QWORD *v124;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v123 = a3;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = *(_QWORD *)((char *)a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v9 + 4);
  *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
  *((_QWORD *)v8 + 4) = v10;
  swift_retain();
  swift_release();
  v11 = (uint64_t *)(v9 + 40);
  v12 = *((_QWORD *)v9 + 6);
  v13 = v12 & 0xF000000000000000;
  if (*((_QWORD *)v8 + 6) >> 60 == 11)
  {
    if (v13 == 0xB000000000000000 || v12 >> 60 == 15)
      goto LABEL_12;
LABEL_9:
    v14 = *v11;
    sub_1AD0040A0(*v11, *((_QWORD *)v9 + 6));
    *((_QWORD *)v8 + 5) = v14;
    *((_QWORD *)v8 + 6) = v12;
    goto LABEL_13;
  }
  if (v13 == 0xB000000000000000)
  {
    sub_1AD009758((uint64_t)(v8 + 40), &qword_1ED2E3250);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 6) >> 60 == 15)
  {
    if (v12 >> 60 != 15)
      goto LABEL_9;
LABEL_12:
    *(_OWORD *)(v8 + 40) = *(_OWORD *)v11;
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 40));
    goto LABEL_12;
  }
  v114 = *v11;
  sub_1AD0040A0(*v11, *((_QWORD *)v9 + 6));
  v115 = *((_QWORD *)v8 + 5);
  v116 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v8 + 5) = v114;
  *((_QWORD *)v8 + 6) = v12;
  sub_1AD00412C(v115, v116);
LABEL_13:
  v15 = v8 + 56;
  v16 = v9 + 56;
  v17 = *((_QWORD *)v9 + 9);
  if (*((_QWORD *)v8 + 9))
  {
    if (!v17)
    {
      sub_1AD0AEC58((uint64_t)(v8 + 56));
      v25 = *(_OWORD *)(v9 + 72);
      v24 = *(_OWORD *)(v9 + 88);
      *v15 = *v16;
      *(_OWORD *)(v8 + 72) = v25;
      *(_OWORD *)(v8 + 88) = v24;
      goto LABEL_28;
    }
    *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
    v18 = *((_DWORD *)v9 + 15);
    v8[64] = v9[64];
    *((_DWORD *)v8 + 15) = v18;
    v19 = *((_QWORD *)v9 + 10);
    *((_QWORD *)v8 + 9) = *((_QWORD *)v9 + 9);
    *((_QWORD *)v8 + 10) = v19;
    swift_retain();
    swift_release();
    v20 = (uint64_t *)(v9 + 88);
    v21 = *((_QWORD *)v9 + 12);
    if (*((_QWORD *)v8 + 12) >> 60 == 15)
    {
      if (v21 >> 60 == 15)
        goto LABEL_25;
LABEL_22:
      v26 = *v20;
      sub_1AD0040A0(*v20, v21);
      *((_QWORD *)v8 + 11) = v26;
      *((_QWORD *)v8 + 12) = v21;
      goto LABEL_28;
    }
    if (v21 >> 60 == 15)
    {
      sub_1AD007EC0((uint64_t)(v8 + 88));
LABEL_25:
      *(_OWORD *)(v8 + 88) = *(_OWORD *)v20;
      goto LABEL_28;
    }
    v29 = *v20;
    sub_1AD0040A0(*v20, *((_QWORD *)v9 + 12));
    v30 = *((_QWORD *)v8 + 11);
    v31 = *((_QWORD *)v8 + 12);
    *((_QWORD *)v8 + 11) = v29;
    *((_QWORD *)v8 + 12) = v21;
    sub_1AD00412C(v30, v31);
  }
  else
  {
    if (v17)
    {
      *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
      v22 = *((_DWORD *)v9 + 15);
      v8[64] = v9[64];
      *((_DWORD *)v8 + 15) = v22;
      v23 = *((_QWORD *)v9 + 10);
      *((_QWORD *)v8 + 9) = *((_QWORD *)v9 + 9);
      *((_QWORD *)v8 + 10) = v23;
      v20 = (uint64_t *)(v9 + 88);
      v21 = *((_QWORD *)v9 + 12);
      swift_retain();
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)(v8 + 88) = *(_OWORD *)v20;
        goto LABEL_28;
      }
      goto LABEL_22;
    }
    v27 = *v16;
    v28 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
    *(_OWORD *)(v8 + 88) = v28;
    *v15 = v27;
  }
LABEL_28:
  v32 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v8 + 13) = *((_QWORD *)v9 + 13);
  *((_QWORD *)v8 + 14) = v32;
  swift_retain();
  swift_release();
  v33 = (uint64_t *)(v9 + 120);
  v34 = *((_QWORD *)v9 + 16);
  if (*((_QWORD *)v8 + 16) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_1AD0040A0(*v33, *((_QWORD *)v9 + 16));
      *((_QWORD *)v8 + 15) = v35;
      *((_QWORD *)v8 + 16) = v34;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if (v34 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 120));
LABEL_33:
    *(_OWORD *)(v8 + 120) = *(_OWORD *)v33;
    goto LABEL_35;
  }
  v36 = *v33;
  sub_1AD0040A0(*v33, *((_QWORD *)v9 + 16));
  v37 = *((_QWORD *)v8 + 15);
  v38 = *((_QWORD *)v8 + 16);
  *((_QWORD *)v8 + 15) = v36;
  *((_QWORD *)v8 + 16) = v34;
  sub_1AD00412C(v37, v38);
LABEL_35:
  v39 = *((_QWORD *)v9 + 18);
  *((_QWORD *)v8 + 17) = *((_QWORD *)v9 + 17);
  *((_QWORD *)v8 + 18) = v39;
  swift_retain();
  swift_release();
  v40 = (uint64_t *)(v9 + 152);
  v41 = *((_QWORD *)v9 + 20);
  v42 = v41 & 0xF000000000000000;
  if (*((_QWORD *)v8 + 20) >> 60 == 11)
  {
    if (v42 == 0xB000000000000000 || v41 >> 60 == 15)
      goto LABEL_46;
LABEL_43:
    v43 = *v40;
    sub_1AD0040A0(*v40, *((_QWORD *)v9 + 20));
    *((_QWORD *)v8 + 19) = v43;
    *((_QWORD *)v8 + 20) = v41;
    goto LABEL_47;
  }
  if (v42 == 0xB000000000000000)
  {
    sub_1AD009758((uint64_t)(v8 + 152), &qword_1ED2E3250);
    goto LABEL_46;
  }
  if (*((_QWORD *)v8 + 20) >> 60 == 15)
  {
    if (v41 >> 60 != 15)
      goto LABEL_43;
LABEL_46:
    *(_OWORD *)(v8 + 152) = *(_OWORD *)v40;
    goto LABEL_47;
  }
  if (v41 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 152));
    goto LABEL_46;
  }
  v117 = *v40;
  sub_1AD0040A0(*v40, *((_QWORD *)v9 + 20));
  v118 = *((_QWORD *)v8 + 19);
  v119 = *((_QWORD *)v8 + 20);
  *((_QWORD *)v8 + 19) = v117;
  *((_QWORD *)v8 + 20) = v41;
  sub_1AD00412C(v118, v119);
LABEL_47:
  v44 = v8 + 168;
  v46 = v9 + 168;
  v45 = *((_QWORD *)v9 + 21);
  if (!*((_QWORD *)v8 + 21))
  {
    if (!v45)
    {
      *v44 = *v46;
      v57 = *(_OWORD *)(v9 + 184);
      v58 = *(_OWORD *)(v9 + 200);
      v59 = *(_OWORD *)(v9 + 216);
      *((_QWORD *)v8 + 29) = *((_QWORD *)v9 + 29);
      *(_OWORD *)(v8 + 200) = v58;
      *(_OWORD *)(v8 + 216) = v59;
      *(_OWORD *)(v8 + 184) = v57;
      goto LABEL_71;
    }
    v51 = *((_QWORD *)v9 + 22);
    *((_QWORD *)v8 + 21) = v45;
    *((_QWORD *)v8 + 22) = v51;
    v52 = (uint64_t *)(v9 + 184);
    v53 = *((_QWORD *)v9 + 24);
    swift_retain();
    if (v53 >> 60 == 15)
    {
      *(_OWORD *)(v8 + 184) = *(_OWORD *)v52;
    }
    else
    {
      v60 = *v52;
      sub_1AD0040A0(*v52, v53);
      *((_QWORD *)v8 + 23) = v60;
      *((_QWORD *)v8 + 24) = v53;
    }
    *((_DWORD *)v8 + 50) = *((_DWORD *)v9 + 50);
    v61 = *((_QWORD *)v9 + 27);
    *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
    *((_QWORD *)v8 + 27) = v61;
    v62 = (uint64_t *)(v9 + 224);
    v63 = *((_QWORD *)v9 + 29);
    swift_retain();
    if (v63 >> 60 == 15)
    {
      *((_OWORD *)v8 + 14) = *(_OWORD *)v62;
      goto LABEL_71;
    }
    goto LABEL_66;
  }
  if (!v45)
  {
    sub_1AD0AEC8C((uint64_t *)v8 + 21);
    *v44 = *v46;
    v55 = *(_OWORD *)(v9 + 200);
    v54 = *(_OWORD *)(v9 + 216);
    v56 = *(_OWORD *)(v9 + 184);
    *((_QWORD *)v8 + 29) = *((_QWORD *)v9 + 29);
    *(_OWORD *)(v8 + 200) = v55;
    *(_OWORD *)(v8 + 216) = v54;
    *(_OWORD *)(v8 + 184) = v56;
    goto LABEL_71;
  }
  v47 = *((_QWORD *)v9 + 22);
  *((_QWORD *)v8 + 21) = v45;
  *((_QWORD *)v8 + 22) = v47;
  swift_retain();
  swift_release();
  v48 = (uint64_t *)(v9 + 184);
  v49 = *((_QWORD *)v9 + 24);
  if (*((_QWORD *)v8 + 24) >> 60 == 15)
  {
    if (v49 >> 60 != 15)
    {
      v50 = *v48;
      sub_1AD0040A0(*v48, *((_QWORD *)v9 + 24));
      *((_QWORD *)v8 + 23) = v50;
      *((_QWORD *)v8 + 24) = v49;
      goto LABEL_64;
    }
    goto LABEL_58;
  }
  if (v49 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 184));
LABEL_58:
    *(_OWORD *)(v8 + 184) = *(_OWORD *)v48;
    goto LABEL_64;
  }
  v64 = *v48;
  sub_1AD0040A0(*v48, *((_QWORD *)v9 + 24));
  v65 = *((_QWORD *)v8 + 23);
  v66 = *((_QWORD *)v8 + 24);
  *((_QWORD *)v8 + 23) = v64;
  *((_QWORD *)v8 + 24) = v49;
  sub_1AD00412C(v65, v66);
LABEL_64:
  *((_DWORD *)v8 + 50) = *((_DWORD *)v9 + 50);
  v67 = *((_QWORD *)v9 + 27);
  *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
  *((_QWORD *)v8 + 27) = v67;
  swift_retain();
  swift_release();
  v62 = (uint64_t *)(v9 + 224);
  v63 = *((_QWORD *)v9 + 29);
  if (*((_QWORD *)v8 + 29) >> 60 == 15)
  {
    if (v63 >> 60 != 15)
    {
LABEL_66:
      v68 = *v62;
      sub_1AD0040A0(*v62, v63);
      *((_QWORD *)v8 + 28) = v68;
      *((_QWORD *)v8 + 29) = v63;
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v63 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 224));
LABEL_69:
    *((_OWORD *)v8 + 14) = *(_OWORD *)v62;
    goto LABEL_71;
  }
  v69 = *v62;
  sub_1AD0040A0(*v62, *((_QWORD *)v9 + 29));
  v70 = *((_QWORD *)v8 + 28);
  v71 = *((_QWORD *)v8 + 29);
  *((_QWORD *)v8 + 28) = v69;
  *((_QWORD *)v8 + 29) = v63;
  sub_1AD00412C(v70, v71);
LABEL_71:
  *((_QWORD *)v8 + 30) = *((_QWORD *)v9 + 30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72 = *((_QWORD *)v9 + 32);
  *((_QWORD *)v8 + 31) = *((_QWORD *)v9 + 31);
  *((_QWORD *)v8 + 32) = v72;
  swift_retain();
  swift_release();
  v73 = (uint64_t *)(v9 + 264);
  v74 = *((_QWORD *)v9 + 34);
  v75 = v74 & 0xF000000000000000;
  v124 = a2;
  if (*((_QWORD *)v8 + 34) >> 60 == 11)
  {
    if (v75 == 0xB000000000000000)
      goto LABEL_81;
LABEL_77:
    if (v74 >> 60 != 15)
    {
      v76 = *v73;
      sub_1AD0040A0(*v73, v74);
      *((_QWORD *)v8 + 33) = v76;
      *((_QWORD *)v8 + 34) = v74;
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v75 == 0xB000000000000000)
  {
    sub_1AD009758((uint64_t)(v8 + 264), &qword_1ED2E3250);
LABEL_81:
    *(_OWORD *)(v8 + 264) = *(_OWORD *)v73;
    goto LABEL_82;
  }
  if (*((_QWORD *)v8 + 34) >> 60 == 15)
    goto LABEL_77;
  if (v74 >> 60 == 15)
  {
    sub_1AD007EC0((uint64_t)(v8 + 264));
    goto LABEL_81;
  }
  v120 = *v73;
  sub_1AD0040A0(*v73, v74);
  v121 = *((_QWORD *)v8 + 33);
  v122 = *((_QWORD *)v8 + 34);
  *((_QWORD *)v8 + 33) = v120;
  *((_QWORD *)v8 + 34) = v74;
  sub_1AD00412C(v121, v122);
LABEL_82:
  v77 = type metadata accessor for CloudKitSharingToken();
  v78 = *(int *)(v77 + 24);
  v79 = &v8[v78];
  v80 = &v9[v78];
  v81 = *(_QWORD *)&v9[v78 + 8];
  *(_QWORD *)v79 = *(_QWORD *)&v9[v78];
  *((_QWORD *)v79 + 1) = v81;
  swift_retain();
  swift_release();
  v82 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v83 = &v79[v82];
  v84 = &v80[v82];
  v85 = sub_1AD63AF28();
  v86 = *(_QWORD *)(v85 - 8);
  v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 48);
  v88 = v87(v83, 1, v85);
  v89 = v87(v84, 1, v85);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v83, v84, v85);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v83, v85);
LABEL_87:
    v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 24))(v83, v84, v85);
LABEL_88:
  v91 = *(int *)(v77 + 28);
  v92 = &v8[v91];
  v93 = &v9[v91];
  v94 = *(_QWORD *)&v9[v91 + 8];
  *(_QWORD *)v92 = *(_QWORD *)&v9[v91];
  *((_QWORD *)v92 + 1) = v94;
  swift_retain();
  swift_release();
  v95 = *((_QWORD *)v93 + 3);
  if (*((_QWORD *)v92 + 3) == 1)
  {
    v96 = v123;
    if (v95 != 1)
    {
      *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  v96 = v123;
  if (v95 == 1)
  {
    sub_1AD009758((uint64_t)(v92 + 16), &qword_1ED2E3198);
LABEL_93:
    *((_OWORD *)v92 + 1) = *((_OWORD *)v93 + 1);
    goto LABEL_95;
  }
  *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
  *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_95:
  v97 = v96[6];
  v98 = (_QWORD *)((char *)a1 + v97);
  v99 = (char *)v124 + v97;
  v100 = *(_QWORD *)((char *)v124 + v97 + 8);
  *v98 = *(_QWORD *)((char *)v124 + v97);
  v98[1] = v100;
  swift_retain();
  swift_release();
  v98[2] = *((_QWORD *)v99 + 2);
  v98[3] = *((_QWORD *)v99 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v96[7];
  v102 = (char *)a1 + v101;
  v103 = (char *)v124 + v101;
  v104 = sub_1AD63B03C();
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v106(v102, 1, v104);
  v108 = v106(v103, 1, v104);
  if (!v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 24))(v102, v103, v104);
      goto LABEL_101;
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v104);
    goto LABEL_100;
  }
  if (v108)
  {
LABEL_100:
    v109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_101;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
LABEL_101:
  v110 = v96[8];
  v111 = (_QWORD *)((char *)a1 + v110);
  v112 = (_QWORD *)((char *)v124 + v110);
  *v111 = *v112;
  v111[1] = v112[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1AD413A74(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_OWORD *)((char *)a2 + v7 + 208);
  *((_OWORD *)v8 + 12) = *(_OWORD *)((char *)a2 + v7 + 192);
  *((_OWORD *)v8 + 13) = v10;
  *((_OWORD *)v8 + 14) = *(_OWORD *)((char *)a2 + v7 + 224);
  *((_QWORD *)v8 + 30) = *(_QWORD *)((char *)a2 + v7 + 240);
  v11 = *(_OWORD *)((char *)a2 + v7 + 144);
  *((_OWORD *)v8 + 8) = *(_OWORD *)((char *)a2 + v7 + 128);
  *((_OWORD *)v8 + 9) = v11;
  v12 = *(_OWORD *)((char *)a2 + v7 + 176);
  *((_OWORD *)v8 + 10) = *(_OWORD *)((char *)a2 + v7 + 160);
  *((_OWORD *)v8 + 11) = v12;
  v13 = *(_OWORD *)((char *)a2 + v7 + 80);
  *((_OWORD *)v8 + 4) = *(_OWORD *)((char *)a2 + v7 + 64);
  *((_OWORD *)v8 + 5) = v13;
  v14 = *(_OWORD *)((char *)a2 + v7 + 112);
  *((_OWORD *)v8 + 6) = *(_OWORD *)((char *)a2 + v7 + 96);
  *((_OWORD *)v8 + 7) = v14;
  v15 = *(_OWORD *)((char *)a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
  *((_OWORD *)v8 + 1) = v15;
  v16 = *(_OWORD *)((char *)a2 + v7 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 3) = v16;
  *(_OWORD *)(v8 + 248) = *(_OWORD *)((char *)a2 + v7 + 248);
  *(_OWORD *)((char *)a1 + v7 + 264) = *(_OWORD *)((char *)a2 + v7 + 264);
  v17 = type metadata accessor for CloudKitSharingToken();
  v18 = *(int *)(v17 + 24);
  v19 = &v8[v18];
  v20 = &v9[v18];
  *(_OWORD *)&v8[v18] = *(_OWORD *)&v9[v18];
  v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v22 = &v19[v21];
  v23 = &v20[v21];
  v24 = sub_1AD63AF28();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = *(int *)(v17 + 28);
  v28 = &v8[v27];
  v29 = &v9[v27];
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  v31 = a3[6];
  v32 = a3[7];
  v33 = (_OWORD *)((char *)a1 + v31);
  v34 = (_OWORD *)((char *)a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = (char *)a1 + v32;
  v37 = (char *)a2 + v32;
  v38 = sub_1AD63B03C();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1AD413C94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(void *, uint64_t, uint64_t);
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v85 = a3;
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  swift_release();
  v10 = (_OWORD *)(v9 + 40);
  v11 = *(_QWORD *)(v8 + 48);
  if (v11 >> 60 == 11)
    goto LABEL_7;
  v12 = *(_QWORD *)(v9 + 48);
  if (v12 >> 60 == 11)
  {
    sub_1AD009758(v8 + 40, &qword_1ED2E3250);
LABEL_7:
    *(_OWORD *)(v8 + 40) = *v10;
    goto LABEL_8;
  }
  if (v11 >> 60 == 15)
    goto LABEL_7;
  if (v12 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 40);
    goto LABEL_7;
  }
  v82 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)v10;
  *(_QWORD *)(v8 + 48) = v12;
  sub_1AD00412C(v82, v11);
LABEL_8:
  if (!*(_QWORD *)(v8 + 72))
  {
LABEL_15:
    v19 = *(_OWORD *)(v9 + 72);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    *(_OWORD *)(v8 + 72) = v19;
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(v9 + 72);
  if (!v13)
  {
    sub_1AD0AEC58(v8 + 56);
    goto LABEL_15;
  }
  v14 = *(_DWORD *)(v9 + 60);
  *(_DWORD *)(v8 + 56) = *(_DWORD *)(v9 + 56);
  *(_DWORD *)(v8 + 60) = v14;
  *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
  v15 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v8 + 72) = v13;
  *(_QWORD *)(v8 + 80) = v15;
  swift_release();
  v16 = (_OWORD *)(v9 + 88);
  v17 = *(_QWORD *)(v8 + 96);
  if (v17 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(v8 + 88) = *v16;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)(v9 + 96);
  if (v18 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 88);
    goto LABEL_13;
  }
  v34 = *(_QWORD *)(v8 + 88);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)v16;
  *(_QWORD *)(v8 + 96) = v18;
  sub_1AD00412C(v34, v17);
LABEL_16:
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
  swift_release();
  v20 = (_OWORD *)(v9 + 120);
  v21 = *(_QWORD *)(v8 + 128);
  if (v21 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(v8 + 120) = *v20;
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(v9 + 128);
  if (v22 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 120);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v8 + 120);
  *(_QWORD *)(v8 + 120) = *(_QWORD *)v20;
  *(_QWORD *)(v8 + 128) = v22;
  sub_1AD00412C(v23, v21);
LABEL_21:
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
  swift_release();
  v24 = (_OWORD *)(v9 + 152);
  v25 = *(_QWORD *)(v8 + 160);
  if (v25 >> 60 == 11)
  {
LABEL_27:
    *(_OWORD *)(v8 + 152) = *v24;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v9 + 160);
  if (v26 >> 60 == 11)
  {
    sub_1AD009758(v8 + 152, &qword_1ED2E3250);
    goto LABEL_27;
  }
  if (v25 >> 60 == 15)
    goto LABEL_27;
  if (v26 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 152);
    goto LABEL_27;
  }
  v83 = *(_QWORD *)(v8 + 152);
  *(_QWORD *)(v8 + 152) = *(_QWORD *)v24;
  *(_QWORD *)(v8 + 160) = v26;
  sub_1AD00412C(v83, v25);
LABEL_28:
  v27 = *(_QWORD *)(v9 + 168);
  if (!*(_QWORD *)(v8 + 168))
  {
LABEL_35:
    v32 = *(_OWORD *)(v9 + 216);
    *(_OWORD *)(v8 + 200) = *(_OWORD *)(v9 + 200);
    *(_OWORD *)(v8 + 216) = v32;
    *(_QWORD *)(v8 + 232) = *(_QWORD *)(v9 + 232);
    v33 = *(_OWORD *)(v9 + 184);
    *(_OWORD *)(v8 + 168) = *(_OWORD *)(v9 + 168);
    *(_OWORD *)(v8 + 184) = v33;
    goto LABEL_43;
  }
  if (!v27)
  {
    sub_1AD0AEC8C((uint64_t *)(v8 + 168));
    goto LABEL_35;
  }
  v28 = *(_QWORD *)(v9 + 176);
  *(_QWORD *)(v8 + 168) = v27;
  *(_QWORD *)(v8 + 176) = v28;
  swift_release();
  v29 = (_OWORD *)(v9 + 184);
  v30 = *(_QWORD *)(v8 + 192);
  if (v30 >> 60 == 15)
  {
LABEL_33:
    *(_OWORD *)(v8 + 184) = *v29;
    goto LABEL_38;
  }
  v31 = *(_QWORD *)(v9 + 192);
  if (v31 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 184);
    goto LABEL_33;
  }
  v35 = *(_QWORD *)(v8 + 184);
  *(_QWORD *)(v8 + 184) = *(_QWORD *)v29;
  *(_QWORD *)(v8 + 192) = v31;
  sub_1AD00412C(v35, v30);
LABEL_38:
  *(_DWORD *)(v8 + 200) = *(_DWORD *)(v9 + 200);
  *(_OWORD *)(v8 + 208) = *(_OWORD *)(v9 + 208);
  swift_release();
  v36 = (_OWORD *)(v9 + 224);
  v37 = *(_QWORD *)(v8 + 232);
  if (v37 >> 60 == 15)
  {
LABEL_41:
    *(_OWORD *)(v8 + 224) = *v36;
    goto LABEL_43;
  }
  v38 = *(_QWORD *)(v9 + 232);
  if (v38 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 224);
    goto LABEL_41;
  }
  v39 = *(_QWORD *)(v8 + 224);
  *(_QWORD *)(v8 + 224) = *(_QWORD *)v36;
  *(_QWORD *)(v8 + 232) = v38;
  sub_1AD00412C(v39, v37);
LABEL_43:
  *(_QWORD *)(v8 + 240) = *(_QWORD *)(v9 + 240);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
  swift_release();
  v40 = (_OWORD *)(v9 + 264);
  v41 = *(_QWORD *)(v8 + 272);
  v86 = a2;
  if (v41 >> 60 == 11)
  {
LABEL_49:
    *(_OWORD *)(v8 + 264) = *v40;
    goto LABEL_50;
  }
  v42 = *(_QWORD *)(v9 + 272);
  if (v42 >> 60 == 11)
  {
    sub_1AD009758(v8 + 264, &qword_1ED2E3250);
    goto LABEL_49;
  }
  if (v41 >> 60 == 15)
    goto LABEL_49;
  if (v42 >> 60 == 15)
  {
    sub_1AD007EC0(v8 + 264);
    goto LABEL_49;
  }
  v84 = *(_QWORD *)(v8 + 264);
  *(_QWORD *)(v8 + 264) = *(_QWORD *)v40;
  *(_QWORD *)(v8 + 272) = v42;
  sub_1AD00412C(v84, v41);
LABEL_50:
  v43 = type metadata accessor for CloudKitSharingToken();
  v44 = *(int *)(v43 + 24);
  v45 = v8 + v44;
  v46 = v9 + v44;
  *(_OWORD *)(v8 + v44) = *(_OWORD *)(v9 + v44);
  swift_release();
  v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E1A30) + 28);
  v48 = (void *)(v45 + v47);
  v49 = (void *)(v46 + v47);
  v50 = sub_1AD63AF28();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
  v53 = v52(v48, 1, v50);
  v54 = v52(v49, 1, v50);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(void *, void *, uint64_t))(v51 + 32))(v48, v49, v50);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v54)
  {
    (*(void (**)(void *, uint64_t))(v51 + 8))(v48, v50);
LABEL_55:
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(void *, void *, uint64_t))(v51 + 40))(v48, v49, v50);
LABEL_56:
  v56 = *(int *)(v43 + 28);
  v57 = v8 + v56;
  v58 = v9 + v56;
  *(_OWORD *)(v8 + v56) = *(_OWORD *)(v9 + v56);
  swift_release();
  v59 = (_OWORD *)(v57 + 16);
  v60 = (_OWORD *)(v58 + 16);
  if (*(_QWORD *)(v57 + 24) == 1)
  {
    *v59 = *v60;
    v61 = v85;
  }
  else
  {
    v62 = *(_QWORD *)(v58 + 24);
    v61 = v85;
    if (v62 == 1)
    {
      sub_1AD009758(v57 + 16, &qword_1ED2E3198);
      *v59 = *v60;
    }
    else
    {
      *(_QWORD *)(v57 + 16) = *(_QWORD *)v60;
      *(_QWORD *)(v57 + 24) = v62;
      swift_bridgeObjectRelease();
    }
  }
  v63 = v61[6];
  v64 = a1 + v63;
  v65 = v86 + v63;
  *(_OWORD *)(a1 + v63) = *(_OWORD *)(v86 + v63);
  swift_release();
  v66 = *(_QWORD *)(v65 + 24);
  *(_QWORD *)(v64 + 16) = *(_QWORD *)(v65 + 16);
  *(_QWORD *)(v64 + 24) = v66;
  swift_bridgeObjectRelease();
  v67 = v61[7];
  v68 = (void *)(a1 + v67);
  v69 = (void *)(v86 + v67);
  v70 = sub_1AD63B03C();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v68, 1, v70);
  v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 40))(v68, v69, v70);
      goto LABEL_67;
    }
    (*(void (**)(void *, uint64_t))(v71 + 8))(v68, v70);
    goto LABEL_66;
  }
  if (v74)
  {
LABEL_66:
    v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(void *, void *, uint64_t))(v71 + 32))(v68, v69, v70);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
LABEL_67:
  v76 = v61[8];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (uint64_t *)(v86 + v76);
  v80 = *v78;
  v79 = v78[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD414350()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD41435C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CloudKitSharingToken();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1AD414400()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1AD41440C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for CloudKitSharingToken();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1AD4144AC()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CloudKitSharingToken();
  if (v0 <= 0x3F)
  {
    sub_1AD0E67F0();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_1AD414544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2688);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unsigned __int8 *sub_1AD4145A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_1AD415470();
  swift_bridgeObjectRetain();
  v7 = sub_1AD63B8A0();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1AD414914();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_1AD63BDB0();
  }
LABEL_7:
  v13 = sub_1AD414698(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1AD414698(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1AD414914()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1AD63B8AC();
  v4 = sub_1AD414990(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1AD414990(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1AD414AD4(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1AD414544(v9, 0);
      v12 = sub_1AD414BC0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1AF44A4DC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1AF44A4DCLL);
LABEL_9:
      sub_1AD63BDB0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1AF44A4DC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1AD414AD4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1AD37E9D0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1AD37E9D0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1AD63B858();
  }
  __break(1u);
  return result;
}

unint64_t sub_1AD414BC0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1AD37E9D0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1AD63B864();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1AD63BDB0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1AD37E9D0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1AD63B840();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1AD414DD0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_1AD63BDB0();
  }
  result = sub_1AD414F14((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_1AD414EA0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;

  if ((a6 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a6) & 0xF;
  else
    v6 = a5 & 0xFFFFFFFFFFFFLL;
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6)
    return 1;
  else
    return sub_1AD63C0C8() & 1;
}

uint64_t sub_1AD414F14(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1AD37E9D0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_1AD63B858();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1AD37E9D0(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1AD37E9D0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_1AD63B858();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_1AD415338()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v6;
  char v7;
  int v8;
  char v10;
  char v11;

  sub_1AD0442F4();
  v0 = (_QWORD *)sub_1AD63BCA8();
  v1 = v0;
  if (v0[2] != 2)
    goto LABEL_6;
  if ((sub_1AD414EA0(v0[4], v0[5], v0[6], v0[7], 0x657079746B68, 0xE600000000000000) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  v2 = v1[8];
  v3 = v1[9];
  v5 = v1[10];
  v4 = v1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!((v3 ^ v2) >> 14))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1AD414DD0(v2, v3, v5, v4, 10);
  if ((v6 & 0x100) != 0)
  {
    sub_1AD4145A8(v2, v3, v5, v4, 10);
    v11 = v10;
    swift_bridgeObjectRelease();
    v8 = v11 & 1;
  }
  else
  {
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = v7 & 1;
  }
  return v8 ^ 1u;
}

unint64_t sub_1AD415470()
{
  unint64_t result;

  result = qword_1EECDC2F0;
  if (!qword_1EECDC2F0)
  {
    result = MEMORY[0x1AF44BDF0](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EECDC2F0);
  }
  return result;
}

uint64_t sub_1AD4154B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD00408C(v4, v5);
}

__n128 sub_1AD4154E8(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v1[1].n128_i64[0];
  v6 = v1[1].n128_u64[1];
  swift_release();
  sub_1AD004118(v5, v6);
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_1AD41553C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    sub_1AD0040A0(v2, v1);
    return v2;
  }
  return result;
}

uint64_t sub_1AD4155C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return swift_retain();
}

__n128 sub_1AD4155DC(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u8[8];
  swift_release();
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  v1[1].n128_u8[8] = v4;
  return result;
}

uint64_t sub_1AD415620()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    return *(_QWORD *)(v0 + 16);
  result = sub_1AD63BE28();
  __break(1u);
  return result;
}

uint64_t (*sub_1AD415684(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t (*result)(uint64_t *, char);

  a1[2] = v1;
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 >> 60 == 15)
  {
    result = (uint64_t (*)(uint64_t *, char))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 16);
    *a1 = v4;
    a1[1] = v2;
    sub_1AD0040A0(v4, v2);
    return sub_1AD327FD8;
  }
  return result;
}

void (*sub_1AD415710(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  swift_retain();
  sub_1AD00408C(v6, v7);
  return sub_1AD328118;
}

uint64_t sub_1AD415774@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AD63BE94();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1AD4157C8()
{
  return 0x70612D656C707061;
}

uint64_t sub_1AD4157EC()
{
  sub_1AD63C4AC();
  sub_1AD63B7F8();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD415848()
{
  return sub_1AD63B7F8();
}

uint64_t sub_1AD41586C()
{
  sub_1AD63C4AC();
  sub_1AD63B7F8();
  return sub_1AD63C4F4();
}

uint64_t sub_1AD4158C4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AD63BE94();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1AD415914(_QWORD *a1@<X8>)
{
  *a1 = 0x70612D656C707061;
  a1[1] = 0xEF74736574746170;
}

uint64_t sub_1AD41593C()
{
  sub_1AD4163B0();
  return sub_1AD63B924();
}

uint64_t sub_1AD415998()
{
  sub_1AD4163B0();
  return sub_1AD63B8C4();
}

uint64_t sub_1AD4159E4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(result + 24) & 1) != 0)
  {
    result = sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a2 = *(_QWORD *)(result + 16);
  }
  return result;
}

uint64_t sub_1AD415A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t *);
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *))v1;
  v6 = a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v1 + 16) = a1;
    *(_BYTE *)(v1 + 24) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_1AD415B14(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*result)(uint64_t *);

  a1[1] = v1;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    result = (uint64_t (*)(uint64_t *))sub_1AD63BE28();
    __break(1u);
  }
  else
  {
    *a1 = *(_QWORD *)(v1 + 16);
    return sub_1AD415B88;
  }
  return result;
}

uint64_t sub_1AD415B88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(uint64_t (**)(uint64_t *))v1;
  v6 = *a1;
  result = v3(&v6);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v1 + 16) = v2;
    *(_BYTE *)(v1 + 24) = 0;
  }
  else
  {
    sub_1AD009690();
    swift_allocError();
    *v5 = 0x6E776F6E6B6E753CLL;
    v5[1] = 0xE90000000000003ELL;
    v5[2] = 0xD00000000000001CLL;
    v5[3] = 0x80000001AD69E8C0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void (*sub_1AD415C50(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  *v3 = *(_QWORD *)v1;
  v3[1] = v4;
  v3[2] = v5;
  *((_BYTE *)v3 + 24) = v6;
  swift_retain();
  return sub_1AD39B914;
}

uint64_t (*sub_1AD415CBC())()
{
  return nullsub_1;
}

uint64_t sub_1AD415CCC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD415CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_1AD415CFC())()
{
  return nullsub_1;
}

uint64_t sub_1AD415D0C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD415D14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*sub_1AD415D3C())()
{
  return nullsub_1;
}

uint64_t sub_1AD415D4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return sub_1AD00408C(v4, v5);
}

uint64_t sub_1AD415D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD2A2BCC, (uint64_t (*)(void))sub_1AD2A2B44);
}

uint64_t sub_1AD415D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD295530, (uint64_t (*)(void))sub_1AD2955C8);
}

unint64_t sub_1AD415DAC()
{
  unint64_t result;

  result = qword_1EECDC2F8;
  if (!qword_1EECDC2F8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683934, &type metadata for RCSClientAuthenticityRequest.Method.Name);
    atomic_store(result, (unint64_t *)&qword_1EECDC2F8);
  }
  return result;
}

uint64_t sub_1AD415DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD290468, (uint64_t (*)(void))sub_1AD2904AC);
}

uint64_t sub_1AD415E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD002D9C(a1, a2, a3, (uint64_t (*)(void))sub_1AD415E18, (uint64_t (*)(void))sub_1AD415E5C);
}

unint64_t sub_1AD415E18()
{
  unint64_t result;

  result = qword_1EECDC300;
  if (!qword_1EECDC300)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD652DE8, &type metadata for RCSClientAuthenticityRequest);
    atomic_store(result, (unint64_t *)&qword_1EECDC300);
  }
  return result;
}

unint64_t sub_1AD415E5C()
{
  unint64_t result;

  result = qword_1EECDC308;
  if (!qword_1EECDC308)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD652E10, &type metadata for RCSClientAuthenticityRequest);
    atomic_store(result, (unint64_t *)&qword_1EECDC308);
  }
  return result;
}

uint64_t sub_1AD415EA4(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_1AD0040A0(*a1, v2);
  return sub_1AD003184(v1, v2);
}

uint64_t sub_1AD415EE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  return sub_1AD00408C(v3, v4);
}

uint64_t sub_1AD415F24(uint64_t *a1)
{
  return sub_1AD00387C(*a1);
}

uint64_t sub_1AD415F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  return swift_retain();
}

uint64_t sub_1AD415F68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  swift_retain();
  result = swift_release();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

ValueMetadata *type metadata accessor for RCSClientAuthenticityRequest()
{
  return &type metadata for RCSClientAuthenticityRequest;
}

ValueMetadata *type metadata accessor for RCSClientAuthenticityRequest.Parameter()
{
  return &type metadata for RCSClientAuthenticityRequest.Parameter;
}

uint64_t _s9BlastDoor28RCSClientAuthenticityRequestV9ParameterO9ChallengeVwxx_0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_release();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >> 60 != 15)
    return sub_1AD00412C(*(_QWORD *)(a1 + 16), v3);
  return result;
}

uint64_t _s9BlastDoor28RCSClientAuthenticityRequestV9ParameterO9ChallengeVwcp_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_retain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    sub_1AD0040A0(v6, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
  }
  return a1;
}

_QWORD *_s9BlastDoor28RCSClientAuthenticityRequestV9ParameterO9ChallengeVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2 + 2;
  v6 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_1AD0040A0(*v5, v6);
      v9 = a1[2];
      v10 = a1[3];
      a1[2] = v8;
      a1[3] = v6;
      sub_1AD00412C(v9, v10);
      return a1;
    }
    sub_1AD007EC0((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
    return a1;
  }
  v7 = *v5;
  sub_1AD0040A0(*v5, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t _s9BlastDoor28RCSClientAuthenticityRequestV9ParameterO9ChallengeVwta_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >> 60 != 15)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v4;
      *(_QWORD *)(a1 + 24) = v6;
      sub_1AD00412C(v7, v5);
      return a1;
    }
    sub_1AD007EC0(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
  return a1;
}

ValueMetadata *type metadata accessor for RCSClientAuthenticityRequest.Parameter.Challenge()
{
  return &type metadata for RCSClientAuthenticityRequest.Parameter.Challenge;
}

uint64_t initializeWithCopy for RCSClientAuthenticityRequest.Method(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RCSClientAuthenticityRequest.Method(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RCSClientAuthenticityRequest.Method(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RCSClientAuthenticityRequest.Method()
{
  return &type metadata for RCSClientAuthenticityRequest.Method;
}

uint64_t storeEnumTagSinglePayload for RCSClientAuthenticityRequest.Method.Name(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AD416354 + 4 * byte_1AD6838F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AD416374 + 4 * byte_1AD6838F5[v4]))();
}

_BYTE *sub_1AD416354(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AD416374(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD41637C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD416384(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD41638C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD416394(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RCSClientAuthenticityRequest.Method.Name()
{
  return &type metadata for RCSClientAuthenticityRequest.Method.Name;
}

unint64_t sub_1AD4163B0()
{
  unint64_t result;

  result = qword_1EECDC310;
  if (!qword_1EECDC310)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68399C, &type metadata for RCSClientAuthenticityRequest.Method.Name);
    atomic_store(result, (unint64_t *)&qword_1EECDC310);
  }
  return result;
}

uint64_t sub_1AD4163F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1AD416434(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1AD41646C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD4164B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD4164FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD416544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD41658C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD416598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1AD4165D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD4165E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD4280);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SwiftRegexValidator()
{
  uint64_t result;

  result = qword_1EECDC318;
  if (!qword_1EECDC318)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1AD416664()
{
  unint64_t v0;

  sub_1AD4166CC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1AD4166CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EECDC328)
  {
    v0 = sub_1AD63B228();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EECDC328);
  }
}

uint64_t PassPreview.init(headerImage:icon:background:primaryText:secondaryText:tertiaryText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[23];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  v33 = a4[4];
  v34 = *a4;
  v32 = a4[5];
  v39 = a5[1];
  v40 = *a5;
  v37 = a5[3];
  v38 = a5[2];
  v35 = a5[5];
  v36 = a5[4];
  v45 = a6[1];
  v46 = *a6;
  v43 = a6[3];
  v44 = a6[2];
  v41 = a6[5];
  v42 = a6[4];
  *(_OWORD *)(a7 + 240) = 0u;
  *(_OWORD *)(a7 + 256) = 0u;
  *(_OWORD *)(a7 + 208) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_OWORD *)(a7 + 176) = 0u;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 144) = 0u;
  *(_OWORD *)(a7 + 160) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_QWORD *)(a7 + 272) = 0x1FFFFFFFELL;
  v14 = (_OWORD *)(a7 + 280);
  *(_OWORD *)(a7 + 280) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(_OWORD *)(a7 + 312) = 0u;
  *(_OWORD *)(a7 + 328) = 0u;
  *(_OWORD *)(a7 + 344) = 0u;
  *(_OWORD *)(a7 + 360) = 0u;
  *(_OWORD *)(a7 + 376) = 0u;
  *(_OWORD *)(a7 + 392) = 0u;
  *(_OWORD *)(a7 + 408) = 0u;
  *(_OWORD *)(a7 + 424) = 0u;
  *(_OWORD *)(a7 + 440) = 0u;
  *(_OWORD *)(a7 + 456) = 0u;
  *(_OWORD *)(a7 + 472) = 0u;
  *(_OWORD *)(a7 + 488) = 0u;
  *(_OWORD *)(a7 + 504) = 0u;
  *(_OWORD *)(a7 + 520) = 0u;
  *(_OWORD *)(a7 + 536) = 0u;
  *(_OWORD *)(a7 + 552) = 0u;
  *(_OWORD *)(a7 + 568) = 0u;
  *(_OWORD *)(a7 + 584) = 0u;
  *(_OWORD *)(a7 + 600) = 0u;
  *(_OWORD *)(a7 + 616) = 0u;
  *(_OWORD *)(a7 + 632) = 0u;
  *(_OWORD *)(a7 + 648) = 0u;
  *(_OWORD *)(a7 + 664) = 0u;
  *(_OWORD *)(a7 + 680) = 0u;
  *(_OWORD *)(a7 + 696) = 0u;
  *(_QWORD *)(a7 + 712) = 0x1FFFFFFFELL;
  v15 = (_OWORD *)(a7 + 1352);
  *(_OWORD *)(a7 + 720) = 0u;
  *(_OWORD *)(a7 + 736) = 0u;
  *(_OWORD *)(a7 + 752) = 0u;
  *(_OWORD *)(a7 + 768) = 0u;
  *(_OWORD *)(a7 + 784) = 0u;
  *(_OWORD *)(a7 + 800) = 0u;
  *(_OWORD *)(a7 + 816) = 0u;
  *(_OWORD *)(a7 + 832) = 0u;
  *(_OWORD *)(a7 + 848) = 0u;
  *(_OWORD *)(a7 + 864) = 0u;
  *v15 = 0u;
  v15[1] = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  v15[4] = 0u;
  v15[5] = 0u;
  v15[6] = 0u;
  v15[7] = 0u;
  v15[8] = 0u;
  sub_1ACFF64C0(a1, (uint64_t)&v65, &qword_1ED2E2680);
  if (*((_QWORD *)&v66 + 1))
  {
    v93 = v77;
    v94 = v78;
    v95 = v79;
    v96 = v80;
    v89 = v73;
    v90 = v74;
    v91 = v75;
    v92 = v76;
    v85 = v69;
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v81 = v65;
    v82 = v66;
    v83 = v67;
    v84 = v68;
    sub_1AD009758(a7, &qword_1EECDC330);
    LOWORD(v64) = 0;
    sub_1AD00FD58(&v64);
    sub_1AD00E830(&v64, a7 + 248);
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_QWORD *)(a7 + 240) = 0;
    sub_1AD0CFB8C((uint64_t)&v81, (uint64_t)v63);
    sub_1AD0CFB8C((uint64_t)v63, (uint64_t)&v47);
    sub_1AD009758(a7, &qword_1ED2E2680);
    v16 = v60;
    *(_OWORD *)(a7 + 192) = v59;
    *(_OWORD *)(a7 + 208) = v16;
    *(_OWORD *)(a7 + 224) = v61;
    *(_QWORD *)(a7 + 240) = v62;
    v17 = v56;
    *(_OWORD *)(a7 + 128) = v55;
    *(_OWORD *)(a7 + 144) = v17;
    v18 = v58;
    *(_OWORD *)(a7 + 160) = v57;
    *(_OWORD *)(a7 + 176) = v18;
    v19 = v52;
    *(_OWORD *)(a7 + 64) = v51;
    *(_OWORD *)(a7 + 80) = v19;
    v20 = v54;
    *(_OWORD *)(a7 + 96) = v53;
    *(_OWORD *)(a7 + 112) = v20;
    v21 = v48;
    *(_OWORD *)a7 = v47;
    *(_OWORD *)(a7 + 16) = v21;
    v22 = v50;
    *(_OWORD *)(a7 + 32) = v49;
    *(_OWORD *)(a7 + 48) = v22;
    sub_1AD046A30(v63);
    sub_1AD046A30(&v81);
  }
  else
  {
    sub_1AD009758((uint64_t)&v65, &qword_1ED2E2680);
    sub_1AD009758(a7, &qword_1EECDC330);
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_QWORD *)(a7 + 272) = 0x1FFFFFFFELL;
    *v14 = 0u;
    v14[1] = 0u;
    v14[2] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
  }
  v23 = (_OWORD *)(a7 + 440);
  sub_1ACFF64C0(a2, (uint64_t)&v65, &qword_1ED2E2680);
  if (*((_QWORD *)&v66 + 1))
  {
    v93 = v77;
    v94 = v78;
    v95 = v79;
    v96 = v80;
    v89 = v73;
    v90 = v74;
    v91 = v75;
    v92 = v76;
    v85 = v69;
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v81 = v65;
    v82 = v66;
    v83 = v67;
    v84 = v68;
    sub_1AD009758(a7 + 440, &qword_1EECDC330);
    LOWORD(v64) = 0;
    sub_1AD00FD58(&v64);
    sub_1AD00E830(&v64, a7 + 688);
    *v23 = 0u;
    *(_OWORD *)(a7 + 456) = 0u;
    *(_OWORD *)(a7 + 472) = 0u;
    *(_OWORD *)(a7 + 488) = 0u;
    *(_OWORD *)(a7 + 504) = 0u;
    *(_OWORD *)(a7 + 520) = 0u;
    *(_OWORD *)(a7 + 536) = 0u;
    *(_OWORD *)(a7 + 552) = 0u;
    *(_OWORD *)(a7 + 568) = 0u;
    *(_OWORD *)(a7 + 584) = 0u;
    *(_OWORD *)(a7 + 600) = 0u;
    *(_OWORD *)(a7 + 616) = 0u;
    *(_OWORD *)(a7 + 632) = 0u;
    *(_OWORD *)(a7 + 648) = 0u;
    *(_OWORD *)(a7 + 664) = 0u;
    *(_QWORD *)(a7 + 680) = 0;
    sub_1AD0CFB8C((uint64_t)&v81, (uint64_t)v63);
    sub_1AD0CFB8C((uint64_t)v63, (uint64_t)&v47);
    sub_1AD009758(a7 + 440, &qword_1ED2E2680);
    v24 = v60;
    *(_OWORD *)(a7 + 632) = v59;
    *(_OWORD *)(a7 + 648) = v24;
    *(_OWORD *)(a7 + 664) = v61;
    *(_QWORD *)(a7 + 680) = v62;
    v25 = v56;
    *(_OWORD *)(a7 + 568) = v55;
    *(_OWORD *)(a7 + 584) = v25;
    v26 = v58;
    *(_OWORD *)(a7 + 600) = v57;
    *(_OWORD *)(a7 + 616) = v26;
    v27 = v52;
    *(_OWORD *)(a7 + 504) = v51;
    *(_OWORD *)(a7 + 520) = v27;
    v28 = v54;
    *(_OWORD *)(a7 + 536) = v53;
    *(_OWORD *)(a7 + 552) = v28;
    v29 = v48;
    *v23 = v47;
    *(_OWORD *)(a7 + 456) = v29;
    v30 = v50;
    *(_OWORD *)(a7 + 472) = v49;
    *(_OWORD *)(a7 + 488) = v30;
    sub_1AD046A30(v63);
    sub_1AD009758(a2, &qword_1ED2E2680);
    sub_1AD009758(a1, &qword_1ED2E2680);
    sub_1AD046A30(&v81);
  }
  else
  {
    sub_1AD009758(a2, &qword_1ED2E2680);
    sub_1AD009758(a1, &qword_1ED2E2680);
    sub_1AD009758((uint64_t)&v65, &qword_1ED2E2680);
    sub_1AD009758(a7 + 440, &qword_1EECDC330);
    *v23 = 0u;
    *(_OWORD *)(a7 + 456) = 0u;
    *(_OWORD *)(a7 + 472) = 0u;
    *(_OWORD *)(a7 + 488) = 0u;
    *(_OWORD *)(a7 + 504) = 0u;
    *(_OWORD *)(a7 + 520) = 0u;
    *(_OWORD *)(a7 + 536) = 0u;
    *(_OWORD *)(a7 + 552) = 0u;
    *(_OWORD *)(a7 + 568) = 0u;
    *(_OWORD *)(a7 + 584) = 0u;
    *(_OWORD *)(a7 + 600) = 0u;
    *(_OWORD *)(a7 + 616) = 0u;
    *(_OWORD *)(a7 + 632) = 0u;
    *(_OWORD *)(a7 + 648) = 0u;
    *(_OWORD *)(a7 + 664) = 0u;
    *(_OWORD *)(a7 + 680) = 0u;
    *(_OWORD *)(a7 + 696) = 0u;
    *(_QWORD *)(a7 + 712) = 0x1FFFFFFFELL;
    *(_OWORD *)(a7 + 720) = 0u;
    *(_OWORD *)(a7 + 736) = 0u;
    *(_OWORD *)(a7 + 752) = 0u;
    *(_OWORD *)(a7 + 768) = 0u;
    *(_OWORD *)(a7 + 784) = 0u;
    *(_OWORD *)(a7 + 800) = 0u;
    *(_OWORD *)(a7 + 816) = 0u;
    *(_OWORD *)(a7 + 832) = 0u;
    *(_OWORD *)(a7 + 848) = 0u;
    *(_OWORD *)(a7 + 864) = 0u;
  }
  memcpy((void *)(a7 + 880), a3, 0x1D8uLL);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a7 + 1352) = v34;
  *(_QWORD *)(a7 + 1360) = v11;
  *(_QWORD *)(a7 + 1368) = v12;
  *(_QWORD *)(a7 + 1376) = v13;
  *(_QWORD *)(a7 + 1384) = v33;
  *(_QWORD *)(a7 + 1392) = v32;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a7 + 1400) = v40;
  *(_QWORD *)(a7 + 1408) = v39;
  *(_QWORD *)(a7 + 1416) = v38;
  *(_QWORD *)(a7 + 1424) = v37;
  *(_QWORD *)(a7 + 1432) = v36;
  *(_QWORD *)(a7 + 1440) = v35;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a7 + 1448) = v46;
  *(_QWORD *)(a7 + 1456) = v45;
  *(_QWORD *)(a7 + 1464) = v44;
  *(_QWORD *)(a7 + 1472) = v43;
  *(_QWORD *)(a7 + 1480) = v42;
  *(_QWORD *)(a7 + 1488) = v41;
  return result;
}

_QWORD *PassPreview.PassImage.image.setter(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];
  uint64_t v12;

  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v11);
  sub_1AD009758(v1, &qword_1ED2E2680);
  v3 = v11[13];
  *(_OWORD *)(v1 + 192) = v11[12];
  *(_OWORD *)(v1 + 208) = v3;
  *(_OWORD *)(v1 + 224) = v11[14];
  *(_QWORD *)(v1 + 240) = v12;
  v4 = v11[9];
  *(_OWORD *)(v1 + 128) = v11[8];
  *(_OWORD *)(v1 + 144) = v4;
  v5 = v11[11];
  *(_OWORD *)(v1 + 160) = v11[10];
  *(_OWORD *)(v1 + 176) = v5;
  v6 = v11[5];
  *(_OWORD *)(v1 + 64) = v11[4];
  *(_OWORD *)(v1 + 80) = v6;
  v7 = v11[7];
  *(_OWORD *)(v1 + 96) = v11[6];
  *(_OWORD *)(v1 + 112) = v7;
  v8 = v11[1];
  *(_OWORD *)v1 = v11[0];
  *(_OWORD *)(v1 + 16) = v8;
  v9 = v11[3];
  *(_OWORD *)(v1 + 32) = v11[2];
  *(_OWORD *)(v1 + 48) = v9;
  return sub_1AD046A30(a1);
}

uint64_t PassPreview.PassText.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

__n128 PassPreview.PassText.color.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void __swiftcall PassPreview.PassText.init(text:color:)(BlastDoor::PassPreview::PassText *__return_ptr retstr, Swift::String text, BlastDoor::Color color)
{
  _OWORD *v3;
  __int128 v4;

  retstr->text = text;
  v4 = v3[1];
  *(_OWORD *)&retstr->color.red = *v3;
  *(_OWORD *)&retstr->color.blue = v4;
}

uint64_t sub_1AD416E80()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F6C6F63;
  else
    return 1954047348;
}

uint64_t sub_1AD416EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD41FA30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD416ED4()
{
  sub_1AD41707C();
  return sub_1AD63C560();
}

uint64_t sub_1AD416EFC()
{
  sub_1AD41707C();
  return sub_1AD63C56C();
}

uint64_t PassPreview.PassText.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC338);
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD41707C();
  sub_1AD63C53C();
  LOBYTE(v14) = 0;
  sub_1AD63C020();
  if (!v2)
  {
    v14 = v7;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = 1;
    sub_1AD28BCDC();
    sub_1AD63C068();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

unint64_t sub_1AD41707C()
{
  unint64_t result;

  result = qword_1EECDC340;
  if (!qword_1EECDC340)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684280, &type metadata for PassPreview.PassText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC340);
  }
  return result;
}

uint64_t PassPreview.PassText.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[2];
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC348);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD41707C();
  sub_1AD63C524();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v15[0]) = 0;
  v9 = sub_1AD63BF0C();
  v11 = v10;
  v16 = 1;
  sub_1AD28BBDC();
  swift_bridgeObjectRetain();
  sub_1AD63BF54();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v15[0];
  v13 = v15[1];
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD417264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PassPreview.PassText.init(from:)(a1, a2);
}

uint64_t sub_1AD417278(_QWORD *a1)
{
  return PassPreview.PassText.encode(to:)(a1);
}

uint64_t PassPreview.PassImage.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(v1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v4;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PassPreview.PassImage.image.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v4 = (char *)malloc(0x1F8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 62) = v2;
  result = sub_1ACFF64C0(v2, (uint64_t)(v4 + 248), &qword_1ED2E2680);
  if (*((_QWORD *)v4 + 34))
  {
    v6 = *(_OWORD *)(v4 + 456);
    *((_OWORD *)v4 + 12) = *(_OWORD *)(v4 + 440);
    *((_OWORD *)v4 + 13) = v6;
    *((_OWORD *)v4 + 14) = *(_OWORD *)(v4 + 472);
    *((_QWORD *)v4 + 30) = *((_QWORD *)v4 + 61);
    v7 = *(_OWORD *)(v4 + 392);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v4 + 376);
    *((_OWORD *)v4 + 9) = v7;
    v8 = *(_OWORD *)(v4 + 424);
    *((_OWORD *)v4 + 10) = *(_OWORD *)(v4 + 408);
    *((_OWORD *)v4 + 11) = v8;
    v9 = *(_OWORD *)(v4 + 328);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v4 + 312);
    *((_OWORD *)v4 + 5) = v9;
    v10 = *(_OWORD *)(v4 + 360);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v4 + 344);
    *((_OWORD *)v4 + 7) = v10;
    v11 = *(_OWORD *)(v4 + 264);
    *(_OWORD *)v4 = *(_OWORD *)(v4 + 248);
    *((_OWORD *)v4 + 1) = v11;
    v12 = *(_OWORD *)(v4 + 296);
    result = (uint64_t)sub_1AD146614;
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 + 280);
    *((_OWORD *)v4 + 3) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PassPreview.PassImage.$image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1ED2E2FE8);
}

uint64_t PassPreview.PassImage.$image.setter(uint64_t a1)
{
  void *v1;
  _BYTE __src[440];

  sub_1ACFF64C0(a1, (uint64_t)__src, &qword_1ED2E2FE8);
  sub_1AD009758((uint64_t)v1, &qword_1ED2E2FE8);
  memcpy(v1, __src, 0x1B8uLL);
  return sub_1AD009758(a1, &qword_1ED2E2FE8);
}

void (*PassPreview.PassImage.$image.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x530uLL);
  *a1 = v3;
  v3[165] = v1;
  sub_1ACFF64C0(v1, (uint64_t)v3, &qword_1ED2E2FE8);
  return sub_1AD146874;
}

uint64_t sub_1AD4174B0()
{
  sub_1AD41760C();
  return sub_1AD63C560();
}

uint64_t sub_1AD4174D8()
{
  sub_1AD41760C();
  return sub_1AD63C56C();
}

uint64_t PassPreview.PassImage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC350);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD41760C();
  sub_1AD63C53C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
  sub_1AD14794C(&qword_1ED2DACF0, (uint64_t)&unk_1AD67ACF4);
  sub_1AD63C068();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1AD41760C()
{
  unint64_t result;

  result = qword_1EECDC358;
  if (!qword_1EECDC358)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684230, &type metadata for PassPreview.PassImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC358);
  }
  return result;
}

_QWORD *PassPreview.PassImage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[31];
  uint64_t v13;
  __int128 v14[13];
  uint64_t v15;

  v15 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC360);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v14[0]) = 0;
  sub_1AD00FD58(v14);
  sub_1AD00E830(v14, (uint64_t)&v13);
  memset(v12, 0, sizeof(v12));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD41760C();
  sub_1AD63C524();
  if (!v2)
  {
    v8 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
    sub_1AD14794C(&qword_1ED2E26B0, (uint64_t)&unk_1AD67ACCC);
    sub_1AD63BF54();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1ACFF6540((uint64_t)&v11, (uint64_t)v12, &qword_1ED2E2FE8);
    sub_1AD417824((uint64_t)v12, v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1AD4177F8(v12);
}

_QWORD *sub_1AD4177F8(_QWORD *a1)
{
  destroy for MessagesAppBalloon.AppIconImage(a1);
  return a1;
}

uint64_t sub_1AD417824(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MessagesAppBalloon.AppIconImage(a2, a1);
  return a2;
}

_QWORD *sub_1AD417858@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PassPreview.PassImage.init(from:)(a1, a2);
}

uint64_t sub_1AD41786C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC350);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD41760C();
  sub_1AD63C53C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
  sub_1AD14794C(&qword_1ED2DACF0, (uint64_t)&unk_1AD67ACF4);
  sub_1AD63C068();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t PassPreview.PassBackground.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1EECDC330);
}

__n128 PassPreview.PassBackground.color.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 440);
  v3 = *(_OWORD *)(v1 + 456);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t PassPreview.PassBackground.init(image:color:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _OWORD v10[15];
  uint64_t v11;
  _QWORD v12[31];
  _BYTE __src[440];
  __int128 v14[12];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[15];
  uint64_t v32;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  sub_1ACFF64C0(a1, (uint64_t)&v15, &qword_1ED2E2680);
  if (*((_QWORD *)&v16 + 1))
  {
    v31[12] = v27;
    v31[13] = v28;
    v31[14] = v29;
    v32 = v30;
    v31[8] = v23;
    v31[9] = v24;
    v31[10] = v25;
    v31[11] = v26;
    v31[4] = v19;
    v31[5] = v20;
    v31[6] = v21;
    v31[7] = v22;
    v31[0] = v15;
    v31[1] = v16;
    v31[2] = v17;
    v31[3] = v18;
    LOWORD(v14[0]) = 0;
    sub_1AD00FD58(v14);
    sub_1AD00E830(v14, (uint64_t)&__src[248]);
    memset(__src, 0, 248);
    sub_1AD0CFB8C((uint64_t)v31, (uint64_t)v12);
    sub_1AD0CFB8C((uint64_t)v12, (uint64_t)v10);
    sub_1AD009758((uint64_t)__src, &qword_1ED2E2680);
    *(_OWORD *)&__src[192] = v10[12];
    *(_OWORD *)&__src[208] = v10[13];
    *(_OWORD *)&__src[224] = v10[14];
    *(_QWORD *)&__src[240] = v11;
    *(_OWORD *)&__src[128] = v10[8];
    *(_OWORD *)&__src[144] = v10[9];
    *(_OWORD *)&__src[160] = v10[10];
    *(_OWORD *)&__src[176] = v10[11];
    *(_OWORD *)&__src[64] = v10[4];
    *(_OWORD *)&__src[80] = v10[5];
    *(_OWORD *)&__src[96] = v10[6];
    *(_OWORD *)&__src[112] = v10[7];
    *(_OWORD *)__src = v10[0];
    *(_OWORD *)&__src[16] = v10[1];
    *(_OWORD *)&__src[32] = v10[2];
    *(_OWORD *)&__src[48] = v10[3];
    sub_1AD046A30(v12);
    sub_1AD009758(a1, &qword_1ED2E2680);
    sub_1AD046A30(v31);
    result = (uint64_t)memcpy(a3, __src, 0x1B8uLL);
  }
  else
  {
    sub_1AD009758(a1, &qword_1ED2E2680);
    result = sub_1AD009758((uint64_t)&v15, &qword_1ED2E2680);
    a3[15] = 0u;
    a3[16] = 0u;
    a3[13] = 0u;
    a3[14] = 0u;
    a3[11] = 0u;
    a3[12] = 0u;
    a3[9] = 0u;
    a3[10] = 0u;
    a3[7] = 0u;
    a3[8] = 0u;
    a3[5] = 0u;
    a3[6] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
    *((_QWORD *)a3 + 34) = 0x1FFFFFFFELL;
    *(_OWORD *)((char *)a3 + 280) = 0u;
    *(_OWORD *)((char *)a3 + 296) = 0u;
    *(_OWORD *)((char *)a3 + 312) = 0u;
    *(_OWORD *)((char *)a3 + 328) = 0u;
    *(_OWORD *)((char *)a3 + 344) = 0u;
    *(_OWORD *)((char *)a3 + 360) = 0u;
    *(_OWORD *)((char *)a3 + 376) = 0u;
    *(_OWORD *)((char *)a3 + 392) = 0u;
    *(_OWORD *)((char *)a3 + 408) = 0u;
    *(_OWORD *)((char *)a3 + 424) = 0u;
  }
  *((_QWORD *)a3 + 55) = v5;
  *((_QWORD *)a3 + 56) = v6;
  *((_QWORD *)a3 + 57) = v7;
  *((_QWORD *)a3 + 58) = v8;
  return result;
}

uint64_t sub_1AD417BCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F6C6F63;
  else
    return 0x6567616D69;
}

uint64_t sub_1AD417BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD41FB08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD417C1C()
{
  sub_1AD417DAC();
  return sub_1AD63C560();
}

uint64_t sub_1AD417C44()
{
  sub_1AD417DAC();
  return sub_1AD63C56C();
}

uint64_t PassPreview.PassBackground.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  _BYTE v11[16];
  __int128 v12;
  __int128 v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC368);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD417DAC();
  sub_1AD63C53C();
  LOBYTE(v12) = 0;
  sub_1AD417DF0();
  sub_1AD63C014();
  if (!v2)
  {
    v9 = *(_OWORD *)(v3 + 456);
    v12 = *(_OWORD *)(v3 + 440);
    v13 = v9;
    v11[15] = 1;
    sub_1AD28BCDC();
    sub_1AD63C068();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD417DAC()
{
  unint64_t result;

  result = qword_1EECDC370;
  if (!qword_1EECDC370)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6841E0, &type metadata for PassPreview.PassBackground.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC370);
  }
  return result;
}

unint64_t sub_1AD417DF0()
{
  unint64_t result;

  result = qword_1EECDC378;
  if (!qword_1EECDC378)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassImage, &type metadata for PassPreview.PassImage);
    atomic_store(result, (unint64_t *)&qword_1EECDC378);
  }
  return result;
}

_QWORD *PassPreview.PassBackground.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  char *v11;
  _OWORD v12[28];
  _QWORD v13[55];
  __int128 v14;
  __int128 v15;
  char v16;

  v11 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC380);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD417DAC();
  sub_1AD63C524();
  if (v2)
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v8 = v11;
  v16 = 0;
  sub_1AD418000();
  sub_1AD63BF00();
  sub_1AD418044((uint64_t)v12, (uint64_t)v13);
  v16 = 1;
  sub_1AD28BBDC();
  sub_1AD63BF54();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v12[0];
  v15 = v12[1];
  sub_1AD41808C((char *)v13, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1AD4180C0(v13);
}

unint64_t sub_1AD418000()
{
  unint64_t result;

  result = qword_1EECDC388;
  if (!qword_1EECDC388)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassImage, &type metadata for PassPreview.PassImage);
    atomic_store(result, (unint64_t *)&qword_1EECDC388);
  }
  return result;
}

uint64_t sub_1AD418044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1AD41808C(char *__src, char *__dst)
{
  initializeWithCopy for PassPreview.PassBackground(__dst, __src);
  return __dst;
}

_QWORD *sub_1AD4180C0(_QWORD *a1)
{
  destroy for PassPreview.PassBackground(a1);
  return a1;
}

_QWORD *sub_1AD4180EC@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return PassPreview.PassBackground.init(from:)(a1, a2);
}

uint64_t sub_1AD418100(_QWORD *a1)
{
  return PassPreview.PassBackground.encode(to:)(a1);
}

uint64_t PassPreview.headerImage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1EECDC330);
}

uint64_t PassPreview.headerImage.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1ACFF6540(a1, v1, &qword_1EECDC330);
}

uint64_t (*PassPreview.headerImage.modify())()
{
  return nullsub_1;
}

uint64_t PassPreview.icon.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1 + 440, a1, &qword_1EECDC330);
}

uint64_t PassPreview.icon.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1ACFF6540(a1, v1 + 440, &qword_1EECDC330);
}

uint64_t (*PassPreview.icon.modify())()
{
  return nullsub_1;
}

char *PassPreview.background.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1AD41808C((char *)(v1 + 880), a1);
}

_QWORD *PassPreview.background.setter(_OWORD *a1)
{
  uint64_t v1;

  return sub_1AD4181D0(a1, (_QWORD *)(v1 + 880));
}

_QWORD *sub_1AD4181D0(_OWORD *__src, _QWORD *__dst)
{
  assignWithTake for PassPreview.PassBackground(__dst, __src);
  return __dst;
}

uint64_t (*PassPreview.background.modify())()
{
  return nullsub_1;
}

uint64_t PassPreview.primaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 1392);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 1352);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 1360);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 1376);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_bridgeObjectRetain();
}

__n128 PassPreview.primaryText.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)(v1 + 1352) = v6;
  *(__n128 *)(v1 + 1368) = v5;
  *(_QWORD *)(v1 + 1384) = v2;
  *(_QWORD *)(v1 + 1392) = v3;
  return result;
}

uint64_t (*PassPreview.primaryText.modify())()
{
  return nullsub_1;
}

uint64_t PassPreview.secondaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 1440);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 1400);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 1408);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 1424);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_bridgeObjectRetain();
}

__n128 PassPreview.secondaryText.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)(v1 + 1400) = v6;
  *(__n128 *)(v1 + 1416) = v5;
  *(_QWORD *)(v1 + 1432) = v2;
  *(_QWORD *)(v1 + 1440) = v3;
  return result;
}

uint64_t (*PassPreview.secondaryText.modify())()
{
  return nullsub_1;
}

uint64_t PassPreview.tertiaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 1488);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 1448);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 1456);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 1472);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_bridgeObjectRetain();
}

__n128 PassPreview.tertiaryText.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)(v1 + 1448) = v6;
  *(__n128 *)(v1 + 1464) = v5;
  *(_QWORD *)(v1 + 1480) = v2;
  *(_QWORD *)(v1 + 1488) = v3;
  return result;
}

uint64_t (*PassPreview.tertiaryText.modify())()
{
  return nullsub_1;
}

__n128 PassPreview.backgroundColor.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 1320);
  v3 = *(_OWORD *)(v1 + 1336);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t PassPreview.Constraints.workingDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t PassPreview.Constraints.init(workingDirectory:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 16);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1AD418418()
{
  sub_1AD418578();
  return sub_1AD63C560();
}

uint64_t sub_1AD418440()
{
  sub_1AD418578();
  return sub_1AD63C56C();
}

uint64_t PassPreview.Constraints.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC390);
  v10[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD418578();
  sub_1AD63C53C();
  v10[1] = v7;
  v10[2] = v6;
  v11 = v8;
  sub_1AD2F75DC();
  sub_1AD63C068();
  return (*(uint64_t (**)(char *, uint64_t))(v10[0] + 8))(v5, v3);
}

unint64_t sub_1AD418578()
{
  unint64_t result;

  result = qword_1EECDC398;
  if (!qword_1EECDC398)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684190, &type metadata for PassPreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC398);
  }
  return result;
}

uint64_t PassPreview.Constraints.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  _QWORD v12[3];
  char v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC3A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD418578();
  sub_1AD63C524();
  if (!v2)
  {
    sub_1AD00F8A8();
    sub_1AD63BF54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v12[2];
    v10 = v13;
    *(_QWORD *)a2 = v12[1];
    *(_QWORD *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AD4186E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PassPreview.Constraints.init(from:)(a1, a2);
}

uint64_t sub_1AD4186F8(_QWORD *a1)
{
  return PassPreview.Constraints.encode(to:)(a1);
}

uint64_t sub_1AD41870C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD418744 + 4 * byte_1AD683B04[*v0]))(0x6D49726564616568, 0xEB00000000656761);
}

uint64_t sub_1AD418744()
{
  return 1852793705;
}

uint64_t sub_1AD418754()
{
  return 0x756F72676B636162;
}

uint64_t sub_1AD418770()
{
  return 0x547972616D697270;
}

uint64_t sub_1AD418790()
{
  return 0x7261646E6F636573;
}

uint64_t sub_1AD4187B4()
{
  return 0x7972616974726574;
}

uint64_t sub_1AD4187D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD41FBE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD4187F8()
{
  sub_1AD418A90();
  return sub_1AD63C560();
}

uint64_t sub_1AD418820()
{
  sub_1AD418A90();
  return sub_1AD63C56C();
}

uint64_t PassPreview.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC3A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD418A90();
  sub_1AD63C53C();
  LOBYTE(v15) = 0;
  sub_1AD417DF0();
  sub_1AD63C014();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    sub_1AD63C014();
    LOBYTE(v15) = 2;
    sub_1AD418AD4();
    sub_1AD63C068();
    v9 = *(_OWORD *)(v3 + 1368);
    v15 = *(_OWORD *)(v3 + 1352);
    v16 = v9;
    v17 = *(_OWORD *)(v3 + 1384);
    v14 = 3;
    sub_1AD418B18();
    sub_1AD63C014();
    v10 = *(_OWORD *)(v3 + 1416);
    v15 = *(_OWORD *)(v3 + 1400);
    v16 = v10;
    v17 = *(_OWORD *)(v3 + 1432);
    v14 = 4;
    sub_1AD63C014();
    v11 = *(_OWORD *)(v3 + 1464);
    v15 = *(_OWORD *)(v3 + 1448);
    v16 = v11;
    v17 = *(_OWORD *)(v3 + 1480);
    v14 = 5;
    sub_1AD63C014();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD418A90()
{
  unint64_t result;

  result = qword_1EECDC3B0;
  if (!qword_1EECDC3B0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684140, &type metadata for PassPreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC3B0);
  }
  return result;
}

unint64_t sub_1AD418AD4()
{
  unint64_t result;

  result = qword_1EECDC3B8;
  if (!qword_1EECDC3B8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassBackground, &type metadata for PassPreview.PassBackground);
    atomic_store(result, (unint64_t *)&qword_1EECDC3B8);
  }
  return result;
}

unint64_t sub_1AD418B18()
{
  unint64_t result;

  result = qword_1EECDC3C0;
  if (!qword_1EECDC3C0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassText, &type metadata for PassPreview.PassText);
    atomic_store(result, (unint64_t *)&qword_1EECDC3C0);
  }
  return result;
}

_QWORD *PassPreview.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[472];
  _QWORD v23[35];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[272];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[472];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  *(_QWORD *)&v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC3C8);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v23, 0, 272);
  *(_QWORD *)&v21 = v34;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v23[34] = 0x1FFFFFFFELL;
  v35 = 0x1FFFFFFFELL;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD418A90();
  sub_1AD63C524();
  if (v2)
  {
    v8 = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1AD009758((uint64_t)v23, &qword_1EECDC330);
    sub_1AD009758(v8, &qword_1EECDC330);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v19 = a2;
    v56 = 0;
    sub_1AD418000();
    sub_1AD63BF00();
    sub_1ACFF6540((uint64_t)v22, (uint64_t)v23, &qword_1EECDC330);
    v56 = 1;
    sub_1AD63BF00();
    sub_1ACFF6540((uint64_t)v22, v21, &qword_1EECDC330);
    v56 = 2;
    sub_1AD41902C();
    sub_1AD63BF54();
    memcpy(v46, v22, sizeof(v46));
    v56 = 3;
    sub_1AD419070();
    sub_1AD63BF00();
    v17 = *(_OWORD *)v22;
    v18 = *(_OWORD *)&v22[16];
    v9 = *(_QWORD *)&v22[32];
    v10 = *(_QWORD *)&v22[40];
    swift_bridgeObjectRelease();
    v47 = v17;
    v48 = v18;
    *(_QWORD *)&v49 = v9;
    *((_QWORD *)&v49 + 1) = v10;
    v56 = 4;
    sub_1AD63BF00();
    v17 = *(_OWORD *)v22;
    v18 = *(_OWORD *)&v22[16];
    v11 = *(_QWORD *)&v22[32];
    v12 = *(_QWORD *)&v22[40];
    swift_bridgeObjectRelease();
    v50 = v17;
    v51 = v18;
    *(_QWORD *)&v52 = v11;
    *((_QWORD *)&v52 + 1) = v12;
    v56 = 5;
    v13 = v20;
    sub_1AD63BF00();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    v20 = *(_OWORD *)v22;
    v21 = *(_OWORD *)&v22[16];
    v14 = *(_QWORD *)&v22[32];
    v15 = *(_QWORD *)&v22[40];
    swift_bridgeObjectRelease();
    v53 = v20;
    v54 = v21;
    *(_QWORD *)&v55 = v14;
    *((_QWORD *)&v55 + 1) = v15;
    sub_1AD4190B4((char *)v23, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_1AD4190E8(v23);
  }
}

unint64_t sub_1AD41902C()
{
  unint64_t result;

  result = qword_1EECDC3D0;
  if (!qword_1EECDC3D0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassBackground, &type metadata for PassPreview.PassBackground);
    atomic_store(result, (unint64_t *)&qword_1EECDC3D0);
  }
  return result;
}

unint64_t sub_1AD419070()
{
  unint64_t result;

  result = qword_1EECDC3D8;
  if (!qword_1EECDC3D8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.PassText, &type metadata for PassPreview.PassText);
    atomic_store(result, (unint64_t *)&qword_1EECDC3D8);
  }
  return result;
}

char *sub_1AD4190B4(char *__src, char *__dst)
{
  initializeWithCopy for PassPreview(__dst, __src);
  return __dst;
}

_QWORD *sub_1AD4190E8(_QWORD *a1)
{
  destroy for PassPreview(a1);
  return a1;
}

unint64_t sub_1AD419118()
{
  unint64_t result;

  result = qword_1EECDC3E0;
  if (!qword_1EECDC3E0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.Constraints, &type metadata for PassPreview.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDC3E0);
  }
  return result;
}

unint64_t sub_1AD419160()
{
  unint64_t result;

  result = qword_1EECDC3E8;
  if (!qword_1EECDC3E8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview.Constraints, &type metadata for PassPreview.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDC3E8);
  }
  return result;
}

unint64_t sub_1AD4191A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD4191C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD4191C8()
{
  unint64_t result;

  result = qword_1EECDC3F0;
  if (!qword_1EECDC3F0)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview, &type metadata for PassPreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC3F0);
  }
  return result;
}

unint64_t sub_1AD41920C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD419238();
  result = sub_1AD41927C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD419238()
{
  unint64_t result;

  result = qword_1EECDC3F8;
  if (!qword_1EECDC3F8)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview, &type metadata for PassPreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC3F8);
  }
  return result;
}

unint64_t sub_1AD41927C()
{
  unint64_t result;

  result = qword_1EECDC400;
  if (!qword_1EECDC400)
  {
    result = MEMORY[0x1AF44BDF0](&protocol conformance descriptor for PassPreview, &type metadata for PassPreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC400);
  }
  return result;
}

_QWORD *sub_1AD4192C0@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return PassPreview.init(from:)(a1, a2);
}

uint64_t sub_1AD4192D4(_QWORD *a1)
{
  return PassPreview.encode(to:)(a1);
}

uint64_t sub_1AD4192E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(a1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v4;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD419390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1, a2, &qword_1ED2E2FE8);
}

uint64_t destroy for PassPreview(_QWORD *a1)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (a1[34] >> 1 != 0xFFFFFFFFLL
    || (a1[38] | a1[36]) > 1uLL
    || (a1[44] & 0xFFFFFFFFFFFFFEFELL | a1[40] & 0xFFFFFFFFFFFF00FELL) != 0
    || (a1[48] | a1[46]) >= 2uLL)
  {
    if (a1[3])
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      v5 = a1[10];
      v6 = a1[12];
      v7 = a1[14];
      v8 = a1[16];
      v9 = a1[20];
      v10 = a1[22];
      v11 = a1[24];
      if (v5 >> 1 != 0xFFFFFFFF
        || (v7 | (unint64_t)v6) > 1
        || v9 & 0xFFFFFFFFFFFFFEFELL | v8 & 0xFFFFFFFFFFFF00FELL
        || (v11 | v10) >= 2)
      {
        sub_1AD00E8B0(a1[7], a1[8], a1[9], v5, a1[11], v6, a1[13], v7, a1[15], v8, a1[17], a1[18], a1[19], v9, a1[21], v10, a1[23], v11, a1[25],
          a1[26],
          a1[27],
          a1[28],
          a1[29],
          a1[30]);
      }
    }
    sub_1AD00E8B0(a1[31], a1[32], a1[33], a1[34], a1[35], a1[36], a1[37], a1[38], a1[39], a1[40], a1[41], a1[42], a1[43], a1[44], a1[45], a1[46], a1[47], a1[48], a1[49],
      a1[50],
      a1[51],
      a1[52],
      a1[53],
      a1[54]);
  }
  if (a1[89] >> 1 != 0xFFFFFFFFLL
    || (a1[93] | a1[91]) > 1
    || a1[99] & 0xFFFFFFFFFFFFFEFELL | a1[95] & 0xFFFFFFFFFFFF00FELL
    || (a1[103] | a1[101]) >= 2)
  {
    if (a1[58])
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 55));
      v12 = a1[65];
      v13 = a1[67];
      v14 = a1[69];
      v15 = a1[71];
      v16 = a1[75];
      v17 = a1[77];
      v18 = a1[79];
      if (v12 >> 1 != 0xFFFFFFFF
        || (v14 | (unint64_t)v13) > 1
        || v16 & 0xFFFFFFFFFFFFFEFELL | v15 & 0xFFFFFFFFFFFF00FELL
        || (v18 | v17) >= 2)
      {
        sub_1AD00E8B0(a1[62], a1[63], a1[64], v12, a1[66], v13, a1[68], v14, a1[70], v15, a1[72], a1[73], a1[74], v16, a1[76], v17, a1[78], v18, a1[80],
          a1[81],
          a1[82],
          a1[83],
          a1[84],
          a1[85]);
      }
    }
    sub_1AD00E8B0(a1[86], a1[87], a1[88], a1[89], a1[90], a1[91], a1[92], a1[93], a1[94], a1[95], a1[96], a1[97], a1[98], a1[99], a1[100], a1[101], a1[102], a1[103], a1[104],
      a1[105],
      a1[106],
      a1[107],
      a1[108],
      a1[109]);
  }
  if (a1[144] >> 1 != 0xFFFFFFFFLL
    || (a1[148] | a1[146]) > 1
    || a1[154] & 0xFFFFFFFFFFFFFEFELL | a1[150] & 0xFFFFFFFFFFFF00FELL
    || (a1[158] | a1[156]) >= 2)
  {
    if (a1[113])
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 110));
      v19 = a1[120];
      v20 = a1[122];
      v21 = a1[124];
      v22 = a1[126];
      v23 = a1[130];
      v24 = a1[132];
      v25 = a1[134];
      if (v19 >> 1 != 0xFFFFFFFF
        || (v21 | (unint64_t)v20) > 1
        || v23 & 0xFFFFFFFFFFFFFEFELL | v22 & 0xFFFFFFFFFFFF00FELL
        || (v25 | v24) >= 2)
      {
        sub_1AD00E8B0(a1[117], a1[118], a1[119], v19, a1[121], v20, a1[123], v21, a1[125], v22, a1[127], a1[128], a1[129], v23, a1[131], v24, a1[133], v25, a1[135],
          a1[136],
          a1[137],
          a1[138],
          a1[139],
          a1[140]);
      }
    }
    sub_1AD00E8B0(a1[141], a1[142], a1[143], a1[144], a1[145], a1[146], a1[147], a1[148], a1[149], a1[150], a1[151], a1[152], a1[153], a1[154], a1[155], a1[156], a1[157], a1[158], a1[159],
      a1[160],
      a1[161],
      a1[162],
      a1[163],
      a1[164]);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for PassPreview(char *__dst, char *__src)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;

  if (*((_QWORD *)__src + 34) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) > 1uLL
    || (*((_QWORD *)__src + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 40) & 0xFFFFFFFFFFFF00FELL) != 0
    || (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) >= 2uLL)
  {
    v7 = *((_QWORD *)__src + 3);
    if (v7)
    {
      v8 = *((_QWORD *)__src + 4);
      *((_QWORD *)__dst + 3) = v7;
      *((_QWORD *)__dst + 4) = v8;
      (**(void (***)(char *, char *))(v7 - 8))(__dst, __src);
      *((_QWORD *)__dst + 5) = *((_QWORD *)__src + 5);
      __dst[48] = __src[48];
      v9 = *((_QWORD *)__src + 10);
      v10 = *((_QWORD *)__src + 12);
      v11 = *((_QWORD *)__src + 14);
      v12 = *((_QWORD *)__src + 24);
      if (v9 >> 1 != 0xFFFFFFFF
        || (v11 | (unint64_t)v10) > 1
        || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
        || (v12 | *((_QWORD *)__src + 22)) >= 2)
      {
        v26 = *((_QWORD *)__src + 8);
        v27 = *((_QWORD *)__src + 11);
        v117 = *((_QWORD *)__src + 15);
        v129 = *((_QWORD *)__src + 17);
        v147 = *((_QWORD *)__src + 18);
        v153 = *((_QWORD *)__src + 19);
        v159 = *((_QWORD *)__src + 21);
        v165 = *((_QWORD *)__src + 23);
        v171 = *((_QWORD *)__src + 25);
        v177 = *((_QWORD *)__src + 26);
        v183 = *((_QWORD *)__src + 27);
        v189 = *((_QWORD *)__src + 28);
        v195 = *((_QWORD *)__src + 29);
        v201 = *((_QWORD *)__src + 30);
        v135 = *((_QWORD *)__src + 20);
        v141 = *((_QWORD *)__src + 22);
        v28 = *((_QWORD *)__src + 7);
        v111 = *((_QWORD *)__src + 16);
        v29 = *((_QWORD *)__src + 9);
        v123 = *((_QWORD *)__src + 24);
        v30 = *((_QWORD *)__src + 13);
        sub_1AD00FEAC(v28, v26, v29, v9, v27, v10, v30, v11, v117, v111, v129, v147, v153, v135, v159, v141, v165, v12, v171,
          v177,
          v183,
          v189,
          v195,
          v201);
        *((_QWORD *)__dst + 7) = v28;
        *((_QWORD *)__dst + 8) = v26;
        *((_QWORD *)__dst + 9) = v29;
        *((_QWORD *)__dst + 10) = v9;
        *((_QWORD *)__dst + 11) = v27;
        *((_QWORD *)__dst + 12) = v10;
        *((_QWORD *)__dst + 13) = v30;
        *((_QWORD *)__dst + 14) = v11;
        *((_QWORD *)__dst + 15) = v117;
        *((_QWORD *)__dst + 16) = v111;
        *((_QWORD *)__dst + 17) = v129;
        *((_QWORD *)__dst + 18) = v147;
        *((_QWORD *)__dst + 19) = v153;
        *((_QWORD *)__dst + 20) = v135;
        *((_QWORD *)__dst + 21) = v159;
        *((_QWORD *)__dst + 22) = v141;
        *((_QWORD *)__dst + 23) = v165;
        *((_QWORD *)__dst + 24) = v123;
        *((_QWORD *)__dst + 25) = v171;
        *((_QWORD *)__dst + 26) = v177;
        *((_QWORD *)__dst + 27) = v183;
        *((_QWORD *)__dst + 28) = v189;
        *((_QWORD *)__dst + 29) = v195;
        *((_QWORD *)__dst + 30) = v201;
      }
      else
      {
        v13 = *(_OWORD *)(__src + 200);
        *(_OWORD *)(__dst + 184) = *(_OWORD *)(__src + 184);
        *(_OWORD *)(__dst + 200) = v13;
        v14 = *(_OWORD *)(__src + 232);
        *(_OWORD *)(__dst + 216) = *(_OWORD *)(__src + 216);
        *(_OWORD *)(__dst + 232) = v14;
        v15 = *(_OWORD *)(__src + 136);
        *(_OWORD *)(__dst + 120) = *(_OWORD *)(__src + 120);
        *(_OWORD *)(__dst + 136) = v15;
        v16 = *(_OWORD *)(__src + 168);
        *(_OWORD *)(__dst + 152) = *(_OWORD *)(__src + 152);
        *(_OWORD *)(__dst + 168) = v16;
        v17 = *(_OWORD *)(__src + 72);
        *(_OWORD *)(__dst + 56) = *(_OWORD *)(__src + 56);
        *(_OWORD *)(__dst + 72) = v17;
        v18 = *(_OWORD *)(__src + 104);
        *(_OWORD *)(__dst + 88) = *(_OWORD *)(__src + 88);
        *(_OWORD *)(__dst + 104) = v18;
      }
    }
    else
    {
      v19 = *((_OWORD *)__src + 13);
      *((_OWORD *)__dst + 12) = *((_OWORD *)__src + 12);
      *((_OWORD *)__dst + 13) = v19;
      *((_OWORD *)__dst + 14) = *((_OWORD *)__src + 14);
      *((_QWORD *)__dst + 30) = *((_QWORD *)__src + 30);
      v20 = *((_OWORD *)__src + 9);
      *((_OWORD *)__dst + 8) = *((_OWORD *)__src + 8);
      *((_OWORD *)__dst + 9) = v20;
      v21 = *((_OWORD *)__src + 11);
      *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
      *((_OWORD *)__dst + 11) = v21;
      v22 = *((_OWORD *)__src + 5);
      *((_OWORD *)__dst + 4) = *((_OWORD *)__src + 4);
      *((_OWORD *)__dst + 5) = v22;
      v23 = *((_OWORD *)__src + 7);
      *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
      *((_OWORD *)__dst + 7) = v23;
      v24 = *((_OWORD *)__src + 1);
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((_OWORD *)__dst + 1) = v24;
      v25 = *((_OWORD *)__src + 3);
      *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
      *((_OWORD *)__dst + 3) = v25;
    }
    v31 = *((_QWORD *)__src + 36);
    v32 = *((_QWORD *)__src + 37);
    v112 = *((_QWORD *)__src + 39);
    v118 = *((_QWORD *)__src + 40);
    v124 = *((_QWORD *)__src + 41);
    v130 = *((_QWORD *)__src + 42);
    v136 = *((_QWORD *)__src + 43);
    v142 = *((_QWORD *)__src + 44);
    v148 = *((_QWORD *)__src + 45);
    v154 = *((_QWORD *)__src + 46);
    v160 = *((_QWORD *)__src + 47);
    v166 = *((_QWORD *)__src + 48);
    v172 = *((_QWORD *)__src + 49);
    v178 = *((_QWORD *)__src + 50);
    v184 = *((_QWORD *)__src + 51);
    v190 = *((_QWORD *)__src + 52);
    v196 = *((_QWORD *)__src + 53);
    v202 = *((_QWORD *)__src + 54);
    v33 = *((_QWORD *)__src + 31);
    v34 = *((_QWORD *)__src + 32);
    v35 = *((_QWORD *)__src + 33);
    v36 = *((_QWORD *)__src + 34);
    v37 = *((_QWORD *)__src + 35);
    v38 = *((_QWORD *)__src + 38);
    sub_1AD00FEAC(v33, v34, v35, v36, v37, v31, v32, v38, v112, v118, v124, v130, v136, v142, v148, v154, v160, v166, v172,
      v178,
      v184,
      v190,
      v196,
      v202);
    *((_QWORD *)__dst + 31) = v33;
    *((_QWORD *)__dst + 32) = v34;
    *((_QWORD *)__dst + 33) = v35;
    *((_QWORD *)__dst + 34) = v36;
    *((_QWORD *)__dst + 35) = v37;
    *((_QWORD *)__dst + 36) = v31;
    *((_QWORD *)__dst + 37) = v32;
    *((_QWORD *)__dst + 38) = v38;
    *((_QWORD *)__dst + 39) = v112;
    *((_QWORD *)__dst + 40) = v118;
    *((_QWORD *)__dst + 41) = v124;
    *((_QWORD *)__dst + 42) = v130;
    *((_QWORD *)__dst + 43) = v136;
    *((_QWORD *)__dst + 44) = v142;
    *((_QWORD *)__dst + 45) = v148;
    *((_QWORD *)__dst + 46) = v154;
    *((_QWORD *)__dst + 47) = v160;
    *((_QWORD *)__dst + 48) = v166;
    *((_QWORD *)__dst + 49) = v172;
    *((_QWORD *)__dst + 50) = v178;
    *((_QWORD *)__dst + 51) = v184;
    *((_QWORD *)__dst + 52) = v190;
    *((_QWORD *)__dst + 53) = v196;
    *((_QWORD *)__dst + 54) = v202;
  }
  else
  {
    memcpy(__dst, __src, 0x1B8uLL);
  }
  v39 = __dst + 440;
  v40 = __src + 440;
  if (*((_QWORD *)__src + 89) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 93) | *((_QWORD *)__src + 91)) > 1
    || *((_QWORD *)__src + 99) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 95) & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 103) | *((_QWORD *)__src + 101)) >= 2)
  {
    v41 = *((_QWORD *)__src + 58);
    if (v41)
    {
      v42 = *((_QWORD *)__src + 59);
      *((_QWORD *)__dst + 58) = v41;
      *((_QWORD *)__dst + 59) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v39, v40);
      *((_QWORD *)__dst + 60) = *((_QWORD *)__src + 60);
      __dst[488] = __src[488];
      v43 = *((_QWORD *)__src + 65);
      v44 = *((_QWORD *)__src + 67);
      v45 = *((_QWORD *)__src + 69);
      v46 = *((_QWORD *)__src + 79);
      if (v43 >> 1 != 0xFFFFFFFF
        || (v45 | (unint64_t)v44) > 1
        || *((_QWORD *)__src + 75) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 71) & 0xFFFFFFFFFFFF00FELL
        || (v46 | *((_QWORD *)__src + 77)) >= 2)
      {
        v60 = *((_QWORD *)__src + 63);
        v61 = *((_QWORD *)__src + 66);
        v119 = *((_QWORD *)__src + 70);
        v131 = *((_QWORD *)__src + 72);
        v149 = *((_QWORD *)__src + 73);
        v155 = *((_QWORD *)__src + 74);
        v161 = *((_QWORD *)__src + 76);
        v167 = *((_QWORD *)__src + 78);
        v173 = *((_QWORD *)__src + 80);
        v179 = *((_QWORD *)__src + 81);
        v185 = *((_QWORD *)__src + 82);
        v191 = *((_QWORD *)__src + 83);
        v197 = *((_QWORD *)__src + 84);
        v203 = *((_QWORD *)__src + 85);
        v137 = *((_QWORD *)__src + 75);
        v143 = *((_QWORD *)__src + 77);
        v62 = *((_QWORD *)__src + 62);
        v113 = *((_QWORD *)__src + 71);
        v63 = *((_QWORD *)__src + 64);
        v125 = *((_QWORD *)__src + 79);
        v64 = *((_QWORD *)__src + 68);
        sub_1AD00FEAC(v62, v60, v63, v43, v61, v44, v64, v45, v119, v113, v131, v149, v155, v137, v161, v143, v167, v46, v173,
          v179,
          v185,
          v191,
          v197,
          v203);
        *((_QWORD *)__dst + 62) = v62;
        *((_QWORD *)__dst + 63) = v60;
        *((_QWORD *)__dst + 64) = v63;
        *((_QWORD *)__dst + 65) = v43;
        *((_QWORD *)__dst + 66) = v61;
        *((_QWORD *)__dst + 67) = v44;
        *((_QWORD *)__dst + 68) = v64;
        *((_QWORD *)__dst + 69) = v45;
        *((_QWORD *)__dst + 70) = v119;
        *((_QWORD *)__dst + 71) = v113;
        *((_QWORD *)__dst + 72) = v131;
        *((_QWORD *)__dst + 73) = v149;
        *((_QWORD *)__dst + 74) = v155;
        *((_QWORD *)__dst + 75) = v137;
        *((_QWORD *)__dst + 76) = v161;
        *((_QWORD *)__dst + 77) = v143;
        *((_QWORD *)__dst + 78) = v167;
        *((_QWORD *)__dst + 79) = v125;
        *((_QWORD *)__dst + 80) = v173;
        *((_QWORD *)__dst + 81) = v179;
        *((_QWORD *)__dst + 82) = v185;
        *((_QWORD *)__dst + 83) = v191;
        *((_QWORD *)__dst + 84) = v197;
        *((_QWORD *)__dst + 85) = v203;
      }
      else
      {
        v47 = *((_OWORD *)__src + 40);
        *((_OWORD *)__dst + 39) = *((_OWORD *)__src + 39);
        *((_OWORD *)__dst + 40) = v47;
        v48 = *((_OWORD *)__src + 42);
        *((_OWORD *)__dst + 41) = *((_OWORD *)__src + 41);
        *((_OWORD *)__dst + 42) = v48;
        v49 = *((_OWORD *)__src + 36);
        *((_OWORD *)__dst + 35) = *((_OWORD *)__src + 35);
        *((_OWORD *)__dst + 36) = v49;
        v50 = *((_OWORD *)__src + 38);
        *((_OWORD *)__dst + 37) = *((_OWORD *)__src + 37);
        *((_OWORD *)__dst + 38) = v50;
        v51 = *((_OWORD *)__src + 32);
        *((_OWORD *)__dst + 31) = *((_OWORD *)__src + 31);
        *((_OWORD *)__dst + 32) = v51;
        v52 = *((_OWORD *)__src + 34);
        *((_OWORD *)__dst + 33) = *((_OWORD *)__src + 33);
        *((_OWORD *)__dst + 34) = v52;
      }
    }
    else
    {
      v53 = *(_OWORD *)(__src + 648);
      *(_OWORD *)(__dst + 632) = *(_OWORD *)(__src + 632);
      *(_OWORD *)(__dst + 648) = v53;
      *(_OWORD *)(__dst + 664) = *(_OWORD *)(__src + 664);
      *((_QWORD *)__dst + 85) = *((_QWORD *)__src + 85);
      v54 = *(_OWORD *)(__src + 584);
      *(_OWORD *)(__dst + 568) = *(_OWORD *)(__src + 568);
      *(_OWORD *)(__dst + 584) = v54;
      v55 = *(_OWORD *)(__src + 616);
      *(_OWORD *)(__dst + 600) = *(_OWORD *)(__src + 600);
      *(_OWORD *)(__dst + 616) = v55;
      v56 = *(_OWORD *)(__src + 520);
      *(_OWORD *)(__dst + 504) = *(_OWORD *)(__src + 504);
      *(_OWORD *)(__dst + 520) = v56;
      v57 = *(_OWORD *)(__src + 552);
      *(_OWORD *)(__dst + 536) = *(_OWORD *)(__src + 536);
      *(_OWORD *)(__dst + 552) = v57;
      v58 = *(_OWORD *)(__src + 456);
      *v39 = *v40;
      *(_OWORD *)(__dst + 456) = v58;
      v59 = *(_OWORD *)(__src + 488);
      *(_OWORD *)(__dst + 472) = *(_OWORD *)(__src + 472);
      *(_OWORD *)(__dst + 488) = v59;
    }
    v65 = *((_QWORD *)__src + 91);
    v66 = *((_QWORD *)__src + 92);
    v114 = *((_QWORD *)__src + 94);
    v120 = *((_QWORD *)__src + 95);
    v126 = *((_QWORD *)__src + 96);
    v132 = *((_QWORD *)__src + 97);
    v138 = *((_QWORD *)__src + 98);
    v144 = *((_QWORD *)__src + 99);
    v150 = *((_QWORD *)__src + 100);
    v156 = *((_QWORD *)__src + 101);
    v162 = *((_QWORD *)__src + 102);
    v168 = *((_QWORD *)__src + 103);
    v174 = *((_QWORD *)__src + 104);
    v180 = *((_QWORD *)__src + 105);
    v186 = *((_QWORD *)__src + 106);
    v192 = *((_QWORD *)__src + 107);
    v198 = *((_QWORD *)__src + 108);
    v204 = *((_QWORD *)__src + 109);
    v67 = *((_QWORD *)__src + 86);
    v68 = *((_QWORD *)__src + 87);
    v69 = *((_QWORD *)__src + 88);
    v70 = *((_QWORD *)__src + 89);
    v71 = *((_QWORD *)__src + 90);
    v72 = *((_QWORD *)__src + 93);
    sub_1AD00FEAC(v67, v68, v69, v70, v71, v65, v66, v72, v114, v120, v126, v132, v138, v144, v150, v156, v162, v168, v174,
      v180,
      v186,
      v192,
      v198,
      v204);
    *((_QWORD *)__dst + 86) = v67;
    *((_QWORD *)__dst + 87) = v68;
    *((_QWORD *)__dst + 88) = v69;
    *((_QWORD *)__dst + 89) = v70;
    *((_QWORD *)__dst + 90) = v71;
    *((_QWORD *)__dst + 91) = v65;
    *((_QWORD *)__dst + 92) = v66;
    *((_QWORD *)__dst + 93) = v72;
    *((_QWORD *)__dst + 94) = v114;
    *((_QWORD *)__dst + 95) = v120;
    *((_QWORD *)__dst + 96) = v126;
    *((_QWORD *)__dst + 97) = v132;
    *((_QWORD *)__dst + 98) = v138;
    *((_QWORD *)__dst + 99) = v144;
    *((_QWORD *)__dst + 100) = v150;
    *((_QWORD *)__dst + 101) = v156;
    *((_QWORD *)__dst + 102) = v162;
    *((_QWORD *)__dst + 103) = v168;
    *((_QWORD *)__dst + 104) = v174;
    *((_QWORD *)__dst + 105) = v180;
    *((_QWORD *)__dst + 106) = v186;
    *((_QWORD *)__dst + 107) = v192;
    *((_QWORD *)__dst + 108) = v198;
    *((_QWORD *)__dst + 109) = v204;
  }
  else
  {
    memcpy(v39, v40, 0x1B8uLL);
  }
  v73 = __dst + 880;
  v74 = __src + 880;
  if (*((_QWORD *)__src + 144) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 148) | *((_QWORD *)__src + 146)) > 1
    || *((_QWORD *)__src + 154) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 150) & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 158) | *((_QWORD *)__src + 156)) >= 2)
  {
    v75 = *((_QWORD *)__src + 113);
    if (v75)
    {
      *((_QWORD *)__dst + 113) = v75;
      *((_QWORD *)__dst + 114) = *((_QWORD *)__src + 114);
      (**(void (***)(_OWORD *, _OWORD *))(v75 - 8))(v73, v74);
      *((_QWORD *)__dst + 115) = *((_QWORD *)__src + 115);
      __dst[928] = __src[928];
      v76 = *((_QWORD *)__src + 120);
      v77 = *((_QWORD *)__src + 122);
      v78 = *((_QWORD *)__src + 124);
      v79 = *((_QWORD *)__src + 134);
      if (v76 >> 1 != 0xFFFFFFFF
        || (v78 | (unint64_t)v77) > 1
        || *((_QWORD *)__src + 130) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 126) & 0xFFFFFFFFFFFF00FELL
        || (v79 | *((_QWORD *)__src + 132)) >= 2)
      {
        v93 = *((_QWORD *)__src + 118);
        v94 = *((_QWORD *)__src + 121);
        v121 = *((_QWORD *)__src + 125);
        v133 = *((_QWORD *)__src + 127);
        v151 = *((_QWORD *)__src + 128);
        v157 = *((_QWORD *)__src + 129);
        v163 = *((_QWORD *)__src + 131);
        v169 = *((_QWORD *)__src + 133);
        v175 = *((_QWORD *)__src + 135);
        v181 = *((_QWORD *)__src + 136);
        v187 = *((_QWORD *)__src + 137);
        v193 = *((_QWORD *)__src + 138);
        v199 = *((_QWORD *)__src + 139);
        v205 = *((_QWORD *)__src + 140);
        v139 = *((_QWORD *)__src + 130);
        v145 = *((_QWORD *)__src + 132);
        v95 = *((_QWORD *)__src + 117);
        v115 = *((_QWORD *)__src + 126);
        v96 = *((_QWORD *)__src + 119);
        v127 = *((_QWORD *)__src + 134);
        v97 = *((_QWORD *)__src + 123);
        sub_1AD00FEAC(v95, v93, v96, v76, v94, v77, v97, v78, v121, v115, v133, v151, v157, v139, v163, v145, v169, v79, v175,
          v181,
          v187,
          v193,
          v199,
          v205);
        *((_QWORD *)__dst + 117) = v95;
        *((_QWORD *)__dst + 118) = v93;
        *((_QWORD *)__dst + 119) = v96;
        *((_QWORD *)__dst + 120) = v76;
        *((_QWORD *)__dst + 121) = v94;
        *((_QWORD *)__dst + 122) = v77;
        *((_QWORD *)__dst + 123) = v97;
        *((_QWORD *)__dst + 124) = v78;
        *((_QWORD *)__dst + 125) = v121;
        *((_QWORD *)__dst + 126) = v115;
        *((_QWORD *)__dst + 127) = v133;
        *((_QWORD *)__dst + 128) = v151;
        *((_QWORD *)__dst + 129) = v157;
        *((_QWORD *)__dst + 130) = v139;
        *((_QWORD *)__dst + 131) = v163;
        *((_QWORD *)__dst + 132) = v145;
        *((_QWORD *)__dst + 133) = v169;
        *((_QWORD *)__dst + 134) = v127;
        *((_QWORD *)__dst + 135) = v175;
        *((_QWORD *)__dst + 136) = v181;
        *((_QWORD *)__dst + 137) = v187;
        *((_QWORD *)__dst + 138) = v193;
        *((_QWORD *)__dst + 139) = v199;
        *((_QWORD *)__dst + 140) = v205;
      }
      else
      {
        v80 = *(_OWORD *)(__src + 1080);
        *(_OWORD *)(__dst + 1064) = *(_OWORD *)(__src + 1064);
        *(_OWORD *)(__dst + 1080) = v80;
        v81 = *(_OWORD *)(__src + 1112);
        *(_OWORD *)(__dst + 1096) = *(_OWORD *)(__src + 1096);
        *(_OWORD *)(__dst + 1112) = v81;
        v82 = *(_OWORD *)(__src + 1016);
        *(_OWORD *)(__dst + 1000) = *(_OWORD *)(__src + 1000);
        *(_OWORD *)(__dst + 1016) = v82;
        v83 = *(_OWORD *)(__src + 1048);
        *(_OWORD *)(__dst + 1032) = *(_OWORD *)(__src + 1032);
        *(_OWORD *)(__dst + 1048) = v83;
        v84 = *(_OWORD *)(__src + 952);
        *(_OWORD *)(__dst + 936) = *(_OWORD *)(__src + 936);
        *(_OWORD *)(__dst + 952) = v84;
        v85 = *(_OWORD *)(__src + 984);
        *(_OWORD *)(__dst + 968) = *(_OWORD *)(__src + 968);
        *(_OWORD *)(__dst + 984) = v85;
      }
    }
    else
    {
      v86 = *((_OWORD *)__src + 68);
      *((_OWORD *)__dst + 67) = *((_OWORD *)__src + 67);
      *((_OWORD *)__dst + 68) = v86;
      *((_OWORD *)__dst + 69) = *((_OWORD *)__src + 69);
      *((_QWORD *)__dst + 140) = *((_QWORD *)__src + 140);
      v87 = *((_OWORD *)__src + 64);
      *((_OWORD *)__dst + 63) = *((_OWORD *)__src + 63);
      *((_OWORD *)__dst + 64) = v87;
      v88 = *((_OWORD *)__src + 66);
      *((_OWORD *)__dst + 65) = *((_OWORD *)__src + 65);
      *((_OWORD *)__dst + 66) = v88;
      v89 = *((_OWORD *)__src + 60);
      *((_OWORD *)__dst + 59) = *((_OWORD *)__src + 59);
      *((_OWORD *)__dst + 60) = v89;
      v90 = *((_OWORD *)__src + 62);
      *((_OWORD *)__dst + 61) = *((_OWORD *)__src + 61);
      *((_OWORD *)__dst + 62) = v90;
      v91 = *((_OWORD *)__src + 56);
      *v73 = *v74;
      *((_OWORD *)__dst + 56) = v91;
      v92 = *((_OWORD *)__src + 58);
      *((_OWORD *)__dst + 57) = *((_OWORD *)__src + 57);
      *((_OWORD *)__dst + 58) = v92;
    }
    v98 = *((_QWORD *)__src + 146);
    v99 = *((_QWORD *)__src + 147);
    v116 = *((_QWORD *)__src + 149);
    v122 = *((_QWORD *)__src + 150);
    v128 = *((_QWORD *)__src + 151);
    v134 = *((_QWORD *)__src + 152);
    v140 = *((_QWORD *)__src + 153);
    v146 = *((_QWORD *)__src + 154);
    v152 = *((_QWORD *)__src + 155);
    v158 = *((_QWORD *)__src + 156);
    v164 = *((_QWORD *)__src + 157);
    v170 = *((_QWORD *)__src + 158);
    v176 = *((_QWORD *)__src + 159);
    v182 = *((_QWORD *)__src + 160);
    v188 = *((_QWORD *)__src + 161);
    v194 = *((_QWORD *)__src + 162);
    v200 = *((_QWORD *)__src + 163);
    v206 = *((_QWORD *)__src + 164);
    v100 = *((_QWORD *)__src + 141);
    v101 = *((_QWORD *)__src + 142);
    v102 = *((_QWORD *)__src + 143);
    v103 = *((_QWORD *)__src + 144);
    v104 = *((_QWORD *)__src + 145);
    v105 = *((_QWORD *)__src + 148);
    sub_1AD00FEAC(v100, v101, v102, v103, v104, v98, v99, v105, v116, v122, v128, v134, v140, v146, v152, v158, v164, v170, v176,
      v182,
      v188,
      v194,
      v200,
      v206);
    *((_QWORD *)__dst + 141) = v100;
    *((_QWORD *)__dst + 142) = v101;
    *((_QWORD *)__dst + 143) = v102;
    *((_QWORD *)__dst + 144) = v103;
    *((_QWORD *)__dst + 145) = v104;
    *((_QWORD *)__dst + 146) = v98;
    *((_QWORD *)__dst + 147) = v99;
    *((_QWORD *)__dst + 148) = v105;
    *((_QWORD *)__dst + 149) = v116;
    *((_QWORD *)__dst + 150) = v122;
    *((_QWORD *)__dst + 151) = v128;
    *((_QWORD *)__dst + 152) = v134;
    *((_QWORD *)__dst + 153) = v140;
    *((_QWORD *)__dst + 154) = v146;
    *((_QWORD *)__dst + 155) = v152;
    *((_QWORD *)__dst + 156) = v158;
    *((_QWORD *)__dst + 157) = v164;
    *((_QWORD *)__dst + 158) = v170;
    *((_QWORD *)__dst + 159) = v176;
    *((_QWORD *)__dst + 160) = v182;
    *((_QWORD *)__dst + 161) = v188;
    *((_QWORD *)__dst + 162) = v194;
    *((_QWORD *)__dst + 163) = v200;
    *((_QWORD *)__dst + 164) = v206;
  }
  else
  {
    memcpy(v73, v74, 0x1B8uLL);
  }
  v106 = *(_OWORD *)(__src + 1336);
  *(_OWORD *)(__dst + 1320) = *(_OWORD *)(__src + 1320);
  *(_OWORD *)(__dst + 1336) = v106;
  *((_QWORD *)__dst + 169) = *((_QWORD *)__src + 169);
  *((_QWORD *)__dst + 170) = *((_QWORD *)__src + 170);
  v107 = *(_OWORD *)(__src + 1384);
  *(_OWORD *)(__dst + 1368) = *(_OWORD *)(__src + 1368);
  *(_OWORD *)(__dst + 1384) = v107;
  *((_QWORD *)__dst + 175) = *((_QWORD *)__src + 175);
  *((_QWORD *)__dst + 176) = *((_QWORD *)__src + 176);
  v108 = *(_OWORD *)(__src + 1432);
  *(_OWORD *)(__dst + 1416) = *(_OWORD *)(__src + 1416);
  *(_OWORD *)(__dst + 1432) = v108;
  *((_QWORD *)__dst + 181) = *((_QWORD *)__src + 181);
  *((_QWORD *)__dst + 182) = *((_QWORD *)__src + 182);
  v109 = *(_OWORD *)(__src + 1480);
  *(_OWORD *)(__dst + 1464) = *(_OWORD *)(__src + 1464);
  *(_OWORD *)(__dst + 1480) = v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return __dst;
}

_QWORD *assignWithCopy for PassPreview(_QWORD *__dst, char *__src)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  unint64_t v171;
  _OWORD *v172;
  __int128 *v173;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  __int128 *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  BOOL v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  unint64_t v341;
  _OWORD *v342;
  __int128 *v343;
  BOOL v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  _OWORD *v365;
  __int128 *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  BOOL v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  unint64_t v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  unint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;

  v7 = *((_QWORD *)__src + 34) >> 1 == 0xFFFFFFFFLL
    && (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) < 2uLL
    && (*((_QWORD *)__src + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 40) & 0xFFFFFFFFFFFF00FELL) == 0
    && (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) < 2uLL;
  if (__dst[34] >> 1 == 0xFFFFFFFFLL
    && (__dst[38] | __dst[36]) <= 1
    && !(__dst[44] & 0xFFFFFFFFFFFFFEFELL | __dst[40] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[48] | __dst[46]) < 2)
  {
    if (!v7)
    {
      v8 = *((_QWORD *)__src + 3);
      if (v8)
      {
        __dst[3] = v8;
        __dst[4] = *((_QWORD *)__src + 4);
        (**(void (***)(_QWORD *, char *))(v8 - 8))(__dst, __src);
        v9 = *((_QWORD *)__src + 5);
        *((_BYTE *)__dst + 48) = __src[48];
        __dst[5] = v9;
        v10 = *((_QWORD *)__src + 10);
        v11 = *((_QWORD *)__src + 12);
        v12 = *((_QWORD *)__src + 14);
        v13 = *((_QWORD *)__src + 22);
        if (v10 >> 1 != 0xFFFFFFFF
          || (v12 | (unint64_t)v11) > 1
          || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)__src + 24) | (unint64_t)v13) >= 2)
        {
          v73 = *((_QWORD *)__src + 7);
          v74 = *((_QWORD *)__src + 11);
          v532 = *((_QWORD *)__src + 15);
          v586 = *((_QWORD *)__src + 17);
          v604 = *((_QWORD *)__src + 18);
          v640 = *((_QWORD *)__src + 19);
          v658 = *((_QWORD *)__src + 21);
          v676 = *((_QWORD *)__src + 23);
          v694 = *((_QWORD *)__src + 25);
          v712 = *((_QWORD *)__src + 26);
          v730 = *((_QWORD *)__src + 27);
          v748 = *((_QWORD *)__src + 28);
          v766 = *((_QWORD *)__src + 29);
          v784 = *((_QWORD *)__src + 30);
          v568 = *((_QWORD *)__src + 20);
          v75 = *((_QWORD *)__src + 8);
          v622 = *((_QWORD *)__src + 24);
          v514 = *((_QWORD *)__src + 16);
          v76 = *((_QWORD *)__src + 9);
          v550 = *((_QWORD *)__src + 22);
          v77 = *((_QWORD *)__src + 13);
          sub_1AD00FEAC(v73, v75, v76, v10, v74, v11, v77, v12, v532, v514, v586, v604, v640, v568, v658, v13, v676, v622, v694,
            v712,
            v730,
            v748,
            v766,
            v784);
          __dst[7] = v73;
          __dst[8] = v75;
          __dst[9] = v76;
          __dst[10] = v10;
          __dst[11] = v74;
          __dst[12] = v11;
          __dst[13] = v77;
          __dst[14] = v12;
          __dst[15] = v532;
          __dst[16] = v514;
          __dst[17] = v586;
          __dst[18] = v604;
          __dst[19] = v640;
          __dst[20] = v568;
          __dst[21] = v658;
          __dst[22] = v550;
          __dst[23] = v676;
          __dst[24] = v622;
          __dst[25] = v694;
          __dst[26] = v712;
          __dst[27] = v730;
          __dst[28] = v748;
          __dst[29] = v766;
          __dst[30] = v784;
        }
        else
        {
          v14 = *(_OWORD *)(__src + 56);
          v15 = *(_OWORD *)(__src + 72);
          v16 = *(_OWORD *)(__src + 104);
          *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
          *(_OWORD *)(__dst + 13) = v16;
          *(_OWORD *)(__dst + 7) = v14;
          *(_OWORD *)(__dst + 9) = v15;
          v17 = *(_OWORD *)(__src + 120);
          v18 = *(_OWORD *)(__src + 136);
          v19 = *(_OWORD *)(__src + 168);
          *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
          *(_OWORD *)(__dst + 21) = v19;
          *(_OWORD *)(__dst + 15) = v17;
          *(_OWORD *)(__dst + 17) = v18;
          v20 = *(_OWORD *)(__src + 184);
          v21 = *(_OWORD *)(__src + 200);
          v22 = *(_OWORD *)(__src + 232);
          *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
          *(_OWORD *)(__dst + 29) = v22;
          *(_OWORD *)(__dst + 23) = v20;
          *(_OWORD *)(__dst + 25) = v21;
        }
      }
      else
      {
        v47 = *(_OWORD *)__src;
        v48 = *((_OWORD *)__src + 1);
        v49 = *((_OWORD *)__src + 3);
        *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
        *((_OWORD *)__dst + 3) = v49;
        *(_OWORD *)__dst = v47;
        *((_OWORD *)__dst + 1) = v48;
        v50 = *((_OWORD *)__src + 4);
        v51 = *((_OWORD *)__src + 5);
        v52 = *((_OWORD *)__src + 7);
        *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
        *((_OWORD *)__dst + 7) = v52;
        *((_OWORD *)__dst + 4) = v50;
        *((_OWORD *)__dst + 5) = v51;
        v53 = *((_OWORD *)__src + 8);
        v54 = *((_OWORD *)__src + 9);
        v55 = *((_OWORD *)__src + 11);
        *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
        *((_OWORD *)__dst + 11) = v55;
        *((_OWORD *)__dst + 8) = v53;
        *((_OWORD *)__dst + 9) = v54;
        v56 = *((_OWORD *)__src + 12);
        v57 = *((_OWORD *)__src + 13);
        v58 = *((_OWORD *)__src + 14);
        __dst[30] = *((_QWORD *)__src + 30);
        *((_OWORD *)__dst + 13) = v57;
        *((_OWORD *)__dst + 14) = v58;
        *((_OWORD *)__dst + 12) = v56;
      }
      v78 = *((_QWORD *)__src + 36);
      v79 = *((_QWORD *)__src + 37);
      v515 = *((_QWORD *)__src + 39);
      v533 = *((_QWORD *)__src + 40);
      v551 = *((_QWORD *)__src + 41);
      v569 = *((_QWORD *)__src + 42);
      v587 = *((_QWORD *)__src + 43);
      v605 = *((_QWORD *)__src + 44);
      v623 = *((_QWORD *)__src + 45);
      v641 = *((_QWORD *)__src + 46);
      v659 = *((_QWORD *)__src + 47);
      v677 = *((_QWORD *)__src + 48);
      v695 = *((_QWORD *)__src + 49);
      v713 = *((_QWORD *)__src + 50);
      v731 = *((_QWORD *)__src + 51);
      v749 = *((_QWORD *)__src + 52);
      v767 = *((_QWORD *)__src + 53);
      v785 = *((_QWORD *)__src + 54);
      v80 = *((_QWORD *)__src + 31);
      v81 = *((_QWORD *)__src + 32);
      v82 = *((_QWORD *)__src + 33);
      v83 = *((_QWORD *)__src + 34);
      v84 = *((_QWORD *)__src + 35);
      v85 = *((_QWORD *)__src + 38);
      sub_1AD00FEAC(v80, v81, v82, v83, v84, v78, v79, v85, v515, v533, v551, v569, v587, v605, v623, v641, v659, v677, v695,
        v713,
        v731,
        v749,
        v767,
        v785);
      __dst[31] = v80;
      __dst[32] = v81;
      __dst[33] = v82;
      __dst[34] = v83;
      __dst[35] = v84;
      __dst[36] = v78;
      __dst[37] = v79;
      __dst[38] = v85;
      __dst[39] = v515;
      __dst[40] = v533;
      __dst[41] = v551;
      __dst[42] = v569;
      __dst[43] = v587;
      __dst[44] = v605;
      __dst[45] = v623;
      __dst[46] = v641;
      __dst[47] = v659;
      __dst[48] = v677;
      __dst[49] = v695;
      __dst[50] = v713;
      __dst[51] = v731;
      __dst[52] = v749;
      __dst[53] = v767;
      __dst[54] = v785;
      goto LABEL_64;
    }
LABEL_26:
    memcpy(__dst, __src, 0x1B8uLL);
    goto LABEL_64;
  }
  if (v7)
  {
    sub_1AD4177F8(__dst);
    goto LABEL_26;
  }
  v23 = *((_QWORD *)__src + 3);
  if (__dst[3])
  {
    if (v23)
    {
      __swift_assign_boxed_opaque_existential_1(__dst, (uint64_t *)__src);
      v24 = *((_QWORD *)__src + 5);
      *((_BYTE *)__dst + 48) = __src[48];
      __dst[5] = v24;
      v25 = __dst + 7;
      v26 = (__int128 *)(__src + 56);
      v27 = *((_QWORD *)__src + 10);
      v28 = *((_QWORD *)__src + 12);
      v29 = *((_QWORD *)__src + 14);
      v30 = *((_QWORD *)__src + 16);
      v31 = *((_QWORD *)__src + 20);
      v32 = *((_QWORD *)__src + 22);
      v33 = *((_QWORD *)__src + 24);
      v37 = v27 >> 1 == 0xFFFFFFFF
         && (v29 | (unint64_t)v28) < 2
         && (v31 & 0xFFFFFFFFFFFFFEFELL | v30 & 0xFFFFFFFFFFFF00FELL) == 0
         && (v33 | v32) < 2;
      if (__dst[10] >> 1 != 0xFFFFFFFFLL
        || (__dst[14] | __dst[12]) > 1
        || __dst[20] & 0xFFFFFFFFFFFFFEFELL | __dst[16] & 0xFFFFFFFFFFFF00FELL
        || (__dst[24] | __dst[22]) >= 2)
      {
        if (v37)
        {
          sub_1AD148B34((uint64_t)(__dst + 7));
          v98 = *(_OWORD *)(__src + 104);
          v100 = *v26;
          v99 = *(_OWORD *)(__src + 72);
          *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
          *(_OWORD *)(__dst + 13) = v98;
          *v25 = v100;
          *(_OWORD *)(__dst + 9) = v99;
          v101 = *(_OWORD *)(__src + 168);
          v103 = *(_OWORD *)(__src + 120);
          v102 = *(_OWORD *)(__src + 136);
          *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
          *(_OWORD *)(__dst + 21) = v101;
          *(_OWORD *)(__dst + 15) = v103;
          *(_OWORD *)(__dst + 17) = v102;
          v104 = *(_OWORD *)(__src + 232);
          v106 = *(_OWORD *)(__src + 184);
          v105 = *(_OWORD *)(__src + 200);
          *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
          *(_OWORD *)(__dst + 29) = v104;
          *(_OWORD *)(__dst + 23) = v106;
          *(_OWORD *)(__dst + 25) = v105;
        }
        else
        {
          v536 = *((_QWORD *)__src + 8);
          v554 = *((_QWORD *)__src + 7);
          v518 = *((_QWORD *)__src + 9);
          v128 = *((_QWORD *)__src + 11);
          v129 = *((_QWORD *)__src + 13);
          v572 = *((_QWORD *)__src + 15);
          v590 = *((_QWORD *)__src + 17);
          v608 = *((_QWORD *)__src + 18);
          v626 = *((_QWORD *)__src + 19);
          v644 = *((_QWORD *)__src + 21);
          v662 = *((_QWORD *)__src + 23);
          v680 = *((_QWORD *)__src + 25);
          v698 = *((_QWORD *)__src + 26);
          v716 = *((_QWORD *)__src + 27);
          v734 = *((_QWORD *)__src + 28);
          v752 = *((_QWORD *)__src + 29);
          v770 = *((_QWORD *)__src + 30);
          v788 = *((_QWORD *)__src + 24);
          sub_1AD00FEAC(v554, v536, v518, v27, v128, v28, v129, v29, v572, v30, v590, v608, v626, v31, v644, v32, v662, v33, v680,
            v698,
            v716,
            v734,
            v752,
            v770);
          v130 = __dst[7];
          v131 = __dst[8];
          __dst[7] = v554;
          __dst[8] = v536;
          v132 = __dst[9];
          v133 = __dst[10];
          __dst[9] = v518;
          __dst[10] = v27;
          v134 = __dst[11];
          v135 = __dst[12];
          __dst[11] = v128;
          __dst[12] = v28;
          v136 = __dst[13];
          v137 = __dst[14];
          __dst[13] = v129;
          __dst[14] = v29;
          v138 = *(_OWORD *)(__dst + 15);
          __dst[15] = v572;
          __dst[16] = v30;
          v139 = *(_OWORD *)(__dst + 17);
          __dst[17] = v590;
          __dst[18] = v608;
          v140 = *(_OWORD *)(__dst + 19);
          __dst[19] = v626;
          __dst[20] = v31;
          v141 = *(_OWORD *)(__dst + 21);
          __dst[21] = v644;
          __dst[22] = v32;
          v142 = *(_OWORD *)(__dst + 23);
          __dst[23] = v662;
          __dst[24] = v788;
          v143 = *(_OWORD *)(__dst + 25);
          __dst[25] = v680;
          __dst[26] = v698;
          v144 = *(_OWORD *)(__dst + 27);
          __dst[27] = v716;
          __dst[28] = v734;
          v145 = __dst[29];
          v146 = __dst[30];
          __dst[29] = v752;
          __dst[30] = v770;
          sub_1AD00E8B0(v130, v131, v132, v133, v134, v135, v136, v137, v138, *((uint64_t *)&v138 + 1), v139, *((uint64_t *)&v139 + 1), v140, *((uint64_t *)&v140 + 1), v141, *((uint64_t *)&v141 + 1), v142, *((unint64_t *)&v142 + 1), v143,
            *((uint64_t *)&v143 + 1),
            v144,
            *((uint64_t *)&v144 + 1),
            v145,
            v146);
        }
      }
      else if (v37)
      {
        v38 = *v26;
        v39 = *(_OWORD *)(__src + 72);
        v40 = *(_OWORD *)(__src + 104);
        *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
        *(_OWORD *)(__dst + 13) = v40;
        *v25 = v38;
        *(_OWORD *)(__dst + 9) = v39;
        v41 = *(_OWORD *)(__src + 120);
        v42 = *(_OWORD *)(__src + 136);
        v43 = *(_OWORD *)(__src + 168);
        *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
        *(_OWORD *)(__dst + 21) = v43;
        *(_OWORD *)(__dst + 15) = v41;
        *(_OWORD *)(__dst + 17) = v42;
        v44 = *(_OWORD *)(__src + 184);
        v45 = *(_OWORD *)(__src + 200);
        v46 = *(_OWORD *)(__src + 232);
        *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
        *(_OWORD *)(__dst + 29) = v46;
        *(_OWORD *)(__dst + 23) = v44;
        *(_OWORD *)(__dst + 25) = v45;
      }
      else
      {
        v124 = *((_QWORD *)__src + 11);
        v125 = *((_QWORD *)__src + 13);
        v517 = *((_QWORD *)__src + 9);
        v535 = *((_QWORD *)__src + 15);
        v571 = *((_QWORD *)__src + 17);
        v589 = *((_QWORD *)__src + 18);
        v625 = *((_QWORD *)__src + 19);
        v643 = *((_QWORD *)__src + 21);
        v661 = *((_QWORD *)__src + 23);
        v679 = *((_QWORD *)__src + 25);
        v697 = *((_QWORD *)__src + 26);
        v715 = *((_QWORD *)__src + 27);
        v733 = *((_QWORD *)__src + 28);
        v751 = *((_QWORD *)__src + 29);
        v769 = *((_QWORD *)__src + 30);
        v607 = *((_QWORD *)__src + 22);
        v126 = *((_QWORD *)__src + 7);
        v553 = *((_QWORD *)__src + 20);
        v127 = *((_QWORD *)__src + 8);
        v787 = *((_QWORD *)__src + 24);
        sub_1AD00FEAC(v126, v127, v517, v27, v124, v28, v125, v29, v535, v30, v571, v589, v625, v553, v643, v607, v661, v33, v679,
          v697,
          v715,
          v733,
          v751,
          v769);
        __dst[7] = v126;
        __dst[8] = v127;
        __dst[9] = v517;
        __dst[10] = v27;
        __dst[11] = v124;
        __dst[12] = v28;
        __dst[13] = v125;
        __dst[14] = v29;
        __dst[15] = v535;
        __dst[16] = v30;
        __dst[17] = v571;
        __dst[18] = v589;
        __dst[19] = v625;
        __dst[20] = v553;
        __dst[21] = v643;
        __dst[22] = v607;
        __dst[23] = v661;
        __dst[24] = v787;
        __dst[25] = v679;
        __dst[26] = v697;
        __dst[27] = v715;
        __dst[28] = v733;
        __dst[29] = v751;
        __dst[30] = v769;
      }
    }
    else
    {
      sub_1AD046A30(__dst);
      v86 = *((_OWORD *)__src + 3);
      v88 = *(_OWORD *)__src;
      v87 = *((_OWORD *)__src + 1);
      *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
      *((_OWORD *)__dst + 3) = v86;
      *(_OWORD *)__dst = v88;
      *((_OWORD *)__dst + 1) = v87;
      v89 = *((_OWORD *)__src + 7);
      v91 = *((_OWORD *)__src + 4);
      v90 = *((_OWORD *)__src + 5);
      *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
      *((_OWORD *)__dst + 7) = v89;
      *((_OWORD *)__dst + 4) = v91;
      *((_OWORD *)__dst + 5) = v90;
      v92 = *((_OWORD *)__src + 11);
      v94 = *((_OWORD *)__src + 8);
      v93 = *((_OWORD *)__src + 9);
      *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
      *((_OWORD *)__dst + 11) = v92;
      *((_OWORD *)__dst + 8) = v94;
      *((_OWORD *)__dst + 9) = v93;
      v96 = *((_OWORD *)__src + 13);
      v95 = *((_OWORD *)__src + 14);
      v97 = *((_OWORD *)__src + 12);
      __dst[30] = *((_QWORD *)__src + 30);
      *((_OWORD *)__dst + 13) = v96;
      *((_OWORD *)__dst + 14) = v95;
      *((_OWORD *)__dst + 12) = v97;
    }
  }
  else if (v23)
  {
    __dst[3] = v23;
    __dst[4] = *((_QWORD *)__src + 4);
    (**(void (***)(_QWORD *, char *))(v23 - 8))(__dst, __src);
    v59 = *((_QWORD *)__src + 5);
    *((_BYTE *)__dst + 48) = __src[48];
    __dst[5] = v59;
    v60 = *((_QWORD *)__src + 10);
    v61 = *((_QWORD *)__src + 12);
    v62 = *((_QWORD *)__src + 14);
    v63 = *((_QWORD *)__src + 22);
    if (v60 >> 1 != 0xFFFFFFFF
      || (v62 | (unint64_t)v61) > 1
      || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)__src + 24) | (unint64_t)v63) >= 2)
    {
      v119 = *((_QWORD *)__src + 7);
      v120 = *((_QWORD *)__src + 11);
      v534 = *((_QWORD *)__src + 15);
      v588 = *((_QWORD *)__src + 17);
      v606 = *((_QWORD *)__src + 18);
      v642 = *((_QWORD *)__src + 19);
      v660 = *((_QWORD *)__src + 21);
      v678 = *((_QWORD *)__src + 23);
      v696 = *((_QWORD *)__src + 25);
      v714 = *((_QWORD *)__src + 26);
      v732 = *((_QWORD *)__src + 27);
      v750 = *((_QWORD *)__src + 28);
      v768 = *((_QWORD *)__src + 29);
      v786 = *((_QWORD *)__src + 30);
      v570 = *((_QWORD *)__src + 20);
      v121 = *((_QWORD *)__src + 8);
      v624 = *((_QWORD *)__src + 24);
      v516 = *((_QWORD *)__src + 16);
      v122 = *((_QWORD *)__src + 9);
      v552 = *((_QWORD *)__src + 22);
      v123 = *((_QWORD *)__src + 13);
      sub_1AD00FEAC(v119, v121, v122, v60, v120, v61, v123, v62, v534, v516, v588, v606, v642, v570, v660, v63, v678, v624, v696,
        v714,
        v732,
        v750,
        v768,
        v786);
      __dst[7] = v119;
      __dst[8] = v121;
      __dst[9] = v122;
      __dst[10] = v60;
      __dst[11] = v120;
      __dst[12] = v61;
      __dst[13] = v123;
      __dst[14] = v62;
      __dst[15] = v534;
      __dst[16] = v516;
      __dst[17] = v588;
      __dst[18] = v606;
      __dst[19] = v642;
      __dst[20] = v570;
      __dst[21] = v660;
      __dst[22] = v552;
      __dst[23] = v678;
      __dst[24] = v624;
      __dst[25] = v696;
      __dst[26] = v714;
      __dst[27] = v732;
      __dst[28] = v750;
      __dst[29] = v768;
      __dst[30] = v786;
    }
    else
    {
      v64 = *(_OWORD *)(__src + 56);
      v65 = *(_OWORD *)(__src + 72);
      v66 = *(_OWORD *)(__src + 104);
      *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
      *(_OWORD *)(__dst + 13) = v66;
      *(_OWORD *)(__dst + 7) = v64;
      *(_OWORD *)(__dst + 9) = v65;
      v67 = *(_OWORD *)(__src + 120);
      v68 = *(_OWORD *)(__src + 136);
      v69 = *(_OWORD *)(__src + 168);
      *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
      *(_OWORD *)(__dst + 21) = v69;
      *(_OWORD *)(__dst + 15) = v67;
      *(_OWORD *)(__dst + 17) = v68;
      v70 = *(_OWORD *)(__src + 184);
      v71 = *(_OWORD *)(__src + 200);
      v72 = *(_OWORD *)(__src + 232);
      *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
      *(_OWORD *)(__dst + 29) = v72;
      *(_OWORD *)(__dst + 23) = v70;
      *(_OWORD *)(__dst + 25) = v71;
    }
  }
  else
  {
    v107 = *(_OWORD *)__src;
    v108 = *((_OWORD *)__src + 1);
    v109 = *((_OWORD *)__src + 3);
    *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
    *((_OWORD *)__dst + 3) = v109;
    *(_OWORD *)__dst = v107;
    *((_OWORD *)__dst + 1) = v108;
    v110 = *((_OWORD *)__src + 4);
    v111 = *((_OWORD *)__src + 5);
    v112 = *((_OWORD *)__src + 7);
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((_OWORD *)__dst + 7) = v112;
    *((_OWORD *)__dst + 4) = v110;
    *((_OWORD *)__dst + 5) = v111;
    v113 = *((_OWORD *)__src + 8);
    v114 = *((_OWORD *)__src + 9);
    v115 = *((_OWORD *)__src + 11);
    *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
    *((_OWORD *)__dst + 11) = v115;
    *((_OWORD *)__dst + 8) = v113;
    *((_OWORD *)__dst + 9) = v114;
    v116 = *((_OWORD *)__src + 12);
    v117 = *((_OWORD *)__src + 13);
    v118 = *((_OWORD *)__src + 14);
    __dst[30] = *((_QWORD *)__src + 30);
    *((_OWORD *)__dst + 13) = v117;
    *((_OWORD *)__dst + 14) = v118;
    *((_OWORD *)__dst + 12) = v116;
  }
  v147 = *((_QWORD *)__src + 31);
  v148 = *((_QWORD *)__src + 32);
  v149 = *((_QWORD *)__src + 33);
  v150 = *((_QWORD *)__src + 34);
  v151 = *((_QWORD *)__src + 35);
  v152 = *((_QWORD *)__src + 36);
  v154 = *((_QWORD *)__src + 37);
  v153 = *((_QWORD *)__src + 38);
  v519 = *((_QWORD *)__src + 39);
  v537 = *((_QWORD *)__src + 40);
  v555 = *((_QWORD *)__src + 41);
  v573 = *((_QWORD *)__src + 42);
  v591 = *((_QWORD *)__src + 43);
  v609 = *((_QWORD *)__src + 44);
  v627 = *((_QWORD *)__src + 45);
  v645 = *((_QWORD *)__src + 46);
  v663 = *((_QWORD *)__src + 47);
  v681 = *((_QWORD *)__src + 48);
  v699 = *((_QWORD *)__src + 49);
  v717 = *((_QWORD *)__src + 50);
  v735 = *((_QWORD *)__src + 51);
  v753 = *((_QWORD *)__src + 52);
  v771 = *((_QWORD *)__src + 53);
  v789 = *((_QWORD *)__src + 54);
  sub_1AD00FEAC(v147, v148, v149, v150, v151, v152, v154, v153, v519, v537, v555, v573, v591, v609, v627, v645, v663, v681, v699,
    v717,
    v735,
    v753,
    v771,
    v789);
  v155 = __dst[31];
  v156 = __dst[32];
  v157 = __dst[33];
  v158 = __dst[34];
  __dst[31] = v147;
  __dst[32] = v148;
  v159 = __dst[35];
  v160 = __dst[36];
  __dst[33] = v149;
  __dst[34] = v150;
  v161 = __dst[37];
  v162 = __dst[38];
  __dst[35] = v151;
  __dst[36] = v152;
  __dst[37] = v154;
  __dst[38] = v153;
  v163 = *(_OWORD *)(__dst + 39);
  v164 = *(_OWORD *)(__dst + 41);
  v165 = *(_OWORD *)(__dst + 43);
  v166 = *(_OWORD *)(__dst + 45);
  v167 = *(_OWORD *)(__dst + 47);
  v168 = *(_OWORD *)(__dst + 49);
  v169 = *(_OWORD *)(__dst + 51);
  __dst[39] = v519;
  __dst[40] = v537;
  v170 = __dst[53];
  v171 = __dst[54];
  __dst[41] = v555;
  __dst[42] = v573;
  __dst[43] = v591;
  __dst[44] = v609;
  __dst[45] = v627;
  __dst[46] = v645;
  __dst[47] = v663;
  __dst[48] = v681;
  __dst[49] = v699;
  __dst[50] = v717;
  __dst[51] = v735;
  __dst[52] = v753;
  __dst[53] = v771;
  __dst[54] = v789;
  sub_1AD00E8B0(v155, v156, v157, v158, v159, v160, v161, v162, v163, *((uint64_t *)&v163 + 1), v164, *((uint64_t *)&v164 + 1), v165, *((uint64_t *)&v165 + 1), v166, *((uint64_t *)&v166 + 1), v167, *((unint64_t *)&v167 + 1), v168,
    *((uint64_t *)&v168 + 1),
    v169,
    *((uint64_t *)&v169 + 1),
    v170,
    v171);
LABEL_64:
  v172 = __dst + 55;
  v173 = (__int128 *)(__src + 440);
  v177 = *((_QWORD *)__src + 89) >> 1 == 0xFFFFFFFFLL
      && (*((_QWORD *)__src + 93) | *((_QWORD *)__src + 91)) < 2uLL
      && (*((_QWORD *)__src + 99) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 95) & 0xFFFFFFFFFFFF00FELL) == 0
      && (*((_QWORD *)__src + 103) | *((_QWORD *)__src + 101)) < 2uLL;
  if (__dst[89] >> 1 == 0xFFFFFFFFLL
    && (__dst[93] | __dst[91]) <= 1
    && !(__dst[99] & 0xFFFFFFFFFFFFFEFELL | __dst[95] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[103] | __dst[101]) < 2)
  {
    if (!v177)
    {
      v178 = *((_QWORD *)__src + 58);
      if (v178)
      {
        __dst[58] = v178;
        __dst[59] = *((_QWORD *)__src + 59);
        (**(void (***)(char *, char *))(v178 - 8))((char *)__dst + 440, __src + 440);
        v179 = *((_QWORD *)__src + 60);
        *((_BYTE *)__dst + 488) = __src[488];
        __dst[60] = v179;
        v180 = *((_QWORD *)__src + 65);
        v181 = *((_QWORD *)__src + 67);
        v182 = *((_QWORD *)__src + 69);
        v183 = *((_QWORD *)__src + 77);
        if (v180 >> 1 != 0xFFFFFFFF
          || (v182 | (unint64_t)v181) > 1
          || *((_QWORD *)__src + 75) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 71) & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)__src + 79) | (unint64_t)v183) >= 2)
        {
          v243 = *((_QWORD *)__src + 62);
          v244 = *((_QWORD *)__src + 66);
          v538 = *((_QWORD *)__src + 70);
          v592 = *((_QWORD *)__src + 72);
          v610 = *((_QWORD *)__src + 73);
          v646 = *((_QWORD *)__src + 74);
          v664 = *((_QWORD *)__src + 76);
          v682 = *((_QWORD *)__src + 78);
          v700 = *((_QWORD *)__src + 80);
          v718 = *((_QWORD *)__src + 81);
          v736 = *((_QWORD *)__src + 82);
          v754 = *((_QWORD *)__src + 83);
          v772 = *((_QWORD *)__src + 84);
          v790 = *((_QWORD *)__src + 85);
          v574 = *((_QWORD *)__src + 75);
          v245 = *((_QWORD *)__src + 63);
          v628 = *((_QWORD *)__src + 79);
          v520 = *((_QWORD *)__src + 71);
          v246 = *((_QWORD *)__src + 64);
          v556 = *((_QWORD *)__src + 77);
          v247 = *((_QWORD *)__src + 68);
          sub_1AD00FEAC(v243, v245, v246, v180, v244, v181, v247, v182, v538, v520, v592, v610, v646, v574, v664, v183, v682, v628, v700,
            v718,
            v736,
            v754,
            v772,
            v790);
          __dst[62] = v243;
          __dst[63] = v245;
          __dst[64] = v246;
          __dst[65] = v180;
          __dst[66] = v244;
          __dst[67] = v181;
          __dst[68] = v247;
          __dst[69] = v182;
          __dst[70] = v538;
          __dst[71] = v520;
          __dst[72] = v592;
          __dst[73] = v610;
          __dst[74] = v646;
          __dst[75] = v574;
          __dst[76] = v664;
          __dst[77] = v556;
          __dst[78] = v682;
          __dst[79] = v628;
          __dst[80] = v700;
          __dst[81] = v718;
          __dst[82] = v736;
          __dst[83] = v754;
          __dst[84] = v772;
          __dst[85] = v790;
        }
        else
        {
          v184 = *((_OWORD *)__src + 31);
          v185 = *((_OWORD *)__src + 32);
          v186 = *((_OWORD *)__src + 34);
          *((_OWORD *)__dst + 33) = *((_OWORD *)__src + 33);
          *((_OWORD *)__dst + 34) = v186;
          *((_OWORD *)__dst + 31) = v184;
          *((_OWORD *)__dst + 32) = v185;
          v187 = *((_OWORD *)__src + 35);
          v188 = *((_OWORD *)__src + 36);
          v189 = *((_OWORD *)__src + 38);
          *((_OWORD *)__dst + 37) = *((_OWORD *)__src + 37);
          *((_OWORD *)__dst + 38) = v189;
          *((_OWORD *)__dst + 35) = v187;
          *((_OWORD *)__dst + 36) = v188;
          v190 = *((_OWORD *)__src + 39);
          v191 = *((_OWORD *)__src + 40);
          v192 = *((_OWORD *)__src + 42);
          *((_OWORD *)__dst + 41) = *((_OWORD *)__src + 41);
          *((_OWORD *)__dst + 42) = v192;
          *((_OWORD *)__dst + 39) = v190;
          *((_OWORD *)__dst + 40) = v191;
        }
      }
      else
      {
        v217 = *v173;
        v218 = *(_OWORD *)(__src + 456);
        v219 = *(_OWORD *)(__src + 488);
        *(_OWORD *)(__dst + 59) = *(_OWORD *)(__src + 472);
        *(_OWORD *)(__dst + 61) = v219;
        *v172 = v217;
        *(_OWORD *)(__dst + 57) = v218;
        v220 = *(_OWORD *)(__src + 504);
        v221 = *(_OWORD *)(__src + 520);
        v222 = *(_OWORD *)(__src + 552);
        *(_OWORD *)(__dst + 67) = *(_OWORD *)(__src + 536);
        *(_OWORD *)(__dst + 69) = v222;
        *(_OWORD *)(__dst + 63) = v220;
        *(_OWORD *)(__dst + 65) = v221;
        v223 = *(_OWORD *)(__src + 568);
        v224 = *(_OWORD *)(__src + 584);
        v225 = *(_OWORD *)(__src + 616);
        *(_OWORD *)(__dst + 75) = *(_OWORD *)(__src + 600);
        *(_OWORD *)(__dst + 77) = v225;
        *(_OWORD *)(__dst + 71) = v223;
        *(_OWORD *)(__dst + 73) = v224;
        v226 = *(_OWORD *)(__src + 632);
        v227 = *(_OWORD *)(__src + 648);
        v228 = *(_OWORD *)(__src + 664);
        __dst[85] = *((_QWORD *)__src + 85);
        *(_OWORD *)(__dst + 81) = v227;
        *(_OWORD *)(__dst + 83) = v228;
        *(_OWORD *)(__dst + 79) = v226;
      }
      v248 = *((_QWORD *)__src + 91);
      v249 = *((_QWORD *)__src + 92);
      v521 = *((_QWORD *)__src + 94);
      v539 = *((_QWORD *)__src + 95);
      v557 = *((_QWORD *)__src + 96);
      v575 = *((_QWORD *)__src + 97);
      v593 = *((_QWORD *)__src + 98);
      v611 = *((_QWORD *)__src + 99);
      v629 = *((_QWORD *)__src + 100);
      v647 = *((_QWORD *)__src + 101);
      v665 = *((_QWORD *)__src + 102);
      v683 = *((_QWORD *)__src + 103);
      v701 = *((_QWORD *)__src + 104);
      v719 = *((_QWORD *)__src + 105);
      v737 = *((_QWORD *)__src + 106);
      v755 = *((_QWORD *)__src + 107);
      v773 = *((_QWORD *)__src + 108);
      v791 = *((_QWORD *)__src + 109);
      v250 = *((_QWORD *)__src + 86);
      v251 = *((_QWORD *)__src + 87);
      v252 = *((_QWORD *)__src + 88);
      v253 = *((_QWORD *)__src + 89);
      v254 = *((_QWORD *)__src + 90);
      v255 = *((_QWORD *)__src + 93);
      sub_1AD00FEAC(v250, v251, v252, v253, v254, v248, v249, v255, v521, v539, v557, v575, v593, v611, v629, v647, v665, v683, v701,
        v719,
        v737,
        v755,
        v773,
        v791);
      __dst[86] = v250;
      __dst[87] = v251;
      __dst[88] = v252;
      __dst[89] = v253;
      __dst[90] = v254;
      __dst[91] = v248;
      __dst[92] = v249;
      __dst[93] = v255;
      __dst[94] = v521;
      __dst[95] = v539;
      __dst[96] = v557;
      __dst[97] = v575;
      __dst[98] = v593;
      __dst[99] = v611;
      __dst[100] = v629;
      __dst[101] = v647;
      __dst[102] = v665;
      __dst[103] = v683;
      __dst[104] = v701;
      __dst[105] = v719;
      __dst[106] = v737;
      __dst[107] = v755;
      __dst[108] = v773;
      __dst[109] = v791;
      goto LABEL_127;
    }
LABEL_89:
    memcpy(__dst + 55, __src + 440, 0x1B8uLL);
    goto LABEL_127;
  }
  if (v177)
  {
    sub_1AD4177F8(__dst + 55);
    goto LABEL_89;
  }
  v193 = *((_QWORD *)__src + 58);
  if (__dst[58])
  {
    if (v193)
    {
      __swift_assign_boxed_opaque_existential_1(__dst + 55, (uint64_t *)__src + 55);
      v194 = *((_QWORD *)__src + 60);
      *((_BYTE *)__dst + 488) = __src[488];
      __dst[60] = v194;
      v195 = __dst + 62;
      v196 = (__int128 *)(__src + 496);
      v197 = *((_QWORD *)__src + 65);
      v198 = *((_QWORD *)__src + 67);
      v199 = *((_QWORD *)__src + 69);
      v200 = *((_QWORD *)__src + 71);
      v201 = *((_QWORD *)__src + 75);
      v202 = *((_QWORD *)__src + 77);
      v203 = *((_QWORD *)__src + 79);
      v207 = v197 >> 1 == 0xFFFFFFFF
          && (v199 | (unint64_t)v198) < 2
          && (v201 & 0xFFFFFFFFFFFFFEFELL | v200 & 0xFFFFFFFFFFFF00FELL) == 0
          && (v203 | v202) < 2;
      if (__dst[65] >> 1 != 0xFFFFFFFFLL
        || (__dst[69] | __dst[67]) > 1
        || __dst[75] & 0xFFFFFFFFFFFFFEFELL | __dst[71] & 0xFFFFFFFFFFFF00FELL
        || (__dst[79] | __dst[77]) >= 2)
      {
        if (v207)
        {
          sub_1AD148B34((uint64_t)(__dst + 62));
          v268 = *((_OWORD *)__src + 34);
          v270 = *v196;
          v269 = *((_OWORD *)__src + 32);
          *((_OWORD *)__dst + 33) = *((_OWORD *)__src + 33);
          *((_OWORD *)__dst + 34) = v268;
          *v195 = v270;
          *((_OWORD *)__dst + 32) = v269;
          v271 = *((_OWORD *)__src + 38);
          v273 = *((_OWORD *)__src + 35);
          v272 = *((_OWORD *)__src + 36);
          *((_OWORD *)__dst + 37) = *((_OWORD *)__src + 37);
          *((_OWORD *)__dst + 38) = v271;
          *((_OWORD *)__dst + 35) = v273;
          *((_OWORD *)__dst + 36) = v272;
          v274 = *((_OWORD *)__src + 42);
          v276 = *((_OWORD *)__src + 39);
          v275 = *((_OWORD *)__src + 40);
          *((_OWORD *)__dst + 41) = *((_OWORD *)__src + 41);
          *((_OWORD *)__dst + 42) = v274;
          *((_OWORD *)__dst + 39) = v276;
          *((_OWORD *)__dst + 40) = v275;
        }
        else
        {
          v542 = *((_QWORD *)__src + 63);
          v560 = *((_QWORD *)__src + 62);
          v524 = *((_QWORD *)__src + 64);
          v298 = *((_QWORD *)__src + 66);
          v299 = *((_QWORD *)__src + 68);
          v578 = *((_QWORD *)__src + 70);
          v596 = *((_QWORD *)__src + 72);
          v614 = *((_QWORD *)__src + 73);
          v632 = *((_QWORD *)__src + 74);
          v650 = *((_QWORD *)__src + 76);
          v668 = *((_QWORD *)__src + 78);
          v686 = *((_QWORD *)__src + 80);
          v704 = *((_QWORD *)__src + 81);
          v722 = *((_QWORD *)__src + 82);
          v740 = *((_QWORD *)__src + 83);
          v758 = *((_QWORD *)__src + 84);
          v776 = *((_QWORD *)__src + 85);
          v794 = *((_QWORD *)__src + 79);
          sub_1AD00FEAC(v560, v542, v524, v197, v298, v198, v299, v199, v578, v200, v596, v614, v632, v201, v650, v202, v668, v203, v686,
            v704,
            v722,
            v740,
            v758,
            v776);
          v300 = __dst[62];
          v301 = __dst[63];
          __dst[62] = v560;
          __dst[63] = v542;
          v302 = __dst[64];
          __dst[64] = v524;
          v303 = __dst[65];
          __dst[65] = v197;
          v304 = __dst[66];
          __dst[66] = v298;
          v305 = __dst[67];
          __dst[67] = v198;
          v306 = __dst[68];
          __dst[68] = v299;
          v307 = __dst[69];
          __dst[69] = v199;
          v308 = *((_OWORD *)__dst + 35);
          v309 = *((_OWORD *)__dst + 36);
          __dst[70] = v578;
          __dst[71] = v200;
          __dst[72] = v596;
          __dst[73] = v614;
          v310 = *((_OWORD *)__dst + 37);
          v311 = *((_OWORD *)__dst + 38);
          __dst[74] = v632;
          __dst[75] = v201;
          __dst[76] = v650;
          __dst[77] = v202;
          v312 = *((_OWORD *)__dst + 39);
          v313 = *((_OWORD *)__dst + 40);
          __dst[78] = v668;
          __dst[79] = v794;
          __dst[80] = v686;
          __dst[81] = v704;
          v314 = *((_OWORD *)__dst + 41);
          __dst[82] = v722;
          __dst[83] = v740;
          v315 = __dst[84];
          __dst[84] = v758;
          v316 = __dst[85];
          __dst[85] = v776;
          sub_1AD00E8B0(v300, v301, v302, v303, v304, v305, v306, v307, v308, *((uint64_t *)&v308 + 1), v309, *((uint64_t *)&v309 + 1), v310, *((uint64_t *)&v310 + 1), v311, *((uint64_t *)&v311 + 1), v312, *((unint64_t *)&v312 + 1), v313,
            *((uint64_t *)&v313 + 1),
            v314,
            *((uint64_t *)&v314 + 1),
            v315,
            v316);
        }
      }
      else if (v207)
      {
        v208 = *v196;
        v209 = *((_OWORD *)__src + 32);
        v210 = *((_OWORD *)__src + 34);
        *((_OWORD *)__dst + 33) = *((_OWORD *)__src + 33);
        *((_OWORD *)__dst + 34) = v210;
        *v195 = v208;
        *((_OWORD *)__dst + 32) = v209;
        v211 = *((_OWORD *)__src + 35);
        v212 = *((_OWORD *)__src + 36);
        v213 = *((_OWORD *)__src + 38);
        *((_OWORD *)__dst + 37) = *((_OWORD *)__src + 37);
        *((_OWORD *)__dst + 38) = v213;
        *((_OWORD *)__dst + 35) = v211;
        *((_OWORD *)__dst + 36) = v212;
        v214 = *((_OWORD *)__src + 39);
        v215 = *((_OWORD *)__src + 40);
        v216 = *((_OWORD *)__src + 42);
        *((_OWORD *)__dst + 41) = *((_OWORD *)__src + 41);
        *((_OWORD *)__dst + 42) = v216;
        *((_OWORD *)__dst + 39) = v214;
        *((_OWORD *)__dst + 40) = v215;
      }
      else
      {
        v294 = *((_QWORD *)__src + 66);
        v295 = *((_QWORD *)__src + 68);
        v523 = *((_QWORD *)__src + 64);
        v541 = *((_QWORD *)__src + 70);
        v577 = *((_QWORD *)__src + 72);
        v595 = *((_QWORD *)__src + 73);
        v631 = *((_QWORD *)__src + 74);
        v649 = *((_QWORD *)__src + 76);
        v667 = *((_QWORD *)__src + 78);
        v685 = *((_QWORD *)__src + 80);
        v703 = *((_QWORD *)__src + 81);
        v721 = *((_QWORD *)__src + 82);
        v739 = *((_QWORD *)__src + 83);
        v757 = *((_QWORD *)__src + 84);
        v775 = *((_QWORD *)__src + 85);
        v613 = *((_QWORD *)__src + 77);
        v296 = *((_QWORD *)__src + 62);
        v559 = *((_QWORD *)__src + 75);
        v297 = *((_QWORD *)__src + 63);
        v793 = *((_QWORD *)__src + 79);
        sub_1AD00FEAC(v296, v297, v523, v197, v294, v198, v295, v199, v541, v200, v577, v595, v631, v559, v649, v613, v667, v203, v685,
          v703,
          v721,
          v739,
          v757,
          v775);
        __dst[62] = v296;
        __dst[63] = v297;
        __dst[64] = v523;
        __dst[65] = v197;
        __dst[66] = v294;
        __dst[67] = v198;
        __dst[68] = v295;
        __dst[69] = v199;
        __dst[70] = v541;
        __dst[71] = v200;
        __dst[72] = v577;
        __dst[73] = v595;
        __dst[74] = v631;
        __dst[75] = v559;
        __dst[76] = v649;
        __dst[77] = v613;
        __dst[78] = v667;
        __dst[79] = v793;
        __dst[80] = v685;
        __dst[81] = v703;
        __dst[82] = v721;
        __dst[83] = v739;
        __dst[84] = v757;
        __dst[85] = v775;
      }
    }
    else
    {
      sub_1AD046A30(__dst + 55);
      v256 = *(_OWORD *)(__src + 488);
      v258 = *v173;
      v257 = *(_OWORD *)(__src + 456);
      *(_OWORD *)(__dst + 59) = *(_OWORD *)(__src + 472);
      *(_OWORD *)(__dst + 61) = v256;
      *v172 = v258;
      *(_OWORD *)(__dst + 57) = v257;
      v259 = *(_OWORD *)(__src + 552);
      v261 = *(_OWORD *)(__src + 504);
      v260 = *(_OWORD *)(__src + 520);
      *(_OWORD *)(__dst + 67) = *(_OWORD *)(__src + 536);
      *(_OWORD *)(__dst + 69) = v259;
      *(_OWORD *)(__dst + 63) = v261;
      *(_OWORD *)(__dst + 65) = v260;
      v262 = *(_OWORD *)(__src + 616);
      v264 = *(_OWORD *)(__src + 568);
      v263 = *(_OWORD *)(__src + 584);
      *(_OWORD *)(__dst + 75) = *(_OWORD *)(__src + 600);
      *(_OWORD *)(__dst + 77) = v262;
      *(_OWORD *)(__dst + 71) = v264;
      *(_OWORD *)(__dst + 73) = v263;
      v266 = *(_OWORD *)(__src + 648);
      v265 = *(_OWORD *)(__src + 664);
      v267 = *(_OWORD *)(__src + 632);
      __dst[85] = *((_QWORD *)__src + 85);
      *(_OWORD *)(__dst + 81) = v266;
      *(_OWORD *)(__dst + 83) = v265;
      *(_OWORD *)(__dst + 79) = v267;
    }
  }
  else if (v193)
  {
    __dst[58] = v193;
    __dst[59] = *((_QWORD *)__src + 59);
    (**(void (***)(char *, char *))(v193 - 8))((char *)__dst + 440, __src + 440);
    v229 = *((_QWORD *)__src + 60);
    *((_BYTE *)__dst + 488) = __src[488];
    __dst[60] = v229;
    v230 = *((_QWORD *)__src + 65);
    v231 = *((_QWORD *)__src + 67);
    v232 = *((_QWORD *)__src + 69);
    v233 = *((_QWORD *)__src + 77);
    if (v230 >> 1 != 0xFFFFFFFF
      || (v232 | (unint64_t)v231) > 1
      || *((_QWORD *)__src + 75) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 71) & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)__src + 79) | (unint64_t)v233) >= 2)
    {
      v289 = *((_QWORD *)__src + 62);
      v290 = *((_QWORD *)__src + 66);
      v540 = *((_QWORD *)__src + 70);
      v594 = *((_QWORD *)__src + 72);
      v612 = *((_QWORD *)__src + 73);
      v648 = *((_QWORD *)__src + 74);
      v666 = *((_QWORD *)__src + 76);
      v684 = *((_QWORD *)__src + 78);
      v702 = *((_QWORD *)__src + 80);
      v720 = *((_QWORD *)__src + 81);
      v738 = *((_QWORD *)__src + 82);
      v756 = *((_QWORD *)__src + 83);
      v774 = *((_QWORD *)__src + 84);
      v792 = *((_QWORD *)__src + 85);
      v576 = *((_QWORD *)__src + 75);
      v291 = *((_QWORD *)__src + 63);
      v630 = *((_QWORD *)__src + 79);
      v522 = *((_QWORD *)__src + 71);
      v292 = *((_QWORD *)__src + 64);
      v558 = *((_QWORD *)__src + 77);
      v293 = *((_QWORD *)__src + 68);
      sub_1AD00FEAC(v289, v291, v292, v230, v290, v231, v293, v232, v540, v522, v594, v612, v648, v576, v666, v233, v684, v630, v702,
        v720,
        v738,
        v756,
        v774,
        v792);
      __dst[62] = v289;
      __dst[63] = v291;
      __dst[64] = v292;
      __dst[65] = v230;
      __dst[66] = v290;
      __dst[67] = v231;
      __dst[68] = v293;
      __dst[69] = v232;
      __dst[70] = v540;
      __dst[71] = v522;
      __dst[72] = v594;
      __dst[73] = v612;
      __dst[74] = v648;
      __dst[75] = v576;
      __dst[76] = v666;
      __dst[77] = v558;
      __dst[78] = v684;
      __dst[79] = v630;
      __dst[80] = v702;
      __dst[81] = v720;
      __dst[82] = v738;
      __dst[83] = v756;
      __dst[84] = v774;
      __dst[85] = v792;
    }
    else
    {
      v234 = *((_OWORD *)__src + 31);
      v235 = *((_OWORD *)__src + 32);
      v236 = *((_OWORD *)__src + 34);
      *((_OWORD *)__dst + 33) = *((_OWORD *)__src + 33);
      *((_OWORD *)__dst + 34) = v236;
      *((_OWORD *)__dst + 31) = v234;
      *((_OWORD *)__dst + 32) = v235;
      v237 = *((_OWORD *)__src + 35);
      v238 = *((_OWORD *)__src + 36);
      v239 = *((_OWORD *)__src + 38);
      *((_OWORD *)__dst + 37) = *((_OWORD *)__src + 37);
      *((_OWORD *)__dst + 38) = v239;
      *((_OWORD *)__dst + 35) = v237;
      *((_OWORD *)__dst + 36) = v238;
      v240 = *((_OWORD *)__src + 39);
      v241 = *((_OWORD *)__src + 40);
      v242 = *((_OWORD *)__src + 42);
      *((_OWORD *)__dst + 41) = *((_OWORD *)__src + 41);
      *((_OWORD *)__dst + 42) = v242;
      *((_OWORD *)__dst + 39) = v240;
      *((_OWORD *)__dst + 40) = v241;
    }
  }
  else
  {
    v277 = *v173;
    v278 = *(_OWORD *)(__src + 456);
    v279 = *(_OWORD *)(__src + 488);
    *(_OWORD *)(__dst + 59) = *(_OWORD *)(__src + 472);
    *(_OWORD *)(__dst + 61) = v279;
    *v172 = v277;
    *(_OWORD *)(__dst + 57) = v278;
    v280 = *(_OWORD *)(__src + 504);
    v281 = *(_OWORD *)(__src + 520);
    v282 = *(_OWORD *)(__src + 552);
    *(_OWORD *)(__dst + 67) = *(_OWORD *)(__src + 536);
    *(_OWORD *)(__dst + 69) = v282;
    *(_OWORD *)(__dst + 63) = v280;
    *(_OWORD *)(__dst + 65) = v281;
    v283 = *(_OWORD *)(__src + 568);
    v284 = *(_OWORD *)(__src + 584);
    v285 = *(_OWORD *)(__src + 616);
    *(_OWORD *)(__dst + 75) = *(_OWORD *)(__src + 600);
    *(_OWORD *)(__dst + 77) = v285;
    *(_OWORD *)(__dst + 71) = v283;
    *(_OWORD *)(__dst + 73) = v284;
    v286 = *(_OWORD *)(__src + 632);
    v287 = *(_OWORD *)(__src + 648);
    v288 = *(_OWORD *)(__src + 664);
    __dst[85] = *((_QWORD *)__src + 85);
    *(_OWORD *)(__dst + 81) = v287;
    *(_OWORD *)(__dst + 83) = v288;
    *(_OWORD *)(__dst + 79) = v286;
  }
  v317 = *((_QWORD *)__src + 91);
  v318 = *((_QWORD *)__src + 92);
  v525 = *((_QWORD *)__src + 94);
  v543 = *((_QWORD *)__src + 95);
  v561 = *((_QWORD *)__src + 96);
  v579 = *((_QWORD *)__src + 97);
  v597 = *((_QWORD *)__src + 98);
  v615 = *((_QWORD *)__src + 99);
  v633 = *((_QWORD *)__src + 100);
  v651 = *((_QWORD *)__src + 101);
  v669 = *((_QWORD *)__src + 102);
  v687 = *((_QWORD *)__src + 103);
  v705 = *((_QWORD *)__src + 104);
  v723 = *((_QWORD *)__src + 105);
  v741 = *((_QWORD *)__src + 106);
  v759 = *((_QWORD *)__src + 107);
  v777 = *((_QWORD *)__src + 108);
  v795 = *((_QWORD *)__src + 109);
  v319 = *((_QWORD *)__src + 86);
  v320 = *((_QWORD *)__src + 87);
  v321 = *((_QWORD *)__src + 88);
  v322 = *((_QWORD *)__src + 89);
  v323 = *((_QWORD *)__src + 90);
  v324 = *((_QWORD *)__src + 93);
  sub_1AD00FEAC(v319, v320, v321, v322, v323, v317, v318, v324, v525, v543, v561, v579, v597, v615, v633, v651, v669, v687, v705,
    v723,
    v741,
    v759,
    v777,
    v795);
  v325 = __dst[86];
  __dst[86] = v319;
  v326 = __dst[87];
  __dst[87] = v320;
  v327 = __dst[88];
  __dst[88] = v321;
  v328 = __dst[89];
  __dst[89] = v322;
  v329 = __dst[90];
  __dst[90] = v323;
  v330 = __dst[91];
  __dst[91] = v317;
  v331 = __dst[92];
  __dst[92] = v318;
  v332 = __dst[93];
  __dst[93] = v324;
  v333 = *((_OWORD *)__dst + 47);
  v334 = *((_OWORD *)__dst + 48);
  __dst[94] = v525;
  __dst[95] = v543;
  __dst[96] = v561;
  __dst[97] = v579;
  v335 = *((_OWORD *)__dst + 49);
  v336 = *((_OWORD *)__dst + 50);
  __dst[98] = v597;
  __dst[99] = v615;
  __dst[100] = v633;
  __dst[101] = v651;
  v337 = *((_OWORD *)__dst + 51);
  v338 = *((_OWORD *)__dst + 52);
  __dst[102] = v669;
  __dst[103] = v687;
  __dst[104] = v705;
  __dst[105] = v723;
  v339 = *((_OWORD *)__dst + 53);
  __dst[106] = v741;
  __dst[107] = v759;
  v340 = __dst[108];
  __dst[108] = v777;
  v341 = __dst[109];
  __dst[109] = v795;
  sub_1AD00E8B0(v325, v326, v327, v328, v329, v330, v331, v332, v333, *((uint64_t *)&v333 + 1), v334, *((uint64_t *)&v334 + 1), v335, *((uint64_t *)&v335 + 1), v336, *((uint64_t *)&v336 + 1), v337, *((unint64_t *)&v337 + 1), v338,
    *((uint64_t *)&v338 + 1),
    v339,
    *((uint64_t *)&v339 + 1),
    v340,
    v341);
LABEL_127:
  v342 = __dst + 110;
  v343 = (__int128 *)(__src + 880);
  v347 = *((_QWORD *)__src + 144) >> 1 == 0xFFFFFFFFLL
      && (*((_QWORD *)__src + 148) | *((_QWORD *)__src + 146)) < 2uLL
      && (*((_QWORD *)__src + 154) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 150) & 0xFFFFFFFFFFFF00FELL) == 0
      && (*((_QWORD *)__src + 158) | *((_QWORD *)__src + 156)) < 2uLL;
  if (__dst[144] >> 1 == 0xFFFFFFFFLL
    && (__dst[148] | __dst[146]) <= 1
    && !(__dst[154] & 0xFFFFFFFFFFFFFEFELL | __dst[150] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[158] | __dst[156]) < 2)
  {
    if (!v347)
    {
      v348 = *((_QWORD *)__src + 113);
      if (v348)
      {
        __dst[113] = v348;
        __dst[114] = *((_QWORD *)__src + 114);
        (**(void (***)(char *, char *))(v348 - 8))((char *)__dst + 880, __src + 880);
        v349 = *((_QWORD *)__src + 115);
        *((_BYTE *)__dst + 928) = __src[928];
        __dst[115] = v349;
        v350 = *((_QWORD *)__src + 120);
        v351 = *((_QWORD *)__src + 122);
        v352 = *((_QWORD *)__src + 124);
        v353 = *((_QWORD *)__src + 132);
        if (v350 >> 1 != 0xFFFFFFFF
          || (v352 | (unint64_t)v351) > 1
          || *((_QWORD *)__src + 130) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 126) & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)__src + 134) | (unint64_t)v353) >= 2)
        {
          v413 = *((_QWORD *)__src + 117);
          v414 = *((_QWORD *)__src + 121);
          v544 = *((_QWORD *)__src + 125);
          v598 = *((_QWORD *)__src + 127);
          v616 = *((_QWORD *)__src + 128);
          v652 = *((_QWORD *)__src + 129);
          v670 = *((_QWORD *)__src + 131);
          v688 = *((_QWORD *)__src + 133);
          v706 = *((_QWORD *)__src + 135);
          v724 = *((_QWORD *)__src + 136);
          v742 = *((_QWORD *)__src + 137);
          v760 = *((_QWORD *)__src + 138);
          v778 = *((_QWORD *)__src + 139);
          v796 = *((_QWORD *)__src + 140);
          v580 = *((_QWORD *)__src + 130);
          v415 = *((_QWORD *)__src + 118);
          v634 = *((_QWORD *)__src + 134);
          v526 = *((_QWORD *)__src + 126);
          v416 = *((_QWORD *)__src + 119);
          v562 = *((_QWORD *)__src + 132);
          v417 = *((_QWORD *)__src + 123);
          sub_1AD00FEAC(v413, v415, v416, v350, v414, v351, v417, v352, v544, v526, v598, v616, v652, v580, v670, v353, v688, v634, v706,
            v724,
            v742,
            v760,
            v778,
            v796);
          __dst[117] = v413;
          __dst[118] = v415;
          __dst[119] = v416;
          __dst[120] = v350;
          __dst[121] = v414;
          __dst[122] = v351;
          __dst[123] = v417;
          __dst[124] = v352;
          __dst[125] = v544;
          __dst[126] = v526;
          __dst[127] = v598;
          __dst[128] = v616;
          __dst[129] = v652;
          __dst[130] = v580;
          __dst[131] = v670;
          __dst[132] = v562;
          __dst[133] = v688;
          __dst[134] = v634;
          __dst[135] = v706;
          __dst[136] = v724;
          __dst[137] = v742;
          __dst[138] = v760;
          __dst[139] = v778;
          __dst[140] = v796;
        }
        else
        {
          v354 = *(_OWORD *)(__src + 936);
          v355 = *(_OWORD *)(__src + 952);
          v356 = *(_OWORD *)(__src + 984);
          *(_OWORD *)(__dst + 121) = *(_OWORD *)(__src + 968);
          *(_OWORD *)(__dst + 123) = v356;
          *(_OWORD *)(__dst + 117) = v354;
          *(_OWORD *)(__dst + 119) = v355;
          v357 = *(_OWORD *)(__src + 1000);
          v358 = *(_OWORD *)(__src + 1016);
          v359 = *(_OWORD *)(__src + 1048);
          *(_OWORD *)(__dst + 129) = *(_OWORD *)(__src + 1032);
          *(_OWORD *)(__dst + 131) = v359;
          *(_OWORD *)(__dst + 125) = v357;
          *(_OWORD *)(__dst + 127) = v358;
          v360 = *(_OWORD *)(__src + 1064);
          v361 = *(_OWORD *)(__src + 1080);
          v362 = *(_OWORD *)(__src + 1112);
          *(_OWORD *)(__dst + 137) = *(_OWORD *)(__src + 1096);
          *(_OWORD *)(__dst + 139) = v362;
          *(_OWORD *)(__dst + 133) = v360;
          *(_OWORD *)(__dst + 135) = v361;
        }
      }
      else
      {
        v387 = *v343;
        v388 = *((_OWORD *)__src + 56);
        v389 = *((_OWORD *)__src + 58);
        *((_OWORD *)__dst + 57) = *((_OWORD *)__src + 57);
        *((_OWORD *)__dst + 58) = v389;
        *v342 = v387;
        *((_OWORD *)__dst + 56) = v388;
        v390 = *((_OWORD *)__src + 59);
        v391 = *((_OWORD *)__src + 60);
        v392 = *((_OWORD *)__src + 62);
        *((_OWORD *)__dst + 61) = *((_OWORD *)__src + 61);
        *((_OWORD *)__dst + 62) = v392;
        *((_OWORD *)__dst + 59) = v390;
        *((_OWORD *)__dst + 60) = v391;
        v393 = *((_OWORD *)__src + 63);
        v394 = *((_OWORD *)__src + 64);
        v395 = *((_OWORD *)__src + 66);
        *((_OWORD *)__dst + 65) = *((_OWORD *)__src + 65);
        *((_OWORD *)__dst + 66) = v395;
        *((_OWORD *)__dst + 63) = v393;
        *((_OWORD *)__dst + 64) = v394;
        v396 = *((_OWORD *)__src + 67);
        v397 = *((_OWORD *)__src + 68);
        v398 = *((_OWORD *)__src + 69);
        __dst[140] = *((_QWORD *)__src + 140);
        *((_OWORD *)__dst + 68) = v397;
        *((_OWORD *)__dst + 69) = v398;
        *((_OWORD *)__dst + 67) = v396;
      }
      v418 = *((_QWORD *)__src + 146);
      v419 = *((_QWORD *)__src + 147);
      v527 = *((_QWORD *)__src + 149);
      v545 = *((_QWORD *)__src + 150);
      v563 = *((_QWORD *)__src + 151);
      v581 = *((_QWORD *)__src + 152);
      v599 = *((_QWORD *)__src + 153);
      v617 = *((_QWORD *)__src + 154);
      v635 = *((_QWORD *)__src + 155);
      v653 = *((_QWORD *)__src + 156);
      v671 = *((_QWORD *)__src + 157);
      v689 = *((_QWORD *)__src + 158);
      v707 = *((_QWORD *)__src + 159);
      v725 = *((_QWORD *)__src + 160);
      v743 = *((_QWORD *)__src + 161);
      v761 = *((_QWORD *)__src + 162);
      v779 = *((_QWORD *)__src + 163);
      v797 = *((_QWORD *)__src + 164);
      v420 = *((_QWORD *)__src + 141);
      v421 = *((_QWORD *)__src + 142);
      v422 = *((_QWORD *)__src + 143);
      v423 = *((_QWORD *)__src + 144);
      v424 = *((_QWORD *)__src + 145);
      v425 = *((_QWORD *)__src + 148);
      sub_1AD00FEAC(v420, v421, v422, v423, v424, v418, v419, v425, v527, v545, v563, v581, v599, v617, v635, v653, v671, v689, v707,
        v725,
        v743,
        v761,
        v779,
        v797);
      __dst[141] = v420;
      __dst[142] = v421;
      __dst[143] = v422;
      __dst[144] = v423;
      __dst[145] = v424;
      __dst[146] = v418;
      __dst[147] = v419;
      __dst[148] = v425;
      __dst[149] = v527;
      __dst[150] = v545;
      __dst[151] = v563;
      __dst[152] = v581;
      __dst[153] = v599;
      __dst[154] = v617;
      __dst[155] = v635;
      __dst[156] = v653;
      __dst[157] = v671;
      __dst[158] = v689;
      __dst[159] = v707;
      __dst[160] = v725;
      __dst[161] = v743;
      __dst[162] = v761;
      __dst[163] = v779;
      __dst[164] = v797;
      goto LABEL_190;
    }
LABEL_152:
    memcpy(__dst + 110, __src + 880, 0x1B8uLL);
    goto LABEL_190;
  }
  if (v347)
  {
    sub_1AD4177F8(__dst + 110);
    goto LABEL_152;
  }
  v363 = *((_QWORD *)__src + 113);
  if (__dst[113])
  {
    if (v363)
    {
      __swift_assign_boxed_opaque_existential_1(__dst + 110, (uint64_t *)__src + 110);
      v364 = *((_QWORD *)__src + 115);
      *((_BYTE *)__dst + 928) = __src[928];
      __dst[115] = v364;
      v365 = __dst + 117;
      v366 = (__int128 *)(__src + 936);
      v367 = *((_QWORD *)__src + 120);
      v368 = *((_QWORD *)__src + 122);
      v369 = *((_QWORD *)__src + 124);
      v370 = *((_QWORD *)__src + 126);
      v371 = *((_QWORD *)__src + 130);
      v372 = *((_QWORD *)__src + 132);
      v373 = *((_QWORD *)__src + 134);
      v377 = v367 >> 1 == 0xFFFFFFFF
          && (v369 | (unint64_t)v368) < 2
          && (v371 & 0xFFFFFFFFFFFFFEFELL | v370 & 0xFFFFFFFFFFFF00FELL) == 0
          && (v373 | v372) < 2;
      if (__dst[120] >> 1 != 0xFFFFFFFFLL
        || (__dst[124] | __dst[122]) > 1
        || __dst[130] & 0xFFFFFFFFFFFFFEFELL | __dst[126] & 0xFFFFFFFFFFFF00FELL
        || (__dst[134] | __dst[132]) >= 2)
      {
        if (v377)
        {
          sub_1AD148B34((uint64_t)(__dst + 117));
          v438 = *(_OWORD *)(__src + 984);
          v440 = *v366;
          v439 = *(_OWORD *)(__src + 952);
          *(_OWORD *)(__dst + 121) = *(_OWORD *)(__src + 968);
          *(_OWORD *)(__dst + 123) = v438;
          *v365 = v440;
          *(_OWORD *)(__dst + 119) = v439;
          v441 = *(_OWORD *)(__src + 1048);
          v443 = *(_OWORD *)(__src + 1000);
          v442 = *(_OWORD *)(__src + 1016);
          *(_OWORD *)(__dst + 129) = *(_OWORD *)(__src + 1032);
          *(_OWORD *)(__dst + 131) = v441;
          *(_OWORD *)(__dst + 125) = v443;
          *(_OWORD *)(__dst + 127) = v442;
          v444 = *(_OWORD *)(__src + 1112);
          v446 = *(_OWORD *)(__src + 1064);
          v445 = *(_OWORD *)(__src + 1080);
          *(_OWORD *)(__dst + 137) = *(_OWORD *)(__src + 1096);
          *(_OWORD *)(__dst + 139) = v444;
          *(_OWORD *)(__dst + 133) = v446;
          *(_OWORD *)(__dst + 135) = v445;
        }
        else
        {
          v548 = *((_QWORD *)__src + 118);
          v566 = *((_QWORD *)__src + 117);
          v530 = *((_QWORD *)__src + 119);
          v469 = *((_QWORD *)__src + 121);
          v470 = *((_QWORD *)__src + 123);
          v584 = *((_QWORD *)__src + 125);
          v602 = *((_QWORD *)__src + 127);
          v620 = *((_QWORD *)__src + 128);
          v638 = *((_QWORD *)__src + 129);
          v656 = *((_QWORD *)__src + 131);
          v674 = *((_QWORD *)__src + 133);
          v692 = *((_QWORD *)__src + 135);
          v710 = *((_QWORD *)__src + 136);
          v728 = *((_QWORD *)__src + 137);
          v746 = *((_QWORD *)__src + 138);
          v764 = *((_QWORD *)__src + 139);
          v782 = *((_QWORD *)__src + 140);
          v800 = *((_QWORD *)__src + 134);
          sub_1AD00FEAC(v566, v548, v530, v367, v469, v368, v470, v369, v584, v370, v602, v620, v638, v371, v656, v372, v674, v373, v692,
            v710,
            v728,
            v746,
            v764,
            v782);
          v471 = *(_OWORD *)(__dst + 125);
          v472 = *(_OWORD *)(__dst + 127);
          v473 = *(_OWORD *)(__dst + 129);
          v474 = *(_OWORD *)(__dst + 131);
          v475 = *(_OWORD *)(__dst + 133);
          v476 = *(_OWORD *)(__dst + 135);
          v477 = *(_OWORD *)(__dst + 137);
          v478 = __dst[117];
          __dst[117] = v566;
          v479 = __dst[118];
          __dst[118] = v548;
          v480 = __dst[119];
          __dst[119] = v530;
          v481 = __dst[120];
          __dst[120] = v367;
          v482 = __dst[121];
          __dst[121] = v469;
          v483 = __dst[122];
          __dst[122] = v368;
          v484 = __dst[123];
          __dst[123] = v470;
          v485 = __dst[124];
          __dst[124] = v369;
          __dst[125] = v584;
          __dst[126] = v370;
          __dst[127] = v602;
          __dst[128] = v620;
          __dst[129] = v638;
          __dst[130] = v371;
          __dst[131] = v656;
          __dst[132] = v372;
          __dst[133] = v674;
          __dst[134] = v800;
          __dst[135] = v692;
          __dst[136] = v710;
          __dst[137] = v728;
          __dst[138] = v746;
          v486 = __dst[139];
          __dst[139] = v764;
          v487 = __dst[140];
          __dst[140] = v782;
          sub_1AD00E8B0(v478, v479, v480, v481, v482, v483, v484, v485, v471, *((uint64_t *)&v471 + 1), v472, *((uint64_t *)&v472 + 1), v473, *((uint64_t *)&v473 + 1), v474, *((uint64_t *)&v474 + 1), v475, *((unint64_t *)&v475 + 1), v476,
            *((uint64_t *)&v476 + 1),
            v477,
            *((uint64_t *)&v477 + 1),
            v486,
            v487);
        }
      }
      else if (v377)
      {
        v378 = *v366;
        v379 = *(_OWORD *)(__src + 952);
        v380 = *(_OWORD *)(__src + 984);
        *(_OWORD *)(__dst + 121) = *(_OWORD *)(__src + 968);
        *(_OWORD *)(__dst + 123) = v380;
        *v365 = v378;
        *(_OWORD *)(__dst + 119) = v379;
        v381 = *(_OWORD *)(__src + 1000);
        v382 = *(_OWORD *)(__src + 1016);
        v383 = *(_OWORD *)(__src + 1048);
        *(_OWORD *)(__dst + 129) = *(_OWORD *)(__src + 1032);
        *(_OWORD *)(__dst + 131) = v383;
        *(_OWORD *)(__dst + 125) = v381;
        *(_OWORD *)(__dst + 127) = v382;
        v384 = *(_OWORD *)(__src + 1064);
        v385 = *(_OWORD *)(__src + 1080);
        v386 = *(_OWORD *)(__src + 1112);
        *(_OWORD *)(__dst + 137) = *(_OWORD *)(__src + 1096);
        *(_OWORD *)(__dst + 139) = v386;
        *(_OWORD *)(__dst + 133) = v384;
        *(_OWORD *)(__dst + 135) = v385;
      }
      else
      {
        v464 = *((_QWORD *)__src + 121);
        v465 = *((_QWORD *)__src + 123);
        v547 = *((_QWORD *)__src + 125);
        v583 = *((_QWORD *)__src + 127);
        v601 = *((_QWORD *)__src + 128);
        v637 = *((_QWORD *)__src + 129);
        v655 = *((_QWORD *)__src + 131);
        v673 = *((_QWORD *)__src + 133);
        v691 = *((_QWORD *)__src + 135);
        v709 = *((_QWORD *)__src + 136);
        v727 = *((_QWORD *)__src + 137);
        v745 = *((_QWORD *)__src + 138);
        v763 = *((_QWORD *)__src + 139);
        v781 = *((_QWORD *)__src + 140);
        v619 = *((_QWORD *)__src + 132);
        v466 = *((_QWORD *)__src + 117);
        v565 = *((_QWORD *)__src + 130);
        v467 = *((_QWORD *)__src + 118);
        v529 = *((_QWORD *)__src + 126);
        v468 = *((_QWORD *)__src + 119);
        v799 = *((_QWORD *)__src + 134);
        sub_1AD00FEAC(v466, v467, v468, v367, v464, v368, v465, v369, v547, v529, v583, v601, v637, v565, v655, v619, v673, v373, v691,
          v709,
          v727,
          v745,
          v763,
          v781);
        __dst[117] = v466;
        __dst[118] = v467;
        __dst[119] = v468;
        __dst[120] = v367;
        __dst[121] = v464;
        __dst[122] = v368;
        __dst[123] = v465;
        __dst[124] = v369;
        __dst[125] = v547;
        __dst[126] = v529;
        __dst[127] = v583;
        __dst[128] = v601;
        __dst[129] = v637;
        __dst[130] = v565;
        __dst[131] = v655;
        __dst[132] = v619;
        __dst[133] = v673;
        __dst[134] = v799;
        __dst[135] = v691;
        __dst[136] = v709;
        __dst[137] = v727;
        __dst[138] = v745;
        __dst[139] = v763;
        __dst[140] = v781;
      }
    }
    else
    {
      sub_1AD046A30(__dst + 110);
      v426 = *((_OWORD *)__src + 58);
      v428 = *v343;
      v427 = *((_OWORD *)__src + 56);
      *((_OWORD *)__dst + 57) = *((_OWORD *)__src + 57);
      *((_OWORD *)__dst + 58) = v426;
      *v342 = v428;
      *((_OWORD *)__dst + 56) = v427;
      v429 = *((_OWORD *)__src + 62);
      v431 = *((_OWORD *)__src + 59);
      v430 = *((_OWORD *)__src + 60);
      *((_OWORD *)__dst + 61) = *((_OWORD *)__src + 61);
      *((_OWORD *)__dst + 62) = v429;
      *((_OWORD *)__dst + 59) = v431;
      *((_OWORD *)__dst + 60) = v430;
      v432 = *((_OWORD *)__src + 66);
      v434 = *((_OWORD *)__src + 63);
      v433 = *((_OWORD *)__src + 64);
      *((_OWORD *)__dst + 65) = *((_OWORD *)__src + 65);
      *((_OWORD *)__dst + 66) = v432;
      *((_OWORD *)__dst + 63) = v434;
      *((_OWORD *)__dst + 64) = v433;
      v436 = *((_OWORD *)__src + 68);
      v435 = *((_OWORD *)__src + 69);
      v437 = *((_OWORD *)__src + 67);
      __dst[140] = *((_QWORD *)__src + 140);
      *((_OWORD *)__dst + 68) = v436;
      *((_OWORD *)__dst + 69) = v435;
      *((_OWORD *)__dst + 67) = v437;
    }
  }
  else if (v363)
  {
    __dst[113] = v363;
    __dst[114] = *((_QWORD *)__src + 114);
    (**(void (***)(char *, char *))(v363 - 8))((char *)__dst + 880, __src + 880);
    v399 = *((_QWORD *)__src + 115);
    *((_BYTE *)__dst + 928) = __src[928];
    __dst[115] = v399;
    v400 = *((_QWORD *)__src + 120);
    v401 = *((_QWORD *)__src + 122);
    v402 = *((_QWORD *)__src + 124);
    v403 = *((_QWORD *)__src + 132);
    if (v400 >> 1 != 0xFFFFFFFF
      || (v402 | (unint64_t)v401) > 1
      || *((_QWORD *)__src + 130) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 126) & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)__src + 134) | (unint64_t)v403) >= 2)
    {
      v459 = *((_QWORD *)__src + 117);
      v460 = *((_QWORD *)__src + 121);
      v546 = *((_QWORD *)__src + 125);
      v600 = *((_QWORD *)__src + 127);
      v618 = *((_QWORD *)__src + 128);
      v654 = *((_QWORD *)__src + 129);
      v672 = *((_QWORD *)__src + 131);
      v690 = *((_QWORD *)__src + 133);
      v708 = *((_QWORD *)__src + 135);
      v726 = *((_QWORD *)__src + 136);
      v744 = *((_QWORD *)__src + 137);
      v762 = *((_QWORD *)__src + 138);
      v780 = *((_QWORD *)__src + 139);
      v798 = *((_QWORD *)__src + 140);
      v582 = *((_QWORD *)__src + 130);
      v461 = *((_QWORD *)__src + 118);
      v636 = *((_QWORD *)__src + 134);
      v528 = *((_QWORD *)__src + 126);
      v462 = *((_QWORD *)__src + 119);
      v564 = *((_QWORD *)__src + 132);
      v463 = *((_QWORD *)__src + 123);
      sub_1AD00FEAC(v459, v461, v462, v400, v460, v401, v463, v402, v546, v528, v600, v618, v654, v582, v672, v403, v690, v636, v708,
        v726,
        v744,
        v762,
        v780,
        v798);
      __dst[117] = v459;
      __dst[118] = v461;
      __dst[119] = v462;
      __dst[120] = v400;
      __dst[121] = v460;
      __dst[122] = v401;
      __dst[123] = v463;
      __dst[124] = v402;
      __dst[125] = v546;
      __dst[126] = v528;
      __dst[127] = v600;
      __dst[128] = v618;
      __dst[129] = v654;
      __dst[130] = v582;
      __dst[131] = v672;
      __dst[132] = v564;
      __dst[133] = v690;
      __dst[134] = v636;
      __dst[135] = v708;
      __dst[136] = v726;
      __dst[137] = v744;
      __dst[138] = v762;
      __dst[139] = v780;
      __dst[140] = v798;
    }
    else
    {
      v404 = *(_OWORD *)(__src + 936);
      v405 = *(_OWORD *)(__src + 952);
      v406 = *(_OWORD *)(__src + 984);
      *(_OWORD *)(__dst + 121) = *(_OWORD *)(__src + 968);
      *(_OWORD *)(__dst + 123) = v406;
      *(_OWORD *)(__dst + 117) = v404;
      *(_OWORD *)(__dst + 119) = v405;
      v407 = *(_OWORD *)(__src + 1000);
      v408 = *(_OWORD *)(__src + 1016);
      v409 = *(_OWORD *)(__src + 1048);
      *(_OWORD *)(__dst + 129) = *(_OWORD *)(__src + 1032);
      *(_OWORD *)(__dst + 131) = v409;
      *(_OWORD *)(__dst + 125) = v407;
      *(_OWORD *)(__dst + 127) = v408;
      v410 = *(_OWORD *)(__src + 1064);
      v411 = *(_OWORD *)(__src + 1080);
      v412 = *(_OWORD *)(__src + 1112);
      *(_OWORD *)(__dst + 137) = *(_OWORD *)(__src + 1096);
      *(_OWORD *)(__dst + 139) = v412;
      *(_OWORD *)(__dst + 133) = v410;
      *(_OWORD *)(__dst + 135) = v411;
    }
  }
  else
  {
    v447 = *v343;
    v448 = *((_OWORD *)__src + 56);
    v449 = *((_OWORD *)__src + 58);
    *((_OWORD *)__dst + 57) = *((_OWORD *)__src + 57);
    *((_OWORD *)__dst + 58) = v449;
    *v342 = v447;
    *((_OWORD *)__dst + 56) = v448;
    v450 = *((_OWORD *)__src + 59);
    v451 = *((_OWORD *)__src + 60);
    v452 = *((_OWORD *)__src + 62);
    *((_OWORD *)__dst + 61) = *((_OWORD *)__src + 61);
    *((_OWORD *)__dst + 62) = v452;
    *((_OWORD *)__dst + 59) = v450;
    *((_OWORD *)__dst + 60) = v451;
    v453 = *((_OWORD *)__src + 63);
    v454 = *((_OWORD *)__src + 64);
    v455 = *((_OWORD *)__src + 66);
    *((_OWORD *)__dst + 65) = *((_OWORD *)__src + 65);
    *((_OWORD *)__dst + 66) = v455;
    *((_OWORD *)__dst + 63) = v453;
    *((_OWORD *)__dst + 64) = v454;
    v456 = *((_OWORD *)__src + 67);
    v457 = *((_OWORD *)__src + 68);
    v458 = *((_OWORD *)__src + 69);
    __dst[140] = *((_QWORD *)__src + 140);
    *((_OWORD *)__dst + 68) = v457;
    *((_OWORD *)__dst + 69) = v458;
    *((_OWORD *)__dst + 67) = v456;
  }
  v488 = *((_QWORD *)__src + 141);
  v489 = *((_QWORD *)__src + 142);
  v490 = *((_QWORD *)__src + 143);
  v491 = *((_QWORD *)__src + 144);
  v492 = *((_QWORD *)__src + 145);
  v493 = *((_QWORD *)__src + 146);
  v494 = *((_QWORD *)__src + 147);
  v495 = *((_QWORD *)__src + 148);
  v531 = *((_QWORD *)__src + 149);
  v549 = *((_QWORD *)__src + 150);
  v567 = *((_QWORD *)__src + 151);
  v585 = *((_QWORD *)__src + 152);
  v603 = *((_QWORD *)__src + 153);
  v621 = *((_QWORD *)__src + 154);
  v639 = *((_QWORD *)__src + 155);
  v657 = *((_QWORD *)__src + 156);
  v675 = *((_QWORD *)__src + 157);
  v693 = *((_QWORD *)__src + 158);
  v711 = *((_QWORD *)__src + 159);
  v729 = *((_QWORD *)__src + 160);
  v747 = *((_QWORD *)__src + 161);
  v765 = *((_QWORD *)__src + 162);
  v783 = *((_QWORD *)__src + 163);
  v801 = *((_QWORD *)__src + 164);
  sub_1AD00FEAC(v488, v489, v490, v491, v492, v493, v494, v495, v531, v549, v567, v585, v603, v621, v639, v657, v675, v693, v711,
    v729,
    v747,
    v765,
    v783,
    v801);
  v496 = *(_OWORD *)(__dst + 149);
  v497 = *(_OWORD *)(__dst + 151);
  v498 = *(_OWORD *)(__dst + 153);
  v499 = *(_OWORD *)(__dst + 155);
  v500 = *(_OWORD *)(__dst + 157);
  v501 = *(_OWORD *)(__dst + 159);
  v502 = *(_OWORD *)(__dst + 161);
  v503 = __dst[141];
  __dst[141] = v488;
  v504 = __dst[142];
  __dst[142] = v489;
  v505 = __dst[143];
  __dst[143] = v490;
  v506 = __dst[144];
  __dst[144] = v491;
  v507 = __dst[145];
  __dst[145] = v492;
  v508 = __dst[146];
  __dst[146] = v493;
  v509 = __dst[147];
  __dst[147] = v494;
  v510 = __dst[148];
  __dst[148] = v495;
  __dst[149] = v531;
  __dst[150] = v549;
  __dst[151] = v567;
  __dst[152] = v585;
  __dst[153] = v603;
  __dst[154] = v621;
  __dst[155] = v639;
  __dst[156] = v657;
  __dst[157] = v675;
  __dst[158] = v693;
  __dst[159] = v711;
  __dst[160] = v729;
  __dst[161] = v747;
  __dst[162] = v765;
  v511 = __dst[163];
  __dst[163] = v783;
  v512 = __dst[164];
  __dst[164] = v801;
  sub_1AD00E8B0(v503, v504, v505, v506, v507, v508, v509, v510, v496, *((uint64_t *)&v496 + 1), v497, *((uint64_t *)&v497 + 1), v498, *((uint64_t *)&v498 + 1), v499, *((uint64_t *)&v499 + 1), v500, *((unint64_t *)&v500 + 1), v501,
    *((uint64_t *)&v501 + 1),
    v502,
    *((uint64_t *)&v502 + 1),
    v511,
    v512);
LABEL_190:
  __dst[165] = *((_QWORD *)__src + 165);
  __dst[166] = *((_QWORD *)__src + 166);
  __dst[167] = *((_QWORD *)__src + 167);
  __dst[168] = *((_QWORD *)__src + 168);
  __dst[169] = *((_QWORD *)__src + 169);
  __dst[170] = *((_QWORD *)__src + 170);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[171] = *((_QWORD *)__src + 171);
  __dst[172] = *((_QWORD *)__src + 172);
  __dst[173] = *((_QWORD *)__src + 173);
  __dst[174] = *((_QWORD *)__src + 174);
  __dst[175] = *((_QWORD *)__src + 175);
  __dst[176] = *((_QWORD *)__src + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[177] = *((_QWORD *)__src + 177);
  __dst[178] = *((_QWORD *)__src + 178);
  __dst[179] = *((_QWORD *)__src + 179);
  __dst[180] = *((_QWORD *)__src + 180);
  __dst[181] = *((_QWORD *)__src + 181);
  __dst[182] = *((_QWORD *)__src + 182);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[183] = *((_QWORD *)__src + 183);
  __dst[184] = *((_QWORD *)__src + 184);
  __dst[185] = *((_QWORD *)__src + 185);
  __dst[186] = *((_QWORD *)__src + 186);
  return __dst;
}

void *__swift_memcpy1496_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x5D8uLL);
}

_QWORD *assignWithTake for PassPreview(_QWORD *__dst, _OWORD *__src)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD *v107;
  _OWORD *v108;
  __int128 v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  unint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v4 = __dst + 33;
  v5 = (_OWORD *)((char *)__src + 264);
  if (__dst[34] >> 1 == 0xFFFFFFFFLL
    && (__dst[38] | __dst[36]) <= 1uLL
    && (__dst[44] & 0xFFFFFFFFFFFFFEFELL | __dst[40] & 0xFFFFFFFFFFFF00FELL) == 0
    && (__dst[48] | __dst[46]) < 2uLL)
  {
    goto LABEL_17;
  }
  if (*((_QWORD *)__src + 34) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) > 1
    || __src[22] & 0xFFFFFFFFFFFFFEFELL | __src[20] & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) >= 2)
  {
    if (__dst[3])
    {
      if (*((_QWORD *)__src + 3))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
        v9 = __src[1];
        *(_OWORD *)__dst = *__src;
        *((_OWORD *)__dst + 1) = v9;
        v10 = *((_QWORD *)__src + 5);
        __dst[4] = *((_QWORD *)__src + 4);
        __dst[5] = v10;
        *((_BYTE *)__dst + 48) = *((_BYTE *)__src + 48);
        v11 = __dst[10];
        v12 = __dst[12];
        v13 = __dst[14];
        v14 = __dst[16];
        v15 = __dst[20];
        v16 = __dst[22];
        v17 = __dst[24];
        v18 = *((_QWORD *)__src + 10);
        v19 = *((_QWORD *)__src + 12);
        v20 = *((_QWORD *)__src + 14);
        v21 = *((_QWORD *)__src + 16);
        v22 = *((_QWORD *)__src + 20);
        v23 = *((_QWORD *)__src + 22);
        v24 = *((_QWORD *)__src + 24);
        if (v11 >> 1 != 0xFFFFFFFF
          || (v13 | (unint64_t)v12) > 1
          || v15 & 0xFFFFFFFFFFFFFEFELL | v14 & 0xFFFFFFFFFFFF00FELL
          || (v17 | v16) >= 2)
        {
          if (v18 >> 1 != 0xFFFFFFFF
            || (v20 | v19) > 1
            || v22 & 0xFFFFFFFFFFFFFEFELL | v21 & 0xFFFFFFFFFFFF00FELL
            || (v24 | v23) >= 2)
          {
            v154 = *((_QWORD *)__src + 9);
            v155 = *((_QWORD *)__src + 11);
            v156 = *((_QWORD *)__src + 13);
            v157 = *((_QWORD *)__src + 15);
            v158 = *((_QWORD *)__src + 19);
            v159 = *((_QWORD *)__src + 21);
            v160 = *((_QWORD *)__src + 23);
            v207 = __dst[8];
            v210 = __dst[7];
            v204 = __dst[9];
            v213 = __dst[11];
            v216 = __dst[13];
            v161 = *(_OWORD *)(__dst + 17);
            v198 = __dst[19];
            v201 = __dst[15];
            v162 = __dst[21];
            v163 = __dst[23];
            v164 = *(_OWORD *)(__dst + 25);
            v165 = *(_OWORD *)(__dst + 27);
            v167 = __dst[29];
            v166 = __dst[30];
            *(_OWORD *)(__dst + 7) = *(_OWORD *)((char *)__src + 56);
            __dst[9] = v154;
            __dst[10] = v18;
            __dst[11] = v155;
            __dst[12] = v19;
            __dst[13] = v156;
            __dst[14] = v20;
            __dst[15] = v157;
            __dst[16] = v21;
            *(_OWORD *)(__dst + 17) = *(_OWORD *)((char *)__src + 136);
            __dst[19] = v158;
            __dst[20] = v22;
            __dst[21] = v159;
            __dst[22] = v23;
            __dst[23] = v160;
            __dst[24] = v24;
            *(_OWORD *)(__dst + 25) = *(_OWORD *)((char *)__src + 200);
            *(_OWORD *)(__dst + 27) = *(_OWORD *)((char *)__src + 216);
            *(_OWORD *)(__dst + 29) = *(_OWORD *)((char *)__src + 232);
            sub_1AD00E8B0(v210, v207, v204, v11, v213, v12, v216, v13, v201, v14, v161, *((uint64_t *)&v161 + 1), v198, v15, v162, v16, v163, v17, v164,
              *((uint64_t *)&v164 + 1),
              v165,
              *((uint64_t *)&v165 + 1),
              v167,
              v166);
            goto LABEL_32;
          }
          sub_1AD148B34((uint64_t)(__dst + 7));
        }
        v25 = *(_OWORD *)((char *)__src + 200);
        *(_OWORD *)(__dst + 23) = *(_OWORD *)((char *)__src + 184);
        *(_OWORD *)(__dst + 25) = v25;
        v26 = *(_OWORD *)((char *)__src + 232);
        *(_OWORD *)(__dst + 27) = *(_OWORD *)((char *)__src + 216);
        *(_OWORD *)(__dst + 29) = v26;
        v27 = *(_OWORD *)((char *)__src + 136);
        *(_OWORD *)(__dst + 15) = *(_OWORD *)((char *)__src + 120);
        *(_OWORD *)(__dst + 17) = v27;
        v28 = *(_OWORD *)((char *)__src + 168);
        *(_OWORD *)(__dst + 19) = *(_OWORD *)((char *)__src + 152);
        *(_OWORD *)(__dst + 21) = v28;
        v29 = *(_OWORD *)((char *)__src + 72);
        *(_OWORD *)(__dst + 7) = *(_OWORD *)((char *)__src + 56);
        *(_OWORD *)(__dst + 9) = v29;
        v30 = *(_OWORD *)((char *)__src + 104);
        *(_OWORD *)(__dst + 11) = *(_OWORD *)((char *)__src + 88);
        *(_OWORD *)(__dst + 13) = v30;
LABEL_32:
        v38 = __dst[31];
        v39 = __dst[32];
        v40 = __dst[33];
        v41 = __dst[34];
        v42 = __dst[35];
        v43 = __dst[36];
        v44 = __dst[37];
        v45 = __dst[38];
        v46 = *(_OWORD *)(__dst + 39);
        v47 = *(_OWORD *)(__dst + 41);
        v48 = *(_OWORD *)(__dst + 43);
        v49 = *(_OWORD *)(__dst + 45);
        v50 = *(_OWORD *)(__dst + 47);
        v51 = *(_OWORD *)(__dst + 49);
        v52 = *(_OWORD *)(__dst + 51);
        v53 = __dst[53];
        v54 = __dst[54];
        *(_OWORD *)(__dst + 31) = *(_OWORD *)((char *)__src + 248);
        v55 = v5[1];
        *v4 = *v5;
        v4[1] = v55;
        v56 = v5[3];
        v4[2] = v5[2];
        v4[3] = v56;
        v57 = v5[5];
        v4[4] = v5[4];
        v4[5] = v57;
        v58 = v5[7];
        v4[6] = v5[6];
        v4[7] = v58;
        v59 = v5[9];
        v4[8] = v5[8];
        v4[9] = v59;
        v4[10] = v5[10];
        sub_1AD00E8B0(v38, v39, v40, v41, v42, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50, *((unint64_t *)&v50 + 1), v51,
          *((uint64_t *)&v51 + 1),
          v52,
          *((uint64_t *)&v52 + 1),
          v53,
          v54);
        goto LABEL_33;
      }
      sub_1AD046A30(__dst);
    }
    v31 = __src[13];
    *((_OWORD *)__dst + 12) = __src[12];
    *((_OWORD *)__dst + 13) = v31;
    *((_OWORD *)__dst + 14) = __src[14];
    __dst[30] = *((_QWORD *)__src + 30);
    v32 = __src[9];
    *((_OWORD *)__dst + 8) = __src[8];
    *((_OWORD *)__dst + 9) = v32;
    v33 = __src[11];
    *((_OWORD *)__dst + 10) = __src[10];
    *((_OWORD *)__dst + 11) = v33;
    v34 = __src[5];
    *((_OWORD *)__dst + 4) = __src[4];
    *((_OWORD *)__dst + 5) = v34;
    v35 = __src[7];
    *((_OWORD *)__dst + 6) = __src[6];
    *((_OWORD *)__dst + 7) = v35;
    v36 = __src[1];
    *(_OWORD *)__dst = *__src;
    *((_OWORD *)__dst + 1) = v36;
    v37 = __src[3];
    *((_OWORD *)__dst + 2) = __src[2];
    *((_OWORD *)__dst + 3) = v37;
    goto LABEL_32;
  }
  sub_1AD4177F8(__dst);
LABEL_17:
  memcpy(__dst, __src, 0x1B8uLL);
LABEL_33:
  v60 = __dst + 55;
  v61 = (_OWORD *)((char *)__src + 440);
  if (__dst[89] >> 1 == 0xFFFFFFFFLL
    && (__dst[93] | __dst[91]) <= 1
    && !(__dst[99] & 0xFFFFFFFFFFFFFEFELL | __dst[95] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[103] | __dst[101]) < 2)
  {
    goto LABEL_42;
  }
  if (*((_QWORD *)__src + 89) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 93) | *((_QWORD *)__src + 91)) > 1
    || *((_QWORD *)__src + 99) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 95) & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 103) | *((_QWORD *)__src + 101)) >= 2)
  {
    if (__dst[58])
    {
      if (*((_QWORD *)__src + 58))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(__dst + 55));
        v62 = *(_OWORD *)((char *)__src + 456);
        *v60 = *v61;
        *(_OWORD *)(__dst + 57) = v62;
        __dst[59] = *((_QWORD *)__src + 59);
        __dst[60] = *((_QWORD *)__src + 60);
        *((_BYTE *)__dst + 488) = *((_BYTE *)__src + 488);
        v60 = __dst + 62;
        v61 = __src + 31;
        v63 = __dst[65];
        v64 = __dst[67];
        v65 = __dst[69];
        v66 = __dst[71];
        v67 = __dst[75];
        v68 = __dst[77];
        v69 = __dst[79];
        v70 = *((_QWORD *)__src + 65);
        v71 = *((_QWORD *)__src + 67);
        v72 = *((_QWORD *)__src + 69);
        v73 = *((_QWORD *)__src + 71);
        v74 = *((_QWORD *)__src + 75);
        v75 = *((_QWORD *)__src + 77);
        v76 = *((_QWORD *)__src + 79);
        if (v63 >> 1 != 0xFFFFFFFF
          || (v65 | (unint64_t)v64) > 1
          || v67 & 0xFFFFFFFFFFFFFEFELL | v66 & 0xFFFFFFFFFFFF00FELL
          || (v69 | v68) >= 2)
        {
          if (v70 >> 1 != 0xFFFFFFFF
            || (v72 | v71) > 1
            || v74 & 0xFFFFFFFFFFFFFEFELL | v73 & 0xFFFFFFFFFFFF00FELL
            || (v76 | v75) >= 2)
          {
            v168 = *((_QWORD *)__src + 64);
            v169 = *((_QWORD *)__src + 66);
            v170 = *((_QWORD *)__src + 68);
            v171 = *((_QWORD *)__src + 70);
            v172 = *((_QWORD *)__src + 74);
            v173 = *((_QWORD *)__src + 76);
            v174 = *((_QWORD *)__src + 78);
            v208 = __dst[63];
            v211 = __dst[62];
            v205 = __dst[64];
            v214 = __dst[66];
            v217 = __dst[68];
            v175 = *((_OWORD *)__dst + 36);
            v199 = __dst[74];
            v202 = __dst[70];
            v176 = __dst[76];
            v177 = __dst[78];
            v178 = *((_OWORD *)__dst + 40);
            v179 = *((_OWORD *)__dst + 41);
            v180 = __dst[84];
            v181 = __dst[85];
            *((_OWORD *)__dst + 31) = __src[31];
            __dst[64] = v168;
            __dst[65] = v70;
            __dst[66] = v169;
            __dst[67] = v71;
            __dst[68] = v170;
            __dst[69] = v72;
            __dst[70] = v171;
            __dst[71] = v73;
            *((_OWORD *)__dst + 36) = __src[36];
            __dst[74] = v172;
            __dst[75] = v74;
            __dst[76] = v173;
            __dst[77] = v75;
            __dst[78] = v174;
            __dst[79] = v76;
            v182 = __src[41];
            *((_OWORD *)__dst + 40) = __src[40];
            *((_OWORD *)__dst + 41) = v182;
            *((_OWORD *)__dst + 42) = __src[42];
            sub_1AD00E8B0(v211, v208, v205, v63, v214, v64, v217, v65, v202, v66, v175, *((uint64_t *)&v175 + 1), v199, v67, v176, v68, v177, v69, v178,
              *((uint64_t *)&v178 + 1),
              v179,
              *((uint64_t *)&v179 + 1),
              v180,
              v181);
            goto LABEL_57;
          }
          sub_1AD148B34((uint64_t)(__dst + 62));
        }
LABEL_56:
        v78 = v61[9];
        v60[8] = v61[8];
        v60[9] = v78;
        v79 = v61[11];
        v60[10] = v61[10];
        v60[11] = v79;
        v80 = v61[5];
        v60[4] = v61[4];
        v60[5] = v80;
        v81 = v61[7];
        v60[6] = v61[6];
        v60[7] = v81;
        v82 = v61[1];
        *v60 = *v61;
        v60[1] = v82;
        v83 = v61[3];
        v60[2] = v61[2];
        v60[3] = v83;
LABEL_57:
        v84 = __dst[86];
        v85 = __dst[87];
        v86 = __dst[88];
        v87 = __dst[89];
        v88 = __dst[90];
        v89 = __dst[91];
        v90 = __dst[92];
        v91 = __dst[93];
        v92 = *((_OWORD *)__dst + 47);
        v93 = *((_OWORD *)__dst + 48);
        v94 = *((_OWORD *)__dst + 49);
        v95 = *((_OWORD *)__dst + 50);
        v96 = *((_OWORD *)__dst + 51);
        v97 = *((_OWORD *)__dst + 52);
        v98 = *((_OWORD *)__dst + 53);
        v99 = __dst[108];
        v100 = __dst[109];
        v101 = __src[44];
        *((_OWORD *)__dst + 43) = __src[43];
        *((_OWORD *)__dst + 44) = v101;
        v102 = __src[46];
        *((_OWORD *)__dst + 45) = __src[45];
        *((_OWORD *)__dst + 46) = v102;
        v103 = __src[48];
        *((_OWORD *)__dst + 47) = __src[47];
        *((_OWORD *)__dst + 48) = v103;
        v104 = __src[50];
        *((_OWORD *)__dst + 49) = __src[49];
        *((_OWORD *)__dst + 50) = v104;
        v105 = __src[52];
        *((_OWORD *)__dst + 51) = __src[51];
        *((_OWORD *)__dst + 52) = v105;
        v106 = __src[54];
        *((_OWORD *)__dst + 53) = __src[53];
        *((_OWORD *)__dst + 54) = v106;
        sub_1AD00E8B0(v84, v85, v86, v87, v88, v89, v90, v91, v92, *((uint64_t *)&v92 + 1), v93, *((uint64_t *)&v93 + 1), v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1), v96, *((unint64_t *)&v96 + 1), v97,
          *((uint64_t *)&v97 + 1),
          v98,
          *((uint64_t *)&v98 + 1),
          v99,
          v100);
        goto LABEL_58;
      }
      sub_1AD046A30(__dst + 55);
    }
    v77 = *(_OWORD *)((char *)__src + 648);
    *(_OWORD *)(__dst + 79) = *(_OWORD *)((char *)__src + 632);
    *(_OWORD *)(__dst + 81) = v77;
    *(_OWORD *)(__dst + 83) = *(_OWORD *)((char *)__src + 664);
    __dst[85] = *((_QWORD *)__src + 85);
    goto LABEL_56;
  }
  sub_1AD4177F8(__dst + 55);
LABEL_42:
  memcpy(__dst + 55, (char *)__src + 440, 0x1B8uLL);
LABEL_58:
  v107 = __dst + 110;
  v108 = __src + 55;
  if (__dst[144] >> 1 == 0xFFFFFFFFLL
    && (__dst[148] | __dst[146]) <= 1
    && !(__dst[154] & 0xFFFFFFFFFFFFFEFELL | __dst[150] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[158] | __dst[156]) < 2)
  {
    goto LABEL_67;
  }
  if (*((_QWORD *)__src + 144) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 148) | *((_QWORD *)__src + 146)) > 1
    || __src[77] & 0xFFFFFFFFFFFFFEFELL | __src[75] & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 158) | *((_QWORD *)__src + 156)) >= 2)
  {
    if (__dst[113])
    {
      if (*((_QWORD *)__src + 113))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(__dst + 110));
        v109 = __src[56];
        *v107 = *v108;
        *((_OWORD *)__dst + 56) = v109;
        __dst[114] = *((_QWORD *)__src + 114);
        __dst[115] = *((_QWORD *)__src + 115);
        *((_BYTE *)__dst + 928) = *((_BYTE *)__src + 928);
        v107 = v4 + 42;
        v108 = v5 + 42;
        v110 = __dst[120];
        v111 = __dst[122];
        v112 = __dst[124];
        v113 = __dst[126];
        v114 = __dst[130];
        v115 = __dst[132];
        v116 = __dst[134];
        v117 = *((_QWORD *)__src + 120);
        v118 = *((_QWORD *)__src + 122);
        v119 = *((_QWORD *)__src + 124);
        v120 = *((_QWORD *)__src + 126);
        v121 = *((_QWORD *)__src + 130);
        v122 = *((_QWORD *)__src + 132);
        v123 = *((_QWORD *)__src + 134);
        if (v110 >> 1 != 0xFFFFFFFF
          || (v112 | (unint64_t)v111) > 1
          || v114 & 0xFFFFFFFFFFFFFEFELL | v113 & 0xFFFFFFFFFFFF00FELL
          || (v116 | v115) >= 2)
        {
          if (v117 >> 1 != 0xFFFFFFFF
            || (v119 | v118) > 1
            || v121 & 0xFFFFFFFFFFFFFEFELL | v120 & 0xFFFFFFFFFFFF00FELL
            || (v123 | v122) >= 2)
          {
            v183 = *((_QWORD *)__src + 119);
            v184 = *((_QWORD *)__src + 121);
            v185 = *((_QWORD *)__src + 123);
            v186 = *((_QWORD *)__src + 125);
            v187 = *((_QWORD *)__src + 129);
            v188 = *((_QWORD *)__src + 131);
            v189 = *((_QWORD *)__src + 133);
            v209 = __dst[118];
            v212 = __dst[117];
            v206 = __dst[119];
            v215 = __dst[121];
            v218 = __dst[123];
            v190 = *(_OWORD *)(__dst + 127);
            v200 = __dst[129];
            v203 = __dst[125];
            v191 = __dst[131];
            v192 = __dst[133];
            v193 = *(_OWORD *)(__dst + 135);
            v194 = *(_OWORD *)(__dst + 137);
            v195 = __dst[139];
            v196 = __dst[140];
            v4[42] = v5[42];
            __dst[119] = v183;
            __dst[120] = v117;
            __dst[121] = v184;
            __dst[122] = v118;
            __dst[123] = v185;
            __dst[124] = v119;
            __dst[125] = v186;
            __dst[126] = v120;
            v4[47] = v5[47];
            __dst[129] = v187;
            __dst[130] = v121;
            __dst[131] = v188;
            __dst[132] = v122;
            __dst[133] = v189;
            __dst[134] = v123;
            v197 = v5[52];
            v4[51] = v5[51];
            v4[52] = v197;
            v4[53] = v5[53];
            sub_1AD00E8B0(v212, v209, v206, v110, v215, v111, v218, v112, v203, v113, v190, *((uint64_t *)&v190 + 1), v200, v114, v191, v115, v192, v116, v193,
              *((uint64_t *)&v193 + 1),
              v194,
              *((uint64_t *)&v194 + 1),
              v195,
              v196);
            goto LABEL_82;
          }
          sub_1AD148B34((uint64_t)(v4 + 42));
        }
LABEL_81:
        v125 = v108[9];
        v107[8] = v108[8];
        v107[9] = v125;
        v126 = v108[11];
        v107[10] = v108[10];
        v107[11] = v126;
        v127 = v108[5];
        v107[4] = v108[4];
        v107[5] = v127;
        v128 = v108[7];
        v107[6] = v108[6];
        v107[7] = v128;
        v129 = v108[1];
        *v107 = *v108;
        v107[1] = v129;
        v130 = v108[3];
        v107[2] = v108[2];
        v107[3] = v130;
LABEL_82:
        v131 = __dst[141];
        v132 = __dst[142];
        v133 = __dst[143];
        v134 = __dst[144];
        v135 = __dst[145];
        v136 = __dst[146];
        v137 = __dst[147];
        v138 = __dst[148];
        v139 = *(_OWORD *)(__dst + 149);
        v140 = *(_OWORD *)(__dst + 151);
        v141 = *(_OWORD *)(__dst + 153);
        v142 = *(_OWORD *)(__dst + 155);
        v143 = *(_OWORD *)(__dst + 157);
        v144 = *(_OWORD *)(__dst + 159);
        v145 = *(_OWORD *)(__dst + 161);
        v146 = __dst[163];
        v147 = __dst[164];
        v148 = v5[55];
        v4[54] = v5[54];
        v4[55] = v148;
        v149 = v5[57];
        v4[56] = v5[56];
        v4[57] = v149;
        v150 = v5[59];
        v4[58] = v5[58];
        v4[59] = v150;
        v151 = v5[61];
        v4[60] = v5[60];
        v4[61] = v151;
        v152 = v5[63];
        v4[62] = v5[62];
        v4[63] = v152;
        v4[64] = v5[64];
        v4[65] = v5[65];
        sub_1AD00E8B0(v131, v132, v133, v134, v135, v136, v137, v138, v139, *((uint64_t *)&v139 + 1), v140, *((uint64_t *)&v140 + 1), v141, *((uint64_t *)&v141 + 1), v142, *((uint64_t *)&v142 + 1), v143, *((unint64_t *)&v143 + 1), v144,
          *((uint64_t *)&v144 + 1),
          v145,
          *((uint64_t *)&v145 + 1),
          v146,
          v147);
        goto LABEL_83;
      }
      sub_1AD046A30(__dst + 110);
    }
    v124 = __src[68];
    *((_OWORD *)__dst + 67) = __src[67];
    *((_OWORD *)__dst + 68) = v124;
    *((_OWORD *)__dst + 69) = __src[69];
    __dst[140] = *((_QWORD *)__src + 140);
    goto LABEL_81;
  }
  sub_1AD4177F8(__dst + 110);
LABEL_67:
  memcpy(__dst + 110, __src + 55, 0x1B8uLL);
LABEL_83:
  __dst[165] = *((_QWORD *)__src + 165);
  *((_OWORD *)__dst + 83) = __src[83];
  __dst[168] = *((_QWORD *)__src + 168);
  __dst[169] = *((_QWORD *)__src + 169);
  __dst[170] = *((_QWORD *)__src + 170);
  swift_bridgeObjectRelease();
  __dst[171] = *((_QWORD *)__src + 171);
  *((_OWORD *)__dst + 86) = __src[86];
  __dst[174] = *((_QWORD *)__src + 174);
  __dst[175] = *((_QWORD *)__src + 175);
  __dst[176] = *((_QWORD *)__src + 176);
  swift_bridgeObjectRelease();
  __dst[177] = *((_QWORD *)__src + 177);
  *((_OWORD *)__dst + 89) = __src[89];
  __dst[180] = *((_QWORD *)__src + 180);
  __dst[181] = *((_QWORD *)__src + 181);
  __dst[182] = *((_QWORD *)__src + 182);
  swift_bridgeObjectRelease();
  __dst[183] = *((_QWORD *)__src + 183);
  *((_OWORD *)__dst + 92) = __src[92];
  __dst[186] = *((_QWORD *)__src + 186);
  return __dst;
}

uint64_t getEnumTagSinglePayload for PassPreview(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 1496))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 272) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PassPreview(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 1496) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 1496) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 248) = 0;
      *(_QWORD *)(result + 256) = 0;
      result += 248;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * ~a2;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PassPreview()
{
  return &type metadata for PassPreview;
}

uint64_t initializeWithCopy for PassPreview.PassText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PassPreview.PassText(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for PassPreview.PassText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for PassPreview.PassText()
{
  return &type metadata for PassPreview.PassText;
}

ValueMetadata *type metadata accessor for PassPreview.PassImage()
{
  return &type metadata for PassPreview.PassImage;
}

_QWORD *destroy for PassPreview.PassBackground(_QWORD *result)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (result[34] >> 1 != 0xFFFFFFFFLL
    || (result[38] | result[36]) > 1uLL
    || (result[44] & 0xFFFFFFFFFFFFFEFELL | result[40] & 0xFFFFFFFFFFFF00FELL) != 0
    || (result[48] | result[46]) >= 2uLL)
  {
    v4 = result;
    if (result[3])
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)result);
      v5 = v4[10];
      v6 = v4[12];
      v7 = v4[14];
      v8 = v4[16];
      v9 = v4[20];
      v10 = v4[22];
      v11 = v4[24];
      if (v5 >> 1 != 0xFFFFFFFF
        || (v7 | (unint64_t)v6) > 1
        || v9 & 0xFFFFFFFFFFFFFEFELL | v8 & 0xFFFFFFFFFFFF00FELL
        || (v11 | v10) >= 2)
      {
        sub_1AD00E8B0(v4[7], v4[8], v4[9], v5, v4[11], v6, v4[13], v7, v4[15], v8, v4[17], v4[18], v4[19], v9, v4[21], v10, v4[23], v11, v4[25],
          v4[26],
          v4[27],
          v4[28],
          v4[29],
          v4[30]);
      }
    }
    v12 = v4[31];
    v13 = v4[32];
    v14 = v4 + 31;
    return (_QWORD *)sub_1AD00E8B0(v12, v13, v14[2], v14[3], v14[4], v14[5], v14[6], v14[7], v14[8], v14[9], v14[10], v14[11], v14[12], v14[13], v14[14], v14[15], v14[16], v14[17], v14[18],
                       v14[19],
                       v14[20],
                       v14[21],
                       v14[22],
                       v14[23]);
  }
  return result;
}

char *initializeWithCopy for PassPreview.PassBackground(char *__dst, char *__src)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;

  if (*((_QWORD *)__src + 34) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) > 1uLL
    || (*((_QWORD *)__src + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 40) & 0xFFFFFFFFFFFF00FELL) != 0
    || (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) >= 2uLL)
  {
    v7 = *((_QWORD *)__src + 3);
    if (v7)
    {
      v8 = *((_QWORD *)__src + 4);
      *((_QWORD *)__dst + 3) = v7;
      *((_QWORD *)__dst + 4) = v8;
      (**(void (***)(char *, char *))(v7 - 8))(__dst, __src);
      *((_QWORD *)__dst + 5) = *((_QWORD *)__src + 5);
      __dst[48] = __src[48];
      v9 = *((_QWORD *)__src + 10);
      v10 = *((_QWORD *)__src + 12);
      v11 = *((_QWORD *)__src + 14);
      v12 = *((_QWORD *)__src + 24);
      if (v9 >> 1 != 0xFFFFFFFF
        || (v11 | (unint64_t)v10) > 1
        || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
        || (v12 | *((_QWORD *)__src + 22)) >= 2)
      {
        v26 = *((_QWORD *)__src + 8);
        v27 = *((_QWORD *)__src + 11);
        v43 = *((_QWORD *)__src + 15);
        v47 = *((_QWORD *)__src + 17);
        v53 = *((_QWORD *)__src + 18);
        v55 = *((_QWORD *)__src + 19);
        v57 = *((_QWORD *)__src + 21);
        v59 = *((_QWORD *)__src + 23);
        v61 = *((_QWORD *)__src + 25);
        v63 = *((_QWORD *)__src + 26);
        v65 = *((_QWORD *)__src + 27);
        v67 = *((_QWORD *)__src + 28);
        v69 = *((_QWORD *)__src + 29);
        v71 = *((_QWORD *)__src + 30);
        v49 = *((_QWORD *)__src + 20);
        v51 = *((_QWORD *)__src + 22);
        v28 = *((_QWORD *)__src + 7);
        v41 = *((_QWORD *)__src + 16);
        v29 = *((_QWORD *)__src + 9);
        v45 = *((_QWORD *)__src + 24);
        v30 = *((_QWORD *)__src + 13);
        sub_1AD00FEAC(v28, v26, v29, v9, v27, v10, v30, v11, v43, v41, v47, v53, v55, v49, v57, v51, v59, v12, v61,
          v63,
          v65,
          v67,
          v69,
          v71);
        *((_QWORD *)__dst + 7) = v28;
        *((_QWORD *)__dst + 8) = v26;
        *((_QWORD *)__dst + 9) = v29;
        *((_QWORD *)__dst + 10) = v9;
        *((_QWORD *)__dst + 11) = v27;
        *((_QWORD *)__dst + 12) = v10;
        *((_QWORD *)__dst + 13) = v30;
        *((_QWORD *)__dst + 14) = v11;
        *((_QWORD *)__dst + 15) = v43;
        *((_QWORD *)__dst + 16) = v41;
        *((_QWORD *)__dst + 17) = v47;
        *((_QWORD *)__dst + 18) = v53;
        *((_QWORD *)__dst + 19) = v55;
        *((_QWORD *)__dst + 20) = v49;
        *((_QWORD *)__dst + 21) = v57;
        *((_QWORD *)__dst + 22) = v51;
        *((_QWORD *)__dst + 23) = v59;
        *((_QWORD *)__dst + 24) = v45;
        *((_QWORD *)__dst + 25) = v61;
        *((_QWORD *)__dst + 26) = v63;
        *((_QWORD *)__dst + 27) = v65;
        *((_QWORD *)__dst + 28) = v67;
        *((_QWORD *)__dst + 29) = v69;
        *((_QWORD *)__dst + 30) = v71;
      }
      else
      {
        v13 = *(_OWORD *)(__src + 200);
        *(_OWORD *)(__dst + 184) = *(_OWORD *)(__src + 184);
        *(_OWORD *)(__dst + 200) = v13;
        v14 = *(_OWORD *)(__src + 232);
        *(_OWORD *)(__dst + 216) = *(_OWORD *)(__src + 216);
        *(_OWORD *)(__dst + 232) = v14;
        v15 = *(_OWORD *)(__src + 136);
        *(_OWORD *)(__dst + 120) = *(_OWORD *)(__src + 120);
        *(_OWORD *)(__dst + 136) = v15;
        v16 = *(_OWORD *)(__src + 168);
        *(_OWORD *)(__dst + 152) = *(_OWORD *)(__src + 152);
        *(_OWORD *)(__dst + 168) = v16;
        v17 = *(_OWORD *)(__src + 72);
        *(_OWORD *)(__dst + 56) = *(_OWORD *)(__src + 56);
        *(_OWORD *)(__dst + 72) = v17;
        v18 = *(_OWORD *)(__src + 104);
        *(_OWORD *)(__dst + 88) = *(_OWORD *)(__src + 88);
        *(_OWORD *)(__dst + 104) = v18;
      }
    }
    else
    {
      v19 = *((_OWORD *)__src + 13);
      *((_OWORD *)__dst + 12) = *((_OWORD *)__src + 12);
      *((_OWORD *)__dst + 13) = v19;
      *((_OWORD *)__dst + 14) = *((_OWORD *)__src + 14);
      *((_QWORD *)__dst + 30) = *((_QWORD *)__src + 30);
      v20 = *((_OWORD *)__src + 9);
      *((_OWORD *)__dst + 8) = *((_OWORD *)__src + 8);
      *((_OWORD *)__dst + 9) = v20;
      v21 = *((_OWORD *)__src + 11);
      *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
      *((_OWORD *)__dst + 11) = v21;
      v22 = *((_OWORD *)__src + 5);
      *((_OWORD *)__dst + 4) = *((_OWORD *)__src + 4);
      *((_OWORD *)__dst + 5) = v22;
      v23 = *((_OWORD *)__src + 7);
      *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
      *((_OWORD *)__dst + 7) = v23;
      v24 = *((_OWORD *)__src + 1);
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((_OWORD *)__dst + 1) = v24;
      v25 = *((_OWORD *)__src + 3);
      *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
      *((_OWORD *)__dst + 3) = v25;
    }
    v31 = *((_QWORD *)__src + 36);
    v32 = *((_QWORD *)__src + 37);
    v42 = *((_QWORD *)__src + 39);
    v44 = *((_QWORD *)__src + 40);
    v46 = *((_QWORD *)__src + 41);
    v48 = *((_QWORD *)__src + 42);
    v50 = *((_QWORD *)__src + 43);
    v52 = *((_QWORD *)__src + 44);
    v54 = *((_QWORD *)__src + 45);
    v56 = *((_QWORD *)__src + 46);
    v58 = *((_QWORD *)__src + 47);
    v60 = *((_QWORD *)__src + 48);
    v62 = *((_QWORD *)__src + 49);
    v64 = *((_QWORD *)__src + 50);
    v66 = *((_QWORD *)__src + 51);
    v68 = *((_QWORD *)__src + 52);
    v70 = *((_QWORD *)__src + 53);
    v72 = *((_QWORD *)__src + 54);
    v33 = *((_QWORD *)__src + 31);
    v34 = *((_QWORD *)__src + 32);
    v35 = *((_QWORD *)__src + 33);
    v36 = *((_QWORD *)__src + 34);
    v37 = *((_QWORD *)__src + 35);
    v38 = *((_QWORD *)__src + 38);
    sub_1AD00FEAC(v33, v34, v35, v36, v37, v31, v32, v38, v42, v44, v46, v48, v50, v52, v54, v56, v58, v60, v62,
      v64,
      v66,
      v68,
      v70,
      v72);
    *((_QWORD *)__dst + 31) = v33;
    *((_QWORD *)__dst + 32) = v34;
    *((_QWORD *)__dst + 33) = v35;
    *((_QWORD *)__dst + 34) = v36;
    *((_QWORD *)__dst + 35) = v37;
    *((_QWORD *)__dst + 36) = v31;
    *((_QWORD *)__dst + 37) = v32;
    *((_QWORD *)__dst + 38) = v38;
    *((_QWORD *)__dst + 39) = v42;
    *((_QWORD *)__dst + 40) = v44;
    *((_QWORD *)__dst + 41) = v46;
    *((_QWORD *)__dst + 42) = v48;
    *((_QWORD *)__dst + 43) = v50;
    *((_QWORD *)__dst + 44) = v52;
    *((_QWORD *)__dst + 45) = v54;
    *((_QWORD *)__dst + 46) = v56;
    *((_QWORD *)__dst + 47) = v58;
    *((_QWORD *)__dst + 48) = v60;
    *((_QWORD *)__dst + 49) = v62;
    *((_QWORD *)__dst + 50) = v64;
    *((_QWORD *)__dst + 51) = v66;
    *((_QWORD *)__dst + 52) = v68;
    *((_QWORD *)__dst + 53) = v70;
    *((_QWORD *)__dst + 54) = v72;
  }
  else
  {
    memcpy(__dst, __src, 0x1B8uLL);
  }
  v39 = *(_OWORD *)(__src + 456);
  *(_OWORD *)(__dst + 440) = *(_OWORD *)(__src + 440);
  *(_OWORD *)(__dst + 456) = v39;
  return __dst;
}

_QWORD *assignWithCopy for PassPreview.PassBackground(_QWORD *__dst, char *__src)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;

  v7 = *((_QWORD *)__src + 34) >> 1 == 0xFFFFFFFFLL
    && (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) < 2uLL
    && (*((_QWORD *)__src + 44) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 40) & 0xFFFFFFFFFFFF00FELL) == 0
    && (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) < 2uLL;
  if (__dst[34] >> 1 == 0xFFFFFFFFLL
    && (__dst[38] | __dst[36]) <= 1
    && !(__dst[44] & 0xFFFFFFFFFFFFFEFELL | __dst[40] & 0xFFFFFFFFFFFF00FELL)
    && (__dst[48] | __dst[46]) < 2)
  {
    if (!v7)
    {
      v8 = *((_QWORD *)__src + 3);
      if (v8)
      {
        __dst[3] = v8;
        __dst[4] = *((_QWORD *)__src + 4);
        (**(void (***)(_QWORD *, char *))(v8 - 8))(__dst, __src);
        v9 = *((_QWORD *)__src + 5);
        *((_BYTE *)__dst + 48) = __src[48];
        __dst[5] = v9;
        v10 = *((_QWORD *)__src + 10);
        v11 = *((_QWORD *)__src + 12);
        v12 = *((_QWORD *)__src + 14);
        v13 = *((_QWORD *)__src + 22);
        if (v10 >> 1 != 0xFFFFFFFF
          || (v12 | (unint64_t)v11) > 1
          || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
          || (*((_QWORD *)__src + 24) | (unint64_t)v13) >= 2)
        {
          v73 = *((_QWORD *)__src + 7);
          v74 = *((_QWORD *)__src + 11);
          v179 = *((_QWORD *)__src + 15);
          v197 = *((_QWORD *)__src + 17);
          v203 = *((_QWORD *)__src + 18);
          v215 = *((_QWORD *)__src + 19);
          v221 = *((_QWORD *)__src + 21);
          v227 = *((_QWORD *)__src + 23);
          v233 = *((_QWORD *)__src + 25);
          v239 = *((_QWORD *)__src + 26);
          v245 = *((_QWORD *)__src + 27);
          v251 = *((_QWORD *)__src + 28);
          v257 = *((_QWORD *)__src + 29);
          v263 = *((_QWORD *)__src + 30);
          v191 = *((_QWORD *)__src + 20);
          v75 = *((_QWORD *)__src + 8);
          v209 = *((_QWORD *)__src + 24);
          v173 = *((_QWORD *)__src + 16);
          v76 = *((_QWORD *)__src + 9);
          v185 = *((_QWORD *)__src + 22);
          v77 = *((_QWORD *)__src + 13);
          sub_1AD00FEAC(v73, v75, v76, v10, v74, v11, v77, v12, v179, v173, v197, v203, v215, v191, v221, v13, v227, v209, v233,
            v239,
            v245,
            v251,
            v257,
            v263);
          __dst[7] = v73;
          __dst[8] = v75;
          __dst[9] = v76;
          __dst[10] = v10;
          __dst[11] = v74;
          __dst[12] = v11;
          __dst[13] = v77;
          __dst[14] = v12;
          __dst[15] = v179;
          __dst[16] = v173;
          __dst[17] = v197;
          __dst[18] = v203;
          __dst[19] = v215;
          __dst[20] = v191;
          __dst[21] = v221;
          __dst[22] = v185;
          __dst[23] = v227;
          __dst[24] = v209;
          __dst[25] = v233;
          __dst[26] = v239;
          __dst[27] = v245;
          __dst[28] = v251;
          __dst[29] = v257;
          __dst[30] = v263;
        }
        else
        {
          v14 = *(_OWORD *)(__src + 56);
          v15 = *(_OWORD *)(__src + 72);
          v16 = *(_OWORD *)(__src + 104);
          *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
          *(_OWORD *)(__dst + 13) = v16;
          *(_OWORD *)(__dst + 7) = v14;
          *(_OWORD *)(__dst + 9) = v15;
          v17 = *(_OWORD *)(__src + 120);
          v18 = *(_OWORD *)(__src + 136);
          v19 = *(_OWORD *)(__src + 168);
          *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
          *(_OWORD *)(__dst + 21) = v19;
          *(_OWORD *)(__dst + 15) = v17;
          *(_OWORD *)(__dst + 17) = v18;
          v20 = *(_OWORD *)(__src + 184);
          v21 = *(_OWORD *)(__src + 200);
          v22 = *(_OWORD *)(__src + 232);
          *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
          *(_OWORD *)(__dst + 29) = v22;
          *(_OWORD *)(__dst + 23) = v20;
          *(_OWORD *)(__dst + 25) = v21;
        }
      }
      else
      {
        v47 = *(_OWORD *)__src;
        v48 = *((_OWORD *)__src + 1);
        v49 = *((_OWORD *)__src + 3);
        *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
        *((_OWORD *)__dst + 3) = v49;
        *(_OWORD *)__dst = v47;
        *((_OWORD *)__dst + 1) = v48;
        v50 = *((_OWORD *)__src + 4);
        v51 = *((_OWORD *)__src + 5);
        v52 = *((_OWORD *)__src + 7);
        *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
        *((_OWORD *)__dst + 7) = v52;
        *((_OWORD *)__dst + 4) = v50;
        *((_OWORD *)__dst + 5) = v51;
        v53 = *((_OWORD *)__src + 8);
        v54 = *((_OWORD *)__src + 9);
        v55 = *((_OWORD *)__src + 11);
        *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
        *((_OWORD *)__dst + 11) = v55;
        *((_OWORD *)__dst + 8) = v53;
        *((_OWORD *)__dst + 9) = v54;
        v56 = *((_OWORD *)__src + 12);
        v57 = *((_OWORD *)__src + 13);
        v58 = *((_OWORD *)__src + 14);
        __dst[30] = *((_QWORD *)__src + 30);
        *((_OWORD *)__dst + 13) = v57;
        *((_OWORD *)__dst + 14) = v58;
        *((_OWORD *)__dst + 12) = v56;
      }
      v78 = *((_QWORD *)__src + 36);
      v79 = *((_QWORD *)__src + 37);
      v174 = *((_QWORD *)__src + 39);
      v180 = *((_QWORD *)__src + 40);
      v186 = *((_QWORD *)__src + 41);
      v192 = *((_QWORD *)__src + 42);
      v198 = *((_QWORD *)__src + 43);
      v204 = *((_QWORD *)__src + 44);
      v210 = *((_QWORD *)__src + 45);
      v216 = *((_QWORD *)__src + 46);
      v222 = *((_QWORD *)__src + 47);
      v228 = *((_QWORD *)__src + 48);
      v234 = *((_QWORD *)__src + 49);
      v240 = *((_QWORD *)__src + 50);
      v246 = *((_QWORD *)__src + 51);
      v252 = *((_QWORD *)__src + 52);
      v258 = *((_QWORD *)__src + 53);
      v264 = *((_QWORD *)__src + 54);
      v80 = *((_QWORD *)__src + 31);
      v81 = *((_QWORD *)__src + 32);
      v82 = *((_QWORD *)__src + 33);
      v83 = *((_QWORD *)__src + 34);
      v84 = *((_QWORD *)__src + 35);
      v85 = *((_QWORD *)__src + 38);
      sub_1AD00FEAC(v80, v81, v82, v83, v84, v78, v79, v85, v174, v180, v186, v192, v198, v204, v210, v216, v222, v228, v234,
        v240,
        v246,
        v252,
        v258,
        v264);
      __dst[31] = v80;
      __dst[32] = v81;
      __dst[33] = v82;
      __dst[34] = v83;
      __dst[35] = v84;
      __dst[36] = v78;
      __dst[37] = v79;
      __dst[38] = v85;
      __dst[39] = v174;
      __dst[40] = v180;
      __dst[41] = v186;
      __dst[42] = v192;
      __dst[43] = v198;
      __dst[44] = v204;
      __dst[45] = v210;
      __dst[46] = v216;
      __dst[47] = v222;
      __dst[48] = v228;
      __dst[49] = v234;
      __dst[50] = v240;
      __dst[51] = v246;
      __dst[52] = v252;
      __dst[53] = v258;
      __dst[54] = v264;
      goto LABEL_64;
    }
LABEL_26:
    memcpy(__dst, __src, 0x1B8uLL);
    goto LABEL_64;
  }
  if (v7)
  {
    sub_1AD4177F8(__dst);
    goto LABEL_26;
  }
  v23 = *((_QWORD *)__src + 3);
  if (__dst[3])
  {
    if (v23)
    {
      __swift_assign_boxed_opaque_existential_1(__dst, (uint64_t *)__src);
      v24 = *((_QWORD *)__src + 5);
      *((_BYTE *)__dst + 48) = __src[48];
      __dst[5] = v24;
      v25 = __dst + 7;
      v26 = (__int128 *)(__src + 56);
      v27 = *((_QWORD *)__src + 10);
      v28 = *((_QWORD *)__src + 12);
      v29 = *((_QWORD *)__src + 14);
      v30 = *((_QWORD *)__src + 16);
      v31 = *((_QWORD *)__src + 20);
      v32 = *((_QWORD *)__src + 22);
      v33 = *((_QWORD *)__src + 24);
      v37 = v27 >> 1 == 0xFFFFFFFF
         && (v29 | (unint64_t)v28) < 2
         && (v31 & 0xFFFFFFFFFFFFFEFELL | v30 & 0xFFFFFFFFFFFF00FELL) == 0
         && (v33 | v32) < 2;
      if (__dst[10] >> 1 != 0xFFFFFFFFLL
        || (__dst[14] | __dst[12]) > 1
        || __dst[20] & 0xFFFFFFFFFFFFFEFELL | __dst[16] & 0xFFFFFFFFFFFF00FELL
        || (__dst[24] | __dst[22]) >= 2)
      {
        if (v37)
        {
          sub_1AD148B34((uint64_t)(__dst + 7));
          v98 = *(_OWORD *)(__src + 104);
          v100 = *v26;
          v99 = *(_OWORD *)(__src + 72);
          *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
          *(_OWORD *)(__dst + 13) = v98;
          *v25 = v100;
          *(_OWORD *)(__dst + 9) = v99;
          v101 = *(_OWORD *)(__src + 168);
          v103 = *(_OWORD *)(__src + 120);
          v102 = *(_OWORD *)(__src + 136);
          *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
          *(_OWORD *)(__dst + 21) = v101;
          *(_OWORD *)(__dst + 15) = v103;
          *(_OWORD *)(__dst + 17) = v102;
          v104 = *(_OWORD *)(__src + 232);
          v106 = *(_OWORD *)(__src + 184);
          v105 = *(_OWORD *)(__src + 200);
          *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
          *(_OWORD *)(__dst + 29) = v104;
          *(_OWORD *)(__dst + 23) = v106;
          *(_OWORD *)(__dst + 25) = v105;
        }
        else
        {
          v183 = *((_QWORD *)__src + 8);
          v189 = *((_QWORD *)__src + 7);
          v177 = *((_QWORD *)__src + 9);
          v128 = *((_QWORD *)__src + 11);
          v129 = *((_QWORD *)__src + 13);
          v195 = *((_QWORD *)__src + 15);
          v201 = *((_QWORD *)__src + 17);
          v207 = *((_QWORD *)__src + 18);
          v213 = *((_QWORD *)__src + 19);
          v219 = *((_QWORD *)__src + 21);
          v225 = *((_QWORD *)__src + 23);
          v231 = *((_QWORD *)__src + 25);
          v237 = *((_QWORD *)__src + 26);
          v243 = *((_QWORD *)__src + 27);
          v249 = *((_QWORD *)__src + 28);
          v255 = *((_QWORD *)__src + 29);
          v261 = *((_QWORD *)__src + 30);
          v267 = *((_QWORD *)__src + 24);
          sub_1AD00FEAC(v189, v183, v177, v27, v128, v28, v129, v29, v195, v30, v201, v207, v213, v31, v219, v32, v225, v33, v231,
            v237,
            v243,
            v249,
            v255,
            v261);
          v130 = __dst[7];
          v131 = __dst[8];
          __dst[7] = v189;
          __dst[8] = v183;
          v132 = __dst[9];
          v133 = __dst[10];
          __dst[9] = v177;
          __dst[10] = v27;
          v134 = __dst[11];
          v135 = __dst[12];
          __dst[11] = v128;
          __dst[12] = v28;
          v136 = __dst[13];
          v137 = __dst[14];
          __dst[13] = v129;
          __dst[14] = v29;
          v138 = *(_OWORD *)(__dst + 15);
          __dst[15] = v195;
          __dst[16] = v30;
          v139 = *(_OWORD *)(__dst + 17);
          __dst[17] = v201;
          __dst[18] = v207;
          v140 = *(_OWORD *)(__dst + 19);
          __dst[19] = v213;
          __dst[20] = v31;
          v141 = *(_OWORD *)(__dst + 21);
          __dst[21] = v219;
          __dst[22] = v32;
          v142 = *(_OWORD *)(__dst + 23);
          __dst[23] = v225;
          __dst[24] = v267;
          v143 = *(_OWORD *)(__dst + 25);
          __dst[25] = v231;
          __dst[26] = v237;
          v144 = *(_OWORD *)(__dst + 27);
          __dst[27] = v243;
          __dst[28] = v249;
          v145 = __dst[29];
          v146 = __dst[30];
          __dst[29] = v255;
          __dst[30] = v261;
          sub_1AD00E8B0(v130, v131, v132, v133, v134, v135, v136, v137, v138, *((uint64_t *)&v138 + 1), v139, *((uint64_t *)&v139 + 1), v140, *((uint64_t *)&v140 + 1), v141, *((uint64_t *)&v141 + 1), v142, *((unint64_t *)&v142 + 1), v143,
            *((uint64_t *)&v143 + 1),
            v144,
            *((uint64_t *)&v144 + 1),
            v145,
            v146);
        }
      }
      else if (v37)
      {
        v38 = *v26;
        v39 = *(_OWORD *)(__src + 72);
        v40 = *(_OWORD *)(__src + 104);
        *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
        *(_OWORD *)(__dst + 13) = v40;
        *v25 = v38;
        *(_OWORD *)(__dst + 9) = v39;
        v41 = *(_OWORD *)(__src + 120);
        v42 = *(_OWORD *)(__src + 136);
        v43 = *(_OWORD *)(__src + 168);
        *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
        *(_OWORD *)(__dst + 21) = v43;
        *(_OWORD *)(__dst + 15) = v41;
        *(_OWORD *)(__dst + 17) = v42;
        v44 = *(_OWORD *)(__src + 184);
        v45 = *(_OWORD *)(__src + 200);
        v46 = *(_OWORD *)(__src + 232);
        *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
        *(_OWORD *)(__dst + 29) = v46;
        *(_OWORD *)(__dst + 23) = v44;
        *(_OWORD *)(__dst + 25) = v45;
      }
      else
      {
        v124 = *((_QWORD *)__src + 11);
        v125 = *((_QWORD *)__src + 13);
        v176 = *((_QWORD *)__src + 9);
        v182 = *((_QWORD *)__src + 15);
        v194 = *((_QWORD *)__src + 17);
        v200 = *((_QWORD *)__src + 18);
        v212 = *((_QWORD *)__src + 19);
        v218 = *((_QWORD *)__src + 21);
        v224 = *((_QWORD *)__src + 23);
        v230 = *((_QWORD *)__src + 25);
        v236 = *((_QWORD *)__src + 26);
        v242 = *((_QWORD *)__src + 27);
        v248 = *((_QWORD *)__src + 28);
        v254 = *((_QWORD *)__src + 29);
        v260 = *((_QWORD *)__src + 30);
        v206 = *((_QWORD *)__src + 22);
        v126 = *((_QWORD *)__src + 7);
        v188 = *((_QWORD *)__src + 20);
        v127 = *((_QWORD *)__src + 8);
        v266 = *((_QWORD *)__src + 24);
        sub_1AD00FEAC(v126, v127, v176, v27, v124, v28, v125, v29, v182, v30, v194, v200, v212, v188, v218, v206, v224, v33, v230,
          v236,
          v242,
          v248,
          v254,
          v260);
        __dst[7] = v126;
        __dst[8] = v127;
        __dst[9] = v176;
        __dst[10] = v27;
        __dst[11] = v124;
        __dst[12] = v28;
        __dst[13] = v125;
        __dst[14] = v29;
        __dst[15] = v182;
        __dst[16] = v30;
        __dst[17] = v194;
        __dst[18] = v200;
        __dst[19] = v212;
        __dst[20] = v188;
        __dst[21] = v218;
        __dst[22] = v206;
        __dst[23] = v224;
        __dst[24] = v266;
        __dst[25] = v230;
        __dst[26] = v236;
        __dst[27] = v242;
        __dst[28] = v248;
        __dst[29] = v254;
        __dst[30] = v260;
      }
    }
    else
    {
      sub_1AD046A30(__dst);
      v86 = *((_OWORD *)__src + 3);
      v88 = *(_OWORD *)__src;
      v87 = *((_OWORD *)__src + 1);
      *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
      *((_OWORD *)__dst + 3) = v86;
      *(_OWORD *)__dst = v88;
      *((_OWORD *)__dst + 1) = v87;
      v89 = *((_OWORD *)__src + 7);
      v91 = *((_OWORD *)__src + 4);
      v90 = *((_OWORD *)__src + 5);
      *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
      *((_OWORD *)__dst + 7) = v89;
      *((_OWORD *)__dst + 4) = v91;
      *((_OWORD *)__dst + 5) = v90;
      v92 = *((_OWORD *)__src + 11);
      v94 = *((_OWORD *)__src + 8);
      v93 = *((_OWORD *)__src + 9);
      *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
      *((_OWORD *)__dst + 11) = v92;
      *((_OWORD *)__dst + 8) = v94;
      *((_OWORD *)__dst + 9) = v93;
      v96 = *((_OWORD *)__src + 13);
      v95 = *((_OWORD *)__src + 14);
      v97 = *((_OWORD *)__src + 12);
      __dst[30] = *((_QWORD *)__src + 30);
      *((_OWORD *)__dst + 13) = v96;
      *((_OWORD *)__dst + 14) = v95;
      *((_OWORD *)__dst + 12) = v97;
    }
  }
  else if (v23)
  {
    __dst[3] = v23;
    __dst[4] = *((_QWORD *)__src + 4);
    (**(void (***)(_QWORD *, char *))(v23 - 8))(__dst, __src);
    v59 = *((_QWORD *)__src + 5);
    *((_BYTE *)__dst + 48) = __src[48];
    __dst[5] = v59;
    v60 = *((_QWORD *)__src + 10);
    v61 = *((_QWORD *)__src + 12);
    v62 = *((_QWORD *)__src + 14);
    v63 = *((_QWORD *)__src + 22);
    if (v60 >> 1 != 0xFFFFFFFF
      || (v62 | (unint64_t)v61) > 1
      || *((_QWORD *)__src + 20) & 0xFFFFFFFFFFFFFEFELL | *((_QWORD *)__src + 16) & 0xFFFFFFFFFFFF00FELL
      || (*((_QWORD *)__src + 24) | (unint64_t)v63) >= 2)
    {
      v119 = *((_QWORD *)__src + 7);
      v120 = *((_QWORD *)__src + 11);
      v181 = *((_QWORD *)__src + 15);
      v199 = *((_QWORD *)__src + 17);
      v205 = *((_QWORD *)__src + 18);
      v217 = *((_QWORD *)__src + 19);
      v223 = *((_QWORD *)__src + 21);
      v229 = *((_QWORD *)__src + 23);
      v235 = *((_QWORD *)__src + 25);
      v241 = *((_QWORD *)__src + 26);
      v247 = *((_QWORD *)__src + 27);
      v253 = *((_QWORD *)__src + 28);
      v259 = *((_QWORD *)__src + 29);
      v265 = *((_QWORD *)__src + 30);
      v193 = *((_QWORD *)__src + 20);
      v121 = *((_QWORD *)__src + 8);
      v211 = *((_QWORD *)__src + 24);
      v175 = *((_QWORD *)__src + 16);
      v122 = *((_QWORD *)__src + 9);
      v187 = *((_QWORD *)__src + 22);
      v123 = *((_QWORD *)__src + 13);
      sub_1AD00FEAC(v119, v121, v122, v60, v120, v61, v123, v62, v181, v175, v199, v205, v217, v193, v223, v63, v229, v211, v235,
        v241,
        v247,
        v253,
        v259,
        v265);
      __dst[7] = v119;
      __dst[8] = v121;
      __dst[9] = v122;
      __dst[10] = v60;
      __dst[11] = v120;
      __dst[12] = v61;
      __dst[13] = v123;
      __dst[14] = v62;
      __dst[15] = v181;
      __dst[16] = v175;
      __dst[17] = v199;
      __dst[18] = v205;
      __dst[19] = v217;
      __dst[20] = v193;
      __dst[21] = v223;
      __dst[22] = v187;
      __dst[23] = v229;
      __dst[24] = v211;
      __dst[25] = v235;
      __dst[26] = v241;
      __dst[27] = v247;
      __dst[28] = v253;
      __dst[29] = v259;
      __dst[30] = v265;
    }
    else
    {
      v64 = *(_OWORD *)(__src + 56);
      v65 = *(_OWORD *)(__src + 72);
      v66 = *(_OWORD *)(__src + 104);
      *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
      *(_OWORD *)(__dst + 13) = v66;
      *(_OWORD *)(__dst + 7) = v64;
      *(_OWORD *)(__dst + 9) = v65;
      v67 = *(_OWORD *)(__src + 120);
      v68 = *(_OWORD *)(__src + 136);
      v69 = *(_OWORD *)(__src + 168);
      *(_OWORD *)(__dst + 19) = *(_OWORD *)(__src + 152);
      *(_OWORD *)(__dst + 21) = v69;
      *(_OWORD *)(__dst + 15) = v67;
      *(_OWORD *)(__dst + 17) = v68;
      v70 = *(_OWORD *)(__src + 184);
      v71 = *(_OWORD *)(__src + 200);
      v72 = *(_OWORD *)(__src + 232);
      *(_OWORD *)(__dst + 27) = *(_OWORD *)(__src + 216);
      *(_OWORD *)(__dst + 29) = v72;
      *(_OWORD *)(__dst + 23) = v70;
      *(_OWORD *)(__dst + 25) = v71;
    }
  }
  else
  {
    v107 = *(_OWORD *)__src;
    v108 = *((_OWORD *)__src + 1);
    v109 = *((_OWORD *)__src + 3);
    *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
    *((_OWORD *)__dst + 3) = v109;
    *(_OWORD *)__dst = v107;
    *((_OWORD *)__dst + 1) = v108;
    v110 = *((_OWORD *)__src + 4);
    v111 = *((_OWORD *)__src + 5);
    v112 = *((_OWORD *)__src + 7);
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((_OWORD *)__dst + 7) = v112;
    *((_OWORD *)__dst + 4) = v110;
    *((_OWORD *)__dst + 5) = v111;
    v113 = *((_OWORD *)__src + 8);
    v114 = *((_OWORD *)__src + 9);
    v115 = *((_OWORD *)__src + 11);
    *((_OWORD *)__dst + 10) = *((_OWORD *)__src + 10);
    *((_OWORD *)__dst + 11) = v115;
    *((_OWORD *)__dst + 8) = v113;
    *((_OWORD *)__dst + 9) = v114;
    v116 = *((_OWORD *)__src + 12);
    v117 = *((_OWORD *)__src + 13);
    v118 = *((_OWORD *)__src + 14);
    __dst[30] = *((_QWORD *)__src + 30);
    *((_OWORD *)__dst + 13) = v117;
    *((_OWORD *)__dst + 14) = v118;
    *((_OWORD *)__dst + 12) = v116;
  }
  v147 = *((_QWORD *)__src + 31);
  v148 = *((_QWORD *)__src + 32);
  v149 = *((_QWORD *)__src + 33);
  v150 = *((_QWORD *)__src + 34);
  v151 = *((_QWORD *)__src + 35);
  v152 = *((_QWORD *)__src + 36);
  v154 = *((_QWORD *)__src + 37);
  v153 = *((_QWORD *)__src + 38);
  v178 = *((_QWORD *)__src + 39);
  v184 = *((_QWORD *)__src + 40);
  v190 = *((_QWORD *)__src + 41);
  v196 = *((_QWORD *)__src + 42);
  v202 = *((_QWORD *)__src + 43);
  v208 = *((_QWORD *)__src + 44);
  v214 = *((_QWORD *)__src + 45);
  v220 = *((_QWORD *)__src + 46);
  v226 = *((_QWORD *)__src + 47);
  v232 = *((_QWORD *)__src + 48);
  v238 = *((_QWORD *)__src + 49);
  v244 = *((_QWORD *)__src + 50);
  v250 = *((_QWORD *)__src + 51);
  v256 = *((_QWORD *)__src + 52);
  v262 = *((_QWORD *)__src + 53);
  v268 = *((_QWORD *)__src + 54);
  sub_1AD00FEAC(v147, v148, v149, v150, v151, v152, v154, v153, v178, v184, v190, v196, v202, v208, v214, v220, v226, v232, v238,
    v244,
    v250,
    v256,
    v262,
    v268);
  v155 = __dst[31];
  v156 = __dst[32];
  v157 = __dst[33];
  v158 = __dst[34];
  __dst[31] = v147;
  __dst[32] = v148;
  v159 = __dst[35];
  v160 = __dst[36];
  __dst[33] = v149;
  __dst[34] = v150;
  v161 = __dst[37];
  v162 = __dst[38];
  __dst[35] = v151;
  __dst[36] = v152;
  __dst[37] = v154;
  __dst[38] = v153;
  v163 = *(_OWORD *)(__dst + 39);
  v164 = *(_OWORD *)(__dst + 41);
  v165 = *(_OWORD *)(__dst + 43);
  v166 = *(_OWORD *)(__dst + 45);
  v167 = *(_OWORD *)(__dst + 47);
  v168 = *(_OWORD *)(__dst + 49);
  v169 = *(_OWORD *)(__dst + 51);
  __dst[39] = v178;
  __dst[40] = v184;
  v170 = __dst[53];
  v171 = __dst[54];
  __dst[41] = v190;
  __dst[42] = v196;
  __dst[43] = v202;
  __dst[44] = v208;
  __dst[45] = v214;
  __dst[46] = v220;
  __dst[47] = v226;
  __dst[48] = v232;
  __dst[49] = v238;
  __dst[50] = v244;
  __dst[51] = v250;
  __dst[52] = v256;
  __dst[53] = v262;
  __dst[54] = v268;
  sub_1AD00E8B0(v155, v156, v157, v158, v159, v160, v161, v162, v163, *((uint64_t *)&v163 + 1), v164, *((uint64_t *)&v164 + 1), v165, *((uint64_t *)&v165 + 1), v166, *((uint64_t *)&v166 + 1), v167, *((unint64_t *)&v167 + 1), v168,
    *((uint64_t *)&v168 + 1),
    v169,
    *((uint64_t *)&v169 + 1),
    v170,
    v171);
LABEL_64:
  __dst[55] = *((_QWORD *)__src + 55);
  __dst[56] = *((_QWORD *)__src + 56);
  __dst[57] = *((_QWORD *)__src + 57);
  __dst[58] = *((_QWORD *)__src + 58);
  return __dst;
}

_QWORD *assignWithTake for PassPreview.PassBackground(_QWORD *__dst, _OWORD *__src)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  if (__dst[34] >> 1 == 0xFFFFFFFFLL
    && (__dst[38] | __dst[36]) <= 1uLL
    && (__dst[44] & 0xFFFFFFFFFFFFFEFELL | __dst[40] & 0xFFFFFFFFFFFF00FELL) == 0
    && (__dst[48] | __dst[46]) < 2uLL)
  {
    goto LABEL_17;
  }
  if (*((_QWORD *)__src + 34) >> 1 != 0xFFFFFFFFLL
    || (*((_QWORD *)__src + 38) | *((_QWORD *)__src + 36)) > 1
    || __src[22] & 0xFFFFFFFFFFFFFEFELL | __src[20] & 0xFFFFFFFFFFFF00FELL
    || (*((_QWORD *)__src + 48) | *((_QWORD *)__src + 46)) >= 2)
  {
    v7 = __dst + 33;
    v8 = (_OWORD *)((char *)__src + 264);
    if (__dst[3])
    {
      if (*((_QWORD *)__src + 3))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
        v9 = __src[1];
        *(_OWORD *)__dst = *__src;
        *((_OWORD *)__dst + 1) = v9;
        v10 = *((_QWORD *)__src + 5);
        __dst[4] = *((_QWORD *)__src + 4);
        __dst[5] = v10;
        *((_BYTE *)__dst + 48) = *((_BYTE *)__src + 48);
        v11 = __dst[10];
        v12 = __dst[12];
        v13 = __dst[14];
        v14 = __dst[16];
        v15 = __dst[20];
        v16 = __dst[22];
        v17 = __dst[24];
        v18 = *((_QWORD *)__src + 10);
        v19 = *((_QWORD *)__src + 12);
        v20 = *((_QWORD *)__src + 14);
        v21 = *((_QWORD *)__src + 16);
        v22 = *((_QWORD *)__src + 20);
        v23 = *((_QWORD *)__src + 22);
        v24 = *((_QWORD *)__src + 24);
        if (v11 >> 1 != 0xFFFFFFFF
          || (v13 | (unint64_t)v12) > 1
          || v15 & 0xFFFFFFFFFFFFFEFELL | v14 & 0xFFFFFFFFFFFF00FELL
          || (v17 | v16) >= 2)
        {
          if (v18 >> 1 != 0xFFFFFFFF
            || (v20 | v19) > 1
            || v22 & 0xFFFFFFFFFFFFFEFELL | v21 & 0xFFFFFFFFFFFF00FELL
            || (v24 | v23) >= 2)
          {
            v61 = *((_QWORD *)__src + 9);
            v62 = *((_QWORD *)__src + 11);
            v63 = *((_QWORD *)__src + 13);
            v64 = *((_QWORD *)__src + 15);
            v65 = *((_QWORD *)__src + 19);
            v66 = *((_QWORD *)__src + 21);
            v67 = *((_QWORD *)__src + 23);
            v78 = __dst[8];
            v79 = __dst[7];
            v77 = __dst[9];
            v80 = __dst[11];
            v81 = __dst[13];
            v68 = *(_OWORD *)(__dst + 17);
            v75 = __dst[19];
            v76 = __dst[15];
            v69 = __dst[21];
            v70 = __dst[23];
            v71 = *(_OWORD *)(__dst + 25);
            v72 = *(_OWORD *)(__dst + 27);
            v74 = __dst[29];
            v73 = __dst[30];
            *(_OWORD *)(__dst + 7) = *(_OWORD *)((char *)__src + 56);
            __dst[9] = v61;
            __dst[10] = v18;
            __dst[11] = v62;
            __dst[12] = v19;
            __dst[13] = v63;
            __dst[14] = v20;
            __dst[15] = v64;
            __dst[16] = v21;
            *(_OWORD *)(__dst + 17) = *(_OWORD *)((char *)__src + 136);
            __dst[19] = v65;
            __dst[20] = v22;
            __dst[21] = v66;
            __dst[22] = v23;
            __dst[23] = v67;
            __dst[24] = v24;
            *(_OWORD *)(__dst + 25) = *(_OWORD *)((char *)__src + 200);
            *(_OWORD *)(__dst + 27) = *(_OWORD *)((char *)__src + 216);
            *(_OWORD *)(__dst + 29) = *(_OWORD *)((char *)__src + 232);
            sub_1AD00E8B0(v79, v78, v77, v11, v80, v12, v81, v13, v76, v14, v68, *((uint64_t *)&v68 + 1), v75, v15, v69, v16, v70, v17, v71,
              *((uint64_t *)&v71 + 1),
              v72,
              *((uint64_t *)&v72 + 1),
              v74,
              v73);
            goto LABEL_32;
          }
          sub_1AD148B34((uint64_t)(__dst + 7));
        }
        v25 = *(_OWORD *)((char *)__src + 200);
        *(_OWORD *)(__dst + 23) = *(_OWORD *)((char *)__src + 184);
        *(_OWORD *)(__dst + 25) = v25;
        v26 = *(_OWORD *)((char *)__src + 232);
        *(_OWORD *)(__dst + 27) = *(_OWORD *)((char *)__src + 216);
        *(_OWORD *)(__dst + 29) = v26;
        v27 = *(_OWORD *)((char *)__src + 136);
        *(_OWORD *)(__dst + 15) = *(_OWORD *)((char *)__src + 120);
        *(_OWORD *)(__dst + 17) = v27;
        v28 = *(_OWORD *)((char *)__src + 168);
        *(_OWORD *)(__dst + 19) = *(_OWORD *)((char *)__src + 152);
        *(_OWORD *)(__dst + 21) = v28;
        v29 = *(_OWORD *)((char *)__src + 72);
        *(_OWORD *)(__dst + 7) = *(_OWORD *)((char *)__src + 56);
        *(_OWORD *)(__dst + 9) = v29;
        v30 = *(_OWORD *)((char *)__src + 104);
        *(_OWORD *)(__dst + 11) = *(_OWORD *)((char *)__src + 88);
        *(_OWORD *)(__dst + 13) = v30;
LABEL_32:
        v38 = __dst[31];
        v39 = __dst[32];
        v40 = __dst[33];
        v41 = __dst[34];
        v42 = __dst[35];
        v43 = __dst[36];
        v44 = __dst[37];
        v45 = __dst[38];
        v46 = *(_OWORD *)(__dst + 39);
        v47 = *(_OWORD *)(__dst + 41);
        v48 = *(_OWORD *)(__dst + 43);
        v49 = *(_OWORD *)(__dst + 45);
        v50 = *(_OWORD *)(__dst + 47);
        v51 = *(_OWORD *)(__dst + 49);
        v52 = *(_OWORD *)(__dst + 51);
        v53 = __dst[53];
        v54 = __dst[54];
        *(_OWORD *)(__dst + 31) = *(_OWORD *)((char *)__src + 248);
        v55 = *(_OWORD *)((char *)__src + 280);
        *v7 = *v8;
        *(_OWORD *)(__dst + 35) = v55;
        v56 = *(_OWORD *)((char *)__src + 312);
        *(_OWORD *)(__dst + 37) = *(_OWORD *)((char *)__src + 296);
        *(_OWORD *)(__dst + 39) = v56;
        v57 = *(_OWORD *)((char *)__src + 344);
        *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)__src + 328);
        *(_OWORD *)(__dst + 43) = v57;
        v58 = *(_OWORD *)((char *)__src + 376);
        *(_OWORD *)(__dst + 45) = *(_OWORD *)((char *)__src + 360);
        *(_OWORD *)(__dst + 47) = v58;
        v59 = *(_OWORD *)((char *)__src + 408);
        *(_OWORD *)(__dst + 49) = *(_OWORD *)((char *)__src + 392);
        *(_OWORD *)(__dst + 51) = v59;
        *(_OWORD *)(__dst + 53) = *(_OWORD *)((char *)__src + 424);
        sub_1AD00E8B0(v38, v39, v40, v41, v42, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50, *((unint64_t *)&v50 + 1), v51,
          *((uint64_t *)&v51 + 1),
          v52,
          *((uint64_t *)&v52 + 1),
          v53,
          v54);
        goto LABEL_33;
      }
      sub_1AD046A30(__dst);
    }
    v31 = __src[13];
    *((_OWORD *)__dst + 12) = __src[12];
    *((_OWORD *)__dst + 13) = v31;
    *((_OWORD *)__dst + 14) = __src[14];
    __dst[30] = *((_QWORD *)__src + 30);
    v32 = __src[9];
    *((_OWORD *)__dst + 8) = __src[8];
    *((_OWORD *)__dst + 9) = v32;
    v33 = __src[11];
    *((_OWORD *)__dst + 10) = __src[10];
    *((_OWORD *)__dst + 11) = v33;
    v34 = __src[5];
    *((_OWORD *)__dst + 4) = __src[4];
    *((_OWORD *)__dst + 5) = v34;
    v35 = __src[7];
    *((_OWORD *)__dst + 6) = __src[6];
    *((_OWORD *)__dst + 7) = v35;
    v36 = __src[1];
    *(_OWORD *)__dst = *__src;
    *((_OWORD *)__dst + 1) = v36;
    v37 = __src[3];
    *((_OWORD *)__dst + 2) = __src[2];
    *((_OWORD *)__dst + 3) = v37;
    goto LABEL_32;
  }
  sub_1AD4177F8(__dst);
LABEL_17:
  memcpy(__dst, __src, 0x1B8uLL);
LABEL_33:
  __dst[55] = *((_QWORD *)__src + 55);
  *((_OWORD *)__dst + 28) = __src[28];
  __dst[58] = *((_QWORD *)__src + 58);
  return __dst;
}

uint64_t getEnumTagSinglePayload for PassPreview.PassBackground(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 472))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 272) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PassPreview.PassBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 472) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 472) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 248) = 0;
      *(_QWORD *)(result + 256) = 0;
      result += 248;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * ~a2;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PassPreview.PassBackground()
{
  return &type metadata for PassPreview.PassBackground;
}

ValueMetadata *type metadata accessor for PassPreview.Constraints()
{
  return &type metadata for PassPreview.Constraints;
}

uint64_t storeEnumTagSinglePayload for PassPreview.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1AD41F3E8 + 4 * byte_1AD683B0F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1AD41F41C + 4 * byte_1AD683B0A[v4]))();
}

uint64_t sub_1AD41F41C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD41F424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD41F42CLL);
  return result;
}

uint64_t sub_1AD41F438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD41F440);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1AD41F444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD41F44C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PassPreview.CodingKeys()
{
  return &type metadata for PassPreview.CodingKeys;
}

ValueMetadata *type metadata accessor for PassPreview.Constraints.CodingKeys()
{
  return &type metadata for PassPreview.Constraints.CodingKeys;
}

ValueMetadata *type metadata accessor for PassPreview.PassBackground.CodingKeys()
{
  return &type metadata for PassPreview.PassBackground.CodingKeys;
}

uint64_t _s9BlastDoor11PassPreviewV11ConstraintsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AD41F4D0 + 4 * byte_1AD683B14[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AD41F4F0 + 4 * byte_1AD683B19[v4]))();
}

_BYTE *sub_1AD41F4D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AD41F4F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD41F4F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD41F500(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD41F508(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD41F510(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PassPreview.PassImage.CodingKeys()
{
  return &type metadata for PassPreview.PassImage.CodingKeys;
}

uint64_t _s9BlastDoor11PassPreviewV14PassBackgroundV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AD41F578 + 4 * byte_1AD683B23[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AD41F5AC + 4 * byte_1AD683B1E[v4]))();
}

uint64_t sub_1AD41F5AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD41F5B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD41F5BCLL);
  return result;
}

uint64_t sub_1AD41F5C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD41F5D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AD41F5D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD41F5DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PassPreview.PassText.CodingKeys()
{
  return &type metadata for PassPreview.PassText.CodingKeys;
}

unint64_t sub_1AD41F5FC()
{
  unint64_t result;

  result = qword_1EECDC408;
  if (!qword_1EECDC408)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683E38, &type metadata for PassPreview.PassText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC408);
  }
  return result;
}

unint64_t sub_1AD41F644()
{
  unint64_t result;

  result = qword_1EECDC410;
  if (!qword_1EECDC410)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683EF0, &type metadata for PassPreview.PassImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC410);
  }
  return result;
}

unint64_t sub_1AD41F68C()
{
  unint64_t result;

  result = qword_1EECDC418;
  if (!qword_1EECDC418)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683FA8, &type metadata for PassPreview.PassBackground.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC418);
  }
  return result;
}

unint64_t sub_1AD41F6D4()
{
  unint64_t result;

  result = qword_1EECDC420;
  if (!qword_1EECDC420)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684060, &type metadata for PassPreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC420);
  }
  return result;
}

unint64_t sub_1AD41F71C()
{
  unint64_t result;

  result = qword_1EECDC428;
  if (!qword_1EECDC428)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684118, &type metadata for PassPreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC428);
  }
  return result;
}

unint64_t sub_1AD41F764()
{
  unint64_t result;

  result = qword_1EECDC430;
  if (!qword_1EECDC430)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684088, &type metadata for PassPreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC430);
  }
  return result;
}

unint64_t sub_1AD41F7AC()
{
  unint64_t result;

  result = qword_1EECDC438;
  if (!qword_1EECDC438)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6840B0, &type metadata for PassPreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC438);
  }
  return result;
}

unint64_t sub_1AD41F7F4()
{
  unint64_t result;

  result = qword_1EECDC440;
  if (!qword_1EECDC440)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683FD0, &type metadata for PassPreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC440);
  }
  return result;
}

unint64_t sub_1AD41F83C()
{
  unint64_t result;

  result = qword_1EECDC448;
  if (!qword_1EECDC448)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683FF8, &type metadata for PassPreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC448);
  }
  return result;
}

unint64_t sub_1AD41F884()
{
  unint64_t result;

  result = qword_1EECDC450;
  if (!qword_1EECDC450)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683F18, &type metadata for PassPreview.PassBackground.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC450);
  }
  return result;
}

unint64_t sub_1AD41F8CC()
{
  unint64_t result;

  result = qword_1EECDC458;
  if (!qword_1EECDC458)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683F40, &type metadata for PassPreview.PassBackground.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC458);
  }
  return result;
}

unint64_t sub_1AD41F914()
{
  unint64_t result;

  result = qword_1EECDC460;
  if (!qword_1EECDC460)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683E60, &type metadata for PassPreview.PassImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC460);
  }
  return result;
}

unint64_t sub_1AD41F95C()
{
  unint64_t result;

  result = qword_1EECDC468;
  if (!qword_1EECDC468)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683E88, &type metadata for PassPreview.PassImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC468);
  }
  return result;
}

unint64_t sub_1AD41F9A4()
{
  unint64_t result;

  result = qword_1EECDC470;
  if (!qword_1EECDC470)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683DA8, &type metadata for PassPreview.PassText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC470);
  }
  return result;
}

unint64_t sub_1AD41F9EC()
{
  unint64_t result;

  result = qword_1EECDC478;
  if (!qword_1EECDC478)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD683DD0, &type metadata for PassPreview.PassText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC478);
  }
  return result;
}

uint64_t sub_1AD41FA30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AD41FB08(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6567616D69 && a2 == 0xE500000000000000;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AD41FBE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D49726564616568 && a2 == 0xEB00000000656761;
  if (v2 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1852793705 && a2 == 0xE400000000000000 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F72676B636162 && a2 == 0xEA0000000000646ELL || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x547972616D697270 && a2 == 0xEB00000000747865 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xED00007478655479 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7972616974726574 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_1AD41FED0()
{
  __asm { BR              X10 }
}

uint64_t sub_1AD41FF04()
{
  uint64_t v0;

  v0 = sub_1AD63B744();
  swift_bridgeObjectRelease();
  return v0;
}

void StickerEffect.bridgedToObjectiveC.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1AD41FFB0()
{
  uint64_t v0;

  v0 = sub_1AD63B744();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1AD420028(CGImageSource *a1)
{
  sub_1AD4209B4(a1, (void (*)(void))sub_1AD376DA8);
}

const __CFDictionary *sub_1AD42004C(CGImageSource *a1)
{
  void *v1;
  const __CFDictionary *result;
  id v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const __CFString *v9;
  __CFString *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16[5];
  unint64_t v17;
  const __CFDictionary *v18;

  result = BitmapEncoder.encode(imageSource:)(a1);
  if (v1)
  {
    v18 = result;
    v4 = v1;
    sub_1AD6015CC(v1, 0, 0, v16);
    v5 = v16[1];
    v6 = v16[3];
    v14 = v16[2];
    v15 = v16[0];
    if (v17)
      v7 = v16[4];
    else
      v7 = 0;
    if (v17)
      v8 = v17;
    else
      v8 = 0xE000000000000000;
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AD63BD38();
    swift_bridgeObjectRelease();
    strcpy((char *)v16, "-SourceFormat(");
    HIBYTE(v16[1]) = -18;
    v9 = (id)CGImageSourceGetType(a1);
    if (v9)
    {
      v10 = (__CFString *)v9;
      sub_1AD63B768();

    }
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    sub_1AD63B810();
    v16[0] = v7;
    v16[1] = v8;
    swift_bridgeObjectRetain();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v16[0];
    v12 = v16[1];
    sub_1AD0DDA60();
    swift_allocError();
    *v13 = v15;
    v13[1] = v5;
    v13[2] = v14;
    v13[3] = v6;
    v13[4] = v11;
    v13[5] = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    return v18;
  }
  return result;
}

_QWORD *sub_1AD42023C(void *a1)
{
  void *v1;
  unint64_t v3;
  CGImageSource *v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const __CFString *v12;
  __CFString *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20[3];
  unint64_t v21;
  _UNKNOWN **v22;
  unint64_t v23;
  _QWORD *v24;

  type metadata accessor for CGImageSource(0);
  v21 = v3;
  v22 = &off_1E5CCB4B8;
  v20[0] = (unint64_t)a1;
  v4 = a1;
  v5 = sub_1AD59F4CC(v20);
  v6 = v5;
  if (v1)
  {
    v24 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v7 = v1;
    sub_1AD6015CC(v1, 0, 0, v20);
    v8 = v20[1];
    v9 = v21;
    v18 = v20[2];
    v19 = v20[0];
    if (v23)
      v10 = (unint64_t)v22;
    else
      v10 = 0;
    if (v23)
      v11 = v23;
    else
      v11 = 0xE000000000000000;
    v20[0] = 0;
    v20[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AD63BD38();
    swift_bridgeObjectRelease();
    strcpy((char *)v20, "-SourceFormat(");
    HIBYTE(v20[1]) = -18;
    v12 = (id)CGImageSourceGetType(v4);
    if (v12)
    {
      v13 = (__CFString *)v12;
      sub_1AD63B768();

    }
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    sub_1AD63B810();
    v20[0] = v10;
    v20[1] = v11;
    swift_bridgeObjectRetain();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v20[0];
    v15 = v20[1];
    sub_1AD0DDA60();
    swift_allocError();
    *v16 = v19;
    v16[1] = v8;
    v16[2] = v18;
    v16[3] = v9;
    v16[4] = v14;
    v16[5] = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    return v24;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  return v6;
}

uint64_t ImageEncoder.encodeThrowingSourceFormat(imageSource:)(CGImageSource *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t result;
  id v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18[5];
  unint64_t v19;
  uint64_t v20;

  result = (*(uint64_t (**)(void))(a3 + 32))();
  if (v3)
  {
    v20 = result;
    v6 = v3;
    sub_1AD6015CC(v3, 0, 0, v18);
    v7 = v18[1];
    v8 = v18[3];
    v16 = v18[2];
    v17 = v18[0];
    if (v19)
      v9 = v18[4];
    else
      v9 = 0;
    if (v19)
      v10 = v19;
    else
      v10 = 0xE000000000000000;
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AD63BD38();
    swift_bridgeObjectRelease();
    strcpy((char *)v18, "-SourceFormat(");
    HIBYTE(v18[1]) = -18;
    v11 = (id)CGImageSourceGetType(a1);
    if (v11)
    {
      v12 = (__CFString *)v11;
      sub_1AD63B768();

    }
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    sub_1AD63B810();
    v18[0] = v9;
    v18[1] = v10;
    swift_bridgeObjectRetain();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v18[0];
    v14 = v18[1];
    sub_1AD0DDA60();
    swift_allocError();
    *v15 = v17;
    v15[1] = v7;
    v15[2] = v16;
    v15[3] = v8;
    v15[4] = v13;
    v15[5] = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    return v20;
  }
  return result;
}

uint64_t dispatch thunk of ImageEncoder.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ImageEncoder.encode(imageSource:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ImageEncoder.encode(imageSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ImageEncoder.encodeThrowingSourceFormat(imageSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_1AD4206C0(CGImageSource *a1, uint64_t a2, uint64_t a3)
{
  return ImageEncoder.encodeThrowingSourceFormat(imageSource:)(a1, a2, a3);
}

uint64_t dispatch thunk of ImageEncoder.encode(image:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ImageEncoder.encode(image:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ImageEncoder.encode(pixelBuffer:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ImageEncoder.encode(pixelBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

void sub_1AD420734(CGImageSource *a1)
{
  sub_1AD4207AC(a1);
}

void sub_1AD420748(CGImageSource *a1)
{
  sub_1AD4209B4(a1, (void (*)(void))sub_1AD420BB8);
}

_QWORD *sub_1AD42076C(void *a1)
{
  return sub_1AD42023C(a1);
}

const __CFDictionary *sub_1AD42078C(CGImageSource *a1)
{
  return sub_1AD42004C(a1);
}

void sub_1AD4207AC(CGImageSource *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const __CFString *v10;
  __CFString *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16[6];
  unint64_t v17;

  sub_1AD00F938();
  v2 = (void *)swift_allocError();
  *(_WORD *)v3 = 1281;
  *(_QWORD *)(v3 + 8) = 0;
  swift_willThrow();
  v4 = v2;
  sub_1AD6015CC(v2, 0, 0, v16);
  v5 = v16[1];
  v17 = v16[0];
  v6 = v16[3];
  v15 = v16[2];
  v16[0] = 0;
  v8 = v16[4];
  v7 = v16[5];
  v9 = 0xE000000000000000;
  v16[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AD63BD38();
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "-SourceFormat(");
  HIBYTE(v16[1]) = -18;
  v10 = (id)CGImageSourceGetType(a1);
  if (v10)
  {
    v11 = (__CFString *)v10;
    sub_1AD63B768();

  }
  if (v7)
    v9 = v7;
  else
    v8 = 0;
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  sub_1AD63B810();
  v16[0] = v8;
  v16[1] = v9;
  swift_bridgeObjectRetain();
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v16[0];
  v13 = v16[1];
  sub_1AD0DDA60();
  swift_allocError();
  *v14 = v17;
  v14[1] = v5;
  v14[2] = v15;
  v14[3] = v6;
  v14[4] = v12;
  v14[5] = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

}

void sub_1AD4209B4(CGImageSource *a1, void (*a2)(void))
{
  void *v3;
  _BYTE *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17[6];
  unint64_t v18;

  a2();
  v3 = (void *)swift_allocError();
  *v4 = 3;
  swift_willThrow();
  v5 = v3;
  sub_1AD6015CC(v3, 0, 0, v17);
  v6 = v17[1];
  v18 = v17[0];
  v7 = v17[3];
  v16 = v17[2];
  v17[0] = 0;
  v9 = v17[4];
  v8 = v17[5];
  v10 = 0xE000000000000000;
  v17[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AD63BD38();
  swift_bridgeObjectRelease();
  strcpy((char *)v17, "-SourceFormat(");
  HIBYTE(v17[1]) = -18;
  v11 = (id)CGImageSourceGetType(a1);
  if (v11)
  {
    v12 = (__CFString *)v11;
    sub_1AD63B768();

  }
  if (v8)
    v10 = v8;
  else
    v9 = 0;
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  sub_1AD63B810();
  v17[0] = v9;
  v17[1] = v10;
  swift_bridgeObjectRetain();
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = v17[0];
  v14 = v17[1];
  sub_1AD0DDA60();
  swift_allocError();
  *v15 = v18;
  v15[1] = v6;
  v15[2] = v16;
  v15[3] = v7;
  v15[4] = v13;
  v15[5] = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

}

unint64_t sub_1AD420BB8()
{
  unint64_t result;

  result = qword_1EECDC480;
  if (!qword_1EECDC480)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6959EC, &type metadata for PNGEncodingError);
    atomic_store(result, (unint64_t *)&qword_1EECDC480);
  }
  return result;
}

void sub_1AD420BFC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[8];
  _OWORD v56[8];
  uint64_t v57[16];
  _OWORD v58[9];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB388);
  v5 = MEMORY[0x1E0C80A78](v4);
  v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v52 = (char *)&v48 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for CollaborationMetadata();
  v12 = (uint64_t)a2 + v11[6];
  v13 = sub_1AD63B03C();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v50 = v12;
  v49(v12, 1, 1, v13);
  v14 = (uint64_t *)((char *)a2 + v11[7]);
  *v14 = 0;
  v14[1] = 0;
  v54 = v11[8];
  *(uint64_t *)((char *)a2 + v54) = 0;
  v53 = v11[9];
  *(uint64_t *)((char *)a2 + v53) = 0;
  v15 = (uint64_t)a2 + v11[10];
  sub_1AD42214C(v58);
  v48 = v15;
  sub_1AD00FF28((uint64_t)v58, v15, &qword_1EECD2360);
  v16 = objc_msgSend(a1, sel_collaborationIdentifier);
  v17 = sub_1AD63B768();
  v19 = v18;

  *a2 = v17;
  a2[1] = v19;
  v20 = objc_msgSend(a1, sel_title);
  if (v20)
  {
    v21 = v20;
    v22 = sub_1AD63B768();
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0;
  }
  a2[2] = v22;
  a2[3] = v24;
  v25 = a1;
  v26 = objc_msgSend(a1, sel_creationDate);
  if (v26)
  {
    v27 = v26;
    sub_1AD63B024();

    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  v30 = (uint64_t)v51;
  v29 = (uint64_t)v52;
  v49((uint64_t)v10, v28, 1, v13);
  sub_1AD0E4930((uint64_t)v10, v50);
  v31 = objc_msgSend(a1, sel_contentType);
  if (v31)
  {
    v32 = v31;
    sub_1AD63B450();

    v33 = sub_1AD63B468();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v30, 0, 1, v33);
  }
  else
  {
    v33 = sub_1AD63B468();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v30, 1, 1, v33);
  }
  v34 = v54;
  sub_1AD00FF28(v30, v29, &qword_1EECDB388);
  sub_1AD63B468();
  v35 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v29, 1, v33) == 1)
  {
    sub_1AD422164(v29);
    v36 = 0;
    v37 = 0;
  }
  else
  {
    v36 = sub_1AD63B438();
    v37 = v38;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v29, v33);
  }
  swift_bridgeObjectRelease();
  *v14 = v36;
  v14[1] = v37;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a2 + v34) = 0;
  v39 = objc_msgSend(v25, sel_ckAppBundleIDs);
  if (v39)
  {
    v40 = v39;
    v41 = sub_1AD63B9B4();

  }
  else
  {
    v41 = 0;
  }
  v42 = v53;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a2 + v42) = v41;
  if (objc_msgSend(v25, sel_respondsToSelector_, sel_handleToIdentityMap))
  {
    v43 = objc_msgSend(v25, sel_handleToIdentityMap);
    if (v43)
    {
      sub_1AD32F2CC(0, (unint64_t *)&unk_1EECDE970);
      v44 = sub_1AD63B690();

      v43 = (id)sub_1AD4221FC(v44);
      swift_bridgeObjectRelease();
    }
    *(uint64_t *)((char *)a2 + v34) = (uint64_t)v43;
  }
  if (objc_msgSend(v25, sel_respondsToSelector_, sel_containerSetupInfo)
    && (v45 = objc_msgSend(v25, sel_containerSetupInfo), v45, v45))
  {
    v46 = objc_msgSend(v25, sel_containerSetupInfo);
    if (v46)
    {
      sub_1AD421918(v46, (uint64_t)v55);

      v56[4] = v55[4];
      v56[5] = v55[5];
      v56[6] = v55[6];
      v56[7] = v55[7];
      v56[0] = v55[0];
      v56[1] = v55[1];
      v56[2] = v55[2];
      v56[3] = v55[3];
      nullsub_1(v56);
      v47 = v48;
      sub_1AD00FF28(v48, (uint64_t)v57, &qword_1EECD2360);
      sub_1AD4221A4(v57);
      sub_1AD00FF28((uint64_t)v56, v47, &qword_1EECD2360);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {

  }
}

id sub_1AD4210D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _OWORD v34[9];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECD23F8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB388);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)sub_1AD63B744();
  v12 = *(_QWORD *)(v0 + 16);
  v13 = *(_QWORD *)(v0 + 24);
  v14 = type metadata accessor for CollaborationMetadata();
  sub_1AD0E48B8(v1 + *(int *)(v14 + 24), (uint64_t)v10);
  v15 = sub_1AD63B468();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  v24[0] = v14;
  v16 = *(_QWORD *)(v1 + *(int *)(v14 + 36));
  v17 = sub_1AD63AE2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
  v18 = objc_allocWithZone(MEMORY[0x1E0CD7400]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = sub_1AD421B9C(v11, v12, v13, 0, (uint64_t)v10, (uint64_t)v7, v16, 0, 0, (uint64_t)v4);
  if (objc_msgSend(v19, sel_respondsToSelector_, sel_setHandleToIdentityMap_))
  {
    v20 = *(_QWORD *)(v1 + *(int *)(v24[0] + 32));
    if (v20)
    {
      sub_1AD421DF0(v20);
      sub_1AD32F2CC(0, (unint64_t *)&unk_1EECDE970);
      v21 = (void *)sub_1AD63B678();
      swift_release();
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v19, sel_setHandleToIdentityMap_, v21);

  }
  if (objc_msgSend(v19, sel_respondsToSelector_, sel_setContainerSetupInfo_))
  {
    sub_1AD00FF28(v1 + *(int *)(v24[0] + 40), (uint64_t)v33, &qword_1EECD2360);
    sub_1AD00FF28((uint64_t)v33, (uint64_t)v34, &qword_1EECD2360);
    if (sub_1AD421DD8((uint64_t)v34) == 1)
    {
      v22 = 0;
    }
    else
    {
      v29 = v34[4];
      v30 = v34[5];
      v31 = v34[6];
      v32 = v34[7];
      v25 = v34[0];
      v26 = v34[1];
      v27 = v34[2];
      v28 = v34[3];
      v22 = (void *)sub_1AD421640();
    }
    objc_msgSend(v19, sel_setContainerSetupInfo_, v22);

  }
  return v19;
}

id sub_1AD4213D0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[3];
  v4 = v0[4];
  swift_bridgeObjectRetain();
  sub_1AD0040A0(v1, v2);
  sub_1AD00408C(v3, v4);
  v5 = (void *)sub_1AD63AFA0();
  v6 = (void *)sub_1AD63B990();
  swift_bridgeObjectRelease();
  if (v4 >> 60 == 15)
  {
    v7 = 0;
  }
  else
  {
    v7 = (void *)sub_1AD63AFA0();
    sub_1AD004118(v3, v4);
  }
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD7438]), sel_initWithRootHash_publicKeys_trackingPreventionSalt_, v5, v6, v7);
  sub_1AD00412C(v1, v2);

  return v8;
}

uint64_t sub_1AD4214CC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = objc_msgSend(a1, sel_rootHash);
  v5 = sub_1AD63AFB8();
  v7 = v6;

  sub_1AD0040A0(v5, v7);
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_publicKeys))
  {
    v8 = objc_msgSend(a1, sel_publicKeys);
    v9 = sub_1AD63B9B4();

  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_trackingPreventionSalt)
    && (v10 = objc_msgSend(a1, sel_trackingPreventionSalt)) != 0)
  {
    v11 = v10;
    v12 = sub_1AD63AFB8();
    v14 = v13;

  }
  else
  {

    v12 = 0;
    v14 = 0xF000000000000000;
  }
  sub_1AD0040A0(v5, v7);
  swift_bridgeObjectRetain();
  sub_1AD00408C(v12, v14);
  sub_1AD00412C(v5, v7);
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v12;
  a2[4] = v14;
  sub_1AD00412C(v5, v7);
  swift_bridgeObjectRelease();
  return sub_1AD004118(v12, v14);
}

uint64_t sub_1AD421640()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 3);
  v4 = *((_QWORD *)v0 + 5);
  v5 = *((_QWORD *)v0 + 7);
  v19 = *((_QWORD *)v0 + 9);
  v20 = *((_QWORD *)v0 + 11);
  v21 = v0[96];
  v6 = *((_QWORD *)v0 + 15);
  v7 = objc_allocWithZone(MEMORY[0x1E0C94C40]);
  swift_bridgeObjectRetain();
  v8 = (void *)sub_1AD63B744();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithContainerIdentifier_environment_, v8, v6);

  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C94C50]), sel_init);
  objc_msgSend(v10, sel_setUseZoneWidePCS_, v1);
  objc_msgSend(v10, sel_setMmcsEncryptionSupport_, v2);
  if (v3)
    v11 = (void *)sub_1AD63B744();
  else
    v11 = 0;
  objc_msgSend(v10, sel_setEncryptionServiceName_, v11);

  if (v4)
    v12 = (void *)sub_1AD63B744();
  else
    v12 = 0;
  objc_msgSend(v10, sel_setApplicationBundleIdentifierOverrideForContainerAccess_, v12);

  if (v5)
    v13 = (void *)sub_1AD63B744();
  else
    v13 = 0;
  objc_msgSend(v10, sel_setApplicationBundleIdentifierOverrideForNetworkAttribution_, v13);

  if (v19)
    v14 = (void *)sub_1AD63B744();
  else
    v14 = 0;
  objc_msgSend(v10, sel_setApplicationBundleIdentifierOverrideForPushTopicGeneration_, v14);

  if (v20)
    v15 = (void *)sub_1AD63B744();
  else
    v15 = 0;
  objc_msgSend(v10, sel_setApplicationBundleIdentifierOverrideForTCC_, v15);

  objc_msgSend(v10, sel_setPrefersHiddenAllowedSharingOptionsUI_, v21);
  sub_1AD32F2CC(0, &qword_1EECDC488);
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instancesRespondToSelector_, sel_initWithContainerID_options_))
  {
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C94C58]), sel_initWithContainerID_options_, v9, v10);
    if (v16)
    {
      v17 = v16;

      return (uint64_t)v17;
    }
    __break(1u);
  }
  result = sub_1AD63BE28();
  __break(1u);
  return result;
}

void sub_1AD421918(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unsigned __int8 v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v4 = objc_msgSend(a1, sel_containerID);
  v5 = objc_msgSend(v4, sel_containerIdentifier);

  v6 = sub_1AD63B768();
  v41 = v7;
  v42 = v6;

  v8 = objc_msgSend(a1, sel_containerID);
  v40 = objc_msgSend(v8, sel_environment);

  v9 = objc_msgSend(a1, sel_containerOptions);
  v39 = objc_msgSend(v9, sel_useZoneWidePCS);
  v38 = objc_msgSend(v9, sel_mmcsEncryptionSupport);
  v10 = objc_msgSend(v9, sel_encryptionServiceName);
  if (v10)
  {
    v11 = v10;
    v12 = sub_1AD63B768();
    v36 = v13;
    v37 = v12;

  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  v14 = objc_msgSend(v9, sel_applicationBundleIdentifierOverrideForContainerAccess);
  if (v14)
  {
    v15 = v14;
    v16 = sub_1AD63B768();
    v34 = v17;
    v35 = v16;

  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v18 = objc_msgSend(v9, sel_applicationBundleIdentifierOverrideForNetworkAttribution);
  if (v18)
  {
    v19 = v18;
    v20 = sub_1AD63B768();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(v9, sel_applicationBundleIdentifierOverrideForPushTopicGeneration);
  if (v23)
  {
    v24 = v23;
    v25 = sub_1AD63B768();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = objc_msgSend(v9, sel_applicationBundleIdentifierOverrideForTCC);
  if (v28)
  {
    v29 = v28;
    v30 = sub_1AD63B768();
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = objc_msgSend(v9, sel_prefersHiddenAllowedSharingOptionsUI);

  *(_BYTE *)a2 = v39;
  *(_QWORD *)(a2 + 8) = v38;
  *(_QWORD *)(a2 + 16) = v37;
  *(_QWORD *)(a2 + 24) = v36;
  *(_QWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v34;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v27;
  *(_QWORD *)(a2 + 80) = v30;
  *(_QWORD *)(a2 + 88) = v32;
  *(_BYTE *)(a2 + 96) = v33;
  *(_QWORD *)(a2 + 104) = v42;
  *(_QWORD *)(a2 + 112) = v41;
  *(_QWORD *)(a2 + 120) = v40;
}

id sub_1AD421B9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v29;

  if (a3)
  {
    v14 = (void *)sub_1AD63B744();
    swift_bridgeObjectRelease();
    if (a4)
    {
LABEL_3:
      sub_1AD32F2CC(0, &qword_1EECDC498);
      v15 = (void *)sub_1AD63B990();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    v14 = 0;
    if (a4)
      goto LABEL_3;
  }
  v15 = 0;
LABEL_6:
  v16 = sub_1AD63B03C();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a5, 1, v16) != 1)
  {
    v18 = (void *)sub_1AD63B018();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  }
  v19 = sub_1AD63B468();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(a6, 1, v19) != 1)
  {
    v21 = (void *)sub_1AD63B444();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a6, v19);
  }
  if (a7)
  {
    v22 = (void *)sub_1AD63B990();
    swift_bridgeObjectRelease();
    if (a9)
    {
LABEL_12:
      v23 = (void *)sub_1AD63B744();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  else
  {
    v22 = 0;
    if (a9)
      goto LABEL_12;
  }
  v23 = 0;
LABEL_15:
  v24 = sub_1AD63AE2C();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(a10, 1, v24) != 1)
  {
    v26 = (void *)sub_1AD63AE14();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a10, v24);
  }
  v27 = objc_msgSend(v29, sel_initWithCollaborationIdentifier_title_defaultOptions_creationDate_contentType_ckAppBundleIDs_initiatorHandle_initiatorNameComponents_, a1, v14, v15, v18, v21, v22, v23, v26);

  return v27;
}

uint64_t sub_1AD421DD8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1AD421DF0(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC490);
  result = sub_1AD63BE40();
  v3 = 0;
  v31 = (_QWORD *)result;
  v32 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v28 = v5;
  v29 = (unint64_t)(v7 + 63) >> 6;
  v30 = result + 64;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v33 = (v9 - 1) & v9;
  for (i = __clz(__rbit64(v9)) | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * i);
    v15 = v14[1];
    v36 = *v14;
    v16 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 40 * i);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[3];
    v20 = v16[4];
    sub_1AD0040A0(*v16, v18);
    swift_bridgeObjectRetain();
    sub_1AD00408C(v19, v20);
    sub_1AD0040A0(v17, v18);
    swift_bridgeObjectRetain();
    sub_1AD00408C(v19, v20);
    v37 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AD0040A0(v17, v18);
    sub_1AD00408C(v19, v20);
    v21 = (void *)sub_1AD63AFA0();
    v22 = (void *)sub_1AD63B990();
    swift_bridgeObjectRelease();
    v34 = v3;
    if (v20 >> 60 == 15)
    {
      v23 = 0;
    }
    else
    {
      v23 = (void *)sub_1AD63AFA0();
      sub_1AD004118(v19, v20);
    }
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD7438]), sel_initWithRootHash_publicKeys_trackingPreventionSalt_, v21, v22, v23);
    sub_1AD00412C(v17, v18);

    sub_1AD00412C(v17, v18);
    swift_bridgeObjectRelease();
    sub_1AD004118(v19, v20);
    sub_1AD00412C(v17, v18);
    swift_bridgeObjectRelease();
    sub_1AD004118(v19, v20);
    result = (uint64_t)v31;
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v24 = (_QWORD *)(v31[6] + 16 * i);
    *v24 = v36;
    v24[1] = v37;
    *(_QWORD *)(v31[7] + 8 * i) = v35;
    v25 = v31[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v31[2] = v27;
    v9 = v33;
    v3 = v34;
    if (v33)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_27;
    if (v11 >= v29)
      return result;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v29)
        return result;
      v12 = *(_QWORD *)(v28 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v29)
          return result;
        v12 = *(_QWORD *)(v28 + 8 * v3);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v33 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v29)
    return result;
  v12 = *(_QWORD *)(v28 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v29)
      return result;
    v12 = *(_QWORD *)(v28 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

double sub_1AD42214C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1AD422164(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDB388);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1AD4221A4(uint64_t *a1)
{
  sub_1AD0E4CD0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t sub_1AD4221FC(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4A0);
  result = sub_1AD63BE40();
  v3 = (_QWORD *)result;
  v4 = 0;
  v35 = (_QWORD *)result;
  v36 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v37 = (unint64_t)(v5 + 63) >> 6;
  v38 = result + 64;
  v8 = &selRef_isPhotoBooth;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v39 = (v7 - 1) & v7;
  v40 = v4;
  for (i = __clz(__rbit64(v7)) | (v4 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v42 = *v14;
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    v41 = v14[1];
    swift_bridgeObjectRetain();
    v16 = v15;
    v17 = objc_msgSend(v16, sel_rootHash);
    v18 = sub_1AD63AFB8();
    v20 = v19;

    sub_1AD0040A0(v18, v20);
    v21 = objc_msgSend(v16, v8[381], sel_publicKeys);
    v22 = MEMORY[0x1E0DEE9D8];
    if (v21)
    {
      v23 = objc_msgSend(v16, sel_publicKeys);
      v22 = sub_1AD63B9B4();

    }
    if (objc_msgSend(v16, v8[381], sel_trackingPreventionSalt))
    {
      v24 = a1;
      v25 = objc_msgSend(v16, sel_trackingPreventionSalt);
      if (v25)
      {
        v26 = v25;
        v27 = sub_1AD63AFB8();
        v29 = v28;

      }
      else
      {

        v27 = 0;
        v29 = 0xF000000000000000;
      }
      a1 = v24;
      v3 = v35;
    }
    else
    {

      v27 = 0;
      v29 = 0xF000000000000000;
    }
    sub_1AD0040A0(v18, v20);
    swift_bridgeObjectRetain();
    sub_1AD00408C(v27, v29);
    sub_1AD00412C(v18, v20);
    sub_1AD00412C(v18, v20);
    swift_bridgeObjectRelease();
    result = sub_1AD004118(v27, v29);
    *(_QWORD *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v30 = (_QWORD *)(v3[6] + 16 * i);
    *v30 = v42;
    v30[1] = v41;
    v31 = (uint64_t *)(v3[7] + 40 * i);
    *v31 = v18;
    v31[1] = v20;
    v31[2] = v22;
    v31[3] = v27;
    v31[4] = v29;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v3[2] = v34;
    v8 = &selRef_isPhotoBooth;
    v7 = v39;
    v4 = v40;
    if (v39)
      goto LABEL_4;
LABEL_5:
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_32;
    if (v10 >= v37)
      return (uint64_t)v3;
    v11 = *(_QWORD *)(v36 + 8 * v10);
    v12 = v4 + 1;
    if (!v11)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v37)
        return (uint64_t)v3;
      v11 = *(_QWORD *)(v36 + 8 * v12);
      if (!v11)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v37)
          return (uint64_t)v3;
        v11 = *(_QWORD *)(v36 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_18:
    v39 = (v11 - 1) & v11;
    v40 = v12;
  }
  v13 = v4 + 4;
  if (v4 + 4 >= v37)
    return (uint64_t)v3;
  v11 = *(_QWORD *)(v36 + 8 * v13);
  if (v11)
  {
    v12 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v37)
      return (uint64_t)v3;
    v11 = *(_QWORD *)(v36 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1AD42256C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1AD4225A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AD63AF28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*sub_1AD4225DC())()
{
  return nullsub_1;
}

uint64_t sub_1AD4225EC()
{
  type metadata accessor for ServerCharacteristic();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ServerCharacteristic()
{
  uint64_t result;

  result = qword_1EECDC4A8;
  if (!qword_1EECDC4A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1AD422648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ServerCharacteristic() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_1AD422684())(_QWORD)
{
  type metadata accessor for ServerCharacteristic();
  return nullsub_1;
}

uint64_t sub_1AD4226AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ServerCharacteristic() + 24));
}

uint64_t sub_1AD4226CC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ServerCharacteristic();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1AD4226F8())(_QWORD)
{
  type metadata accessor for ServerCharacteristic();
  return nullsub_1;
}

uint64_t sub_1AD422720(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD42276C(&qword_1EECD44B8, (uint64_t)"\tFh8܂d8");
  result = sub_1AD42276C(&qword_1EECD44D8, (uint64_t)&unk_1AD652B90);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD42276C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ServerCharacteristic();
    result = MEMORY[0x1AF44BDF0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1AD4227AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AD63AF28();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD422840(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AD63AF28();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD422884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1AD63AF28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AD4228EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63AF28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1AD422964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1AD63AF28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1AD4229C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1AD63AF28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1AD422A38()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD422A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1AD63AF28();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1AD422AC0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AD422ACC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1AD63AF28();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1AD422B44()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AD63AF28();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD422BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ImageProvider.withImage<A>(enforcedEncoding:_:)(a1, a2, a3, a5, a4, a6);
}

uint64_t ImageProvider.withImage<A>(enforcedEncoding:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v12[8];
  _BYTE v13[192];
  _BYTE v14[192];

  sub_1AD0CFA10(a1, (uint64_t)v14);
  sub_1AD0CFA10((uint64_t)v14, (uint64_t)v13);
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a2;
  v12[6] = a3;
  return (*(uint64_t (**)(_BYTE *, void (*)(CGImageSource *@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a6 + 8))(v13, sub_1AD42310C, v12, a5, a4, a6);
}

uint64_t sub_1AD422C84@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return ImageProvider.withPixelBuffer<A>(_:)(a1, a2);
}

uint64_t ImageProvider.withPixelBuffer<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

CGImageSourceRef sub_1AD422CD4(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  CGImageSourceRef v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[192];
  _BYTE v15[192];

  sub_1AD00FD30((uint64_t)v15);
  sub_1AD0CFA10((uint64_t)v15, (uint64_t)v14);
  if (a2)
  {
    swift_retain();
    sub_1AD60B530();
    if (!v3)
    {
      a1 = sub_1AD4235D8((uint64_t)a1, a2, a3 & 1, (uint64_t)v14);
      if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      {
        sub_1AD63BB64();
        if (qword_1ED2E7540[0] != -1)
          swift_once();
        sub_1AD63B48C();
        goto LABEL_20;
      }
      v8 = sandbox_extension_release();
      if (v8 == sub_1AD63B5F4())
      {
        *(_QWORD *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 1;
      }
      else
      {
        v9 = MEMORY[0x1AF44A2D8]();
        sub_1AD39E828();
        v10 = (void *)swift_allocError();
        *(_DWORD *)v11 = v9;
        *(_BYTE *)(v11 + 4) = 0;
        swift_willThrow();

        if ((*(_BYTE *)(a2 + 40) & 1) != 0)
        {
          a1 = (void *)sub_1AD63BB64();
          if (qword_1ED2E7540[0] != -1)
            swift_once();
          sub_1AD63B48C();
        }
        else
        {
          a1 = (void *)sandbox_extension_release();
          if ((_DWORD)a1 != sub_1AD63B5F4())
          {
            a1 = (void *)MEMORY[0x1AF44A2D8]();
            sub_1AD39E828();
            swift_allocError();
            *(_DWORD *)v12 = (_DWORD)a1;
            *(_BYTE *)(v12 + 4) = 0;
            swift_willThrow();

            goto LABEL_20;
          }
          *(_QWORD *)(a2 + 32) = 0;
          *(_BYTE *)(a2 + 40) = 1;
        }
        swift_willThrow();
      }
    }
LABEL_20:
    swift_release();
    return (CGImageSourceRef)a1;
  }
  v7 = sub_1AD4235D8((uint64_t)a1, 0, a3 & 1, (uint64_t)v14);
  if (!v3)
    return v7;
  return (CGImageSourceRef)a1;
}

uint64_t ImageProvider.withImageSource<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[192];
  _BYTE v12[192];

  sub_1AD00FD30((uint64_t)v12);
  sub_1AD0CFA10((uint64_t)v12, (uint64_t)v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(v11, a1, a2, a4, a3, a5);
}

uint64_t ImageProvider.withImage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[192];
  _BYTE v12[192];

  sub_1AD00FD30((uint64_t)v12);
  sub_1AD0CFA10((uint64_t)v12, (uint64_t)v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(v11, a1, a2, a4, a3, a5);
}

void sub_1AD423080(CGImageSource *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  CGImageRef ImageAtIndex;
  CGImageRef v8;

  ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0);
  if (ImageAtIndex)
  {
    v8 = ImageAtIndex;
    a2();

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
  }
}

void sub_1AD42310C(CGImageSource *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1AD423080(a1, *(void (**)(void))(v2 + 40), *(_QWORD *)(v2 + 24), a2);
}

void sub_1AD42312C(uint64_t a1, void (*a2)(void))
{
  __CVBuffer *v2;
  CGImage *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  CGImageRef imageOut[2];

  imageOut[1] = *(CGImageRef *)MEMORY[0x1E0C80C00];
  imageOut[0] = 0;
  VTCreateCGImageFromCVPixelBuffer(v2, 0, imageOut);
  if (imageOut[0])
  {
    v4 = imageOut[0];
    a2();

  }
  else
  {
    if (qword_1ED2E32E8[0] != -1)
      swift_once();
    v5 = sub_1AD63B4B0();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2E3090);
    v6 = sub_1AD63B498();
    v7 = sub_1AD63BB7C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v8 = 67109120;
      sub_1AD63BC60();
      _os_log_impl(&dword_1ACFC8000, v6, v7, "Unable to create image from pixel buffer with error: %d", v8, 8u);
      MEMORY[0x1AF44BED4](v8, -1, -1);
    }

    sub_1AD00F938();
    swift_allocError();
    *(_WORD *)v9 = 1536;
    *(_QWORD *)(v9 + 8) = 0;
    swift_willThrow();

  }
}

uint64_t sub_1AD4232F0(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_1AD423318@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return sub_1AD42336C(a1, a2);
}

void sub_1AD42332C(uint64_t a1, void (*a2)(void))
{
  sub_1AD42312C(a1, a2);
}

uint64_t sub_1AD42334C(uint64_t (*a1)(uint64_t))
{
  return sub_1AD4232F0(a1);
}

uint64_t sub_1AD42336C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t sub_1AD4233A4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  return a2(v2);
}

uint64_t sub_1AD4233C8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return sub_1AD4233A4(a1, a2);
}

void Data.withImageSource<A>(enforcedEncoding:_:)(uint64_t a1@<X0>, void (*a2)(CGImageSourceRef)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  const __CFData *v7;
  const __CFDictionary *v8;
  CGImageSourceRef v9;
  _BYTE v10[200];

  sub_1AD0CFA10(a1, (uint64_t)v10);
  sub_1AD423E90((uint64_t)v10);
  v7 = (const __CFData *)sub_1AD63AFA0();
  type metadata accessor for CFString(0);
  sub_1AD32EFC0();
  v8 = (const __CFDictionary *)sub_1AD63B678();
  swift_bridgeObjectRelease();
  v9 = CGImageSourceCreateWithData(v7, v8);

  if (v9)
  {
    a2(v9);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
  }
}

void sub_1AD4234FC(uint64_t a1@<X0>, void (*a2)(CGImageSourceRef)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  Data.withImageSource<A>(enforcedEncoding:_:)(a1, a2, a3, a4);
}

_QWORD *sub_1AD423518@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _BYTE v6[192];
  _BYTE v7[192];

  sub_1AD0CFA10(a1, (uint64_t)v6);
  sub_1AD0CFA10(a1, (uint64_t)v7);
  v4 = sub_1AD63BC48();
  return sub_1AD4ECD3C((_QWORD *(*)(_QWORD *__return_ptr))sub_1AD423E20, v4, a2);
}

CGImageSourceRef sub_1AD4235D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const __CFURL *v17;
  void (*v18)(char *, uint64_t);
  const __CFDictionary *v19;
  CGImageSourceRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
  v7 = MEMORY[0x1E0C80A78](v6);
  v37 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v36 = (char *)&v30 - v9;
  v10 = sub_1AD63AF28();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v38 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - v14;
  sub_1AD423E90(a4);
  v39 = 47;
  v40 = 0xE100000000000000;
  v41 = a1;
  swift_bridgeObjectRetain_n();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7330);
  v34 = sub_1AD00F8EC();
  v35 = v16;
  sub_1AD63B720();
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD63AE8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = (const __CFURL *)sub_1AD63AE98();
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v15, v10);
  type metadata accessor for CFString(0);
  sub_1AD32EFC0();
  v19 = (const __CFDictionary *)sub_1AD63B678();
  swift_bridgeObjectRelease();
  v20 = CGImageSourceCreateWithURL(v17, v19);

  if (!v20)
  {
    v30 = v15;
    v31 = v18;
    v21 = (uint64_t)v36;
    v33 = sub_1AD63BB7C();
    if (qword_1ED2E7540[0] != -1)
      swift_once();
    v32 = qword_1ED2E7530;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E7340);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1AD648160;
    v39 = 47;
    v40 = 0xE100000000000000;
    v41 = a1;
    swift_bridgeObjectRetain_n();
    sub_1AD63B720();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AD63AE8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
    v23 = v37;
    sub_1AD009710(v21, v37);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v23, 1, v10);
    v25 = v38;
    if (v24 == 1)
    {
      sub_1AD0D0888(v23);
      v26 = 0xE300000000000000;
      v27 = 7104878;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v38, v23, v10);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v25, v10);
      v27 = sub_1AD63B7A4();
      v26 = v28;
      v31(v25, v10);
    }
    sub_1AD0D0888(v21);
    *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v22 + 64) = sub_1AD0469B8();
    *(_QWORD *)(v22 + 32) = v27;
    *(_QWORD *)(v22 + 40) = v26;
    sub_1AD63B48C();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

void sub_1AD4239C8(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  const __CFURL *v19;
  void (*v20)(char *, uint64_t);
  const __CFDictionary *v21;
  CGImageSourceRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v46 = a6;
  v43 = a5;
  v44 = a4;
  v45 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E1A40);
  v9 = MEMORY[0x1E0C80A78](v8);
  v42 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v41 = (char *)&v34 - v11;
  v12 = sub_1AD63AF28();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v39 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v34 - v16;
  sub_1AD423E90(a2);
  v47 = 47;
  v48 = 0xE100000000000000;
  v49 = a1;
  swift_bridgeObjectRetain_n();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7330);
  sub_1AD00F8EC();
  v40 = v18;
  sub_1AD63B720();
  sub_1AD63B810();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD63AE8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = (const __CFURL *)sub_1AD63AE98();
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v17, v12);
  type metadata accessor for CFString(0);
  sub_1AD32EFC0();
  v21 = (const __CFDictionary *)sub_1AD63B678();
  swift_bridgeObjectRelease();
  v22 = CGImageSourceCreateWithURL(v19, v21);

  if (v22)
  {
    ((void (*)(CGImageSourceRef))v45)(v22);

  }
  else
  {
    v35 = v17;
    v36 = v20;
    v37 = v12;
    v23 = (uint64_t)v41;
    v45 = v13;
    LODWORD(v44) = sub_1AD63BB7C();
    if (qword_1ED2E7540[0] != -1)
      swift_once();
    v38 = qword_1ED2E7530;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E7340);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1AD648160;
    v47 = 47;
    v48 = 0xE100000000000000;
    v49 = a1;
    swift_bridgeObjectRetain_n();
    sub_1AD63B720();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AD63AE8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v45;
    v26 = v37;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v23, 0, 1, v37);
    v27 = v42;
    sub_1AD009710(v23, v42);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
    {
      sub_1AD0D0888(v27);
      v28 = 0xE300000000000000;
      v29 = 7104878;
    }
    else
    {
      v30 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v39, v27, v26);
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v35, v30, v26);
      v29 = sub_1AD63B7A4();
      v28 = v31;
      v36(v30, v26);
    }
    v32 = v43;
    v33 = v46;
    sub_1AD0D0888(v23);
    *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v24 + 64) = sub_1AD0469B8();
    *(_QWORD *)(v24 + 32) = v29;
    *(_QWORD *)(v24 + 40) = v28;
    sub_1AD63B48C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v33, 1, 1, v32);
  }
}

_QWORD *sub_1AD423E0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1AD423518(a1, a2);
}

void sub_1AD423E20(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1AD4239C8(v1[3], v1[6], v1[7], v1[8], v1[2], a1);
}

uint64_t dispatch thunk of ImageProvider.withImageSource<A>(enforcedEncoding:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of ImageProvider.withImage<A>(enforcedEncoding:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of ImageProvider.withPixelBuffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

unint64_t sub_1AD423E90(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  void *v15;
  id v16;
  char v17;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  __int128 v22[12];
  __int128 v23[12];
  _BYTE v24[192];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2E10);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD648170;
  v3 = (void *)*MEMORY[0x1E0CBD288];
  *(_QWORD *)(v2 + 32) = *MEMORY[0x1E0CBD288];
  v4 = MEMORY[0x1E0DEAFA0];
  v5 = (void **)MEMORY[0x1E0CBD1D0];
  *(_BYTE *)(v2 + 40) = 1;
  v6 = *v5;
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 72) = v6;
  *(_QWORD *)(v2 + 104) = v4;
  *(_BYTE *)(v2 + 80) = 1;
  v7 = v3;
  v8 = v6;
  v9 = sub_1AD438F14(v2);
  sub_1AD0CFA10(a1, (uint64_t)v22);
  if (sub_1AD4240DC((uint64_t)v22) != 1)
  {
    sub_1AD00E830(v22, (uint64_t)v23);
    sub_1AD00E830(v23, (uint64_t)v24);
    v10 = sub_1AD00E92C((uint64_t)v24);
    if (v10 == 4 || v10 == 3)
    {
      v11 = (id)*MEMORY[0x1E0CBD2A8];
      goto LABEL_7;
    }
    if (!v10)
    {
      sub_1AD00E98C((uint64_t)v24);
      v11 = (id)*MEMORY[0x1E0CBD2A8];
LABEL_7:
      v12 = sub_1AD63B744();
      type metadata accessor for CFString(0);
      v21 = v13;
      *(_QWORD *)&v20 = v12;
      sub_1AD002F7C(&v20, v19);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1AD43F6B0(v19, v11, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      v15 = (void *)*MEMORY[0x1E0CBD1C8];
      v21 = v4;
      LOBYTE(v20) = 1;
      sub_1AD002F7C(&v20, v19);
      v16 = v15;
      v17 = swift_isUniquelyReferenced_nonNull_native();
      sub_1AD43F6B0(v19, v16, v17);

      swift_bridgeObjectRelease();
    }
  }
  return v9;
}

uint64_t sub_1AD4240DC(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 24) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 24) >> 1);
  else
    return 0;
}

uint64_t sub_1AD4240F4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return sub_1AD42336C(a1, a2);
}

uint64_t sub_1AD424108()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double sub_1AD424110()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1AD424118()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C616373;
  else
    return 0xD000000000000011;
}

uint64_t sub_1AD424154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD4252D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD424178()
{
  sub_1AD4242F0();
  return sub_1AD63C560();
}

uint64_t sub_1AD4241A0()
{
  sub_1AD4242F0();
  return sub_1AD63C56C();
}

uint64_t sub_1AD4241C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4B8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD4242F0();
  sub_1AD63C53C();
  v8[15] = 0;
  sub_1AD63C050();
  if (!v1)
  {
    v8[14] = 1;
    sub_1AD63C038();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AD4242F0()
{
  unint64_t result;

  result = qword_1EECDC4C0;
  if (!qword_1EECDC4C0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684748, &type metadata for WatchfacePreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC4C0);
  }
  return result;
}

uint64_t sub_1AD424334@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD4242F0();
  sub_1AD63C524();
  if (!v2)
  {
    v13[15] = 0;
    v9 = sub_1AD63BF3C();
    v13[14] = 1;
    sub_1AD63BF24();
    v11 = v10;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AD42448C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD424334(a1, a2);
}

uint64_t sub_1AD4244A0(_QWORD *a1)
{
  return sub_1AD4241C8(a1);
}

uint64_t sub_1AD4244B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(v1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v4;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1AD424540(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];
  uint64_t v12;

  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v11);
  sub_1AD009758(v1, &qword_1ED2E2680);
  v3 = v11[13];
  *(_OWORD *)(v1 + 192) = v11[12];
  *(_OWORD *)(v1 + 208) = v3;
  *(_OWORD *)(v1 + 224) = v11[14];
  *(_QWORD *)(v1 + 240) = v12;
  v4 = v11[9];
  *(_OWORD *)(v1 + 128) = v11[8];
  *(_OWORD *)(v1 + 144) = v4;
  v5 = v11[11];
  *(_OWORD *)(v1 + 160) = v11[10];
  *(_OWORD *)(v1 + 176) = v5;
  v6 = v11[5];
  *(_OWORD *)(v1 + 64) = v11[4];
  *(_OWORD *)(v1 + 80) = v6;
  v7 = v11[7];
  *(_OWORD *)(v1 + 96) = v11[6];
  *(_OWORD *)(v1 + 112) = v7;
  v8 = v11[1];
  *(_OWORD *)v1 = v11[0];
  *(_OWORD *)(v1 + 16) = v8;
  v9 = v11[3];
  *(_OWORD *)(v1 + 32) = v11[2];
  *(_OWORD *)(v1 + 48) = v9;
  return sub_1AD046A30(a1);
}

uint64_t sub_1AD4245CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v4 = (char *)malloc(0x1F8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 62) = v2;
  result = sub_1ACFF64C0(v2, (uint64_t)(v4 + 248), &qword_1ED2E2680);
  if (*((_QWORD *)v4 + 34))
  {
    v6 = *(_OWORD *)(v4 + 456);
    *((_OWORD *)v4 + 12) = *(_OWORD *)(v4 + 440);
    *((_OWORD *)v4 + 13) = v6;
    *((_OWORD *)v4 + 14) = *(_OWORD *)(v4 + 472);
    *((_QWORD *)v4 + 30) = *((_QWORD *)v4 + 61);
    v7 = *(_OWORD *)(v4 + 392);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v4 + 376);
    *((_OWORD *)v4 + 9) = v7;
    v8 = *(_OWORD *)(v4 + 424);
    *((_OWORD *)v4 + 10) = *(_OWORD *)(v4 + 408);
    *((_OWORD *)v4 + 11) = v8;
    v9 = *(_OWORD *)(v4 + 328);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v4 + 312);
    *((_OWORD *)v4 + 5) = v9;
    v10 = *(_OWORD *)(v4 + 360);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v4 + 344);
    *((_OWORD *)v4 + 7) = v10;
    v11 = *(_OWORD *)(v4 + 264);
    *(_OWORD *)v4 = *(_OWORD *)(v4 + 248);
    *((_OWORD *)v4 + 1) = v11;
    v12 = *(_OWORD *)(v4 + 296);
    result = (uint64_t)sub_1AD146614;
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 + 280);
    *((_OWORD *)v4 + 3) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD424680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1ACFF64C0(v1, a1, &qword_1ED2E2FE8);
}

uint64_t sub_1AD4246A4(uint64_t a1)
{
  void *v1;
  _BYTE __src[440];

  sub_1ACFF64C0(a1, (uint64_t)__src, &qword_1ED2E2FE8);
  sub_1AD009758((uint64_t)v1, &qword_1ED2E2FE8);
  memcpy(v1, __src, 0x1B8uLL);
  return sub_1AD009758(a1, &qword_1ED2E2FE8);
}

void (*sub_1AD42470C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x530uLL);
  *a1 = v3;
  v3[165] = v1;
  sub_1ACFF64C0(v1, (uint64_t)v3, &qword_1ED2E2FE8);
  return sub_1AD146874;
}

uint64_t sub_1AD424764()
{
  sub_1AD4248C0();
  return sub_1AD63C560();
}

uint64_t sub_1AD42478C()
{
  sub_1AD4248C0();
  return sub_1AD63C56C();
}

uint64_t sub_1AD4247B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4D0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD4248C0();
  sub_1AD63C53C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
  sub_1AD14794C(&qword_1ED2DACF0, (uint64_t)&unk_1AD67ACF4);
  sub_1AD63C068();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1AD4248C0()
{
  unint64_t result;

  result = qword_1EECDC4D8;
  if (!qword_1EECDC4D8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6846F8, &type metadata for WatchfacePreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC4D8);
  }
  return result;
}

_QWORD *sub_1AD424904@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[31];
  uint64_t v13;
  __int128 v14[13];
  uint64_t v15;

  v15 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4E0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v14[0]) = 0;
  sub_1AD00FD58(v14);
  sub_1AD00E830(v14, (uint64_t)&v13);
  memset(v12, 0, sizeof(v12));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD4248C0();
  sub_1AD63C524();
  if (!v2)
  {
    v8 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
    sub_1AD14794C(&qword_1ED2E26B0, (uint64_t)&unk_1AD67ACCC);
    sub_1AD63BF54();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1AD147990((uint64_t)&v11, (uint64_t)v12);
    sub_1AD424AD0((uint64_t)v12, v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1AD424AA4(v12);
}

_QWORD *sub_1AD424AA4(_QWORD *a1)
{
  destroy for MessagesAppBalloon.AppIconImage(a1);
  return a1;
}

uint64_t sub_1AD424AD0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MessagesAppBalloon.AppIconImage(a2, a1);
  return a2;
}

_QWORD *sub_1AD424B04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD424904(a1, a2);
}

uint64_t sub_1AD424B18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EECDC4D0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD4248C0();
  sub_1AD63C53C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E2FE8);
  sub_1AD14794C(&qword_1ED2DACF0, (uint64_t)&unk_1AD67ACF4);
  sub_1AD63C068();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

_QWORD *sub_1AD424C24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[15];
  uint64_t v13;
  _QWORD v14[31];
  __int128 v15[12];

  LOWORD(v15[0]) = 0;
  sub_1AD00FD58(v15);
  sub_1AD00E830(v15, a2 + 248);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_QWORD *)(a2 + 240) = 0;
  sub_1AD0CFB8C((uint64_t)a1, (uint64_t)v14);
  sub_1AD0CFB8C((uint64_t)v14, (uint64_t)v12);
  sub_1AD009758(a2, &qword_1ED2E2680);
  v4 = v12[13];
  *(_OWORD *)(a2 + 192) = v12[12];
  *(_OWORD *)(a2 + 208) = v4;
  *(_OWORD *)(a2 + 224) = v12[14];
  *(_QWORD *)(a2 + 240) = v13;
  v5 = v12[9];
  *(_OWORD *)(a2 + 128) = v12[8];
  *(_OWORD *)(a2 + 144) = v5;
  v6 = v12[11];
  *(_OWORD *)(a2 + 160) = v12[10];
  *(_OWORD *)(a2 + 176) = v6;
  v7 = v12[5];
  *(_OWORD *)(a2 + 64) = v12[4];
  *(_OWORD *)(a2 + 80) = v7;
  v8 = v12[7];
  *(_OWORD *)(a2 + 96) = v12[6];
  *(_OWORD *)(a2 + 112) = v8;
  v9 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v9;
  v10 = v12[3];
  *(_OWORD *)(a2 + 32) = v12[2];
  *(_OWORD *)(a2 + 48) = v10;
  sub_1AD046A30(v14);
  return sub_1AD046A30(a1);
}

uint64_t sub_1AD424D14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  return result;
}

unint64_t sub_1AD424D24()
{
  unint64_t result;

  result = qword_1EECDC4E8;
  if (!qword_1EECDC4E8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684464, &type metadata for WatchfacePreview.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDC4E8);
  }
  return result;
}

unint64_t sub_1AD424D6C()
{
  unint64_t result;

  result = qword_1EECDC4F0;
  if (!qword_1EECDC4F0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD68448C, &type metadata for WatchfacePreview.Constraints);
    atomic_store(result, (unint64_t *)&qword_1EECDC4F0);
  }
  return result;
}

unint64_t sub_1AD424DB0(uint64_t a1)
{
  unint64_t result;

  result = sub_1AD424DD4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD424DD4()
{
  unint64_t result;

  result = qword_1EECDC4F8;
  if (!qword_1EECDC4F8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6844E0, &type metadata for WatchfacePreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC4F8);
  }
  return result;
}

unint64_t sub_1AD424E18(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AD424E44();
  result = sub_1AD424E88();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD424E44()
{
  unint64_t result;

  result = qword_1EECDC500;
  if (!qword_1EECDC500)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6844FC, &type metadata for WatchfacePreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC500);
  }
  return result;
}

unint64_t sub_1AD424E88()
{
  unint64_t result;

  result = qword_1EECDC508;
  if (!qword_1EECDC508)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684524, &type metadata for WatchfacePreview);
    atomic_store(result, (unint64_t *)&qword_1EECDC508);
  }
  return result;
}

uint64_t sub_1AD424ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  result = sub_1ACFF64C0(a1, (uint64_t)&v11, &qword_1ED2E2680);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v4;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v5 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v5;
    v6 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v8;
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD424F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1ACFF64C0(a1, a2, &qword_1ED2E2FE8);
}

ValueMetadata *type metadata accessor for WatchfacePreview()
{
  return &type metadata for WatchfacePreview;
}

ValueMetadata *type metadata accessor for WatchfacePreview.Constraints()
{
  return &type metadata for WatchfacePreview.Constraints;
}

uint64_t storeEnumTagSinglePayload for WatchfacePreview.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AD424FF8 + 4 * byte_1AD684450[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AD425018 + 4 * byte_1AD684455[v4]))();
}

_BYTE *sub_1AD424FF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AD425018(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD425020(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD425028(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AD425030(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AD425038(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WatchfacePreview.CodingKeys()
{
  return &type metadata for WatchfacePreview.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for WatchfacePreview.Constraints.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AD4250A0 + 4 * byte_1AD68445F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AD4250D4 + 4 * byte_1AD68445A[v4]))();
}

uint64_t sub_1AD4250D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD4250DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD4250E4);
  return result;
}

uint64_t sub_1AD4250F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD4250F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AD4250FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD425104(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WatchfacePreview.Constraints.CodingKeys()
{
  return &type metadata for WatchfacePreview.Constraints.CodingKeys;
}

unint64_t sub_1AD425124()
{
  unint64_t result;

  result = qword_1EECDC510;
  if (!qword_1EECDC510)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684618, &type metadata for WatchfacePreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC510);
  }
  return result;
}

unint64_t sub_1AD42516C()
{
  unint64_t result;

  result = qword_1EECDC518;
  if (!qword_1EECDC518)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6846D0, &type metadata for WatchfacePreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC518);
  }
  return result;
}

unint64_t sub_1AD4251B4()
{
  unint64_t result;

  result = qword_1EECDC520;
  if (!qword_1EECDC520)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684640, &type metadata for WatchfacePreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC520);
  }
  return result;
}

unint64_t sub_1AD4251FC()
{
  unint64_t result;

  result = qword_1EECDC528;
  if (!qword_1EECDC528)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684668, &type metadata for WatchfacePreview.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC528);
  }
  return result;
}

unint64_t sub_1AD425244()
{
  unint64_t result;

  result = qword_1EECDC530;
  if (!qword_1EECDC530)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684588, &type metadata for WatchfacePreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC530);
  }
  return result;
}

unint64_t sub_1AD42528C()
{
  unint64_t result;

  result = qword_1EECDC538;
  if (!qword_1EECDC538)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD6845B0, &type metadata for WatchfacePreview.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EECDC538);
  }
  return result;
}

uint64_t sub_1AD4252D0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001AD69FE30 || (sub_1AD63C2A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1AD63C2A8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void LargeImage.Context.machPort.getter(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *LargeImage.Context.machPort.setter(_DWORD *result)
{
  _DWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*LargeImage.Context.machPort.modify())()
{
  return nullsub_1;
}

uint64_t LargeImage.Context.bufferSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LargeImage.Context.vmAddress.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LargeImage.Context.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LargeImage.Context(0);
  return sub_1AD0D3D2C(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
}

uint64_t type metadata accessor for LargeImage.Context(uint64_t a1)
{
  return sub_1AD011E7C(a1, qword_1ED2E30A8);
}

uint64_t sub_1AD42543C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AD42546C + 4 * byte_1AD684798[*v0]))(0x74726F506863616DLL, 0xE800000000000000);
}

uint64_t sub_1AD42546C()
{
  return 0x6953726566667562;
}

uint64_t sub_1AD425488()
{
  return 0x7365726464416D76;
}

uint64_t sub_1AD4254A4()
{
  return 0x617461646174656DLL;
}

uint64_t sub_1AD4254B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD42D8A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD4254DC()
{
  sub_1AD42570C();
  return sub_1AD63C560();
}

uint64_t sub_1AD425504()
{
  sub_1AD42570C();
  return sub_1AD63C56C();
}

uint64_t LargeImage.Context.encode(to:)(_QWORD *a1)
{
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[12];
  int v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2DA9B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD42570C();
  sub_1AD63C53C();
  v11 = *v3;
  v10[11] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7148);
  sub_1AD426054(&qword_1ED2DA8C8, &qword_1ED2E7148, (uint64_t)&protocol conformance descriptor for XPCCodable<A>);
  sub_1AD63C068();
  if (!v2)
  {
    v10[10] = 1;
    sub_1AD63C050();
    v10[9] = 2;
    sub_1AD63C05C();
    type metadata accessor for LargeImage.Context(0);
    v10[8] = 3;
    type metadata accessor for MediaMetadata();
    sub_1ACFF9724(&qword_1ED2E23A0, (uint64_t (*)(uint64_t))type metadata accessor for MediaMetadata, (uint64_t)&protocol conformance descriptor for MediaMetadata);
    sub_1AD63C068();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD42570C()
{
  unint64_t result;

  result = qword_1ED2E22C0;
  if (!qword_1ED2E22C0)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684A90, &type metadata for LargeImage.Context.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED2E22C0);
  }
  return result;
}

uint64_t LargeImage.Context.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  int v26;

  v17 = a2;
  v18 = type metadata accessor for MediaMetadata();
  MEMORY[0x1E0C80A78](v18);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2DA818);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LargeImage.Context(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD42570C();
  v19 = v7;
  v11 = v21;
  sub_1AD63C524();
  if (!v11)
  {
    v16 = v8;
    v21 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7148);
    v25 = 0;
    sub_1AD426054(&qword_1ED2DA6E8, &qword_1ED2E7148, (uint64_t)&protocol conformance descriptor for XPCCodable<A>);
    v12 = v19;
    v13 = v20;
    sub_1AD63BF54();
    *(_DWORD *)v10 = v26;
    v24 = 1;
    *((_QWORD *)v10 + 1) = sub_1AD63BF3C();
    v23 = 2;
    *((_QWORD *)v10 + 2) = sub_1AD63BF48();
    v22 = 3;
    sub_1ACFF9724(&qword_1ED2E23A8, (uint64_t (*)(uint64_t))type metadata accessor for MediaMetadata, (uint64_t)&protocol conformance descriptor for MediaMetadata);
    sub_1AD63BF54();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v13);
    v15 = v17;
    sub_1AD2A5214((uint64_t)v4, (uint64_t)&v10[*(int *)(v16 + 28)], (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
    sub_1AD2A5214((uint64_t)v10, v15, type metadata accessor for LargeImage.Context);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AD4259FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LargeImage.Context.init(from:)(a1, a2);
}

uint64_t sub_1AD425A10(_QWORD *a1)
{
  return LargeImage.Context.encode(to:)(a1);
}

uint64_t LargeImage.image.getter()
{
  return swift_retain();
}

uint64_t LargeImage.image.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*LargeImage.image.modify())()
{
  return nullsub_1;
}

uint64_t LargeImage.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LargeImage(0);
  return sub_1AD0D3D2C(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
}

uint64_t type metadata accessor for LargeImage(uint64_t a1)
{
  return sub_1AD011E7C(a1, (uint64_t *)&unk_1ED2E2300);
}

uint64_t LargeImage.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LargeImage(0) + 20);
  return sub_1AD425AE4(a1, v3);
}

uint64_t sub_1AD425AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MediaMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LargeImage.metadata.modify())(_QWORD)
{
  type metadata accessor for LargeImage(0);
  return nullsub_1;
}

uint64_t sub_1AD425B50()
{
  _BYTE *v0;

  if (*v0)
    return 0x617461646174656DLL;
  else
    return 0x6567616D69;
}

uint64_t sub_1AD425B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD42DA70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD425BAC()
{
  sub_1AD425D8C();
  return sub_1AD63C560();
}

uint64_t sub_1AD425BD4()
{
  sub_1AD425D8C();
  return sub_1AD63C56C();
}

uint64_t LargeImage.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2DA838);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD425D8C();
  sub_1AD63C53C();
  v11 = *v3;
  v10[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7150);
  sub_1AD426054(&qword_1ED2DA6F0, &qword_1ED2E7150, (uint64_t)&protocol conformance descriptor for XPCCodable<A>);
  sub_1AD63C068();
  if (!v2)
  {
    type metadata accessor for LargeImage(0);
    v10[6] = 1;
    type metadata accessor for MediaMetadata();
    sub_1ACFF9724(&qword_1ED2E23A0, (uint64_t (*)(uint64_t))type metadata accessor for MediaMetadata, (uint64_t)&protocol conformance descriptor for MediaMetadata);
    sub_1AD63C068();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AD425D8C()
{
  unint64_t result;

  result = qword_1ED2E22A8;
  if (!qword_1ED2E22A8)
  {
    result = MEMORY[0x1AF44BDF0](&unk_1AD684A40, &type metadata for LargeImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED2E22A8);
  }
  return result;
}

uint64_t LargeImage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;

  v16 = a2;
  v17 = type metadata accessor for MediaMetadata();
  MEMORY[0x1E0C80A78](v17);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2DA9A0);
  v5 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LargeImage(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AD425D8C();
  v18 = v7;
  v11 = (uint64_t)v20;
  sub_1AD63C524();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = a1;
  v12 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7150);
  v22 = 0;
  sub_1AD426054(&qword_1ED2DA8D0, &qword_1ED2E7150, (uint64_t)&protocol conformance descriptor for XPCCodable<A>);
  v13 = v18;
  v14 = v19;
  sub_1AD63BF54();
  *v12 = v23;
  v21 = 1;
  sub_1ACFF9724(&qword_1ED2E23A8, (uint64_t (*)(uint64_t))type metadata accessor for MediaMetadata, (uint64_t)&protocol conformance descriptor for MediaMetadata);
  sub_1AD63BF54();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v14);
  sub_1AD2A5214((uint64_t)v4, (uint64_t)v12 + *(int *)(v8 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
  sub_1AD0D3D2C((uint64_t)v12, v16, type metadata accessor for LargeImage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_1AD066230((uint64_t)v12, type metadata accessor for LargeImage);
}

uint64_t sub_1AD426054(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44BDF0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD426094@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LargeImage.init(from:)(a1, a2);
}

uint64_t sub_1AD4260A8(_QWORD *a1)
{
  return LargeImage.encode(to:)(a1);
}

uint64_t LargeImage.init(image:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = a1;
  v5 = type metadata accessor for LargeImage(0);
  return sub_1AD2A5214(a2, (uint64_t)a3 + *(int *)(v5 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
}

uint64_t LargeImage.Context.init(metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  vm_size_t v9;
  vm_map_t *v10;
  kern_return_t v11;
  kern_return_t v12;
  vm_address_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  memory_object_size_t size;
  mach_port_t object_handle;
  unint64_t v21;
  unint64_t v22;
  vm_address_t address[2];

  address[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    sub_1AD0DDA60();
    swift_allocError();
    *v4 = 0xD00000000000002ELL;
    v4[1] = 0x80000001AD6A7E70;
    v5 = 0xD000000000000031;
    v6 = "LargeImageContextualInfo was nil on MediaMetadata";
LABEL_3:
    v4[2] = v5;
    v4[3] = (unint64_t)(v6 - 32) | 0x8000000000000000;
    v4[4] = 0xD000000000000022;
    v4[5] = 0x80000001AD6A98C0;
LABEL_10:
    swift_willThrow();
    return sub_1AD066230(a1, (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
  }
  v8 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  address[0] = 0;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_20;
  v10 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  v11 = vm_allocate(*MEMORY[0x1E0C83DA0], address, v9, 3);
  if (v11)
  {
    v12 = v11;
    sub_1AD63BD38();
    swift_bridgeObjectRelease();
    v21 = 0xD000000000000024;
    v22 = 0x80000001AD6A98F0;
    LODWORD(size) = v12;
LABEL_9:
    sub_1AD63C0D4();
    sub_1AD63B810();
    swift_bridgeObjectRelease();
    sub_1AD63B810();
    v14 = v21;
    v15 = v22;
    sub_1AD0DDA60();
    swift_allocError();
    *v16 = 0xD00000000000002ELL;
    v16[1] = 0x80000001AD6A7E70;
    v16[2] = v14;
    v16[3] = v15;
    v16[4] = 0xD000000000000022;
    v16[5] = 0x80000001AD6A98C0;
    goto LABEL_10;
  }
  object_handle = 0;
  size = v9;
  v13 = address[0];
  if (mach_make_memory_entry_64(*v10, &size, address[0], 4194307, &object_handle, 0))
  {
    MEMORY[0x1AF44BFC4](*v10, v13, v9);
    v21 = 0;
    v22 = 0xE000000000000000;
    sub_1AD63BD38();
    swift_bridgeObjectRelease();
    v21 = 0xD000000000000022;
    v22 = 0x80000001AD6A9920;
    goto LABEL_9;
  }
  if (!v13)
  {
    MEMORY[0x1AF44BFC4](*v10, 0, v9);
    mach_port_deallocate(*v10, object_handle);
    sub_1AD0DDA60();
    swift_allocError();
    *v4 = 0xD00000000000002ELL;
    v4[1] = 0x80000001AD6A7E70;
    v5 = 0xD000000000000026;
    v6 = "Could not create shared memory pointer";
    goto LABEL_3;
  }
  if (v9 < 0x21)
  {
    MEMORY[0x1AF44BFC4](*v10, v13, v9);
    mach_port_deallocate(*v10, object_handle);
    sub_1AD0DDA60();
    swift_allocError();
    *v4 = 0xD00000000000002ELL;
    v4[1] = 0x80000001AD6A7E70;
    v5 = 0xD000000000000029;
    v6 = "Remaining capacity was <=0 from the start";
    goto LABEL_3;
  }
  if ((v8 & 0x8000000000000000) != 0 || HIDWORD(v8) || (v7 & 0x8000000000000000) != 0 || HIDWORD(v7))
  {
LABEL_20:
    while (1)
    {
      sub_1AD63BE1C();
      __break(1u);
    }
  }
  *(_QWORD *)v13 = 0xB1A57D002;
  *(_DWORD *)(v13 + 8) = v8;
  *(_DWORD *)(v13 + 12) = v7;
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v9 - 32;
  *(_DWORD *)a2 = object_handle;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v13;
  v18 = type metadata accessor for LargeImage.Context(0);
  return sub_1AD2A5214(a1, a2 + *(int *)(v18 + 28), (uint64_t (*)(_QWORD))type metadata accessor for MediaMetadata);
}

uint64_t sub_1AD426578()
{
  return sub_1ACFF9724(&qword_1ED2E22E0, type metadata accessor for LargeImage.Context, (uint64_t)&protocol conformance descriptor for LargeImage.Context);
}

uint64_t sub_1AD4265A4()
{
  return sub_1ACFF9724(&qword_1ED2E22D8, type metadata accessor for LargeImage.Context, (uint64_t)&protocol conformance descriptor for LargeImage.Context);
}

uint64_t sub_1AD4265D0(uint64_t a1)
{
  uint64_t result;

  result = sub_1ACFF9724(&qword_1ED2E22F8, type metadata accessor for LargeImage, (uint64_t)&protocol conformance descriptor for LargeImage);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AD42660C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1ACFF9724(&qword_1ED2E22F0, type metadata accessor for LargeImage, (uint64_t)&protocol conformance descriptor for LargeImage);
  result = sub_1ACFF9724(&qword_1ED2E22E8, type metadata accessor for LargeImage, (uint64_t)&protocol conformance descriptor for LargeImage);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_DWORD *sub_1AD426668@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1AD426674(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AD426680@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1AD42668C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LargeImage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int (*v184)(char *, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int (*__dst)(char *, uint64_t, uint64_t);
  char *__dsta;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v16 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = *(int *)(a3 + 20);
    v6 = (_OWORD *)((char *)a1 + v5);
    v7 = (char *)a2 + v5;
    *v6 = *(_OWORD *)((char *)a2 + v5);
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a2 + v5 + 9);
    v8 = (int *)type metadata accessor for MediaMetadata();
    v9 = v8[5];
    v10 = (char *)v6 + v9;
    v11 = &v7[v9];
    v12 = sub_1AD63B03C();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    __dst = v14;
    v238 = v13;
    v244 = v12;
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (char *)v6 + v17;
    v19 = &v7[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v8[7];
    v21 = (char *)v6 + v20;
    v22 = &v7[v20];
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = v8[8];
    v24 = (char *)v6 + v23;
    v25 = &v7[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v8[9];
    v27 = (char *)v6 + v26;
    v28 = &v7[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v8[10];
    v30 = (char *)v6 + v29;
    v31 = &v7[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v8[11];
    v33 = (_QWORD *)((char *)v6 + v32);
    v34 = &v7[v32];
    v35 = *((_QWORD *)v34 + 1);
    *v33 = *(_QWORD *)v34;
    v33[1] = v35;
    v36 = v8[12];
    v37 = (_QWORD *)((char *)v6 + v36);
    v38 = &v7[v36];
    v243 = *((_QWORD *)v38 + 1);
    *v37 = *(_QWORD *)v38;
    v37[1] = v243;
    v39 = v8[13];
    v40 = (_QWORD *)((char *)v6 + v39);
    v41 = &v7[v39];
    v242 = *((_QWORD *)v41 + 1);
    *v40 = *(_QWORD *)v41;
    v40[1] = v242;
    v42 = v8[14];
    v43 = (char *)v6 + v42;
    v44 = &v7[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    *((_BYTE *)v6 + v8[15]) = v7[v8[15]];
    v45 = v8[16];
    v46 = (char *)v6 + v45;
    v47 = &v7[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    v48 = v8[17];
    v49 = (char *)v6 + v48;
    v50 = &v7[v48];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    v49[8] = v50[8];
    v51 = v8[18];
    v52 = (char *)v6 + v51;
    v53 = &v7[v51];
    v52[8] = v53[8];
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v54 = v8[19];
    v55 = (char *)v6 + v54;
    v56 = &v7[v54];
    v55[8] = v56[8];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v57 = v8[20];
    v58 = (char *)v6 + v57;
    v59 = &v7[v57];
    v58[8] = v59[8];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v60 = v8[21];
    v61 = (char *)v6 + v60;
    v62 = &v7[v60];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = v62[8];
    v63 = v8[22];
    v64 = (char *)v6 + v63;
    v65 = &v7[v63];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v65[8];
    v66 = v8[23];
    v67 = (char *)v6 + v66;
    v68 = &v7[v66];
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[8] = v68[8];
    v69 = v8[24];
    v70 = (_QWORD *)((char *)v6 + v69);
    v71 = &v7[v69];
    v241 = *((_QWORD *)v71 + 1);
    *v70 = *(_QWORD *)v71;
    v70[1] = v241;
    v72 = v8[25];
    v73 = (_QWORD *)((char *)v6 + v72);
    v74 = &v7[v72];
    v240 = *((_QWORD *)v74 + 1);
    *v73 = *(_QWORD *)v74;
    v73[1] = v240;
    v75 = v8[26];
    v76 = (char *)v6 + v75;
    v77 = &v7[v75];
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v76[8] = v77[8];
    v78 = v8[27];
    v79 = (char *)v6 + v78;
    v80 = &v7[v78];
    v79[8] = v80[8];
    *(_QWORD *)v79 = *(_QWORD *)v80;
    v81 = v8[28];
    v82 = (char *)v6 + v81;
    v83 = &v7[v81];
    *(_QWORD *)v82 = *(_QWORD *)v83;
    v82[8] = v83[8];
    v84 = v8[29];
    v85 = (char *)v6 + v84;
    v86 = &v7[v84];
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v85[8] = v86[8];
    v87 = v8[30];
    v88 = (char *)v6 + v87;
    v89 = &v7[v87];
    *(_QWORD *)v88 = *(_QWORD *)v89;
    v88[8] = v89[8];
    *((_BYTE *)v6 + v8[31]) = v7[v8[31]];
    *((_BYTE *)v6 + v8[32]) = v7[v8[32]];
    v90 = v8[33];
    v91 = (_QWORD *)((char *)v6 + v90);
    v92 = &v7[v90];
    v239 = *((_QWORD *)v92 + 1);
    *v91 = *(_QWORD *)v92;
    v91[1] = v239;
    v93 = v8[34];
    v94 = (char *)v6 + v93;
    v95 = &v7[v93];
    *(_QWORD *)v94 = *(_QWORD *)v95;
    v94[8] = v95[8];
    v96 = v8[35];
    v97 = (char *)v6 + v96;
    v98 = &v7[v96];
    *(_QWORD *)v97 = *(_QWORD *)v98;
    v97[8] = v98[8];
    v99 = v8[36];
    v100 = (char *)v6 + v99;
    v101 = &v7[v99];
    v100[8] = v101[8];
    *(_QWORD *)v100 = *(_QWORD *)v101;
    v102 = v8[37];
    v103 = (char *)v6 + v102;
    v104 = &v7[v102];
    v103[8] = v104[8];
    *(_QWORD *)v103 = *(_QWORD *)v104;
    v105 = v8[38];
    v106 = (char *)v6 + v105;
    v107 = &v7[v105];
    *(_QWORD *)v106 = *(_QWORD *)v107;
    v106[8] = v107[8];
    v108 = v8[39];
    v109 = (char *)v6 + v108;
    v110 = &v7[v108];
    *(_QWORD *)v109 = *(_QWORD *)v110;
    v109[8] = v110[8];
    v111 = v8[40];
    v112 = (char *)v6 + v111;
    v113 = &v7[v111];
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v113[8];
    v114 = v8[41];
    v115 = (char *)v6 + v114;
    v116 = &v7[v114];
    *(_QWORD *)v115 = *(_QWORD *)v116;
    v115[8] = v116[8];
    v117 = v8[42];
    v118 = (_QWORD *)((char *)v6 + v117);
    v119 = &v7[v117];
    v120 = *((_QWORD *)v119 + 1);
    *v118 = *(_QWORD *)v119;
    v118[1] = v120;
    v121 = v8[43];
    v122 = (_QWORD *)((char *)v6 + v121);
    v123 = &v7[v121];
    v124 = *((_QWORD *)v123 + 1);
    *v122 = *(_QWORD *)v123;
    v122[1] = v124;
    v125 = v8[44];
    v126 = (_QWORD *)((char *)v6 + v125);
    v127 = &v7[v125];
    v128 = *((_QWORD *)v127 + 1);
    *v126 = *(_QWORD *)v127;
    v126[1] = v128;
    *((_BYTE *)v6 + v8[45]) = v7[v8[45]];
    v129 = v8[46];
    v130 = (char *)v6 + v129;
    v131 = &v7[v129];
    *(_QWORD *)v130 = *(_QWORD *)v131;
    v130[8] = v131[8];
    v132 = v8[47];
    v133 = (char *)v6 + v132;
    v134 = &v7[v132];
    *(_QWORD *)v133 = *(_QWORD *)v134;
    v133[8] = v134[8];
    v135 = v8[48];
    v136 = (_QWORD *)((char *)v6 + v135);
    v137 = &v7[v135];
    v138 = *((_QWORD *)v137 + 1);
    *v136 = *(_QWORD *)v137;
    v136[1] = v138;
    v139 = v8[49];
    v140 = (char *)v6 + v139;
    v141 = &v7[v139];
    v140[8] = v141[8];
    *(_QWORD *)v140 = *(_QWORD *)v141;
    v142 = v8[50];
    v143 = (char *)v6 + v142;
    v144 = &v7[v142];
    v143[8] = v144[8];
    *(_QWORD *)v143 = *(_QWORD *)v144;
    v145 = v8[51];
    v146 = (char *)v6 + v145;
    v147 = &v7[v145];
    v146[8] = v147[8];
    *(_QWORD *)v146 = *(_QWORD *)v147;
    v148 = v8[52];
    v149 = (char *)v6 + v148;
    v150 = &v7[v148];
    *(_QWORD *)v149 = *(_QWORD *)v150;
    v149[8] = v150[8];
    v151 = v8[53];
    v152 = (_QWORD *)((char *)v6 + v151);
    v153 = &v7[v151];
    v154 = *((_QWORD *)v153 + 1);
    *v152 = *(_QWORD *)v153;
    v152[1] = v154;
    v155 = v8[54];
    v156 = (char *)v6 + v155;
    v157 = &v7[v155];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dst(v157, 1, v244))
    {
      v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
      memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v156, v157, v244);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v156, 0, 1, v244);
    }
    v159 = v8[55];
    v160 = (char *)v6 + v159;
    v161 = &v7[v159];
    *(_QWORD *)v160 = *(_QWORD *)v161;
    v160[8] = v161[8];
    v162 = v8[56];
    v163 = (char *)v6 + v162;
    v164 = &v7[v162];
    v163[8] = v164[8];
    *(_QWORD *)v163 = *(_QWORD *)v164;
    v165 = v8[57];
    v166 = (_QWORD *)((char *)v6 + v165);
    v167 = &v7[v165];
    v168 = *((_QWORD *)v167 + 1);
    *v166 = *(_QWORD *)v167;
    v166[1] = v168;
    v169 = v8[58];
    v170 = (_QWORD *)((char *)v6 + v169);
    v171 = &v7[v169];
    v172 = *((_QWORD *)v171 + 1);
    *v170 = *(_QWORD *)v171;
    v170[1] = v172;
    v173 = v8[59];
    v174 = (char *)v6 + v173;
    v175 = &v7[v173];
    *(_QWORD *)v174 = *(_QWORD *)v175;
    v174[8] = v175[8];
    v176 = v8[60];
    v177 = (_QWORD *)((char *)v6 + v176);
    v178 = &v7[v176];
    v179 = *((_QWORD *)v178 + 1);
    *v177 = *(_QWORD *)v178;
    v177[1] = v179;
    *((_BYTE *)v6 + v8[61]) = v7[v8[61]];
    v180 = v8[62];
    __dsta = (char *)v6 + v180;
    v181 = &v7[v180];
    v182 = sub_1AD63B084();
    v183 = *(_QWORD *)(v182 - 8);
    v184 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v184(v181, 1, v182))
    {
      v185 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
      memcpy(__dsta, v181, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v183 + 16))(__dsta, v181, v182);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(__dsta, 0, 1, v182);
    }
    v186 = v8[63];
    v187 = (_QWORD *)((char *)v6 + v186);
    v188 = &v7[v186];
    v189 = *((_QWORD *)v188 + 1);
    *v187 = *(_QWORD *)v188;
    v187[1] = v189;
    *((_BYTE *)v6 + v8[64]) = v7[v8[64]];
    v190 = v8[65];
    v191 = (_QWORD *)((char *)v6 + v190);
    v192 = &v7[v190];
    v193 = *((_QWORD *)v192 + 1);
    *v191 = *(_QWORD *)v192;
    v191[1] = v193;
    v194 = v8[66];
    v195 = (char *)v6 + v194;
    v196 = &v7[v194];
    *(_QWORD *)v195 = *(_QWORD *)v196;
    v195[8] = v196[8];
    v197 = v8[67];
    v198 = (char *)v6 + v197;
    v199 = &v7[v197];
    *(_QWORD *)v198 = *(_QWORD *)v199;
    v198[8] = v199[8];
    v200 = v8[68];
    v201 = (char *)v6 + v200;
    v202 = &v7[v200];
    v201[8] = v202[8];
    *(_QWORD *)v201 = *(_QWORD *)v202;
    v203 = v8[69];
    v204 = (char *)v6 + v203;
    v205 = &v7[v203];
    *(_QWORD *)v204 = *(_QWORD *)v205;
    v204[8] = v205[8];
    *((_BYTE *)v6 + v8[70]) = v7[v8[70]];
    v206 = v8[71];
    v207 = (char *)v6 + v206;
    v208 = &v7[v206];
    *(_QWORD *)v207 = *(_QWORD *)v208;
    v207[8] = v208[8];
    v209 = v8[72];
    v210 = (char *)v6 + v209;
    v211 = &v7[v209];
    v210[8] = v211[8];
    *(_QWORD *)v210 = *(_QWORD *)v211;
    v212 = v8[73];
    v213 = (char *)v6 + v212;
    v214 = &v7[v212];
    *(_QWORD *)v213 = *(_QWORD *)v214;
    v213[8] = v214[8];
    v215 = v8[74];
    v216 = (char *)v6 + v215;
    v217 = &v7[v215];
    *(_QWORD *)v216 = *(_QWORD *)v217;
    v216[8] = v217[8];
    v218 = v8[75];
    v219 = (char *)v6 + v218;
    v220 = &v7[v218];
    *(_QWORD *)v219 = *(_QWORD *)v220;
    v219[8] = v220[8];
    *((_BYTE *)v6 + v8[76]) = v7[v8[76]];
    v221 = v8[77];
    v222 = (char *)v6 + v221;
    v223 = &v7[v221];
    *(_QWORD *)v222 = *(_QWORD *)v223;
    v222[8] = v223[8];
    *((_BYTE *)v6 + v8[78]) = v7[v8[78]];
    *((_BYTE *)v6 + v8[79]) = v7[v8[79]];
    *((_BYTE *)v6 + v8[80]) = v7[v8[80]];
    v224 = v8[81];
    v225 = (char *)v6 + v224;
    v226 = &v7[v224];
    *(_QWORD *)v225 = *(_QWORD *)v226;
    v225[8] = v226[8];
    *((_BYTE *)v6 + v8[82]) = v7[v8[82]];
    *((_BYTE *)v6 + v8[83]) = v7[v8[83]];
    v227 = v8[84];
    v228 = (char *)v6 + v227;
    v229 = &v7[v227];
    *(_QWORD *)v228 = *(_QWORD *)v229;
    v228[8] = v229[8];
    *((_BYTE *)v6 + v8[85]) = v7[v8[85]];
    *((_BYTE *)v6 + v8[86]) = v7[v8[86]];
    *((_BYTE *)v6 + v8[87]) = v7[v8[87]];
    *((_BYTE *)v6 + v8[88]) = v7[v8[88]];
    v230 = v8[89];
    v231 = (char *)v6 + v230;
    v232 = &v7[v230];
    *(_QWORD *)v231 = *(_QWORD *)v232;
    v231[8] = v232[8];
    v233 = v8[90];
    v234 = (_QWORD *)((char *)v6 + v233);
    v235 = &v7[v233];
    v236 = *((_QWORD *)v235 + 1);
    *v234 = *(_QWORD *)v235;
    v234[1] = v236;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t destroy for LargeImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = (int *)type metadata accessor for MediaMetadata();
  v6 = v4 + v5[5];
  v7 = sub_1AD63B03C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v4 + v5[54];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v4 + v5[62];
  v12 = sub_1AD63B084();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LargeImage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int (*v181)(char *, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  char *v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int (*__dst)(char *, uint64_t, uint64_t);
  char *__dsta;

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = (_OWORD *)((char *)a1 + v3);
  v5 = (char *)a2 + v3;
  *v4 = *(_OWORD *)((char *)a2 + v3);
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a2 + v3 + 9);
  v6 = (int *)type metadata accessor for MediaMetadata();
  v7 = v6[5];
  v8 = (char *)v4 + v7;
  v9 = &v5[v7];
  v10 = sub_1AD63B03C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  __dst = v12;
  v235 = v11;
  v241 = v10;
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)v4 + v14;
  v16 = &v5[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = v6[7];
  v18 = (char *)v4 + v17;
  v19 = &v5[v17];
  v18[8] = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = v6[8];
  v21 = (char *)v4 + v20;
  v22 = &v5[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v6[9];
  v24 = (char *)v4 + v23;
  v25 = &v5[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = v6[10];
  v27 = (char *)v4 + v26;
  v28 = &v5[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = v6[11];
  v30 = (_QWORD *)((char *)v4 + v29);
  v31 = &v5[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  v33 = v6[12];
  v34 = (_QWORD *)((char *)v4 + v33);
  v35 = &v5[v33];
  v240 = *((_QWORD *)v35 + 1);
  *v34 = *(_QWORD *)v35;
  v34[1] = v240;
  v36 = v6[13];
  v37 = (_QWORD *)((char *)v4 + v36);
  v38 = &v5[v36];
  v239 = *((_QWORD *)v38 + 1);
  *v37 = *(_QWORD *)v38;
  v37[1] = v239;
  v39 = v6[14];
  v40 = (char *)v4 + v39;
  v41 = &v5[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  *((_BYTE *)v4 + v6[15]) = v5[v6[15]];
  v42 = v6[16];
  v43 = (char *)v4 + v42;
  v44 = &v5[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  v45 = v6[17];
  v46 = (char *)v4 + v45;
  v47 = &v5[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  v48 = v6[18];
  v49 = (char *)v4 + v48;
  v50 = &v5[v48];
  v49[8] = v50[8];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = v6[19];
  v52 = (char *)v4 + v51;
  v53 = &v5[v51];
  v52[8] = v53[8];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v54 = v6[20];
  v55 = (char *)v4 + v54;
  v56 = &v5[v54];
  v55[8] = v56[8];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v57 = v6[21];
  v58 = (char *)v4 + v57;
  v59 = &v5[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v6[22];
  v61 = (char *)v4 + v60;
  v62 = &v5[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
  v63 = v6[23];
  v64 = (char *)v4 + v63;
  v65 = &v5[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v6[24];
  v67 = (_QWORD *)((char *)v4 + v66);
  v68 = &v5[v66];
  v238 = *((_QWORD *)v68 + 1);
  *v67 = *(_QWORD *)v68;
  v67[1] = v238;
  v69 = v6[25];
  v70 = (_QWORD *)((char *)v4 + v69);
  v71 = &v5[v69];
  v237 = *((_QWORD *)v71 + 1);
  *v70 = *(_QWORD *)v71;
  v70[1] = v237;
  v72 = v6[26];
  v73 = (char *)v4 + v72;
  v74 = &v5[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v6[27];
  v76 = (char *)v4 + v75;
  v77 = &v5[v75];
  v76[8] = v77[8];
  *(_QWORD *)v76 = *(_QWORD *)v77;
  v78 = v6[28];
  v79 = (char *)v4 + v78;
  v80 = &v5[v78];
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v79[8] = v80[8];
  v81 = v6[29];
  v82 = (char *)v4 + v81;
  v83 = &v5[v81];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v82[8] = v83[8];
  v84 = v6[30];
  v85 = (char *)v4 + v84;
  v86 = &v5[v84];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v85[8] = v86[8];
  *((_BYTE *)v4 + v6[31]) = v5[v6[31]];
  *((_BYTE *)v4 + v6[32]) = v5[v6[32]];
  v87 = v6[33];
  v88 = (_QWORD *)((char *)v4 + v87);
  v89 = &v5[v87];
  v236 = *((_QWORD *)v89 + 1);
  *v88 = *(_QWORD *)v89;
  v88[1] = v236;
  v90 = v6[34];
  v91 = (char *)v4 + v90;
  v92 = &v5[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v92[8];
  v93 = v6[35];
  v94 = (char *)v4 + v93;
  v95 = &v5[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v94[8] = v95[8];
  v96 = v6[36];
  v97 = (char *)v4 + v96;
  v98 = &v5[v96];
  v97[8] = v98[8];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v99 = v6[37];
  v100 = (char *)v4 + v99;
  v101 = &v5[v99];
  v100[8] = v101[8];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = v6[38];
  v103 = (char *)v4 + v102;
  v104 = &v5[v102];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  v103[8] = v104[8];
  v105 = v6[39];
  v106 = (char *)v4 + v105;
  v107 = &v5[v105];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v106[8] = v107[8];
  v108 = v6[40];
  v109 = (char *)v4 + v108;
  v110 = &v5[v108];
  *(_QWORD *)v109 = *(_QWORD *)v110;
  v109[8] = v110[8];
  v111 = v6[41];
  v112 = (char *)v4 + v111;
  v113 = &v5[v111];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v112[8] = v113[8];
  v114 = v6[42];
  v115 = (_QWORD *)((char *)v4 + v114);
  v116 = &v5[v114];
  v117 = *((_QWORD *)v116 + 1);
  *v115 = *(_QWORD *)v116;
  v115[1] = v117;
  v118 = v6[43];
  v119 = (_QWORD *)((char *)v4 + v118);
  v120 = &v5[v118];
  v121 = *((_QWORD *)v120 + 1);
  *v119 = *(_QWORD *)v120;
  v119[1] = v121;
  v122 = v6[44];
  v123 = (_QWORD *)((char *)v4 + v122);
  v124 = &v5[v122];
  v125 = *((_QWORD *)v124 + 1);
  *v123 = *(_QWORD *)v124;
  v123[1] = v125;
  *((_BYTE *)v4 + v6[45]) = v5[v6[45]];
  v126 = v6[46];
  v127 = (char *)v4 + v126;
  v128 = &v5[v126];
  *(_QWORD *)v127 = *(_QWORD *)v128;
  v127[8] = v128[8];
  v129 = v6[47];
  v130 = (char *)v4 + v129;
  v131 = &v5[v129];
  *(_QWORD *)v130 = *(_QWORD *)v131;
  v130[8] = v131[8];
  v132 = v6[48];
  v133 = (_QWORD *)((char *)v4 + v132);
  v134 = &v5[v132];
  v135 = *((_QWORD *)v134 + 1);
  *v133 = *(_QWORD *)v134;
  v133[1] = v135;
  v136 = v6[49];
  v137 = (char *)v4 + v136;
  v138 = &v5[v136];
  v137[8] = v138[8];
  *(_QWORD *)v137 = *(_QWORD *)v138;
  v139 = v6[50];
  v140 = (char *)v4 + v139;
  v141 = &v5[v139];
  v140[8] = v141[8];
  *(_QWORD *)v140 = *(_QWORD *)v141;
  v142 = v6[51];
  v143 = (char *)v4 + v142;
  v144 = &v5[v142];
  v143[8] = v144[8];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  v145 = v6[52];
  v146 = (char *)v4 + v145;
  v147 = &v5[v145];
  *(_QWORD *)v146 = *(_QWORD *)v147;
  v146[8] = v147[8];
  v148 = v6[53];
  v149 = (_QWORD *)((char *)v4 + v148);
  v150 = &v5[v148];
  v151 = *((_QWORD *)v150 + 1);
  *v149 = *(_QWORD *)v150;
  v149[1] = v151;
  v152 = v6[54];
  v153 = (char *)v4 + v152;
  v154 = &v5[v152];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dst(v154, 1, v241))
  {
    v155 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v153, v154, v241);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v235 + 56))(v153, 0, 1, v241);
  }
  v156 = v6[55];
  v157 = (char *)v4 + v156;
  v158 = &v5[v156];
  *(_QWORD *)v157 = *(_QWORD *)v158;
  v157[8] = v158[8];
  v159 = v6[56];
  v160 = (char *)v4 + v159;
  v161 = &v5[v159];
  v160[8] = v161[8];
  *(_QWORD *)v160 = *(_QWORD *)v161;
  v162 = v6[57];
  v163 = (_QWORD *)((char *)v4 + v162);
  v164 = &v5[v162];
  v165 = *((_QWORD *)v164 + 1);
  *v163 = *(_QWORD *)v164;
  v163[1] = v165;
  v166 = v6[58];
  v167 = (_QWORD *)((char *)v4 + v166);
  v168 = &v5[v166];
  v169 = *((_QWORD *)v168 + 1);
  *v167 = *(_QWORD *)v168;
  v167[1] = v169;
  v170 = v6[59];
  v171 = (char *)v4 + v170;
  v172 = &v5[v170];
  *(_QWORD *)v171 = *(_QWORD *)v172;
  v171[8] = v172[8];
  v173 = v6[60];
  v174 = (_QWORD *)((char *)v4 + v173);
  v175 = &v5[v173];
  v176 = *((_QWORD *)v175 + 1);
  *v174 = *(_QWORD *)v175;
  v174[1] = v176;
  *((_BYTE *)v4 + v6[61]) = v5[v6[61]];
  v177 = v6[62];
  __dsta = (char *)v4 + v177;
  v178 = &v5[v177];
  v179 = sub_1AD63B084();
  v180 = *(_QWORD *)(v179 - 8);
  v181 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v181(v178, 1, v179))
  {
    v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(__dsta, v178, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v180 + 16))(__dsta, v178, v179);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(__dsta, 0, 1, v179);
  }
  v183 = v6[63];
  v184 = (_QWORD *)((char *)v4 + v183);
  v185 = &v5[v183];
  v186 = *((_QWORD *)v185 + 1);
  *v184 = *(_QWORD *)v185;
  v184[1] = v186;
  *((_BYTE *)v4 + v6[64]) = v5[v6[64]];
  v187 = v6[65];
  v188 = (_QWORD *)((char *)v4 + v187);
  v189 = &v5[v187];
  v190 = *((_QWORD *)v189 + 1);
  *v188 = *(_QWORD *)v189;
  v188[1] = v190;
  v191 = v6[66];
  v192 = (char *)v4 + v191;
  v193 = &v5[v191];
  *(_QWORD *)v192 = *(_QWORD *)v193;
  v192[8] = v193[8];
  v194 = v6[67];
  v195 = (char *)v4 + v194;
  v196 = &v5[v194];
  *(_QWORD *)v195 = *(_QWORD *)v196;
  v195[8] = v196[8];
  v197 = v6[68];
  v198 = (char *)v4 + v197;
  v199 = &v5[v197];
  v198[8] = v199[8];
  *(_QWORD *)v198 = *(_QWORD *)v199;
  v200 = v6[69];
  v201 = (char *)v4 + v200;
  v202 = &v5[v200];
  *(_QWORD *)v201 = *(_QWORD *)v202;
  v201[8] = v202[8];
  *((_BYTE *)v4 + v6[70]) = v5[v6[70]];
  v203 = v6[71];
  v204 = (char *)v4 + v203;
  v205 = &v5[v203];
  *(_QWORD *)v204 = *(_QWORD *)v205;
  v204[8] = v205[8];
  v206 = v6[72];
  v207 = (char *)v4 + v206;
  v208 = &v5[v206];
  v207[8] = v208[8];
  *(_QWORD *)v207 = *(_QWORD *)v208;
  v209 = v6[73];
  v210 = (char *)v4 + v209;
  v211 = &v5[v209];
  *(_QWORD *)v210 = *(_QWORD *)v211;
  v210[8] = v211[8];
  v212 = v6[74];
  v213 = (char *)v4 + v212;
  v214 = &v5[v212];
  *(_QWORD *)v213 = *(_QWORD *)v214;
  v213[8] = v214[8];
  v215 = v6[75];
  v216 = (char *)v4 + v215;
  v217 = &v5[v215];
  *(_QWORD *)v216 = *(_QWORD *)v217;
  v216[8] = v217[8];
  *((_BYTE *)v4 + v6[76]) = v5[v6[76]];
  v218 = v6[77];
  v219 = (char *)v4 + v218;
  v220 = &v5[v218];
  *(_QWORD *)v219 = *(_QWORD *)v220;
  v219[8] = v220[8];
  *((_BYTE *)v4 + v6[78]) = v5[v6[78]];
  *((_BYTE *)v4 + v6[79]) = v5[v6[79]];
  *((_BYTE *)v4 + v6[80]) = v5[v6[80]];
  v221 = v6[81];
  v222 = (char *)v4 + v221;
  v223 = &v5[v221];
  *(_QWORD *)v222 = *(_QWORD *)v223;
  v222[8] = v223[8];
  *((_BYTE *)v4 + v6[82]) = v5[v6[82]];
  *((_BYTE *)v4 + v6[83]) = v5[v6[83]];
  v224 = v6[84];
  v225 = (char *)v4 + v224;
  v226 = &v5[v224];
  *(_QWORD *)v225 = *(_QWORD *)v226;
  v225[8] = v226[8];
  *((_BYTE *)v4 + v6[85]) = v5[v6[85]];
  *((_BYTE *)v4 + v6[86]) = v5[v6[86]];
  *((_BYTE *)v4 + v6[87]) = v5[v6[87]];
  *((_BYTE *)v4 + v6[88]) = v5[v6[88]];
  v227 = v6[89];
  v228 = (char *)v4 + v227;
  v229 = &v5[v227];
  *(_QWORD *)v228 = *(_QWORD *)v229;
  v228[8] = v229[8];
  v230 = v6[90];
  v231 = (_QWORD *)((char *)v4 + v230);
  v232 = &v5[v230];
  v233 = *((_QWORD *)v232 + 1);
  *v231 = *(_QWORD *)v232;
  v231[1] = v233;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LargeImage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(char *, uint64_t, uint64_t);
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  char *v281;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = *(_OWORD *)((char *)a2 + v6);
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + v6 + 9);
  *v7 = v9;
  v10 = (int *)type metadata accessor for MediaMetadata();
  v11 = v10[5];
  v12 = (char *)v7 + v11;
  v13 = &v8[v11];
  v14 = sub_1AD63B03C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = v10[6];
  v21 = (char *)v7 + v20;
  v22 = &v8[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = v10[7];
  v25 = (char *)v7 + v24;
  v26 = &v8[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = v10[8];
  v29 = (char *)v7 + v28;
  v30 = &v8[v28];
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  v32 = v10[9];
  v33 = (char *)v7 + v32;
  v34 = &v8[v32];
  v35 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *(_QWORD *)v33 = v35;
  v36 = v10[10];
  v37 = (char *)v7 + v36;
  v38 = &v8[v36];
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  v40 = v10[11];
  v41 = (_QWORD *)((char *)v7 + v40);
  v42 = &v8[v40];
  *v41 = *(_QWORD *)v42;
  v41[1] = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = v10[12];
  v44 = (_QWORD *)((char *)v7 + v43);
  v45 = &v8[v43];
  *v44 = *(_QWORD *)v45;
  v44[1] = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = v10[13];
  v47 = (_QWORD *)((char *)v7 + v46);
  v48 = &v8[v46];
  *v47 = *(_QWORD *)v48;
  v47[1] = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = v10[14];
  v50 = (char *)v7 + v49;
  v51 = &v8[v49];
  v52 = *(_QWORD *)v51;
  v50[8] = v51[8];
  *(_QWORD *)v50 = v52;
  *((_BYTE *)v7 + v10[15]) = v8[v10[15]];
  v53 = v10[16];
  v54 = (char *)v7 + v53;
  v55 = &v8[v53];
  v56 = *(_QWORD *)v55;
  v54[8] = v55[8];
  *(_QWORD *)v54 = v56;
  v57 = v10[17];
  v58 = (char *)v7 + v57;
  v59 = &v8[v57];
  v60 = *(_QWORD *)v59;
  v58[8] = v59[8];
  *(_QWORD *)v58 = v60;
  v61 = v10[18];
  v62 = (char *)v7 + v61;
  v63 = &v8[v61];
  v64 = *(_QWORD *)v63;
  v62[8] = v63[8];
  *(_QWORD *)v62 = v64;
  v65 = v10[19];
  v66 = (char *)v7 + v65;
  v67 = &v8[v65];
  v68 = *(_QWORD *)v67;
  v66[8] = v67[8];
  *(_QWORD *)v66 = v68;
  v69 = v10[20];
  v70 = (char *)v7 + v69;
  v71 = &v8[v69];
  v72 = *(_QWORD *)v71;
  v70[8] = v71[8];
  *(_QWORD *)v70 = v72;
  v73 = v10[21];
  v74 = (char *)v7 + v73;
  v75 = &v8[v73];
  v76 = *(_QWORD *)v75;
  v74[8] = v75[8];
  *(_QWORD *)v74 = v76;
  v77 = v10[22];
  v78 = (char *)v7 + v77;
  v79 = &v8[v77];
  v80 = *(_QWORD *)v79;
  v78[8] = v79[8];
  *(_QWORD *)v78 = v80;
  v81 = v10[23];
  v82 = (char *)v7 + v81;
  v83 = &v8[v81];
  v84 = *(_QWORD *)v83;
  v82[8] = v83[8];
  *(_QWORD *)v82 = v84;
  v85 = v10[24];
  v86 = (_QWORD *)((char *)v7 + v85);
  v87 = &v8[v85];
  *v86 = *(_QWORD *)v87;
  v86[1] = *((_QWORD *)v87 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = v10[25];
  v89 = (_QWORD *)((char *)v7 + v88);
  v90 = &v8[v88];
  *v89 = *(_QWORD *)v90;
  v89[1] = *((_QWORD *)v90 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91 = v10[26];
  v92 = (char *)v7 + v91;
  v93 = &v8[v91];
  v94 = *(_QWORD *)v93;
  v92[8] = v93[8];
  *(_QWORD *)v92 = v94;
  v95 = v10[27];
  v96 = (char *)v7 + v95;
  v97 = &v8[v95];
  v98 = *(_QWORD *)v97;
  v96[8] = v97[8];
  *(_QWORD *)v96 = v98;
  v99 = v10[28];
  v100 = (char *)v7 + v99;
  v101 = &v8[v99];
  v102 = *(_QWORD *)v101;
  v100[8] = v101[8];
  *(_QWORD *)v100 = v102;
  v103 = v10[29];
  v104 = (char *)v7 + v103;
  v105 = &v8[v103];
  v106 = *(_QWORD *)v105;
  v104[8] = v105[8];
  *(_QWORD *)v104 = v106;
  v107 = v10[30];
  v108 = (char *)v7 + v107;
  v109 = &v8[v107];
  v110 = *(_QWORD *)v109;
  v108[8] = v109[8];
  *(_QWORD *)v108 = v110;
  *((_BYTE *)v7 + v10[31]) = v8[v10[31]];
  *((_BYTE *)v7 + v10[32]) = v8[v10[32]];
  v111 = v10[33];
  v112 = (_QWORD *)((char *)v7 + v111);
  v113 = &v8[v111];
  *v112 = *(_QWORD *)v113;
  v112[1] = *((_QWORD *)v113 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114 = v10[34];
  v115 = (char *)v7 + v114;
  v116 = &v8[v114];
  v117 = *(_QWORD *)v116;
  v115[8] = v116[8];
  *(_QWORD *)v115 = v117;
  v118 = v10[35];
  v119 = (char *)v7 + v118;
  v120 = &v8[v118];
  v121 = *(_QWORD *)v120;
  v119[8] = v120[8];
  *(_QWORD *)v119 = v121;
  v122 = v10[36];
  v123 = (char *)v7 + v122;
  v124 = &v8[v122];
  v125 = *(_QWORD *)v124;
  v123[8] = v124[8];
  *(_QWORD *)v123 = v125;
  v126 = v10[37];
  v127 = (char *)v7 + v126;
  v128 = &v8[v126];
  v129 = *(_QWORD *)v128;
  v127[8] = v128[8];
  *(_QWORD *)v127 = v129;
  v130 = v10[38];
  v131 = (char *)v7 + v130;
  v132 = &v8[v130];
  v133 = *(_QWORD *)v132;
  v131[8] = v132[8];
  *(_QWORD *)v131 = v133;
  v134 = v10[39];
  v135 = (char *)v7 + v134;
  v136 = &v8[v134];
  v137 = *(_QWORD *)v136;
  v135[8] = v136[8];
  *(_QWORD *)v135 = v137;
  v138 = v10[40];
  v139 = (char *)v7 + v138;
  v140 = &v8[v138];
  v141 = *(_QWORD *)v140;
  v139[8] = v140[8];
  *(_QWORD *)v139 = v141;
  v142 = v10[41];
  v143 = (char *)v7 + v142;
  v144 = &v8[v142];
  v145 = *(_QWORD *)v144;
  v143[8] = v144[8];
  *(_QWORD *)v143 = v145;
  v146 = v10[42];
  v147 = (_QWORD *)((char *)v7 + v146);
  v148 = &v8[v146];
  *v147 = *(_QWORD *)v148;
  v147[1] = *((_QWORD *)v148 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v149 = v10[43];
  v150 = (_QWORD *)((char *)v7 + v149);
  v151 = &v8[v149];
  *v150 = *(_QWORD *)v151;
  v150[1] = *((_QWORD *)v151 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v152 = v10[44];
  v153 = (_QWORD *)((char *)v7 + v152);
  v154 = &v8[v152];
  *v153 = *(_QWORD *)v154;
  v153[1] = *((_QWORD *)v154 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v10[45]) = v8[v10[45]];
  v155 = v10[46];
  v156 = (char *)v7 + v155;
  v157 = &v8[v155];
  v158 = v157[8];
  *(_QWORD *)v156 = *(_QWORD *)v157;
  v156[8] = v158;
  v159 = v10[47];
  v160 = (char *)v7 + v159;
  v161 = &v8[v159];
  v162 = *(_QWORD *)v161;
  v160[8] = v161[8];
  *(_QWORD *)v160 = v162;
  v163 = v10[48];
  v164 = (_QWORD *)((char *)v7 + v163);
  v165 = &v8[v163];
  *v164 = *(_QWORD *)v165;
  v164[1] = *((_QWORD *)v165 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v166 = v10[49];
  v167 = (char *)v7 + v166;
  v168 = &v8[v166];
  v169 = *(_QWORD *)v168;
  v167[8] = v168[8];
  *(_QWORD *)v167 = v169;
  v170 = v10[50];
  v171 = (char *)v7 + v170;
  v172 = &v8[v170];
  v173 = *(_QWORD *)v172;
  v171[8] = v172[8];
  *(_QWORD *)v171 = v173;
  v174 = v10[51];
  v175 = (char *)v7 + v174;
  v176 = &v8[v174];
  v177 = *(_QWORD *)v176;
  v175[8] = v176[8];
  *(_QWORD *)v175 = v177;
  v178 = v10[52];
  v179 = (char *)v7 + v178;
  v180 = &v8[v178];
  v181 = *(_QWORD *)v180;
  v179[8] = v180[8];
  *(_QWORD *)v179 = v181;
  v182 = v10[53];
  v183 = (_QWORD *)((char *)v7 + v182);
  v184 = &v8[v182];
  *v183 = *(_QWORD *)v184;
  v183[1] = *((_QWORD *)v184 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v185 = v10[54];
  v186 = (char *)v7 + v185;
  v187 = &v8[v185];
  v188 = v16((char *)v7 + v185, 1, v14);
  v189 = v16(v187, 1, v14);
  if (v188)
  {
    if (!v189)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v186, v187, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v186, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v189)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v186, v14);
LABEL_12:
    v190 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v186, v187, v14);
LABEL_13:
  v191 = v10[55];
  v192 = (char *)v7 + v191;
  v193 = &v8[v191];
  v194 = *(_QWORD *)v193;
  v192[8] = v193[8];
  *(_QWORD *)v192 = v194;
  v195 = v10[56];
  v196 = (char *)v7 + v195;
  v197 = &v8[v195];
  v198 = *(_QWORD *)v197;
  v196[8] = v197[8];
  *(_QWORD *)v196 = v198;
  v199 = v10[57];
  v200 = (_QWORD *)((char *)v7 + v199);
  v201 = &v8[v199];
  *v200 = *(_QWORD *)v201;
  v200[1] = *((_QWORD *)v201 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v202 = v10[58];
  v203 = (_QWORD *)((char *)v7 + v202);
  v204 = &v8[v202];
  *v203 = *(_QWORD *)v204;
  v203[1] = *((_QWORD *)v204 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v205 = v10[59];
  v206 = (char *)v7 + v205;
  v207 = &v8[v205];
  v208 = *(_QWORD *)v207;
  v206[8] = v207[8];
  *(_QWORD *)v206 = v208;
  v209 = v10[60];
  v210 = (_QWORD *)((char *)v7 + v209);
  v211 = &v8[v209];
  *v210 = *(_QWORD *)v211;
  v210[1] = *((_QWORD *)v211 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v10[61]) = v8[v10[61]];
  v212 = v10[62];
  v213 = (char *)v7 + v212;
  v214 = &v8[v212];
  v215 = sub_1AD63B084();
  v216 = *(_QWORD *)(v215 - 8);
  v217 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v216 + 48);
  v218 = v217(v213, 1, v215);
  v219 = v217(v214, 1, v215);
  if (!v218)
  {
    if (!v219)
    {
      (*(void (**)(char *, char *, uint64_t))(v216 + 24))(v213, v214, v215);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v216 + 8))(v213, v215);
    goto LABEL_18;
  }
  if (v219)
  {
LABEL_18:
    v220 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v213, v214, v215);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
LABEL_19:
  v221 = v10[63];
  v222 = (_QWORD *)((char *)v7 + v221);
  v223 = &v8[v221];
  *v222 = *(_QWORD *)v223;
  v222[1] = *((_QWORD *)v223 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v10[64]) = v8[v10[64]];
  v224 = v10[65];
  v225 = (_QWORD *)((char *)v7 + v224);
  v226 = &v8[v224];
  *v225 = *(_QWORD *)v226;
  v225[1] = *((_QWORD *)v226 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v227 = v10[66];
  v228 = (char *)v7 + v227;
  v229 = &v8[v227];
  v230 = *(_QWORD *)v229;
  v228[8] = v229[8];
  *(_QWORD *)v228 = v230;
  v231 = v10[67];
  v232 = (char *)v7 + v231;
  v233 = &v8[v231];
  v234 = *(_QWORD *)v233;
  v232[8] = v233[8];
  *(_QWORD *)v232 = v234;
  v235 = v10[68];
  v236 = (char *)v7 + v235;
  v237 = &v8[v235];
  v238 = *(_QWORD *)v237;
  v236[8] = v237[8];
  *(_QWORD *)v236 = v238;
  v239 = v10[69];
  v240 = (char *)v7 + v239;
  v241 = &v8[v239];
  v242 = *(_QWORD *)v241;
  v240[8] = v241[8];
  *(_QWORD *)v240 = v242;
  *((_BYTE *)v7 + v10[70]) = v8[v10[70]];
  v243 = v10[71];
  v244 = (char *)v7 + v243;
  v245 = &v8[v243];
  v246 = *(_QWORD *)v245;
  v244[8] = v245[8];
  *(_QWORD *)v244 = v246;
  v247 = v10[72];
  v248 = (char *)v7 + v247;
  v249 = &v8[v247];
  v250 = *(_QWORD *)v249;
  v248[8] = v249[8];
  *(_QWORD *)v248 = v250;
  v251 = v10[73];
  v252 = (char *)v7 + v251;
  v253 = &v8[v251];
  v254 = *(_QWORD *)v253;
  v252[8] = v253[8];
  *(_QWORD *)v252 = v254;
  v255 = v10[74];
  v256 = (char *)v7 + v255;
  v257 = &v8[v255];
  v258 = *(_QWORD *)v257;
  v256[8] = v257[8];
  *(_QWORD *)v256 = v258;
  v259 = v10[75];
  v260 = (char *)v7 + v259;
  v261 = &v8[v259];
  v262 = *(_QWORD *)v261;
  v260[8] = v261[8];
  *(_QWORD *)v260 = v262;
  *((_BYTE *)v7 + v10[76]) = v8[v10[76]];
  v263 = v10[77];
  v264 = (char *)v7 + v263;
  v265 = &v8[v263];
  v266 = *(_QWORD *)v265;
  v264[8] = v265[8];
  *(_QWORD *)v264 = v266;
  *((_BYTE *)v7 + v10[78]) = v8[v10[78]];
  *((_BYTE *)v7 + v10[79]) = v8[v10[79]];
  *((_BYTE *)v7 + v10[80]) = v8[v10[80]];
  v267 = v10[81];
  v268 = (char *)v7 + v267;
  v269 = &v8[v267];
  v270 = *(_QWORD *)v269;
  v268[8] = v269[8];
  *(_QWORD *)v268 = v270;
  *((_BYTE *)v7 + v10[82]) = v8[v10[82]];
  *((_BYTE *)v7 + v10[83]) = v8[v10[83]];
  v271 = v10[84];
  v272 = (char *)v7 + v271;
  v273 = &v8[v271];
  v274 = *(_QWORD *)v273;
  v272[8] = v273[8];
  *(_QWORD *)v272 = v274;
  *((_BYTE *)v7 + v10[85]) = v8[v10[85]];
  *((_BYTE *)v7 + v10[86]) = v8[v10[86]];
  *((_BYTE *)v7 + v10[87]) = v8[v10[87]];
  *((_BYTE *)v7 + v10[88]) = v8[v10[88]];
  v275 = v10[89];
  v276 = (char *)v7 + v275;
  v277 = &v8[v275];
  v278 = *(_QWORD *)v277;
  v276[8] = v277[8];
  *(_QWORD *)v276 = v278;
  v279 = v10[90];
  v280 = (_QWORD *)((char *)v7 + v279);
  v281 = &v8[v279];
  *v280 = *(_QWORD *)v281;
  v280[1] = *((_QWORD *)v281 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for LargeImage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_OWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  *v5 = *(_OWORD *)((char *)a2 + v4);
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)a2 + v4 + 9);
  v7 = (int *)type metadata accessor for MediaMetadata();
  v8 = v7[5];
  v9 = (char *)v5 + v8;
  v10 = &v6[v8];
  v11 = sub_1AD63B03C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[6];
  v16 = (char *)v5 + v15;
  v17 = &v6[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = v7[7];
  v19 = (char *)v5 + v18;
  v20 = &v6[v18];
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v7[8];
  v22 = (char *)v5 + v21;
  v23 = &v6[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = v7[9];
  v25 = (char *)v5 + v24;
  v26 = &v6[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = v7[10];
  v28 = (char *)v5 + v27;
  v29 = &v6[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  *(_OWORD *)((char *)v5 + v7[11]) = *(_OWORD *)&v6[v7[11]];
  *(_OWORD *)((char *)v5 + v7[12]) = *(_OWORD *)&v6[v7[12]];
  *(_OWORD *)((char *)v5 + v7[13]) = *(_OWORD *)&v6[v7[13]];
  v30 = v7[14];
  v31 = (char *)v5 + v30;
  v32 = &v6[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  *((_BYTE *)v5 + v7[15]) = v6[v7[15]];
  v33 = v7[16];
  v34 = (char *)v5 + v33;
  v35 = &v6[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = v7[17];
  v37 = (char *)v5 + v36;
  v38 = &v6[v36];
  v37[8] = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = v7[18];
  v40 = (char *)v5 + v39;
  v41 = &v6[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  v42 = v7[19];
  v43 = (char *)v5 + v42;
  v44 = &v6[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  v45 = v7[20];
  v46 = (char *)v5 + v45;
  v47 = &v6[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  v48 = v7[21];
  v49 = (char *)v5 + v48;
  v50 = &v6[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v7[22];
  v52 = (char *)v5 + v51;
  v53 = &v6[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
  v54 = v7[23];
  v55 = (char *)v5 + v54;
  v56 = &v6[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  *(_OWORD *)((char *)v5 + v7[24]) = *(_OWORD *)&v6[v7[24]];
  *(_OWORD *)((char *)v5 + v7[25]) = *(_OWORD *)&v6[v7[25]];
  v57 = v7[26];
  v58 = (char *)v5 + v57;
  v59 = &v6[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v7[27];
  v61 = (char *)v5 + v60;
  v62 = &v6[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
  v63 = v7[28];
  v64 = (char *)v5 + v63;
  v65 = &v6[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v7[29];
  v67 = (char *)v5 + v66;
  v68 = &v6[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v68[8];
  v69 = v7[30];
  v70 = (char *)v5 + v69;
  v71 = &v6[v69];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  *((_BYTE *)v5 + v7[31]) = v6[v7[31]];
  *((_BYTE *)v5 + v7[32]) = v6[v7[32]];
  *(_OWORD *)((char *)v5 + v7[33]) = *(_OWORD *)&v6[v7[33]];
  v72 = v7[34];
  v73 = (char *)v5 + v72;
  v74 = &v6[v72];
  v73[8] = v74[8];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v75 = v7[35];
  v76 = (char *)v5 + v75;
  v77 = &v6[v75];
  *(_QWORD *)v76 = *(_QWORD *)v77;
  v76[8] = v77[8];
  v78 = v7[36];
  v79 = (char *)v5 + v78;
  v80 = &v6[v78];
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v79[8] = v80[8];
  v81 = v7[37];
  v82 = (char *)v5 + v81;
  v83 = &v6[v81];
  v82[8] = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v84 = v7[38];
  v85 = (char *)v5 + v84;
  v86 = &v6[v84];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v85[8] = v86[8];
  v87 = v7[39];
  v88 = (char *)v5 + v87;
  v89 = &v6[v87];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v88[8] = v89[8];
  v90 = v7[40];
  v91 = (char *)v5 + v90;
  v92 = &v6[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v92[8];
  v93 = v7[41];
  v94 = (char *)v5 + v93;
  v95 = &v6[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v94[8] = v95[8];
  *(_OWORD *)((char *)v5 + v7[42]) = *(_OWORD *)&v6[v7[42]];
  *(_OWORD *)((char *)v5 + v7[43]) = *(_OWORD *)&v6[v7[43]];
  *(_OWORD *)((char *)v5 + v7[44]) = *(_OWORD *)&v6[v7[44]];
  *((_BYTE *)v5 + v7[45]) = v6[v7[45]];
  v96 = v7[46];
  v97 = (char *)v5 + v96;
  v98 = &v6[v96];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v97[8] = v98[8];
  v99 = v7[47];
  v100 = (char *)v5 + v99;
  v101 = &v6[v99];
  v100[8] = v101[8];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  *(_OWORD *)((char *)v5 + v7[48]) = *(_OWORD *)&v6[v7[48]];
  v102 = v7[49];
  v103 = (char *)v5 + v102;
  v104 = &v6[v102];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  v103[8] = v104[8];
  v105 = v7[50];
  v106 = (char *)v5 + v105;
  v107 = &v6[v105];
  v106[8] = v107[8];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v108 = v7[51];
  v109 = (char *)v5 + v108;
  v110 = &v6[v108];
  *(_QWORD *)v109 = *(_QWORD *)v110;
  v109[8] = v110[8];
  v111 = v7[52];
  v112 = (char *)v5 + v111;
  v113 = &v6[v111];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v112[8] = v113[8];
  *(_OWORD *)((char *)v5 + v7[53]) = *(_OWORD *)&v6[v7[53]];
  v114 = v7[54];
  v115 = (char *)v5 + v114;
  v116 = &v6[v114];
  if (v13(&v6[v114], 1, v11))
  {
    v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v115, v116, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v115, 0, 1, v11);
  }
  v118 = v7[55];
  v119 = (char *)v5 + v118;
  v120 = &v6[v118];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  v119[8] = v120[8];
  v121 = v7[56];
  v122 = (char *)v5 + v121;
  v123 = &v6[v121];
  v122[8] = v123[8];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  *(_OWORD *)((char *)v5 + v7[57]) = *(_OWORD *)&v6[v7[57]];
  *(_OWORD *)((char *)v5 + v7[58]) = *(_OWORD *)&v6[v7[58]];
  v124 = v7[59];
  v125 = (char *)v5 + v124;
  v126 = &v6[v124];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  v125[8] = v126[8];
  *(_OWORD *)((char *)v5 + v7[60]) = *(_OWORD *)&v6[v7[60]];
  *((_BYTE *)v5 + v7[61]) = v6[v7[61]];
  v127 = v7[62];
  v128 = (char *)v5 + v127;
  v129 = &v6[v127];
  v130 = sub_1AD63B084();
  v131 = *(_QWORD *)(v130 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
  {
    v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v128, v129, v130);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
  }
  *(_OWORD *)((char *)v5 + v7[63]) = *(_OWORD *)&v6[v7[63]];
  *((_BYTE *)v5 + v7[64]) = v6[v7[64]];
  *(_OWORD *)((char *)v5 + v7[65]) = *(_OWORD *)&v6[v7[65]];
  v133 = v7[66];
  v134 = (char *)v5 + v133;
  v135 = &v6[v133];
  v134[8] = v135[8];
  *(_QWORD *)v134 = *(_QWORD *)v135;
  v136 = v7[67];
  v137 = (char *)v5 + v136;
  v138 = &v6[v136];
  v137[8] = v138[8];
  *(_QWORD *)v137 = *(_QWORD *)v138;
  v139 = v7[68];
  v140 = (char *)v5 + v139;
  v141 = &v6[v139];
  v140[8] = v141[8];
  *(_QWORD *)v140 = *(_QWORD *)v141;
  v142 = v7[69];
  v143 = (char *)v5 + v142;
  v144 = &v6[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  v143[8] = v144[8];
  *((_BYTE *)v5 + v7[70]) = v6[v7[70]];
  v145 = v7[71];
  v146 = (char *)v5 + v145;
  v147 = &v6[v145];
  *(_QWORD *)v146 = *(_QWORD *)v147;
  v146[8] = v147[8];
  v148 = v7[72];
  v149 = (char *)v5 + v148;
  v150 = &v6[v148];
  v149[8] = v150[8];
  *(_QWORD *)v149 = *(_QWORD *)v150;
  v151 = v7[73];
  v152 = (char *)v5 + v151;
  v153 = &v6[v151];
  *(_QWORD *)v152 = *(_QWORD *)v153;
  v152[8] = v153[8];
  v154 = v7[74];
  v155 = (char *)v5 + v154;
  v156 = &v6[v154];
  *(_QWORD *)v155 = *(_QWORD *)v156;
  v155[8] = v156[8];
  v157 = v7[75];
  v158 = (char *)v5 + v157;
  v159 = &v6[v157];
  *(_QWORD *)v158 = *(_QWORD *)v159;
  v158[8] = v159[8];
  *((_BYTE *)v5 + v7[76]) = v6[v7[76]];
  v160 = v7[77];
  v161 = (char *)v5 + v160;
  v162 = &v6[v160];
  *(_QWORD *)v161 = *(_QWORD *)v162;
  v161[8] = v162[8];
  *((_BYTE *)v5 + v7[78]) = v6[v7[78]];
  *((_BYTE *)v5 + v7[79]) = v6[v7[79]];
  *((_BYTE *)v5 + v7[80]) = v6[v7[80]];
  v163 = v7[81];
  v164 = (char *)v5 + v163;
  v165 = &v6[v163];
  *(_QWORD *)v164 = *(_QWORD *)v165;
  v164[8] = v165[8];
  *((_BYTE *)v5 + v7[82]) = v6[v7[82]];
  *((_BYTE *)v5 + v7[83]) = v6[v7[83]];
  v166 = v7[84];
  v167 = (char *)v5 + v166;
  v168 = &v6[v166];
  *(_QWORD *)v167 = *(_QWORD *)v168;
  v167[8] = v168[8];
  *((_BYTE *)v5 + v7[85]) = v6[v7[85]];
  *((_BYTE *)v5 + v7[86]) = v6[v7[86]];
  *((_BYTE *)v5 + v7[87]) = v6[v7[87]];
  *((_BYTE *)v5 + v7[88]) = v6[v7[88]];
  v169 = v7[89];
  v170 = (char *)v5 + v169;
  v171 = &v6[v169];
  v170[8] = v171[8];
  *(_QWORD *)v170 = *(_QWORD *)v171;
  *(_OWORD *)((char *)v5 + v7[90]) = *(_OWORD *)&v6[v7[90]];
  return a1;
}

_QWORD *assignWithTake for LargeImage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  _QWORD *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(char *, uint64_t, uint64_t);
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  *v7 = *(_OWORD *)((char *)a2 + v6);
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + v6 + 9);
  v9 = (int *)type metadata accessor for MediaMetadata();
  v10 = v9[5];
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = sub_1AD63B03C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = v9[6];
  v20 = (char *)v7 + v19;
  v21 = &v8[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v9[7];
  v23 = (char *)v7 + v22;
  v24 = &v8[v22];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = v9[8];
  v26 = (char *)v7 + v25;
  v27 = &v8[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  v28 = v9[9];
  v29 = (char *)v7 + v28;
  v30 = &v8[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  v31 = v9[10];
  v32 = (char *)v7 + v31;
  v33 = &v8[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  v34 = v9[11];
  v35 = (_QWORD *)((char *)v7 + v34);
  v36 = &v8[v34];
  v38 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  v39 = v9[12];
  v40 = (_QWORD *)((char *)v7 + v39);
  v41 = &v8[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v44 = v9[13];
  v45 = (_QWORD *)((char *)v7 + v44);
  v46 = &v8[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  v49 = v9[14];
  v50 = (char *)v7 + v49;
  v51 = &v8[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v51[8];
  *((_BYTE *)v7 + v9[15]) = v8[v9[15]];
  v52 = v9[16];
  v53 = (char *)v7 + v52;
  v54 = &v8[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
  v55 = v9[17];
  v56 = (char *)v7 + v55;
  v57 = &v8[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v57[8];
  v58 = v9[18];
  v59 = (char *)v7 + v58;
  v60 = &v8[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v60[8];
  v61 = v9[19];
  v62 = (char *)v7 + v61;
  v63 = &v8[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  v64 = v9[20];
  v65 = (char *)v7 + v64;
  v66 = &v8[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v65[8] = v66[8];
  v67 = v9[21];
  v68 = (char *)v7 + v67;
  v69 = &v8[v67];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v68[8] = v69[8];
  v70 = v9[22];
  v71 = (char *)v7 + v70;
  v72 = &v8[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v72[8];
  v73 = v9[23];
  v74 = (char *)v7 + v73;
  v75 = &v8[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  v74[8] = v75[8];
  v76 = v9[24];
  v77 = (_QWORD *)((char *)v7 + v76);
  v78 = &v8[v76];
  v80 = *(_QWORD *)v78;
  v79 = *((_QWORD *)v78 + 1);
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease();
  v81 = v9[25];
  v82 = (_QWORD *)((char *)v7 + v81);
  v83 = &v8[v81];
  v85 = *(_QWORD *)v83;
  v84 = *((_QWORD *)v83 + 1);
  *v82 = v85;
  v82[1] = v84;
  swift_bridgeObjectRelease();
  v86 = v9[26];
  v87 = (char *)v7 + v86;
  v88 = &v8[v86];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v88[8];
  v89 = v9[27];
  v90 = (char *)v7 + v89;
  v91 = &v8[v89];
  v90[8] = v91[8];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v92 = v9[28];
  v93 = (char *)v7 + v92;
  v94 = &v8[v92];
  v93[8] = v94[8];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v95 = v9[29];
  v96 = (char *)v7 + v95;
  v97 = &v8[v95];
  v96[8] = v97[8];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = v9[30];
  v99 = (char *)v7 + v98;
  v100 = &v8[v98];
  v99[8] = v100[8];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *((_BYTE *)v7 + v9[31]) = v8[v9[31]];
  *((_BYTE *)v7 + v9[32]) = v8[v9[32]];
  v101 = v9[33];
  v102 = (_QWORD *)((char *)v7 + v101);
  v103 = &v8[v101];
  v105 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  *v102 = v105;
  v102[1] = v104;
  swift_bridgeObjectRelease();
  v106 = v9[34];
  v107 = (char *)v7 + v106;
  v108 = &v8[v106];
  *(_QWORD *)v107 = *(_QWORD *)v108;
  v107[8] = v108[8];
  v109 = v9[35];
  v110 = (char *)v7 + v109;
  v111 = &v8[v109];
  v110[8] = v111[8];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v112 = v9[36];
  v113 = (char *)v7 + v112;
  v114 = &v8[v112];
  v113[8] = v114[8];
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v115 = v9[37];
  v116 = (char *)v7 + v115;
  v117 = &v8[v115];
  v116[8] = v117[8];
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v118 = v9[38];
  v119 = (char *)v7 + v118;
  v120 = &v8[v118];
  v119[8] = v120[8];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  v121 = v9[39];
  v122 = (char *)v7 + v121;
  v123 = &v8[v121];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v122[8] = v123[8];
  v124 = v9[40];
  v125 = (char *)v7 + v124;
  v126 = &v8[v124];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  v125[8] = v126[8];
  v127 = v9[41];
  v128 = (char *)v7 + v127;
  v129 = &v8[v127];
  *(_QWORD *)v128 = *(_QWORD *)v129;
  v128[8] = v129[8];
  v130 = v9[42];
  v131 = (_QWORD *)((char *)v7 + v130);
  v132 = &v8[v130];
  v134 = *(_QWORD *)v132;
  v133 = *((_QWORD *)v132 + 1);
  *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease();
  v135 = v9[43];
  v136 = (_QWORD *)((char *)v7 + v135);
  v137 = &v8[v135];
  v139 = *(_QWORD *)v137;
  v138 = *((_QWORD *)v137 + 1);
  *v136 = v139;
  v136[1] = v138;
  swift_bridgeObjectRelease();
  v140 = v9[44];
  v141 = (_QWORD *)((char *)v7 + v140);
  v142 = &v8[v140];
  v144 = *(_QWORD *)v142;
  v143 = *((_QWORD *)v142 + 1);
  *v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v9[45]) = v8[v9[45]];
  v145 = v9[46];
  v146 = (char *)v7 + v145;
  v147 = &v8[v145];
  *(_QWORD *)v146 = *(_QWORD *)v147;
  v146[8] = v147[8];
  v148 = v9[47];
  v149 = (char *)v7 + v148;
  v150 = &v8[v148];
  *(_QWORD *)v149 = *(_QWORD *)v150;
  v149[8] = v150[8];
  v151 = v9[48];
  v152 = (_QWORD *)((char *)v7 + v151);
  v153 = &v8[v151];
  v155 = *(_QWORD *)v153;
  v154 = *((_QWORD *)v153 + 1);
  *v152 = v155;
  v152[1] = v154;
  swift_bridgeObjectRelease();
  v156 = v9[49];
  v157 = (char *)v7 + v156;
  v158 = &v8[v156];
  *(_QWORD *)v157 = *(_QWORD *)v158;
  v157[8] = v158[8];
  v159 = v9[50];
  v160 = (char *)v7 + v159;
  v161 = &v8[v159];
  v160[8] = v161[8];
  *(_QWORD *)v160 = *(_QWORD *)v161;
  v162 = v9[51];
  v163 = (char *)v7 + v162;
  v164 = &v8[v162];
  v163[8] = v164[8];
  *(_QWORD *)v163 = *(_QWORD *)v164;
  v165 = v9[52];
  v166 = (char *)v7 + v165;
  v167 = &v8[v165];
  *(_QWORD *)v166 = *(_QWORD *)v167;
  v166[8] = v167[8];
  v168 = v9[53];
  v169 = (_QWORD *)((char *)v7 + v168);
  v170 = &v8[v168];
  v172 = *(_QWORD *)v170;
  v171 = *((_QWORD *)v170 + 1);
  *v169 = v172;
  v169[1] = v171;
  swift_bridgeObjectRelease();
  v173 = v9[54];
  v174 = (char *)v7 + v173;
  v175 = &v8[v173];
  v176 = v15((char *)v7 + v173, 1, v13);
  v177 = v15(v175, 1, v13);
  if (v176)
  {
    if (!v177)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v174, v175, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v174, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v177)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v174, v13);
LABEL_12:
    v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED2E2D98);
    memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v174, v175, v13);
LABEL_13:
  v179 = v9[55];
  v180 = (char *)v7 + v179;
  v181 = &v8[v179];
  *(_QWORD *)v180 = *(_QWORD *)v181;
  v180[8] = v181[8];
  v182 = v9[56];
  v183 = (char *)v7 + v182;
  v184 = &v8[v182];
  v183[8] = v184[8];
  *(_QWORD *)v183 = *(_QWORD *)v184;
  v185 = v9[57];
  v186 = (_QWORD *)((char *)v7 + v185);
  v187 = &v8[v185];
  v189 = *(_QWORD *)v187;
  v188 = *((_QWORD *)v187 + 1);
  *v186 = v189;
  v186[1] = v188;
  swift_bridgeObjectRelease();
  v190 = v9[58];
  v191 = (_QWORD *)((char *)v7 + v190);
  v192 = &v8[v190];
  v194 = *(_QWORD *)v192;
  v193 = *((_QWORD *)v192 + 1);
  *v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease();
  v195 = v9[59];
  v196 = (char *)v7 + v195;
  v197 = &v8[v195];
  *(_QWORD *)v196 = *(_QWORD *)v197;
  v196[8] = v197[8];
  v198 = v9[60];
  v199 = (_QWORD *)((char *)v7 + v198);
  v200 = &v8[v198];
  v202 = *(_QWORD *)v200;
  v201 = *((_QWORD *)v200 + 1);
  *v199 = v202;
  v199[1] = v201;
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v9[61]) = v8[v9[61]];
  v203 = v9[62];
  v204 = (char *)v7 + v203;
  v205 = &v8[v203];
  v206 = sub_1AD63B084();
  v207 = *(_QWORD *)(v206 - 8);
  v208 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v207 + 48);
  v209 = v208(v204, 1, v206);
  v210 = v208(v205, 1, v206);
  if (!v209)
  {
    if (!v210)
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 40))(v204, v205, v206);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v207 + 8))(v204, v206);
    goto LABEL_18;
  }
  if (v210)
  {
LABEL_18:
    v211 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED2E7140);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v204, v205, v206);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
LABEL_19:
  v212 = v9[63];
  v213 = (_QWORD *)((char *)v7 + v212);
  v214 = &v8[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  *v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v9[64]) = v8[v9[64]];
  v217 = v9[65];
  v218 = (_QWORD *)((char *)v7 + v217);
  v219 = &v8[v217];
  v221 = *(_QWORD *)v219;
  v220 = *((_QWORD *)v219 + 1);
  *v218 = v221;
  v218[1] = v220;
  swift_bridgeObjectRelease();
  v222 = v9[66];
  v223 = (char *)v7 + v222;
  v224 = &v8[v222];
  *(_QWORD *)v223 = *(_QWORD *)v224;
  v223[8] = v224[8];
  v225 = v9[67];
  v226 = (char *)v7 + v225;
  v227 = &v8[v225];
  v226[8] = v227[8];
  *(_QWORD *)v226 = *(_QWORD *)v227;
  v228 = v9[68];
  v229 = (char *)v7 + v228;
  v230 = &v8[v228];
  v229[8] = v230[8];
  *(_QWORD *)v229 = *(_QWORD *)v230;
  v231 = v9[69];
  v232 = (char *)v7 + v231;
  v233 = &v8[v231];
  *(_QWORD *)v232 = *(_QWORD *)v233;
  v232[8] = v233[8];
  *((_BYTE *)v7 + v9[70]) = v8[v9[70]];
  v234 = v9[71];
  v235 = (char *)v7 + v234;
  v236 = &v8[v234];
  v235[8] = v236[8];
  *(_QWORD *)v235 = *(_QWORD *)v236;
  v237 = v9[72];
  v238 = (char *)v7 + v237;
  v239 = &v8[v237];
  *(_QWORD *)v238 = *(_QWORD *)v239;
  v238[8] = v239[8];
  v240 = v9[73];
  v241 = (char *)v7 + v240;
  v242 = &v8[v240];
  *(_QWORD *)v241 = *(_QWORD *)v242;
  v241[8] = v242[8];
  v243 = v9[74];
  v244 = (char *)v7 + v243;
  v245 = &v8[v243];
  *(_QWORD *)v244 = *(_QWORD *)v245;
  v244[8] = v245[8];
  v246 = v9[75];
  v247 = (char *)v7 + v246;
  v248 = &v8[v246];
  *(_QWORD *)v247 = *(_QWORD *)v248;
  v247[8] = v248[8];
  *((_BYTE *)v7 + v9[76]) = v8[v9[76]];
  v249 = v9[77];
  v250 = (char *)v7 + v249;
  v251 = &v8[v249];
  *(_QWORD *)v250 = *(_QWORD *)v251;
  v250[8] = v251[8];
  *((_BYTE *)v7 + v9[78]) = v8[v9[78]];
  *((_BYTE *)v7 + v9[79]) = v8[v9[79]];
  *((_BYTE *)v7 + v9[80]) = v8[v9[80]];
  v252 = v9[81];
  v253 = (char *)v7 + v252;
  v254 = &v8[v252];
  *(_QWORD *)v253 = *(_QWORD *)v254;
  v253[8] = v254[8];
  *((_BYTE *)v7 + v9[82]) = v8[v9[82]];
  *((_BYTE *)v7 + v9[83]) = v8[v9[83]];
  v255 = v9[84];
  v256 = (char *)v7 + v255;
  v257 = &v8[v255];
  *(_QWORD *)v256 = *(_QWORD *)v257;
  v256[8] = v257[8];
  *((_BYTE *)v7 + v9[85]) = v8[v9[85]];
  *((_BYTE *)v7 + v9[86]) = v8[v9[86]];
  *((_BYTE *)v7 + v9[87]) = v8[v9[87]];
  *((_BYTE *)v7 + v9[88]) = v8[v9[88]];
  v258 = v9[89];
  v259 = (char *)v7 + v258;
  v260 = &v8[v258];
  *(_QWORD *)v259 = *(_QWORD *)v260;
  v259[8] = v260[8];
  v261 = v9[90];
  v262 = (_QWORD *)((char *)v7 + v261);
  v263 = &v8[v261];
  v265 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  *v262 = v265;
  v262[1] = v264;
  swift_bridgeObjectRelease();
  return a1;
}

